void sub_100001940(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  void v2[6];

  if (a1)
  {
    v1 = a1 + 4;
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_1000035A4;
    v2[3] = &unk_100301C40;
    v2[4] = a1;
    v2[5] = "_updatePresenterAvailable";
    os_unfair_lock_lock(a1 + 4);
    sub_1000035A4((uint64_t)v2);
    os_unfair_lock_unlock(v1);
  }
}

void sub_1000019DC(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 20) = 0;
    v2 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;

    *(_OWORD *)(a1 + 32) = xmmword_1002844C0;
    id v3 = +[NFCALogger sharedCALogger];
    *(void *)(a1 + 8) = [v3 getTimestamp];
  }
}

void sub_100001EE8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v10 = 0;
    v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    v2 = (os_unfair_lock_s *)(a1 + 16);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v6 = sub_10000B974;
    v7 = &unk_1003015D8;
    uint64_t v8 = a1;
    v9 = &v10;
    id v3 = v5;
    os_unfair_lock_lock(v2);
    v6((uint64_t)v3);
    os_unfair_lock_unlock(v2);

    if (*((unsigned char *)v11 + 24))
    {
      id v4 = *(id *)(a1 + 40);
      [v4 sendDictionary:&off_100322B28];
    }
    _Block_object_dispose(&v10, 8);
  }
}

void sub_100001FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100001FF4(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 104) lock];
    if (*(_DWORD *)(a1 + 192) == 2) {
      *(_DWORD *)(a1 + 192) = 1;
    }
    if (*(unsigned char *)(a1 + 176))
    {
      *(void *)(a1 + 144) = mach_absolute_time();
      *(unsigned char *)(a1 + 176) = 0;
      *(unsigned char *)(a1 + 136) = 0;
      [*(id *)(a1 + 112) stopTimer];
    }
    [*(id *)(a1 + 104) unlock];
    if (!*(unsigned char *)(a1 + 137)) {
      [*(id *)(a1 + 264) driverFieldExited];
    }
    PLLogRegisteredEvent();
    id v2 = +[NFPowerAssertion sharedPowerAssertion];
    [v2 releasePowerAssertion:@"FieldDetect"];
  }
}

id sub_1000020C8(id a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)NFAssertPKWalletForegroundPresentment;
    a1 = [super initWithRemoteAssertion:v7];
    if (!a1)
    {
      if (a4)
      {
        id v9 = objc_alloc((Class)NSError);
        uint64_t v10 = +[NSString stringWithUTF8String:"nfcd"];
        v17[0] = NSLocalizedDescriptionKey;
        v11 = +[NSString stringWithUTF8String:"Unexpected Result"];
        v18[0] = v11;
        v18[1] = &off_10031B130;
        v17[1] = @"Line";
        v17[2] = @"Method";
        id v12 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("initWithRemoteAssertion:xpcConnection:outError:")];
        v18[2] = v12;
        v17[3] = NSDebugDescriptionErrorKey;
        id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("initWithRemoteAssertion:xpcConnection:outError:"), 24];
        v18[3] = v13;
        v14 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:4];
        *a4 = [v9 initWithDomain:v10 code:13 userInfo:v14];
      }
      a1 = 0;
    }
  }

  return a1;
}

void sub_10000241C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10000243C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 112);
    return (uint64_t)[v3 handleFieldReset];
  }
  return result;
}

void sub_10000292C(void *a1)
{
  if (a1)
  {
    int out_token = 0;
    if (notify_register_check("com.apple.request.hipuncap", &out_token))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v3 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_postCLTMNotification");
        uint64_t v7 = 45;
        if (isMetaClass) {
          uint64_t v7 = 43;
        }
        v3(3, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification, continue to post notification", v7, ClassName, Name, 6337);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v9 = object_getClass(a1);
        if (class_isMetaClass(v9)) {
          int v10 = 43;
        }
        else {
          int v10 = 45;
        }
        v11 = object_getClassName(a1);
        id v12 = sel_getName("_postCLTMNotification");
        *(_DWORD *)buf = 67109890;
        int v70 = v10;
        __int16 v71 = 2082;
        v72 = v11;
        __int16 v73 = 2082;
        v74 = v12;
        __int16 v75 = 1024;
        int v76 = 6337;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification, continue to post notification", buf, 0x22u);
      }

      uint64_t v13 = notify_post("com.apple.request.hipuncap");
      v14 = NFSharedSignpostLog();
      if (os_signpost_enabled(v14))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLTM_DEALY_PERFORMANCE_RESTRICTION_NOTIFICATION", "com.apple.request.hipuncap", buf, 2u);
      }

      if (v13)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v15 = NFLogGetLogger();
        if (v15)
        {
          objc_super v16 = (void (*)(uint64_t, const char *, ...))v15;
          v17 = object_getClass(a1);
          BOOL v18 = class_isMetaClass(v17);
          v60 = object_getClassName(a1);
          v64 = sel_getName("_postCLTMNotification");
          uint64_t v19 = 45;
          if (v18) {
            uint64_t v19 = 43;
          }
          v16(3, "%c[%{public}s %{public}s]:%i Failed to notify : %d", v19, v60, v64, 6341, v13);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v20 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_59;
        }
        v21 = object_getClass(a1);
        if (class_isMetaClass(v21)) {
          int v22 = 43;
        }
        else {
          int v22 = 45;
        }
        v23 = object_getClassName(a1);
        v24 = sel_getName("_postCLTMNotification");
        *(_DWORD *)buf = 67110146;
        int v70 = v22;
        __int16 v71 = 2082;
        v72 = v23;
        __int16 v73 = 2082;
        v74 = v24;
        __int16 v75 = 1024;
        int v76 = 6341;
        __int16 v77 = 1024;
        int v78 = v13;
        v25 = "%c[%{public}s %{public}s]:%i Failed to notify : %d";
LABEL_58:
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v25, buf, 0x28u);
LABEL_59:
      }
    }
    else
    {
      if (notify_set_state(out_token, 1uLL))
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v26 = NFLogGetLogger();
        if (v26)
        {
          v27 = (void (*)(uint64_t, const char *, ...))v26;
          v28 = object_getClass(a1);
          BOOL v29 = class_isMetaClass(v28);
          v30 = object_getClassName(a1);
          v65 = sel_getName("_postCLTMNotification");
          uint64_t v31 = 45;
          if (v29) {
            uint64_t v31 = 43;
          }
          v27(3, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification", v31, v30, v65, 6323);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v32 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          v33 = object_getClass(a1);
          if (class_isMetaClass(v33)) {
            int v34 = 43;
          }
          else {
            int v34 = 45;
          }
          v35 = object_getClassName(a1);
          v36 = sel_getName("_postCLTMNotification");
          *(_DWORD *)buf = 67109890;
          int v70 = v34;
          __int16 v71 = 2082;
          v72 = v35;
          __int16 v73 = 2082;
          v74 = v36;
          __int16 v75 = 1024;
          int v76 = 6323;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Fail to set client ID for CTLM notification", buf, 0x22u);
        }
      }
      uint64_t v37 = notify_post("com.apple.request.hipuncap");
      v38 = NFSharedSignpostLog();
      if (os_signpost_enabled(v38))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLTM_DEALY_PERFORMANCE_RESTRICTION_NOTIFICATION", "com.apple.request.hipuncap", buf, 2u);
      }

      if (v37)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v39 = NFLogGetLogger();
        if (v39)
        {
          v40 = (void (*)(uint64_t, const char *, ...))v39;
          v41 = object_getClass(a1);
          BOOL v42 = class_isMetaClass(v41);
          v61 = object_getClassName(a1);
          v66 = sel_getName("_postCLTMNotification");
          uint64_t v43 = 45;
          if (v42) {
            uint64_t v43 = 43;
          }
          v40(3, "%c[%{public}s %{public}s]:%i Failed to notify : %d", v43, v61, v66, 6329, v37);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v44 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v45 = object_getClass(a1);
          if (class_isMetaClass(v45)) {
            int v46 = 43;
          }
          else {
            int v46 = 45;
          }
          v47 = object_getClassName(a1);
          v48 = sel_getName("_postCLTMNotification");
          *(_DWORD *)buf = 67110146;
          int v70 = v46;
          __int16 v71 = 2082;
          v72 = v47;
          __int16 v73 = 2082;
          v74 = v48;
          __int16 v75 = 1024;
          int v76 = 6329;
          __int16 v77 = 1024;
          int v78 = v37;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to notify : %d", buf, 0x28u);
        }
      }
      uint64_t v49 = notify_cancel(out_token);
      if (v49)
      {
        uint64_t v50 = v49;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v51 = NFLogGetLogger();
        if (v51)
        {
          v52 = (void (*)(uint64_t, const char *, ...))v51;
          v53 = object_getClass(a1);
          BOOL v54 = class_isMetaClass(v53);
          v62 = object_getClassName(a1);
          v67 = sel_getName("_postCLTMNotification");
          uint64_t v55 = 45;
          if (v54) {
            uint64_t v55 = 43;
          }
          v52(3, "%c[%{public}s %{public}s]:%i Failed to cancel notify : %d", v55, v62, v67, 6334, v50);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v20 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_59;
        }
        v56 = object_getClass(a1);
        if (class_isMetaClass(v56)) {
          int v57 = 43;
        }
        else {
          int v57 = 45;
        }
        v58 = object_getClassName(a1);
        v59 = sel_getName("_postCLTMNotification");
        *(_DWORD *)buf = 67110146;
        int v70 = v57;
        __int16 v71 = 2082;
        v72 = v58;
        __int16 v73 = 2082;
        v74 = v59;
        __int16 v75 = 1024;
        int v76 = 6334;
        __int16 v77 = 1024;
        int v78 = v50;
        v25 = "%c[%{public}s %{public}s]:%i Failed to cancel notify : %d";
        goto LABEL_58;
      }
    }
  }
}

void sub_1000030FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_100003110(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = *(id *)(a1 + 120);
  uint64_t v3 = 1;
  if (([v2 isAsserted:1] & 1) == 0)
  {
    id v4 = *(id *)(a1 + 120);
    uint64_t v3 = (uint64_t)[v4 isAsserted:2];
  }
  return v3;
}

void *sub_100003184(void *result, unint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (a2 < 3)
    {
      return (void *)(*((unsigned char *)result + a2 + 8) != 0);
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        v5 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v3);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v3);
        Name = sel_getName("isAsserted:");
        uint64_t v8 = 45;
        if (isMetaClass) {
          uint64_t v8 = 43;
        }
        v5(3, "%c[%{public}s %{public}s]:%i Invalid type: %lu", v8, ClassName, Name, 55, a2);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = object_getClass(v3);
        if (class_isMetaClass(v10)) {
          int v11 = 43;
        }
        else {
          int v11 = 45;
        }
        *(_DWORD *)buf = 67110146;
        int v15 = v11;
        __int16 v16 = 2082;
        v17 = object_getClassName(v3);
        __int16 v18 = 2082;
        uint64_t v19 = sel_getName("isAsserted:");
        __int16 v20 = 1024;
        int v21 = 55;
        __int16 v22 = 2048;
        unint64_t v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid type: %lu", buf, 0x2Cu);
      }

      return 0;
    }
  }
  return result;
}

void sub_100003488(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3032000000;
  id v9 = sub_10000B7E8;
  int v10 = sub_100052EC8;
  id v11 = (id)objc_opt_new();
  id v4 = *(void **)(*(void *)(a1 + 32) + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10000A5A4;
  v5[3] = &unk_100301D88;
  v5[4] = &v6;
  [v4 enumerateObjectsUsingBlock:v5];
  [v3 setPredicates:v7[5]];
  _Block_object_dispose(&v6, 8);
}

void sub_10000358C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000035A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v3 > 4)
  {
    uint64_t v5 = 0;
    if (*(unsigned char *)(v2 + 32))
    {
LABEL_6:
      *(unsigned char *)(v2 + 32) = v5;
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 33)) {
          uint64_t v5 = 0;
        }
        else {
          uint64_t v5 = v5;
        }
      }
      goto LABEL_10;
    }
LABEL_26:
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v21 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v24 = 45;
      if (isMetaClass) {
        uint64_t v24 = 43;
      }
      v21(6, "%c[%{public}s %{public}s]:%i No change (%{public}d)", v24, ClassName, Name, 154, v5);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v26)) {
        int v27 = 43;
      }
      else {
        int v27 = 45;
      }
      v28 = object_getClassName(*(id *)(a1 + 32));
      BOOL v29 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      int v34 = v27;
      __int16 v35 = 2082;
      v36 = v28;
      __int16 v37 = 2082;
      v38 = v29;
      __int16 v39 = 1024;
      int v40 = 154;
      __int16 v41 = 1026;
      int v42 = v5;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No change (%{public}d)", buf, 0x28u);
    }

    return;
  }
  id v4 = [*(id *)(v2 + qword_100283690[v3]) isEligibleForDoubleClick];
  uint64_t v5 = (uint64_t)v4;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (((v4 ^ (*(unsigned char *)(v2 + 32) != 0)) & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_6;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = 0;
    goto LABEL_26;
  }
  uint64_t v5 = 1;
LABEL_10:
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v7 = NFLogGetLogger();
  if (v7)
  {
    uint64_t v8 = (void (*)(uint64_t, const char *, ...))v7;
    id v9 = object_getClass(*(id *)(a1 + 32));
    BOOL v10 = class_isMetaClass(v9);
    id v11 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v31 = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v12 = 45;
    if (v10) {
      uint64_t v12 = 43;
    }
    v8(5, "%c[%{public}s %{public}s]:%i Consumer available=%{public}d, domain=%{public}lu", v12, v11, v31, 162, v5, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v13 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14)) {
      int v15 = 43;
    }
    else {
      int v15 = 45;
    }
    __int16 v16 = object_getClassName(*(id *)(a1 + 32));
    v17 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110402;
    int v34 = v15;
    __int16 v35 = 2082;
    v36 = v16;
    __int16 v37 = 2082;
    v38 = v17;
    __int16 v39 = 1024;
    int v40 = 162;
    __int16 v41 = 1026;
    int v42 = v5;
    __int16 v43 = 2050;
    unint64_t v44 = v3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Consumer available=%{public}d, domain=%{public}lu", buf, 0x32u);
  }

  uint64_t v18 = *(void *)(a1 + 32);
  if (v18) {
    uint64_t v19 = *(void **)(v18 + 64);
  }
  else {
    uint64_t v19 = 0;
  }
  [v19 setBool:v5 forKey:@"walletDoubleButtonPressedConsumerAvailable"];
}

void sub_100003914(void *a1)
{
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      unint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("assertPKForegroundPresentment");
      uint64_t v7 = 45;
      if (isMetaClass) {
        uint64_t v7 = 43;
      }
      v3(6, "%c[%{public}s %{public}s]:%i ", v7, ClassName, Name, 355);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = object_getClass(a1);
      if (class_isMetaClass(v9)) {
        int v10 = 43;
      }
      else {
        int v10 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v16 = v10;
      __int16 v17 = 2082;
      uint64_t v18 = object_getClassName(a1);
      __int16 v19 = 2082;
      __int16 v20 = sel_getName("assertPKForegroundPresentment");
      __int16 v21 = 1024;
      int v22 = 355;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    NSKeyValueChangeKey v13 = NSKeyValueChangeNewKey;
    v14 = &off_10031A4D0;
    id v11 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    [a1 observeValueForKeyPath:0 ofObject:0 change:v11 context:off_100344D28];
  }
}

void sub_100003AF4(uint64_t a1)
{
  uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.field.coalescingTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(void *)state = 0;
  *(void *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Field coalesing timer expired", "-[NFDriverWrapper initWithQueue:]_block_invoke", 191);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)state = 136446466;
    *(void *)&state[4] = "-[NFDriverWrapper initWithQueue:]_block_invoke";
    *(_WORD *)&state[12] = 1024;
    *(_DWORD *)&state[14] = 191;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Field coalesing timer expired", state, 0x12u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_100001FF4((uint64_t)WeakRetained);
}

void sub_100003C44(void *a1, char *name)
{
  if (a1)
  {
    uint64_t v4 = notify_post(name);
    if (v4)
    {
      uint64_t v5 = v4;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        uint64_t v18 = sel_getName("_postEvent:");
        uint64_t v11 = 45;
        if (isMetaClass) {
          uint64_t v11 = 43;
        }
        v7(3, "%c[%{public}s %{public}s]:%i Failed to notify %s: %d", v11, ClassName, v18, 2682, name, v5);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        NSKeyValueChangeKey v13 = object_getClass(a1);
        if (class_isMetaClass(v13)) {
          int v14 = 43;
        }
        else {
          int v14 = 45;
        }
        *(_DWORD *)buf = 67110402;
        int v20 = v14;
        __int16 v21 = 2082;
        int v22 = object_getClassName(a1);
        __int16 v23 = 2082;
        uint64_t v24 = sel_getName("_postEvent:");
        __int16 v25 = 1024;
        int v26 = 2682;
        __int16 v27 = 2080;
        v28 = name;
        __int16 v29 = 1024;
        int v30 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to notify %s: %d", buf, 0x32u);
      }
    }
    int v15 = +[NFSecureXPCEventPublisherManager sharedManager];
    int v16 = [v15 wallet];
    id v17 = [objc_alloc((Class)NSString) initWithUTF8String:name];
    [v16 sendSimpleEvent:v17];
  }
}

BOOL sub_10000409C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!v3)
  {
LABEL_14:
    BOOL v5 = 0;
    goto LABEL_15;
  }
  if ([v3 integerValueForField:65539] != (id)1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_screenStateFromEvent:");
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v7(4, "%c[%{public}s %{public}s]:%i Ignore unexpected touch event", v11, ClassName, Name, 197);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      NSKeyValueChangeKey v13 = object_getClass(a1);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v18 = v14;
      __int16 v19 = 2082;
      int v20 = object_getClassName(a1);
      __int16 v21 = 2082;
      int v22 = sel_getName("_screenStateFromEvent:");
      __int16 v23 = 1024;
      int v24 = 197;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Ignore unexpected touch event", buf, 0x22u);
    }

    goto LABEL_14;
  }
  BOOL v5 = *(unsigned char *)[v4 dataValueForField:65540] != 0;
LABEL_15:

  return v5;
}

void sub_10000427C(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 8))
  {
    uint64_t v2 = +[NFCALogger sharedCALogger];
    id v3 = [v2 getDurationFrom:*(void *)(a1 + 8)];

    v16[0] = @"duration";
    uint64_t v4 = +[NSNumber numberWithUnsignedInt:v3];
    v17[0] = v4;
    v16[1] = @"technology";
    BOOL v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 16)];
    v17[1] = v5;
    v16[2] = @"ECPInformation";
    uint64_t v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 20)];
    uint64_t v7 = (void *)v6;
    CFStringRef v8 = *(const __CFString **)(a1 + 24);
    if (!v8) {
      CFStringRef v8 = &stru_100309C40;
    }
    v17[2] = v6;
    v17[3] = v8;
    v16[3] = @"ECPPayload";
    v16[4] = @"ECPType";
    id v9 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 32)];
    void v17[4] = v9;
    v16[5] = @"terminalSubType";
    int v10 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 36)];
    v17[5] = v10;
    v16[6] = @"terminalType";
    uint64_t v11 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
    v17[6] = v11;
    v16[7] = @"terminalMode";
    uint64_t v12 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
    v17[7] = v12;
    NSKeyValueChangeKey v13 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:8];

    int v14 = +[NFCALogger sharedCALogger];
    [v14 postCAEventFor:@"com.apple.nfcd.fieldTechnology" eventInput:v13];

    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 20) = 0;
    int v15 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;

    *(_OWORD *)(a1 + 32) = xmmword_1002844C0;
  }
}

void sub_100004D00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "app suspension state changed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(void *)state = 0;
  *(void *)&state[8] = 0;
  os_activity_scope_enter(v6, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = v5;
  id v9 = v8;
  if (WeakRetained)
  {
    int v10 = [v8 process];
    id v11 = [v10 pid];

    uint64_t v12 = [v9 state];
    unsigned int v13 = [v12 taskState];

    int v14 = [v9 state];
    int v40 = [v14 endowmentNamespaces];

    unsigned __int8 v15 = [v40 containsObject:@"com.apple.frontboard.visibility"];
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
    {
      Class = object_getClass(WeakRetained);
      if (class_isMetaClass(Class)) {
        uint64_t v18 = 43;
      }
      else {
        uint64_t v18 = 45;
      }
      ClassName = object_getClassName(WeakRetained);
      Name = sel_getName("_applicationStateChanged:");
      Logger(6, "%c[%{public}s %{public}s]:%i state=%d for pid %d visibility = %{public}@", v18, ClassName, Name, 211, v13, v11, v40);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = object_getClass(WeakRetained);
      if (class_isMetaClass(v22)) {
        int v23 = 43;
      }
      else {
        int v23 = 45;
      }
      int v24 = object_getClassName(WeakRetained);
      __int16 v25 = sel_getName("_applicationStateChanged:");
      *(_DWORD *)state = 67110658;
      *(_DWORD *)&state[4] = v23;
      *(_WORD *)&state[8] = 2082;
      *(void *)&state[10] = v24;
      __int16 v51 = 2082;
      v52 = v25;
      __int16 v53 = 1024;
      int v54 = 211;
      __int16 v55 = 1024;
      unsigned int v56 = v13;
      __int16 v57 = 1024;
      int v58 = (int)v11;
      __int16 v59 = 2114;
      v60 = v40;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i state=%d for pid %d visibility = %{public}@", state, 0x38u);
    }

    if (v13 == 3 || v13 == 4 && (v15 & 1) == 0)
    {
      int v26 = objc_opt_new();
      id v27 = WeakRetained[2];
      objc_sync_enter(v27);
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      id v28 = WeakRetained[2];
      id v29 = [v28 countByEnumeratingWithState:&v45 objects:state count:16];
      if (v29)
      {
        uint64_t v30 = *(void *)v46;
        do
        {
          for (i = 0; i != v29; i = (char *)i + 1)
          {
            if (*(void *)v46 != v30) {
              objc_enumerationMutation(v28);
            }
            v32 = *(void **)(*((void *)&v45 + 1) + 8 * i);
            if ([v32 processIdentifier] == v11) {
              [v26 addObject:v32];
            }
          }
          id v29 = [v28 countByEnumeratingWithState:&v45 objects:state count:16];
        }
        while (v29);
      }

      objc_sync_exit(v27);
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id v33 = v26;
      id v34 = [v33 countByEnumeratingWithState:&v41 objects:v49 count:16];
      if (v34)
      {
        uint64_t v35 = *(void *)v42;
        do
        {
          for (j = 0; j != v34; j = (char *)j + 1)
          {
            if (*(void *)v42 != v35) {
              objc_enumerationMutation(v33);
            }
            uint64_t v37 = *(void *)(*((void *)&v41 + 1) + 8 * (void)j);
            id v38 = objc_loadWeakRetained(WeakRetained + 3);

            if (v38)
            {
              id v39 = objc_loadWeakRetained(WeakRetained + 3);
              [v39 clientAppIsSuspended:v37];
            }
          }
          id v34 = [v33 countByEnumeratingWithState:&v41 objects:v49 count:16];
        }
        while (v34);
      }
    }
  }
}

void sub_10000513C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100005160(uint64_t a1, double a2)
{
  uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "NFCC temperature ntf", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v4, &v5);
  os_activity_scope_leave(&v5);

  if (a1) {
    [*(id *)(a1 + 248) handleTemperatureChange:a2];
  }
}

id sub_10000570C(void *a1)
{
  id v1 = a1;
  mach_absolute_time();
  id VendorDefinedEvent = (id)IOHIDEventCreateVendorDefinedEvent();
  if (VendorDefinedEvent)
  {
    id v3 = (void *)IOHIDServiceClientCopyEvent();
    CFRelease(VendorDefinedEvent);
    if (v3)
    {
      if (sub_100007CB0(v3)) {
        id VendorDefinedEvent = v3;
      }
      else {
        id VendorDefinedEvent = 0;
      }
    }
    else
    {
      id VendorDefinedEvent = 0;
    }
  }

  return VendorDefinedEvent;
}

id sub_1000057C8(void *a1, uint64_t a2)
{
  return [a1 driverDidDetectFieldChange:a2];
}

void sub_1000057D0(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v4 = "NFCC field on";
  }
  else {
    uint64_t v4 = "NFCC field off";
  }
  os_activity_scope_state_s v5 = _os_activity_create((void *)&_mh_execute_header, v4, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(void *)state = 0;
  *(void *)&state[8] = 0;
  os_activity_scope_enter(v5, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  if (a1)
  {
    if (*(unsigned char *)(a1 + 137))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("driverDidDetectFieldChange:");
        uint64_t v11 = 45;
        if (isMetaClass) {
          uint64_t v11 = 43;
        }
        v7(3, "%c[%{public}s %{public}s]:%i Driver session is closed", v11, ClassName, Name, 662);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        unsigned int v13 = object_getClass((id)a1);
        if (class_isMetaClass(v13)) {
          int v14 = 43;
        }
        else {
          int v14 = 45;
        }
        unsigned __int8 v15 = object_getClassName((id)a1);
        int v16 = sel_getName("driverDidDetectFieldChange:");
        *(_DWORD *)state = 67109890;
        *(_DWORD *)&state[4] = v14;
        *(_WORD *)&state[8] = 2082;
        *(void *)&state[10] = v15;
        __int16 v24 = 2082;
        __int16 v25 = v16;
        __int16 v26 = 1024;
        int v27 = 662;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Driver session is closed", state, 0x22u);
      }
    }
    else
    {
      [*(id *)(a1 + 104) lock];
      id v17 = *(void **)(a1 + 120);
      if (!a2)
      {
        [v17 startTimer:0.5];
        [*(id *)(a1 + 104) unlock];
        [*(id *)(a1 + 248) handleFieldReset];
        return;
      }
      [v17 stopTimer];
      if (*(_DWORD *)(a1 + 192) == 1) {
        *(_DWORD *)(a1 + 192) = 2;
      }
      if (*(unsigned char *)(a1 + 176))
      {
        [*(id *)(a1 + 104) unlock];
        return;
      }
      *(unsigned char *)(a1 + 176) = 1;
      *(void *)(a1 + 152) = mach_absolute_time();
      PLLogRegisteredEvent();
      [*(id *)(a1 + 112) startTimer:60.0 leeway:0.5];
      uint64_t v18 = +[NFPowerAssertion sharedPowerAssertion];
      [v18 holdPowerAssertion:@"FieldDetect"];

      mach_absolute_time();
      unint64_t ElapsedTimeInMillisecondsFromMachTime = GetElapsedTimeInMillisecondsFromMachTime();
      int v20 = *(void **)(a1 + 160);
      if (v20)
      {
        if (*(void *)(a1 + 144) && ElapsedTimeInMillisecondsFromMachTime <= 0x3E8)
        {
          if (!*(unsigned char *)(a1 + 136))
          {
            *(unsigned char *)(a1 + 136) = 1;
            *(void *)(a1 + 144) = 0;
            [*(id *)(a1 + 104) unlock];
            [*(id *)(a1 + 264) driverFieldEntered];
            id v21 = [*(id *)(a1 + 160) copy];
            [v21 setCachedBeforeRFReset:1];
            [*(id *)(a1 + 248) handleFieldNotification:v21];

            return;
          }
        }
        else
        {
          *(unsigned char *)(a1 + 136) = 0;
          *(void *)(a1 + 160) = 0;
        }
      }
      *(void *)(a1 + 144) = 0;
      [*(id *)(a1 + 104) unlock];
      [*(id *)(a1 + 264) driverFieldEntered];
    }
  }
}

void sub_100005B74(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v7 = 45;
    if (isMetaClass) {
      uint64_t v7 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i Touch service stopped", v7, ClassName, Name, 94);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v9)) {
      int v10 = 43;
    }
    else {
      int v10 = 45;
    }
    uint64_t v11 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v12 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    int v16 = v10;
    __int16 v17 = 2082;
    uint64_t v18 = v11;
    __int16 v19 = 2082;
    int v20 = v12;
    __int16 v21 = 1024;
    int v22 = 94;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Touch service stopped", buf, 0x22u);
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    *(unsigned char *)(v13 + 8) = 0;
  }
}

void sub_100006524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006550(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v157 = a3;
  v152 = a4;
  self = (id *)a1;
  if (a1)
  {
    v149 = [v157 NF_whitelistChecker];
    if (-[_NFHardwareManager getPrimaryHardwareState]_0(a1) == 2)
    {
      id v6 = objc_alloc((Class)NFAssertionInternal);
      v178[0] = @"NFAssertionType";
      uint64_t v7 = +[NSNumber numberWithUnsignedInteger:a2];
      v179[0] = v7;
      v178[1] = @"NFAssertionPID";
      id v8 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v157 processIdentifier]);
      v179[1] = v8;
      v178[2] = @"NFAssertionTime";
      id v9 = +[NSDate now];
      v179[2] = v9;
      int v10 = +[NSDictionary dictionaryWithObjects:v179 forKeys:v178 count:3];
      id v11 = [v6 initWithDictionary:v10];

      uint64_t v12 = [v157 NF_userInfo];
      v153 = [v12 objectForKey:@"serviceType"];

      if (v153) {
        BOOL v13 = [v153 unsignedIntegerValue] == (id)2;
      }
      else {
        BOOL v13 = 0;
      }
      BOOL v16 = a2 == 4 && v13;
      id v159 = 0;
      id v155 = v11;
      id v148 = v157;
      __int16 v17 = [v148 NF_userInfo];
      uint64_t v18 = [v17 objectForKeyedSubscript:@"ClientName"];

      id v19 = [objc_alloc((Class)NSString) initWithFormat:@"%@,PID:%d", v18, [v148 processIdentifier]];
      switch(a2)
      {
        case 0:
          v147 = [(NFAsserter *)[NFAssertPowerUp alloc] initWithRemoteAssertion:v155];
          break;
        case 1:
          v147 = [(NFAsserter *)[NFAssertDontReset alloc] initWithRemoteAssertion:v155];
          break;
        case 2:
          v147 = [(NFAsserter *)[NFAssertPreventBackgroundTagReading alloc] initWithRemoteAssertion:v155];
          break;
        case 3:
          v147 = (NFAssertPowerUp *)sub_1001E1714((id *)[NFAssertPreventConnectionHandover alloc], v155, v19);
          break;
        case 4:
        case 6:
          v147 = (NFAssertPowerUp *)sub_100182D38((id *)[NFAssertSuppressPresentmentIntentToDefaultApp alloc], v155, v19);
          break;
        case 5:
          v147 = (NFAssertPowerUp *)sub_1000020C8([NFAssertPKWalletForegroundPresentment alloc], v155, v148, &v159);
          break;
        default:
          break;
      }

      id v151 = v159;
      if (v147)
      {
        if ([(NFAssertPowerUp *)v147 isEntitled:v148])
        {
          if ([(NFAssertPowerUp *)v147 isSupported])
          {
            if (v16
              && (int v20 = (id *)self[9], v21 = sub_100053730(v20, v148), v20, (v21 & 1) == 0))
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (Logger)
              {
                Class = object_getClass(self);
                if (class_isMetaClass(Class)) {
                  uint64_t v103 = 43;
                }
                else {
                  uint64_t v103 = 45;
                }
                ClassName = object_getClassName(self);
                Name = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
                Logger(6, "%c[%{public}s %{public}s]:%i Client is not foreground", v103, ClassName, Name, 133);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              v106 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
              {
                v107 = object_getClass(self);
                if (class_isMetaClass(v107)) {
                  int v108 = 43;
                }
                else {
                  int v108 = 45;
                }
                v109 = object_getClassName(self);
                v110 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
                *(_DWORD *)buf = 67109890;
                int v189 = v108;
                __int16 v190 = 2082;
                v191 = v109;
                __int16 v192 = 2082;
                v193 = v110;
                __int16 v194 = 1024;
                int v195 = 133;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Client is not foreground", buf, 0x22u);
              }

              id v111 = objc_alloc((Class)NSError);
              v112 = +[NSString stringWithUTF8String:"nfcd"];
              v170[0] = NSLocalizedDescriptionKey;
              v113 = +[NSString stringWithUTF8String:"Invalid State"];
              v171[0] = v113;
              v171[1] = &off_10031C948;
              v170[1] = @"Line";
              v170[2] = @"Method";
              id v114 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_sync_requestAssertion:xpcConnection:completion:")];
              v171[2] = v114;
              v170[3] = NSDebugDescriptionErrorKey;
              id v115 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_sync_requestAssertion:xpcConnection:completion:"), 134];
              v171[3] = v115;
              v116 = +[NSDictionary dictionaryWithObjects:v171 forKeys:v170 count:4];
              id v117 = [v111 initWithDomain:v112 code:12 userInfo:v116];
              v152[2](v152, 0, v117);
            }
            else
            {
              if (NFIsInternalBuild())
              {
                int v22 = v147;
                int v23 = (NFAssertPowerUp *)objc_opt_new();
                id v146 = objc_getProperty(self, v24, 176, 1);
                objc_sync_enter(v146);
                long long v164 = 0u;
                long long v165 = 0u;
                long long v166 = 0u;
                long long v167 = 0u;
                id obj = objc_getProperty(self, v25, 176, 1);
                id v26 = [obj countByEnumeratingWithState:&v164 objects:buf count:16];
                if (v26)
                {
                  uint64_t v27 = *(void *)v165;
                  do
                  {
                    for (i = 0; i != v26; i = (char *)i + 1)
                    {
                      if (*(void *)v165 != v27) {
                        objc_enumerationMutation(obj);
                      }
                      id v29 = [[*(id *)(*((void *)&v164 + 1) + 8 * i) NF_userInfo];
                      uint64_t v30 = [v29 objectForKeyedSubscript:@"assertions"];

                      long long v162 = 0u;
                      long long v163 = 0u;
                      long long v160 = 0u;
                      long long v161 = 0u;
                      id v31 = v30;
                      id v32 = [v31 countByEnumeratingWithState:&v160 objects:&v182 count:16];
                      if (v32)
                      {
                        uint64_t v33 = *(void *)v161;
                        do
                        {
                          for (j = 0; j != v32; j = (char *)j + 1)
                          {
                            if (*(void *)v161 != v33) {
                              objc_enumerationMutation(v31);
                            }
                            uint64_t v35 = *(void **)(*((void *)&v160 + 1) + 8 * (void)j);
                            if ([v35 isEqualType:v22]) {
                              [(NFAssertPowerUp *)v23 addObject:v35];
                            }
                          }
                          id v32 = [v31 countByEnumeratingWithState:&v160 objects:&v182 count:16];
                        }
                        while (v32);
                      }
                    }
                    id v26 = [obj countByEnumeratingWithState:&v164 objects:buf count:16];
                  }
                  while (v26);
                }

                objc_sync_exit(v146);
                if ([(NFAssertPowerUp *)v23 count])
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v36)
                  {
                    uint64_t v37 = object_getClass(self);
                    if (class_isMetaClass(v37)) {
                      uint64_t v38 = 43;
                    }
                    else {
                      uint64_t v38 = 45;
                    }
                    id v39 = object_getClassName(self);
                    int v40 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
                    v36(5, "%c[%{public}s %{public}s]:%i Existing assertions: %{public}@", v38, v39, v40, 144, v23);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  long long v41 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                  {
                    long long v42 = object_getClass(self);
                    if (class_isMetaClass(v42)) {
                      int v43 = 43;
                    }
                    else {
                      int v43 = 45;
                    }
                    long long v44 = object_getClassName(self);
                    long long v45 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
                    *(_DWORD *)buf = 67110146;
                    int v189 = v43;
                    __int16 v190 = 2082;
                    v191 = v44;
                    __int16 v192 = 2082;
                    v193 = v45;
                    __int16 v194 = 1024;
                    int v195 = 144;
                    __int16 v196 = 2114;
                    v197 = v23;
                    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Existing assertions: %{public}@", buf, 0x2Cu);
                  }
                }
              }
              uint64_t v182 = 0;
              v183 = &v182;
              uint64_t v184 = 0x3032000000;
              v185 = sub_10000B898;
              v186 = sub_10017F3A4;
              id v187 = 0;
              v158[0] = _NSConcreteStackBlock;
              v158[1] = 3221225472;
              v158[2] = sub_10000B964;
              v158[3] = &unk_100305F18;
              v158[4] = &v182;
              [(NFAssertPowerUp *)v147 onAssertWithCompletion:v158];
              if (v183[5])
              {
                id v47 = objc_alloc((Class)NSError);
                long long v48 = +[NSString stringWithUTF8String:"nfcd"];
                id v49 = [(id)v183[5] code];
                v168[0] = NSLocalizedDescriptionKey;
                if ((uint64_t)[(id)v183[5] code] > 70) {
                  uint64_t v50 = 71;
                }
                else {
                  uint64_t v50 = (uint64_t)[(id)v183[5] code];
                }
                v140 = +[NSString stringWithUTF8String:off_100305CD0[v50]];
                uint64_t v141 = v183[5];
                v169[0] = v140;
                v169[1] = v141;
                v168[1] = NSUnderlyingErrorKey;
                v168[2] = @"Line";
                v169[2] = &off_10031C960;
                v168[3] = @"Method";
                id v142 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_sync_requestAssertion:xpcConnection:completion:")];
                v169[3] = v142;
                v168[4] = NSDebugDescriptionErrorKey;
                id v143 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_sync_requestAssertion:xpcConnection:completion:"), 156];
                v169[4] = v143;
                v144 = +[NSDictionary dictionaryWithObjects:v169 forKeys:v168 count:5];
                id v145 = [v47 initWithDomain:v48 code:v49 userInfo:v144];
                v152[2](v152, 0, v145);
              }
              else
              {
                id v118 = objc_getProperty(self, v46, 176, 1);
                objc_sync_enter(v118);
                v119 = [v148 NF_userInfo];
                v120 = [v119 objectForKeyedSubscript:@"assertions"];
                BOOL v121 = v120 == 0;

                if (v121)
                {
                  v122 = objc_opt_new();
                  v123 = [v148 NF_userInfo];
                  [v123 setObject:v122 forKeyedSubscript:@"assertions"];
                }
                v124 = [v148 NF_userInfo];
                v125 = [v124 objectForKeyedSubscript:@"assertions"];

                [v125 addObject:v147];
                objc_sync_exit(v118);

                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v126 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v126)
                {
                  v127 = object_getClass(self);
                  if (class_isMetaClass(v127)) {
                    uint64_t v128 = 43;
                  }
                  else {
                    uint64_t v128 = 45;
                  }
                  v129 = object_getClassName(self);
                  v130 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
                  id v131 = [v148 processIdentifier];
                  v132 = [v149 clientName];
                  v126(6, "%c[%{public}s %{public}s]:%i Assertion %{public}@ requested from PID %d (%{public}@)", v128, v129, v130, 170, v147, v131, v132);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                v133 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
                {
                  v134 = object_getClass(self);
                  if (class_isMetaClass(v134)) {
                    int v135 = 43;
                  }
                  else {
                    int v135 = 45;
                  }
                  v136 = object_getClassName(self);
                  v137 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
                  unsigned int v138 = [v148 processIdentifier];
                  v139 = [v149 clientName];
                  *(_DWORD *)buf = 67110658;
                  int v189 = v135;
                  __int16 v190 = 2082;
                  v191 = v136;
                  __int16 v192 = 2082;
                  v193 = v137;
                  __int16 v194 = 1024;
                  int v195 = 170;
                  __int16 v196 = 2114;
                  v197 = v147;
                  __int16 v198 = 1024;
                  unsigned int v199 = v138;
                  __int16 v200 = 2114;
                  v201 = v139;
                  _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Assertion %{public}@ requested from PID %d (%{public}@)", buf, 0x3Cu);
                }
                if (a2 == 4)
                {
                  [v148 NF_setPresentmentIntentSuppressionHolder];
                }
                else if (a2 == 6)
                {
                  [v148 NF_setFDPresentmentIntentSuppressionHolder];
                }
                ((void (**)(id, id, id))v152)[2](v152, v155, 0);
              }
              _Block_object_dispose(&v182, 8);
            }
          }
          else
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v84 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v84)
            {
              v85 = object_getClass(self);
              if (class_isMetaClass(v85)) {
                uint64_t v86 = 43;
              }
              else {
                uint64_t v86 = 45;
              }
              v87 = object_getClassName(self);
              v88 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
              v84(6, "%c[%{public}s %{public}s]:%i Not supported", v86, v87, v88, 126);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v89 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
            {
              v90 = object_getClass(self);
              if (class_isMetaClass(v90)) {
                int v91 = 43;
              }
              else {
                int v91 = 45;
              }
              v92 = object_getClassName(self);
              v93 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
              *(_DWORD *)buf = 67109890;
              int v189 = v91;
              __int16 v190 = 2082;
              v191 = v92;
              __int16 v192 = 2082;
              v193 = v93;
              __int16 v194 = 1024;
              int v195 = 126;
              _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Not supported", buf, 0x22u);
            }

            id v94 = objc_alloc((Class)NSError);
            v95 = +[NSString stringWithUTF8String:"nfcd"];
            v172[0] = NSLocalizedDescriptionKey;
            v96 = +[NSString stringWithUTF8String:"Feature Not Supported"];
            v173[0] = v96;
            v173[1] = &off_10031C930;
            v172[1] = @"Line";
            v172[2] = @"Method";
            id v97 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_sync_requestAssertion:xpcConnection:completion:")];
            v173[2] = v97;
            v172[3] = NSDebugDescriptionErrorKey;
            id v98 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_sync_requestAssertion:xpcConnection:completion:"), 127];
            v173[3] = v98;
            v99 = +[NSDictionary dictionaryWithObjects:v173 forKeys:v172 count:4];
            id v100 = [v94 initWithDomain:v95 code:14 userInfo:v99];
            v152[2](v152, 0, v100);
          }
        }
        else
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v67)
          {
            v68 = object_getClass(self);
            if (class_isMetaClass(v68)) {
              uint64_t v69 = 43;
            }
            else {
              uint64_t v69 = 45;
            }
            int v70 = object_getClassName(self);
            __int16 v71 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
            v67(6, "%c[%{public}s %{public}s]:%i Not Entitled", v69, v70, v71, 120);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v72 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v73 = object_getClass(self);
            if (class_isMetaClass(v73)) {
              int v74 = 43;
            }
            else {
              int v74 = 45;
            }
            __int16 v75 = object_getClassName(self);
            int v76 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
            *(_DWORD *)buf = 67109890;
            int v189 = v74;
            __int16 v190 = 2082;
            v191 = v75;
            __int16 v192 = 2082;
            v193 = v76;
            __int16 v194 = 1024;
            int v195 = 120;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Not Entitled", buf, 0x22u);
          }

          id v77 = objc_alloc((Class)NSError);
          int v78 = +[NSString stringWithUTF8String:"nfcd"];
          v174[0] = NSLocalizedDescriptionKey;
          v79 = +[NSString stringWithUTF8String:"Not entitled"];
          v175[0] = v79;
          v175[1] = &off_10031C918;
          v174[1] = @"Line";
          v174[2] = @"Method";
          id v80 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_sync_requestAssertion:xpcConnection:completion:")];
          v175[2] = v80;
          v174[3] = NSDebugDescriptionErrorKey;
          id v81 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_sync_requestAssertion:xpcConnection:completion:"), 121];
          v175[3] = v81;
          v82 = +[NSDictionary dictionaryWithObjects:v175 forKeys:v174 count:4];
          id v83 = [v77 initWithDomain:v78 code:32 userInfo:v82];
          v152[2](v152, 0, v83);
        }
        unsigned __int8 v15 = v147;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v51)
        {
          v52 = object_getClass(self);
          if (class_isMetaClass(v52)) {
            uint64_t v53 = 43;
          }
          else {
            uint64_t v53 = 45;
          }
          int v54 = object_getClassName(self);
          __int16 v55 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
          v51(3, "%c[%{public}s %{public}s]:%i Resource allocation failed", v53, v54, v55, 113);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        unsigned int v56 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          __int16 v57 = object_getClass(self);
          if (class_isMetaClass(v57)) {
            int v58 = 43;
          }
          else {
            int v58 = 45;
          }
          __int16 v59 = object_getClassName(self);
          v60 = sel_getName("_sync_requestAssertion:xpcConnection:completion:");
          *(_DWORD *)buf = 67109890;
          int v189 = v58;
          __int16 v190 = 2082;
          v191 = v59;
          __int16 v192 = 2082;
          v193 = v60;
          __int16 v194 = 1024;
          int v195 = 113;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Resource allocation failed", buf, 0x22u);
        }

        id v61 = v151;
        if (!v151)
        {
          id v62 = objc_alloc((Class)NSError);
          v63 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v176 = NSLocalizedDescriptionKey;
          v64 = +[NSString stringWithUTF8String:"No resources"];
          v177 = v64;
          v65 = +[NSDictionary dictionaryWithObjects:&v177 forKeys:&v176 count:1];
          id v66 = [v62 initWithDomain:v63 code:34 userInfo:v65];

          id v61 = v66;
        }
        id v151 = v61;
        ((void (*)(void (**)(id, void, id), void))v152[2])(v152, 0);
        unsigned __int8 v15 = 0;
      }
    }
    else
    {
      id v14 = objc_alloc((Class)NSError);
      id v155 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v180 = NSLocalizedDescriptionKey;
      v153 = +[NSString stringWithUTF8String:"Unresponsive hardware"];
      v181 = v153;
      id v151 = +[NSDictionary dictionaryWithObjects:&v181 forKeys:&v180 count:1];
      unsigned __int8 v15 = (NFAssertPowerUp *)[v14 initWithDomain:v155 code:58 userInfo:v151];
      v152[2](v152, 0, v15);
    }
  }
}

void sub_100007B70(_Unwind_Exception *a1)
{
}

void sub_100007BD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && sub_100007CB0(v4))
  {
    BOOL v6 = sub_10000409C(WeakRetained, v4);
    if (v6) {
      uint64_t v7 = "touch sensor is ready";
    }
    else {
      uint64_t v7 = "touch sensor is not ready";
    }
    id v8 = _os_activity_create((void *)&_mh_execute_header, v7, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    v10.opaque[0] = 0;
    v10.opaque[1] = 0;
    os_activity_scope_enter(v8, &v10);
    os_activity_scope_leave(&v10);

    id v9 = objc_loadWeakRetained(WeakRetained + 2);
    [v9 touchSystemReady:v6];
  }
}

BOOL sub_100007CB0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  BOOL v3 = v1
    && [v1 type] == 1
    && [v2 integerValueForField:0x10000] == (id)65376
    && [v2 integerValueForField:65537] == (id)9;

  return v3;
}

void sub_100007D24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  os_activity_scope_state_s v5 = WeakRetained;
  if (WeakRetained)
  {
    *((unsigned char *)WeakRetained + _Block_object_dispose(&STACK[0x2B0], 8) = 1;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v5);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v5);
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v7(6, "%c[%{public}s %{public}s]:%i Touch service started", v11, ClassName, Name, 79);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v13 = object_getClass(v5);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      unsigned __int8 v15 = object_getClassName(v5);
      BOOL v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)id v34 = 2082;
      *(void *)&v34[2] = v15;
      __int16 v35 = 2082;
      v36 = v16;
      __int16 v37 = 1024;
      int v38 = 79;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Touch service started", buf, 0x22u);
    }

    id v17 = sub_10000570C(v3);
    BOOL v18 = sub_10000409C(v5, v17);
    BOOL v19 = v18;
    if (v18) {
      int v20 = "touch sensor is ready";
    }
    else {
      int v20 = "touch sensor is not ready";
    }
    char v21 = _os_activity_create((void *)&_mh_execute_header, v20, (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    *(void *)buf = 0;
    *(void *)id v34 = 0;
    os_activity_scope_enter(v21, (os_activity_scope_state_t)buf);
    os_activity_scope_leave((os_activity_scope_state_t)buf);

    int v22 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000BA80;
    block[3] = &unk_100301BC8;
    id v23 = v5;
    id v31 = v23;
    BOOL v32 = v19;
    dispatch_async(v22, block);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100005B74;
    v27[3] = &unk_100301C40;
    id v24 = v23;
    uint64_t v25 = *(void *)(a1 + 48);
    id v28 = v24;
    uint64_t v29 = v25;
    [v3 setRemovalHandler:v27];
  }
}

void sub_100008014(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    os_activity_scope_state_s v5 = [v3 NF_whitelistChecker];
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)a1);
      if (class_isMetaClass(Class)) {
        uint64_t v9 = 43;
      }
      else {
        uint64_t v9 = 45;
      }
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_sync_unregisterForCallbacks:");
      id v12 = [v4 processIdentifier];
      BOOL v13 = [v5 clientName];
      v7(6, "%c[%{public}s %{public}s]:%i Client %d (%{public}@) unregistered callback", v9, ClassName, Name, 3190, v12, v13);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v15 = object_getClass((id)a1);
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      id v17 = object_getClassName((id)a1);
      BOOL v18 = sel_getName("_sync_unregisterForCallbacks:");
      unsigned int v19 = [v4 processIdentifier];
      int v20 = [v5 clientName];
      *(_DWORD *)buf = 67110402;
      int v35 = v16;
      __int16 v36 = 2082;
      __int16 v37 = v17;
      __int16 v38 = 2082;
      id v39 = v18;
      __int16 v40 = 1024;
      int v41 = 3190;
      __int16 v42 = 1024;
      unsigned int v43 = v19;
      __int16 v44 = 2114;
      long long v45 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Client %d (%{public}@) unregistered callback", buf, 0x32u);
    }
    char v21 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (int)[v4 processIdentifier]);
    id v22 = *(id *)(a1 + 160);
    objc_sync_enter(v22);
    [*(id *)(a1 + 160) removeObjectForKey:v21];
    if (![*(id *)(a1 + 160) count] && *(void *)(a1 + 272))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23)
      {
        id v24 = object_getClass((id)a1);
        if (class_isMetaClass(v24)) {
          uint64_t v25 = 43;
        }
        else {
          uint64_t v25 = 45;
        }
        id v26 = object_getClassName((id)a1);
        uint64_t v27 = sel_getName("_sync_unregisterForCallbacks:");
        v23(6, "%c[%{public}s %{public}s]:%i releasing NFCD keep alive transaction", v25, v26, v27, 3198);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = object_getClass((id)a1);
        if (class_isMetaClass(v29)) {
          int v30 = 43;
        }
        else {
          int v30 = 45;
        }
        id v31 = object_getClassName((id)a1);
        BOOL v32 = sel_getName("_sync_unregisterForCallbacks:");
        *(_DWORD *)buf = 67109890;
        int v35 = v30;
        __int16 v36 = 2082;
        __int16 v37 = v31;
        __int16 v38 = 2082;
        id v39 = v32;
        __int16 v40 = 1024;
        int v41 = 3198;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i releasing NFCD keep alive transaction", buf, 0x22u);
      }

      uint64_t v33 = *(void **)(a1 + 272);
      *(void *)(a1 + 272) = 0;
    }
    objc_sync_exit(v22);
  }
}

void sub_1000083BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000092A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Block_object_dispose((const void *)(v2 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1000092D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  id v4 = v2;
  os_activity_scope_state_s v5 = v4;
  if (v1)
  {
    int v35 = [v4 NF_whitelistChecker];
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass((id)v1);
      if (class_isMetaClass(Class)) {
        uint64_t v9 = 43;
      }
      else {
        uint64_t v9 = 45;
      }
      ClassName = object_getClassName((id)v1);
      Name = sel_getName("_sync_registerForCallbacks:connection:");
      id v12 = [v5 processIdentifier];
      BOOL v13 = [v35 clientName];
      v7(6, "%c[%{public}s %{public}s]:%i Client %d (%{public}@) registered callback", v9, ClassName, Name, 3162, v12, v13);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v15 = object_getClass((id)v1);
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      id v17 = object_getClassName((id)v1);
      BOOL v18 = sel_getName("_sync_registerForCallbacks:connection:");
      unsigned int v19 = [v5 processIdentifier];
      int v20 = [v35 clientName];
      *(_DWORD *)buf = 67110402;
      int v37 = v16;
      __int16 v38 = 2082;
      id v39 = v17;
      __int16 v40 = 2082;
      int v41 = v18;
      __int16 v42 = 1024;
      int v43 = 3162;
      __int16 v44 = 1024;
      unsigned int v45 = v19;
      __int16 v46 = 2114;
      id v47 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Client %d (%{public}@) registered callback", buf, 0x32u);
    }
    char v21 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (int)[v5 processIdentifier]);
    id v22 = *(id *)(v1 + 160);
    objc_sync_enter(v22);
    [*(id *)(v1 + 160) setObject:v3 forKeyedSubscript:v21];
    objc_sync_exit(v22);

    if (!*(void *)(v1 + 272))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23)
      {
        id v24 = object_getClass((id)v1);
        if (class_isMetaClass(v24)) {
          uint64_t v25 = 43;
        }
        else {
          uint64_t v25 = 45;
        }
        id v26 = object_getClassName((id)v1);
        uint64_t v27 = sel_getName("_sync_registerForCallbacks:connection:");
        v23(6, "%c[%{public}s %{public}s]:%i creating NFCD keep alive transaction", v25, v26, v27, 3171);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = object_getClass((id)v1);
        if (class_isMetaClass(v29)) {
          int v30 = 43;
        }
        else {
          int v30 = 45;
        }
        id v31 = object_getClassName((id)v1);
        BOOL v32 = sel_getName("_sync_registerForCallbacks:connection:");
        *(_DWORD *)buf = 67109890;
        int v37 = v30;
        __int16 v38 = 2082;
        id v39 = v31;
        __int16 v40 = 2082;
        int v41 = v32;
        __int16 v42 = 1024;
        int v43 = 3171;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i creating NFCD keep alive transaction", buf, 0x22u);
      }

      uint64_t v33 = os_transaction_create();
      id v34 = *(void **)(v1 + 272);
      *(void *)(v1 + 272) = v33;
    }
    [v3 hwStateDidChange:-[_NFHardwareManager getPrimaryHardwareState]_0(v1)];
  }
}

void sub_1000096A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000096C4(uint64_t a1)
{
  if (-[_NFHardwareManager getPrimaryHardwareState]_0(*(void *)(a1 + 32)) == 2
    || -[_NFHardwareManager getPrimaryHardwareState]_0(*(void *)(a1 + 32)) == 5)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = objc_alloc((Class)NSError);
    os_activity_scope_state_s v5 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    BOOL v6 = +[NSString stringWithUTF8String:"Unresponsive hardware"];
    os_activity_scope_state_s v10 = v6;
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    id v8 = [v4 initWithDomain:v5 code:58 userInfo:v7];
    (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0, v8);
  }
}

void sub_100009858(uint64_t a1)
{
  if (-[_NFHardwareManager getPrimaryHardwareState]_0(*(void *)(a1 + 32)) == 2
    || -[_NFHardwareManager getPrimaryHardwareState]_0(*(void *)(a1 + 32)) == 5)
  {
    id v2 = *(id *)(a1 + 32);
    objc_sync_enter(v2);
    if (*(void *)(*(void *)(a1 + 32) + 40))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 40);
      uint64_t v3 = +[NSArray arrayWithObjects:&v10 count:1];
    }
    else
    {
      uint64_t v3 = objc_opt_new();
    }
    id v4 = (void *)v3;
    objc_sync_exit(v2);

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v5 = *(id *)(a1 + 32);
    objc_sync_enter(v5);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v11 = v6;
      id v8 = +[NSArray arrayWithObjects:&v11 count:1];
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

      objc_sync_exit(v5);
    }
    else
    {
      objc_sync_exit(v5);

      NSErrorUserInfoKey v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      v9();
    }
  }
}

void sub_100009A04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100009A24(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = -[_NFHardwareManager getPrimaryHardwareState]_0(*(void *)(a1 + 32));
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    id v8 = [[*(id *)(a1 + 40) NF_userInfo];
    NSErrorUserInfoKey v9 = [v8 objectForKeyedSubscript:@"ClientName"];
    uint64_t v10 = 45;
    if (isMetaClass) {
      uint64_t v10 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i Processing %{public}@ : HW state = %u", v10, ClassName, Name, 1618, v9, *(unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12)) {
      int v13 = 43;
    }
    else {
      int v13 = 45;
    }
    int v14 = object_getClassName(*(id *)(a1 + 32));
    unsigned __int8 v15 = sel_getName(*(SEL *)(a1 + 64));
    int v16 = [[*(id *)(a1 + 40) NF_userInfo];
    id v17 = [v16 objectForKeyedSubscript:@"ClientName"];
    int v18 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    *(_DWORD *)buf = 67110402;
    int v21 = v13;
    __int16 v22 = 2082;
    id v23 = v14;
    __int16 v24 = 2082;
    uint64_t v25 = v15;
    __int16 v26 = 1024;
    int v27 = 1618;
    __int16 v28 = 2114;
    uint64_t v29 = v17;
    __int16 v30 = 1024;
    int v31 = v18;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Processing %{public}@ : HW state = %u", buf, 0x32u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100009CB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(id *)(a1 + 16);
    objc_sync_enter(v4);
    [*(id *)(a1 + 16) addObject:v3];
    if (sub_10000A018())
    {
      if (*(void *)(a1 + 8))
      {
        sub_10000A0E8((void *)a1);
      }
      else
      {
        objc_initWeak(&location, (id)a1);
        uint64_t v20 = 0;
        int v21 = &v20;
        uint64_t v22 = 0x2050000000;
        int v13 = (void *)qword_1003472F0;
        uint64_t v23 = qword_1003472F0;
        if (!qword_1003472F0)
        {
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)uint64_t v25 = 3221225472;
          *(void *)&v25[8] = sub_100053C60;
          *(void *)&v25[16] = &unk_100301E40;
          *(void *)&v25[24] = &v20;
          sub_100053C60((uint64_t)buf);
          int v13 = (void *)v21[3];
        }
        id v14 = v13;
        _Block_object_dispose(&v20, 8);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_100052C4C;
        v17[3] = &unk_100301DD8;
        void v17[4] = a1;
        objc_copyWeak(&v18, &location);
        uint64_t v15 = [v14 monitorWithConfiguration:v17];
        int v16 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x2B0], 8) = v15;

        objc_destroyWeak(&v18);
        objc_destroyWeak(&location);
      }
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class = object_getClass((id)a1);
        if (class_isMetaClass(Class)) {
          uint64_t v7 = 43;
        }
        else {
          uint64_t v7 = 45;
        }
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("registerForStateChangesToConnection:");
        Logger(3, "%c[%{public}s %{public}s]:%i RB not available.", v7, ClassName, Name, 72);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = object_getClass((id)a1);
        if (class_isMetaClass(v11)) {
          int v12 = 43;
        }
        else {
          int v12 = 45;
        }
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v12;
        *(_WORD *)uint64_t v25 = 2082;
        *(void *)&v25[2] = object_getClassName((id)a1);
        *(_WORD *)&v25[10] = 2082;
        *(void *)&v25[12] = sel_getName("registerForStateChangesToConnection:");
        *(_WORD *)&v25[20] = 1024;
        *(_DWORD *)&v25[22] = 72;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i RB not available.", buf, 0x22u);
      }
    }
    objc_sync_exit(v4);
  }
}

void sub_100009FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
  _Block_object_dispose(&a21, 8);
  objc_destroyWeak(&location);
  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A018()
{
  if (!qword_100347740) {
    qword_100347740 = _sl_dlopen();
  }
  return qword_100347740;
}

void *sub_10000A0E8(void *result)
{
  if (result)
  {
    uint64_t v1 = (void *)result[1];
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100003488;
    v2[3] = &unk_100301E00;
    v2[4] = result;
    return [v1 updateConfiguration:v2];
  }
  return result;
}

id sub_10000A164()
{
  self;
  if (qword_100347320 != -1) {
    dispatch_once(&qword_100347320, &stru_1003026C8);
  }
  v0 = (void *)qword_100347318;

  return v0;
}

id sub_10000A1BC()
{
  self;
  if (qword_100347330 != -1) {
    dispatch_once(&qword_100347330, &stru_1003026E8);
  }
  v0 = (void *)qword_100347328;

  return v0;
}

id sub_10000A214(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = self;
  id v6 = sub_10000A64C();
  id v7 = [v4 processIdentifier];

  id v8 = [v6 identifierWithPid:v7];
  id v38 = 0;
  NSErrorUserInfoKey v9 = [sub_10000B6D4() handleForIdentifier:v8 error:&v38];
  id v10 = v38;
  if (v10)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v5);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v5);
      Name = sel_getName("bundleIdentifierFromConnection:error:");
      uint64_t v15 = 45;
      if (isMetaClass) {
        uint64_t v15 = 43;
      }
      v12(4, "%c[%{public}s %{public}s]:%i %@", v15, ClassName, Name, 238, v10);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = object_getClass(v5);
      if (class_isMetaClass(v17)) {
        int v18 = 43;
      }
      else {
        int v18 = 45;
      }
      unsigned int v19 = object_getClassName(v5);
      uint64_t v20 = sel_getName("bundleIdentifierFromConnection:error:");
      *(_DWORD *)buf = 67110146;
      int v40 = v18;
      __int16 v41 = 2082;
      __int16 v42 = v19;
      __int16 v43 = 2082;
      __int16 v44 = v20;
      __int16 v45 = 1024;
      int v46 = 238;
      __int16 v47 = 2112;
      id v48 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
    }

    if (a3)
    {
      int v21 = 0;
      *a3 = v10;
      goto LABEL_26;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v22 = [v9 bundle];
      int v21 = [v22 identifier];

      goto LABEL_26;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v23 = NFLogGetLogger();
    if (v23)
    {
      __int16 v24 = (void (*)(uint64_t, const char *, ...))v23;
      uint64_t v25 = object_getClass(v5);
      BOOL v26 = class_isMetaClass(v25);
      int v27 = object_getClassName(v5);
      int v37 = sel_getName("bundleIdentifierFromConnection:error:");
      uint64_t v28 = 45;
      if (v26) {
        uint64_t v28 = 43;
      }
      v24(6, "%c[%{public}s %{public}s]:%i nil handle", v28, v27, v37, 242);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v30 = object_getClass(v5);
      if (class_isMetaClass(v30)) {
        int v31 = 43;
      }
      else {
        int v31 = 45;
      }
      BOOL v32 = object_getClassName(v5);
      uint64_t v33 = sel_getName("bundleIdentifierFromConnection:error:");
      *(_DWORD *)buf = 67109890;
      int v40 = v31;
      __int16 v41 = 2082;
      __int16 v42 = v32;
      __int16 v43 = 2082;
      __int16 v44 = v33;
      __int16 v45 = 1024;
      int v46 = 242;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i nil handle", buf, 0x22u);
    }
  }
  int v21 = 0;
LABEL_26:

  return v21;
}

void sub_10000A5A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10000A64C();
  id v5 = [v3 processIdentifier];

  id v8 = [v4 identifierWithPid:v5];
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v7 = [sub_10000A730() predicateMatchingIdentifier:v8];
  [v6 addObject:v7];
}

id sub_10000A64C()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_100347300;
  uint64_t v7 = qword_100347300;
  if (!qword_100347300)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100053E98;
    v3[3] = &unk_100301E40;
    v3[4] = &v4;
    sub_100053E98((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10000A718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000A730()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)qword_100347308;
  uint64_t v7 = qword_100347308;
  if (!qword_100347308)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100053F60;
    v3[3] = &unk_100301E40;
    v3[4] = &v4;
    sub_100053F60((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10000A7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000A814(uint64_t a1)
{
  sub_10000B1A8(*(void **)(*(void *)(a1 + 32) + 368), *(double *)(a1 + 40));
  id v2 = sub_10000B134(*(id **)(a1 + 32));
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = [v2 allValues];
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v7) temperatureChanged:*(double *)(a1 + 40)];
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_10000A934(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 48);
  id v3 = *(void **)(a1 + 56);
  id v4 = *(id *)(a1 + 40);
  id v5 = v2;
  id v6 = v3;
  if (!v1) {
    goto LABEL_42;
  }
  if (!v5)
  {
    MKBGetDeviceLockState();
    goto LABEL_34;
  }
  uint64_t v7 = (uint64_t)[v5 displayBacklightLevel];
  uint64_t v8 = MKBGetDeviceLockState();
  if (v7 < 1)
  {
LABEL_34:
    uint64_t v9 = 0;
    goto LABEL_37;
  }
  uint64_t v9 = 1;
  if (!v6) {
    goto LABEL_37;
  }
  uint64_t v10 = v8;
  if (!v8) {
    goto LABEL_37;
  }
  if (!sub_10000B064() || !sub_10000AD80()) {
    goto LABEL_36;
  }
  if (NFIsInternalBuild())
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class = object_getClass(v1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("_frontBoardServiceMonitorHandler:layout:transitionContext:");
      id v17 = [v6 transitionReasons];
      uint64_t v18 = 45;
      if (isMetaClass) {
        uint64_t v18 = 43;
      }
      v12(6, "%c[%{public}s %{public}s]:%i devLockState=%d, transitionReasons: %@", v18, ClassName, Name, 206, v10, v17);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    unsigned int v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = object_getClass(v1);
      if (class_isMetaClass(v20)) {
        int v21 = 43;
      }
      else {
        int v21 = 45;
      }
      uint64_t v22 = object_getClassName(v1);
      uint64_t v23 = sel_getName("_frontBoardServiceMonitorHandler:layout:transitionContext:");
      __int16 v24 = [v6 transitionReasons];
      *(_DWORD *)buf = 67110402;
      int v45 = v21;
      __int16 v46 = 2082;
      __int16 v47 = v22;
      __int16 v48 = 2082;
      id v49 = v23;
      __int16 v50 = 1024;
      int v51 = 206;
      __int16 v52 = 1024;
      int v53 = v10;
      __int16 v54 = 2112;
      __int16 v55 = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i devLockState=%d, transitionReasons: %@", buf, 0x32u);
    }
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v25 = [v6 transitionReasons];
  id v26 = [v25 countByEnumeratingWithState:&v40 objects:buf count:16];
  if (!v26)
  {
LABEL_35:

    goto LABEL_36;
  }
  id v27 = v26;
  uint64_t v28 = *(void *)v41;
  char v39 = 1;
  do
  {
    for (i = 0; i != v27; i = (char *)i + 1)
    {
      if (*(void *)v41 != v28) {
        objc_enumerationMutation(v25);
      }
      id v30 = *(id *)(*((void *)&v40 + 1) + 8 * i);
      int v31 = (uint64_t (*)(id))sub_10000AD80();
      if (!v31)
      {
        int v37 = +[NSAssertionHandler currentHandler];
        id v38 = +[NSString stringWithUTF8String:"SBSBacklightChangeSource NFLayoutTransitionReason(NSString *__strong)"];
        [v37 handleFailureInFunction:v38 file:@"NFScreenStateMonitor.m" lineNumber:27 description:@"%s", dlerror()];

        __break(1u);
      }
      unint64_t v32 = v31(v30);

      if (v32 <= 0x25)
      {
        if (!v32) {
          continue;
        }
        if (((1 << v32) & 0x26601122FCLL) != 0) {
          goto LABEL_35;
        }
      }
      char v39 = 0;
    }
    id v27 = [v25 countByEnumeratingWithState:&v40 objects:buf count:16];
  }
  while (v27);

  if ((v39 & 1) == 0)
  {
    uint64_t v9 = 2;
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v9 = 1;
LABEL_37:
  uint64_t v33 = v1;
  objc_sync_enter(v33);
  if ((id)v9 == v33[5])
  {
    objc_sync_exit(v33);
    goto LABEL_41;
  }
  v33[5] = (id)v9;
  objc_sync_exit(v33);

  id v34 = v33 + 2;
  id WeakRetained = objc_loadWeakRetained(v34);
  char v36 = objc_opt_respondsToSelector();

  if (v36)
  {
    uint64_t v33 = (id *)objc_loadWeakRetained(v34);
    [v33 didScreenStateChange:v9];
LABEL_41:
  }
LABEL_42:
}

uint64_t sub_10000AD80()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_100347658;
  uint64_t v6 = qword_100347658;
  if (!qword_100347658)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100202F9C;
    v2[3] = &unk_100301E40;
    v2[4] = &v3;
    sub_100202F9C(v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10000AE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000AE4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "NFScreenStateMonitor blanked screen state update", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v10, &state);
  os_activity_scope_leave(&state);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v12 = WeakRetained;
  if (WeakRetained)
  {
    int v13 = WeakRetained[1];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10000A934;
    v14[3] = &unk_100307270;
    uint64_t v15 = WeakRetained;
    id v16 = v7;
    id v17 = v8;
    id v18 = v9;
    dispatch_async(v13, v14);
  }
}

uint64_t sub_10000AF94()
{
  if (!qword_100347508) {
    qword_100347508 = _sl_dlopen();
  }
  return qword_100347508;
}

uint64_t sub_10000B064()
{
  if (!qword_100347650) {
    qword_100347650 = _sl_dlopen();
  }
  return qword_100347650;
}

id *sub_10000B134(id *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = a1[20];
    objc_sync_enter(v2);
    id v1 = (id *)[v1[20] copy];
    objc_sync_exit(v2);
  }

  return v1;
}

void sub_10000B194(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000B1A8(void *a1, double a2)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    if (!*((unsigned char *)obj + 137))
    {
      uint64_t v4 = obj[10];
      if (v4)
      {
        float v5 = a2;
        id v6 = sub_10000B254(v4, v5, v3);
      }
    }
    objc_sync_exit(obj);
  }
}

void sub_10000B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_10000B254(uint64_t a1, float a2, float a3)
{
  if (!a1) {
    goto LABEL_19;
  }
  unsigned __int8 v4 = byte_1003475E8++;
  LOBYTE(a3) = *(unsigned char *)(a1 + 12);
  mach_port_t v5 = *(_DWORD *)(a1 + 8);
  size_t outputStructCnt = 80;
  memset(v49, 0, sizeof(v49));
  long long v48 = 0u;
  memset(outputStruct, 0, sizeof(outputStruct));
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  strcpy(v30, "zENc");
  v49[22] = 6;
  int inputStruct = 2051362403;
  *(_DWORD *)&v49[8] = 32;
  __int16 v50 = 258;
  __int16 v51 = v4;
  float v52 = a2;
  float v53 = (float)LODWORD(a3);
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  int v56 = 0;
  uint64_t v6 = IOConnectCallStructMethod(v5, 2u, &inputStruct, 0x50uLL, outputStruct, &outputStructCnt);
  if (!v6 && !BYTE8(v44)) {
    goto LABEL_19;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(3, "%s:%i Write failed for key '%s' (0x%X, 0x%X)\n", "_writeSMCKey", 94, v30, v6, BYTE8(v44));
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136447234;
    id v34 = "_writeSMCKey";
    __int16 v35 = 1024;
    int v36 = 94;
    __int16 v37 = 2080;
    id v38 = v30;
    __int16 v39 = 1024;
    int v40 = v6;
    __int16 v41 = 1024;
    int v42 = BYTE8(v44);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Write failed for key '%s' (0x%X, 0x%X)\n", buf, 0x28u);
  }

  if (v6)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFLogGetLogger();
    if (v9)
    {
      uint64_t v10 = (void (*)(uint64_t, const char *, ...))v9;
      Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("updateTemperature:");
      uint64_t v14 = 45;
      if (isMetaClass) {
        uint64_t v14 = 43;
      }
      v10(3, "%c[%{public}s %{public}s]:%i Error writing temperature : 0x%x", v14, ClassName, Name, 173, v6);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = object_getClass((id)a1);
      if (class_isMetaClass(v16)) {
        int v17 = 43;
      }
      else {
        int v17 = 45;
      }
      id v18 = object_getClassName((id)a1);
      unsigned int v19 = sel_getName("updateTemperature:");
      int inputStruct = 67110146;
      LODWORD(v4_Block_object_dispose(&STACK[0x2B0], 8) = v17;
      WORD2(v4_Block_object_dispose(&STACK[0x2B0], 8) = 2082;
      *(void *)((char *)&v48 + 6) = v18;
      HIWORD(v4_Block_object_dispose(&STACK[0x2B0], 8) = 2082;
      *(void *)id v49 = v19;
      *(_WORD *)&v49[8] = 1024;
      *(_DWORD *)&v49[10] = 173;
      *(_WORD *)&v49[14] = 1024;
      *(_DWORD *)&v49[16] = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error writing temperature : 0x%x", (uint8_t *)&inputStruct, 0x28u);
    }

    id v20 = objc_alloc((Class)NSError);
    int v21 = +[NSString stringWithUTF8String:"nfcd"];
    v31[0] = NSLocalizedDescriptionKey;
    uint64_t v22 = +[NSString stringWithUTF8String:"Unexpected Result"];
    v32[0] = v22;
    v32[1] = &off_10031F528;
    v31[1] = @"Line";
    v31[2] = @"Method";
    id v23 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("updateTemperature:")];
    v32[2] = v23;
    v31[3] = NSDebugDescriptionErrorKey;
    id v24 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("updateTemperature:"), 174];
    v32[3] = v24;
    uint64_t v25 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:4];
    id v26 = [v20 initWithDomain:v21 code:13 userInfo:v25];
  }
  else
  {
LABEL_19:
    id v26 = 0;
  }

  return v26;
}

id sub_10000B6D4()
{
  uint64_t v4 = 0;
  mach_port_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100347310;
  uint64_t v7 = qword_100347310;
  if (!qword_100347310)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100054028;
    v3[3] = &unk_100301E40;
    v3[4] = &v4;
    sub_100054028((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_10000B7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B7B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B7C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B7D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B7E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B7F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B808(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B818(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B828(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B838(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B848(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B858(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B868(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B878(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B888(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B898(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B8A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B8B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B8C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B8D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B8E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B8F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B908(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B918(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B928(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B938(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000B948(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000B958(uint64_t a1)
{
}

void sub_10000B964(uint64_t a1, void *a2)
{
}

uint64_t sub_10000B974(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1 && *(unsigned char *)(v1 + 34))
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
    uint64_t v2 = *(void *)(result + 32);
    if (v2) {
      *(unsigned char *)(v2 + 34) = 0;
    }
  }
  return result;
}

uint64_t sub_10000B9A4(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 24) = *(void *)(result + 40);
  return result;
}

void sub_10000B9B0(uint64_t a1)
{
}

void sub_10000B9C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (*(void *)(v2 + 32)) {
      BOOL v3 = *(unsigned char *)(v2 + 152) != 0;
    }
    else {
      BOOL v3 = 1;
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  [*(id *)(v2 + 48) stopTimer];
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (v4 && *(void *)(v4 + 32))
  {
    *(unsigned char *)(v4 + 152) = v5;
    int v5 = *(unsigned __int8 *)(a1 + 40);
  }
  if (v5) {
    char v6 = v3;
  }
  else {
    char v6 = 1;
  }
  if ((v6 & 1) == 0)
  {
    id v7 = +[_NFHardwareManager sharedHardwareManager];
    [v7 maybeStartNextSession];
  }
}

void sub_10000BA80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained touchSystemReady:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10000BAE0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) handleFieldChanged:1];
}

void sub_10000BAF0(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(id *)(a1 + 120);
    [v1 notifyPresentmentFieldExit];
  }
}

uint64_t sub_10000BB4C(uint64_t result, unint64_t a2)
{
  if (result)
  {
    BOOL v3 = (void *)result;
    if (a2 >= 3)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        int v5 = (void (*)(uint64_t, const char *, ...))Logger;
        Class = object_getClass(v3);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v3);
        Name = sel_getName("assert:");
        uint64_t v8 = 45;
        if (isMetaClass) {
          uint64_t v8 = 43;
        }
        v5(3, "%c[%{public}s %{public}s]:%i Invalid type: %lu", v8, ClassName, Name, 25, a2);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v9 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      uint64_t v10 = object_getClass(v3);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      *(_DWORD *)buf = 67110146;
      int v28 = v11;
      __int16 v29 = 2082;
      id v30 = object_getClassName(v3);
      __int16 v31 = 2082;
      unint64_t v32 = sel_getName("assert:");
      __int16 v33 = 1024;
      int v34 = 25;
      __int16 v35 = 2048;
      unint64_t v36 = a2;
      int v12 = "%c[%{public}s %{public}s]:%i Invalid type: %lu";
      int v13 = v9;
      uint32_t v14 = 44;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
LABEL_23:

      return 0;
    }
    __int16 v15 = (*(unsigned char *)(result + a2 + 8))++ + 1;
    if ((v15 & 0x100) != 0)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v16 = NFLogGetLogger();
      if (v16)
      {
        int v17 = (void (*)(uint64_t, const char *, ...))v16;
        id v18 = object_getClass(v3);
        BOOL v19 = class_isMetaClass(v18);
        id v20 = object_getClassName(v3);
        id v26 = sel_getName("assert:");
        uint64_t v21 = 45;
        if (v19) {
          uint64_t v21 = 43;
        }
        v17(3, "%c[%{public}s %{public}s]:%i Count overflow", v21, v20, v26, 30);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v9 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      uint64_t v22 = object_getClass(v3);
      if (class_isMetaClass(v22)) {
        int v23 = 43;
      }
      else {
        int v23 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v28 = v23;
      __int16 v29 = 2082;
      id v30 = object_getClassName(v3);
      __int16 v31 = 2082;
      unint64_t v32 = sel_getName("assert:");
      __int16 v33 = 1024;
      int v34 = 30;
      int v12 = "%c[%{public}s %{public}s]:%i Count overflow";
      int v13 = v9;
      uint32_t v14 = 34;
      goto LABEL_22;
    }
    return 1;
  }
  return result;
}

id sub_10000C050()
{
  self;
  if (qword_1003476A8 != -1) {
    dispatch_once(&qword_1003476A8, &stru_100307AF0);
  }
  uint64_t v0 = (void *)qword_1003476A0;

  return v0;
}

unint64_t DEREncodeLengthSized(unint64_t result, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  if (result >= 0x80)
  {
    uint64_t v5 = 0;
    unint64_t v6 = result;
    do
    {
      --v5;
      BOOL v7 = v6 > 0xFF;
      v6 >>= 8;
    }
    while (v7);
    unint64_t v8 = -v5;
    uint64_t v9 = 7;
    if (-v5 < a3 && v8 <= 0x7E)
    {
      if (*a4)
      {
        uint64_t v4 = 1 - v5;
        *(unsigned char *)a2 = -(char)v5 | 0x80;
        if (v8 < ~a2)
        {
          uint64_t v10 = (unsigned char *)(a2 - v5);
          if (a2 - v5 != -2)
          {
            int v11 = (unsigned char *)(a2 + *a4);
            while (v10 != (unsigned char *)-1)
            {
              if (v10 >= v11 || (unint64_t)v10 < a2) {
                goto LABEL_23;
              }
              *v10-- = result;
              BOOL v7 = result > 0xFF;
              result >>= 8;
              if (!v7)
              {
                if (v8 >= *a4) {
                  goto LABEL_23;
                }
                goto LABEL_19;
              }
            }
          }
        }
        __break(0x5513u);
      }
      goto LABEL_23;
    }
    return v9;
  }
  if (!a3) {
    return 7;
  }
  if (*a4)
  {
    *(unsigned char *)a2 = result;
    if (*a4)
    {
      uint64_t v4 = 1;
LABEL_19:
      uint64_t v9 = 0;
      *a4 = v4;
      return v9;
    }
  }
LABEL_23:
  __break(0x5519u);
  return result;
}

uint64_t sub_10000C19C(uint64_t result, unint64_t a2, unint64_t *a3)
{
  unint64_t v3 = result & 0x1FFFFFFFFFFFFFFFLL;
  if ((result & 0x1FFFFFFFFFFFFFFFuLL) < 0x1F)
  {
    if (*a3)
    {
      *(unsigned char *)a2 = HIBYTE(result) & 0xE0 | result;
      unint64_t v8 = 1;
      goto LABEL_17;
    }
    return 7;
  }
  unint64_t v4 = 0;
  unint64_t v5 = result & 0x1FFFFFFFFFFFFFFFLL;
  do
  {
    ++v4;
    BOOL v6 = v5 > 0x7F;
    v5 >>= 7;
  }
  while (v6);
  unint64_t v7 = *a3;
  if (v4 >= *a3) {
    return 7;
  }
  if (v4 >= ~a2 || (*(unsigned char *)a2 = HIBYTE(result) | 0x1F, a2 + v4 == -2))
  {
LABEL_20:
    __break(0x5513u);
    goto LABEL_21;
  }
  if (a2 + v4 >= a2)
  {
    unint64_t v8 = v4 + 1;
    *(unsigned char *)(a2 + v4) = result & 0x7F;
    if (v3 >= 0x80)
    {
      uint64_t v9 = (unsigned char *)(a2 + v4 - 1);
      uint64_t v10 = (unsigned char *)(a2 + v7);
      while (v9 != (unsigned char *)-2)
      {
        if (v9 >= v10 || (unint64_t)v9 < a2) {
          goto LABEL_21;
        }
        unint64_t v11 = v3 >> 14;
        v3 >>= 7;
        *v9-- = v3 | 0x80;
        if (!v11) {
          goto LABEL_17;
        }
      }
      goto LABEL_20;
    }
LABEL_17:
    if (v8 <= *a3)
    {
      uint64_t result = 0;
      *a3 = v8;
      return result;
    }
  }
LABEL_21:
  __break(0x5519u);
  return result;
}

uint64_t DEREncodeSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unint64_t a7, unint64_t *a8)
{
  unint64_t v8 = ~a6;
  if (~a6 < a7) {
    goto LABEL_73;
  }
  unint64_t v11 = *a8;
  unint64_t v44 = a7;
  unint64_t v45 = 0;
  if (v11 < a7) {
    goto LABEL_74;
  }
  uint64_t result = sub_10000C19C(a1, a6, &v44);
  if (result) {
    return result;
  }
  if (v44 > v8) {
    goto LABEL_73;
  }
  unint64_t v17 = a7 - v44;
  if (a7 < v44) {
    goto LABEL_75;
  }
  unint64_t v18 = a6 + a7;
  unint64_t v19 = a6 + v44;
  if (a6 + v44 < v18)
  {
    uint64_t result = sub_10000C664(a2, a3, a4, a5, &v45);
    if (result) {
      return result;
    }
    unint64_t v44 = v17;
    if (v19 > a6 + v11 || v19 < a6 || v17 > a6 + v11 - v19) {
      goto LABEL_74;
    }
    unint64_t v42 = a6 + v11;
    unint64_t v20 = v45;
    uint64_t result = DEREncodeLengthSized(v45, v19, v17, (uint64_t *)&v44);
    if (result) {
      return result;
    }
    unint64_t v21 = v42;
    if (__CFADD__(v19, v44))
    {
LABEL_73:
      __break(0x5513u);
      goto LABEL_74;
    }
    unint64_t v22 = v17 - v44;
    if (v17 >= v44)
    {
      int v23 = (unsigned char *)(v19 + v44);
      if (!__CFADD__(v19 + v44, v20))
      {
        if ((unint64_t)&v23[v20] > v18) {
          return 7;
        }
        if (a4)
        {
          unint64_t v24 = 0;
          unint64_t v25 = a2 + a3;
          uint64_t v41 = 24 * a4;
          while (1)
          {
            if (v24 > ~a5) {
              goto LABEL_73;
            }
            unint64_t v26 = *(void *)(a5 + v24);
            if (v26 > ~a2) {
              goto LABEL_73;
            }
            id v27 = (const void **)(a2 + v26);
            __int16 v28 = *(_WORD *)(a5 + v24 + 16);
            if ((v28 & 0x200) != 0) {
              break;
            }
            if ((v28 & 1) == 0) {
              goto LABEL_29;
            }
            if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25) {
              goto LABEL_74;
            }
            if (v27[1])
            {
LABEL_29:
              unint64_t v44 = v22;
              if ((unint64_t)v23 > v21 || (unint64_t)v23 < a6 || v22 > v21 - (unint64_t)v23) {
                goto LABEL_74;
              }
              uint64_t result = sub_10000C19C(*(void *)(a5 + v24 + 8), (unint64_t)v23, &v44);
              if (result) {
                return result;
              }
              if (__CFADD__(v23, v44)) {
                goto LABEL_73;
              }
              unint64_t v30 = v22 - v44;
              if (v22 < v44) {
                goto LABEL_75;
              }
              if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25) {
                goto LABEL_74;
              }
              unint64_t v31 = (unint64_t)v27[1];
              unint64_t v45 = v31;
              char v32 = 1;
              if ((v28 & 0x100) != 0 && v31 && *(char *)*v27 < 0)
              {
                char v32 = 0;
                unint64_t v45 = ++v31;
              }
              unint64_t v33 = (unint64_t)&v23[v44];
              unint64_t v44 = v30;
              if (v33 > v42 || v33 < a6 || v30 > v42 - v33) {
                goto LABEL_74;
              }
              uint64_t result = DEREncodeLengthSized(v31, v33, v30, (uint64_t *)&v44);
              if (result) {
                return result;
              }
              unint64_t v34 = v44;
              if (__CFADD__(v33, v44)) {
                goto LABEL_73;
              }
              unint64_t v35 = v30 - v44;
              if (v30 < v44) {
                goto LABEL_75;
              }
              int v23 = (unsigned char *)(v33 + v44);
              if ((v32 & 1) == 0)
              {
                if (v23 == (unsigned char *)-1) {
                  goto LABEL_73;
                }
                if ((unint64_t)v23 >= v42 || (unint64_t)v23 < a6) {
                  goto LABEL_74;
                }
                unsigned char *v23 = 0;
                --v35;
                if (v30 == v34) {
                  goto LABEL_75;
                }
                ++v23;
              }
              if ((unint64_t)v23 > v42) {
                goto LABEL_74;
              }
              if ((unint64_t)v23 < a6) {
                goto LABEL_74;
              }
              size_t v36 = (size_t)v27[1];
              if (v36 > v42 - (unint64_t)v23) {
                goto LABEL_74;
              }
              uint64_t result = (uint64_t)memmove(v23, *v27, v36);
              unint64_t v21 = v42;
              unint64_t v37 = (unint64_t)v27[1];
              if (__CFADD__(v23, v37)) {
                goto LABEL_73;
              }
              unint64_t v22 = v35 - v37;
              if (v35 < v37) {
                goto LABEL_75;
              }
              goto LABEL_69;
            }
LABEL_70:
            v24 += 24;
            if (v41 == v24) {
              goto LABEL_71;
            }
          }
          if ((unint64_t)v27 < a2 || (unint64_t)(v27 + 2) > v25) {
            goto LABEL_74;
          }
          if ((unint64_t)v23 > v21) {
            goto LABEL_74;
          }
          if ((unint64_t)v23 < a6) {
            goto LABEL_74;
          }
          size_t v39 = (size_t)v27[1];
          if (v39 > v21 - (unint64_t)v23) {
            goto LABEL_74;
          }
          uint64_t result = (uint64_t)memmove(v23, *v27, v39);
          unint64_t v21 = v42;
          unint64_t v37 = (unint64_t)v27[1];
          if (__CFADD__(v23, v37)) {
            goto LABEL_73;
          }
          BOOL v40 = v22 >= v37;
          v22 -= v37;
          if (!v40) {
            goto LABEL_75;
          }
LABEL_69:
          v23 += v37;
          goto LABEL_70;
        }
LABEL_71:
        if ((unint64_t)&v23[-a6] <= *a8)
        {
          uint64_t result = 0;
          *a8 = (unint64_t)&v23[-a6];
          return result;
        }
LABEL_74:
        __break(0x5519u);
      }
      goto LABEL_73;
    }
LABEL_75:
    __break(0x5515u);
    return result;
  }
  return 7;
}

unint64_t sub_10000C664(unint64_t result, unint64_t a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  if (!a3)
  {
LABEL_38:
    uint64_t result = 0;
LABEL_40:
    *a5 = v5;
    return result;
  }
  unsigned int v6 = 0;
  unint64_t v7 = result + a2;
  while (24 * (unint64_t)v6 <= ~a4)
  {
    unint64_t v8 = *(void *)(a4 + 24 * v6);
    BOOL v9 = v8 > 0xFFFFFFFFFFFFFFEFLL || v8 + 16 > a2;
    if (v9)
    {
      uint64_t v5 = 0;
      uint64_t result = 7;
      goto LABEL_40;
    }
    if (v8 > ~result) {
      break;
    }
    uint64_t v10 = (unsigned __int8 **)(result + v8);
    __int16 v11 = *(_WORD *)(a4 + 24 * v6 + 16);
    if ((v11 & 0x200) == 0)
    {
      if (v11)
      {
        if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
          goto LABEL_43;
        }
        if (!v10[1]) {
          goto LABEL_37;
        }
      }
      unint64_t v13 = *(void *)(a4 + 24 * v6 + 8) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v14 = 1;
      if (v13 >= 0x1F)
      {
        do
        {
          ++v14;
          BOOL v9 = v13 > 0x7F;
          v13 >>= 7;
        }
        while (v9);
      }
      BOOL v15 = __CFADD__(v5, v14);
      uint64_t v16 = v5 + v14;
      if (v15) {
        goto LABEL_42;
      }
      if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
        goto LABEL_43;
      }
      unint64_t v17 = (unint64_t)v10[1];
      if ((*(_WORD *)(a4 + 24 * v6 + 16) & 0x100) != 0)
      {
        if (v17)
        {
          v17 += (unint64_t)**v10 >> 7;
          goto LABEL_24;
        }
LABEL_25:
        uint64_t v18 = 1;
      }
      else
      {
LABEL_24:
        if (v17 < 0x80) {
          goto LABEL_25;
        }
        uint64_t v18 = 1;
        unint64_t v21 = v17;
        do
        {
          ++v18;
          BOOL v9 = v21 > 0xFF;
          v21 >>= 8;
        }
        while (v9);
      }
      BOOL v15 = __CFADD__(v16, v18);
      uint64_t v22 = v16 + v18;
      if (v15) {
        goto LABEL_42;
      }
      BOOL v15 = __CFADD__(v22, v17);
      uint64_t v5 = v22 + v17;
      if (v15) {
        goto LABEL_42;
      }
      goto LABEL_37;
    }
    if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
      goto LABEL_43;
    }
    unint64_t v20 = v10[1];
    BOOL v15 = __CFADD__(v5, v20);
    v5 += (uint64_t)v20;
    if (v15) {
      goto LABEL_42;
    }
LABEL_37:
    if (++v6 == a3) {
      goto LABEL_38;
    }
  }
  __break(0x5513u);
LABEL_42:
  __break(0x5500u);
LABEL_43:
  __break(0x5519u);
  return result;
}

uint64_t DEREncodeSequence(uint64_t result, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) >= a2) {
    return DEREncodeSequenceFromObject(result, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, a5, *a6, a6);
  }
  __break(0x5519u);
  return result;
}

unint64_t DERLengthOfEncodedSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v17 = 0;
  unint64_t result = sub_10000C664(a2, a3, a4, a5, &v17);
  if (!result)
  {
    unint64_t v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v10 = 1;
    if ((a1 & 0x1FFFFFFFFFFFFFFFuLL) >= 0x1F)
    {
      do
      {
        ++v10;
        BOOL v11 = v9 > 0x7F;
        v9 >>= 7;
      }
      while (v11);
    }
    uint64_t v12 = 1;
    if (v17 >= 0x80)
    {
      unint64_t v13 = v17;
      do
      {
        ++v12;
        BOOL v11 = v13 > 0xFF;
        v13 >>= 8;
      }
      while (v11);
    }
    BOOL v14 = __CFADD__(v10, v12);
    uint64_t v15 = v10 + v12;
    if (v14 || (v14 = __CFADD__(v15, v17), unint64_t v16 = v15 + v17, v14))
    {
      __break(0x5500u);
    }
    else
    {
      unint64_t result = 0;
      *a6 = v16;
    }
  }
  return result;
}

unint64_t DERLengthOfEncodedSequence(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = 0;
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) < a2) {
    __break(0x5519u);
  }
  if (DERLengthOfEncodedSequenceFromObject(a1, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, &v5)) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t SSEIsFeatureSupported(int a1)
{
  unsigned int v11 = 0;
  uint64_t v10 = 0;
  sub_10000CED4();
  if (byte_100347238)
  {
    uint64_t v2 = SSEGetVersion(&v11);
    if (v2)
    {
      uint64_t v3 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100012984();
      }
    }
    else
    {
      uint64_t v3 = 0;
      switch(a1)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
          return v3;
        case 7:
        case 11:
        case 15:
        case 26:
        case 27:
        case 28:
          unsigned int v4 = HIWORD(v11);
          goto LABEL_8;
        case 12:
        case 25:
          BOOL v5 = v11 > 1;
          goto LABEL_26;
        case 13:
        case 14:
          BOOL v5 = v11 > 2;
          goto LABEL_26;
        case 16:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
          unsigned int v4 = v11 >> 18;
          goto LABEL_8;
        case 17:
        case 40:
          unsigned int v6 = v11;
          unsigned int v7 = 393215;
          goto LABEL_25;
        case 29:
        case 30:
        case 31:
          unsigned int v4 = v11 >> 17;
          goto LABEL_8;
        case 32:
        case 45:
        case 46:
        case 47:
        case 48:
          unsigned int v4 = v11 >> 19;
LABEL_8:
          if (v4) {
            return 0;
          }
          else {
            return 4294967279;
          }
        case 33:
          unsigned int v6 = v11;
          unsigned int v7 = 655359;
          goto LABEL_25;
        case 34:
          uint64_t v8 = sub_10000CD48(&v10);
          if (v8)
          {
            uint64_t v3 = v8;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_1000128EC();
            }
          }
          else if (v10)
          {
            return 0;
          }
          else
          {
            return 4294967279;
          }
          return v3;
        case 41:
        case 42:
          BOOL v5 = HIWORD(v11) > 4u;
          goto LABEL_26;
        case 43:
        case 44:
          unsigned int v6 = v11;
          unsigned int v7 = 458751;
          goto LABEL_25;
        case 49:
          unsigned int v6 = v11;
          unsigned int v7 = 589823;
LABEL_25:
          BOOL v5 = v6 > v7;
LABEL_26:
          if (v5) {
            uint64_t v3 = 0;
          }
          else {
            uint64_t v3 = 4294967279;
          }
          break;
        default:
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100012854();
          }
          return 4294967279;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000127BC();
    }
    return 4294967279;
  }
  return v3;
}

uint64_t SSEGetVersion(_DWORD *a1)
{
  if (dword_100347220)
  {
    uint64_t v2 = 0;
    goto LABEL_10;
  }
  uint64_t inputStruct = 0x153534563;
  unsigned int outputStruct = 0;
  uint64_t v3 = sub_10000CED4();
  if (v3)
  {
    uint64_t v2 = v3;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100012BE4();
    }
  }
  else
  {
    size_t outputStructCnt = 4;
    uint64_t v4 = IOConnectCallStructMethod(dword_100347224, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!v4)
    {
      if (outputStructCnt == 4)
      {
        int v5 = outputStruct;
        if (outputStruct)
        {
          uint64_t v2 = 0;
          if (outputStruct >= 0xA0000) {
            int v5 = 655360;
          }
          dword_100347220 = v5;
          goto LABEL_10;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100012A1C();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_100012AB4();
      }
      uint64_t v2 = 4294967290;
      goto LABEL_10;
    }
    uint64_t v2 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100012B4C();
    }
  }
LABEL_10:
  if (a1) {
    *a1 = dword_100347220;
  }
  return v2;
}

uint64_t sub_10000CD48(void *a1)
{
  if (a1)
  {
    if (byte_100347248)
    {
LABEL_10:
      uint64_t v5 = 0;
      *a1 = qword_100347240;
      return v5;
    }
    unsigned int v10 = 0;
    uint64_t v2 = SSEGetVersion(&v10);
    if (v2)
    {
      uint64_t v5 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100012EDC();
      }
    }
    else
    {
      if (v10 < 0x30000)
      {
LABEL_9:
        byte_100347248 = 1;
        goto LABEL_10;
      }
      uint64_t outputStruct = 0;
      uint64_t inputStruct = 0x1E53534563;
      uint64_t v3 = sub_10000CED4();
      if (v3)
      {
        uint64_t v5 = v3;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100012E44();
        }
      }
      else
      {
        size_t v7 = 8;
        uint64_t v4 = IOConnectCallStructMethod(dword_100347224, 0, &inputStruct, 8uLL, &outputStruct, &v7);
        if (v4)
        {
          uint64_t v5 = v4;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100012DAC();
          }
        }
        else
        {
          if (v7 == 8)
          {
            qword_100347240 = outputStruct;
            goto LABEL_9;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100012D14();
          }
          return 4294967290;
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100012C7C();
    }
    return 4294967292;
  }
  return v5;
}

uint64_t sub_10000CED4()
{
  if ((byte_100347249 & 1) == 0)
  {
    if (qword_100347260 != -1) {
      dispatch_once(&qword_100347260, &stru_100301068);
    }
    if ((byte_10034725C & 1) != 0 || byte_100347728)
    {
      byte_100347238 = 1;
    }
    else
    {
      if (qword_100347270 != -1) {
        dispatch_once(&qword_100347270, &stru_100301088);
      }
      byte_100347238 = byte_100347268;
      if (!byte_100347268)
      {
        byte_100347249 = 1;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_1000131D4();
        }
        goto LABEL_13;
      }
    }
    CFDictionaryRef v1 = IOServiceMatching("AppleSSE");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100012F74();
      }
      uint64_t v0 = 4294967276;
      goto LABEL_14;
    }
    io_object_t v3 = MatchingService;
    uint64_t v4 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_100347224);
    if (v4)
    {
      uint64_t v0 = v4;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10001313C();
      }
      IOObjectRelease(v3);
      goto LABEL_14;
    }
    uint64_t v5 = IONotificationPortCreate(kIOMasterPortDefault);
    qword_100347250 = (uint64_t)v5;
    if (v5) {
      goto LABEL_24;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000130A4();
    }
    uint64_t v5 = (IONotificationPort *)qword_100347250;
    if (qword_100347250)
    {
LABEL_24:
      unsigned int v6 = dispatch_get_global_queue(21, 0);
      IONotificationPortSetDispatchQueue(v5, v6);

      if (IOServiceAddInterestNotification((IONotificationPortRef)qword_100347250, v3, "IOGeneralInterest", (IOServiceInterestCallback)sub_100011DFC, 0, (io_object_t *)&dword_100347258)&& os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10001300C();
      }
    }
    if (qword_100347270 != -1) {
      dispatch_once(&qword_100347270, &stru_100301088);
    }
    if (byte_100347269)
    {
      if (qword_100347260 != -1) {
        dispatch_once(&qword_100347260, &stru_100301068);
      }
      if ((byte_10034725C & 1) == 0)
      {
        size_t v7 = fopen("/var/mobile/Library/Logs/AppleSSE.log", "a");
        qword_100347278 = (uint64_t)v7;
        if (v7)
        {
          if (ftell(v7) < 1) {
            chmod("/var/mobile/Library/Logs/AppleSSE.log", 0x1B6u);
          }
          else {
            fputs("\n", (FILE *)qword_100347278);
          }
          v18[1] = 0;
          *(void *)unint64_t v19 = 0x4100000001;
          size_t v17 = 16;
          v18[0] = 0;
          sysctl(v19, 2u, v18, &v17, 0, 0);
          sub_100012174("AppleSSE Log Starts - System Version %s", v8, v9, v10, v11, v12, v13, v14, (char)v18);
          sub_100012260(0, 0);
        }
      }
    }
    byte_100347249 = 1;
    uint64_t v15 = dispatch_get_global_queue(21, 0);
    dispatch_async(v15, &stru_100301048);

    IOObjectRelease(v3);
    return 0;
  }
  if (byte_100347238) {
    return 0;
  }
LABEL_13:
  uint64_t v0 = 4294967279;
LABEL_14:
  if (dword_100347258)
  {
    IOObjectRelease(dword_100347258);
    dword_100347258 = 0;
  }
  if (qword_100347250)
  {
    IONotificationPortDestroy((IONotificationPortRef)qword_100347250);
    qword_100347250 = 0;
  }
  if (dword_100347224)
  {
    IOServiceClose(dword_100347224);
    dword_100347224 = 0;
  }
  return v0;
}

uint64_t SSEGetHostChallenge(CFDataRef *a1)
{
  uint64_t inputStruct = 0;
  uint64_t outputStruct = 0;
  size_t v10 = 0;
  if (a1)
  {
    uint64_t v2 = sub_10000CED4();
    if (v2)
    {
      uint64_t v8 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000134CC();
      }
    }
    else
    {
      LODWORD(inputStruct) = 1397966179;
      WORD2(inputStruct) = 2;
      size_t v10 = 8;
      uint64_t v3 = IOConnectCallStructMethod(dword_100347224, 0, &inputStruct, 8uLL, &outputStruct, &v10);
      if (v3)
      {
        uint64_t v8 = v3;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100013434();
        }
      }
      else if (v10 == 8)
      {
        CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&outputStruct, 8);
        *a1 = v4;
        if (v4)
        {
          uint64_t v8 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100013304();
          }
          uint64_t v8 = 4294967291;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10001339C();
        }
        uint64_t v8 = 4294967290;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001326C();
    }
    uint64_t v8 = 4294967292;
  }
  sub_10000D49C((uint64_t)"SSEGetHostChallenge", v8, 0, 0, 0, v5, v6, v7);
  return v8;
}

uint64_t sub_10000D49C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 || a3) && qword_100347278)
  {
    sub_100012174("%s() -> %d", a2, a3, a4, a5, a6, a7, a8, result);
    return sub_100012260(a4, a5);
  }
  return result;
}

uint64_t SSEAuthorize(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, _DWORD *a8, CFDataRef *a9)
{
  return sub_10000D56C(0, a1, a2, a3, a4, a5, a6, a7, 0, a8, a9, 0, 0, 0);
}

uint64_t sub_10000D56C(int a1, int a2, const __CFData *a3, int a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, char a9, _DWORD *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13, CFTypeRef *a14)
{
  int v44 = a4;
  memset(v46, 0, 126);
  long long inputStruct = 0u;
  CFTypeRef cf = 0;
  size_t outputStructCnt = 0;
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013564();
    }
    goto LABEL_76;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000135FC();
    }
    goto LABEL_76;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013694();
    }
    goto LABEL_76;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001372C();
    }
    goto LABEL_76;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000137C4();
    }
    goto LABEL_76;
  }
  if (!a10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001385C();
    }
    goto LABEL_76;
  }
  if (!a11)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000138F4();
    }
    goto LABEL_76;
  }
  if (a1)
  {
    if (a12)
    {
      if (a13) {
        goto LABEL_11;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100013A24();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_10001398C();
    }
LABEL_76:
    unint64_t v25 = 0;
LABEL_77:
    uint64_t v35 = 4294967292;
    goto LABEL_78;
  }
LABEL_11:
  BOOL v40 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x722A5B9EuLL);
  if (!v40)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013ABC();
    }
    unint64_t v25 = 0;
    goto LABEL_92;
  }
  uint64_t v22 = sub_10000CED4();
  if (v22)
  {
    uint64_t v35 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001430C();
    }
    goto LABEL_61;
  }
  if (a9 == 2 && a1)
  {
    uint64_t v23 = SSEIsFeatureSupported(7);
    if (v23)
    {
      uint64_t v35 = v23;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100014274();
      }
      goto LABEL_61;
    }
    uint64_t v24 = sub_10000E980();
    if (v24)
    {
      uint64_t v35 = v24;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000141DC();
      }
      goto LABEL_61;
    }
  }
  LODWORD(inputStruct) = 1397966179;
  WORD2(inputStruct) = 3;
  DWORD2(inputStruct) = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x41)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013B54();
    }
    goto LABEL_60;
  }
  v47.length = CFDataGetLength(a3);
  v47.id location = 0;
  CFDataGetBytes(a3, v47, (UInt8 *)v46);
  HIDWORD(inputStruct) = CFDataGetLength(a3);
  LODWORD(v46[4]) = a4;
  if ((unint64_t)CFDataGetLength(a5) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013BEC();
    }
LABEL_60:
    uint64_t v35 = 4294967292;
LABEL_61:
    unint64_t v25 = v40;
    goto LABEL_78;
  }
  v48.length = CFDataGetLength(a5);
  v48.id location = 0;
  CFDataGetBytes(a5, v48, (UInt8 *)&v46[4] + 4);
  if (CFDataGetLength(a6) != 8)
  {
    unint64_t v25 = v40;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014144();
    }
    goto LABEL_77;
  }
  v49.length = CFDataGetLength(a6);
  v49.id location = 0;
  CFDataGetBytes(a6, v49, (UInt8 *)&v46[5] + 12);
  unint64_t v25 = v40;
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000140AC();
    }
    goto LABEL_77;
  }
  v50.length = CFDataGetLength(a7);
  v50.id location = 0;
  CFDataGetBytes(a7, v50, (UInt8 *)&v46[6] + 4);
  if (CFDataGetLength(a8) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014014();
    }
    goto LABEL_77;
  }
  v51.length = CFDataGetLength(a8);
  v51.id location = 0;
  CFDataGetBytes(a8, v51, (UInt8 *)&v46[6] + 12);
  *(void *)((char *)&v46[7] + 4) = 0;
  if (a1)
  {
    BYTE12(v46[7]) = 1;
    BYTE13(v46[7]) = a9;
  }
  size_t outputStructCnt = 0x4000;
  uint64_t v26 = IOConnectCallStructMethod(dword_100347224, 0, &inputStruct, 0x8EuLL, v40, &outputStructCnt);
  if (v26)
  {
    uint64_t v35 = v26;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013F7C();
    }
    goto LABEL_78;
  }
  CFDataRef v27 = CFDataCreate(kCFAllocatorDefault, v40 + 4, 8);
  if (!v27)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013C84();
    }
    goto LABEL_92;
  }
  CFDataRef v28 = v27;
  if (!a1)
  {
    uint64_t v35 = 0;
    *a10 = *(_DWORD *)v40;
    *a11 = v27;
    goto LABEL_35;
  }
  CFIndex v29 = *((unsigned int *)v40 + 3);
  if (outputStructCnt < v29 + (unint64_t)*((unsigned int *)v40 + 4) + 20)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013D1C();
    }
    CFRelease(v28);
    uint64_t v35 = 4294967290;
    goto LABEL_78;
  }
  CFDataRef v30 = CFDataCreate(kCFAllocatorDefault, v40 + 20, v29);
  if (!v30)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013DB4();
    }
    CFRelease(v28);
LABEL_92:
    uint64_t v35 = 4294967291;
    goto LABEL_78;
  }
  CFDataRef v31 = v30;
  char v32 = &v40[*((unsigned int *)v40 + 3) + 20];
  CFDataRef v33 = CFDataCreate(kCFAllocatorDefault, v32, *((unsigned int *)v40 + 4));
  CFDataRef v34 = v33;
  if (v33)
  {
    if (!a14)
    {
      uint64_t v35 = 0;
      *a10 = *(_DWORD *)v40;
      *a11 = v28;
      *a12 = v31;
      *a13 = v33;
      goto LABEL_35;
    }
    int v41 = 0;
    uint64_t v35 = sub_10000E9E4((int *)&v32[*((unsigned int *)v40 + 4)], (unint64_t)&v40[outputStructCnt], &cf, &v41);
    if (!v35)
    {
      *a10 = *(_DWORD *)v40;
      *a11 = v28;
      *a12 = v31;
      *a13 = v34;
      *a14 = cf;
LABEL_35:
      free(v25);
      goto LABEL_36;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013EE4();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100013E4C();
    }
    uint64_t v35 = 4294967291;
  }
  CFRelease(v28);
  CFRelease(v31);
  if (v34) {
    CFRelease(v34);
  }
LABEL_78:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    goto LABEL_35;
  }
LABEL_36:
  sub_10000D49C((uint64_t)"authorize", v35, 0, (uint64_t)&v44, (uint64_t)&v46[4] + 4, v36, v37, v38);
  return v35;
}

uint64_t sub_10000DC94(int a1, int a2, const __CFData *a3, int a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, char a9, _DWORD *a10, CFDataRef *a11, CFDataRef *a12, CFDataRef *a13, CFDataRef *a14, CFTypeRef *a15)
{
  int v47 = a4;
  memset(v49, 0, 126);
  long long inputStruct = 0u;
  CFTypeRef cf = 0;
  size_t outputStructCnt = 0;
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000143A4();
    }
    goto LABEL_83;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001443C();
    }
    goto LABEL_83;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000144D4();
    }
    goto LABEL_83;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001456C();
    }
    goto LABEL_83;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014604();
    }
    goto LABEL_83;
  }
  if (!a10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001469C();
    }
    goto LABEL_83;
  }
  if (!a11)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014734();
    }
    goto LABEL_83;
  }
  if (!a12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000147CC();
    }
    goto LABEL_83;
  }
  if (a1)
  {
    if (a13)
    {
      if (a14) {
        goto LABEL_12;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000148FC();
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_100014864();
    }
LABEL_83:
    uint64_t v26 = 0;
LABEL_84:
    uint64_t v38 = 4294967292;
    goto LABEL_85;
  }
LABEL_12:
  long long v43 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x468DD742uLL);
  if (!v43)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014994();
    }
    uint64_t v26 = 0;
    goto LABEL_78;
  }
  uint64_t v23 = sub_10000CED4();
  if (v23)
  {
    uint64_t v38 = v23;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001527C();
    }
    goto LABEL_93;
  }
  if (a9 == 2 && a1)
  {
    uint64_t v24 = SSEIsFeatureSupported(11);
    if (v24)
    {
      uint64_t v38 = v24;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000151E4();
      }
      goto LABEL_93;
    }
    uint64_t v25 = sub_10000E980();
    if (v25)
    {
      uint64_t v38 = v25;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10001514C();
      }
      goto LABEL_93;
    }
  }
  strcpy((char *)&inputStruct, "cESS\b");
  DWORD2(inputStruct) = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x41)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014A2C();
    }
    uint64_t v38 = 4294967292;
LABEL_93:
    uint64_t v26 = v43;
    goto LABEL_85;
  }
  v50.length = CFDataGetLength(a3);
  v50.id location = 0;
  CFDataGetBytes(a3, v50, (UInt8 *)v49);
  HIDWORD(inputStruct) = CFDataGetLength(a3);
  LODWORD(v49[4]) = a4;
  if ((unint64_t)CFDataGetLength(a5) >= 0x19)
  {
    uint64_t v26 = v43;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014AC4();
    }
    goto LABEL_84;
  }
  v51.length = CFDataGetLength(a5);
  v51.id location = 0;
  CFDataGetBytes(a5, v51, (UInt8 *)&v49[4] + 4);
  uint64_t v26 = v43;
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000150B4();
    }
    goto LABEL_84;
  }
  v52.length = CFDataGetLength(a6);
  v52.id location = 0;
  CFDataGetBytes(a6, v52, (UInt8 *)&v49[5] + 12);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001501C();
    }
    goto LABEL_84;
  }
  v53.length = CFDataGetLength(a7);
  v53.id location = 0;
  CFDataGetBytes(a7, v53, (UInt8 *)&v49[6] + 4);
  if (CFDataGetLength(a8) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100014F84();
    }
    goto LABEL_84;
  }
  v54.length = CFDataGetLength(a8);
  v54.id location = 0;
  CFDataGetBytes(a8, v54, (UInt8 *)&v49[6] + 12);
  *(void *)((char *)&v49[7] + 4) = 0;
  if (a1)
  {
    BYTE12(v49[7]) = 1;
    BYTE13(v49[7]) = a9;
  }
  size_t outputStructCnt = 0x4000;
  uint64_t v27 = IOConnectCallStructMethod(dword_100347224, 0, &inputStruct, 0x8EuLL, v43, &outputStructCnt);
  if (!v27)
  {
    CFDataRef v28 = CFDataCreate(kCFAllocatorDefault, v43 + 4, 16);
    if (v28)
    {
      CFDataRef v29 = v28;
      CFDataRef v30 = CFDataCreate(kCFAllocatorDefault, v43 + 20, 8);
      if (v30)
      {
        CFDataRef v31 = v30;
        if (!a1)
        {
          uint64_t v38 = 0;
          *a10 = *(_DWORD *)v43;
          *a11 = v29;
          *a12 = v30;
          goto LABEL_37;
        }
        CFIndex v32 = *((unsigned int *)v43 + 7);
        if (outputStructCnt < v32 + (unint64_t)*((unsigned int *)v43 + 8) + 36)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100014C8C();
          }
          CFDataRef v37 = 0;
          CFDataRef v34 = 0;
          uint64_t v38 = 4294967290;
        }
        else
        {
          CFDataRef v33 = CFDataCreate(kCFAllocatorDefault, v43 + 36, v32);
          if (v33)
          {
            CFDataRef v34 = v33;
            uint64_t v35 = &v43[*((unsigned int *)v43 + 7) + 36];
            CFDataRef v36 = CFDataCreate(kCFAllocatorDefault, v35, *((unsigned int *)v43 + 8));
            if (v36)
            {
              CFDataRef v37 = v36;
              if (!a15)
              {
                uint64_t v38 = 0;
                *a10 = *(_DWORD *)v43;
                *a11 = v29;
                *a12 = v31;
                *a13 = v34;
                *a14 = v36;
                goto LABEL_37;
              }
              int v44 = 0;
              uint64_t v38 = sub_10000E9E4((int *)&v35[*((unsigned int *)v43 + 8)], (unint64_t)&v43[outputStructCnt], &cf, &v44);
              if (!v38)
              {
                *a10 = *(_DWORD *)v43;
                *a11 = v29;
                *a12 = v31;
                *a13 = v34;
                *a14 = v37;
                *a15 = cf;
LABEL_37:
                free(v26);
                goto LABEL_38;
              }
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                sub_100014E54();
              }
              goto LABEL_106;
            }
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_100014DBC();
            }
            CFDataRef v37 = 0;
          }
          else
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_100014D24();
            }
            CFDataRef v37 = 0;
            CFDataRef v34 = 0;
          }
          uint64_t v38 = 4294967291;
        }
LABEL_106:
        CFRelease(v29);
        CFRelease(v31);
        if (v34) {
          CFRelease(v34);
        }
        if (v37) {
          CFRelease(v37);
        }
        goto LABEL_85;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100014BF4();
      }
      CFRelease(v29);
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_100014B5C();
    }
LABEL_78:
    uint64_t v38 = 4294967291;
    goto LABEL_85;
  }
  uint64_t v38 = v27;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100014EEC();
  }
LABEL_85:
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    goto LABEL_37;
  }
LABEL_38:
  sub_10000D49C((uint64_t)"authorizeWithPIN", v38, 0, (uint64_t)&v47, (uint64_t)&v49[4] + 4, v39, v40, v41);
  return v38;
}

uint64_t SSEAuthorizeAndSignECommerceBlob(const __CFData *a1, int a2, const __CFData *a3, char a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, const __CFData **a9)
{
  int v32 = a2;
  size_t outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015314();
    }
    goto LABEL_38;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000153AC();
    }
    goto LABEL_38;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015444();
    }
    goto LABEL_38;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000154DC();
    }
    goto LABEL_38;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015574();
    }
    goto LABEL_38;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001560C();
    }
    goto LABEL_38;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000156A4();
    }
LABEL_38:
    uint64_t v25 = 4294967292;
    goto LABEL_23;
  }
  size_t v17 = malloc_type_calloc(0x4000uLL, 1uLL, 0x27E86296uLL);
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001573C();
    }
    goto LABEL_44;
  }
  uint64_t v18 = v17;
  uint64_t outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x1855B243uLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000157D4();
    }
    free(v18);
LABEL_44:
    uint64_t v25 = 4294967291;
    goto LABEL_23;
  }
  uint64_t v19 = sub_10000CED4();
  if (v19)
  {
    uint64_t v25 = v19;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015E5C();
    }
    goto LABEL_60;
  }
  *uint64_t v18 = 1397966179;
  *((_WORD *)v18 + 2) = 15;
  if ((unint64_t)CFDataGetLength(a1) >= 0x41)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001586C();
    }
    goto LABEL_59;
  }
  v33.length = CFDataGetLength(a1);
  v33.id location = 0;
  CFDataGetBytes(a1, v33, (UInt8 *)v18 + 12);
  void v18[2] = CFDataGetLength(a1);
  v18[19] = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015904();
    }
    goto LABEL_59;
  }
  v34.length = CFDataGetLength(a3);
  v34.id location = 0;
  CFDataGetBytes(a3, v34, (UInt8 *)v18 + 80);
  *((unsigned char *)v18 + 104) = a4;
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015DC4();
    }
    goto LABEL_59;
  }
  v35.length = CFDataGetLength(a5);
  v35.id location = 0;
  CFDataGetBytes(a5, v35, (UInt8 *)v18 + 105);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015D2C();
    }
    goto LABEL_59;
  }
  v36.length = CFDataGetLength(a6);
  v36.id location = 0;
  CFDataGetBytes(a6, v36, (UInt8 *)v18 + 113);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015C94();
    }
    goto LABEL_59;
  }
  v37.length = CFDataGetLength(a7);
  v37.id location = 0;
  CFDataGetBytes(a7, v37, (UInt8 *)v18 + 121);
  if ((unint64_t)CFDataGetLength(a8) >> 2 >= 0xFDD)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001599C();
    }
LABEL_59:
    uint64_t v25 = 4294967292;
LABEL_60:
    unint64_t v21 = outputStruct;
    goto LABEL_22;
  }
  *(_DWORD *)((char *)v18 + 137) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.id location = 0;
  CFDataGetBytes(a8, v38, (UInt8 *)v18 + 141);
  *(void *)((char *)v18 + 129) = 0;
  size_t v20 = *(unsigned int *)((char *)v18 + 137) + 141;
  size_t outputStructCnt = 0x4000;
  unint64_t v21 = outputStruct;
  uint64_t v22 = IOConnectCallStructMethod(dword_100347224, 0, v18, v20, outputStruct, &outputStructCnt);
  if (v22)
  {
    uint64_t v25 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015BFC();
    }
    goto LABEL_22;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015A34();
    }
  }
  else
  {
    CFIndex v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, outputStruct + 4, v23);
      if (v24)
      {
        uint64_t v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100015ACC();
        }
        uint64_t v25 = 4294967291;
      }
      goto LABEL_22;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015B64();
    }
  }
  uint64_t v25 = 4294967290;
LABEL_22:
  free(v18);
  free(v21);
LABEL_23:
  sub_10000D49C((uint64_t)"SSEAuthorizeAndSignECommerceBlob", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t sub_10000E980()
{
  if (qword_100347288 != -1) {
    dispatch_once(&qword_100347288, &stru_1003010E8);
  }
  uint64_t v0 = (void *)qword_100347280;
  if (!qword_100347280) {
    return 4294967290;
  }

  return (uint64_t)[v0 prepare];
}

uint64_t sub_10000E9E4(int *a1, unint64_t a2, void *a3, _DWORD *a4)
{
  id v8 = +[NSMutableArray array];
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015EF4();
    }
    goto LABEL_32;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100015F8C();
    }
    goto LABEL_32;
  }
  if ((unint64_t)a1 > a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016024();
    }
    goto LABEL_32;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000160BC();
    }
    goto LABEL_32;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016154();
    }
LABEL_32:
    uint64_t v16 = 4294967292;
    goto LABEL_16;
  }
  if ((unint64_t)a1 < a2)
  {
    if (a2 - (unint64_t)a1 <= 3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000161EC();
      }
LABEL_21:
      uint64_t v16 = 4294967290;
      goto LABEL_16;
    }
    int v9 = *a1;
    if (*a1)
    {
      int v10 = 0;
      uint64_t v11 = (unsigned int *)(a1 + 1);
      while (a2 - (unint64_t)v11 > 3)
      {
        unsigned int v14 = *v11;
        uint64_t v12 = v11 + 1;
        uint64_t v13 = v14;
        if ((uint64_t)(a2 - (void)v12) < v14)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10001631C();
          }
          goto LABEL_21;
        }
        uint64_t v15 = +[NSData dataWithBytes:v12 length:v13];
        [v8 addObject:v15];

        uint64_t v11 = (_DWORD *)((char *)v12 + v13);
        v10 += v13 + 4;
        if (!--v9) {
          goto LABEL_15;
        }
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100016284();
      }
      goto LABEL_21;
    }
  }
  int v10 = 0;
LABEL_15:
  uint64_t v16 = 0;
  *a3 = v8;
  *a4 = v10;
LABEL_16:

  return v16;
}

uint64_t SSEAuthorizeAndSignAPDU(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, CFDataRef *a9)
{
  int v32 = a3;
  size_t outputStructCnt = 0;
  if (a1 != 8 && !a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000163B4();
    }
    goto LABEL_41;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001644C();
    }
    goto LABEL_41;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000164E4();
    }
    goto LABEL_41;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001657C();
    }
    goto LABEL_41;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016614();
    }
    goto LABEL_41;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000166AC();
    }
    goto LABEL_41;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016744();
    }
LABEL_41:
    uint64_t v25 = 4294967292;
    goto LABEL_26;
  }
  size_t v17 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xE7B35AA9uLL);
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000167DC();
    }
    goto LABEL_47;
  }
  uint64_t v18 = v17;
  uint64_t outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x939AC92CuLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016874();
    }
    free(v18);
LABEL_47:
    uint64_t v25 = 4294967291;
    goto LABEL_26;
  }
  uint64_t v19 = sub_10000CED4();
  if (v19)
  {
    uint64_t v25 = v19;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016EFC();
    }
    goto LABEL_73;
  }
  *(_DWORD *)uint64_t v18 = 1397966179;
  *((_WORD *)v18 + 2) = 31;
  *((_DWORD *)v18 + 2) = a1;
  if (a1 != 8)
  {
    if ((unint64_t)CFDataGetLength(a2) >= 0x41)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100016E64();
      }
      goto LABEL_72;
    }
    v33.length = CFDataGetLength(a2);
    v33.id location = 0;
    CFDataGetBytes(a2, v33, v18 + 16);
    *((_DWORD *)v18 + 3) = CFDataGetLength(a2);
  }
  *((_DWORD *)v18 + 20) = a3;
  if ((unint64_t)CFDataGetLength(a4) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001690C();
    }
    goto LABEL_72;
  }
  v34.length = CFDataGetLength(a4);
  v34.id location = 0;
  CFDataGetBytes(a4, v34, v18 + 84);
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016DCC();
    }
    goto LABEL_72;
  }
  v35.length = CFDataGetLength(a5);
  v35.id location = 0;
  CFDataGetBytes(a5, v35, v18 + 108);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016D34();
    }
    goto LABEL_72;
  }
  v36.length = CFDataGetLength(a6);
  v36.id location = 0;
  CFDataGetBytes(a6, v36, v18 + 116);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016C9C();
    }
    goto LABEL_72;
  }
  v37.length = CFDataGetLength(a7);
  v37.id location = 0;
  CFDataGetBytes(a7, v37, v18 + 124);
  if ((unint64_t)CFDataGetLength(a8) >= 0x3F79)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000169A4();
    }
LABEL_72:
    uint64_t v25 = 4294967292;
LABEL_73:
    unint64_t v21 = outputStruct;
    goto LABEL_25;
  }
  *((_DWORD *)v18 + 33) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.id location = 0;
  CFDataGetBytes(a8, v38, v18 + 136);
  size_t v20 = *((unsigned int *)v18 + 33) + 136;
  size_t outputStructCnt = 0x4000;
  unint64_t v21 = outputStruct;
  uint64_t v22 = IOConnectCallStructMethod(dword_100347224, 0, v18, v20, outputStruct, &outputStructCnt);
  if (v22)
  {
    uint64_t v25 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016C04();
    }
    goto LABEL_25;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016A3C();
    }
  }
  else
  {
    CFIndex v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, outputStruct + 4, v23);
      if (v24)
      {
        uint64_t v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100016AD4();
        }
        uint64_t v25 = 4294967291;
      }
      goto LABEL_25;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016B6C();
    }
  }
  uint64_t v25 = 4294967290;
LABEL_25:
  free(v18);
  free(v21);
LABEL_26:
  sub_10000D49C((uint64_t)"SSEAuthorizeAndSignAPDU", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t SSEGetActivationTimeout(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, unsigned __int16 *a6, const __CFData **a7)
{
  int v23 = a1;
  memset(inputStruct, 0, sizeof(inputStruct));
  __int16 v25 = 0;
  uint64_t outputStruct = 0;
  size_t v22 = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100016F94();
    }
    goto LABEL_39;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001702C();
    }
    goto LABEL_39;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000170C4();
    }
    goto LABEL_39;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001715C();
    }
    goto LABEL_39;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000171F4();
    }
    goto LABEL_39;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001728C();
    }
    goto LABEL_39;
  }
  uint64_t v14 = sub_10000CED4();
  if (!v14)
  {
    *(_DWORD *)long long inputStruct = 1397966179;
    *(_WORD *)&inputStruct[4] = 4;
    *(_DWORD *)&inputStruct[8] = a1;
    if ((unint64_t)CFDataGetLength(a2) >= 0x19)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100017324();
      }
    }
    else
    {
      v27.length = CFDataGetLength(a2);
      v27.id location = 0;
      CFDataGetBytes(a2, v27, (UInt8 *)((unint64_t)inputStruct | 0xC));
      if (CFDataGetLength(a3) == 8)
      {
        v28.length = CFDataGetLength(a3);
        v28.id location = 0;
        CFDataGetBytes(a3, v28, &inputStruct[36]);
        if (CFDataGetLength(a4) == 8)
        {
          v29.length = CFDataGetLength(a4);
          v29.id location = 0;
          CFDataGetBytes(a4, v29, &inputStruct[44]);
          if (CFDataGetLength(a5) == 8)
          {
            v30.length = CFDataGetLength(a5);
            v30.id location = 0;
            CFDataGetBytes(a5, v30, &inputStruct[52]);
            *(void *)&inputStruct[60] = 0;
            size_t v22 = 10;
            uint64_t v15 = IOConnectCallStructMethod(dword_100347224, 0, inputStruct, 0x44uLL, &outputStruct, &v22);
            if (v15)
            {
              uint64_t v20 = v15;
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                sub_1000174EC();
              }
            }
            else if (v22 == 10)
            {
              CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&outputStruct + 2, 8);
              *a7 = v16;
              if (v16)
              {
                uint64_t v20 = 0;
                *a6 = outputStruct;
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  sub_1000173BC();
                }
                uint64_t v20 = 4294967291;
              }
            }
            else
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                sub_100017454();
              }
              uint64_t v20 = 4294967290;
            }
            goto LABEL_16;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100017584();
          }
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_10001761C();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1000176B4();
      }
    }
LABEL_39:
    uint64_t v20 = 4294967292;
    goto LABEL_16;
  }
  uint64_t v20 = v14;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10001774C();
  }
LABEL_16:
  sub_10000D49C((uint64_t)"SSEGetActivationTimeout", v20, 0, (uint64_t)&v23, (unint64_t)inputStruct | 0xC, v17, v18, v19);
  return v20;
}

uint64_t SSEUseEntangledAuthorizationRandom(char a1)
{
  char v10 = 0;
  uint64_t v9 = 0;
  uint64_t v2 = sub_10000CED4();
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001787C();
    }
  }
  else
  {
    strcpy((char *)&v9, "cESS!");
    char v10 = a1;
    uint64_t v3 = IOConnectCallStructMethod(dword_100347224, 0, &v9, 9uLL, 0, 0);
    if (v3)
    {
      uint64_t v8 = v3;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000177E4();
      }
      uint64_t v2 = v8;
    }
  }
  sub_10000D49C((uint64_t)"SSEUseEntangledAuthorizationRandom", v2, 0, 0, 0, v4, v5, v6);
  return v2;
}

uint64_t SSEGetAuthorizationRandom(int a1, const __CFData *a2, const __CFData **a3, const __CFData **a4)
{
  int v19 = a1;
  memset(inputStruct, 0, 44);
  outputStruct[0] = 0;
  outputStruct[1] = 0;
  uint64_t v21 = 0;
  size_t outputStructCnt = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017914();
    }
    goto LABEL_22;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000179AC();
    }
    goto LABEL_22;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017A44();
    }
    goto LABEL_22;
  }
  uint64_t v8 = sub_10000CED4();
  if (v8)
  {
    uint64_t v16 = v8;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017DD4();
    }
    goto LABEL_11;
  }
  LODWORD(inputStruct[0]) = 1397966179;
  WORD2(inputStruct[0]) = 5;
  DWORD2(inputStruct[0]) = a1;
  if ((unint64_t)CFDataGetLength(a2) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017ADC();
    }
LABEL_22:
    uint64_t v16 = 4294967292;
    goto LABEL_11;
  }
  v23.length = CFDataGetLength(a2);
  v23.id location = 0;
  CFDataGetBytes(a2, v23, (UInt8 *)((unint64_t)inputStruct | 0xC));
  *(void *)((char *)&inputStruct[2] + 4) = 0;
  size_t outputStructCnt = 24;
  uint64_t v9 = IOConnectCallStructMethod(dword_100347224, 0, inputStruct, 0x2CuLL, outputStruct, &outputStructCnt);
  if (v9)
  {
    uint64_t v16 = v9;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017D3C();
    }
  }
  else
  {
    if (outputStructCnt == 24)
    {
      CFDataRef v10 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)outputStruct, 16);
      if (v10)
      {
        CFDataRef v11 = v10;
        CFDataRef v12 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&v21, 8);
        if (v12)
        {
          uint64_t v16 = 0;
          *a3 = v11;
          *a4 = v12;
          goto LABEL_11;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100017C0C();
        }
        CFRelease(v11);
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_100017B74();
      }
      uint64_t v16 = 4294967291;
      goto LABEL_11;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017CA4();
    }
    uint64_t v16 = 4294967290;
  }
LABEL_11:
  sub_10000D49C((uint64_t)"SSEGetAuthorizationRandom", v16, 1, (uint64_t)&v19, (unint64_t)inputStruct | 0xC, v13, v14, v15);
  return v16;
}

uint64_t SSEGetEntangledAuthorizationRandom(int a1, const __CFData *a2, char a3, CFDataRef *a4, CFDataRef *a5)
{
  int v26 = a1;
  memset(inputStruct, 0, sizeof(inputStruct));
  size_t v25 = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017E6C();
    }
    goto LABEL_23;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017F04();
    }
    goto LABEL_23;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100017F9C();
    }
LABEL_23:
    uint64_t v20 = 4294967292;
    goto LABEL_16;
  }
  CFDataRef v10 = (UInt8 *)malloc_type_calloc(0x108uLL, 1uLL, 0x2AD6A872uLL);
  if (v10)
  {
    CFDataRef v11 = v10;
    uint64_t v12 = sub_10000CED4();
    if (v12)
    {
      uint64_t v20 = v12;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10001858C();
      }
      goto LABEL_15;
    }
    strcpy(inputStruct, "cESS\"");
    *(_DWORD *)&inputStruct[8] = a1;
    if ((unint64_t)CFDataGetLength(a2) >= 0x19)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000180CC();
      }
      uint64_t v20 = 4294967292;
      goto LABEL_15;
    }
    v28.length = CFDataGetLength(a2);
    v28.id location = 0;
    CFDataGetBytes(a2, v28, (UInt8 *)((unint64_t)inputStruct | 0xC));
    inputStruct[36] = a3;
    size_t v25 = 264;
    uint64_t v13 = IOConnectCallStructMethod(dword_100347224, 0, inputStruct, 0x25uLL, v11, &v25);
    if (v13)
    {
      uint64_t v20 = v13;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000184F4();
      }
      goto LABEL_15;
    }
    size_t v14 = v25;
    if (v25 <= 7)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100018164();
      }
    }
    else if (v25 >= 0x109)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000181FC();
      }
    }
    else
    {
      unint64_t v15 = *(unsigned int *)v11;
      if (v25 - 8 >= v15)
      {
        CFDataRef v16 = CFDataCreate(kCFAllocatorDefault, v11 + 8, v15);
        if (!v16)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10001832C();
          }
          uint64_t v20 = 4294967291;
          goto LABEL_15;
        }
        CFDataRef v17 = v16;
        CFIndex v18 = *((unsigned int *)v11 + 1);
        if ((uint64_t)(v14 - (*(unsigned int *)v11 + 8)) < v18)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_1000183C4();
          }
          uint64_t v20 = 4294967290;
        }
        else
        {
          CFDataRef v19 = CFDataCreate(kCFAllocatorDefault, &v11[*(unsigned int *)v11 + 8], v18);
          if (v19)
          {
            uint64_t v20 = 0;
            *a4 = v17;
            *a5 = v19;
LABEL_15:
            free(v11);
            goto LABEL_16;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10001845C();
          }
          uint64_t v20 = 4294967291;
        }
        CFRelease(v17);
        goto LABEL_15;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100018294();
      }
    }
    uint64_t v20 = 4294967290;
    goto LABEL_15;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100018034();
  }
  uint64_t v20 = 4294967291;
LABEL_16:
  sub_10000D49C((uint64_t)"SSEGetEntangledAuthorizationRandom", v20, 1, (uint64_t)&v26, (unint64_t)inputStruct | 0xC, v21, v22, v23);
  return v20;
}

uint64_t SSEEffaceAuthorizationRandom()
{
  uint64_t inputStruct = 0;
  uint64_t v0 = sub_10000CED4();
  if (v0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000186BC();
    }
  }
  else
  {
    LODWORD(inputStruct) = 1397966179;
    WORD2(inputStruct) = 6;
    uint64_t v1 = IOConnectCallStructMethod(dword_100347224, 0, &inputStruct, 8uLL, 0, 0);
    if (v1)
    {
      uint64_t v6 = v1;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100018624();
      }
      uint64_t v0 = v6;
    }
  }
  sub_10000D49C((uint64_t)"SSEEffaceAuthorizationRandom", v0, 1, 0, 0, v2, v3, v4);
  return v0;
}

uint64_t SSEGetSignedDeviceData(const __CFData *a1, CFDataRef *a2)
{
  uint64_t v16 = 0;
  memset(inputStruct, 0, sizeof(inputStruct));
  int v14 = 0;
  memset(outputStruct, 0, sizeof(outputStruct));
  size_t outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018754();
    }
    goto LABEL_19;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000187EC();
    }
    goto LABEL_19;
  }
  uint64_t v4 = sub_10000CED4();
  if (v4)
  {
    uint64_t v10 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018B7C();
    }
    goto LABEL_10;
  }
  inputStruct[0] = 1397966179;
  LOWORD(inputStruct[1]) = 16;
  if ((unint64_t)CFDataGetLength(a1) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018884();
    }
LABEL_19:
    uint64_t v10 = 4294967292;
    goto LABEL_10;
  }
  v17.length = CFDataGetLength(a1);
  v17.id location = 0;
  CFDataGetBytes(a1, v17, (UInt8 *)&inputStruct[2]);
  uint64_t v16 = 0;
  size_t outputStructCnt = 260;
  uint64_t v5 = IOConnectCallStructMethod(dword_100347224, 0, inputStruct, 0x28uLL, outputStruct, &outputStructCnt);
  if (!v5)
  {
    if (outputStructCnt <= 3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10001891C();
      }
    }
    else
    {
      if (outputStructCnt == LODWORD(outputStruct[0]) + 4)
      {
        CFDataRef v6 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)outputStruct + 4, LODWORD(outputStruct[0]));
        if (v6)
        {
          uint64_t v10 = 0;
          *a2 = v6;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_1000189B4();
          }
          uint64_t v10 = 4294967291;
        }
        goto LABEL_10;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100018A4C();
      }
    }
    uint64_t v10 = 4294967290;
    goto LABEL_10;
  }
  uint64_t v10 = v5;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100018AE4();
  }
LABEL_10:
  sub_10000D49C((uint64_t)"SSEGetSignedDeviceData", v10, 0, 0, (uint64_t)&inputStruct[2], v7, v8, v9);
  return v10;
}

uint64_t sub_10000FFB8()
{
  if (qword_100347288 != -1) {
    dispatch_once(&qword_100347288, &stru_1003010E8);
  }
  uint64_t v0 = (void *)qword_100347280;
  if (!qword_100347280) {
    return 4294967290;
  }

  return (uint64_t)[v0 issueNewCertificate];
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, int a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFString *a6, const __CFData *a7, unsigned int a8, const __CFData **a9, const __CFData **a10)
{
  size_t outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018C14();
    }
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018CAC();
    }
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018D44();
    }
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018DDC();
    }
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018E74();
    }
    return 4294967292;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018F0C();
    }
    return 4294967292;
  }
  if (a8 - 4 <= 0xFFFFFFFC)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100018FA4();
    }
    return 4294967292;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001903C();
    }
    return 4294967292;
  }
  if (!a10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1000190D4();
    }
    return 4294967292;
  }
  if (a8 < 2 || (uint64_t v18 = SSEIsFeatureSupported(32), !v18))
  {
    CFDataRef v19 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0x29CD736uLL);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xAE84491FuLL);
      if (outputStruct)
      {
        uint64_t v21 = sub_10000CED4();
        if (v21)
        {
          uint64_t v46 = v21;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100019AEC();
          }
          goto LABEL_73;
        }
        *(_DWORD *)uint64_t v20 = 1397966179;
        v20[4] = 27;
        v20[5] = a8 > 1;
        unint64_t Length = CFDataGetLength(a1);
        if (Length >= 0x41)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10001929C();
          }
        }
        else
        {
          int v23 = Length;
          v50.id location = 0;
          v50.length = Length;
          CFDataGetBytes(a1, v50, (UInt8 *)v20 + 12);
          *((_DWORD *)v20 + 2) = v23;
          *((_DWORD *)v20 + 19) = a2;
          unint64_t v24 = CFDataGetLength(a3);
          if (v24 >= 0x19)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_100019334();
            }
          }
          else
          {
            v51.length = v24;
            v51.id location = 0;
            CFDataGetBytes(a3, v51, (UInt8 *)v20 + 80);
            size_t v25 = v20 + 0x4000;
            if (a8 < 2)
            {
              int v26 = (UInt8 *)(v20 + 120);
            }
            else
            {
              v20[120] = a8;
              int v26 = (UInt8 *)(v20 + 121);
            }
            unint64_t v27 = CFDataGetLength(a4);
            if (v25 - (char *)v26 < v27)
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                sub_1000193CC();
              }
            }
            else
            {
              unint64_t v28 = v27;
              *((_DWORD *)v20 + 26) = v27;
              v52.id location = 0;
              v52.length = v27;
              CFDataGetBytes(a4, v52, v26);
              CFRange v29 = &v26[v28];
              unint64_t v30 = CFDataGetLength(a5);
              if (v25 - (char *)v29 < v30)
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  sub_100019464();
                }
              }
              else
              {
                unint64_t v31 = v30;
                *((_DWORD *)v20 + 27) = v30;
                v53.id location = 0;
                v53.length = v30;
                CFDataGetBytes(a5, v53, v29);
                int v32 = &v29[v31];
                unint64_t v33 = CFStringGetLength(a6);
                if (v25 - (char *)v32 >= v33)
                {
                  unint64_t v34 = v33;
                  v54.id location = 0;
                  v54.length = v33;
                  if (CFStringGetBytes(a6, v54, 0x8000100u, 0, 0, v32, v25 - (char *)v32, 0) == v33)
                  {
                    *((_DWORD *)v20 + 2_Block_object_dispose(&STACK[0x2B0], 8) = v34;
                    CFRange v35 = &v32[v34];
                    unint64_t v36 = CFDataGetLength(a7);
                    if (v25 - (char *)v35 < v36)
                    {
                      CFRange v38 = outputStruct;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_100019594();
                      }
                      uint64_t v46 = 4294967292;
                      goto LABEL_33;
                    }
                    unint64_t v37 = v36;
                    *((_DWORD *)v20 + 29) = v36;
                    v55.id location = 0;
                    v55.length = v36;
                    CFDataGetBytes(a7, v55, v35);
                    size_t outputStructCnt = 0x4000;
                    CFRange v38 = outputStruct;
                    uint64_t v39 = IOConnectCallStructMethod(dword_100347224, 0, v20, &v35[v37] - (UInt8 *)v20, outputStruct, &outputStructCnt);
                    if (v39)
                    {
                      uint64_t v46 = v39;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_1000199BC();
                      }
                      goto LABEL_33;
                    }
                    size_t v40 = outputStructCnt;
                    if (outputStructCnt <= 7)
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_10001962C();
                      }
                    }
                    else if (outputStructCnt > 0x4000)
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_1000196C4();
                      }
                    }
                    else
                    {
                      unint64_t v41 = *(unsigned int *)outputStruct;
                      if (outputStructCnt - 8 >= v41)
                      {
                        CFDataRef v42 = CFDataCreate(kCFAllocatorDefault, outputStruct + 8, v41);
                        if (!v42)
                        {
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            sub_1000197F4();
                          }
                          uint64_t v46 = 4294967291;
                          goto LABEL_33;
                        }
                        CFDataRef v43 = v42;
                        CFIndex v44 = *((unsigned int *)outputStruct + 1);
                        if ((uint64_t)(v40 - (*(unsigned int *)outputStruct + 8)) < v44)
                        {
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            sub_10001988C();
                          }
                          uint64_t v46 = 4294967290;
                        }
                        else
                        {
                          CFDataRef v45 = CFDataCreate(kCFAllocatorDefault, &outputStruct[*(unsigned int *)outputStruct + 8], v44);
                          if (v45)
                          {
                            uint64_t v46 = 0;
                            *a9 = v43;
                            *a10 = v45;
LABEL_33:
                            free(v20);
                            free(v38);
                            return v46;
                          }
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            sub_100019924();
                          }
                          uint64_t v46 = 4294967291;
                        }
                        CFRelease(v43);
                        goto LABEL_33;
                      }
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_10001975C();
                      }
                    }
                    uint64_t v46 = 4294967290;
                    goto LABEL_33;
                  }
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    sub_100019A54();
                  }
                  uint64_t v46 = 4294967290;
LABEL_73:
                  CFRange v38 = outputStruct;
                  goto LABEL_33;
                }
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  sub_1000194FC();
                }
              }
            }
          }
        }
        uint64_t v46 = 4294967292;
        goto LABEL_73;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100019204();
      }
      free(v20);
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_10001916C();
    }
    return 4294967291;
  }
  uint64_t v46 = v18;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100019B84();
  }
  return v46;
}

uint64_t SSESetSEPubKey(const __CFData *a1, const __CFData *a2)
{
  *(void *)buffer = 0;
  uint64_t v16 = 0;
  int v18 = 0;
  uint64_t v17 = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100019C1C();
    }
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100019CB4();
    }
    return 4294967292;
  }
  uint64_t v4 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0xB0967022uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = sub_10000CED4();
    if (v6)
    {
      uint64_t v13 = v6;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10001A048();
      }
    }
    else
    {
      unint64_t Length = CFDataGetLength(a1);
      if (Length >= 0x19)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100019DE4();
        }
      }
      else
      {
        v19.length = Length;
        v19.id location = 0;
        CFDataGetBytes(a1, v19, buffer);
        if (CFDataGetLength(a2) >= (uint64_t)&_mh_execute_header)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100019E7C();
          }
        }
        else
        {
          int v18 = CFDataGetLength(a2);
          uint64_t v8 = +[NSMutableData dataWithBytes:buffer length:28];
          [(NSMutableData *)v8 appendData:a2];
          if (!([(NSMutableData *)v8 length] >> 32))
          {
            LODWORD(v9) = 0;
            while (1)
            {
              strcpy(v5, "cESS%");
              unsigned int v10 = ([(NSMutableData *)v8 length] - v9) >> 2 > 0xFFA
                  ? 16364
                  : [(NSMutableData *)v8 length] - v9;
              *((_DWORD *)v5 + 2) = [(NSMutableData *)v8 length];
              *((_DWORD *)v5 + 3) = v9;
              *((_DWORD *)v5 + 4) = v10;
              CFDataRef v11 = v8;
              [(NSMutableData *)v11 bytes];
              __memcpy_chk();
              uint64_t v12 = IOConnectCallStructMethod(dword_100347224, 0, v5, v10 + 20, 0, 0);
              if (v12) {
                break;
              }
              unint64_t v9 = v9 + v10;
              if ([(NSMutableData *)v11 length] <= v9)
              {

                uint64_t v13 = 0;
                goto LABEL_15;
              }
            }
            uint64_t v13 = v12;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_100019FAC();
            }

            goto LABEL_15;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100019F14();
          }
        }
      }
      uint64_t v13 = 4294967292;
    }
LABEL_15:
    free(v5);
    return v13;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100019D4C();
  }
  return 4294967291;
}

uint64_t SSEGetAuthKeySharingState(const __CFData *a1, _DWORD *a2)
{
  uint64_t v11 = 0;
  *(void *)&inputStruct[4] = 0;
  int v13 = 0;
  uint64_t v12 = 0;
  int outputStruct = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A0E0();
    }
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A178();
    }
    return 4294967292;
  }
  uint64_t v4 = sub_10000CED4();
  if (!v4)
  {
    strcpy(inputStruct, "cESS&");
    if ((unint64_t)CFDataGetLength(a1) < 0x19)
    {
      v14.length = CFDataGetLength(a1);
      v14.id location = 0;
      CFDataGetBytes(a1, v14, &inputStruct[8]);
      size_t outputStructCnt = 4;
      uint64_t v5 = IOConnectCallStructMethod(dword_100347224, 0, inputStruct, 0x20uLL, &outputStruct, &outputStructCnt);
      if (v5)
      {
        uint64_t v6 = v5;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10001A340();
        }
      }
      else if (outputStructCnt == 4)
      {
        uint64_t v6 = 0;
        *a2 = outputStruct;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10001A2A8();
        }
        return 4294967290;
      }
      return v6;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A210();
    }
    return 4294967292;
  }
  uint64_t v6 = v4;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_10001A3D8();
  }
  return v6;
}

uint64_t SSEPerformAuthKeySharing(const __CFData *a1, const __CFData *a2, const __CFData *a3, CFDataRef *a4, CFDataRef *a5)
{
  size_t outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A470();
    }
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A508();
    }
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A5A0();
    }
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A638();
    }
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A6D0();
    }
    return 4294967292;
  }
  unsigned int v10 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xD2063E45uLL);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A768();
    }
    return 4294967291;
  }
  uint64_t v11 = v10;
  uint64_t v12 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x43BFE140uLL);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A800();
    }
    free(v11);
    return 4294967291;
  }
  int v13 = v12;
  uint64_t v14 = sub_10000CED4();
  if (v14)
  {
    uint64_t v27 = v14;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001AE88();
    }
    goto LABEL_20;
  }
  strcpy((char *)v11, "cESS$");
  if ((unint64_t)CFDataGetLength(a1) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A898();
    }
    goto LABEL_47;
  }
  v30.length = CFDataGetLength(a1);
  v30.id location = 0;
  CFDataGetBytes(a1, v30, v11 + 8);
  unint64_t Length = CFDataGetLength(a2);
  if (Length >= 0x3FD9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A930();
    }
    goto LABEL_47;
  }
  unint64_t v16 = Length;
  *((_DWORD *)v11 + _Block_object_dispose(&STACK[0x2B0], 8) = Length;
  v31.id location = 0;
  v31.length = Length;
  CFDataGetBytes(a2, v31, v11 + 40);
  uint64_t v17 = &v11[v16 + 40];
  unint64_t v18 = CFDataGetLength(a3);
  if (v11 - v17 + 0x4000 < v18)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001A9C8();
    }
LABEL_47:
    uint64_t v27 = 4294967292;
    goto LABEL_20;
  }
  unint64_t v19 = v18;
  *((_DWORD *)v11 + 9) = v18;
  v32.id location = 0;
  v32.length = v18;
  CFDataGetBytes(a3, v32, v17);
  size_t outputStructCnt = 0x4000;
  uint64_t v20 = IOConnectCallStructMethod(dword_100347224, 0, v11, &v17[v19] - v11, v13, &outputStructCnt);
  if (v20)
  {
    uint64_t v27 = v20;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001ADF0();
    }
    goto LABEL_20;
  }
  size_t v21 = outputStructCnt;
  if (outputStructCnt <= 7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001AA60();
    }
    goto LABEL_56;
  }
  if (outputStructCnt > 0x4000)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001AAF8();
    }
    goto LABEL_56;
  }
  unint64_t v22 = *(unsigned int *)v13;
  if (outputStructCnt - 8 < v22)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001AB90();
    }
LABEL_56:
    uint64_t v27 = 4294967290;
    goto LABEL_20;
  }
  CFDataRef v23 = CFDataCreate(kCFAllocatorDefault, v13 + 8, v22);
  if (!v23)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001AC28();
    }
    uint64_t v27 = 4294967291;
    goto LABEL_20;
  }
  CFDataRef v24 = v23;
  CFIndex v25 = *((unsigned int *)v13 + 1);
  if ((uint64_t)(v21 - (*(unsigned int *)v13 + 8)) < v25)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001ACC0();
    }
    uint64_t v27 = 4294967290;
    goto LABEL_66;
  }
  CFDataRef v26 = CFDataCreate(kCFAllocatorDefault, &v13[*(unsigned int *)v13 + 8], v25);
  if (!v26)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10001AD58();
    }
    uint64_t v27 = 4294967291;
LABEL_66:
    CFRelease(v24);
    goto LABEL_20;
  }
  uint64_t v27 = 0;
  *a4 = v24;
  *a5 = v26;
LABEL_20:
  free(v11);
  free(v13);
  return v27;
}

uint64_t SSEAuthorizeWithPIN(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, _DWORD *a7, CFDataRef *a8, CFDataRef *a9)
{
  return sub_10000DC94(0, a1, a2, -1, a3, a4, a5, a6, 0, a7, a8, a9, 0, 0, 0);
}

uint64_t SSEGetActivationTimeout(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, unsigned __int16 *a5, const __CFData **a6)
{
  return SSEGetActivationTimeout(-1, a1, a2, a3, a4, a5, a6);
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFString *a5, const __CFData *a6, unsigned int a7, const __CFData **a8, const __CFData **a9)
{
  return SSEEvaluateSecureElementACL(a1, -1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_100011DFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == -469794813)
  {
    uint64_t v5 = (id)qword_100347230;
    uint64_t v6 = v5;
    if (!v5) {
      uint64_t v6 = dispatch_get_global_queue(21, 0);
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100012150;
    v9[3] = &unk_1003010A8;
    v9[4] = a4;
    uint64_t v7 = v9;
    goto LABEL_10;
  }
  if (a3 == -469794814)
  {
    if (!byte_100347729)
    {
      uint64_t v8 = dispatch_get_global_queue(21, 0);
      dispatch_async(v8, &stru_1003010C8);
    }
    goto LABEL_14;
  }
  if (a3 != -469794815)
  {
LABEL_14:
    uint64_t v5 = 0;
    goto LABEL_15;
  }
  uint64_t v5 = (id)qword_100347228;
  uint64_t v6 = v5;
  if (!v5) {
    uint64_t v6 = dispatch_get_global_queue(21, 0);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100012128;
  v10[3] = &unk_1003010A8;
  v10[4] = a4;
  uint64_t v7 = v10;
LABEL_10:
  dispatch_async(v6, v7);
  if (!v5) {

  }
LABEL_15:
}

void sub_100011FB8(id a1)
{
  size_t v3 = 1024;
  if (!sysctlbyname("kern.bootargs", __str, &v3, 0, 0))
  {
    __lasts = 0;
    uint64_t v1 = strtok_r(__str, " \t", &__lasts);
    if (v1)
    {
      while (strcmp(v1, "rd=md0"))
      {
        uint64_t v1 = strtok_r(0, " \t", &__lasts);
        if (!v1) {
          return;
        }
      }
      byte_10034725C = 1;
    }
  }
}

void sub_100012098(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
  if (v1)
  {
    uint64_t v2 = v1;
    size_t v3 = (uint64_t (*)(const __CFString *))dlsym(v1, "MGGetBoolAnswer");
    if (v3)
    {
      uint64_t v4 = v3;
      byte_100347268 = v3(@"0dnM19zBqLw5ZPhIo4GEkg");
      byte_100347269 = v4(@"InternalBuild");
    }
    dlclose(v2);
  }
}

uint64_t sub_100012128()
{
  uint64_t result = qword_100347210;
  if (qword_100347210) {
    return (*(uint64_t (**)(void))(qword_100347210 + 16))();
  }
  return result;
}

uint64_t sub_100012150()
{
  uint64_t result = qword_100347218;
  if (qword_100347218) {
    return (*(uint64_t (**)(void))(qword_100347218 + 16))();
  }
  return result;
}

const char *sub_100012174(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (qword_100347278)
  {
    unint64_t v9 = result;
    *(_OWORD *)uint64_t v14 = 0u;
    long long v15 = 0u;
    time_t v13 = time(0);
    unsigned int v10 = localtime(&v13);
    strftime(v14, 0x20uLL, "%F %T (%z)", v10);
    uint64_t v11 = (FILE *)qword_100347278;
    uint64_t v12 = getprogname();
    fprintf(v11, "%s [%s]: ", v14, v12);
    vfprintf((FILE *)qword_100347278, v9, &a9);
    fputs("\n", (FILE *)qword_100347278);
    return (const char *)fflush((FILE *)qword_100347278);
  }
  return result;
}

uint64_t sub_100012260(uint64_t result, uint64_t a2)
{
  if (qword_100347278)
  {
    size_t v3 = (_DWORD *)result;
    uint64_t inputStruct = 0x953534563;
    long long v7 = 0u;
    long long v8 = 0u;
    long long outputStruct = 0u;
    size_t outputStructCnt = 48;
    uint64_t result = IOConnectCallStructMethod(dword_100347224, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!result)
    {
      if (v3) {
        fprintf((FILE *)qword_100347278, "\tuserID        = %u\n", *v3);
      }
      if (a2)
      {
        fwrite("\tseid          = ", 0x11uLL, 1uLL, (FILE *)qword_100347278);
        for (uint64_t i = 0; i != 24; ++i)
          fprintf((FILE *)qword_100347278, "%02x", *(unsigned __int8 *)(a2 + i));
        fputs("\n", (FILE *)qword_100347278);
      }
      fprintf((FILE *)qword_100347278, "\tsseKey hash   = %016llx\n", (void)outputStruct);
      fprintf((FILE *)qword_100347278, "\tauthRand hash = %016llx\n", *((void *)&outputStruct + 1));
      fprintf((FILE *)qword_100347278, "\tsubcounter    = %llu\n", (void)v7);
      fprintf((FILE *)qword_100347278, "\tentropy hash  = %016llx\n", *((void *)&v7 + 1));
      fprintf((FILE *)qword_100347278, "\tkeybag hash   = %016llx\n", (void)v8);
      fprintf((FILE *)qword_100347278, "\tnoPasscodeCnt = %u\n", DWORD2(v8));
      return fflush((FILE *)qword_100347278);
    }
  }
  return result;
}

void sub_1000123F4(id a1)
{
  if (qword_100347260 != -1) {
    dispatch_once(&qword_100347260, &stru_100301068);
  }
  if ((byte_10034725C & 1) == 0)
  {
    sub_10000CED4();
    if (byte_100347238)
    {
      if (qword_100347298 != -1) {
        dispatch_once(&qword_100347298, &stru_100301108);
      }
      if (byte_100347290 == 1)
      {
        if (dlopen("/usr/lib/libAppleSSEExt.dylib", 1))
        {
          Class Class = objc_getClass("BAASupport");
          qword_100347280 = (uint64_t)Class;
          if (!Class)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_10001C3E8();
            }
            Class Class = (Class)qword_100347280;
          }
          [(objc_class *)Class setDelegate:objc_opt_class()];
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_10001C350();
        }
      }
    }
  }
}

void sub_100012518(id a1)
{
  uint64_t v1 = +[NSProcessInfo processInfo];
  uint64_t v2 = [(NSProcessInfo *)v1 processName];
  unsigned int v3 = [(NSString *)v2 isEqualToString:@"nfcd"];

  if (v3)
  {
    byte_100347290 = 1;
  }
  else
  {
    uint64_t v4 = dlopen("/System/Library/Frameworks/Security.framework/Security", 1);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (uint64_t (*)(const CFAllocatorRef))dlsym(v4, "SecTaskCreateFromSelf");
      if (v6)
      {
        uint64_t v7 = v6(kCFAllocatorDefault);
        if (v7)
        {
          long long v8 = (const void *)v7;
          unint64_t v9 = (uint64_t (*)(const void *, const __CFString *, void))dlsym(v5, "SecTaskCopyValueForEntitlement");
          if (v9)
          {
            unsigned int v10 = v9;
            uint64_t v11 = (void *)v9(v8, @"com.apple.private.applesse.allow", 0);
            uint64_t v12 = (void *)v10(v8, @"com.apple.private.applesse.baa", 0);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if ([v11 BOOLValue])
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  if ([v12 BOOLValue]) {
                    byte_100347290 = 1;
                  }
                }
              }
            }
          }
          CFRelease(v8);
        }
      }
      dlclose(v5);
    }
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109120;
    v13[1] = byte_100347290;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "isEntitledForBAA(): entitled = %u", (uint8_t *)v13, 8u);
  }
}

void sub_100012760(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

void sub_1000127BC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012854()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000128EC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012984()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012A1C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012AB4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012B4C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012BE4()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012C7C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012D14()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012DAC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012E44()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012EDC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100012F74()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001300C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000130A4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001313C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000131D4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001326C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013304()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001339C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013434()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000134CC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013564()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000135FC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013694()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001372C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000137C4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001385C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000138F4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001398C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013A24()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013ABC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013B54()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013BEC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013C84()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013D1C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013DB4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013E4C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013EE4()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100013F7C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014014()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000140AC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014144()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000141DC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014274()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001430C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000143A4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001443C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000144D4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001456C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014604()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001469C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014734()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000147CC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014864()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000148FC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014994()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014A2C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014AC4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014B5C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014BF4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014C8C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014D24()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014DBC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014E54()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014EEC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100014F84()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001501C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000150B4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001514C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000151E4()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001527C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015314()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000153AC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015444()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000154DC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015574()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001560C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000156A4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001573C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000157D4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001586C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015904()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001599C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015A34()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015ACC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015B64()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015BFC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015C94()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015D2C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015DC4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015E5C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015EF4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100015F8C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016024()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000160BC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016154()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000161EC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016284()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001631C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000163B4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001644C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000164E4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001657C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016614()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000166AC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016744()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000167DC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016874()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001690C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000169A4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016A3C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016AD4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016B6C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016C04()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016C9C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016D34()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016DCC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016E64()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016EFC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100016F94()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001702C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000170C4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001715C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000171F4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001728C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017324()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000173BC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017454()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000174EC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017584()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001761C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000176B4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001774C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000177E4()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001787C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017914()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000179AC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017A44()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017ADC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017B74()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017C0C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017CA4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017D3C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017DD4()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017E6C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017F04()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100017F9C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018034()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000180CC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018164()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000181FC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018294()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001832C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000183C4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001845C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000184F4()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001858C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018624()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000186BC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018754()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000187EC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018884()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001891C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000189B4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018A4C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018AE4()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018B7C()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018C14()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018CAC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018D44()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018DDC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018E74()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018F0C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100018FA4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001903C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000190D4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001916C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019204()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001929C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019334()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000193CC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019464()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000194FC()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019594()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001962C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000196C4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001975C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000197F4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001988C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019924()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1000199BC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019A54()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019AEC()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019B84()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019C1C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019CB4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019D4C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019DE4()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019E7C()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019F14()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100019FAC()
{
  sub_10001279C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, 2u);
}

void sub_10001A048()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A0E0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A178()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A210()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A2A8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A340()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A3D8()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A470()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A508()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A5A0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A638()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A6D0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A768()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A800()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A898()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A930()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001A9C8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AA60()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AAF8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AB90()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AC28()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001ACC0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AD58()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001ADF0()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AE88()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AF20()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001AFB8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B050()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B0E8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B180()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B218()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B2B0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B348()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B3E0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B478()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B510()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B5A8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B640()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B6D8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B770()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B808()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B8A0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B938()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001B9D0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BA68()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BB00()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BB98()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BC30()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BCC8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BD60()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BDF8()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BE90()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BF28()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001BFC0()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001C058()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001C0F0()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001C188()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001C220()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001C2B8()
{
  sub_10001277C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001C350()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10001C3E8()
{
  sub_10001272C();
  sub_10001274C();
  sub_100012760((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void *acm_mem_alloc_data(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    qword_1003472A8 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1003472A8 - __n;
    if (qword_1003472A8 < __n) {
      uint64_t v4 = 0;
    }
    qword_1003472A8 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result) {
    qword_1003472B0 += size;
  }
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1003472B0 - __n;
    if (qword_1003472B0 < __n) {
      uint64_t v4 = 0;
    }
    qword_1003472B0 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_1003472A0 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v6 = "NULL";
    if (result) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = "NULL";
    }
    if (a4) {
      long long v8 = a4;
    }
    else {
      long long v8 = "NULL";
    }
    if (a6) {
      uint64_t v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1003472A0, 0, qword_1003472A8, qword_1003472B0, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_1003472A0 - a3;
    if (qword_1003472A0 < a3) {
      uint64_t v6 = 0;
    }
    qword_1003472A0 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v7 = "NULL";
    if (result) {
      long long v8 = result;
    }
    else {
      long long v8 = "NULL";
    }
    if (a4) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = "NULL";
    }
    if (a6) {
      uint64_t v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1003472A0, 0, qword_1003472A8, qword_1003472B0, v9, a5, v7);
  }
  return result;
}

uint64_t GetSerializedVerifyPolicySize(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int a6, void *a7)
{
  unsigned int v14 = 0;
  uint64_t result = 4294967293;
  if (a1 && __s1 && a7)
  {
    size_t v12 = strnlen(__s1, 0x81uLL);
    if (v12 > 0x80)
    {
      return 4294967293;
    }
    else
    {
      size_t v13 = v12;
      uint64_t result = sub_10001C7A8(a5, a6, &v14);
      if (!result) {
        *a7 = v13 + v14 + 26;
      }
    }
  }
  return result;
}

uint64_t sub_10001C7A8(_DWORD *a1, unsigned int a2, _DWORD *a3)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "getLengthOfParameters");
  }
  if (a3)
  {
    *a3 = 0;
    int v6 = 0;
    if (a2)
    {
      uint64_t v7 = a2;
      while (1)
      {
        uint64_t v8 = sub_10001CF5C(a1);
        if (v8) {
          break;
        }
        int v9 = v6 + 8;
        int v10 = a1[4];
        v6 += v10 + 8;
        if (__CFADD__(v10, v9)) {
          goto LABEL_10;
        }
        a1 += 6;
        if (!--v7) {
          goto LABEL_9;
        }
      }
      uint64_t v11 = v8;
      unsigned int v12 = 70;
    }
    else
    {
LABEL_9:
      uint64_t v11 = 0;
      *a3 = v6;
      unsigned int v12 = 10;
    }
  }
  else
  {
LABEL_10:
    unsigned int v12 = 70;
    uint64_t v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "getLengthOfParameters", (int)v11);
  }
  return v11;
}

uint64_t SerializeVerifyPolicy(_OWORD *a1, char *__s1, char a3, uint64_t a4, _DWORD *a5, unsigned int a6, _OWORD *a7, size_t *a8)
{
  unint64_t v21 = 0;
  uint64_t result = 4294967293;
  if (a1)
  {
    if (__s1)
    {
      if (a8)
      {
        if (a7)
        {
          if (a6 <= 0xA && (a5 != 0) == (a6 != 0))
          {
            int v15 = a4;
            uint64_t result = GetSerializedVerifyPolicySize((uint64_t)a1, __s1, 0, a4, a5, a6, &v21);
            if (!result)
            {
              if (*a8 < v21) {
                return 4294967293;
              }
              *a7 = *a1;
              size_t v17 = strnlen(__s1, 0x81uLL);
              if (v17 > 0x80)
              {
                return 4294967293;
              }
              else
              {
                size_t v18 = v17;
                memcpy(a7 + 1, __s1, v17 + 1);
                unint64_t v19 = (char *)a7 + v18;
                v19[17] = a3;
                *(_DWORD *)(v19 + 1_Block_object_dispose(&STACK[0x2B0], 8) = v15;
                size_t v20 = v18 + 22;
                uint64_t result = sub_10001C9D8((uint64_t)a5, a6, (uint64_t)a7, (uint64_t *)&v20);
                if (!result) {
                  *a8 = v20;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10001C9D8(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  LODWORD(v6) = a2;
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "serializeParameters");
  }
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293;
  if (a3 && a4)
  {
    uint64_t v10 = *a4;
    *(_DWORD *)(a3 + v10) = v6;
    uint64_t v11 = v10 + 4;
    if (v6)
    {
      uint64_t v6 = v6;
      while (1)
      {
        *(_OWORD *)__src = *(_OWORD *)a1;
        size_t __n = *(void *)(a1 + 16);
        uint64_t v12 = sub_10001CF5C(__src);
        if (v12) {
          break;
        }
        size_t v13 = (_DWORD *)(a3 + v11);
        size_t v14 = __n;
        *size_t v13 = __src[0];
        v13[1] = v14;
        v11 += 8;
        if (v14)
        {
          memcpy((void *)(a3 + v11), __src[1], v14);
          v11 += v14;
        }
        a1 += 24;
        if (!--v6) {
          goto LABEL_11;
        }
      }
      uint64_t v9 = v12;
      unsigned int v8 = 70;
    }
    else
    {
LABEL_11:
      uint64_t v9 = 0;
      *a4 = v11;
      unsigned int v8 = 10;
    }
  }
  if (v8 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "serializeParameters", (int)v9);
  }
  return v9;
}

uint64_t DeserializeRequirement(unsigned int *a1, unint64_t a2, void **a3, size_t *a4)
{
  __dst = 0;
  uint64_t v4 = 4294967293;
  if (a1)
  {
    if (a2 >= 0x10)
    {
      if (a3)
      {
        if (a4)
        {
          unsigned int v9 = *a1;
          if (v9 <= 0x1C)
          {
            if (((1 << v9) & 0x1FFCFF4E) != 0)
            {
              size_t v10 = a1[3] + 16;
              if (v10 > a2) {
                goto LABEL_36;
              }
              uint64_t v11 = Util_AllocRequirement(v9, 0, &__dst);
              if (!v11)
              {
                if (__dst)
                {
                  memcpy(__dst, a1, v10);
LABEL_11:
                  uint64_t v4 = 0;
                  *a4 = v10;
                  *a3 = __dst;
                  return v4;
                }
                return 4294967292;
              }
              goto LABEL_35;
            }
            if (((1 << v9) & 0x30) != 0)
            {
              uint64_t v13 = a1[4];
              if (8 * v13 + 20 > a2) {
                goto LABEL_36;
              }
              uint64_t v11 = Util_AllocRequirement(v9, v13, &__dst);
              if (v11) {
                goto LABEL_35;
              }
              size_t v14 = __dst;
              if (!__dst) {
                return 4294967292;
              }
              if (*((_DWORD *)__dst + 3) == 84)
              {
                long long v15 = *(_OWORD *)a1;
                *((_DWORD *)__dst + 4) = a1[4];
                _OWORD *v14 = v15;
                *((_DWORD *)__dst + 3) = 84;
                if (!a1[4])
                {
                  size_t v10 = 20;
                  goto LABEL_11;
                }
                uint64_t v16 = 0;
                size_t v10 = 20;
                while (1)
                {
                  uint64_t v21 = 0;
                  uint64_t v22 = 0;
                  uint64_t v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                  if (v11) {
                    goto LABEL_35;
                  }
                  *(void *)((char *)__dst + 8 * v16 + 20) = v22;
                  v10 += v21;
                  if (++v16 >= (unint64_t)a1[4]) {
                    goto LABEL_11;
                  }
                }
              }
              goto LABEL_39;
            }
            if (v9 == 7)
            {
              uint64_t v17 = a1[5];
              if (8 * v17 + 24 <= a2)
              {
                uint64_t v11 = Util_AllocRequirement(7, v17, &__dst);
                if (!v11)
                {
                  size_t v18 = __dst;
                  if (!__dst) {
                    return 4294967292;
                  }
                  if (*((_DWORD *)__dst + 3) != 88)
                  {
LABEL_39:
                    uint64_t v4 = 4294967291;
                    goto LABEL_36;
                  }
                  long long v19 = *(_OWORD *)a1;
                  *((void *)__dst + 2) = *((void *)a1 + 2);
                  *size_t v18 = v19;
                  *((_DWORD *)__dst + 3) = 88;
                  if (!a1[5])
                  {
                    size_t v10 = 24;
                    goto LABEL_11;
                  }
                  uint64_t v20 = 0;
                  size_t v10 = 24;
                  while (1)
                  {
                    uint64_t v21 = 0;
                    uint64_t v22 = 0;
                    uint64_t v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                    if (v11) {
                      break;
                    }
                    *((void *)__dst + v20 + 3) = v22;
                    v10 += v21;
                    if (++v20 >= (unint64_t)a1[5]) {
                      goto LABEL_11;
                    }
                  }
                }
LABEL_35:
                uint64_t v4 = v11;
              }
            }
          }
        }
      }
    }
  }
LABEL_36:
  if (__dst) {
    Util_DeallocRequirement((int *)__dst);
  }
  return v4;
}

uint64_t SerializeCredential(unsigned int *__src, void *__dst, size_t *a3)
{
  uint64_t result = 4294967293;
  if (__src && __dst && a3)
  {
    unsigned int v6 = *__src;
    if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0)
    {
      size_t v8 = __src[7] + 32;
      if (v8 <= *a3 && v6 <= 0x17 && ((1 << v6) & 0xFFF7FE) != 0)
      {
        memcpy(__dst, __src, v8);
        uint64_t result = 0;
        *a3 = __src[7] + 32;
      }
    }
  }
  return result;
}

uint64_t GetSerializedAddCredentialSize(uint64_t a1, _DWORD *a2, int a3, void *a4)
{
  if (a1) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a3 == 2;
  }
  char v5 = !v4;
  uint64_t result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    uint64_t result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeAddCredential(_OWORD *a1, unsigned int *__src, int a3, uint64_t a4, void *a5)
{
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  uint64_t result = 4294967293;
  if (a5)
  {
    if (a4)
    {
      if (__src)
      {
        if ((v7 & 1) == 0)
        {
          uint64_t result = 4294967293;
          if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0 && *a5 >= (unint64_t)__src[7] + 52)
          {
            if (a1)
            {
              *(_OWORD *)a4 = *a1;
            }
            else
            {
              *(void *)a4 = 0;
              *(void *)(a4 + _Block_object_dispose(&STACK[0x2B0], 8) = 0;
            }
            uint64_t v13 = *a5 - 16;
            uint64_t result = SerializeCredential(__src, (void *)(a4 + 16), (size_t *)&v13);
            if (!result)
            {
              size_t v12 = v13;
              *(_DWORD *)(v13 + a4 + 16) = a3;
              *a5 = v12 + 20;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10001CF5C(_DWORD *a1)
{
  if (!a1) {
    return 4294967293;
  }
  switch(*a1)
  {
    case 0:
    case 0xC:
      if (a1[4]) {
        return 4294967293;
      }
      break;
    case 1:
    case 4:
    case 5:
    case 0xA:
      if (a1[4] != 4) {
        return 4294967293;
      }
      break;
    case 2:
    case 6:
    case 7:
      if (a1[4] != 16) {
        return 4294967293;
      }
      break;
    case 3:
      if ((a1[4] - 1001) < 0xFFFFFC18) {
        return 4294967293;
      }
      break;
    case 8:
    case 9:
      if (a1[4] != 1) {
        return 4294967293;
      }
      break;
    case 0xB:
      if (a1[4] > 0x400u) {
        return 4294967293;
      }
      break;
    default:
      return 4294967293;
  }
  return 0;
}

int *LibCall_ACMContextVerifyPolicyEx_Block(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  }
  BOOL v17 = 0;
  size_t v18 = 0;
  uint64_t v22 = 0;
  BOOL v21 = 0;
  uint64_t v19 = 4294967293;
  if (a3 && __s1 && a9)
  {
    uint64_t v19 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, a6, a7, a8, &v21, &v22);
    size_t v18 = v22;
    BOOL v17 = v21;
  }
  (*(void (**)(uint64_t, uint64_t, BOOL, int *))(a9 + 16))(a9, v19, v17, v18);
  uint64_t result = v22;
  if (v22) {
    uint64_t result = (int *)Util_DeallocRequirement(v22);
  }
  if (gACMLoggingLevel <= 0xAu) {
    return (int *)printf("%s: %s: returning.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  }
  return result;
}

uint64_t Util_DeallocCredential(_DWORD *a1)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_DeallocCredential");
  }
  if (a1)
  {
    uint64_t v2 = 4294967293;
    unsigned int v3 = 70;
    switch(*a1)
    {
      case 1:
        BOOL v4 = "ACMCredential - ACMCredentialDataPasscodeValidated";
        rsize_t v5 = 60;
        BOOL v6 = a1;
        unint64_t v7 = 60;
        int v8 = 144;
        goto LABEL_6;
      case 2:
        BOOL v4 = "ACMCredential - ACMCredentialDataPassphraseEntered";
        rsize_t v5 = 168;
        BOOL v6 = a1;
        unint64_t v7 = 168;
        int v8 = 136;
        goto LABEL_6;
      case 3:
        BOOL v4 = "ACMCredential - ACMCredentialDataBiometryMatched";
        rsize_t v5 = 337;
        BOOL v6 = a1;
        unint64_t v7 = 337;
        int v8 = 140;
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 8:
      case 0xE:
      case 0x10:
      case 0x13:
      case 0x16:
      case 0x17:
        BOOL v4 = "ACMCredential";
        rsize_t v5 = 32;
        BOOL v6 = a1;
        unint64_t v7 = 32;
        int v8 = 189;
        goto LABEL_6;
      case 7:
        BOOL v4 = "ACMCredential - ACMCredentialDataUserOutputDisplayed";
        rsize_t v5 = 88;
        BOOL v6 = a1;
        unint64_t v7 = 88;
        int v8 = 152;
        goto LABEL_6;
      case 9:
        BOOL v4 = "ACMCredential - ACMCredentialDataContinuityUnlock";
        rsize_t v5 = 56;
        BOOL v6 = a1;
        unint64_t v7 = 56;
        int v8 = 156;
        goto LABEL_6;
      case 0xA:
        BOOL v4 = "ACMCredential - ACMCredentialDataPasscodeValidated2";
        rsize_t v5 = 84;
        BOOL v6 = a1;
        unint64_t v7 = 84;
        int v8 = 148;
        goto LABEL_6;
      case 0xC:
      case 0xF:
        BOOL v4 = "ACMCredential - ACMCredentialDataKextDenyList";
        rsize_t v5 = 40;
        BOOL v6 = a1;
        unint64_t v7 = 40;
        int v8 = 161;
        goto LABEL_6;
      case 0xD:
        BOOL v4 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
        rsize_t v5 = 164;
        BOOL v6 = a1;
        unint64_t v7 = 164;
        int v8 = 132;
        goto LABEL_6;
      case 0x11:
        BOOL v4 = "ACMCredential - ACMCredentialDataSecureIntent";
        rsize_t v5 = 113;
        BOOL v6 = a1;
        unint64_t v7 = 113;
        int v8 = 165;
        goto LABEL_6;
      case 0x12:
        BOOL v4 = "ACMCredential - ACMCredentialDataBiometryMatchAttempted";
        rsize_t v5 = 52;
        BOOL v6 = a1;
        unint64_t v7 = 52;
        int v8 = 169;
        goto LABEL_6;
      case 0x14:
        BOOL v4 = "ACMCredential - ACMCredentialDataAP";
        rsize_t v5 = 64;
        BOOL v6 = a1;
        unint64_t v7 = 64;
        int v8 = 173;
        goto LABEL_6;
      case 0x15:
        BOOL v4 = "ACMCredential - ACMCredentialDataSignature";
        rsize_t v5 = 164;
        BOOL v6 = a1;
        unint64_t v7 = 164;
        int v8 = 177;
LABEL_6:
        acm_mem_free_info(v4, v6, v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v8, "Util_DeallocCredential");
        acm_mem_free(a1, v5);
        uint64_t v2 = 0;
        unsigned int v3 = 10;
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v2 = 4294967293;
    unsigned int v3 = 70;
  }
  if (v3 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocCredential", (int)v2);
  }
  return v2;
}

uint64_t Util_AllocCredential(int a1, void *a2)
{
  if (!a2) {
    return 4294967293;
  }
  uint64_t result = 4294967293;
  switch(a1)
  {
    case 1:
      rsize_t v5 = acm_mem_alloc(0x3CuLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated", v5, 60, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 226, "Util_AllocCredential");
      int v6 = 28;
      goto LABEL_4;
    case 2:
      rsize_t v5 = acm_mem_alloc(0xA8uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPassphraseEntered", v5, 168, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 216, "Util_AllocCredential");
      int v6 = 136;
      goto LABEL_4;
    case 3:
      rsize_t v5 = acm_mem_alloc(0x151uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatched", v5, 337, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 221, "Util_AllocCredential");
      int v6 = 305;
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
    case 8:
    case 14:
    case 16:
    case 19:
    case 22:
    case 23:
      rsize_t v5 = acm_mem_alloc(0x20uLL);
      acm_mem_alloc_info("ACMCredential", v5, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 280, "Util_AllocCredential");
      int v6 = 0;
      goto LABEL_4;
    case 7:
      rsize_t v5 = acm_mem_alloc(0x58uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataUserOutputDisplayed", v5, 88, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 236, "Util_AllocCredential");
      int v6 = 56;
      goto LABEL_4;
    case 9:
      rsize_t v5 = acm_mem_alloc(0x38uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataContinuityUnlock", v5, 56, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 241, "Util_AllocCredential");
      int v6 = 24;
      goto LABEL_4;
    case 10:
      rsize_t v5 = acm_mem_alloc(0x54uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated2", v5, 84, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 231, "Util_AllocCredential");
      int v6 = 52;
      goto LABEL_4;
    case 12:
    case 15:
      rsize_t v5 = acm_mem_alloc(0x28uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataKextDenyList", v5, 40, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 247, "Util_AllocCredential");
      int v6 = 8;
      goto LABEL_4;
    case 13:
      rsize_t v5 = acm_mem_alloc(0xA4uLL);
      unint64_t v7 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
      int v8 = v5;
      int v9 = 211;
      goto LABEL_18;
    case 17:
      rsize_t v5 = acm_mem_alloc(0x71uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataSecureIntent", v5, 113, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 252, "Util_AllocCredential");
      int v6 = 81;
      goto LABEL_4;
    case 18:
      rsize_t v5 = acm_mem_alloc(0x34uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatchAttempted", v5, 52, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 257, "Util_AllocCredential");
      int v6 = 20;
      goto LABEL_4;
    case 20:
      rsize_t v5 = acm_mem_alloc(0x40uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataAP", v5, 64, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 262, "Util_AllocCredential");
      int v6 = 32;
      goto LABEL_4;
    case 21:
      rsize_t v5 = acm_mem_alloc(0xA4uLL);
      unint64_t v7 = "ACMCredential - ACMCredentialDataSignature";
      int v8 = v5;
      int v9 = 267;
LABEL_18:
      acm_mem_alloc_info(v7, v8, 164, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v9, "Util_AllocCredential");
      int v6 = 132;
LABEL_4:
      if (v5)
      {
        uint64_t result = 0;
        *rsize_t v5 = a1;
        v5[1] = 1;
        v5[7] = v6;
        v5[3] = -1;
        *a2 = v5;
      }
      else
      {
        uint64_t result = 4294967292;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Util_AllocRequirement(int a1, uint64_t a2, void *a3)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_AllocRequirement");
  }
  if (a3)
  {
    uint64_t v6 = 4294967293;
    unsigned int v7 = 70;
    switch(a1)
    {
      case 1:
        int v8 = acm_mem_alloc(0x14uLL);
        uint64_t v11 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
        size_t v12 = v8;
        int v13 = 338;
        goto LABEL_49;
      case 2:
        int v8 = acm_mem_alloc(0x14uLL);
        uint64_t v11 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
        size_t v12 = v8;
        int v13 = 343;
        goto LABEL_49;
      case 3:
        int v8 = acm_mem_alloc(0xACuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatched", v8, 172, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 348, "Util_AllocRequirement");
        int v9 = 156;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 4:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
          goto LABEL_53;
        }
        int v8 = acm_mem_alloc(0x64uLL);
        size_t v14 = "ACMRequirement - ACMRequirementDataOr";
        long long v15 = v8;
        int v16 = 406;
        goto LABEL_28;
      case 5:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
          goto LABEL_53;
        }
        int v8 = acm_mem_alloc(0x64uLL);
        size_t v14 = "ACMRequirement - ACMRequirementDataAnd";
        long long v15 = v8;
        int v16 = 398;
LABEL_28:
        acm_mem_alloc_info(v14, v15, 100, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v16, "Util_AllocRequirement");
        int v9 = 84;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 18:
      case 19:
      case 22:
      case 23:
      case 27:
      case 28:
        int v8 = acm_mem_alloc(0x10uLL);
        acm_mem_alloc_info("ACMRequirement", v8, 16, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 333, "Util_AllocRequirement");
        int v9 = 0;
        if (v8) {
          goto LABEL_6;
        }
        goto LABEL_50;
      case 7:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
          goto LABEL_53;
        }
        int v8 = acm_mem_alloc(0x68uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofN", v8, 104, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 391, "Util_AllocRequirement");
        int v9 = 88;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 8:
        int v8 = acm_mem_alloc(0x410uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAccessGroups", v8, 1040, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 378, "Util_AllocRequirement");
        int v9 = 1024;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 13:
        int v8 = acm_mem_alloc(0x30uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataUserOutputDisplayed", v8, 48, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 363, "Util_AllocRequirement");
        int v9 = 32;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 16:
      case 17:
        break;
      case 20:
        int v8 = acm_mem_alloc(0x14uLL);
        uint64_t v11 = "ACMRequirement - ACMRequirementDataSecureIntent";
        size_t v12 = v8;
        int v13 = 353;
        goto LABEL_49;
      case 21:
        int v8 = acm_mem_alloc(0x14uLL);
        uint64_t v11 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
        size_t v12 = v8;
        int v13 = 358;
LABEL_49:
        acm_mem_alloc_info(v11, v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_AllocRequirement");
        int v9 = 4;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 24:
        int v8 = acm_mem_alloc(0x434uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAP", v8, 1076, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 368, "Util_AllocRequirement");
        int v9 = 1060;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 25:
        int v8 = acm_mem_alloc(0x3BuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKeyRef", v8, 59, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 373, "Util_AllocRequirement");
        int v9 = 43;
        if (!v8) {
          goto LABEL_50;
        }
        goto LABEL_6;
      case 26:
        int v8 = acm_mem_alloc(0x2CuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataRatchet", v8, 44, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 384, "Util_AllocRequirement");
        int v9 = 28;
        if (!v8)
        {
LABEL_50:
          uint64_t v6 = 4294967292;
          goto LABEL_54;
        }
LABEL_6:
        *int v8 = a1;
        *(void *)(v8 + 1) = 0x100000001;
        v8[3] = v9;
        if ((a1 & 0xFFFFFFFE) == 4)
        {
          v8[4] = a2;
        }
        else if (a1 == 1000)
        {
          v8[13] = a2;
        }
        else if (a1 == 7)
        {
          v8[5] = a2;
        }
        uint64_t v6 = 0;
        *a3 = v8;
        unsigned int v7 = 10;
        break;
      default:
        switch(a1)
        {
          case 1000:
            if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6) {
              goto LABEL_53;
            }
            int v8 = acm_mem_alloc(0x88uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofNWithAttributes", v8, 136, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 414, "Util_AllocRequirement");
            int v9 = 120;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          case 1001:
            int v8 = acm_mem_alloc(0xB8uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes", v8, 184, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 419, "Util_AllocRequirement");
            int v9 = 168;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          case 1002:
            int v8 = acm_mem_alloc(0x14uLL);
            uint64_t v11 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
            size_t v12 = v8;
            int v13 = 424;
            goto LABEL_49;
          case 1003:
            int v8 = acm_mem_alloc(0x14uLL);
            uint64_t v11 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
            size_t v12 = v8;
            int v13 = 429;
            goto LABEL_49;
          case 1004:
            int v8 = acm_mem_alloc(0x20uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes", v8, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 434, "Util_AllocRequirement");
            int v9 = 16;
            if (!v8) {
              goto LABEL_50;
            }
            goto LABEL_6;
          default:
            goto LABEL_17;
        }
    }
  }
  else
  {
LABEL_53:
    uint64_t v6 = 4294967293;
LABEL_54:
    unsigned int v7 = 70;
  }
LABEL_17:
  if (v7 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_AllocRequirement", (int)v6);
  }
  return v6;
}

uint64_t Util_DeallocRequirement(int *a1)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "Util_DeallocRequirement");
  }
  if (!a1)
  {
    uint64_t v7 = 4294967293;
    unsigned int v8 = 70;
    goto LABEL_28;
  }
  int v2 = *a1;
  if (*a1 > 6)
  {
    if (v2 == 7)
    {
      if (a1[5])
      {
        unint64_t v6 = 0;
        do
          Util_DeallocRequirement(*(void *)&a1[2 * v6++ + 6]);
        while (v6 < a1[5]);
      }
    }
    else
    {
      if (v2 != 1000) {
        goto LABEL_25;
      }
      if (a1[13])
      {
        unint64_t v4 = 0;
        do
          Util_DeallocRequirement(*(void *)&a1[2 * v4++ + 14]);
        while (v4 < a1[13]);
      }
    }
  }
  else if (v2 == 4)
  {
    if (a1[4])
    {
      unint64_t v5 = 0;
      do
        Util_DeallocRequirement(*(void *)&a1[2 * v5++ + 5]);
      while (v5 < a1[4]);
    }
  }
  else
  {
    if (v2 != 5) {
      goto LABEL_25;
    }
    if (a1[4])
    {
      unint64_t v3 = 0;
      do
        Util_DeallocRequirement(*(void *)&a1[2 * v3++ + 5]);
      while (v3 < a1[4]);
    }
  }
  int v2 = *a1;
LABEL_25:
  uint64_t v7 = 4294967293;
  unsigned int v8 = 70;
  switch(v2)
  {
    case 1:
      int v9 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
      rsize_t v10 = 20;
      uint64_t v11 = a1;
      unint64_t v12 = 20;
      int v13 = 542;
      goto LABEL_27;
    case 2:
      int v9 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
      rsize_t v10 = 20;
      uint64_t v11 = a1;
      unint64_t v12 = 20;
      int v13 = 546;
      goto LABEL_27;
    case 3:
      int v9 = "ACMRequirement - ACMRequirementDataBiometryMatched";
      rsize_t v10 = 172;
      uint64_t v11 = a1;
      unint64_t v12 = 172;
      int v13 = 550;
      goto LABEL_27;
    case 4:
      int v9 = "ACMRequirement - ACMRequirementDataOr";
      rsize_t v10 = 100;
      uint64_t v11 = a1;
      unint64_t v12 = 100;
      int v13 = 595;
      goto LABEL_27;
    case 5:
      int v9 = "ACMRequirement - ACMRequirementDataAnd";
      rsize_t v10 = 100;
      uint64_t v11 = a1;
      unint64_t v12 = 100;
      int v13 = 589;
      goto LABEL_27;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 27:
    case 28:
      int v9 = "ACMRequirement";
      rsize_t v10 = 16;
      uint64_t v11 = a1;
      unint64_t v12 = 16;
      int v13 = 538;
      goto LABEL_27;
    case 7:
      int v9 = "ACMRequirement - ACMRequirementDataKofN";
      rsize_t v10 = 104;
      uint64_t v11 = a1;
      unint64_t v12 = 104;
      int v13 = 584;
      goto LABEL_27;
    case 8:
      int v9 = "ACMRequirement - ACMRequirementDataAccessGroups";
      rsize_t v10 = 1040;
      uint64_t v11 = a1;
      unint64_t v12 = 1040;
      int v13 = 574;
      goto LABEL_27;
    case 13:
      int v9 = "ACMRequirement - ACMRequirementDataUserOutputDisplayed";
      rsize_t v10 = 48;
      uint64_t v11 = a1;
      unint64_t v12 = 48;
      int v13 = 562;
      goto LABEL_27;
    case 16:
    case 17:
      break;
    case 20:
      int v9 = "ACMRequirement - ACMRequirementDataSecureIntent";
      rsize_t v10 = 20;
      uint64_t v11 = a1;
      unint64_t v12 = 20;
      int v13 = 554;
      goto LABEL_27;
    case 21:
      int v9 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
      rsize_t v10 = 20;
      uint64_t v11 = a1;
      unint64_t v12 = 20;
      int v13 = 558;
      goto LABEL_27;
    case 24:
      int v9 = "ACMRequirement - ACMRequirementDataAP";
      rsize_t v10 = 1076;
      uint64_t v11 = a1;
      unint64_t v12 = 1076;
      int v13 = 566;
      goto LABEL_27;
    case 25:
      int v9 = "ACMRequirement - ACMRequirementDataKeyRef";
      rsize_t v10 = 59;
      uint64_t v11 = a1;
      unint64_t v12 = 59;
      int v13 = 570;
      goto LABEL_27;
    case 26:
      int v9 = "ACMRequirement - ACMRequirementDataRatchet";
      rsize_t v10 = 44;
      uint64_t v11 = a1;
      unint64_t v12 = 44;
      int v13 = 579;
LABEL_27:
      acm_mem_free_info(v9, v11, v12, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_DeallocRequirement");
      acm_mem_free(a1, v10);
      uint64_t v7 = 0;
      unsigned int v8 = 10;
      break;
    default:
      switch(v2)
      {
        case 1000:
          int v9 = "ACMRequirement - ACMRequirementDataKofNWithAttributes";
          rsize_t v10 = 136;
          uint64_t v11 = a1;
          unint64_t v12 = 136;
          int v13 = 601;
          goto LABEL_27;
        case 1001:
          int v9 = "ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes";
          rsize_t v10 = 184;
          uint64_t v11 = a1;
          unint64_t v12 = 184;
          int v13 = 605;
          goto LABEL_27;
        case 1002:
          int v9 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
          rsize_t v10 = 20;
          uint64_t v11 = a1;
          unint64_t v12 = 20;
          int v13 = 609;
          goto LABEL_27;
        case 1003:
          int v9 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
          rsize_t v10 = 20;
          uint64_t v11 = a1;
          unint64_t v12 = 20;
          int v13 = 613;
          goto LABEL_27;
        case 1004:
          int v9 = "ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes";
          rsize_t v10 = 32;
          uint64_t v11 = a1;
          unint64_t v12 = 32;
          int v13 = 617;
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
  }
LABEL_28:
  if (v8 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocRequirement", (int)v7);
  }
  return v7;
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 0;
  uint64_t v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *))sub_10001E770, (uint64_t)&v6, a1, &byte_100344829, 1);
  if (v2)
  {
    sub_10001F754();
    unsigned int v3 = 70;
  }
  else
  {
    unsigned int v3 = 10;
    if (a1 && byte_100344829 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *a1;
        if (*a1) {
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        }
        *(_DWORD *)buf = 136315650;
        unsigned int v8 = "ACMLib";
        __int16 v9 = 2080;
        rsize_t v10 = "ACMContextCreate";
        __int16 v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      unsigned int v3 = 10;
    }
  }
  if (v3 >= byte_100344829 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "ACMLib";
    __int16 v9 = 2080;
    rsize_t v10 = "ACMContextCreate";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_10001E770(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    BOOL v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = sub_10001EDB8();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = sub_10001EF9C(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= byte_100344829 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    BOOL v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    rsize_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v8 = 0;
  uint64_t v4 = LibCall_ACMContextCreateWithExternalForm((uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *))sub_10001E770, (uint64_t)&v8, a1, a2, &byte_100344829, 1);
  if (v4)
  {
    if (byte_100344829 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      int v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      rsize_t v10 = "ACMLib";
      __int16 v11 = 2080;
      uint64_t v12 = "ACMContextCreateWithExternalForm";
      __int16 v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }
    unsigned int v6 = 30;
  }
  else
  {
    sub_10001F754();
    unsigned int v6 = 70;
  }
  if (v6 >= byte_100344829 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    rsize_t v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, -> ctx = %p.\n", buf, 0x20u);
  }
  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4 = byte_100344829;
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    unsigned int v4 = byte_100344829;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = a1[4];
    unsigned int v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    uint64_t v12 = "ACMLib";
    uint64_t v14 = "ACMContextDelete";
    __int16 v13 = 2080;
    if (a2) {
      unsigned int v6 = "destroyed";
    }
    __int16 v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(void *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  rsize_t v10 = a1;
  uint64_t v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))sub_10001E770, (uint64_t)&v10, a1, a2);
  if (v7) {
    unsigned int v8 = 70;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= byte_100344829 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    __int16 v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

uint64_t sub_10001EDB8()
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (byte_1003472BC)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1003472B8);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1003472BC = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_100344829 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_10001EF9C(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    CFIndex v25 = "ACMLib";
    __int16 v26 = 2080;
    uint64_t v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    __int16 v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_1003472B8, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (byte_100344829 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          CFIndex v25 = "ACMLib";
          __int16 v26 = 2080;
          uint64_t v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)CFRange v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_100344829 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          CFIndex v25 = "ACMLib";
          __int16 v26 = 2080;
          uint64_t v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)CFRange v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    size_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= byte_100344829 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    CFIndex v25 = "ACMLib";
    __int16 v26 = 2080;
    uint64_t v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)CFRange v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMContextAddCredentialWithScope(_OWORD *a1, unsigned int *a2, int a3)
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextAddCredentialWithScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t size = 0;
  if (a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 2;
  }
  char v7 = !v6;
  unsigned int v8 = 70;
  uint64_t v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    uint64_t SerializedAddCredentialSize = sub_10001EDB8();
    if (SerializedAddCredentialSize
      || (uint64_t SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a1, a2, a3, &size),
          SerializedAddCredentialSize))
    {
      uint64_t v9 = SerializedAddCredentialSize;
      unsigned int v8 = 70;
    }
    else
    {
      size_t v11 = size;
      uint64_t v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 325, "ACMContextAddCredentialWithScope");
      if (v12)
      {
        uint64_t v13 = SerializeAddCredential(a1, a2, a3, (uint64_t)v12, &size);
        if (!v13) {
          uint64_t v13 = sub_10001EF9C((uint64_t)a1, 5, 0, v12, size, 0, 0);
        }
        uint64_t v9 = v13;
        size_t v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 338, "ACMContextAddCredentialWithScope");
        acm_mem_free_data(v12, v14);
        if (v9) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }
      else
      {
        unsigned int v8 = 70;
        uint64_t v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_100344829 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v18 = "ACMLib";
    __int16 v19 = 2080;
    unsigned int v20 = "ACMContextAddCredentialWithScope";
    __int16 v21 = 2048;
    uint64_t v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

void ACMContextVerifyPolicyEx(_OWORD *a1, char *__s1, uint64_t a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t v14 = a1;
  LibCall_ACMContextVerifyPolicyEx_Block((uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *))sub_10001E770, (uint64_t)&v14, a1, __s1, a3, a4, a5, a6, a7);
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void sub_10001F754()
{
  if (byte_100344829 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    char v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_1003472B8, 2u, 0, 0, &output, &outputCnt)) {
    goto LABEL_8;
  }
  unsigned __int8 v0 = output;
  unsigned int v1 = output;
  byte_100344829 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    char v7 = "updateLogLevelFromKext";
    __int16 v8 = 1024;
    int v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    unsigned int v1 = byte_100344829;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    char v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  uint64_t v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)uint64_t v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *), uint64_t a2, void *a3, unsigned char *a4, int a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  }
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293;
  if (!a1 || !a3) {
    goto LABEL_25;
  }
  uint64_t v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    uint64_t v18 = 21;
    uint64_t v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!v13)
    {
      if (v18 != 21)
      {
        uint64_t v11 = 4294967291;
        goto LABEL_23;
      }
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    uint64_t v11 = v13;
    if (v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      unsigned int v10 = 70;
      goto LABEL_25;
    }
  }
  uint64_t v18 = 17;
  unsigned int v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = -5;
  }
  if (v14) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = v15;
  }
  if (!v14 && v18 == 17)
  {
LABEL_20:
    int v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4) {
      *a4 = v19[16];
    }
  }
  if (v11) {
    goto LABEL_23;
  }
  unsigned int v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  }
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, unsigned char *a5, int a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm");
  }
  uint64_t v12 = 0;
  unsigned int v13 = 70;
  int v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      uint64_t v20 = 9;
      int v15 = a1(a2, 37, 0, a3, 16, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          int v14 = 0;
          goto LABEL_19;
        }
        int v14 = -5;
        goto LABEL_28;
      }
      int v14 = v15;
      if (v15 != -3) {
        goto LABEL_28;
      }
    }
    uint64_t v20 = 5;
    int v16 = a1(a2, 18, 0, a3, 16, v21, &v20);
    if (v20 == 5) {
      int v17 = 0;
    }
    else {
      int v17 = -5;
    }
    if (v16) {
      int v14 = v16;
    }
    else {
      int v14 = v17;
    }
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        uint64_t v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 128, "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          unsigned int v13 = 70;
          int v14 = -4;
          goto LABEL_31;
        }
        int v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)uint64_t v12 = *a3;
        v12[4] = v18;
        if (a5) {
          *a5 = BYTE4(v21[0]);
        }
        if (v14)
        {
          acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 147, "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          unsigned int v13 = 70;
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      goto LABEL_30;
    }
LABEL_28:
    uint64_t v12 = 0;
    if (v14) {
      goto LABEL_29;
    }
LABEL_30:
    int v14 = 0;
    unsigned int v13 = 10;
  }
LABEL_31:
  if (v13 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm", v14);
  }
  return v12;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, void, void *, uint64_t, void, void), uint64_t a2, void *a3, int a4)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  }
  if (a1 && a3)
  {
    if (a4) {
      a1(a2, 2, 0, a3, 16, 0, 0);
    }
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    uint64_t v8 = 0;
    unsigned int v9 = 10;
    goto LABEL_8;
  }
  unsigned int v9 = 70;
  uint64_t v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  }
  return v8;
}

_DWORD *LibCall_ACMCredentialDelete(_DWORD *a1)
{
  if (a1) {
    return (_DWORD *)Util_DeallocCredential(a1);
  }
  return a1;
}

uint64_t LibCall_ACMContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, int **a10)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx");
  }
  unint64_t v31 = 4096;
  size_t size = 0;
  size_t v29 = 0;
  __int16 v30 = 0;
  uint64_t v18 = 4294967293;
  if (!a3 || !__s1 || !a9)
  {
LABEL_18:
    if (!v18) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  uint64_t SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
  if (!SerializedVerifyPolicySize)
  {
    size_t v20 = size;
    __int16 v21 = acm_mem_alloc_data(size);
    acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1257, "LibCall_ACMContextVerifyPolicyEx");
    if (v21)
    {
      uint64_t v22 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v21, &size);
      if (v22)
      {
        uint64_t v18 = v22;
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v23, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1263, "LibCall_ACMContextVerifyPolicyEx");
        if (v23)
        {
          uint64_t v24 = a1(a2, 3, 0, v21, size, v23, &v31);
          if (v24)
          {
            uint64_t v18 = v24;
          }
          else
          {
            unint64_t v25 = v31 - 4;
            if (v31 < 4)
            {
              uint64_t v18 = 4294967291;
            }
            else
            {
              *a9 = *v23 != 0;
              if (a10)
              {
                uint64_t v18 = DeserializeRequirement(v23 + 1, v25, (void **)&v30, &v29);
                if (!v18) {
                  *a10 = v30;
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
            }
          }
        }
        else
        {
          uint64_t v18 = 4294967292;
        }
      }
      size_t v26 = size;
      acm_mem_free_info("<data>", v21, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1288, "LibCall_ACMContextVerifyPolicyEx");
      acm_mem_free_data(v21, v26);
      if (v23)
      {
        acm_mem_free_info("<data>", v23, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1291, "LibCall_ACMContextVerifyPolicyEx");
        acm_mem_free_data(v23, 0x1000uLL);
      }
    }
    else
    {
      uint64_t v18 = 4294967292;
    }
    goto LABEL_18;
  }
  uint64_t v18 = SerializedVerifyPolicySize;
LABEL_19:
  if (v30) {
    Util_DeallocRequirement(v30);
  }
LABEL_21:
  if (v18) {
    unsigned int v27 = 70;
  }
  else {
    unsigned int v27 = 10;
  }
  if (v27 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx", (int)v18);
  }
  return v18;
}

void sub_1000203B0(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    *(unsigned char *)(a1 + 86) = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2B0], 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    uint64_t v2 = +[NFCALogger sharedCALogger];
    *(void *)(a1 + 32) = [v2 getTimestamp];

    ++*(_DWORD *)(a1 + 48);
  }
}

uint64_t sub_10002041C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
      char v7 = (void *)v3;
      if (((unint64_t)[(id)v3 code] & 0x8000000000000000) != 0)
      {
        uint64_t v3 = 6;
      }
      else
      {
        uint64_t v5 = (uint64_t)[v7 code];
        uint64_t v4 = (uint64_t)v7;
        if (v5 > 70)
        {
          uint64_t v3 = 6;
          goto LABEL_10;
        }
        uint64_t v3 = (uint64_t)[v7 code];
      }
      uint64_t v4 = (uint64_t)v7;
    }
    else
    {
      uint64_t v3 = 0;
    }
LABEL_10:
    *(_DWORD *)(a1 + 44) = v3;
  }

  return _objc_release_x1(v3, v4);
}

int32x2_t sub_1000204B0(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t v2 = +[NFCALogger sharedCALogger];
      id v3 = [v2 getDurationFrom:*(void *)(a1 + 32)];

      v16[0] = @"connectedDuration";
      int v15 = +[NSNumber numberWithUnsignedInt:v3];
      v17[0] = v15;
      v16[1] = @"rawBytesRx";
      int v14 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 16)];
      v17[1] = v14;
      void v16[2] = @"rawBytesTx";
      uint64_t v4 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 8)];
      v17[2] = v4;
      v16[3] = @"rawCommandCount";
      uint64_t v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 24)];
      v17[3] = v5;
      v16[4] = @"isConnectionHandover";
      __int16 v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 84)];
      void v17[4] = v6;
      v16[5] = @"wasRead";
      char v7 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
      void v17[5] = v7;
      v16[6] = @"resultCode";
      uint64_t v8 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
      v17[6] = v8;
      v16[7] = @"isCoreNFC";
      unsigned int v9 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 85)];
      v17[7] = v9;
      void v16[8] = @"didUsePaymentAid";
      unsigned int v10 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 86)];
      void v17[8] = v10;
      uint64_t v11 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:9];

      uint64_t v12 = +[NFCALogger sharedCALogger];
      [v12 postCAEventFor:@"com.apple.nfcd.hceTagRead" eventInput:v11];
    }
    else
    {
      LODWORD(v3) = 0;
    }
    *(_DWORD *)(a1 + 68) += v3;
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 72), vrev64_s32(vmovn_s64(*(int64x2_t *)(a1 + 8))));
    *(int32x2_t *)(a1 + 72) = result;
    *(_DWORD *)(a1 + 80) += *(_DWORD *)(a1 + 24);
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 44) = 0;
    *(unsigned char *)(a1 + 86) = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2B0], 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
  return result;
}

void sub_100020768(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2B0], 8) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 77) = 0;
    id v2 = +[NFCALogger sharedCALogger];
    *(void *)(a1 + 56) = [v2 getTimestamp];
  }
}

void sub_1000207D8(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 32)) {
      sub_1000204B0(a1);
    }
    if (*(void *)(a1 + 56))
    {
      id v2 = +[NFCALogger sharedCALogger];
      *(_DWORD *)(a1 + 64) = [v2 getDurationFrom:*(void *)(a1 + 56)];

      v13[0] = @"sessionDuration";
      uint64_t v12 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
      v14[0] = v12;
      v13[1] = @"connectedDuration";
      id v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 68)];
      v14[1] = v3;
      _DWORD v13[2] = @"rawBytesRx";
      uint64_t v4 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
      v14[2] = v4;
      v13[3] = @"rawBytesTx";
      uint64_t v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 76)];
      v14[3] = v5;
      v13[4] = @"rawCommandCount";
      __int16 v6 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
      void v14[4] = v6;
      v13[5] = @"isConnectionHandover";
      char v7 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 84)];
      v14[5] = v7;
      v13[6] = @"isCoreNFC";
      uint64_t v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 85)];
      v14[6] = v8;
      v13[7] = @"didUsePaymentAid";
      unsigned int v9 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 87)];
      v14[7] = v9;
      unsigned int v10 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:8];

      uint64_t v11 = +[NFCALogger sharedCALogger];
      [v11 postCAEventFor:@"com.apple.nfcd.hceSessionEvent" eventInput:v10];
    }
    *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2B0], 8) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 77) = 0;
  }
}

id sub_100020A34(unsigned char *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = [a1 getSecureElementWrapperAndSetRouting];
    uint64_t v5 = v4;
    if (a1[88])
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        char v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("_getAppletForAid:");
        uint64_t v11 = 45;
        if (isMetaClass) {
          uint64_t v11 = 43;
        }
        v7(6, "%c[%{public}s %{public}s]:%i Factory test mode", v11, ClassName, Name, 98);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = object_getClass(a1);
        if (class_isMetaClass(v13)) {
          int v14 = 43;
        }
        else {
          int v14 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v36 = v14;
        __int16 v37 = 2082;
        CFRange v38 = object_getClassName(a1);
        __int16 v39 = 2082;
        size_t v40 = sel_getName("_getAppletForAid:");
        __int16 v41 = 1024;
        int v42 = 98;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Factory test mode", buf, 0x22u);
      }

      id v33 = 0;
      id v15 = sub_100246F2C(v5, &v33);
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v16 = v33;
      id v17 = [v16 countByEnumeratingWithState:&v29 objects:v34 count:16];
      if (v17)
      {
        id v18 = v17;
        __int16 v28 = v5;
        id v19 = 0;
        uint64_t v20 = *(void *)v30;
LABEL_14:
        __int16 v21 = 0;
        uint64_t v22 = v19;
        while (1)
        {
          if (*(void *)v30 != v20) {
            objc_enumerationMutation(v16);
          }
          id v19 = *(id *)(*((void *)&v29 + 1) + 8 * (void)v21);

          uint64_t v23 = [v19 identifierAsData];
          uint64_t v24 = +[NSData NF_dataWithHexString:v3];
          unsigned __int8 v25 = [v23 isEqualToData:v24];

          if (v25) {
            break;
          }
          __int16 v21 = (char *)v21 + 1;
          uint64_t v22 = v19;
          if (v18 == v21)
          {
            id v18 = [v16 countByEnumeratingWithState:&v29 objects:v34 count:16];
            if (v18) {
              goto LABEL_14;
            }

            id v19 = 0;
            break;
          }
        }
        uint64_t v5 = v28;
      }
      else
      {
        id v19 = 0;
      }
    }
    else
    {
      sub_1002473C8(v4, v3);
      id v19 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v19 = 0;
  }

  return v19;
}

void sub_1000241AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_1000241D8(uint64_t a1)
{
}

void sub_1000241E0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v5];

  char v7 = [v6 objectForKeyedSubscript:@"ClosedLoopTCIs"];
  if (v7)
  {
    [v6 setObject:v7 forKeyedSubscript:@"TCIs"];
    [v6 removeObjectForKey:@"ClosedLoopTCIs"];
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v6 forKeyedSubscript:v8];
}

id sub_1000247A4(void *a1, void *a2, void *a3, int a4, void *a5, unsigned int a6)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v200 = a1;
  if (!a1)
  {
    id v42 = 0;
    goto LABEL_144;
  }
  id v12 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283528 length:13];
  unsigned int v13 = [v12 NF_asHexString];

  id v14 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283535 length:7];
  id v15 = [v14 NF_asHexString];

  id v16 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028353C length:7];
  int v189 = [v16 NF_asHexString];

  id v17 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283543 length:9];
  v188 = [v17 NF_asHexString];

  id v18 = [v10 identifier];
  uint64_t v184 = v13;
  id v19 = [v18 compare:v13 options:1 range:[v13 length]];

  __int16 v198 = v10;
  v193 = v15;
  if (v19)
  {
    uint64_t v20 = [v10 identifier];
    if (objc_msgSend(v20, "compare:options:range:", v15, 1, 0, objc_msgSend(v15, "length")))
    {
      __int16 v21 = [v10 identifier];
      id v22 = [v21 compare:v189 options:1 range:[v189 length]];

      if (v22)
      {
        uint64_t v23 = [v10 identifier];
        id v24 = [v23 compare:v188 options:1 range:[v188 length]];

        if (v24)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t Logger = NFLogGetLogger();
          if (Logger)
          {
            size_t v26 = (void (*)(void, const char *, ...))Logger;
            Class Class = object_getClass(v200);
            BOOL isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(v200);
            Name = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            long long v31 = [v10 identifier];
            uint64_t v32 = 45;
            if (isMetaClass) {
              uint64_t v32 = 43;
            }
            v26(3, "%c[%{public}s %{public}s]:%i keys are not supported on %{public}@", v32, ClassName, Name, 663, v31);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            unint64_t v34 = object_getClass(v200);
            if (class_isMetaClass(v34)) {
              int v35 = 43;
            }
            else {
              int v35 = 45;
            }
            int v36 = object_getClassName(v200);
            __int16 v37 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            CFRange v38 = [v10 identifier];
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v35;
            __int16 v212 = 2082;
            v213 = v36;
            __int16 v214 = 2082;
            v215 = v37;
            __int16 v216 = 1024;
            int v217 = 663;
            __int16 v218 = 2114;
            CFStringRef v219 = v38;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i keys are not supported on %{public}@", buf, 0x2Cu);
          }
          id v39 = objc_alloc((Class)NSError);
          uint64_t v40 = +[NSString stringWithUTF8String:"nfcd"];
          v235[0] = NSLocalizedDescriptionKey;
          __int16 v190 = +[NSString stringWithUTF8String:"Invalid Parameter"];
          v236[0] = v190;
          v236[1] = &off_100319BA0;
          v235[1] = @"Line";
          v235[2] = @"Method";
          id v194 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:")];
          v236[2] = v194;
          v235[3] = NSDebugDescriptionErrorKey;
          id v192 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", @"enableExpressForKeys:onApplet:enable:authorization:uid:", 664];
          v236[3] = v192;
          v235[4] = NSLocalizedFailureReasonErrorKey;
          id obj = [objc_alloc((Class)NSString) initWithFormat:@"keys are not supported on the applet"];
          v236[4] = obj;
          id v41 = +[NSDictionary dictionaryWithObjects:v236 forKeys:v235 count:5];
          v191 = (__CFString *)v40;
          id v42 = [v39 initWithDomain:v40 code:10 userInfo:v41];
LABEL_141:

          CFDataRef v45 = v193;
LABEL_142:

          goto LABEL_143;
        }
        id v155 = +[NSUserDefaults standardUserDefaults];
        if ([v155 BOOLForKey:@"debugAcwgBackwardsSpecCompliance"])
        {
          char v206 = 8;
          __int16 v205 = 1798;
          *(void *)buf = 0x807060504030201;
          v191 = (__CFString *)[objc_alloc((Class)NSData) initWithBytes:buf length:8];
          id v156 = objc_alloc((Class)NSData);
          uint64_t v157 = 3;
        }
        else
        {
          LOBYTE(v205) = 3;
          buf[2] = 3;
          *(_WORD *)buf = 513;
          v191 = (__CFString *)[objc_alloc((Class)NSData) initWithBytes:buf length:3];
          id v156 = objc_alloc((Class)NSData);
          uint64_t v157 = 1;
        }
        __int16 v190 = (__CFString *)[v156 initWithBytes:&v205 length:v157];

        int v185 = 1;
        goto LABEL_20;
      }
    }
    else
    {
    }
    LOBYTE(v205) = -17;
    *(_DWORD *)buf = 50463215;
    id v43 = objc_alloc((Class)NSData);
    uint64_t v44 = 4;
  }
  else
  {
    LOBYTE(v205) = 6;
    *(_WORD *)&uint8_t buf[4] = 1540;
    *(_DWORD *)buf = 50462976;
    id v43 = objc_alloc((Class)NSData);
    uint64_t v44 = 6;
  }
  v191 = (__CFString *)[v43 initWithBytes:buf length:v44];
  __int16 v190 = (__CFString *)[objc_alloc((Class)NSData) initWithBytes:&v205 length:1];
  int v185 = 0;
LABEL_20:
  [v200 getSecureElementWrapperAndSetRouting];
  CFDataRef v45 = v193;
  id v194 = (id)objc_claimAutoreleasedReturnValue();
  if (!v194)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v121 = NFLogGetLogger();
    if (v121)
    {
      v122 = (void (*)(void, const char *, ...))v121;
      v123 = object_getClass(v200);
      BOOL v124 = class_isMetaClass(v123);
      v125 = object_getClassName(v200);
      v175 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
      uint64_t v126 = 45;
      if (v124) {
        uint64_t v126 = 43;
      }
      v122(3, "%c[%{public}s %{public}s]:%i Failed to initialize eSE wrapper", v126, v125, v175, 669);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v127 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
    {
      uint64_t v128 = object_getClass(v200);
      if (class_isMetaClass(v128)) {
        int v129 = 43;
      }
      else {
        int v129 = 45;
      }
      v130 = object_getClassName(v200);
      id v131 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v129;
      __int16 v212 = 2082;
      v213 = v130;
      __int16 v214 = 2082;
      v215 = v131;
      __int16 v216 = 1024;
      int v217 = 669;
      _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to initialize eSE wrapper", buf, 0x22u);
    }

    id v132 = objc_alloc((Class)NSError);
    uint64_t v133 = +[NSString stringWithUTF8String:"nfcd"];
    v233[0] = NSLocalizedDescriptionKey;
    id obj = +[NSString stringWithUTF8String:"Stack Error"];
    v234[0] = obj;
    v234[1] = &off_100319BB8;
    v233[1] = @"Line";
    v233[2] = @"Method";
    id v41 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:")];
    v234[2] = v41;
    v233[3] = NSDebugDescriptionErrorKey;
    id v134 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 670];
    v234[3] = v134;
    v233[4] = NSLocalizedFailureReasonErrorKey;
    id v135 = [objc_alloc((Class)NSString) initWithFormat:@"Failed to initialize eSE wrapper"];
    v234[4] = v135;
    id v136 = +[NSDictionary dictionaryWithObjects:v234 forKeys:v233 count:5];
    id v192 = (id)v133;
    id v42 = [v132 initWithDomain:v133 code:15 userInfo:v136];
LABEL_140:

    goto LABEL_141;
  }
  v183 = v11;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v201 = 0u;
  long long v202 = 0u;
  id obj = v9;
  id v195 = [obj countByEnumeratingWithState:&v201 objects:v232 count:16];
  if (!v195)
  {
    id v192 = 0;
    unsigned int v179 = 0;
    goto LABEL_110;
  }
  id v192 = 0;
  unsigned int v179 = 0;
  int v46 = v185;
  if (!v19) {
    int v46 = 1;
  }
  int v186 = v46;
  uint64_t v196 = *(void *)v202;
  if (a4) {
    CFStringRef v47 = @"enable";
  }
  else {
    CFStringRef v47 = @"disable";
  }
  CFStringRef v180 = v47;
  CFRange v48 = &AMFDRSealingMapCopyLocalData_ptr;
  id v178 = v9;
  do
  {
    CFRange v49 = 0;
    do
    {
      if (*(void *)v202 != v196) {
        objc_enumerationMutation(obj);
      }
      CFRange v50 = *(__CFString **)(*((void *)&v201 + 1) + 8 * (void)v49);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v158 = NFLogGetLogger();
        if (v158)
        {
          id v159 = (void (*)(void, const char *, ...))v158;
          long long v160 = object_getClass(v200);
          BOOL v161 = class_isMetaClass(v160);
          long long v162 = object_getClassName(v200);
          v177 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          uint64_t v163 = 45;
          if (v161) {
            uint64_t v163 = 43;
          }
          v159(3, "%c[%{public}s %{public}s]:%i Invalid type", v163, v162, v177, 680);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        long long v164 = NFSharedLogGetLogger();
        id v9 = v178;
        if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
        {
          long long v165 = object_getClass(v200);
          if (class_isMetaClass(v165)) {
            int v166 = 43;
          }
          else {
            int v166 = 45;
          }
          long long v167 = object_getClassName(v200);
          v168 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v166;
          __int16 v212 = 2082;
          v213 = v167;
          __int16 v214 = 2082;
          v215 = v168;
          __int16 v216 = 1024;
          int v217 = 680;
          _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid type", buf, 0x22u);
        }

        id v169 = objc_alloc((Class)NSError);
        id v41 = +[NSString stringWithUTF8String:"nfcd"];
        v230[0] = NSLocalizedDescriptionKey;
        id v134 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        v231[0] = v134;
        v231[1] = &off_100319BD0;
        v230[1] = @"Line";
        v230[2] = @"Method";
        id v135 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:")];
        v231[2] = v135;
        v230[3] = NSDebugDescriptionErrorKey;
        id v136 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 681];
        v231[3] = v136;
        v230[4] = NSLocalizedFailureReasonErrorKey;
        id v152 = [objc_alloc((Class)NSString) initWithFormat:@"Invalid key type"];
        v231[4] = v152;
        id v153 = +[NSDictionary dictionaryWithObjects:v231 forKeys:v230 count:5];
        id v42 = [v169 initWithDomain:v41 code:10 userInfo:v153];
        goto LABEL_135;
      }
      id v41 = [(__CFString *)v50 objectForKeyedSubscript:@"keyIdentifier"];
      if (!v41 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v140 = NFLogGetLogger();
        if (v140)
        {
          uint64_t v141 = (void (*)(void, const char *, ...))v140;
          id v142 = object_getClass(v200);
          BOOL v143 = class_isMetaClass(v142);
          v144 = object_getClassName(v200);
          NSErrorUserInfoKey v176 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          uint64_t v145 = 45;
          if (v143) {
            uint64_t v145 = 43;
          }
          v141(3, "%c[%{public}s %{public}s]:%i key ID is missing or has an invalid type ?!", v145, v144, v176, 774);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v146 = NFSharedLogGetLogger();
        id v9 = v178;
        if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
        {
          v147 = object_getClass(v200);
          if (class_isMetaClass(v147)) {
            int v148 = 43;
          }
          else {
            int v148 = 45;
          }
          v149 = object_getClassName(v200);
          v150 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v148;
          __int16 v212 = 2082;
          v213 = v149;
          __int16 v214 = 2082;
          v215 = v150;
          __int16 v216 = 1024;
          int v217 = 774;
          _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i key ID is missing or has an invalid type ?!", buf, 0x22u);
        }

        id v151 = objc_alloc((Class)NSError);
        id v134 = +[NSString stringWithUTF8String:"nfcd"];
        v209[0] = NSLocalizedDescriptionKey;
        id v135 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        v210[0] = v135;
        v210[1] = &off_100319C18;
        v209[1] = @"Line";
        v209[2] = @"Method";
        id v136 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:")];
        v210[2] = v136;
        v209[3] = NSDebugDescriptionErrorKey;
        id v152 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 775];
        v210[3] = v152;
        v209[4] = NSLocalizedFailureReasonErrorKey;
        id v153 = [objc_alloc((Class)NSString) initWithFormat:@"key ID is missing or has an invalid type ?!"];
        v210[4] = v153;
        v154 = +[NSDictionary dictionaryWithObjects:v210 forKeys:v209 count:5];
        id v42 = [v151 initWithDomain:v134 code:10 userInfo:v154];

LABEL_135:
        id v10 = v198;
        id v11 = v183;
        goto LABEL_140;
      }
      CFRange v51 = v48[459];
      CFRange v52 = [(__CFString *)v50 objectForKeyedSubscript:@"UWBExpressEnabled"];
      CFRange v53 = [v51 numberWithBool:[v52 BOOLValue]];

      unsigned int v199 = v53;
      if (v53)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v78 = NFLogGetLogger();
          if (v78)
          {
            v79 = (void (*)(void, const char *, ...))v78;
            id v80 = object_getClass(v200);
            BOOL v81 = class_isMetaClass(v80);
            v82 = object_getClassName(v200);
            v173 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            uint64_t v83 = 45;
            if (v81) {
              uint64_t v83 = 43;
            }
            v79(3, "%c[%{public}s %{public}s]:%i Invalid UWB type", v83, v82, v173, 693);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v84 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            v85 = object_getClass(v200);
            if (class_isMetaClass(v85)) {
              int v86 = 43;
            }
            else {
              int v86 = 45;
            }
            v87 = object_getClassName(v200);
            v88 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v86;
            __int16 v212 = 2082;
            v213 = v87;
            __int16 v214 = 2082;
            v215 = v88;
            __int16 v216 = 1024;
            int v217 = 693;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid UWB type", buf, 0x22u);
          }

          id v89 = objc_alloc((Class)NSError);
          __int16 v59 = +[NSString stringWithUTF8String:"nfcd"];
          v228[0] = NSLocalizedDescriptionKey;
          __int16 v73 = +[NSString stringWithUTF8String:"Invalid Parameter"];
          v229[0] = v73;
          v229[1] = &off_100319BE8;
          v228[1] = @"Line";
          v228[2] = @"Method";
          id v74 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:")];
          v229[2] = v74;
          v228[3] = NSDebugDescriptionErrorKey;
          id v90 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 694];
          v229[3] = v90;
          v228[4] = NSLocalizedFailureReasonErrorKey;
          id v91 = [objc_alloc((Class)NSString) initWithFormat:@"Invalid UWB value type"];
          v229[4] = v91;
          v92 = +[NSDictionary dictionaryWithObjects:v229 forKeys:v228 count:5];
          id v181 = [v89 initWithDomain:v59 code:10 userInfo:v92];

          goto LABEL_65;
        }
      }
      unsigned int v54 = [v53 BOOLValue];
      if (((v54 ^ 1 | v186) & 1) == 0)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v61 = NFLogGetLogger();
        if (v61)
        {
          id v62 = (void (*)(void, const char *, ...))v61;
          v63 = object_getClass(v200);
          BOOL v64 = class_isMetaClass(v63);
          v65 = object_getClassName(v200);
          v172 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          uint64_t v66 = 45;
          if (v64) {
            uint64_t v66 = 43;
          }
          v62(3, "%c[%{public}s %{public}s]:%i what you talking 'bout Willis?!", v66, v65, v172, 699);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v67 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          v68 = object_getClass(v200);
          if (class_isMetaClass(v68)) {
            int v69 = 43;
          }
          else {
            int v69 = 45;
          }
          int v70 = object_getClassName(v200);
          __int16 v71 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v69;
          __int16 v212 = 2082;
          v213 = v70;
          __int16 v214 = 2082;
          v215 = v71;
          __int16 v216 = 1024;
          int v217 = 699;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i what you talking 'bout Willis?!", buf, 0x22u);
        }

        id v72 = objc_alloc((Class)NSError);
        __int16 v59 = +[NSString stringWithUTF8String:"nfcd"];
        v226[0] = NSLocalizedDescriptionKey;
        __int16 v73 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        v227[0] = v73;
        v227[1] = &off_100319C00;
        v226[1] = @"Line";
        v226[2] = @"Method";
        id v74 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:")];
        v227[2] = v74;
        v226[3] = NSDebugDescriptionErrorKey;
        id v75 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 700];
        v227[3] = v75;
        v226[4] = NSLocalizedFailureReasonErrorKey;
        id v76 = [objc_alloc((Class)NSString) initWithFormat:@"what you talking 'bout Willis?!"];
        v227[4] = v76;
        id v77 = +[NSDictionary dictionaryWithObjects:v227 forKeys:v226 count:5];
        id v181 = [v72 initWithDomain:v59 code:10 userInfo:v77];

LABEL_65:
        int v93 = 0;
        id v10 = v198;
        goto LABEL_93;
      }
      if (v185)
      {
        if (!a4) {
          goto LABEL_69;
        }
        CFRange v55 = [(__CFString *)v50 objectForKeyedSubscript:@"expressEnabled"];
        unsigned int v56 = [v55 BOOLValue];

        unsigned int v57 = [v53 BOOLValue];
        if (v56) {
          int v58 = v190;
        }
        else {
          int v58 = 0;
        }
        __int16 v59 = v58;
        if (v57) {
          v60 = v190;
        }
        else {
          v60 = 0;
        }
      }
      else
      {
        if (!a4)
        {
LABEL_69:
          v60 = v191;
          __int16 v59 = v60;
          goto LABEL_70;
        }
        if (v54)
        {
          __int16 v59 = v191;
          v60 = v190;
        }
        else
        {
          __int16 v59 = v190;
          v60 = v191;
        }
      }
LABEL_70:
      __int16 v73 = v60;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v94 = NFLogGetLogger();
      if (v94)
      {
        v95 = (void (*)(void, const char *, ...))v94;
        v96 = object_getClass(v200);
        BOOL v97 = class_isMetaClass(v96);
        id v98 = object_getClassName(v200);
        v99 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        id v100 = [v10 identifier];
        uint64_t v101 = 45;
        if (v97) {
          uint64_t v101 = 43;
        }
        v95(6, "%c[%{public}s %{public}s]:%i %{public}@ express for key:%{public}@ AID:%{public}@", v101, v98, v99, 755, v180, v50, v100);

        id v10 = v198;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v102 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v103 = object_getClass(v200);
        if (class_isMetaClass(v103)) {
          int v104 = 43;
        }
        else {
          int v104 = 45;
        }
        v105 = object_getClassName(v200);
        v106 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        v107 = [v198 identifier];
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v104;
        __int16 v212 = 2082;
        v213 = v105;
        __int16 v214 = 2082;
        v215 = v106;
        id v10 = v198;
        __int16 v216 = 1024;
        int v217 = 755;
        __int16 v218 = 2114;
        CFStringRef v219 = v180;
        __int16 v220 = 2114;
        v221 = v50;
        __int16 v222 = 2114;
        v223 = (__CFString *)v107;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@ express for key:%{public}@ AID:%{public}@", buf, 0x40u);
      }
      int v108 = sub_10024B344(v194, v59, v73, v41, v10, v183, a6);
      id v74 = v108;
      if (!v108) {
        goto LABEL_82;
      }
      if ([v108 code] == (id)65)
      {
        ++v179;
LABEL_82:
        int v93 = 1;
        goto LABEL_93;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v109 = NFLogGetLogger();
      if (v109)
      {
        v110 = (void (*)(void, const char *, ...))v109;
        id v111 = object_getClass(v200);
        BOOL v112 = class_isMetaClass(v111);
        v113 = object_getClassName(v200);
        v174 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        uint64_t v114 = 45;
        if (v112) {
          uint64_t v114 = 43;
        }
        v171 = v113;
        id v10 = v198;
        v110(3, "%c[%{public}s %{public}s]:%i failed to setup transaction codes contactless:%{public}@ wired:%{public}@ on key %{public}@: %{public}@", v114, v171, v174, 768, v59, v73, v50, v74);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v115 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
      {
        v116 = object_getClass(v200);
        if (class_isMetaClass(v116)) {
          int v117 = 43;
        }
        else {
          int v117 = 45;
        }
        id v118 = object_getClassName(v200);
        v119 = sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:");
        *(_DWORD *)buf = 67110914;
        *(_DWORD *)&uint8_t buf[4] = v117;
        id v10 = v198;
        __int16 v212 = 2082;
        v213 = v118;
        __int16 v214 = 2082;
        v215 = v119;
        __int16 v216 = 1024;
        int v217 = 768;
        __int16 v218 = 2114;
        CFStringRef v219 = v59;
        __int16 v220 = 2114;
        v221 = v73;
        __int16 v222 = 2114;
        v223 = v50;
        __int16 v224 = 2114;
        id v225 = v74;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i failed to setup transaction codes contactless:%{public}@ wired:%{public}@ on key %{public}@: %{public}@", buf, 0x4Au);
      }

      id v74 = v74;
      int v93 = 1;
      id v192 = v74;
LABEL_93:

      if (!v93)
      {
        id v9 = v178;
        id v11 = v183;
        CFDataRef v45 = v193;
        id v42 = v181;
        goto LABEL_142;
      }
      CFRange v49 = (char *)v49 + 1;
      CFRange v48 = &AMFDRSealingMapCopyLocalData_ptr;
    }
    while (v195 != v49);
    id v120 = [obj countByEnumeratingWithState:&v201 objects:v232 count:16];
    id v9 = v178;
    CFDataRef v45 = v193;
    id v195 = v120;
  }
  while (v120);
LABEL_110:

  +[NFGeneralStatisticsCALogger postAnalyticsSetupEndpoints:totalUnknowntoSE:](NFGeneralStatisticsCALogger, "postAnalyticsSetupEndpoints:totalUnknowntoSE:", [obj count], v179);
  if (v192)
  {
    id v137 = objc_alloc((Class)NSError);
    id obj = +[NSString stringWithUTF8String:"nfcd"];
    id v138 = [v192 code];
    v207[0] = NSLocalizedDescriptionKey;
    id v11 = v183;
    if ((uint64_t)[v192 code] > 70) {
      uint64_t v139 = 71;
    }
    else {
      uint64_t v139 = (uint64_t)[v192 code];
    }
    id v41 = +[NSString stringWithUTF8String:off_100301150[v139]];
    v208[0] = v41;
    v208[1] = v192;
    v207[1] = NSUnderlyingErrorKey;
    v207[2] = @"Line";
    v208[2] = &off_100319C30;
    v207[3] = @"Method";
    id v134 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:")];
    v208[3] = v134;
    v207[4] = NSDebugDescriptionErrorKey;
    id v135 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("enableExpressForKeys:onApplet:enable:authorization:uid:"), 781];
    v208[4] = v135;
    id v136 = +[NSDictionary dictionaryWithObjects:v208 forKeys:v207 count:5];
    id v42 = [v137 initWithDomain:obj code:v138 userInfo:v136];
    id v10 = v198;
    goto LABEL_140;
  }
  id v42 = 0;
  id v11 = v183;
LABEL_143:

LABEL_144:

  return v42;
}

id sub_1000282B0(id *a1, int a2)
{
  if (a1)
  {
    id v4 = a1[2];
    id v5 = [v4 count];

    if (v5)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        char v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("setFactoryTestConfigInECP2Mode:");
        uint64_t v11 = 45;
        if (isMetaClass) {
          uint64_t v11 = 43;
        }
        v7(3, "%c[%{public}s %{public}s]:%i Config is not empty, cannot configure factory test mode", v11, ClassName, Name, 952);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        unsigned int v13 = object_getClass(a1);
        if (class_isMetaClass(v13)) {
          int v14 = 43;
        }
        else {
          int v14 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v82 = v14;
        __int16 v83 = 2082;
        v84 = object_getClassName(a1);
        __int16 v85 = 2082;
        int v86 = sel_getName("setFactoryTestConfigInECP2Mode:");
        __int16 v87 = 1024;
        int v88 = 952;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Config is not empty, cannot configure factory test mode", buf, 0x22u);
      }

      id v15 = objc_alloc((Class)NSError);
      id v16 = +[NSString stringWithUTF8String:"nfcd"];
      v97[0] = NSLocalizedDescriptionKey;
      id v17 = +[NSString stringWithUTF8String:"Invalid State"];
      v98[0] = v17;
      v98[1] = &off_100319C78;
      v97[1] = @"Line";
      v97[2] = @"Method";
      id v18 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("setFactoryTestConfigInECP2Mode:")];
      v98[2] = v18;
      v97[3] = NSDebugDescriptionErrorKey;
      id v19 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("setFactoryTestConfigInECP2Mode:"), 953];
      v98[3] = v19;
      v97[4] = NSLocalizedFailureReasonErrorKey;
      id v20 = [objc_alloc((Class)NSString) initWithFormat:@"Config is not empty"];
      v98[4] = v20;
      __int16 v21 = +[NSDictionary dictionaryWithObjects:v98 forKeys:v97 count:5];
      id v22 = [v15 initWithDomain:v16 code:12 userInfo:v21];
    }
    else
    {
      id v23 = [objc_alloc((Class)NSData) initWithBytes:"FACTORYTESTAPP" length:14];
      id v24 = [v23 NF_asHexString];
      id v16 = sub_100020A34(a1, v24);

      if (v16)
      {
        if ([v16 authTransientSupport])
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v25 = NFLogGetLogger();
          if (v25)
          {
            size_t v26 = (void (*)(uint64_t, const char *, ...))v25;
            unsigned int v27 = object_getClass(a1);
            BOOL v28 = class_isMetaClass(v27);
            long long v29 = object_getClassName(a1);
            long long v30 = sel_getName("setFactoryTestConfigInECP2Mode:");
            long long v31 = [v16 identifier];
            uint64_t v32 = 45;
            if (v28) {
              uint64_t v32 = 43;
            }
            v26(3, "%c[%{public}s %{public}s]:%i Authorization is enabled for %{public}@", v32, v29, v30, 963, v31);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            unint64_t v34 = object_getClass(a1);
            if (class_isMetaClass(v34)) {
              int v35 = 43;
            }
            else {
              int v35 = 45;
            }
            int v36 = object_getClassName(a1);
            __int16 v37 = sel_getName("setFactoryTestConfigInECP2Mode:");
            CFRange v38 = [v16 identifier];
            *(_DWORD *)buf = 67110146;
            int v82 = v35;
            __int16 v83 = 2082;
            v84 = v36;
            __int16 v85 = 2082;
            int v86 = v37;
            __int16 v87 = 1024;
            int v88 = 963;
            __int16 v89 = 2114;
            id v90 = v38;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Authorization is enabled for %{public}@", buf, 0x2Cu);
          }
          id v39 = objc_alloc((Class)NSError);
          id v17 = +[NSString stringWithUTF8String:"nfcd"];
          v93[0] = NSLocalizedDescriptionKey;
          id v18 = +[NSString stringWithUTF8String:"Invalid Parameter"];
          v94[0] = v18;
          v94[1] = &off_100319CA8;
          v93[1] = @"Line";
          v93[2] = @"Method";
          id v40 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("setFactoryTestConfigInECP2Mode:")];
          v94[2] = v40;
          v93[3] = NSDebugDescriptionErrorKey;
          id v41 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("setFactoryTestConfigInECP2Mode:"), 964];
          v94[3] = v41;
          v93[4] = NSLocalizedFailureReasonErrorKey;
          id v42 = [objc_alloc((Class)NSString) initWithFormat:@"Authorization enabled on express applet"];
          v94[4] = v42;
          id v43 = +[NSDictionary dictionaryWithObjects:v94 forKeys:v93 count:5];
          id v22 = [v39 initWithDomain:v17 code:10 userInfo:v43];
        }
        else
        {
          id v17 = objc_opt_new();
          unsigned int v57 = objc_opt_new();
          id v18 = v57;
          if (a2)
          {
            [v57 setObject:@"ECP2" forKeyedSubscript:@"ExpressType"];
            int v58 = objc_opt_new();
            __int16 v59 = +[NSData NF_dataWithHexString:@"020000"];
            id v60 = [objc_alloc((Class)NSArray) initWithObjects:v59];
            [v58 setObject:v60 forKeyedSubscript:@"primaryTCIs"];

            [v18 setObject:v58 forKeyedSubscript:@"ECP2Info"];
          }
          else
          {
            [v57 setObject:@"GenericA" forKeyedSubscript:@"ExpressType"];
          }
          uint64_t v61 = [v16 identifier];
          [v18 setObject:v61 forKeyedSubscript:@"appletIdentifier"];

          [v18 setObject:&__kCFBooleanTrue forKeyedSubscript:@"expressEnabled"];
          uint64_t v62 = arc4random();
          unint64_t v80 = arc4random() | (unint64_t)(v62 << 32);
          id v40 = [objc_alloc((Class)NSData) initWithBytes:&v80 length:8];
          v63 = [v40 NF_asHexString];
          [v18 setObject:v63 forKeyedSubscript:@"passUniqueID"];

          [v17 addObject:v18];
          [a1 dumpConfig:v17 logLevel:6 prefix:@"factory test config"];
          id v22 = [a1 reconfigureWithArray:v17 restoreAuthorization:0 updateStorage:1];
          if (v22)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v64 = NFLogGetLogger();
            if (v64)
            {
              v65 = (void (*)(uint64_t, const char *, ...))v64;
              uint64_t v66 = object_getClass(a1);
              BOOL v67 = class_isMetaClass(v66);
              v68 = object_getClassName(a1);
              v79 = sel_getName("setFactoryTestConfigInECP2Mode:");
              uint64_t v69 = 45;
              if (v67) {
                uint64_t v69 = 43;
              }
              v65(3, "%c[%{public}s %{public}s]:%i Failed to set express config: %{public}@; error: %{public}@",
                v69,
                v68,
                v79,
                994,
                v17,
                v22);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            int v70 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              __int16 v71 = object_getClass(a1);
              if (class_isMetaClass(v71)) {
                int v72 = 43;
              }
              else {
                int v72 = 45;
              }
              __int16 v73 = object_getClassName(a1);
              id v74 = sel_getName("setFactoryTestConfigInECP2Mode:");
              *(_DWORD *)buf = 67110402;
              int v82 = v72;
              __int16 v83 = 2082;
              v84 = v73;
              __int16 v85 = 2082;
              int v86 = v74;
              __int16 v87 = 1024;
              int v88 = 994;
              __int16 v89 = 2114;
              id v90 = v17;
              __int16 v91 = 2114;
              id v92 = v22;
              _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set express config: %{public}@; error: %{public}@",
                buf,
                0x36u);
            }

            id v75 = v22;
          }
        }
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v44 = NFLogGetLogger();
        if (v44)
        {
          CFDataRef v45 = (void (*)(uint64_t, const char *, ...))v44;
          int v46 = object_getClass(a1);
          BOOL v47 = class_isMetaClass(v46);
          CFRange v48 = object_getClassName(a1);
          uint64_t v78 = sel_getName("setFactoryTestConfigInECP2Mode:");
          uint64_t v49 = 45;
          if (v47) {
            uint64_t v49 = 43;
          }
          v45(3, "%c[%{public}s %{public}s]:%i Failed to find FTA applet", v49, v48, v78, 958);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        CFRange v50 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          CFRange v51 = object_getClass(a1);
          if (class_isMetaClass(v51)) {
            int v52 = 43;
          }
          else {
            int v52 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v82 = v52;
          __int16 v83 = 2082;
          v84 = object_getClassName(a1);
          __int16 v85 = 2082;
          int v86 = sel_getName("setFactoryTestConfigInECP2Mode:");
          __int16 v87 = 1024;
          int v88 = 958;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find FTA applet", buf, 0x22u);
        }

        id v53 = objc_alloc((Class)NSError);
        id v17 = +[NSString stringWithUTF8String:"nfcd"];
        v95[0] = NSLocalizedDescriptionKey;
        id v18 = +[NSString stringWithUTF8String:"Invalid State"];
        v96[0] = v18;
        v96[1] = &off_100319C90;
        v95[1] = @"Line";
        v95[2] = @"Method";
        id v54 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("setFactoryTestConfigInECP2Mode:")];
        v96[2] = v54;
        v95[3] = NSDebugDescriptionErrorKey;
        id v55 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("setFactoryTestConfigInECP2Mode:"), 959];
        v96[3] = v55;
        unsigned int v56 = +[NSDictionary dictionaryWithObjects:v96 forKeys:v95 count:4];
        id v22 = [v53 initWithDomain:v17 code:12 userInfo:v56];

        id v16 = 0;
      }
    }
  }
  else
  {
    id v22 = 0;
  }

  return v22;
}

BOOL sub_100028E2C(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  id v5 = a2;
  id v6 = [a1 getSecureElementWrapperAndSetRouting];
  id v12 = 0;
  char v7 = sub_100253230(v6, v5, &v12);

  id v8 = v12;
  id v9 = [v7 mutableCopy];

  *a3 = v9;
  BOOL v10 = v8 == 0;

  return v10;
}

uint64_t sub_100029574(void *a1, int a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  id v6 = @"embedded";
  if (a2 != 1) {
    id v6 = 0;
  }
  BOOL v67 = v6;
  char v7 = a1;
  objc_sync_enter(v7);
  if (!v7[5])
  {
    v63 = +[NSAssertionHandler currentHandler];
    [v63 handleFailureInMethod:"getSecureElementInfo:info:" object:v7 file:@"NFDriverWrapper+SE.m" lineNumber:33 description:@"driver not open"];
  }
  memset(v76, 0, 512);
  if (NFDriverGetSecureElementInfo())
  {
    id v65 = [objc_alloc((Class)NSData) initWithBytes:&v79 length:24];
    id v64 = [objc_alloc((Class)NSData) initWithBytes:&v80 length:24];
    int v66 = a2;
    uint64_t v8 = 0;
    id v9 = 0;
    BOOL v10 = 0;
    uint64_t v11 = 0;
    do
    {
      id v12 = &v76[v8];
      if (*(void *)&v76[v8 + 64])
      {
        int v13 = *((unsigned __int8 *)v12 + 1032);
        if (v13 == 1)
        {
          id v14 = [objc_alloc((Class)NSData) initWithBytes:&v76[v8] length:*((void *)v12 + 128)];

          int v13 = *((unsigned __int8 *)v12 + 1032);
          uint64_t v11 = v14;
        }
        if (v13 == 2)
        {
          id v15 = [objc_alloc((Class)NSData) initWithBytes:&v76[v8] length:*((void *)v12 + 128)];

          int v13 = *((unsigned __int8 *)v12 + 1032);
          BOOL v10 = v15;
        }
        if (v13 == 3)
        {
          id v16 = [objc_alloc((Class)NSData) initWithBytes:&v76[v8] length:*((void *)v12 + 128)];

          id v9 = v16;
        }
      }
      v8 += 65;
    }
    while (v8 != 195);
    id v17 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:32];
    id v18 = v17;
    if (v66 == 1)
    {
      [v17 setObject:@"embedded" forKey:@"identifier"];
      id v19 = [objc_alloc((Class)NSString) initWithUTF8String:&v78];
      [v18 setObject:v19 forKey:@"platformIdentifier"];

      id v20 = +[NSNumber numberWithUnsignedInteger:__rev16(v82)];
      [v18 setObject:v20 forKey:@"OSVersion"];

      __int16 v21 = +[NSNumber numberWithUnsignedInteger:((unint64_t)v82 << 16) | ((unint64_t)HIBYTE(v82) << 8) | v83];
      [v18 setObject:v21 forKey:@"fullOSVersion"];

      id v22 = +[NSNumber numberWithUnsignedInteger:v90];
      [v18 setObject:v22 forKey:@"firmwareVersion"];

      id v23 = +[NSNumber numberWithUnsignedInteger:v93];
      [v18 setObject:v23 forKey:@"compiledFWVersion"];

      id v24 = +[NSNumber numberWithUnsignedInteger:v91];
      [v18 setObject:v24 forKey:@"hardwareVersion"];

      uint64_t v25 = +[NSNumber numberWithUnsignedInteger:v99];
      [v18 setObject:v25 forKey:@"deviceType"];

      size_t v26 = +[NSNumber numberWithUnsignedInteger:v94];
      [v18 setObject:v26 forKey:@"sequenceCounter"];

      unsigned int v27 = +[NSNumber numberWithUnsignedInteger:v95];
      [v18 setObject:v27 forKey:@"referenceCounter"];

      BOOL v28 = +[NSNumber numberWithUnsignedInteger:v100];
      [v18 setObject:v28 forKey:@"osid"];

      long long v29 = +[NSNumber numberWithUnsignedInteger:v101];
      [v18 setObject:v29 forKey:@"otherOSValid"];

      long long v30 = +[NSNumber numberWithUnsignedInteger:v102];
      [v18 setObject:v30 forKey:@"restrictedMode"];

      long long v31 = +[NSNumber numberWithUnsignedInteger:v84];
      [v18 setObject:v31 forKey:@"OSMode"];

      uint64_t v32 = +[NSNumber numberWithUnsignedInteger:v85];
      [v18 setObject:v32 forKey:@"signingKeyType"];

      id v33 = +[NSNumber numberWithUnsignedInteger:v86];
      [v18 setObject:v33 forKey:@"migrationState"];

      unint64_t v34 = +[NSNumber numberWithUnsignedInteger:v96];
      [v18 setObject:v34 forKey:@"migrationPackages"];

      int v35 = +[NSNumber numberWithUnsignedInteger:v97];
      [v18 setObject:v35 forKey:@"migrationInstances"];

      int v36 = +[NSNumber numberWithUnsignedInteger:v87];
      [v18 setObject:v36 forKey:@"migrationContext"];

      __int16 v37 = +[NSNumber numberWithUnsignedInteger:v92];
      [v18 setObject:v37 forKey:@"persistentConfigID"];

      if (v65)
      {
        [v18 setObject:v65 forKey:@"serialNumber"];
      }
      else
      {
        BOOL v47 = +[NSData data];
        [v18 setObject:v47 forKey:@"serialNumber"];
      }
      if (v64)
      {
        [v18 setObject:v64 forKey:@"systemOSSerialNumber"];
      }
      else
      {
        CFRange v48 = +[NSData data];
        [v18 setObject:v48 forKey:@"systemOSSerialNumber"];
      }
      if (v11) {
        [v18 setObject:v11 forKey:@"rsaCertificate"];
      }
      if (v10) {
        [v18 setObject:v10 forKey:@"ecdsaCertificate"];
      }
      if (v9) {
        [v18 setObject:v9 forKey:@"eckaCertificate"];
      }
      id v49 = [objc_alloc((Class)NSString) initWithUTF8String:&v81];
      [v18 setObject:v49 forKey:@"atrString"];
    }
    if (v98)
    {
      id v50 = objc_alloc((Class)NSData);
      id v51 = [v50 initWithBytes:&v77 length:v98];
    }
    else
    {
      id v51 = +[NSData data];
    }
    [v18 setObject:v51 forKey:@"manifestQuery"];

    int v52 = +[NSNumber numberWithBool:1];
    [v18 setObject:v52 forKey:@"personalisable"];

    id v53 = +[NSNumber numberWithInteger:v88];
    [v18 setObject:v53 forKey:@"supportedTechnologies"];

    id v54 = +[NSNumber numberWithInteger:v89];
    [v18 setObject:v54 forKey:@"seType"];

    id v55 = +[NSNumber numberWithUnsignedInteger:v103];
    [v18 setObject:v55 forKey:@"osUpdateMode"];

    id v56 = [v7 isJCOPTooOld:v99 prod:v85 == 2 version:v94];
    BOOL v57 = (BOOL)v56;
    if (v66 == 1) {
      char v58 = (char)v56;
    }
    else {
      char v58 = 1;
    }
    if ((v58 & 1) == 0) {
      BOOL v57 = v87 == 3 && v86 != 0 && v86 != 1;
    }
    uint64_t v61 = +[NSNumber numberWithBool:v57];
    [v18 setObject:v61 forKey:@"jcopTooOld"];

    *a3 = [[NFHardwareSecureElementInfo alloc] initWithDictionary:v18];
    uint64_t v46 = 1;
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
    {
      Class Class = object_getClass(v7);
      if (class_isMetaClass(Class)) {
        uint64_t v40 = 43;
      }
      else {
        uint64_t v40 = 45;
      }
      ClassName = object_getClassName(v7);
      Name = sel_getName("getSecureElementInfo:info:");
      Logger(3, "%c[%{public}s %{public}s]:%i Failed to get info", v40, ClassName, Name, 37);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v43 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = object_getClass(v7);
      if (class_isMetaClass(v44)) {
        int v45 = 43;
      }
      else {
        int v45 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v69 = v45;
      __int16 v70 = 2082;
      __int16 v71 = object_getClassName(v7);
      __int16 v72 = 2082;
      __int16 v73 = sel_getName("getSecureElementInfo:info:");
      __int16 v74 = 1024;
      int v75 = 37;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get info", buf, 0x22u);
    }

    uint64_t v46 = 0;
  }
  objc_sync_exit(v7);

  return v46;
}

void sub_100029F60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100029FA4(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = (id)NFDriverCopySEIDFromFDR();
  }
  return a2 != 0;
}

uint64_t sub_10002A028(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  objc_sync_enter(v1);
  if (*((unsigned char *)v1 + 137)) {
    goto LABEL_18;
  }
  if (!*((void *)v1 + 5))
  {
    id v12 = +[NSAssertionHandler currentHandler];
    [v12 handleFailureInMethod:"setSecureElement:alwaysOn:" object:v1 file:@"NFDriverWrapper+SE.m" lineNumber:172 description:@"driver not open"];
  }
  if ((NFDriverSetSecureElementAlwaysOn() & 1) == 0)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
    {
      Class Class = object_getClass(v1);
      if (class_isMetaClass(Class)) {
        uint64_t v5 = 43;
      }
      else {
        uint64_t v5 = 45;
      }
      ClassName = object_getClassName(v1);
      Name = sel_getName("setSecureElement:alwaysOn:");
      Logger(3, "%c[%{public}s %{public}s]:%i Failed to send command", v5, ClassName, Name, 175);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = object_getClass(v1);
      if (class_isMetaClass(v9)) {
        int v10 = 43;
      }
      else {
        int v10 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v14 = v10;
      __int16 v15 = 2082;
      id v16 = object_getClassName(v1);
      __int16 v17 = 2082;
      id v18 = sel_getName("setSecureElement:alwaysOn:");
      __int16 v19 = 1024;
      int v20 = 175;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command", buf, 0x22u);
    }

LABEL_18:
    uint64_t v2 = 0;
    goto LABEL_19;
  }
  uint64_t v2 = 1;
LABEL_19:
  objc_sync_exit(v1);

  return v2;
}

void sub_10002A238(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10002A260(void *a1)
{
  if (!a1) {
    goto LABEL_7;
  }
  id v1 = a1;
  objc_sync_enter(v1);
  if (!v1[137])
  {
    if ((NFDriverSetSecureElementPower() & 1) == 0)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(v1);
        if (class_isMetaClass(Class)) {
          uint64_t v12 = 43;
        }
        else {
          uint64_t v12 = 45;
        }
        ClassName = object_getClassName(v1);
        Name = sel_getName("sePowerCycle:");
        Logger(3, "%c[%{public}s %{public}s]:%i Failed to power SE off", v12, ClassName, Name, 191);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v16 = object_getClass(v1);
        if (class_isMetaClass(v16)) {
          int v17 = 43;
        }
        else {
          int v17 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v34 = v17;
        __int16 v35 = 2082;
        int v36 = object_getClassName(v1);
        __int16 v37 = 2082;
        CFRange v38 = sel_getName("sePowerCycle:");
        __int16 v39 = 1024;
        int v40 = 191;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to power SE off", buf, 0x22u);
      }

      id v18 = objc_alloc((Class)NSError);
      id v3 = +[NSString stringWithUTF8String:"nfcd"];
      v31[0] = NSLocalizedDescriptionKey;
      id v4 = +[NSString stringWithUTF8String:"Stack Error"];
      v32[0] = v4;
      v32[1] = &off_100319CD8;
      v31[1] = @"Line";
      v31[2] = @"Method";
      id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("sePowerCycle:")];
      v32[2] = v5;
      v31[3] = NSDebugDescriptionErrorKey;
      id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("sePowerCycle:"), 192];
      v32[3] = v6;
      char v7 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:4];
      id v8 = [v18 initWithDomain:v3 code:15 userInfo:v7];
      goto LABEL_30;
    }
    if ((NFDriverSetSecureElementPower() & 1) == 0)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
      {
        int v20 = object_getClass(v1);
        if (class_isMetaClass(v20)) {
          uint64_t v21 = 43;
        }
        else {
          uint64_t v21 = 45;
        }
        id v22 = object_getClassName(v1);
        id v23 = sel_getName("sePowerCycle:");
        v19(3, "%c[%{public}s %{public}s]:%i Failed to power SE back on", v21, v22, v23, 195);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = object_getClass(v1);
        if (class_isMetaClass(v25)) {
          int v26 = 43;
        }
        else {
          int v26 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v34 = v26;
        __int16 v35 = 2082;
        int v36 = object_getClassName(v1);
        __int16 v37 = 2082;
        CFRange v38 = sel_getName("sePowerCycle:");
        __int16 v39 = 1024;
        int v40 = 195;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to power SE back on", buf, 0x22u);
      }

      NFDriverSimulateCrash();
      id v27 = objc_alloc((Class)NSError);
      id v3 = +[NSString stringWithUTF8String:"nfcd"];
      v29[0] = NSLocalizedDescriptionKey;
      id v4 = +[NSString stringWithUTF8String:"Stack Error"];
      v30[0] = v4;
      v30[1] = &off_100319CF0;
      v29[1] = @"Line";
      v29[2] = @"Method";
      id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("sePowerCycle:")];
      v30[2] = v5;
      v29[3] = NSDebugDescriptionErrorKey;
      id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("sePowerCycle:"), 197];
      v30[3] = v6;
      char v7 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:4];
      id v8 = [v27 initWithDomain:v3 code:15 userInfo:v7];
      goto LABEL_30;
    }
    objc_sync_exit(v1);

LABEL_7:
    id v9 = 0;
    goto LABEL_31;
  }
  id v2 = objc_alloc((Class)NSError);
  id v3 = +[NSString stringWithUTF8String:"nfcd"];
  v41[0] = NSLocalizedDescriptionKey;
  id v4 = +[NSString stringWithUTF8String:"Aborted"];
  v42[0] = v4;
  v42[1] = &off_100319CC0;
  v41[1] = @"Line";
  v41[2] = @"Method";
  id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("sePowerCycle:")];
  v42[2] = v5;
  v41[3] = NSDebugDescriptionErrorKey;
  id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("sePowerCycle:"), 187];
  v42[3] = v6;
  char v7 = +[NSDictionary dictionaryWithObjects:v42 forKeys:v41 count:4];
  id v8 = [v2 initWithDomain:v3 code:3 userInfo:v7];
LABEL_30:
  id v9 = v8;

  objc_sync_exit(v1);
LABEL_31:

  return v9;
}

void sub_10002A8FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10002A930(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    if (v1[137])
    {
      id v2 = objc_alloc((Class)NSError);
      ErrorCode = +[NSString stringWithUTF8String:"nfcd"];
      v29[0] = NSLocalizedDescriptionKey;
      id v4 = +[NSString stringWithUTF8String:"Aborted"];
      v30[0] = v4;
      v30[1] = &off_100319D08;
      v29[1] = @"Line";
      v29[2] = @"Method";
      id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("seSoftReset:")];
      v30[2] = v5;
      v29[3] = NSDebugDescriptionErrorKey;
      id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("seSoftReset:"), 210];
      v30[3] = v6;
      char v7 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:4];
      id v8 = [v2 initWithDomain:ErrorCode code:3 userInfo:v7];

LABEL_16:
      objc_sync_exit(v1);

      goto LABEL_17;
    }
    if (NFDriverHCISoftReset())
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(v1);
        if (class_isMetaClass(Class)) {
          uint64_t v11 = 43;
        }
        else {
          uint64_t v11 = 45;
        }
        ClassName = object_getClassName(v1);
        Name = sel_getName("seSoftReset:");
        Logger(3, "%c[%{public}s %{public}s]:%i Failed to soft reset the SE", v11, ClassName, Name, 215);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        __int16 v15 = object_getClass(v1);
        if (class_isMetaClass(v15)) {
          int v16 = 43;
        }
        else {
          int v16 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v22 = v16;
        __int16 v23 = 2082;
        id v24 = object_getClassName(v1);
        __int16 v25 = 2082;
        int v26 = sel_getName("seSoftReset:");
        __int16 v27 = 1024;
        int v28 = 215;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to soft reset the SE", buf, 0x22u);
      }

      ErrorCode = (void *)NFDriverCreateErrorCode();
      id v17 = objc_alloc((Class)NSError);
      id v4 = +[NSString stringWithUTF8String:"nfcd"];
      v19[0] = NSLocalizedDescriptionKey;
      id v5 = +[NSString stringWithUTF8String:"Stack Error"];
      v19[1] = NSUnderlyingErrorKey;
      v20[0] = v5;
      v20[1] = ErrorCode;
      id v6 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:2];
      id v8 = [v17 initWithDomain:v4 code:15 userInfo:v6];
      goto LABEL_16;
    }
    objc_sync_exit(v1);
  }
  id v8 = 0;
LABEL_17:

  return v8;
}

void sub_10002AD04(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10002AD30(void *a1, int a2, void *a3, uint64_t a4, void *a5)
{
  if (a1)
  {
    a1 = sub_10002AD6C(a1, a2, a3, 0, a4, a5);
    uint64_t v5 = vars8;
  }
  return a1;
}

id sub_10002AD6C(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9 = a3;
  if (a1)
  {
    id v10 = a1;
    objc_sync_enter(v10);
    if (*((unsigned char *)v10 + 137))
    {
      if (a6)
      {
        id v11 = objc_alloc((Class)NSError);
        uint64_t v12 = +[NSString stringWithUTF8String:"nfcd"];
        v108[0] = NSLocalizedDescriptionKey;
        int v13 = +[NSString stringWithUTF8String:"Aborted"];
        v109[0] = v13;
        v109[1] = &off_100319D20;
        v108[1] = @"Line";
        v108[2] = @"Method";
        id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:")];
        v109[2] = v14;
        v108[3] = NSDebugDescriptionErrorKey;
        id v15 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", @"secureElement:transceive:toOS:allowInVirtual:error:", 243];
        v109[3] = v15;
        int v16 = +[NSDictionary dictionaryWithObjects:v109 forKeys:v108 count:4];
        *a6 = [v11 initWithDomain:v12 code:3 userInfo:v16];
      }
      goto LABEL_43;
    }
    if (!*((void *)v10 + 5))
    {
      unsigned int v86 = +[NSAssertionHandler currentHandler];
      [v86 handleFailureInMethod:"secureElement:transceive:toOS:allowInVirtual:error:" object:v10 file:@"NFDriverWrapper+SE.m" lineNumber:247 description:@"driver not open"];
    }
    if (![v9 length])
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(v10);
        if (class_isMetaClass(Class)) {
          uint64_t v20 = 43;
        }
        else {
          uint64_t v20 = 45;
        }
        ClassName = object_getClassName(v10);
        Name = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        Logger(3, "%c[%{public}s %{public}s]:%i Missing command", v20, ClassName, Name, 250);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        id v24 = object_getClass(v10);
        if (class_isMetaClass(v24)) {
          int v25 = 43;
        }
        else {
          int v25 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v95 = v25;
        __int16 v96 = 2082;
        unsigned __int16 v97 = object_getClassName(v10);
        __int16 v98 = 2082;
        unsigned __int8 v99 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        __int16 v100 = 1024;
        int v101 = 250;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing command", buf, 0x22u);
      }

      if (a6)
      {
        id v26 = objc_alloc((Class)NSError);
        __int16 v27 = +[NSString stringWithUTF8String:"nfcd"];
        v106[0] = NSLocalizedDescriptionKey;
        int v28 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        v107[0] = v28;
        v107[1] = &off_100319D38;
        v106[1] = @"Line";
        v106[2] = @"Method";
        id v29 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:")];
        v107[2] = v29;
        v106[3] = NSDebugDescriptionErrorKey;
        id v30 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 251];
        v107[3] = v30;
        long long v31 = +[NSDictionary dictionaryWithObjects:v107 forKeys:v106 count:4];
        *a6 = [v26 initWithDomain:v27 code:10 userInfo:v31];
      }
      goto LABEL_43;
    }
    uint64_t v17 = *((void *)v10 + 5);
    if (*(unsigned char *)(v17 + 52))
    {
      if (a2 != 1 || (*(_DWORD *)(v17 + 44) - 1) >= 2)
      {
LABEL_31:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v34)
        {
          __int16 v35 = object_getClass(v10);
          if (class_isMetaClass(v35)) {
            uint64_t v36 = 43;
          }
          else {
            uint64_t v36 = 45;
          }
          __int16 v37 = object_getClassName(v10);
          CFRange v38 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
          v34(3, "%c[%{public}s %{public}s]:%i SE not in proper mode", v36, v37, v38, 269);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v39 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          int v40 = object_getClass(v10);
          if (class_isMetaClass(v40)) {
            int v41 = 43;
          }
          else {
            int v41 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v95 = v41;
          __int16 v96 = 2082;
          unsigned __int16 v97 = object_getClassName(v10);
          __int16 v98 = 2082;
          unsigned __int8 v99 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
          __int16 v100 = 1024;
          int v101 = 269;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SE not in proper mode", buf, 0x22u);
        }

        if (a6)
        {
          id v42 = objc_alloc((Class)NSError);
          id v43 = +[NSString stringWithUTF8String:"nfcd"];
          v104[0] = NSLocalizedDescriptionKey;
          uint64_t v44 = +[NSString stringWithUTF8String:"Invalid State"];
          v105[0] = v44;
          v105[1] = &off_100319D50;
          v104[1] = @"Line";
          v104[2] = @"Method";
          id v45 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:")];
          v105[2] = v45;
          v104[3] = NSDebugDescriptionErrorKey;
          id v46 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 270];
          v105[3] = v46;
          BOOL v47 = +[NSDictionary dictionaryWithObjects:v105 forKeys:v104 count:4];
          *a6 = [v42 initWithDomain:v43 code:12 userInfo:v47];
        }
        goto LABEL_43;
      }
    }
    else if (a2 != 1 || *(_DWORD *)(v17 + 44) != 1)
    {
      goto LABEL_31;
    }
    id v32 = v9;
    [v32 bytes];
    [v32 length];
    if (!NFDataCreateWithBytesNoCopy())
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v49)
      {
        id v50 = object_getClass(v10);
        if (class_isMetaClass(v50)) {
          uint64_t v51 = 43;
        }
        else {
          uint64_t v51 = 45;
        }
        int v52 = object_getClassName(v10);
        id v53 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        v49(3, "%c[%{public}s %{public}s]:%i Failed to create CAPDU of length=%lu", v51, v52, v53, 276, [v32 length]);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v54 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        id v55 = object_getClass(v10);
        if (class_isMetaClass(v55)) {
          int v56 = 43;
        }
        else {
          int v56 = 45;
        }
        *(_DWORD *)buf = 67110146;
        int v95 = v56;
        __int16 v96 = 2082;
        unsigned __int16 v97 = object_getClassName(v10);
        __int16 v98 = 2082;
        unsigned __int8 v99 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        __int16 v100 = 1024;
        int v101 = 276;
        __int16 v102 = 2048;
        id v103 = [v32 length];
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create CAPDU of length=%lu", buf, 0x2Cu);
      }

      if (a6)
      {
        id v57 = objc_alloc((Class)NSError);
        char v58 = +[NSString stringWithUTF8String:"nfcd"];
        v92[0] = NSLocalizedDescriptionKey;
        __int16 v59 = +[NSString stringWithUTF8String:"No resources"];
        v93[0] = v59;
        v93[1] = &off_100319D68;
        v92[1] = @"Line";
        v92[2] = @"Method";
        id v60 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:")];
        v93[2] = v60;
        v92[3] = NSDebugDescriptionErrorKey;
        id v61 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 277];
        v93[3] = v61;
        uint64_t v62 = +[NSDictionary dictionaryWithObjects:v93 forKeys:v92 count:4];
        *a6 = [v57 initWithDomain:v58 code:34 userInfo:v62];
      }
      goto LABEL_43;
    }
    if (!NFDriverSecureElementTransceive())
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v63)
      {
        id v64 = object_getClass(v10);
        if (class_isMetaClass(v64)) {
          uint64_t v65 = 43;
        }
        else {
          uint64_t v65 = 45;
        }
        int v66 = object_getClassName(v10);
        BOOL v67 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        v63(3, "%c[%{public}s %{public}s]:%i Transceive failed", v65, v66, v67, 284);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      v68 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        int v69 = object_getClass(v10);
        if (class_isMetaClass(v69)) {
          int v70 = 43;
        }
        else {
          int v70 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v95 = v70;
        __int16 v96 = 2082;
        unsigned __int16 v97 = object_getClassName(v10);
        __int16 v98 = 2082;
        unsigned __int8 v99 = sel_getName("secureElement:transceive:toOS:allowInVirtual:error:");
        __int16 v100 = 1024;
        int v101 = 284;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Transceive failed", buf, 0x22u);
      }

      NFDataRelease();
      if (a6)
      {
        ErrorCode = (void *)NFDriverCreateErrorCode();
        id v87 = objc_alloc((Class)NSError);
        uint64_t v79 = +[NSString stringWithUTF8String:"nfcd"];
        id v80 = [ErrorCode code];
        v90[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)[ErrorCode code] > 70) {
          uint64_t v81 = 71;
        }
        else {
          uint64_t v81 = (uint64_t)[ErrorCode code];
        }
        unsigned __int16 v82 = +[NSString stringWithUTF8String:off_100301390[v81]];
        v91[0] = v82;
        v91[1] = ErrorCode;
        v90[1] = NSUnderlyingErrorKey;
        v90[2] = @"Line";
        v91[2] = &off_100319DC8;
        v90[3] = @"Method";
        id v83 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:")];
        v91[3] = v83;
        v90[4] = NSDebugDescriptionErrorKey;
        id v84 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 295];
        v91[4] = v84;
        unsigned int v85 = +[NSDictionary dictionaryWithObjects:v91 forKeys:v90 count:5];
        *a6 = [v87 initWithDomain:v79 code:v80 userInfo:v85];
      }
      goto LABEL_43;
    }
    NFDataRelease();
    Ownership = (void *)NFDataToCFDataCreateOwnership();
    NFDataRelease();
    if (a6)
    {
      if (!Ownership)
      {
        id v72 = objc_alloc((Class)NSError);
        __int16 v73 = +[NSString stringWithUTF8String:"nfcd"];
        v88[0] = NSLocalizedDescriptionKey;
        __int16 v74 = +[NSString stringWithUTF8String:"No resources"];
        v89[0] = v74;
        v89[1] = &off_100319DE0;
        v88[1] = @"Line";
        v88[2] = @"Method";
        id v75 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:")];
        v89[2] = v75;
        v88[3] = NSDebugDescriptionErrorKey;
        id v76 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("secureElement:transceive:toOS:allowInVirtual:error:"), 306];
        v89[3] = v76;
        uint64_t v77 = +[NSDictionary dictionaryWithObjects:v89 forKeys:v88 count:4];
        id v78 = [v72 initWithDomain:v73 code:34 userInfo:v77];
        *a6 = v78;

LABEL_43:
        Ownership = 0;
        goto LABEL_44;
      }
      *a6 = 0;
    }
LABEL_44:
    objc_sync_exit(v10);

    goto LABEL_45;
  }
  Ownership = 0;
LABEL_45:

  return Ownership;
}

void sub_10002BFC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002C020(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  id v4 = a1;
  objc_sync_enter(v4);
  if (!v4[137])
  {
    uint64_t OSUpdateLog = NFDriverGetOSUpdateLog();
    uint64_t v13 = OSUpdateLog;
    if (!a3 || OSUpdateLog) {
      goto LABEL_10;
    }
    id v14 = objc_alloc((Class)NSError);
    id v6 = +[NSString stringWithUTF8String:"nfcd"];
    v16[0] = NSLocalizedDescriptionKey;
    char v7 = +[NSString stringWithUTF8String:"Stack Error"];
    v17[0] = v7;
    v17[1] = &off_100319E10;
    v16[1] = @"Line";
    void v16[2] = @"Method";
    id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getOSUpdateLogFromSecureElement:error:")];
    v17[2] = v8;
    v16[3] = NSDebugDescriptionErrorKey;
    id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getOSUpdateLogFromSecureElement:error:"), 322];
    v17[3] = v9;
    id v10 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:4];
    id v11 = [v14 initWithDomain:v6 code:15 userInfo:v10];
    goto LABEL_8;
  }
  if (a3)
  {
    id v5 = objc_alloc((Class)NSError);
    id v6 = +[NSString stringWithUTF8String:"nfcd"];
    v18[0] = NSLocalizedDescriptionKey;
    char v7 = +[NSString stringWithUTF8String:"Invalid State"];
    v19[0] = v7;
    v19[1] = &off_100319DF8;
    v18[1] = @"Line";
    void v18[2] = @"Method";
    id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getOSUpdateLogFromSecureElement:error:")];
    void v19[2] = v8;
    v18[3] = NSDebugDescriptionErrorKey;
    id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getOSUpdateLogFromSecureElement:error:"), 316];
    v19[3] = v9;
    id v10 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:4];
    id v11 = [v5 initWithDomain:v6 code:12 userInfo:v10];
LABEL_8:
    *a3 = v11;
  }
  uint64_t v13 = 0;
LABEL_10:
  objc_sync_exit(v4);

  return v13;
}

void sub_10002C340(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10002C360(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    id v5 = objc_opt_new();
    id v6 = a1;
    objc_sync_enter(v6);
    if (v6[137])
    {
      if (a4)
      {
        id v7 = objc_alloc((Class)NSError);
        id v8 = +[NSString stringWithUTF8String:"nfcd"];
        v24[0] = NSLocalizedDescriptionKey;
        id v9 = +[NSString stringWithUTF8String:"Invalid State"];
        v25[0] = v9;
        v25[1] = &off_100319E28;
        v24[1] = @"Line";
        v24[2] = @"Method";
        id v10 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAttackCounterLogFromSecureElement:asBinary:error:")];
        v25[2] = v10;
        v24[3] = NSDebugDescriptionErrorKey;
        id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", @"getAttackCounterLogFromSecureElement:asBinary:error:", 339];
        v25[3] = v11;
        uint64_t v12 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:4];
        *a4 = [v7 initWithDomain:v8 code:12 userInfo:v12];
      }
      id v13 = 0;
    }
    else
    {
      if (NFDriverSecureElementGetAttackCounterLog())
      {
        objc_sync_exit(v6);

        free(0);
        if (a4) {
          *a4 = 0;
        }
        id v13 = v5;
        goto LABEL_14;
      }
      if (a4)
      {
        id v14 = objc_alloc((Class)NSError);
        id v15 = +[NSString stringWithUTF8String:"nfcd"];
        v22[0] = NSLocalizedDescriptionKey;
        int v16 = +[NSString stringWithUTF8String:"Stack Error"];
        v23[0] = v16;
        v23[1] = &off_100319E40;
        v22[1] = @"Line";
        v22[2] = @"Method";
        id v17 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAttackCounterLogFromSecureElement:asBinary:error:")];
        v23[2] = v17;
        v22[3] = NSDebugDescriptionErrorKey;
        id v18 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAttackCounterLogFromSecureElement:asBinary:error:"), 344];
        v23[3] = v18;
        __int16 v19 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:4];
        *a4 = [v14 initWithDomain:v15 code:15 userInfo:v19];
      }
      id v13 = v5;
    }
    objc_sync_exit(v6);

LABEL_14:
    goto LABEL_15;
  }
  id v13 = 0;
LABEL_15:

  return v13;
}

void sub_10002C810(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002C82C(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  objc_sync_enter(v1);
  if (v1[137]) {
    uint64_t PresenceOfAttackLog = 0;
  }
  else {
    uint64_t PresenceOfAttackLog = NFDriverSecureElementGetPresenceOfAttackLog();
  }
  objc_sync_exit(v1);

  return PresenceOfAttackLog;
}

void sub_10002C8A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002C8B8(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  objc_sync_enter(v1);
  if (v1[137]) {
    uint64_t UnlockRequestInfo = 0;
  }
  else {
    uint64_t UnlockRequestInfo = NFDriverGetUnlockRequestInfo();
  }
  objc_sync_exit(v1);

  return UnlockRequestInfo;
}

void sub_10002C920(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10002C934(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    if (v1[137])
    {
      id v2 = objc_alloc((Class)NSError);
      id v3 = +[NSString stringWithUTF8String:"nfcd"];
      v16[0] = NSLocalizedDescriptionKey;
      id v4 = +[NSString stringWithUTF8String:"Invalid State"];
      v17[0] = v4;
      v17[1] = &off_100319E58;
      v16[1] = @"Line";
      void v16[2] = @"Method";
      id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getReaderProhibitTimerInfo:")];
      v17[2] = v5;
      v16[3] = NSDebugDescriptionErrorKey;
      id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getReaderProhibitTimerInfo:"), 392];
      v17[3] = v6;
      id v7 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:4];
      id v8 = [v2 initWithDomain:v3 code:12 userInfo:v7];
    }
    else
    {
      unsigned int ReaderProhibitTimer = NFDriverGetReaderProhibitTimer();
      if (!ReaderProhibitTimer)
      {
        uint64_t v12 = 0;
        goto LABEL_10;
      }
      id v10 = objc_alloc((Class)NSError);
      id v3 = +[NSString stringWithUTF8String:"nfcd"];
      v14[0] = NSLocalizedDescriptionKey;
      if (ReaderProhibitTimer >= 0x47) {
        int v11 = 71;
      }
      else {
        int v11 = ReaderProhibitTimer;
      }
      id v4 = +[NSString stringWithUTF8String:off_100301390[v11]];
      v15[0] = v4;
      v15[1] = &off_100319E70;
      v14[1] = @"Line";
      v14[2] = @"Method";
      id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getReaderProhibitTimerInfo:")];
      v15[2] = v5;
      v14[3] = NSDebugDescriptionErrorKey;
      id v6 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getReaderProhibitTimerInfo:"), 397];
      v15[3] = v6;
      id v7 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];
      id v8 = [v10 initWithDomain:v3 code:ReaderProhibitTimer userInfo:v7];
    }
    uint64_t v12 = v8;

LABEL_10:
    objc_sync_exit(v1);

    goto LABEL_11;
  }
  uint64_t v12 = 0;
LABEL_11:

  return v12;
}

void sub_10002CC68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10002CC88(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)qword_100347730;
    if (!qword_100347730)
    {
      id v5 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.nfcd.hwmanager"];
      id v6 = (void *)qword_100347730;
      qword_100347730 = (uint64_t)v5;

      [(id)qword_100347730 setDelegate:a1];
      id v4 = (void *)qword_100347730;
      if (v3)
      {
        [(id)qword_100347730 _setQueue:v3];
        id v4 = (void *)qword_100347730;
      }
    }
    a1 = v4;
  }

  return a1;
}

id sub_10002CD2C(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)qword_100347738;
    if (!qword_100347738)
    {
      id v5 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.nfcd.service.corenfc"];
      id v6 = (void *)qword_100347738;
      qword_100347738 = (uint64_t)v5;

      [(id)qword_100347738 setDelegate:a1];
      id v4 = (void *)qword_100347738;
      if (v3)
      {
        [(id)qword_100347738 _setQueue:v3];
        id v4 = (void *)qword_100347738;
      }
    }
    a1 = v4;
  }

  return a1;
}

void sub_10002CDD0(uint64_t a1)
{
}

void sub_10002CDD8(uint64_t a1)
{
  id v2 = _os_activity_create((void *)&_mh_execute_header, "_NFHardwareManger xpcInvalidated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  sub_1000F37AC(*(uint64_t **)(a1 + 32), *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_10002CE4C(uint64_t a1)
{
  id v2 = _os_activity_create((void *)&_mh_execute_header, "_NFHardwareManger xpcInterrupted", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  v3.opaque[0] = 0;
  v3.opaque[1] = 0;
  os_activity_scope_enter(v2, &v3);
  os_activity_scope_leave(&v3);

  sub_1000F37AC(*(uint64_t **)(a1 + 32), *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

id sub_10002FF54(id *a1)
{
  id v2 = @"A000000704C0000000000002";
  self;
  os_activity_scope_state_s v3 = [NFTrustDBApplet alloc];
  id v4 = v3;
  if (v3)
  {
    [(NFTrustDBApplet *)v3 setInstanceAID:@"A000000704C0000000000002"];
    id v5 = +[NSMutableArray arrayWithCapacity:2];
    id v6 = [KeyInSlot alloc];
    [v5 addObject:v6];

    id v7 = [KeyInSlot alloc];
    [v5 addObject:v7];

    [(NFTrustDBApplet *)v4 setMap:v5];
  }

  id v8 = v4;
  if (!a1[1])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v24 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("addApplet:");
      uint64_t v28 = 45;
      if (isMetaClass) {
        uint64_t v28 = 43;
      }
      v24(3, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", v28, ClassName, Name, 281);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      id v30 = object_getClass(a1);
      if (class_isMetaClass(v30)) {
        int v31 = 43;
      }
      else {
        int v31 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v70 = v31;
      __int16 v71 = 2082;
      id v72 = object_getClassName(a1);
      __int16 v73 = 2082;
      __int16 v74 = sel_getName("addApplet:");
      __int16 v75 = 1024;
      int v76 = 281;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", buf, 0x22u);
    }

    uint64_t v32 = sub_100140A54();
    goto LABEL_36;
  }
  if (!v4)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v33 = NFLogGetLogger();
    if (v33)
    {
      int v34 = (void (*)(uint64_t, const char *, ...))v33;
      __int16 v35 = object_getClass(a1);
      BOOL v36 = class_isMetaClass(v35);
      __int16 v37 = object_getClassName(a1);
      int v66 = sel_getName("addApplet:");
      uint64_t v38 = 45;
      if (v36) {
        uint64_t v38 = 43;
      }
      v34(3, "%c[%{public}s %{public}s]:%i Can not add nil object to NFTrust DB", v38, v37, v66, 286);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v39 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v40 = object_getClass(a1);
      if (class_isMetaClass(v40)) {
        int v41 = 43;
      }
      else {
        int v41 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v70 = v41;
      __int16 v71 = 2082;
      id v72 = object_getClassName(a1);
      __int16 v73 = 2082;
      __int16 v74 = sel_getName("addApplet:");
      __int16 v75 = 1024;
      int v76 = 286;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not add nil object to NFTrust DB", buf, 0x22u);
    }

    uint64_t v32 = sub_100140F40(@"Can not add nil object to NFTrust DB");
LABEL_36:
    id v22 = (id)v32;
    goto LABEL_44;
  }
  id v9 = (objc_class *)objc_opt_class();
  id v68 = 0;
  id v10 = sub_1000319B8(a1, v9, &v68);
  id v11 = v68;
  if (v11)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFLogGetLogger();
    if (v12)
    {
      id v13 = (void (*)(uint64_t, const char *, ...))v12;
      id v14 = object_getClass(a1);
      BOOL v15 = class_isMetaClass(v14);
      v63 = object_getClassName(a1);
      id v64 = sel_getName("addApplet:");
      uint64_t v16 = 45;
      if (v15) {
        uint64_t v16 = 43;
      }
      v13(3, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBApplet in DataBase : %{public}@", v16, v63, v64, 295, v11);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = object_getClass(a1);
      if (class_isMetaClass(v18)) {
        int v19 = 43;
      }
      else {
        int v19 = 45;
      }
      uint64_t v20 = object_getClassName(a1);
      uint64_t v21 = sel_getName("addApplet:");
      *(_DWORD *)buf = 67110146;
      int v70 = v19;
      __int16 v71 = 2082;
      id v72 = v20;
      __int16 v73 = 2082;
      __int16 v74 = v21;
      __int16 v75 = 1024;
      int v76 = 295;
      __int16 v77 = 2114;
      id v78 = v11;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBApplet in DataBase : %{public}@", buf, 0x2Cu);
    }

    id v22 = v11;
  }
  else
  {
    if (!v10)
    {
      id v10 = objc_opt_new();
      id v42 = a1[1];
      id v43 = (objc_class *)objc_opt_class();
      uint64_t v44 = NSStringFromClass(v43);
      [v42 setValue:v10 forKey:v44];
    }
    id v45 = [(NFTrustDBApplet *)v8 instanceAID];
    id v46 = [v10 objectForKeyedSubscript:v45];

    if (v46)
    {
      id v47 = objc_alloc((Class)NSString);
      CFRange v48 = [(NFTrustDBApplet *)v8 instanceAID];
      id v49 = [v47 initWithFormat:@"Could not add NFTrustDBApplet with identifier %@, object already exists", v48];
      sub_100140860(v49);
      id v22 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      CFRange v48 = [(NFTrustDBApplet *)v8 instanceAID];
      [v10 setObject:v8 forKey:v48];
      id v22 = 0;
    }
  }
LABEL_44:

  if (v22)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v50 = NFLogGetLogger();
    if (v50)
    {
      uint64_t v51 = (void (*)(uint64_t, const char *, ...))v50;
      int v52 = object_getClass(a1);
      BOOL v53 = class_isMetaClass(v52);
      id v54 = object_getClassName(a1);
      BOOL v67 = sel_getName("addNFTrustApplet");
      uint64_t v55 = 45;
      if (v53) {
        uint64_t v55 = 43;
      }
      v51(3, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB", v55, v54, v67, 62);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v56 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      id v57 = object_getClass(a1);
      if (class_isMetaClass(v57)) {
        int v58 = 43;
      }
      else {
        int v58 = 45;
      }
      __int16 v59 = object_getClassName(a1);
      id v60 = sel_getName("addNFTrustApplet");
      *(_DWORD *)buf = 67109890;
      int v70 = v58;
      __int16 v71 = 2082;
      id v72 = v59;
      __int16 v73 = 2082;
      __int16 v74 = v60;
      __int16 v75 = 1024;
      int v76 = 62;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB", buf, 0x22u);
    }

    id v61 = v22;
  }

  return v22;
}

void sub_100030690(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (!v3
      || ([v3 moduleIdentifier],
          id v5 = objc_claimAutoreleasedReturnValue(),
          unsigned int v6 = [&off_100322670 containsObject:v5],
          v5,
          v6))
    {
      id v7 = +[NSDistributedNotificationCenter defaultCenter];
      [v7 postNotificationName:@"com.apple.stockholm.se.mfd" object:0 userInfo:0];

      notify_post("com.apple.stockholm.se.mfd");
    }
    id v8 = [v4 identifier];
    if (!v8)
    {
      sub_100032B20((id *)a1);

LABEL_33:
      goto LABEL_34;
    }
    id v179 = 0;
    id v9 = sub_100031640((id *)a1, v8, &v179);
    id v10 = v179;
    id v11 = v10;
    if (v9)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v13 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("markApplicationForDelete:");
        uint64_t v17 = 45;
        if (isMetaClass) {
          uint64_t v17 = 43;
        }
        v13(3, "%c[%{public}s %{public}s]:%i Could not find PurpleTrust instance with AID %{public}@ in DB : %{public}@", v17, ClassName, Name, 92, v8, v9);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v18 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v19 = object_getClass((id)a1);
        uint64_t v20 = v9;
        if (class_isMetaClass(v19)) {
          int v21 = 43;
        }
        else {
          int v21 = 45;
        }
        id v22 = object_getClassName((id)a1);
        __int16 v23 = sel_getName("markApplicationForDelete:");
        *(_DWORD *)buf = 67110402;
        int v182 = v21;
        id v9 = v20;
        __int16 v183 = 2082;
        uint64_t v184 = v22;
        __int16 v185 = 2082;
        int v186 = v23;
        __int16 v187 = 1024;
        int v188 = 92;
        __int16 v189 = 2114;
        __int16 v190 = v8;
        __int16 v191 = 2114;
        id v192 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not find PurpleTrust instance with AID %{public}@ in DB : %{public}@", buf, 0x36u);
      }
      goto LABEL_30;
    }
    if (!v10)
    {
LABEL_32:

      goto LABEL_33;
    }
    id v24 = (objc_class *)objc_opt_class();
    id v178 = 0;
    int v25 = sub_1000319B8((void *)a1, v24, &v178);
    id v18 = v178;
    id v9 = [v25 allValues];

    v173 = v9;
    if (v18)
    {
      v172 = v4;
      id v26 = v11;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v27 = NFLogGetLogger();
      if (v27)
      {
        uint64_t v28 = (void (*)(uint64_t, const char *, ...))v27;
        id v29 = object_getClass((id)a1);
        BOOL v30 = class_isMetaClass(v29);
        int v31 = v8;
        uint64_t v32 = object_getClassName((id)a1);
        uint64_t v33 = sel_getName("markApplicationForDelete:");
        int v34 = [v26 instanceAID];
        uint64_t v35 = 45;
        if (v30) {
          uint64_t v35 = 43;
        }
        id v156 = v32;
        id v8 = v31;
        id v9 = v173;
        v28(3, "%c[%{public}s %{public}s]:%i Could not get PurpleTrust keys of instance '%{public}@' : %{public}@", v35, v156, v33, 104, v34, v18);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v36 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        __int16 v37 = object_getClass((id)a1);
        if (class_isMetaClass(v37)) {
          int v38 = 43;
        }
        else {
          int v38 = 45;
        }
        __int16 v39 = object_getClassName((id)a1);
        int v40 = sel_getName("markApplicationForDelete:");
        int v41 = [v26 instanceAID];
        *(_DWORD *)buf = 67110402;
        int v182 = v38;
        id v9 = v173;
        __int16 v183 = 2082;
        uint64_t v184 = v39;
        __int16 v185 = 2082;
        int v186 = v40;
        __int16 v187 = 1024;
        int v188 = 104;
        __int16 v189 = 2114;
        __int16 v190 = v41;
        __int16 v191 = 2114;
        id v192 = v18;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not get PurpleTrust keys of instance '%{public}@' : %{public}@", buf, 0x36u);
      }
      id v11 = v26;
LABEL_29:
      id v4 = v172;
      goto LABEL_30;
    }
    if (v9)
    {
      id v169 = v8;
      v172 = v4;
      long long v176 = 0u;
      long long v177 = 0u;
      long long v174 = 0u;
      long long v175 = 0u;
      id v42 = v9;
      id v43 = [v42 countByEnumeratingWithState:&v174 objects:v180 count:16];
      if (v43)
      {
        id v44 = v43;
        uint64_t v45 = *(void *)v175;
        while (2)
        {
          for (uint64_t i = 0; i != v44; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v175 != v45) {
              objc_enumerationMutation(v42);
            }
            id v47 = *(void **)(*((void *)&v174 + 1) + 8 * i);
            CFRange v48 = [v47 instanceAID];
            id v49 = v11;
            uint64_t v50 = [v11 instanceAID];
            unsigned int v51 = [v48 isEqualToString:v50];

            if (v51)
            {
              uint64_t v52 = sub_100031D24((void *)a1, v47);
              if (v52)
              {
                id v18 = v52;
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v63 = NFLogGetLogger();
                if (v63)
                {
                  id v64 = (void (*)(uint64_t, const char *, ...))v63;
                  uint64_t v65 = object_getClass((id)a1);
                  if (class_isMetaClass(v65)) {
                    uint64_t v66 = 43;
                  }
                  else {
                    uint64_t v66 = 45;
                  }
                  BOOL v67 = object_getClassName((id)a1);
                  id v68 = sel_getName("markApplicationForDelete:");
                  if (v47) {
                    uint64_t v69 = v47[1];
                  }
                  else {
                    uint64_t v69 = 0;
                  }
                  v64(3, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust Key '%{public}@' from DB : %{public}@", v66, v67, v68, 116, v69, v18);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                int v70 = NFSharedLogGetLogger();
                id v8 = v169;
                if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                {
                  __int16 v71 = object_getClass((id)a1);
                  if (class_isMetaClass(v71)) {
                    int v72 = 43;
                  }
                  else {
                    int v72 = 45;
                  }
                  __int16 v73 = object_getClassName((id)a1);
                  __int16 v74 = sel_getName("markApplicationForDelete:");
                  if (v47) {
                    __int16 v75 = (void *)v47[1];
                  }
                  else {
                    __int16 v75 = 0;
                  }
                  *(_DWORD *)buf = 67110402;
                  int v182 = v72;
                  __int16 v183 = 2082;
                  uint64_t v184 = v73;
                  __int16 v185 = 2082;
                  int v186 = v74;
                  __int16 v187 = 1024;
                  int v188 = 116;
                  __int16 v189 = 2114;
                  __int16 v190 = v75;
                  __int16 v191 = 2114;
                  id v192 = v18;
                  id v76 = v75;
                  _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust Key '%{public}@' from DB : %{public}@", buf, 0x36u);
                }
                id v9 = v42;
                id v11 = v49;
                goto LABEL_29;
              }
            }
            id v11 = v49;
          }
          id v44 = [v42 countByEnumeratingWithState:&v174 objects:v180 count:16];
          if (v44) {
            continue;
          }
          break;
        }
      }

      id v8 = v169;
      id v4 = v172;
      id v9 = v173;
    }
    id v53 = v11;
    id v54 = *(void **)(a1 + 8);
    if (v54)
    {
      uint64_t v55 = v11;
      id v56 = v54;
      id v57 = (objc_class *)objc_opt_class();
      int v58 = NSStringFromClass(v57);
      __int16 v59 = [v56 valueForKey:v58];

      if (v59)
      {
        id v60 = [v53 instanceAID];
        id v61 = [v59 valueForKey:v60];

        if (v61)
        {
          uint64_t v62 = [v53 instanceAID];
          [v59 removeObjectForKey:v62];

          id v18 = 0;
        }
        else
        {
          v171 = v8;
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v101 = NFLogGetLogger();
          if (v101)
          {
            __int16 v102 = (void (*)(uint64_t, const char *, ...))v101;
            id v103 = object_getClass((id)a1);
            BOOL v167 = class_isMetaClass(v103);
            v168 = object_getClassName((id)a1);
            int v104 = sel_getName("removeApplet:");
            v105 = [v53 instanceAID];
            uint64_t v106 = 45;
            if (v167) {
              uint64_t v106 = 43;
            }
            v102(3, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet with identifier %{public}@, object does not exists", v106, v168, v104, 339, v105);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          v107 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            int v108 = object_getClass((id)a1);
            if (class_isMetaClass(v108)) {
              int v109 = 43;
            }
            else {
              int v109 = 45;
            }
            v110 = object_getClassName((id)a1);
            id v111 = sel_getName("removeApplet:");
            BOOL v112 = [v53 instanceAID];
            *(_DWORD *)buf = 67110146;
            int v182 = v109;
            id v9 = v173;
            __int16 v183 = 2082;
            uint64_t v184 = v110;
            __int16 v185 = 2082;
            int v186 = v111;
            __int16 v187 = 1024;
            int v188 = 339;
            __int16 v189 = 2114;
            __int16 v190 = v112;
            _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet with identifier %{public}@, object does not exists", buf, 0x2Cu);
          }
          id v113 = objc_alloc((Class)NSString);
          uint64_t v114 = [v53 instanceAID];
          id v115 = [v113 initWithFormat:@"Could not remove NFTrustDBApplet with identifier %@, object does not exists", v114];
          id v18 = sub_100140860(v115);

          id v8 = v171;
        }
        id v11 = v55;
      }
      else
      {
        v170 = v8;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v90 = NFLogGetLogger();
        if (v90)
        {
          unsigned int v91 = (void (*)(uint64_t, const char *, ...))v90;
          unsigned int v92 = object_getClass((id)a1);
          BOOL v93 = class_isMetaClass(v92);
          unsigned __int16 v94 = object_getClassName((id)a1);
          uint64_t v163 = sel_getName("removeApplet:");
          uint64_t v95 = 45;
          if (v93) {
            uint64_t v95 = 43;
          }
          v91(3, "%c[%{public}s %{public}s]:%i Trying to remove a NFTrustDBApplet that does not exists", v95, v94, v163, 334);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v96 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          unsigned __int16 v97 = object_getClass((id)a1);
          if (class_isMetaClass(v97)) {
            int v98 = 43;
          }
          else {
            int v98 = 45;
          }
          unsigned __int8 v99 = object_getClassName((id)a1);
          __int16 v100 = sel_getName("removeApplet:");
          *(_DWORD *)buf = 67109890;
          int v182 = v98;
          __int16 v183 = 2082;
          uint64_t v184 = v99;
          __int16 v185 = 2082;
          int v186 = v100;
          __int16 v187 = 1024;
          int v188 = 334;
          _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Trying to remove a NFTrustDBApplet that does not exists", buf, 0x22u);
        }

        id v18 = sub_100140860(@"Trying to remove a NFTrustDBApplet that does not exists");
        id v8 = v170;
        id v11 = v55;
        id v9 = v173;
      }
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v77 = NFLogGetLogger();
      if (v77)
      {
        id v78 = (void (*)(uint64_t, const char *, ...))v77;
        uint64_t v79 = object_getClass((id)a1);
        BOOL v80 = class_isMetaClass(v79);
        uint64_t v81 = v4;
        unsigned __int16 v82 = v11;
        id v83 = object_getClassName((id)a1);
        long long v162 = sel_getName("removeApplet:");
        uint64_t v84 = 45;
        if (v80) {
          uint64_t v84 = 43;
        }
        uint64_t v157 = v83;
        id v11 = v82;
        id v4 = v81;
        v78(3, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet from NFTrustDataBase, failed to connect to database", v84, v157, v162, 321);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      unsigned int v85 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        unsigned int v86 = object_getClass((id)a1);
        if (class_isMetaClass(v86)) {
          int v87 = 43;
        }
        else {
          int v87 = 45;
        }
        unsigned int v88 = object_getClassName((id)a1);
        unsigned int v89 = sel_getName("removeApplet:");
        *(_DWORD *)buf = 67109890;
        int v182 = v87;
        __int16 v183 = 2082;
        uint64_t v184 = v88;
        __int16 v185 = 2082;
        int v186 = v89;
        __int16 v187 = 1024;
        int v188 = 321;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not remove NFTrustDBApplet from NFTrustDataBase, failed to connect to database", buf, 0x22u);
      }

      id v18 = sub_100140A54();
      id v9 = v173;
    }

    if (v18)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v116 = NFLogGetLogger();
      if (v116)
      {
        int v117 = (void (*)(uint64_t, const char *, ...))v116;
        id v118 = object_getClass((id)a1);
        BOOL v119 = class_isMetaClass(v118);
        id v120 = v4;
        uint64_t v121 = v11;
        v122 = object_getClassName((id)a1);
        long long v164 = sel_getName("markApplicationForDelete:");
        uint64_t v123 = 45;
        if (v119) {
          uint64_t v123 = 43;
        }
        uint64_t v158 = v122;
        id v11 = v121;
        id v4 = v120;
        id v9 = v173;
        v117(3, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust instance with AID %{public}@ from DB : %{public}@", v123, v158, v164, 123, v8, v18);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v124 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        v125 = object_getClass((id)a1);
        if (class_isMetaClass(v125)) {
          int v126 = 43;
        }
        else {
          int v126 = 45;
        }
        v127 = object_getClassName((id)a1);
        uint64_t v128 = sel_getName("markApplicationForDelete:");
        *(_DWORD *)buf = 67110402;
        int v182 = v126;
        id v9 = v173;
        __int16 v183 = 2082;
        uint64_t v184 = v127;
        __int16 v185 = 2082;
        int v186 = v128;
        __int16 v187 = 1024;
        int v188 = 123;
        __int16 v189 = 2114;
        __int16 v190 = v8;
        __int16 v191 = 2114;
        id v192 = v18;
        _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not delete PurpleTrust instance with AID %{public}@ from DB : %{public}@", buf, 0x36u);
      }

      goto LABEL_30;
    }
    int v129 = sub_10002FF54((id *)a1);

    if (v129)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v130 = NFLogGetLogger();
      if (v130)
      {
        id v131 = (void (*)(uint64_t, const char *, ...))v130;
        id v132 = object_getClass((id)a1);
        BOOL v133 = class_isMetaClass(v132);
        id v134 = v4;
        id v135 = v11;
        id v136 = object_getClassName((id)a1);
        long long v165 = sel_getName("markApplicationForDelete:");
        uint64_t v137 = 45;
        if (v133) {
          uint64_t v137 = 43;
        }
        id v159 = v136;
        id v11 = v135;
        id v4 = v134;
        v131(3, "%c[%{public}s %{public}s]:%i Could not addNFTrustApplet after MFD", v137, v159, v165, 128);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v18 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_129;
      }
      id v138 = object_getClass((id)a1);
      if (class_isMetaClass(v138)) {
        int v139 = 43;
      }
      else {
        int v139 = 45;
      }
      uint64_t v140 = object_getClassName((id)a1);
      uint64_t v141 = sel_getName("markApplicationForDelete:");
      *(_DWORD *)buf = 67109890;
      int v182 = v139;
      __int16 v183 = 2082;
      uint64_t v184 = v140;
      __int16 v185 = 2082;
      int v186 = v141;
      __int16 v187 = 1024;
      int v188 = 128;
      id v142 = "%c[%{public}s %{public}s]:%i Could not addNFTrustApplet after MFD";
    }
    else
    {
      BOOL v143 = sub_1000322DC(a1);

      if (!v143) {
        goto LABEL_31;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v144 = NFLogGetLogger();
      if (v144)
      {
        uint64_t v145 = (void (*)(uint64_t, const char *, ...))v144;
        id v146 = object_getClass((id)a1);
        BOOL v147 = class_isMetaClass(v146);
        int v148 = v4;
        v149 = v11;
        v150 = object_getClassName((id)a1);
        int v166 = sel_getName("markApplicationForDelete:");
        uint64_t v151 = 45;
        if (v147) {
          uint64_t v151 = 43;
        }
        long long v160 = v150;
        id v11 = v149;
        id v4 = v148;
        v145(3, "%c[%{public}s %{public}s]:%i Could not commit after MFD", v151, v160, v166, 133);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v18 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_129;
      }
      id v152 = object_getClass((id)a1);
      if (class_isMetaClass(v152)) {
        int v153 = 43;
      }
      else {
        int v153 = 45;
      }
      v154 = object_getClassName((id)a1);
      id v155 = sel_getName("markApplicationForDelete:");
      *(_DWORD *)buf = 67109890;
      int v182 = v153;
      __int16 v183 = 2082;
      uint64_t v184 = v154;
      __int16 v185 = 2082;
      int v186 = v155;
      __int16 v187 = 1024;
      int v188 = 133;
      id v142 = "%c[%{public}s %{public}s]:%i Could not commit after MFD";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v142, buf, 0x22u);
LABEL_129:
    id v9 = v173;
LABEL_30:

LABEL_31:
    goto LABEL_32;
  }
LABEL_34:
}

id *sub_100031640(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_28;
  }
  if (!a1[1])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getAppletWithIdentifier:object:");
      uint64_t v14 = 45;
      if (isMetaClass) {
        uint64_t v14 = 43;
      }
      v11(3, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBAppletWithIdentifier %{public}@, failed to connect to database", v14, ClassName, Name, 355, v5);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = object_getClass(a1);
      if (class_isMetaClass(v16)) {
        int v17 = 43;
      }
      else {
        int v17 = 45;
      }
      *(_DWORD *)buf = 67110146;
      int v33 = v17;
      __int16 v34 = 2082;
      uint64_t v35 = object_getClassName(a1);
      __int16 v36 = 2082;
      __int16 v37 = sel_getName("getAppletWithIdentifier:object:");
      __int16 v38 = 1024;
      int v39 = 355;
      __int16 v40 = 2114;
      id v41 = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBAppletWithIdentifier %{public}@, failed to connect to database", buf, 0x2Cu);
    }

    uint64_t v18 = sub_100140A54();
    goto LABEL_27;
  }
  if (!a3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v19 = NFLogGetLogger();
    if (v19)
    {
      uint64_t v20 = (void (*)(uint64_t, const char *, ...))v19;
      int v21 = object_getClass(a1);
      BOOL v22 = class_isMetaClass(v21);
      __int16 v23 = object_getClassName(a1);
      int v31 = sel_getName("getAppletWithIdentifier:object:");
      uint64_t v24 = 45;
      if (v22) {
        uint64_t v24 = 43;
      }
      v20(3, "%c[%{public}s %{public}s]:%i NFTrustDBApplet can not be nil", v24, v23, v31, 360);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      id v26 = object_getClass(a1);
      if (class_isMetaClass(v26)) {
        int v27 = 43;
      }
      else {
        int v27 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v33 = v27;
      __int16 v34 = 2082;
      uint64_t v35 = object_getClassName(a1);
      __int16 v36 = 2082;
      __int16 v37 = sel_getName("getAppletWithIdentifier:object:");
      __int16 v38 = 1024;
      int v39 = 360;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i NFTrustDBApplet can not be nil", buf, 0x22u);
    }

    uint64_t v18 = sub_100140860(&stru_100309C40);
LABEL_27:
    a1 = (id *)v18;
    goto LABEL_28;
  }
  *a3 = 0;
  id v6 = a1[1];
  id v7 = (objc_class *)objc_opt_class();
  id v8 = NSStringFromClass(v7);
  id v9 = [v6 valueForKey:v8];

  if (v9)
  {
    *a3 = [v9 valueForKey:v5];
  }

  a1 = 0;
LABEL_28:

  return a1;
}

id sub_1000319B8(void *a1, objc_class *a2, void *a3)
{
  if (!a1)
  {
LABEL_15:
    id v9 = 0;
    goto LABEL_26;
  }
  if (!a3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getDictionaryOfObjectOfType:error:");
      uint64_t v15 = 45;
      if (isMetaClass) {
        uint64_t v15 = 43;
      }
      v11(3, "%c[%{public}s %{public}s]:%i Error can not be nil", v15, ClassName, Name, 382);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = object_getClass(a1);
      if (class_isMetaClass(v17)) {
        int v18 = 43;
      }
      else {
        int v18 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v36 = v18;
      __int16 v37 = 2082;
      __int16 v38 = object_getClassName(a1);
      __int16 v39 = 2082;
      __int16 v40 = sel_getName("getDictionaryOfObjectOfType:error:");
      __int16 v41 = 1024;
      int v42 = 382;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error can not be nil", buf, 0x22u);
    }

    goto LABEL_15;
  }
  id v6 = (void *)a1[1];
  if (v6)
  {
    id v7 = v6;
    id v8 = NSStringFromClass(a2);
    id v9 = [v7 valueForKey:v8];
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v19 = NFLogGetLogger();
    if (v19)
    {
      uint64_t v20 = (void (*)(uint64_t, const char *, ...))v19;
      int v21 = object_getClass(a1);
      BOOL v22 = class_isMetaClass(v21);
      __int16 v23 = object_getClassName(a1);
      uint64_t v24 = sel_getName("getDictionaryOfObjectOfType:error:");
      int v25 = NSStringFromClass(a2);
      uint64_t v26 = 45;
      if (v22) {
        uint64_t v26 = 43;
      }
      v20(3, "%c[%{public}s %{public}s]:%i Could not getDictionaryOfObjectOfType %{public}@, failed to connect to database", v26, v23, v24, 387, v25);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = object_getClass(a1);
      if (class_isMetaClass(v28)) {
        int v29 = 43;
      }
      else {
        int v29 = 45;
      }
      BOOL v30 = object_getClassName(a1);
      int v31 = sel_getName("getDictionaryOfObjectOfType:error:");
      uint64_t v32 = NSStringFromClass(a2);
      *(_DWORD *)buf = 67110146;
      int v36 = v29;
      __int16 v37 = 2082;
      __int16 v38 = v30;
      __int16 v39 = 2082;
      __int16 v40 = v31;
      __int16 v41 = 1024;
      int v42 = 387;
      __int16 v43 = 2114;
      id v44 = v32;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not getDictionaryOfObjectOfType %{public}@, failed to connect to database", buf, 0x2Cu);
    }
    sub_100140A54();
    id v9 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_26:

  return v9;
}

id sub_100031D24(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
    id v18 = 0;
    goto LABEL_54;
  }
  if (!a1[1])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v20 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("removeKey:");
      uint64_t v24 = 45;
      if (isMetaClass) {
        uint64_t v24 = 43;
      }
      v20(3, "%c[%{public}s %{public}s]:%i Could not remove object to NFTrustDataBase, failed to connect to database", v24, ClassName, Name, 415);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = object_getClass(a1);
      if (class_isMetaClass(v26)) {
        int v27 = 43;
      }
      else {
        int v27 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v64 = v27;
      __int16 v65 = 2082;
      uint64_t v66 = object_getClassName(a1);
      __int16 v67 = 2082;
      id v68 = sel_getName("removeKey:");
      __int16 v69 = 1024;
      int v70 = 415;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not remove object to NFTrustDataBase, failed to connect to database", buf, 0x22u);
    }

    uint64_t v28 = sub_100140A54();
    goto LABEL_35;
  }
  if (!v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v29 = NFLogGetLogger();
    if (v29)
    {
      BOOL v30 = (void (*)(uint64_t, const char *, ...))v29;
      int v31 = object_getClass(a1);
      BOOL v32 = class_isMetaClass(v31);
      int v33 = object_getClassName(a1);
      uint64_t v55 = sel_getName("removeKey:");
      uint64_t v34 = 45;
      if (v32) {
        uint64_t v34 = 43;
      }
      v30(3, "%c[%{public}s %{public}s]:%i Can not remove nil NFTrustDBKey from DB", v34, v33, v55, 420);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v35 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v36 = object_getClass(a1);
      if (class_isMetaClass(v36)) {
        int v37 = 43;
      }
      else {
        int v37 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v64 = v37;
      __int16 v65 = 2082;
      uint64_t v66 = object_getClassName(a1);
      __int16 v67 = 2082;
      id v68 = sel_getName("removeKey:");
      __int16 v69 = 1024;
      int v70 = 420;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not remove nil NFTrustDBKey from DB", buf, 0x22u);
    }

    uint64_t v28 = sub_100140F40(@"Can not remove nil NFTrustDBKey from DB");
LABEL_35:
    id v18 = (id)v28;
    goto LABEL_54;
  }
  id v5 = (objc_class *)objc_opt_class();
  id v61 = 0;
  id v6 = sub_1000319B8(a1, v5, &v61);
  id v7 = v61;
  if (v7)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v8 = NFLogGetLogger();
    if (v8)
    {
      id v9 = (void (*)(uint64_t, const char *, ...))v8;
      id v10 = object_getClass(a1);
      BOOL v11 = class_isMetaClass(v10);
      uint64_t v52 = object_getClassName(a1);
      id v53 = sel_getName("removeKey:");
      uint64_t v12 = 45;
      if (v11) {
        uint64_t v12 = 43;
      }
      v9(3, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", v12, v52, v53, 429, v7);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = object_getClass(a1);
      if (class_isMetaClass(v14)) {
        int v15 = 43;
      }
      else {
        int v15 = 45;
      }
      uint64_t v16 = object_getClassName(a1);
      int v17 = sel_getName("removeKey:");
      *(_DWORD *)buf = 67110146;
      int v64 = v15;
      __int16 v65 = 2082;
      uint64_t v66 = v16;
      __int16 v67 = 2082;
      id v68 = v17;
      __int16 v69 = 1024;
      int v70 = 429;
      __int16 v71 = 2114;
      id v72 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", buf, 0x2Cu);
    }

    id v18 = v7;
  }
  else if (v6)
  {
    id v56 = v6;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id v38 = v6;
    id v39 = [v38 countByEnumeratingWithState:&v57 objects:v62 count:16];
    if (v39)
    {
      id v40 = v39;
      uint64_t v41 = *(void *)v58;
      do
      {
        int v42 = 0;
        do
        {
          if (*(void *)v58 != v41) {
            objc_enumerationMutation(v38);
          }
          uint64_t v43 = *(void *)(*((void *)&v57 + 1) + 8 * (void)v42);
          uint64_t v44 = [v38 objectForKeyedSubscript:v43];
          uint64_t v45 = (void *)v44;
          if (v44) {
            id v46 = *(void **)(v44 + 8);
          }
          else {
            id v46 = 0;
          }
          uint64_t v47 = v4[1];
          id v48 = v46;
          LODWORD(v47) = [v48 isEqualToString:v47];

          if (v47)
          {
            [v38 removeObjectForKey:v43];
            goto LABEL_51;
          }
          int v42 = (char *)v42 + 1;
        }
        while (v40 != v42);
        id v49 = [v38 countByEnumeratingWithState:&v57 objects:v62 count:16];
        id v40 = v49;
      }
      while (v49);
    }
LABEL_51:

    id v18 = 0;
    id v7 = 0;
    id v6 = v56;
  }
  else
  {
    id v50 = [objc_alloc((Class)NSString) initWithFormat:@"Could not remove NFTrustDBKey with identifier %@, object does not exists", v4[1]];
    sub_100140860(v50);
    id v18 = (id)objc_claimAutoreleasedReturnValue();
  }
LABEL_54:

  return v18;
}

id sub_1000322DC(uint64_t a1)
{
  if (!a1)
  {
LABEL_28:
    int v17 = 0;
    goto LABEL_29;
  }
  id v2 = *(void **)(a1 + 8);
  if (v2)
  {
    id v3 = v2;
    id v40 = 0;
    id v4 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v40];
    id v5 = v40;

    if (v5)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass((id)a1);
        if (class_isMetaClass(Class)) {
          uint64_t v8 = 43;
        }
        else {
          uint64_t v8 = 45;
        }
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("commit");
        Logger(3, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@", v8, ClassName, Name, 243, v5);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = object_getClass((id)a1);
        if (class_isMetaClass(v12)) {
          int v13 = 43;
        }
        else {
          int v13 = 45;
        }
        uint64_t v14 = object_getClassName((id)a1);
        int v15 = sel_getName("commit");
        *(_DWORD *)buf = 67110146;
        int v42 = v13;
        __int16 v43 = 2082;
        uint64_t v44 = v14;
        __int16 v45 = 2082;
        id v46 = v15;
        __int16 v47 = 1024;
        int v48 = 243;
        __int16 v49 = 2114;
        id v50 = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@", buf, 0x2Cu);
      }

      id v16 = v5;
LABEL_15:
      int v17 = v16;

      goto LABEL_29;
    }
    if (!v4)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29)
      {
        BOOL v30 = object_getClass((id)a1);
        if (class_isMetaClass(v30)) {
          uint64_t v31 = 43;
        }
        else {
          uint64_t v31 = 45;
        }
        BOOL v32 = object_getClassName((id)a1);
        int v33 = sel_getName("commit");
        v29(3, "%c[%{public}s %{public}s]:%i Archiving NFTrustDataBase resulted in nil data, do not commit", v31, v32, v33, 248);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v34 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = object_getClass((id)a1);
        if (class_isMetaClass(v35)) {
          int v36 = 43;
        }
        else {
          int v36 = 45;
        }
        int v37 = object_getClassName((id)a1);
        id v38 = sel_getName("commit");
        *(_DWORD *)buf = 67109890;
        int v42 = v36;
        __int16 v43 = 2082;
        uint64_t v44 = v37;
        __int16 v45 = 2082;
        id v46 = v38;
        __int16 v47 = 1024;
        int v48 = 248;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Archiving NFTrustDataBase resulted in nil data, do not commit", buf, 0x22u);
      }

      sub_100140A54();
      id v16 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_15;
    }
    id v27 = *(id *)(a1 + 16);
    [v27 setObject:v4 forKey:@"PurpleTrustData"];

    goto LABEL_28;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v18 = NFLogGetLogger();
  if (v18)
  {
    uint64_t v19 = (void (*)(uint64_t, const char *, ...))v18;
    uint64_t v20 = object_getClass((id)a1);
    BOOL isMetaClass = class_isMetaClass(v20);
    BOOL v22 = object_getClassName((id)a1);
    id v39 = sel_getName("commit");
    uint64_t v23 = 45;
    if (isMetaClass) {
      uint64_t v23 = 43;
    }
    v19(3, "%c[%{public}s %{public}s]:%i Could not commit NFTrustDataBase, database seems to be empty", v23, v22, v39, 234);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v24 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    int v25 = object_getClass((id)a1);
    if (class_isMetaClass(v25)) {
      int v26 = 43;
    }
    else {
      int v26 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v42 = v26;
    __int16 v43 = 2082;
    uint64_t v44 = object_getClassName((id)a1);
    __int16 v45 = 2082;
    id v46 = sel_getName("commit");
    __int16 v47 = 1024;
    int v48 = 234;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not commit NFTrustDataBase, database seems to be empty", buf, 0x22u);
  }

  int v17 = sub_100140A54();
LABEL_29:

  return v17;
}

void sub_100032760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int buf, int a16, long long a17, int a18, int a19, long long a20)
{
  if (a2 == 1)
  {
    id v22 = objc_begin_catch(exception_object);
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
    {
      Class Class = object_getClass(v21);
      class_isMetaClass(Class);
      object_getClassName(v21);
      sel_getName(v20);
      Logger(3, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@");
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v26 = object_getClass(v21);
      if (class_isMetaClass(v26)) {
        int v27 = 43;
      }
      else {
        int v27 = 45;
      }
      ClassName = object_getClassName(v21);
      Name = sel_getName(v20);
      buf = 67110146;
      a16 = v27;
      LOWORD(a17) = 2082;
      *(void *)((char *)&a17 + 2) = ClassName;
      WORD5(a17) = 2082;
      *(void *)((char *)&a17 + 12) = Name;
      LOWORD(a19) = 1024;
      *(int *)((char *)&a19 + 2) = 255;
      WORD1(a20) = 2114;
      *(void *)((char *)&a20 + 4) = v22;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while archiving NFTrustDataBase : %{public}@", (uint8_t *)&buf, 0x2Cu);
    }

    sub_100140A54();
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x1000325F4);
  }
  _Unwind_Resume(exception_object);
}

id *sub_100032904(id *a1)
{
  if (a1)
  {
    sub_100032B20(a1);
    a1 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100032934()
{
  self;
  if (qword_1003472C0 != -1) {
    dispatch_once(&qword_1003472C0, &stru_100301638);
  }
  unsigned __int8 v0 = (void *)qword_1003472C8;

  return v0;
}

void sub_10003298C(id a1)
{
  id v17 = objc_alloc((Class)NSSet);
  uint64_t v16 = objc_opt_class();
  uint64_t v15 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  id v11 = [v17 initWithObjects:v16, v15, v14, v13, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, objc_opt_class(), 0];
  uint64_t v12 = qword_1003472C8;
  qword_1003472C8 = (uint64_t)v11;

  _objc_release_x1(v11, v12);
}

id *sub_100032B20(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = objc_opt_new();
    id v3 = v1[1];
    v1[1] = (id)v2;

    uint64_t v4 = sub_10002FF54(v1);
    if (v4)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v6 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(v1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v1);
        Name = sel_getName("create");
        uint64_t v9 = 45;
        if (isMetaClass) {
          uint64_t v9 = 43;
        }
        v6(3, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB : %{public}@", v9, ClassName, Name, 269, v4);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = object_getClass(v1);
        if (class_isMetaClass(v11)) {
          int v12 = 43;
        }
        else {
          int v12 = 45;
        }
        *(_DWORD *)buf = 67110146;
        int v18 = v12;
        __int16 v19 = 2082;
        uint64_t v20 = object_getClassName(v1);
        __int16 v21 = 2082;
        id v22 = sel_getName("create");
        __int16 v23 = 1024;
        int v24 = 269;
        __int16 v25 = 2114;
        int v26 = v4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add NFTrustDBAppelt to DB : %{public}@", buf, 0x2Cu);
      }

      uint64_t v13 = v4;
    }
    else
    {
      uint64_t v13 = sub_1000322DC((uint64_t)v1);
    }
    uint64_t v1 = (id *)v13;
  }

  return v1;
}

id sub_100032D1C()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100032DC0;
  block[3] = &unk_1003010A8;
  void block[4] = self;
  if (qword_1003472D0 != -1) {
    dispatch_once(&qword_1003472D0, block);
  }
  unsigned __int8 v0 = (void *)qword_1003472D8;

  return v0;
}

void sub_100032DC0()
{
  self;
  unsigned __int8 v0 = [NFTrustDataBase alloc];
  if (v0)
  {
    uint64_t v1 = (NSUserDefaults *)[objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.stockholm"];
    userDefaults = v0->_userDefaults;
    v0->_userDefaults = v1;

    id v3 = v0->_userDefaults;
    uint64_t v4 = [(NSUserDefaults *)v3 dataForKey:@"PurpleTrustData"];

    if (v4 && [v4 length])
    {
      id v5 = objc_alloc((Class)NSMutableDictionary);
      uint64_t v6 = sub_100032934();
      v13[0] = 0;
      uint64_t v7 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v6 fromData:v4 error:v13];
      id v8 = v13[0];
      uint64_t v9 = (NSMutableDictionary *)[v5 initWithDictionary:v7];
      dictionary = v0->_dictionary;
      v0->_dictionary = v9;
    }
    else
    {
      id v11 = sub_100032B20((id *)&v0->super.isa);
    }
  }
  int v12 = (void *)qword_1003472D8;
  qword_1003472D8 = (uint64_t)v0;
}

id sub_1000330DC(void *a1)
{
  if (a1)
  {
    a1 = [a1 instanceAID];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_10003310C(void *a1, objc_class *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v9 = 0;
    uint64_t v6 = sub_1000319B8(a1, a2, &v9);
    id v7 = v9;
    if (v7)
    {
      v5[2](v5, 0, v7);
    }
    else
    {
      id v8 = [v6 allValues];
      ((void (**)(id, void *, id))v5)[2](v5, v8, 0);
    }
  }
}

id sub_1000331D0(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1)
  {
    id v20 = 0;
    goto LABEL_37;
  }
  if (!a1[1])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v22 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("addKey:");
      uint64_t v26 = 45;
      if (isMetaClass) {
        uint64_t v26 = 43;
      }
      v22(3, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", v26, ClassName, Name, 454);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = object_getClass(a1);
      if (class_isMetaClass(v28)) {
        int v29 = 43;
      }
      else {
        int v29 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v65 = v29;
      __int16 v66 = 2082;
      __int16 v67 = object_getClassName(a1);
      __int16 v68 = 2082;
      __int16 v69 = sel_getName("addKey:");
      __int16 v70 = 1024;
      int v71 = 454;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not add object to NFTrustDataBase, failed to connect to database", buf, 0x22u);
    }

    uint64_t v30 = sub_100140A54();
    goto LABEL_36;
  }
  if (!v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v31 = NFLogGetLogger();
    if (v31)
    {
      BOOL v32 = (void (*)(uint64_t, const char *, ...))v31;
      int v33 = object_getClass(a1);
      BOOL v34 = class_isMetaClass(v33);
      uint64_t v35 = object_getClassName(a1);
      long long v60 = sel_getName("addKey:");
      uint64_t v36 = 45;
      if (v34) {
        uint64_t v36 = 43;
      }
      v32(3, "%c[%{public}s %{public}s]:%i Can not add nil NFTrustDBKey to DB", v36, v35, v60, 459);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v37 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      id v38 = object_getClass(a1);
      if (class_isMetaClass(v38)) {
        int v39 = 43;
      }
      else {
        int v39 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v65 = v39;
      __int16 v66 = 2082;
      __int16 v67 = object_getClassName(a1);
      __int16 v68 = 2082;
      __int16 v69 = sel_getName("addKey:");
      __int16 v70 = 1024;
      int v71 = 459;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not add nil NFTrustDBKey to DB", buf, 0x22u);
    }

    uint64_t v30 = sub_100140F40(@"Can not add nil NFTrustDBKey to DB");
LABEL_36:
    id v20 = (id)v30;
    goto LABEL_37;
  }
  id v5 = (void *)v3[1];
  id v63 = 0;
  id v6 = v5;
  id v7 = sub_100033858(a1, v6, &v63);
  id v8 = v63;

  if (v7)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFLogGetLogger();
    if (v9)
    {
      uint64_t v10 = (void (*)(uint64_t, const char *, ...))v9;
      id v11 = object_getClass(a1);
      BOOL v12 = class_isMetaClass(v11);
      uint64_t v13 = object_getClassName(a1);
      long long v58 = sel_getName("addKey:");
      uint64_t v14 = 45;
      if (v12) {
        uint64_t v14 = 43;
      }
      v10(3, "%c[%{public}s %{public}s]:%i Can not add NFTrustDBKey to DB, could not check if key already exist", v14, v13, v58, 468);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = object_getClass(a1);
      if (class_isMetaClass(v16)) {
        int v17 = 43;
      }
      else {
        int v17 = 45;
      }
      int v18 = object_getClassName(a1);
      __int16 v19 = sel_getName("addKey:");
      *(_DWORD *)buf = 67109890;
      int v65 = v17;
      __int16 v66 = 2082;
      __int16 v67 = v18;
      __int16 v68 = 2082;
      __int16 v69 = v19;
      __int16 v70 = 1024;
      int v71 = 468;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can not add NFTrustDBKey to DB, could not check if key already exist", buf, 0x22u);
    }

    id v20 = v7;
LABEL_15:

    goto LABEL_37;
  }
  if (!v8)
  {
    int v42 = (objc_class *)objc_opt_class();
    id v62 = 0;
    sub_1000319B8(a1, v42, &v62);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    id v20 = v62;
    if (v20)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v43 = NFLogGetLogger();
      if (v43)
      {
        uint64_t v44 = (void (*)(uint64_t, const char *, ...))v43;
        __int16 v45 = object_getClass(a1);
        BOOL v46 = class_isMetaClass(v45);
        long long v57 = object_getClassName(a1);
        id v61 = sel_getName("addKey:");
        uint64_t v47 = 45;
        if (v46) {
          uint64_t v47 = 43;
        }
        v44(3, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", v47, v57, v61, 479, v20);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v48 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        __int16 v49 = object_getClass(a1);
        if (class_isMetaClass(v49)) {
          int v50 = 43;
        }
        else {
          int v50 = 45;
        }
        unsigned int v51 = object_getClassName(a1);
        uint64_t v52 = sel_getName("addKey:");
        *(_DWORD *)buf = 67110146;
        int v65 = v50;
        __int16 v66 = 2082;
        __int16 v67 = v51;
        __int16 v68 = 2082;
        __int16 v69 = v52;
        __int16 v70 = 1024;
        int v71 = 479;
        __int16 v72 = 2114;
        id v73 = v20;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while looking for objects of type NFTrustDBKey in DataBase : %{public}@", buf, 0x2Cu);
      }

      id v53 = v20;
    }
    else
    {
      if (!v8)
      {
        id v8 = (id)objc_opt_new();
        id v54 = a1[1];
        uint64_t v55 = (objc_class *)objc_opt_class();
        id v56 = NSStringFromClass(v55);
        [v54 setValue:v8 forKey:v56];
      }
      [v8 setObject:v4 forKey:v4[1]];
    }
    goto LABEL_15;
  }
  id v41 = [objc_alloc((Class)NSString) initWithFormat:@"Could not add NFTrustDBKey with identifier %@, object already exists", v4[1]];
  sub_100140860(v41);
  id v20 = (id)objc_claimAutoreleasedReturnValue();

LABEL_37:

  return v20;
}

id sub_100033858(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1)
  {
    id v10 = 0;
    goto LABEL_43;
  }
  if (!a1[1])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      BOOL v12 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getKeyWithIdentifier:object:");
      uint64_t v16 = 45;
      if (isMetaClass) {
        uint64_t v16 = 43;
      }
      v12(3, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBKeyWithIdentifier, failed to connect to database", v16, ClassName, Name, 503);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = object_getClass(a1);
      if (class_isMetaClass(v18)) {
        int v19 = 43;
      }
      else {
        int v19 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v51 = v19;
      __int16 v52 = 2082;
      id v53 = object_getClassName(a1);
      __int16 v54 = 2082;
      uint64_t v55 = sel_getName("getKeyWithIdentifier:object:");
      __int16 v56 = 1024;
      int v57 = 503;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not getNFTrustDBKeyWithIdentifier, failed to connect to database", buf, 0x22u);
    }

    uint64_t v20 = sub_100140A54();
    goto LABEL_26;
  }
  if (!a3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v21 = NFLogGetLogger();
    if (v21)
    {
      id v22 = (void (*)(uint64_t, const char *, ...))v21;
      __int16 v23 = object_getClass(a1);
      BOOL v24 = class_isMetaClass(v23);
      __int16 v25 = object_getClassName(a1);
      int v42 = sel_getName("getKeyWithIdentifier:object:");
      uint64_t v26 = 45;
      if (v24) {
        uint64_t v26 = 43;
      }
      v22(3, "%c[%{public}s %{public}s]:%i trustDBKey can not be nil", v26, v25, v42, 508);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = object_getClass(a1);
      if (class_isMetaClass(v28)) {
        int v29 = 43;
      }
      else {
        int v29 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v51 = v29;
      __int16 v52 = 2082;
      id v53 = object_getClassName(a1);
      __int16 v54 = 2082;
      uint64_t v55 = sel_getName("getKeyWithIdentifier:object:");
      __int16 v56 = 1024;
      int v57 = 508;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i trustDBKey can not be nil", buf, 0x22u);
    }

    uint64_t v20 = sub_100140860(&stru_100309C40);
LABEL_26:
    id v10 = (id)v20;
    goto LABEL_43;
  }
  *a3 = 0;
  id v6 = (objc_class *)objc_opt_class();
  id v48 = 0;
  id v7 = sub_1000319B8(a1, v6, &v48);
  id v8 = v48;
  uint64_t v9 = v8;
  if (v8)
  {
    id v10 = v8;
  }
  else if (v7)
  {
    uint64_t v43 = v7;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v30 = v7;
    id v31 = [v30 countByEnumeratingWithState:&v44 objects:v49 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v45;
      while (2)
      {
        for (uint64_t i = 0; i != v32; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v33) {
            objc_enumerationMutation(v30);
          }
          uint64_t v35 = *(void *)(*((void *)&v44 + 1) + 8 * i);
          uint64_t v36 = [v30 objectForKeyedSubscript:v35];
          int v37 = v36;
          if (v36) {
            uint64_t v36 = (void *)v36[1];
          }
          id v38 = v5;
          unsigned int v39 = [v36 isEqualToString:v5];

          if (v39)
          {
            *a3 = [v30 objectForKeyedSubscript:v35];

            id v10 = 0;
            id v5 = v38;
            goto LABEL_40;
          }
          id v5 = v38;
        }
        id v32 = [v30 countByEnumeratingWithState:&v44 objects:v49 count:16];
        if (v32) {
          continue;
        }
        break;
      }
    }

    id v10 = 0;
LABEL_40:
    uint64_t v9 = 0;
    id v7 = v43;
  }
  else
  {
    id v10 = 0;
  }

LABEL_43:

  return v10;
}

void sub_100033DD4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

id sub_100034120(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = &v25;
    uint64_t v27 = 0x2020000000;
    uint64_t v28 = -1;
    if (a2)
    {
      uint64_t v4 = [a1 map];
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100034438;
      v24[3] = &unk_100301660;
      void v24[4] = &v25;
      [v4 enumerateObjectsUsingBlock:v24];

      uint64_t v5 = v26[3];
      if (v5 != -1)
      {
        +[NSNumber numberWithUnsignedInteger:v5 + 1];
        id v2 = 0;
        *a2 = (id)objc_claimAutoreleasedReturnValue();
LABEL_18:
        _Block_object_dispose(&v25, 8);
        goto LABEL_19;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(v2);
        if (class_isMetaClass(Class)) {
          uint64_t v9 = 43;
        }
        else {
          uint64_t v9 = 45;
        }
        ClassName = object_getClassName(v2);
        Name = sel_getName("getSlot:");
        BOOL v12 = __error();
        uint64_t v13 = strerror(*v12);
        uint64_t v14 = __error();
        Logger(3, "%c[%{public}s %{public}s]:%i \"%s\" errno=%d Could not find available slot", v9, ClassName, Name, 738, v13, *v14);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = object_getClass(v2);
        if (class_isMetaClass(v16)) {
          int v17 = 43;
        }
        else {
          int v17 = 45;
        }
        int v18 = object_getClassName(v2);
        int v19 = sel_getName("getSlot:");
        uint64_t v20 = __error();
        uint64_t v21 = strerror(*v20);
        int v22 = *__error();
        *(_DWORD *)buf = 67110402;
        int v30 = v17;
        __int16 v31 = 2082;
        id v32 = v18;
        __int16 v33 = 2082;
        BOOL v34 = v19;
        __int16 v35 = 1024;
        int v36 = 738;
        __int16 v37 = 2080;
        id v38 = v21;
        __int16 v39 = 1024;
        int v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i \"%s\" errno=%d Could not find available slot", buf, 0x32u);
      }

      uint64_t v6 = sub_100140C34(@"create key, no availble slot");
    }
    else
    {
      uint64_t v6 = sub_100140F40(@"slot shall not be nil");
    }
    id v2 = (id)v6;
    goto LABEL_18;
  }
LABEL_19:

  return v2;
}

void sub_10003440C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100034438(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (!a2 || !*(void *)(a2 + 8))
  {
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
    *a4 = 1;
  }
  return result;
}

id sub_100034468(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!a1) {
    goto LABEL_14;
  }
  if (!v6)
  {
    uint64_t v15 = @"Could not pushKey with nil slot";
LABEL_8:
    a1 = sub_100140F40(v15);
    goto LABEL_14;
  }
  if (([v6 charValue] & 0x80000000) != 0)
  {
    uint64_t v15 = @"Could not pushKey with negative slot";
    goto LABEL_8;
  }
  id v8 = [a1 map];
  id v9 = [v8 count];
  unsigned int v10 = [v7 unsignedCharValue];

  if ((unint64_t)v9 >= v10)
  {
    uint64_t v16 = [a1 map];
    int v17 = [v16 objectAtIndex:[v7 unsignedCharValue] - 1];

    if (v5) {
      int v18 = (void *)v5[1];
    }
    else {
      int v18 = 0;
    }
    sub_100033DD4((uint64_t)v17, v18);
    if (v17) {
      v17[2] = 0;
    }

    a1 = 0;
  }
  else
  {
    id v11 = objc_alloc((Class)NSString);
    BOOL v12 = [a1 instanceAID];
    uint64_t v13 = [a1 map];
    id v14 = [v11 initWithFormat:@"Could pushKey in slot %@ of PTApplet %@, applet has %lu slots", v7, v12, [v13 count]];
    a1 = sub_100140F40(v14);
  }
LABEL_14:

  return a1;
}

id sub_100034610(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1) {
    goto LABEL_12;
  }
  if (!v3)
  {
    BOOL v12 = @"Could not clean with nil slot";
LABEL_8:
    a1 = sub_100140F40(v12);
    goto LABEL_12;
  }
  if (([v3 charValue] & 0x80000000) != 0)
  {
    BOOL v12 = @"Could not clean with negative slot";
    goto LABEL_8;
  }
  uint64_t v5 = [a1 map];
  id v6 = [v5 count];
  unsigned int v7 = [v4 unsignedCharValue];

  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = [a1 map];
    id v14 = [v13 objectAtIndex:objc_msgSend(v4, "unsignedCharValue") - 1];

    sub_100033DD4((uint64_t)v14, 0);
    if (v14) {
      v14[2] = 0;
    }

    a1 = 0;
  }
  else
  {
    id v8 = objc_alloc((Class)NSString);
    id v9 = [a1 instanceAID];
    unsigned int v10 = [a1 map];
    id v11 = [v8 initWithFormat:@"Could not clean slot %@ of PTApplet %@, applet has %lu slots", v4, v9, [v10 count]];
    a1 = sub_100140F40(v11);
  }
LABEL_12:

  return a1;
}

NFTrustDBKey *sub_100034D04(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  BOOL v12 = self;
  if (!v8)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v21 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v12);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v12);
      Name = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      uint64_t v25 = 45;
      if (isMetaClass) {
        uint64_t v25 = 43;
      }
      v21(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil identifier", v25, ClassName, Name, 860);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v26 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_53;
    }
    uint64_t v27 = object_getClass(v12);
    if (class_isMetaClass(v27)) {
      int v28 = 43;
    }
    else {
      int v28 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v69 = v28;
    __int16 v70 = 2082;
    int v71 = object_getClassName(v12);
    __int16 v72 = 2082;
    id v73 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    __int16 v74 = 1024;
    int v75 = 860;
    int v29 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil identifier";
    goto LABEL_52;
  }
  if (!v9)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v30 = NFLogGetLogger();
    if (v30)
    {
      __int16 v31 = (void (*)(uint64_t, const char *, ...))v30;
      id v32 = object_getClass(v12);
      BOOL v33 = class_isMetaClass(v32);
      BOOL v34 = object_getClassName(v12);
      int v64 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      uint64_t v35 = 45;
      if (v33) {
        uint64_t v35 = 43;
      }
      v31(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil applicationIdentifier", v35, v34, v64, 865);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v26 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_53;
    }
    int v36 = object_getClass(v12);
    if (class_isMetaClass(v36)) {
      int v37 = 43;
    }
    else {
      int v37 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v69 = v37;
    __int16 v70 = 2082;
    int v71 = object_getClassName(v12);
    __int16 v72 = 2082;
    id v73 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    __int16 v74 = 1024;
    int v75 = 865;
    int v29 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil applicationIdentifier";
    goto LABEL_52;
  }
  if (!v10)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v38 = NFLogGetLogger();
    if (v38)
    {
      __int16 v39 = (void (*)(uint64_t, const char *, ...))v38;
      int v40 = object_getClass(v12);
      BOOL v41 = class_isMetaClass(v40);
      int v42 = object_getClassName(v12);
      int v65 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      uint64_t v43 = 45;
      if (v41) {
        uint64_t v43 = 43;
      }
      v39(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil instanceAID", v43, v42, v65, 870);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v26 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_53;
    }
    long long v44 = object_getClass(v12);
    if (class_isMetaClass(v44)) {
      int v45 = 43;
    }
    else {
      int v45 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v69 = v45;
    __int16 v70 = 2082;
    int v71 = object_getClassName(v12);
    __int16 v72 = 2082;
    id v73 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    __int16 v74 = 1024;
    int v75 = 870;
    int v29 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil instanceAID";
    goto LABEL_52;
  }
  if (!v11)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v46 = NFLogGetLogger();
    if (v46)
    {
      long long v47 = (void (*)(uint64_t, const char *, ...))v46;
      id v48 = object_getClass(v12);
      BOOL v49 = class_isMetaClass(v48);
      int v50 = object_getClassName(v12);
      __int16 v66 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
      uint64_t v51 = 45;
      if (v49) {
        uint64_t v51 = 43;
      }
      v47(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil NFTrustCreateKeyRequest", v51, v50, v66, 875);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v26 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_53;
    }
    __int16 v52 = object_getClass(v12);
    if (class_isMetaClass(v52)) {
      int v53 = 43;
    }
    else {
      int v53 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v69 = v53;
    __int16 v70 = 2082;
    int v71 = object_getClassName(v12);
    __int16 v72 = 2082;
    id v73 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    __int16 v74 = 1024;
    int v75 = 875;
    int v29 = "%c[%{public}s %{public}s]:%i Could not create NFTrustDBKey with nil NFTrustCreateKeyRequest";
    goto LABEL_52;
  }
  uint64_t v13 = [NFTrustDBKey alloc];
  if (v13)
  {
    id v14 = v13;
    [(NFTrustDBKey *)v13 setIdentifier:v8];
    [(NFTrustDBKey *)v14 setApplicationIdentifier:v9];
    [(NFTrustDBKey *)v14 setInstanceAID:v10];
    uint64_t v15 = [v11 localValidations];
    [(NFTrustDBKey *)v14 setLocalValidations:v15];

    uint64_t v16 = [v11 counterLimit];
    counterLimit = v14->_counterLimit;
    v14->_counterLimit = (NSNumber *)v16;

    uint64_t v18 = +[NSNumber numberWithUnsignedInteger:0];
    counterValue = v14->_counterValue;
    v14->_counterValue = (NSNumber *)v18;

    goto LABEL_54;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v54 = NFLogGetLogger();
  if (v54)
  {
    uint64_t v55 = (void (*)(uint64_t, const char *, ...))v54;
    __int16 v56 = object_getClass(v12);
    BOOL v57 = class_isMetaClass(v56);
    long long v58 = object_getClassName(v12);
    __int16 v67 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    uint64_t v59 = 45;
    if (v57) {
      uint64_t v59 = 43;
    }
    v55(3, "%c[%{public}s %{public}s]:%i Could not create DB NFTrustKey", v59, v58, v67, 880);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v26 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    long long v60 = object_getClass(v12);
    if (class_isMetaClass(v60)) {
      int v61 = 43;
    }
    else {
      int v61 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v69 = v61;
    __int16 v70 = 2082;
    int v71 = object_getClassName(v12);
    __int16 v72 = 2082;
    id v73 = sel_getName("dbKeyWithIdentifier:applicationIdentifier:instanceAID:createKeyRequest:");
    __int16 v74 = 1024;
    int v75 = 880;
    int v29 = "%c[%{public}s %{public}s]:%i Could not create DB NFTrustKey";
LABEL_52:
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v29, buf, 0x22u);
  }
LABEL_53:

  id v14 = 0;
LABEL_54:

  return v14;
}

void sub_1000353B8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

BOOL sub_1000353D0(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = [a1 localValidations];
  BOOL v2 = v1 != 0;

  return v2;
}

id sub_100035410(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = +[NFTrustKey keyWithIdentifier:*(void *)(a1 + 8)];
    id v3 = v2;
    if (v2)
    {
      [v2 setKeyAttestationAuthority:*(void *)(a1 + 16)];
      uint64_t v4 = [[*(id *)(a1 + 24) NF_asHexString];
      [v3 setKeyAttestation:v4];

      [v3 setCounterLimit:*(void *)(a1 + 40)];
      [v3 setCounterValue:*(void *)(a1 + 48)];
      uint64_t v5 = [(id)a1 localValidations];
      [v3 setLocalValidations:v5];

      id v6 = v3;
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_10003551C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_100035534(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_10003554C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

uint64_t sub_100035CF0(void *a1)
{
  id v1 = a1;
  unint64_t v2 = (unint64_t)[v1 category];
  if (v2 > 8) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = qword_1002835E0[v2];
  }
  if ([v1 notificationType] == (id)3)
  {
    id v4 = v1;
    if ([v4 terminalType] == (id)2
      && ([v4 terminalSubType] == 9
       || [v4 terminalSubType] == 11))
    {
      v3 |= 8uLL;
    }
  }
  return v3;
}

void sub_100035D90(id a1)
{
  id v1 = objc_alloc_init(NFSecureXPCEventPublisherManager);
  uint64_t v2 = qword_1003472E8;
  qword_1003472E8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10003D484(unsigned char *a1)
{
  if (a1 && a1[25])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("cancelOutstandingActivity");
      uint64_t v7 = 45;
      if (isMetaClass) {
        uint64_t v7 = 43;
      }
      v3(6, "%c[%{public}s %{public}s]:%i Marking activity cancelled", v7, ClassName, Name, 47);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = object_getClass(a1);
      if (class_isMetaClass(v9)) {
        int v10 = 43;
      }
      else {
        int v10 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v13 = v10;
      __int16 v14 = 2082;
      uint64_t v15 = object_getClassName(a1);
      __int16 v16 = 2082;
      int v17 = sel_getName("cancelOutstandingActivity");
      __int16 v18 = 1024;
      int v19 = 47;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Marking activity cancelled", buf, 0x22u);
    }

    a1[24] = 1;
  }
}

void sub_10003D61C(uint64_t a1, void *a2, void *a3)
{
  v14.tv_sec = 0;
  *(void *)&v14.tv_usec = 0;
  id v5 = a3;
  id v6 = a2;
  gettimeofday(&v14, 0);
  id v13 = +[NSDate dateWithTimeIntervalSince1970:(double)v14.tv_sec];
  uint64_t v7 = objc_opt_new();
  [v7 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
  id v8 = objc_alloc((Class)NSString);
  id v9 = [v7 stringFromDate:v13];
  uint64_t v10 = (v14.tv_usec / 1000);
  id v11 = [v6 NF_asHexString];

  id v12 = [v8 initWithFormat:@"%@.%03d %@ : %@", v9, v10, v5, v11];
  [*(id *)(a1 + 16) addObject:v12];
}

void sub_10003D75C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v5 = v3;
    id v4 = a1;
    objc_sync_enter(v4);
    [v4[1] addObject:v5];
    if (objc_opt_respondsToSelector()) {
      [v5 setManager:v4];
    }
    objc_sync_exit(v4);

    id v3 = v5;
  }
}

void sub_10003D7E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10003D7FC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = a1;
    objc_sync_enter(v4);
    id v5 = [v4[1] containsObject:v3];
    objc_sync_exit(v4);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_10003D868(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10003D87C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = a1;
    objc_sync_enter(v4);
    id v21 = v3;
    [v4[1] removeObject:v3];
    if (objc_opt_respondsToSelector()) {
      [v3 setManager:0];
    }
    if (![v4[1] count])
    {
      id v5 = +[_NFHardwareManager sharedHardwareManager];
      id v6 = [v5 setHostEmulationEnabled:0];
    }
    if (NFIsInternalBuild() && [v4[2] count])
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id obj = v4[2];
      id v7 = [obj countByEnumeratingWithState:&v23 objects:v37 count:16];
      if (v7)
      {
        uint64_t v8 = *(void *)v24;
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v24 != v8) {
              objc_enumerationMutation(obj);
            }
            uint64_t v10 = *(void *)(*((void *)&v23 + 1) + 8 * i);
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (Logger)
            {
              Class Class = object_getClass(v4);
              if (class_isMetaClass(Class)) {
                uint64_t v13 = 43;
              }
              else {
                uint64_t v13 = 45;
              }
              ClassName = object_getClassName(v4);
              Name = sel_getName("removeApplet:");
              Logger(6, "%c[%{public}s %{public}s]:%i %@", v13, ClassName, Name, 105, v10);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            __int16 v16 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              int v17 = object_getClass(v4);
              if (class_isMetaClass(v17)) {
                int v18 = 43;
              }
              else {
                int v18 = 45;
              }
              int v19 = object_getClassName(v4);
              uint64_t v20 = sel_getName("removeApplet:");
              *(_DWORD *)buf = 67110146;
              int v28 = v18;
              __int16 v29 = 2082;
              uint64_t v30 = v19;
              __int16 v31 = 2082;
              id v32 = v20;
              __int16 v33 = 1024;
              int v34 = 105;
              __int16 v35 = 2112;
              uint64_t v36 = v10;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
            }
          }
          id v7 = [obj countByEnumeratingWithState:&v23 objects:v37 count:16];
        }
        while (v7);
      }
    }
    objc_sync_exit(v4);

    id v3 = v21;
  }
}

void sub_10003DB54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10003DB88(id *a1)
{
  if (a1)
  {
    id v1 = a1;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("getAPDULog");
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v8, ClassName, Name, 121, v1[2]);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = object_getClass(v1);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      id v12 = object_getClassName(v1);
      uint64_t v13 = sel_getName("getAPDULog");
      id v14 = v1[2];
      *(_DWORD *)buf = 67110146;
      int v17 = v11;
      __int16 v18 = 2082;
      int v19 = v12;
      __int16 v20 = 2082;
      id v21 = v13;
      __int16 v22 = 1024;
      int v23 = 121;
      __int16 v24 = 2114;
      id v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    a1 = (id *)v1[2];
  }

  return a1;
}

void sub_10003DD40(void *a1, void *a2, char a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = a1;
    objc_sync_enter(v6);
    v6[12] = 256;
    id v7 = dispatch_get_global_queue(33, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003DE24;
    block[3] = &unk_1003018E8;
    void block[4] = v6;
    id v9 = v5;
    char v10 = a3;
    dispatch_async(v7, block);

    objc_sync_exit(v6);
  }
}

void sub_10003DE24(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  kdebug_trace();
  id v1 = NFSharedSignpostLog();
  if (os_signpost_enabled(v1))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "VAS_START", (const char *)&unk_100286819, buf, 2u);
  }

  uint64_t v2 = *(void *)(a1 + 32);
  int v83 = *(unsigned __int8 *)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  if (!v2) {
    goto LABEL_92;
  }
  id v4 = 0;
  id v5 = 0;
  id v6 = 0;
  id v7 = 0;
  char v82 = 0;
  id v8 = 0;
  uint64_t v80 = v2;
  while (!*(unsigned char *)(v2 + 24))
  {
    id v9 = [v3 readAPDU];

    id v7 = v9;
    if (!v9 || *(unsigned char *)(v2 + 24))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass((id)v2);
        if (class_isMetaClass(Class)) {
          uint64_t v49 = 43;
        }
        else {
          uint64_t v49 = 45;
        }
        ClassName = object_getClassName((id)v2);
        Name = sel_getName("runHostCardEmulation:paymentEnabled:");
        Logger(6, "%c[%{public}s %{public}s]:%i no response or cancelled, abort", v49, ClassName, Name, 170);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v52 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        int v53 = object_getClass((id)v2);
        if (class_isMetaClass(v53)) {
          int v54 = 43;
        }
        else {
          int v54 = 45;
        }
        uint64_t v55 = object_getClassName((id)v2);
        __int16 v56 = sel_getName("runHostCardEmulation:paymentEnabled:");
        v88[0] = 67109890;
        v88[1] = v54;
        __int16 v89 = 2082;
        uint64_t v90 = v55;
        __int16 v91 = 2082;
        unsigned int v92 = v56;
        __int16 v93 = 1024;
        int v94 = 170;
        BOOL v57 = "%c[%{public}s %{public}s]:%i no response or cancelled, abort";
LABEL_75:
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v57, (uint8_t *)v88, 0x22u);
        goto LABEL_76;
      }
      goto LABEL_76;
    }
    sub_10003D61C(v2, v9, @"[<RX]");
    id v10 = [objc_alloc((Class)NFCommandAPDU) initWithData:v9 uniformLengthCheck:0];

    id v5 = v10;
    if ([v10 instruction] == 164 && objc_msgSend(v10, "p1") == 4)
    {
      [v8 handleDeselect];

      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      id v11 = *(id *)(v2 + 8);
      id v12 = [v11 countByEnumeratingWithState:&v84 objects:buf count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v85;
LABEL_12:
        id v14 = v3;
        uint64_t v15 = 0;
        while (1)
        {
          if (*(void *)v85 != v13) {
            objc_enumerationMutation(v11);
          }
          __int16 v16 = *(void **)(*((void *)&v84 + 1) + 8 * v15);
          if (objc_opt_respondsToSelector()) {
            [v16 supportPayment:v83 != 0];
          }
          id v4 = [v16 handleSelect:v5];
          if (v4) {
            break;
          }
          if (v12 == (id)++v15)
          {
            id v12 = [v11 countByEnumeratingWithState:&v84 objects:buf count:16];
            id v3 = v14;
            if (v12) {
              goto LABEL_12;
            }
            goto LABEL_20;
          }
        }
        id v8 = v16;

        id v3 = v14;
        uint64_t v2 = v80;
        char v82 = 1;
        if (!v8) {
          goto LABEL_38;
        }
        id v30 = v6;
      }
      else
      {
LABEL_20:

        uint64_t v2 = v80;
        id v4 = 0;
LABEL_38:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v34)
        {
          __int16 v35 = object_getClass((id)v2);
          if (class_isMetaClass(v35)) {
            uint64_t v36 = 43;
          }
          else {
            uint64_t v36 = 45;
          }
          int v37 = object_getClassName((id)v2);
          uint64_t v38 = sel_getName("runHostCardEmulation:paymentEnabled:");
          v34(6, "%c[%{public}s %{public}s]:%i Failed to find suitable applet", v36, v37, v38, 198);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v39 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = object_getClass((id)v2);
          if (class_isMetaClass(v40)) {
            int v41 = 43;
          }
          else {
            int v41 = 45;
          }
          int v42 = object_getClassName((id)v2);
          uint64_t v43 = sel_getName("runHostCardEmulation:paymentEnabled:");
          v88[0] = 67109890;
          v88[1] = v41;
          __int16 v89 = 2082;
          uint64_t v90 = v42;
          __int16 v91 = 2082;
          unsigned int v92 = v43;
          __int16 v93 = 1024;
          int v94 = 198;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Failed to find suitable applet", (uint8_t *)v88, 0x22u);
        }

        LOWORD(v88[0]) = -32150;
        id v30 = [objc_alloc((Class)NSData) initWithBytes:v88 length:2];

        uint64_t v44 = +[NFResponseAPDU responseWithData:v30];

        id v8 = 0;
        id v4 = (void *)v44;
      }
      if (!*(unsigned char *)(v2 + 24))
      {
        int v45 = [v4 data];
        [v3 sendAPDU:v45];

        uint64_t v46 = [v4 data];
        sub_10003D61C(v2, v46, @"[>TX]");
      }
    }
    else
    {
      if (v8)
      {
        int v17 = [v8 handleAPDU:v10];

        if (!*(unsigned char *)(v2 + 24))
        {
          __int16 v18 = [v17 data];
          [v3 sendAPDU:v18];

          int v19 = [v17 data];
          sub_10003D61C(v2, v19, @"[>TX]");
        }
        id v4 = v17;
        goto LABEL_52;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v20)
      {
        id v21 = object_getClass((id)v2);
        if (class_isMetaClass(v21)) {
          uint64_t v22 = 43;
        }
        else {
          uint64_t v22 = 45;
        }
        int v23 = object_getClassName((id)v2);
        __int16 v24 = sel_getName("runHostCardEmulation:paymentEnabled:");
        v20(6, "%c[%{public}s %{public}s]:%i Invalid command: %{public}@", v22, v23, v24, 216, v7);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v25 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        long long v26 = object_getClass((id)v2);
        if (class_isMetaClass(v26)) {
          int v27 = 43;
        }
        else {
          int v27 = 45;
        }
        int v28 = object_getClassName((id)v2);
        __int16 v29 = sel_getName("runHostCardEmulation:paymentEnabled:");
        v88[0] = 67110146;
        v88[1] = v27;
        __int16 v89 = 2082;
        uint64_t v90 = v28;
        __int16 v91 = 2082;
        unsigned int v92 = v29;
        __int16 v93 = 1024;
        int v94 = 216;
        __int16 v95 = 2114;
        __int16 v96 = v7;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Invalid command: %{public}@", (uint8_t *)v88, 0x2Cu);
      }

      strcpy((char *)v88, "i");
      id v30 = [objc_alloc((Class)NSData) initWithBytes:v88 length:2];

      __int16 v31 = +[NFResponseAPDU responseWithData:v30];

      id v32 = [v31 data];
      [v3 sendAPDU:v32];

      __int16 v33 = [v31 data];
      sub_10003D61C(v2, v33, @"[>TX]");

      id v8 = 0;
      id v4 = v31;
    }
    id v6 = v30;
LABEL_52:
    if ((v82 & 1) != 0 && !v8) {
      goto LABEL_77;
    }
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  long long v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v58)
  {
    uint64_t v59 = object_getClass((id)v2);
    if (class_isMetaClass(v59)) {
      uint64_t v60 = 43;
    }
    else {
      uint64_t v60 = 45;
    }
    int v61 = object_getClassName((id)v2);
    id v62 = sel_getName("runHostCardEmulation:paymentEnabled:");
    v58(6, "%c[%{public}s %{public}s]:%i cancelled", v60, v61, v62, 162);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  __int16 v52 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    id v63 = object_getClass((id)v2);
    if (class_isMetaClass(v63)) {
      int v64 = 43;
    }
    else {
      int v64 = 45;
    }
    int v65 = object_getClassName((id)v2);
    __int16 v66 = sel_getName("runHostCardEmulation:paymentEnabled:");
    v88[0] = 67109890;
    v88[1] = v64;
    __int16 v89 = 2082;
    uint64_t v90 = v65;
    __int16 v91 = 2082;
    unsigned int v92 = v66;
    __int16 v93 = 1024;
    int v94 = 162;
    BOOL v57 = "%c[%{public}s %{public}s]:%i cancelled";
    goto LABEL_75;
  }
LABEL_76:

LABEL_77:
  if (*(unsigned char *)(v2 + 24))
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v67)
    {
      __int16 v68 = object_getClass((id)v2);
      if (class_isMetaClass(v68)) {
        uint64_t v69 = 43;
      }
      else {
        uint64_t v69 = 45;
      }
      __int16 v70 = object_getClassName((id)v2);
      int v71 = sel_getName("runHostCardEmulation:paymentEnabled:");
      v67(6, "%c[%{public}s %{public}s]:%i activity cancelled", v69, v70, v71, 230);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v72 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      id v73 = object_getClass((id)v2);
      if (class_isMetaClass(v73)) {
        int v74 = 43;
      }
      else {
        int v74 = 45;
      }
      int v75 = object_getClassName((id)v2);
      id v76 = sel_getName("runHostCardEmulation:paymentEnabled:");
      v88[0] = 67109890;
      v88[1] = v74;
      __int16 v89 = 2082;
      uint64_t v90 = v75;
      __int16 v91 = 2082;
      unsigned int v92 = v76;
      __int16 v93 = 1024;
      int v94 = 230;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i activity cancelled", (uint8_t *)v88, 0x22u);
    }
  }
  if (v8) {
    [v8 handleDeselect];
  }

LABEL_92:

  kdebug_trace();
  uint64_t v77 = NFSharedSignpostLog();
  if (os_signpost_enabled(v77))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v77, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "VAS_END", (const char *)&unk_100286819, buf, 2u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 25) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 0;
  objc_sync_exit(obj);
}

void sub_10003E928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id obj)
{
}

__CFString *sub_10003EF24(__CFString *result)
{
  if (result)
  {
    unsigned int v1 = BYTE5(result[4].length) - 1;
    if (v1 > 5) {
      return 0;
    }
    else {
      return off_100301D00[(char)v1];
    }
  }
  return result;
}

void sub_10003EF54(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = NFSharedSignpostLog();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", (const char *)&unk_100286819, buf, 2u);
    }

    uint64_t v3 = sub_10020EC8C(*(void **)(a1 + 16), @"Express config", 1uLL);
    if (v3)
    {
      id v4 = (void *)v3;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v6 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("updateExpressConfigs");
        uint64_t v9 = 45;
        if (isMetaClass) {
          uint64_t v9 = 43;
        }
        v6(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v9, ClassName, Name, 170, v4);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = object_getClass((id)a1);
        if (class_isMetaClass(v11)) {
          int v12 = 43;
        }
        else {
          int v12 = 45;
        }
        uint64_t v13 = object_getClassName((id)a1);
        id v14 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67110146;
        int v103 = v12;
        __int16 v104 = 2082;
        v105 = v13;
        __int16 v106 = 2082;
        v107 = v14;
        __int16 v108 = 1024;
        int v109 = 170;
        __int16 v110 = 2112;
        id v111 = v4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
      }

      uint64_t v15 = NFSharedSignpostLog();
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", "failed to open session", buf, 2u);
      }
      goto LABEL_101;
    }
    uint64_t v15 = +[_NFHardwareManager sharedHardwareManager];
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      int v17 = (void (*)(uint64_t, const char *, ...))v16;
      __int16 v18 = object_getClass((id)a1);
      BOOL v19 = class_isMetaClass(v18);
      __int16 v20 = object_getClassName((id)a1);
      __int16 v96 = sel_getName("updateExpressConfigs");
      uint64_t v21 = 45;
      if (v19) {
        uint64_t v21 = 43;
      }
      v17(6, "%c[%{public}s %{public}s]:%i Creating eSE config", v21, v20, v96, 177);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = object_getClass((id)a1);
      if (class_isMetaClass(v23)) {
        int v24 = 43;
      }
      else {
        int v24 = 45;
      }
      id v25 = object_getClassName((id)a1);
      long long v26 = sel_getName("updateExpressConfigs");
      *(_DWORD *)buf = 67109890;
      int v103 = v24;
      __int16 v104 = 2082;
      v105 = v25;
      __int16 v106 = 2082;
      v107 = v26;
      __int16 v108 = 1024;
      int v109 = 177;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Creating eSE config", buf, 0x22u);
    }

    id v27 = [[NFExpressConfigESE alloc] initFromStorageWithDriverWrapper:*(void *)(a1 + 16)];
    int v28 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v27;

    id v29 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.stockholm"];
    int v30 = [v29 BOOLForKey:@"ecp2ExpressTestMode"];
    if (v30)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v31 = NFLogGetLogger();
      if (v31)
      {
        id v32 = (void (*)(uint64_t, const char *, ...))v31;
        __int16 v33 = object_getClass((id)a1);
        BOOL v34 = class_isMetaClass(v33);
        __int16 v35 = object_getClassName((id)a1);
        unsigned __int16 v97 = sel_getName("updateExpressConfigs");
        uint64_t v36 = 45;
        if (v34) {
          uint64_t v36 = 43;
        }
        v32(6, "%c[%{public}s %{public}s]:%i ECP2 FTA test mode!", v36, v35, v97, 185);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v37 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v38 = object_getClass((id)a1);
        if (class_isMetaClass(v38)) {
          int v39 = 43;
        }
        else {
          int v39 = 45;
        }
        int v40 = object_getClassName((id)a1);
        int v41 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67109890;
        int v103 = v39;
        __int16 v104 = 2082;
        v105 = v40;
        __int16 v106 = 2082;
        v107 = v41;
        __int16 v108 = 1024;
        int v109 = 185;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ECP2 FTA test mode!", buf, 0x22u);
      }

      if (!*(unsigned char *)(a1 + 170)) {
        goto LABEL_48;
      }
    }
    else if (!*(unsigned char *)(a1 + 170))
    {
      goto LABEL_78;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v42 = NFLogGetLogger();
    if (v42)
    {
      uint64_t v43 = (void (*)(uint64_t, const char *, ...))v42;
      uint64_t v44 = object_getClass((id)a1);
      BOOL v45 = class_isMetaClass(v44);
      uint64_t v46 = object_getClassName((id)a1);
      int v98 = sel_getName("updateExpressConfigs");
      uint64_t v47 = 45;
      if (v45) {
        uint64_t v47 = 43;
      }
      v43(6, "%c[%{public}s %{public}s]:%i Factory test mode", v47, v46, v98, 188);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v48 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = object_getClass((id)a1);
      if (class_isMetaClass(v49)) {
        int v50 = 43;
      }
      else {
        int v50 = 45;
      }
      uint64_t v51 = object_getClassName((id)a1);
      __int16 v52 = sel_getName("updateExpressConfigs");
      *(_DWORD *)buf = 67109890;
      int v103 = v50;
      __int16 v104 = 2082;
      v105 = v51;
      __int16 v106 = 2082;
      v107 = v52;
      __int16 v108 = 1024;
      int v109 = 188;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Factory test mode", buf, 0x22u);
    }

LABEL_48:
    uint64_t v53 = *(void *)(a1 + 40);
    if (v53)
    {
      *(unsigned char *)(v53 + 8_Block_object_dispose(&STACK[0x2B0], 8) = 1;
      int v54 = *(void **)(a1 + 40);
    }
    else
    {
      int v54 = 0;
    }
    uint64_t v55 = [v54 reconfigureWithArray:&__NSArray0__struct restoreAuthorization:0 updateStorage:1];
    if (v55)
    {
      id v4 = (void *)v55;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v56 = NFLogGetLogger();
      if (v56)
      {
        BOOL v57 = (void (*)(uint64_t, const char *, ...))v56;
        long long v58 = object_getClass((id)a1);
        BOOL v59 = class_isMetaClass(v58);
        __int16 v93 = object_getClassName((id)a1);
        unsigned __int8 v99 = sel_getName("updateExpressConfigs");
        uint64_t v60 = 45;
        if (v59) {
          uint64_t v60 = 43;
        }
        v57(3, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", v60, v93, v99, 195, v4);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v61 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        id v62 = object_getClass((id)a1);
        if (class_isMetaClass(v62)) {
          int v63 = 43;
        }
        else {
          int v63 = 45;
        }
        int v64 = object_getClassName((id)a1);
        int v65 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67110146;
        int v103 = v63;
        __int16 v104 = 2082;
        v105 = v64;
        __int16 v106 = 2082;
        v107 = v65;
        __int16 v108 = 1024;
        int v109 = 195;
        __int16 v110 = 2114;
        id v111 = v4;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", buf, 0x2Cu);
      }

      __int16 v66 = NFSharedSignpostLog();
      if (!os_signpost_enabled(v66)) {
        goto LABEL_100;
      }
      *(_WORD *)buf = 0;
      __int16 v67 = "failed to remove old config";
LABEL_76:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", v67, buf, 2u);
LABEL_100:

LABEL_101:
      return;
    }
    uint64_t v68 = sub_1000282B0(*(id **)(a1 + 40), v30);
    if (v68)
    {
      id v4 = (void *)v68;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v69 = NFLogGetLogger();
      if (v69)
      {
        __int16 v70 = (void (*)(uint64_t, const char *, ...))v69;
        int v71 = object_getClass((id)a1);
        BOOL v72 = class_isMetaClass(v71);
        int v94 = object_getClassName((id)a1);
        __int16 v100 = sel_getName("updateExpressConfigs");
        uint64_t v73 = 45;
        if (v72) {
          uint64_t v73 = 43;
        }
        v70(3, "%c[%{public}s %{public}s]:%i Failed to set factory test config: %{public}@", v73, v94, v100, 202, v4);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v74 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        int v75 = object_getClass((id)a1);
        if (class_isMetaClass(v75)) {
          int v76 = 43;
        }
        else {
          int v76 = 45;
        }
        uint64_t v77 = object_getClassName((id)a1);
        id v78 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67110146;
        int v103 = v76;
        __int16 v104 = 2082;
        v105 = v77;
        __int16 v106 = 2082;
        v107 = v78;
        __int16 v108 = 1024;
        int v109 = 202;
        __int16 v110 = 2114;
        id v111 = v4;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set factory test config: %{public}@", buf, 0x2Cu);
      }

      uint64_t v79 = *(void *)(a1 + 40);
      if (v79) {
        *(unsigned char *)(v79 + 8_Block_object_dispose(&STACK[0x2B0], 8) = 0;
      }
      __int16 v66 = NFSharedSignpostLog();
      if (!os_signpost_enabled(v66)) {
        goto LABEL_100;
      }
      *(_WORD *)buf = 0;
      __int16 v67 = "failed to set factory mode";
      goto LABEL_76;
    }
    *(_WORD *)(a1 + 170) = 257;
LABEL_78:
    sub_10003FAA0(a1);
    sub_100040040((_DWORD *)a1);
    if (*(unsigned char *)(a1 + 170))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v80 = NFLogGetLogger();
      if (v80)
      {
        uint64_t v81 = (void (*)(uint64_t, const char *, ...))v80;
        char v82 = object_getClass((id)a1);
        BOOL v83 = class_isMetaClass(v82);
        long long v84 = object_getClassName((id)a1);
        uint64_t v101 = sel_getName("updateExpressConfigs");
        uint64_t v85 = 45;
        if (v83) {
          uint64_t v85 = 43;
        }
        v81(6, "%c[%{public}s %{public}s]:%i Enabling NFC express for LPM factory test mode", v85, v84, v101, 215);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      long long v86 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        long long v87 = object_getClass((id)a1);
        if (class_isMetaClass(v87)) {
          int v88 = 43;
        }
        else {
          int v88 = 45;
        }
        __int16 v89 = object_getClassName((id)a1);
        uint64_t v90 = sel_getName("updateExpressConfigs");
        *(_DWORD *)buf = 67109890;
        int v103 = v88;
        __int16 v104 = 2082;
        v105 = v89;
        __int16 v106 = 2082;
        v107 = v90;
        __int16 v108 = 1024;
        int v109 = 215;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Enabling NFC express for LPM factory test mode", buf, 0x22u);
      }

      if (*(unsigned char *)(a1 + 170))
      {
        if (*(unsigned char *)(a1 + 171)) {
          uint64_t v91 = 16;
        }
        else {
          uint64_t v91 = 4;
        }
      }
      else
      {
        uint64_t v91 = *(unsigned int *)(a1 + 152);
      }
      sub_1002155FC(*(void **)(a1 + 16), v91, 1);
      sub_1001AA4BC(*(void **)(a1 + 16), 1);
    }
    if (*(void *)(a1 + 136) == 1 && ([v15 hasSession] & 1) == 0) {
      sub_100040348(a1);
    }
    sub_1002114AC(*(void **)(a1 + 16), @"Express config");
    __int16 v66 = NFSharedSignpostLog();
    if (os_signpost_enabled(v66))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "updateExpressConfigs", (const char *)&unk_100286819, buf, 2u);
    }
    id v4 = 0;
    goto LABEL_100;
  }
}

void sub_10003FAA0(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  [*(id *)(a1 + 40) updateAppletCountOnMap:v2];
  objc_storeStrong((id *)(a1 + 48), v2);
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3) {
    uint64_t v3 = (void *)v3[2];
  }
  id v4 = v3;
  BOOL v5 = [v4 count] != 0;

  BOOL v6 = [*(id *)(a1 + 48) count] != 0;
  if (notify_is_valid_token(*(_DWORD *)(a1 + 164))
    || (uint64_t v7 = notify_register_check("com.apple.stockholm.express.state", (int *)(a1 + 164)), !v7))
  {
    uint64_t v18 = v5 | (2 * v6);
    uint64_t v19 = notify_set_state(*(_DWORD *)(a1 + 164), v18);
    if (v19)
    {
      uint64_t v20 = v19;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v22 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_updateAppletCount");
        uint64_t v25 = 45;
        if (isMetaClass) {
          uint64_t v25 = 43;
        }
        v22(3, "%c[%{public}s %{public}s]:%i Failed to notify set state : %d", v25, ClassName, Name, 403, v20);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        long long v26 = object_getClass((id)a1);
        if (class_isMetaClass(v26)) {
          int v27 = 43;
        }
        else {
          int v27 = 45;
        }
        *(_DWORD *)buf = 67110146;
        int v53 = v27;
        __int16 v54 = 2082;
        uint64_t v55 = object_getClassName((id)a1);
        __int16 v56 = 2082;
        BOOL v57 = sel_getName("_updateAppletCount");
        __int16 v58 = 1024;
        int v59 = 403;
        __int16 v60 = 1024;
        LODWORD(v61) = v20;
        int v17 = "%c[%{public}s %{public}s]:%i Failed to notify set state : %d";
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v28 = notify_post("com.apple.stockholm.express.state");
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v29 = NFLogGetLogger();
      int v30 = (void (*)(uint64_t, const char *, ...))v29;
      if (v28)
      {
        if (v29)
        {
          uint64_t v31 = object_getClass((id)a1);
          BOOL v32 = class_isMetaClass(v31);
          uint64_t v46 = object_getClassName((id)a1);
          int v50 = sel_getName("_updateAppletCount");
          uint64_t v33 = 45;
          if (v32) {
            uint64_t v33 = 43;
          }
          v30(3, "%c[%{public}s %{public}s]:%i Failed to notify : %d", v33, v46, v50, 396, v28);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v14 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          BOOL v34 = object_getClass((id)a1);
          if (class_isMetaClass(v34)) {
            int v35 = 43;
          }
          else {
            int v35 = 45;
          }
          *(_DWORD *)buf = 67110146;
          int v53 = v35;
          __int16 v54 = 2082;
          uint64_t v55 = object_getClassName((id)a1);
          __int16 v56 = 2082;
          BOOL v57 = sel_getName("_updateAppletCount");
          __int16 v58 = 1024;
          int v59 = 396;
          __int16 v60 = 1024;
          LODWORD(v61) = v28;
          int v17 = "%c[%{public}s %{public}s]:%i Failed to notify : %d";
          goto LABEL_34;
        }
      }
      else
      {
        if (v29)
        {
          int v39 = object_getClass((id)a1);
          BOOL v40 = class_isMetaClass(v39);
          uint64_t v47 = object_getClassName((id)a1);
          uint64_t v51 = sel_getName("_updateAppletCount");
          uint64_t v41 = 43;
          if (!v40) {
            uint64_t v41 = 45;
          }
          v30(6, "%c[%{public}s %{public}s]:%i posted %s expressState: 0x%x; status: %u",
            v41,
            v47,
            v51,
            399,
            "com.apple.stockholm.express.state",
            v18,
            0);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v14 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v42 = object_getClass((id)a1);
          if (class_isMetaClass(v42)) {
            int v43 = 43;
          }
          else {
            int v43 = 45;
          }
          *(_DWORD *)buf = 67110658;
          int v53 = v43;
          __int16 v54 = 2082;
          uint64_t v55 = object_getClassName((id)a1);
          __int16 v56 = 2082;
          BOOL v57 = sel_getName("_updateAppletCount");
          __int16 v58 = 1024;
          int v59 = 399;
          __int16 v60 = 2080;
          int v61 = "com.apple.stockholm.express.state";
          __int16 v62 = 1024;
          int v63 = v18;
          __int16 v64 = 1024;
          int v65 = 0;
          int v17 = "%c[%{public}s %{public}s]:%i posted %s expressState: 0x%x; status: %u";
          uint64_t v36 = v14;
          os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
          uint32_t v38 = 56;
          goto LABEL_35;
        }
      }
    }
  }
  else
  {
    uint64_t v8 = v7;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFLogGetLogger();
    if (v9)
    {
      id v10 = (void (*)(uint64_t, const char *, ...))v9;
      id v11 = object_getClass((id)a1);
      BOOL v12 = class_isMetaClass(v11);
      uint64_t v44 = object_getClassName((id)a1);
      id v48 = sel_getName("_updateAppletCount");
      uint64_t v13 = 45;
      if (v12) {
        uint64_t v13 = 43;
      }
      v10(3, "%c[%{public}s %{public}s]:%i Failed to notify register check : %d", v13, v44, v48, 407, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = object_getClass((id)a1);
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      *(_DWORD *)buf = 67110146;
      int v53 = v16;
      __int16 v54 = 2082;
      uint64_t v55 = object_getClassName((id)a1);
      __int16 v56 = 2082;
      BOOL v57 = sel_getName("_updateAppletCount");
      __int16 v58 = 1024;
      int v59 = 407;
      __int16 v60 = 1024;
      LODWORD(v61) = v8;
      int v17 = "%c[%{public}s %{public}s]:%i Failed to notify register check : %d";
LABEL_34:
      uint64_t v36 = v14;
      os_log_type_t v37 = OS_LOG_TYPE_ERROR;
      uint32_t v38 = 40;
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v36, v37, v17, buf, v38);
    }
  }

  sub_1000413E0(a1);
}

void sub_100040040(_DWORD *val)
{
  if (val)
  {
    val[40] = 0;
    *((unsigned char *)val + 157) = 0;
    objc_initWeak(&location, val);
    if (!*((void *)val + 12))
    {
      id v2 = objc_alloc((Class)NFTimer);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100040848;
      v15[3] = &unk_100301C18;
      objc_copyWeak(&v16, &location);
      id v3 = [v2 initWithCallback:v15 queue:0];
      id v4 = (void *)*((void *)val + 12);
      *((void *)val + 12) = v3;

      objc_destroyWeak(&v16);
    }
    if (!*((void *)val + 11))
    {
      *((void *)val + 16) = 0x4056800000000000;
      if (NFIsInternalBuild())
      {
        id v5 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.stockholm"];
        BOOL v6 = [v5 objectForKey:@"expressModeMaxTimeout"];

        if (v6)
        {
          *((double *)val + 16) = (double)(uint64_t)[v5 integerForKey:@"expressModeMaxTimeout"];
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger) {
            Logger(5, "%s:%i Overriding maximum express mode timeout to %f", "-[NFExpressModeManager initExpressTransactionsStates]", 256, *((void *)val + 16));
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v8 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v9 = *((void *)val + 16);
            *(_DWORD *)buf = 136446722;
            uint64_t v19 = "-[NFExpressModeManager initExpressTransactionsStates]";
            __int16 v20 = 1024;
            int v21 = 256;
            __int16 v22 = 2048;
            uint64_t v23 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Overriding maximum express mode timeout to %f", buf, 0x1Cu);
          }
        }
      }
      id v10 = objc_alloc((Class)NFTimer);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _DWORD v13[2] = sub_1000409F4;
      v13[3] = &unk_100301C18;
      objc_copyWeak(&v14, &location);
      id v11 = [v10 initWithCallback:v13 queue:0];
      BOOL v12 = (void *)*((void *)val + 11);
      *((void *)val + 11) = v11;

      objc_destroyWeak(&v14);
    }
    objc_destroyWeak(&location);
  }
}

void sub_100040300(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 88));
  _Unwind_Resume(a1);
}

BOOL sub_100040348(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_ACTIVATE_APPLETS", "in", buf, 2u);
  }

  if (*(void *)(a1 + 136) != 1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("activateConfig");
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v4(5, "%c[%{public}s %{public}s]:%i Express mode not enabled", v8, ClassName, Name, 1101);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = object_getClass((id)a1);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      BOOL v12 = object_getClassName((id)a1);
      uint64_t v13 = sel_getName("activateConfig");
      *(_DWORD *)buf = 67109890;
      int v42 = v11;
      __int16 v43 = 2082;
      uint64_t v44 = v12;
      __int16 v45 = 2082;
      uint64_t v46 = v13;
      __int16 v47 = 1024;
      int v48 = 1101;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode not enabled", buf, 0x22u);
    }
  }
  sub_1002535C4();
  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    uint64_t v15 = vaddvq_s64(vaddq_s64(*(int64x2_t *)(v14 + 24), *(int64x2_t *)(v14 + 40)))
  }
        + *(void *)(v14 + 56)
        + *(void *)(v14 + 64);
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    *(unsigned char *)(v16 + 220) = v15 != 0;
    uint64_t v14 = *(void *)(a1 + 40);
  }
  char v40 = 0;
  int v17 = [*(id *)(a1 + 56) identifier];
  uint64_t v18 = [(id)v14 updateExpressConfigLimitedTo:v17 andActivate:1 hasChanged:&v40];

  BOOL v19 = v18 == 0;
  if (v18)
  {
    __int16 v20 = [v18 localizedDescription];
    int v21 = +[NSString stringWithFormat:@"File: NFExpressModeManager, Function: activateApplets, Error: %@", v20];
    sub_100199288((uint64_t)NFBugCapture, @"Failed to update express config on eSE", v21, 0);

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v22 = NFLogGetLogger();
    if (v22)
    {
      uint64_t v23 = (void (*)(uint64_t, const char *, ...))v22;
      int v24 = object_getClass((id)a1);
      BOOL v25 = class_isMetaClass(v24);
      os_log_type_t v37 = object_getClassName((id)a1);
      int v39 = sel_getName("activateConfig");
      uint64_t v26 = 45;
      if (v25) {
        uint64_t v26 = 43;
      }
      v23(3, "%c[%{public}s %{public}s]:%i failed to activate express config on eSE: %{public}@", v26, v37, v39, 1119, v18);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = object_getClass((id)a1);
      if (class_isMetaClass(v28)) {
        int v29 = 43;
      }
      else {
        int v29 = 45;
      }
      int v30 = object_getClassName((id)a1);
      uint64_t v31 = sel_getName("activateConfig");
      *(_DWORD *)buf = 67110146;
      int v42 = v29;
      __int16 v43 = 2082;
      uint64_t v44 = v30;
      __int16 v45 = 2082;
      uint64_t v46 = v31;
      __int16 v47 = 1024;
      int v48 = 1119;
      __int16 v49 = 2114;
      int v50 = v18;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i failed to activate express config on eSE: %{public}@", buf, 0x2Cu);
    }
  }
  uint64_t v32 = *(void *)(a1 + 16);
  if (v32) {
    *(unsigned char *)(v32 + 220) = 0;
  }
  if (v40)
  {
    sub_100046E20((uint64_t)"com.apple.stockholm.express.applets.updated");
    uint64_t v33 = NFSharedSignpostLog();
    if (os_signpost_enabled(v33))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_MODE_APPLETS_UPDATED_NOTIFICATION", "com.apple.stockholm.express.applets.updated", buf, 2u);
    }
  }
  else if (v18)
  {
    sub_100046E20((uint64_t)"com.apple.stockholm.express.config.failure");
  }
  BOOL v34 = NFSharedSignpostLog();
  if (os_signpost_enabled(v34))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_ACTIVATE_APPLETS", "out", buf, 2u);
  }

  [*(id *)(a1 + 80) stopTimer];
  int v35 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;

  return v19;
}

void sub_100040848(uint64_t a1)
{
  id v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.txn.typeFTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(void *)os_activity_scope_state_s state = 0;
  *(void *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(5, "%s:%i Express Mode timeout.", "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke", 245);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s state = 136446466;
    *(void *)&state[4] = "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke";
    *(_WORD *)&state[12] = 1024;
    *(_DWORD *)&state[14] = 245;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Express Mode timeout.", state, 0x12u);
  }

  if (WeakRetained)
  {
    BOOL v6 = WeakRetained[15];
    *(void *)os_activity_scope_state_s state = _NSConcreteStackBlock;
    *(void *)&state[8] = 3221225472;
    *(void *)&state[16] = sub_10004C454;
    uint64_t v8 = &unk_100301C40;
    uint64_t v9 = WeakRetained;
    id v10 = "_handleExpressModeTimeout";
    dispatch_async(v6, state);
  }
}

void sub_1000409F4(uint64_t a1)
{
  id v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.txn.exitTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(void *)os_activity_scope_state_s state = 0;
  *(void *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(5, "%s:%i Max express mode operation timeout", "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke", 264);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s state = 136446466;
    *(void *)&state[4] = "-[NFExpressModeManager initExpressTransactionsStates]_block_invoke";
    *(_WORD *)&state[12] = 1024;
    *(_DWORD *)&state[14] = 264;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Max express mode operation timeout", state, 0x12u);
  }

  sub_100040B4C(WeakRetained, 1);
}

void sub_100040B4C(uint64_t a1, char a2)
{
  if (a1)
  {
    id v2 = *(NSObject **)(a1 + 120);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10004D860;
    v3[3] = &unk_100301BC8;
    v3[4] = a1;
    char v4 = a2;
    dispatch_async(v2, v3);
  }
}

void sub_100040BCC(void *a1)
{
  if (a1)
  {
    sub_100040C1C(a1);
    id v2 = (void *)a1[12];
    a1[12] = 0;

    id v3 = (void *)a1[11];
    a1[11] = 0;
  }
}

BOOL sub_100040C1C(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    objc_sync_enter(v2);
    [v2[12] stopTimer];
    [v2[11] stopTimer];
    *((_DWORD *)v2 + 40) = 0;
    *((unsigned char *)v2 + 157) = 0;
    *((_WORD *)v2 + 86) = 0;
    id v3 = v2[8];
    v2[8] = 0;

    objc_sync_exit(v2);
  }
  return a1 != 0;
}

void sub_100040C88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100040C9C(id a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v73.receiver = a1;
    v73.super_class = (Class)NFExpressModeManager;
    a1 = [super init];
    if (a1)
    {
      if (NF_isFeatureSupported())
      {
        if (v11 && v12 && v13)
        {
          objc_storeStrong((id *)a1 + 1, a2);
          objc_storeStrong((id *)a1 + 2, a3);
          objc_storeStrong((id *)a1 + 3, a4);
          objc_storeStrong((id *)a1 + 15, a5);
          uint64_t v14 = *((void *)a1 + 2);
          if (v14) {
            *(void *)(v14 + 264) = a1;
          }
          [*((id *)a1 + 3) setDelegate:a1];
          *((_DWORD *)a1 + 41) = -1;
          uint64_t v15 = sub_10020EC8C(v11, @"Express init", 1uLL);
          if (!v15)
          {
            *((void *)a1 + 17) = 0;
            __int16 v49 = +[NSUserDefaults standardUserDefaults];
            uint64_t v51 = [v49 objectForKey:@"ExpressModeEnabled"];

            if (v51)
            {
              unsigned int v52 = [v49 BOOLForKey:@"ExpressModeEnabled"];
              [v49 removeObjectForKey:@"ExpressModeEnabled"];
              *((void *)a1 + 17) = v52;
              [v49 setInteger:forKey:];
            }
            else
            {
              int v53 = [v49 objectForKey:@"ExpressModeControlState"];

              if (v53) {
                *((void *)a1 + 17) = [v49 integerForKey:@"ExpressModeControlState"];
              }
            }
            *((unsigned char *)a1 + 171) = [v49 BOOLForKey:@"ecp2ExpressTestMode"];
            BOOL v54 = ([v49 BOOLForKey:@"ExpressModeFactoryTest"] & 1) != 0
               || *((unsigned char *)a1 + 171) != 0;
            *((unsigned char *)a1 + 170) = v54;
            *((void *)a1 + 1_Block_object_dispose(&STACK[0x2B0], 8) = 0;
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t Logger = NFLogGetLogger();
            if (Logger)
            {
              __int16 v56 = (void (*)(uint64_t, const char *, ...))Logger;
              Class Class = object_getClass(a1);
              BOOL isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName(a1);
              Name = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
              uint64_t v61 = 45;
              if (isMetaClass) {
                uint64_t v61 = 43;
              }
              v56(6, "%c[%{public}s %{public}s]:%i Enabled=%ld", v61, ClassName, Name, 345, *((void *)a1 + 17));
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            __int16 v62 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              int v63 = object_getClass(a1);
              if (class_isMetaClass(v63)) {
                int v64 = 43;
              }
              else {
                int v64 = 45;
              }
              int v65 = object_getClassName(a1);
              __int16 v66 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
              __int16 v67 = *((void *)a1 + 17);
              *(_DWORD *)buf = 67110146;
              int v75 = v64;
              __int16 v76 = 2082;
              uint64_t v77 = v65;
              __int16 v78 = 2082;
              uint64_t v79 = v66;
              __int16 v80 = 1024;
              int v81 = 345;
              __int16 v82 = 2048;
              BOOL v83 = v67;
              _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Enabled=%ld", buf, 0x2Cu);
            }

            int v68 = MKBDeviceUnlockedSinceBoot();
            if (*((void *)a1 + 17) == 1) {
              *((void *)a1 + 17) = v68 == 1;
            }
            if (v68 == 1) {
              sub_10003EF54((uint64_t)a1);
            }
            sub_1002114AC(v11, @"Express init");
            id v69 = objc_alloc_init((Class)NSMutableDictionary);
            uint64_t v16 = *((void *)a1 + 14);
            *((void *)a1 + 14) = v69;
            goto LABEL_40;
          }
          uint64_t v16 = v15;
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v17 = NFLogGetLogger();
          if (v17)
          {
            uint64_t v18 = (void (*)(uint64_t, const char *, ...))v17;
            BOOL v19 = object_getClass(a1);
            BOOL v20 = class_isMetaClass(v19);
            int v21 = object_getClassName(a1);
            __int16 v70 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
            uint64_t v22 = 45;
            if (v20) {
              uint64_t v22 = 43;
            }
            v18(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v22, v21, v70, 324, v16);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v23 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            int v24 = object_getClass(a1);
            if (class_isMetaClass(v24)) {
              int v25 = 43;
            }
            else {
              int v25 = 45;
            }
            uint64_t v26 = object_getClassName(a1);
            int v27 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
            *(_DWORD *)buf = 67110146;
            int v75 = v25;
            __int16 v76 = 2082;
            uint64_t v77 = v26;
            __int16 v78 = 2082;
            uint64_t v79 = v27;
            __int16 v80 = 1024;
            int v81 = 324;
            __int16 v82 = 2112;
            BOOL v83 = v16;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
          }

LABEL_39:
          __int16 v49 = a1;
          a1 = 0;
LABEL_40:

          goto LABEL_41;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v39 = NFLogGetLogger();
        if (v39)
        {
          char v40 = (void (*)(uint64_t, const char *, ...))v39;
          uint64_t v41 = object_getClass(a1);
          BOOL v42 = class_isMetaClass(v41);
          __int16 v43 = object_getClassName(a1);
          BOOL v72 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
          uint64_t v44 = 45;
          if (v42) {
            uint64_t v44 = 43;
          }
          v40(3, "%c[%{public}s %{public}s]:%i incorrect arguments", v44, v43, v72, 308);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v16 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        __int16 v45 = object_getClass(a1);
        if (class_isMetaClass(v45)) {
          int v46 = 43;
        }
        else {
          int v46 = 45;
        }
        __int16 v47 = object_getClassName(a1);
        int v48 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
        *(_DWORD *)buf = 67109890;
        int v75 = v46;
        __int16 v76 = 2082;
        uint64_t v77 = v47;
        __int16 v78 = 2082;
        uint64_t v79 = v48;
        __int16 v80 = 1024;
        int v81 = 308;
        uint32_t v38 = "%c[%{public}s %{public}s]:%i incorrect arguments";
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v28 = NFLogGetLogger();
        if (v28)
        {
          int v29 = (void (*)(uint64_t, const char *, ...))v28;
          int v30 = object_getClass(a1);
          BOOL v31 = class_isMetaClass(v30);
          uint64_t v32 = object_getClassName(a1);
          int v71 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
          uint64_t v33 = 45;
          if (v31) {
            uint64_t v33 = 43;
          }
          v29(3, "%c[%{public}s %{public}s]:%i Express is not supported", v33, v32, v71, 303);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v16 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        BOOL v34 = object_getClass(a1);
        if (class_isMetaClass(v34)) {
          int v35 = 43;
        }
        else {
          int v35 = 45;
        }
        uint64_t v36 = object_getClassName(a1);
        os_log_type_t v37 = sel_getName("initWithDelegate:driverWrapper:controllerManager:workQueue:");
        *(_DWORD *)buf = 67109890;
        int v75 = v35;
        __int16 v76 = 2082;
        uint64_t v77 = v36;
        __int16 v78 = 2082;
        uint64_t v79 = v37;
        __int16 v80 = 1024;
        int v81 = 303;
        uint32_t v38 = "%c[%{public}s %{public}s]:%i Express is not supported";
      }
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v38, buf, 0x22u);
      goto LABEL_39;
    }
  }
LABEL_41:

  return a1;
}

void sub_1000413E0(uint64_t a1)
{
  if (*(void *)(a1 + 136) == 1)
  {
    switch(*(unsigned char *)(a1 + 156))
    {
      case 1:
      case 5:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          id v3 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass((id)a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName((id)a1);
          Name = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v7 = 45;
          if (isMetaClass) {
            uint64_t v7 = 43;
          }
          v3(6, "%c[%{public}s %{public}s]:%i Override transit express only", v7, ClassName, Name, 1569);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v8 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = object_getClass((id)a1);
          if (class_isMetaClass(v9)) {
            int v10 = 43;
          }
          else {
            int v10 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v216 = v10;
          __int16 v217 = 2082;
          __int16 v218 = object_getClassName((id)a1);
          __int16 v219 = 2082;
          __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
          __int16 v221 = 1024;
          int v222 = 1569;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override transit express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 1;
        id v11 = *(void **)(a1 + 16);
        if (v11) {
          sub_1002155FC(v11, 1, 0);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v12 = NFLogGetLogger();
        if (v12)
        {
          id v13 = (void (*)(uint64_t, const char *, ...))v12;
          uint64_t v14 = object_getClass((id)a1);
          BOOL v15 = class_isMetaClass(v14);
          uint64_t v16 = object_getClassName((id)a1);
          uint64_t v17 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v18 = 45;
          if (v15) {
            uint64_t v18 = 43;
          }
          v13(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v18, v16, v17, 1572, *(unsigned int *)(a1 + 152));
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v19 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v20 = object_getClass((id)a1);
          if (class_isMetaClass(v20)) {
            int v21 = 43;
          }
          else {
            int v21 = 45;
          }
          uint64_t v22 = object_getClassName((id)a1);
          uint64_t v23 = sel_getName("_updateExpressModeDriverConfiguration");
          int v24 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          int v216 = v21;
          __int16 v217 = 2082;
          __int16 v218 = v22;
          __int16 v219 = 2082;
          __int16 v220 = v23;
          __int16 v221 = 1024;
          int v222 = 1572;
          __int16 v223 = 1024;
          int v224 = v24;
          int v25 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 2:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v49 = NFLogGetLogger();
        if (v49)
        {
          int v50 = (void (*)(uint64_t, const char *, ...))v49;
          uint64_t v51 = object_getClass((id)a1);
          BOOL v52 = class_isMetaClass(v51);
          int v53 = object_getClassName((id)a1);
          char v206 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v54 = 45;
          if (v52) {
            uint64_t v54 = 43;
          }
          v50(6, "%c[%{public}s %{public}s]:%i Override access express only", v54, v53, v206, 1577);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v55 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v56 = object_getClass((id)a1);
          if (class_isMetaClass(v56)) {
            int v57 = 43;
          }
          else {
            int v57 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v216 = v57;
          __int16 v217 = 2082;
          __int16 v218 = object_getClassName((id)a1);
          __int16 v219 = 2082;
          __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
          __int16 v221 = 1024;
          int v222 = 1577;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override access express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 2;
        __int16 v58 = *(void **)(a1 + 16);
        if (v58) {
          sub_1002155FC(v58, 2, 0);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v59 = NFLogGetLogger();
        if (v59)
        {
          __int16 v60 = (void (*)(uint64_t, const char *, ...))v59;
          uint64_t v61 = object_getClass((id)a1);
          BOOL v62 = class_isMetaClass(v61);
          int v63 = object_getClassName((id)a1);
          int v64 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v65 = 45;
          if (v62) {
            uint64_t v65 = 43;
          }
          v60(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v65, v63, v64, 1580, *(unsigned int *)(a1 + 152));
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v19 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v66 = object_getClass((id)a1);
          if (class_isMetaClass(v66)) {
            int v67 = 43;
          }
          else {
            int v67 = 45;
          }
          int v68 = object_getClassName((id)a1);
          id v69 = sel_getName("_updateExpressModeDriverConfiguration");
          int v70 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          int v216 = v67;
          __int16 v217 = 2082;
          __int16 v218 = v68;
          __int16 v219 = 2082;
          __int16 v220 = v69;
          __int16 v221 = 1024;
          int v222 = 1580;
          __int16 v223 = 1024;
          int v224 = v70;
          int v25 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 3:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v71 = NFLogGetLogger();
        if (v71)
        {
          BOOL v72 = (void (*)(uint64_t, const char *, ...))v71;
          objc_super v73 = object_getClass((id)a1);
          BOOL v74 = class_isMetaClass(v73);
          int v75 = object_getClassName((id)a1);
          v207 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v76 = 45;
          if (v74) {
            uint64_t v76 = 43;
          }
          v72(6, "%c[%{public}s %{public}s]:%i Override Generic-A express only", v76, v75, v207, 1585);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v77 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v78 = object_getClass((id)a1);
          if (class_isMetaClass(v78)) {
            int v79 = 43;
          }
          else {
            int v79 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v216 = v79;
          __int16 v217 = 2082;
          __int16 v218 = object_getClassName((id)a1);
          __int16 v219 = 2082;
          __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
          __int16 v221 = 1024;
          int v222 = 1585;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override Generic-A express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 4;
        __int16 v80 = *(void **)(a1 + 16);
        if (v80) {
          sub_1002155FC(v80, 4, 0);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v81 = NFLogGetLogger();
        if (v81)
        {
          __int16 v82 = (void (*)(uint64_t, const char *, ...))v81;
          BOOL v83 = object_getClass((id)a1);
          BOOL v84 = class_isMetaClass(v83);
          uint64_t v85 = object_getClassName((id)a1);
          long long v86 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v87 = 45;
          if (v84) {
            uint64_t v87 = 43;
          }
          v82(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v87, v85, v86, 1588, *(unsigned int *)(a1 + 152));
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v19 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          int v88 = object_getClass((id)a1);
          if (class_isMetaClass(v88)) {
            int v89 = 43;
          }
          else {
            int v89 = 45;
          }
          uint64_t v90 = object_getClassName((id)a1);
          uint64_t v91 = sel_getName("_updateExpressModeDriverConfiguration");
          int v92 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          int v216 = v89;
          __int16 v217 = 2082;
          __int16 v218 = v90;
          __int16 v219 = 2082;
          __int16 v220 = v91;
          __int16 v221 = 1024;
          int v222 = 1588;
          __int16 v223 = 1024;
          int v224 = v92;
          int v25 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 4:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v93 = NFLogGetLogger();
        if (v93)
        {
          int v94 = (void (*)(uint64_t, const char *, ...))v93;
          __int16 v95 = object_getClass((id)a1);
          BOOL v96 = class_isMetaClass(v95);
          unsigned __int16 v97 = object_getClassName((id)a1);
          v208 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v98 = 45;
          if (v96) {
            uint64_t v98 = 43;
          }
          v94(6, "%c[%{public}s %{public}s]:%i Override ECP2 express only", v98, v97, v208, 1601);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        unsigned __int8 v99 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v100 = object_getClass((id)a1);
          if (class_isMetaClass(v100)) {
            int v101 = 43;
          }
          else {
            int v101 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v216 = v101;
          __int16 v217 = 2082;
          __int16 v218 = object_getClassName((id)a1);
          __int16 v219 = 2082;
          __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
          __int16 v221 = 1024;
          int v222 = 1601;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override ECP2 express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 16;
        __int16 v102 = *(void **)(a1 + 16);
        if (v102) {
          sub_1002155FC(v102, 16, 0);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v103 = NFLogGetLogger();
        if (v103)
        {
          __int16 v104 = (void (*)(uint64_t, const char *, ...))v103;
          v105 = object_getClass((id)a1);
          BOOL v106 = class_isMetaClass(v105);
          v107 = object_getClassName((id)a1);
          __int16 v108 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v109 = 45;
          if (v106) {
            uint64_t v109 = 43;
          }
          v104(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v109, v107, v108, 1604, *(unsigned int *)(a1 + 152));
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v19 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v110 = object_getClass((id)a1);
          if (class_isMetaClass(v110)) {
            int v111 = 43;
          }
          else {
            int v111 = 45;
          }
          BOOL v112 = object_getClassName((id)a1);
          id v113 = sel_getName("_updateExpressModeDriverConfiguration");
          int v114 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          int v216 = v111;
          __int16 v217 = 2082;
          __int16 v218 = v112;
          __int16 v219 = 2082;
          __int16 v220 = v113;
          __int16 v221 = 1024;
          int v222 = 1604;
          __int16 v223 = 1024;
          int v224 = v114;
          int v25 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      case 6:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v115 = NFLogGetLogger();
        if (v115)
        {
          uint64_t v116 = (void (*)(uint64_t, const char *, ...))v115;
          int v117 = object_getClass((id)a1);
          BOOL v118 = class_isMetaClass(v117);
          BOOL v119 = object_getClassName((id)a1);
          v209 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v120 = 45;
          if (v118) {
            uint64_t v120 = 43;
          }
          v116(6, "%c[%{public}s %{public}s]:%i Override SinglePoll express only", v120, v119, v209, 1593);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v121 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
        {
          v122 = object_getClass((id)a1);
          if (class_isMetaClass(v122)) {
            int v123 = 43;
          }
          else {
            int v123 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v216 = v123;
          __int16 v217 = 2082;
          __int16 v218 = object_getClassName((id)a1);
          __int16 v219 = 2082;
          __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
          __int16 v221 = 1024;
          int v222 = 1593;
          _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Override SinglePoll express only", buf, 0x22u);
        }

        *(_DWORD *)(a1 + 152) = 32;
        BOOL v124 = *(void **)(a1 + 16);
        if (v124) {
          sub_1002155FC(v124, 32, 0);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v125 = NFLogGetLogger();
        if (v125)
        {
          int v126 = (void (*)(uint64_t, const char *, ...))v125;
          v127 = object_getClass((id)a1);
          BOOL v128 = class_isMetaClass(v127);
          int v129 = object_getClassName((id)a1);
          uint64_t v130 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v131 = 45;
          if (v128) {
            uint64_t v131 = 43;
          }
          v126(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v131, v129, v130, 1596, *(unsigned int *)(a1 + 152));
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v19 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          id v132 = object_getClass((id)a1);
          if (class_isMetaClass(v132)) {
            int v133 = 43;
          }
          else {
            int v133 = 45;
          }
          id v134 = object_getClassName((id)a1);
          id v135 = sel_getName("_updateExpressModeDriverConfiguration");
          int v136 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67110146;
          int v216 = v133;
          __int16 v217 = 2082;
          __int16 v218 = v134;
          __int16 v219 = 2082;
          __int16 v220 = v135;
          __int16 v221 = 1024;
          int v222 = 1596;
          __int16 v223 = 1024;
          int v224 = v136;
          int v25 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
          goto LABEL_191;
        }
        goto LABEL_193;
      default:
        *(_DWORD *)(a1 + 152) = 0;
        uint64_t v36 = *(int64x2_t **)(a1 + 40);
        if (!v36 || (uint64_t v37 = v36[1].i64[1], v38 = v36[2], !(vaddvq_s64(vaddq_s64(v38, v36[3])) + v37 + v36[4].i64[0])))
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v39 = NFLogGetLogger();
          if (v39)
          {
            char v40 = (void (*)(uint64_t, const char *, ...))v39;
            uint64_t v41 = object_getClass((id)a1);
            BOOL v42 = class_isMetaClass(v41);
            __int16 v43 = object_getClassName((id)a1);
            __int16 v205 = sel_getName("_updateExpressModeDriverConfiguration");
            uint64_t v44 = 45;
            if (v42) {
              uint64_t v44 = 43;
            }
            v40(6, "%c[%{public}s %{public}s]:%i No express modes active", v44, v43, v205, 1611);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          BOOL v19 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_193;
          }
          __int16 v45 = object_getClass((id)a1);
          if (class_isMetaClass(v45)) {
            int v46 = 43;
          }
          else {
            int v46 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v216 = v46;
          __int16 v217 = 2082;
          __int16 v218 = object_getClassName((id)a1);
          __int16 v219 = 2082;
          __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
          __int16 v221 = 1024;
          int v222 = 1611;
          int v25 = "%c[%{public}s %{public}s]:%i No express modes active";
          __int16 v47 = v19;
          uint32_t v48 = 34;
LABEL_192:
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v25, buf, v48);
LABEL_193:

          return;
        }
        if (v37 | v38.i64[0])
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v137 = NFLogGetLogger();
          if (v137)
          {
            id v138 = (void (*)(uint64_t, const char *, ...))v137;
            int v139 = object_getClass((id)a1);
            BOOL v140 = class_isMetaClass(v139);
            uint64_t v141 = object_getClassName((id)a1);
            v210 = sel_getName("_updateExpressModeDriverConfiguration");
            uint64_t v142 = 45;
            if (v140) {
              uint64_t v142 = 43;
            }
            v138(6, "%c[%{public}s %{public}s]:%i Express mode configured for typeF Transit", v142, v141, v210, 1617);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          BOOL v143 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v144 = object_getClass((id)a1);
            if (class_isMetaClass(v144)) {
              int v145 = 43;
            }
            else {
              int v145 = 45;
            }
            *(_DWORD *)buf = 67109890;
            int v216 = v145;
            __int16 v217 = 2082;
            __int16 v218 = object_getClassName((id)a1);
            __int16 v219 = 2082;
            __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
            __int16 v221 = 1024;
            int v222 = 1617;
            _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for typeF Transit", buf, 0x22u);
          }

          uint64_t v146 = *(_DWORD *)(a1 + 152) | 1u;
          *(_DWORD *)(a1 + 152) = v146;
          uint64_t v36 = *(int64x2_t **)(a1 + 40);
          if (!v36) {
            goto LABEL_182;
          }
        }
        else
        {
          uint64_t v146 = 0;
        }
        if (!v36[2].i64[1]) {
          goto LABEL_196;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v147 = NFLogGetLogger();
        if (v147)
        {
          int v148 = (void (*)(uint64_t, const char *, ...))v147;
          v149 = object_getClass((id)a1);
          BOOL v150 = class_isMetaClass(v149);
          uint64_t v151 = object_getClassName((id)a1);
          v211 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v152 = 45;
          if (v150) {
            uint64_t v152 = 43;
          }
          v148(6, "%c[%{public}s %{public}s]:%i Express mode configured for ECPAccess", v152, v151, v211, 1621);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v153 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
        {
          v154 = object_getClass((id)a1);
          if (class_isMetaClass(v154)) {
            int v155 = 43;
          }
          else {
            int v155 = 45;
          }
          id v156 = object_getClassName((id)a1);
          uint64_t v157 = sel_getName("_updateExpressModeDriverConfiguration");
          *(_DWORD *)buf = 67109890;
          int v216 = v155;
          __int16 v217 = 2082;
          __int16 v218 = v156;
          __int16 v219 = 2082;
          __int16 v220 = v157;
          __int16 v221 = 1024;
          int v222 = 1621;
          _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for ECPAccess", buf, 0x22u);
        }

        uint64_t v146 = *(_DWORD *)(a1 + 152) | 2u;
        *(_DWORD *)(a1 + 152) = v146;
        uint64_t v36 = *(int64x2_t **)(a1 + 40);
        if (v36)
        {
LABEL_196:
          if (!v36[3].i64[0]) {
            goto LABEL_197;
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v158 = NFLogGetLogger();
          if (v158)
          {
            id v159 = (void (*)(uint64_t, const char *, ...))v158;
            long long v160 = object_getClass((id)a1);
            BOOL v161 = class_isMetaClass(v160);
            long long v162 = object_getClassName((id)a1);
            __int16 v212 = sel_getName("_updateExpressModeDriverConfiguration");
            uint64_t v163 = 45;
            if (v161) {
              uint64_t v163 = 43;
            }
            v159(6, "%c[%{public}s %{public}s]:%i Express mode configured for Generic-A", v163, v162, v212, 1625);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          long long v164 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
          {
            long long v165 = object_getClass((id)a1);
            if (class_isMetaClass(v165)) {
              int v166 = 43;
            }
            else {
              int v166 = 45;
            }
            BOOL v167 = object_getClassName((id)a1);
            v168 = sel_getName("_updateExpressModeDriverConfiguration");
            *(_DWORD *)buf = 67109890;
            int v216 = v166;
            __int16 v217 = 2082;
            __int16 v218 = v167;
            __int16 v219 = 2082;
            __int16 v220 = v168;
            __int16 v221 = 1024;
            int v222 = 1625;
            _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for Generic-A", buf, 0x22u);
          }

          uint64_t v146 = *(_DWORD *)(a1 + 152) | 4u;
          *(_DWORD *)(a1 + 152) = v146;
          uint64_t v36 = *(int64x2_t **)(a1 + 40);
          if (v36)
          {
LABEL_197:
            if (!v36[4].i64[0]) {
              goto LABEL_198;
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v169 = NFLogGetLogger();
            if (v169)
            {
              v170 = (void (*)(uint64_t, const char *, ...))v169;
              v171 = object_getClass((id)a1);
              BOOL v172 = class_isMetaClass(v171);
              v173 = object_getClassName((id)a1);
              v213 = sel_getName("_updateExpressModeDriverConfiguration");
              uint64_t v174 = 45;
              if (v172) {
                uint64_t v174 = 43;
              }
              v170(6, "%c[%{public}s %{public}s]:%i Express mode configured for SinglePoll", v174, v173, v213, 1629);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            long long v175 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
            {
              long long v176 = object_getClass((id)a1);
              if (class_isMetaClass(v176)) {
                int v177 = 43;
              }
              else {
                int v177 = 45;
              }
              id v178 = object_getClassName((id)a1);
              id v179 = sel_getName("_updateExpressModeDriverConfiguration");
              *(_DWORD *)buf = 67109890;
              int v216 = v177;
              __int16 v217 = 2082;
              __int16 v218 = v178;
              __int16 v219 = 2082;
              __int16 v220 = v179;
              __int16 v221 = 1024;
              int v222 = 1629;
              _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for SinglePoll", buf, 0x22u);
            }

            uint64_t v146 = *(_DWORD *)(a1 + 152) | 0x20u;
            *(_DWORD *)(a1 + 152) = v146;
            uint64_t v36 = *(int64x2_t **)(a1 + 40);
            if (v36)
            {
LABEL_198:
              if (v36[3].i64[1])
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v180 = NFLogGetLogger();
                if (v180)
                {
                  id v181 = (void (*)(uint64_t, const char *, ...))v180;
                  int v182 = object_getClass((id)a1);
                  BOOL v183 = class_isMetaClass(v182);
                  uint64_t v184 = object_getClassName((id)a1);
                  __int16 v214 = sel_getName("_updateExpressModeDriverConfiguration");
                  uint64_t v185 = 45;
                  if (v183) {
                    uint64_t v185 = 43;
                  }
                  v181(6, "%c[%{public}s %{public}s]:%i Express mode configured for ECP2", v185, v184, v214, 1633);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                int v186 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
                {
                  __int16 v187 = object_getClass((id)a1);
                  if (class_isMetaClass(v187)) {
                    int v188 = 43;
                  }
                  else {
                    int v188 = 45;
                  }
                  __int16 v189 = object_getClassName((id)a1);
                  __int16 v190 = sel_getName("_updateExpressModeDriverConfiguration");
                  *(_DWORD *)buf = 67109890;
                  int v216 = v188;
                  __int16 v217 = 2082;
                  __int16 v218 = v189;
                  __int16 v219 = 2082;
                  __int16 v220 = v190;
                  __int16 v221 = 1024;
                  int v222 = 1633;
                  _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode configured for ECP2", buf, 0x22u);
                }

                uint64_t v146 = *(_DWORD *)(a1 + 152) | 0x10u;
                *(_DWORD *)(a1 + 152) = v146;
              }
            }
          }
        }
LABEL_182:
        sub_1002155FC(*(void **)(a1 + 16), v146, 0);
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v191 = NFLogGetLogger();
        if (v191)
        {
          id v192 = (void (*)(uint64_t, const char *, ...))v191;
          v193 = object_getClass((id)a1);
          BOOL v194 = class_isMetaClass(v193);
          id v195 = object_getClassName((id)a1);
          uint64_t v196 = sel_getName("_updateExpressModeDriverConfiguration");
          uint64_t v197 = 45;
          if (v194) {
            uint64_t v197 = 43;
          }
          v192(6, "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x", v197, v195, v196, 1638, *(unsigned int *)(a1 + 152));
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v19 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_193;
        }
        __int16 v198 = object_getClass((id)a1);
        if (class_isMetaClass(v198)) {
          int v199 = 43;
        }
        else {
          int v199 = 45;
        }
        id v200 = object_getClassName((id)a1);
        long long v201 = sel_getName("_updateExpressModeDriverConfiguration");
        int v202 = *(_DWORD *)(a1 + 152);
        *(_DWORD *)buf = 67110146;
        int v216 = v199;
        __int16 v217 = 2082;
        __int16 v218 = v200;
        __int16 v219 = 2082;
        __int16 v220 = v201;
        __int16 v221 = 1024;
        int v222 = 1638;
        __int16 v223 = 1024;
        int v224 = v202;
        int v25 = "%c[%{public}s %{public}s]:%i Express Mode config: 0x%04x";
LABEL_191:
        __int16 v47 = v19;
        uint32_t v48 = 40;
        goto LABEL_192;
    }
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v26 = NFLogGetLogger();
  if (v26)
  {
    int v27 = (void (*)(uint64_t, const char *, ...))v26;
    uint64_t v28 = object_getClass((id)a1);
    BOOL v29 = class_isMetaClass(v28);
    int v30 = object_getClassName((id)a1);
    long long v204 = sel_getName("_updateExpressModeDriverConfiguration");
    uint64_t v31 = 45;
    if (v29) {
      uint64_t v31 = 43;
    }
    v27(6, "%c[%{public}s %{public}s]:%i Disabling express config", v31, v30, v204, 1562);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v32 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = object_getClass((id)a1);
    if (class_isMetaClass(v33)) {
      int v34 = 43;
    }
    else {
      int v34 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v216 = v34;
    __int16 v217 = 2082;
    __int16 v218 = object_getClassName((id)a1);
    __int16 v219 = 2082;
    __int16 v220 = sel_getName("_updateExpressModeDriverConfiguration");
    __int16 v221 = 1024;
    int v222 = 1562;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disabling express config", buf, 0x22u);
  }

  int v35 = *(void **)(a1 + 16);
  if (v35) {
    sub_1002155FC(v35, 0, 0);
  }
}

NSObject *sub_1000429A8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    char v4 = NFSharedSignpostLog();
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", (const char *)&unk_100286819, buf, 2u);
    }

    if (!*(void *)(a1 + 40)) {
      sub_10003EF54(a1);
    }
    if (*(unsigned char *)(a1 + 170))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        BOOL v6 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("setExpressModeControlState:");
        uint64_t v10 = 45;
        if (isMetaClass) {
          uint64_t v10 = 43;
        }
        v6(4, "%c[%{public}s %{public}s]:%i Forcing express mode on when factoryTestMode is enabled", v10, ClassName, Name, 423);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = object_getClass((id)a1);
        if (class_isMetaClass(v12)) {
          int v13 = 43;
        }
        else {
          int v13 = 45;
        }
        uint64_t v14 = object_getClassName((id)a1);
        BOOL v15 = sel_getName("setExpressModeControlState:");
        *(_DWORD *)buf = 67109890;
        int v96 = v13;
        __int16 v97 = 2082;
        uint64_t v98 = v14;
        __int16 v99 = 2082;
        __int16 v100 = v15;
        __int16 v101 = 1024;
        int v102 = 423;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Forcing express mode on when factoryTestMode is enabled", buf, 0x22u);
      }

      a2 = 1;
    }
    if (a2 != *(void *)(a1 + 136))
    {
      uint64_t v16 = +[NSUserDefaults standardUserDefaults];
      uint64_t v17 = [v16 objectForKey:@"ExpressModeEnabled"];

      if (v17) {
        [v16 removeObjectForKey:@"ExpressModeEnabled"];
      }
      [v16 setInteger:a2 forKey:@"ExpressModeControlState"];
      if (a2 == 1)
      {
        uint64_t v18 = NFSharedSignpostLog();
        if (os_signpost_enabled(v18))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "enabling express", buf, 2u);
        }

        uint64_t v19 = sub_10020EC8C(*(void **)(a1 + 16), @"Enable Express", 1uLL);
        if (v19)
        {
          BOOL v20 = (__CFString *)v19;
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v21 = NFLogGetLogger();
          if (v21)
          {
            uint64_t v22 = (void (*)(uint64_t, const char *, ...))v21;
            uint64_t v23 = object_getClass((id)a1);
            BOOL v24 = class_isMetaClass(v23);
            uint64_t v87 = object_getClassName((id)a1);
            uint64_t v90 = sel_getName("setExpressModeControlState:");
            uint64_t v25 = 45;
            if (v24) {
              uint64_t v25 = 43;
            }
            v22(4, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v25, v87, v90, 441, v20);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v26 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            int v27 = object_getClass((id)a1);
            if (class_isMetaClass(v27)) {
              int v28 = 43;
            }
            else {
              int v28 = 45;
            }
            BOOL v29 = object_getClassName((id)a1);
            int v30 = sel_getName("setExpressModeControlState:");
            *(_DWORD *)buf = 67110146;
            int v96 = v28;
            __int16 v97 = 2082;
            uint64_t v98 = v29;
            __int16 v99 = 2082;
            __int16 v100 = v30;
            __int16 v101 = 1024;
            int v102 = 441;
            __int16 v103 = 2112;
            CFStringRef v104 = v20;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
          }

          uint64_t v31 = NFSharedSignpostLog();
          if (os_signpost_enabled(v31))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "failed to open session", buf, 2u);
          }

          *(void *)(a1 + 136) = 0;
          id v32 = objc_alloc((Class)NSError);
          uint64_t v33 = +[NSString stringWithUTF8String:"nfcd"];
          id v34 = [(__CFString *)v20 code];
          v93[0] = NSLocalizedDescriptionKey;
          if ((uint64_t)[(__CFString *)v20 code] > 70) {
            uint64_t v35 = 71;
          }
          else {
            uint64_t v35 = (uint64_t)[(__CFString *)v20 code];
          }
          int v63 = +[NSString stringWithUTF8String:off_100301908[v35]];
          v94[0] = v63;
          v94[1] = v20;
          v93[1] = NSUnderlyingErrorKey;
          v93[2] = @"Line";
          v94[2] = &off_10031A278;
          v93[3] = @"Method";
          id v64 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("setExpressModeControlState:")];
          v94[3] = v64;
          void v93[4] = NSDebugDescriptionErrorKey;
          id v65 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("setExpressModeControlState:"), 444];
          v94[4] = v65;
          __int16 v66 = +[NSDictionary dictionaryWithObjects:v94 forKeys:v93 count:5];
          id v67 = [v32 initWithDomain:v33 code:v34 userInfo:v66];

          int v68 = v67;
          id v69 = v68;
LABEL_91:

          goto LABEL_92;
        }
        *(void *)(a1 + 136) = 1;
        sub_10003FAA0(a1);
        __int16 v47 = +[_NFHardwareManager sharedHardwareManager];
        uint32_t v48 = [v47 controllerInfo];
        unsigned int v49 = [v48 hasLPEMSupport];

        if (v49)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v50 = NFLogGetLogger();
          if (v50)
          {
            uint64_t v51 = (void (*)(uint64_t, const char *, ...))v50;
            BOOL v52 = object_getClass((id)a1);
            BOOL v53 = class_isMetaClass(v52);
            uint64_t v54 = object_getClassName((id)a1);
            uint64_t v91 = sel_getName("setExpressModeControlState:");
            uint64_t v55 = 45;
            if (v53) {
              uint64_t v55 = 43;
            }
            v51(6, "%c[%{public}s %{public}s]:%i Updating LPEM config after enabling express", v55, v54, v91, 454);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          __int16 v56 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            int v57 = object_getClass((id)a1);
            if (class_isMetaClass(v57)) {
              int v58 = 43;
            }
            else {
              int v58 = 45;
            }
            uint64_t v59 = object_getClassName((id)a1);
            __int16 v60 = sel_getName("setExpressModeControlState:");
            *(_DWORD *)buf = 67109890;
            int v96 = v58;
            __int16 v97 = 2082;
            uint64_t v98 = v59;
            __int16 v99 = 2082;
            __int16 v100 = v60;
            __int16 v101 = 1024;
            int v102 = 454;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Updating LPEM config after enabling express", buf, 0x22u);
          }

          uint64_t v61 = NFSharedSignpostLog();
          if (os_signpost_enabled(v61))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v61, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "enabling LPEM", buf, 2u);
          }

          if (*(unsigned char *)(a1 + 170))
          {
            if (*(unsigned char *)(a1 + 171)) {
              uint64_t v62 = 16;
            }
            else {
              uint64_t v62 = 4;
            }
          }
          else
          {
            uint64_t v62 = *(unsigned int *)(a1 + 152);
          }
          sub_1002155FC(*(void **)(a1 + 16), v62, 1);
          sub_1001AA4BC(*(void **)(a1 + 16), 1);
        }
      }
      else
      {
        uint64_t v36 = *(void *)(a1 + 136);
        uint64_t v37 = NFSharedSignpostLog();
        BOOL v38 = os_signpost_enabled(v37);
        if (v36 == 1)
        {
          if (v38)
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "disabling express", buf, 2u);
          }

          id v39 = [*(id *)(a1 + 40) deactivateExpressConfig];
          *(void *)(a1 + 136) = a2;
          char v40 = NFSharedSignpostLog();
          if (os_signpost_enabled(v40))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "expressConfig deactivated", buf, 2u);
          }

          sub_1000413E0(a1);
          uint64_t v41 = NFSharedSignpostLog();
          if (os_signpost_enabled(v41))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "driver config updated", buf, 2u);
          }

          BOOL v42 = +[_NFHardwareManager sharedHardwareManager];
          __int16 v43 = [v42 controllerInfo];
          unsigned int v44 = [v43 hasLPEMSupport];

          if (v44)
          {
            __int16 v45 = NFSharedSignpostLog();
            if (os_signpost_enabled(v45))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "disabling LPEM", buf, 2u);
            }

            sub_1001AA914(*(void *)(a1 + 16), 1);
          }
          sub_1002114AC(*(void **)(a1 + 16), @"Enable Express");
          int v46 = NFSharedSignpostLog();
          if (os_signpost_enabled(v46))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "express disabled", buf, 2u);
          }
        }
        else
        {
          if (v38)
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", "in bio-lock", buf, 2u);
          }

          *(void *)(a1 + 136) = a2;
        }
      }
      int v70 = *(void **)(a1 + 40);
      if (v70) {
        uint64_t v71 = (void *)v70[2];
      }
      else {
        uint64_t v71 = 0;
      }
      id v72 = v71;
      unsigned int v73 = [v70 hasUWBKeys:v72];

      if (v73)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v74 = NFLogGetLogger();
        if (v74)
        {
          int v75 = (void (*)(uint64_t, const char *, ...))v74;
          uint64_t v76 = object_getClass((id)a1);
          BOOL v77 = class_isMetaClass(v76);
          int v88 = object_getClassName((id)a1);
          int v92 = sel_getName("setExpressModeControlState:");
          uint64_t v78 = 45;
          if (v77) {
            uint64_t v78 = 43;
          }
          v75(6, "%c[%{public}s %{public}s]:%i posting %{public}@ to SESD", v78, v88, v92, 489, @"com.apple.stockholm.express.keys.uwb.changed");
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v79 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v80 = object_getClass((id)a1);
          if (class_isMetaClass(v80)) {
            int v81 = 43;
          }
          else {
            int v81 = 45;
          }
          __int16 v82 = object_getClassName((id)a1);
          BOOL v83 = sel_getName("setExpressModeControlState:");
          *(_DWORD *)buf = 67110146;
          int v96 = v81;
          __int16 v97 = 2082;
          uint64_t v98 = v82;
          __int16 v99 = 2082;
          __int16 v100 = v83;
          __int16 v101 = 1024;
          int v102 = 489;
          __int16 v103 = 2114;
          CFStringRef v104 = @"com.apple.stockholm.express.keys.uwb.changed";
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i posting %{public}@ to SESD", buf, 0x2Cu);
        }

        BOOL v84 = +[_NFHardwareManager sharedHardwareManager];
        uint64_t v85 = [v84 sesdEventPublisher];
        [v85 sendXpcNotificationEventWithString:@"com.apple.stockholm.express.keys.uwb.changed"];
      }
    }
    int v68 = NFSharedSignpostLog();
    if (os_signpost_enabled(v68))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v68, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressModeControlState", (const char *)&unk_100286819, buf, 2u);
    }
    id v69 = 0;
    goto LABEL_91;
  }
  id v69 = 0;
LABEL_92:

  return v69;
}

void sub_10004360C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("pauseExpressMode:suspendFieldDetect:");
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v7(6, "%c[%{public}s %{public}s]:%i pause=%{public}d, suspendFD=%{public}d", v11, ClassName, Name, 510, a2, a3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = object_getClass(a1);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      *(_DWORD *)buf = 67110402;
      int v23 = v14;
      __int16 v24 = 2082;
      uint64_t v25 = object_getClassName(a1);
      __int16 v26 = 2082;
      int v27 = sel_getName("pauseExpressMode:suspendFieldDetect:");
      __int16 v28 = 1024;
      int v29 = 510;
      __int16 v30 = 1026;
      unsigned int v31 = a2;
      __int16 v32 = 1026;
      unsigned int v33 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i pause=%{public}d, suspendFD=%{public}d", buf, 0x2Eu);
    }

    a1[168] = a2;
    BOOL v15 = +[_NFHardwareManager sharedHardwareManager];
    uint64_t v16 = v15;
    if (a3)
    {
      if (v15) {
        uint64_t v17 = (void *)v15[2];
      }
      else {
        uint64_t v17 = 0;
      }
      id v18 = v17;
      uint64_t v19 = v18;
      if (a2)
      {
        [v18 suspend:@"NFExpressModeManager"];

        uint64_t v19 = +[NFRoutingConfig routingOffWithFD:0];
        id v20 = [v16 setRoutingConfig:v19];
      }
      else
      {
        [v18 resume:@"NFExpressModeManager"];
      }
    }
    else
    {
      [v15 maybeStartNextSession];
    }
  }
}

void sub_100043854(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 174) = 0;
    if (*(void *)(a1 + 104))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v3 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("cancelSinglePollAssertion");
        uint64_t v7 = 45;
        if (isMetaClass) {
          uint64_t v7 = 43;
        }
        v3(6, "%c[%{public}s %{public}s]:%i Cancelling express mode assertion", v7, ClassName, Name, 581);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = object_getClass((id)a1);
        if (class_isMetaClass(v9)) {
          int v10 = 43;
        }
        else {
          int v10 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v14 = v10;
        __int16 v15 = 2082;
        uint64_t v16 = object_getClassName((id)a1);
        __int16 v17 = 2082;
        id v18 = sel_getName("cancelSinglePollAssertion");
        __int16 v19 = 1024;
        int v20 = 581;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Cancelling express mode assertion", buf, 0x22u);
      }

      [*(id *)(a1 + 104) stopTimer];
      uint64_t v11 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = 0;
    }
  }
}

id sub_1000439FC(uint64_t a1, void *a2, BOOL a3, uint64_t a4)
{
  id v65 = a2;
  if (a1)
  {
    uint64_t v7 = NFSharedSignpostLog();
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", (const char *)&unk_100286819, buf, 2u);
    }

    if (!*(void *)(a1 + 40)) {
      sub_10003EF54(a1);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
      uint64_t v12 = 45;
      if (isMetaClass) {
        uint64_t v12 = 43;
      }
      v9(6, "%c[%{public}s %{public}s]:%i restoreAuthorization=%d", v12, ClassName, Name, 596, a3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = object_getClass((id)a1);
      if (class_isMetaClass(v14)) {
        int v15 = 43;
      }
      else {
        int v15 = 45;
      }
      uint64_t v16 = object_getClassName((id)a1);
      __int16 v17 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
      *(_DWORD *)buf = 67110146;
      int v71 = v15;
      __int16 v72 = 2082;
      unsigned int v73 = v16;
      __int16 v74 = 2082;
      int v75 = v17;
      __int16 v76 = 1024;
      int v77 = 596;
      __int16 v78 = 1024;
      BOOL v79 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i restoreAuthorization=%d", buf, 0x28u);
    }

    if (*(unsigned char *)(a1 + 170))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v18 = NFLogGetLogger();
      if (v18)
      {
        __int16 v19 = (void (*)(uint64_t, const char *, ...))v18;
        int v20 = object_getClass((id)a1);
        BOOL v21 = class_isMetaClass(v20);
        uint64_t v22 = object_getClassName((id)a1);
        int v63 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        uint64_t v23 = 45;
        if (v21) {
          uint64_t v23 = 43;
        }
        v19(3, "%c[%{public}s %{public}s]:%i Can't change express applets when factory test mode is enabled", v23, v22, v63, 599);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = object_getClass((id)a1);
        if (class_isMetaClass(v25)) {
          int v26 = 43;
        }
        else {
          int v26 = 45;
        }
        int v27 = object_getClassName((id)a1);
        __int16 v28 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        *(_DWORD *)buf = 67109890;
        int v71 = v26;
        __int16 v72 = 2082;
        unsigned int v73 = v27;
        __int16 v74 = 2082;
        int v75 = v28;
        __int16 v76 = 1024;
        int v77 = 599;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Can't change express applets when factory test mode is enabled", buf, 0x22u);
      }

      int v29 = NFSharedSignpostLog();
      if (os_signpost_enabled(v29))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "skip due to factory mode", buf, 2u);
      }

      id v30 = objc_alloc((Class)NSError);
      unsigned int v31 = +[NSString stringWithUTF8String:"nfcd"];
      v68[0] = NSLocalizedDescriptionKey;
      __int16 v32 = +[NSString stringWithUTF8String:"Invalid State"];
      v69[0] = v32;
      v69[1] = &off_10031A290;
      v68[1] = @"Line";
      v68[2] = @"Method";
      id v33 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:")];
      v69[2] = v33;
      v68[3] = NSDebugDescriptionErrorKey;
      id v34 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:"), 601];
      v69[3] = v34;
      uint64_t v35 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:4];
      id v36 = [v30 initWithDomain:v31 code:12 userInfo:v35];
    }
    else
    {
      [*(id *)(a1 + 40) dumpConfig:v65 logLevel:6 prefix:@"new config"];
      uint64_t v37 = NFSharedSignpostLog();
      if (os_signpost_enabled(v37))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "reconfiguring", buf, 2u);
      }

      unsigned int v31 = [*(id *)(a1 + 40) reconfigureWithArray:v65 restoreAuthorization:a3 updateStorage:a4];
      if (v31)
      {
        id v38 = objc_alloc((Class)NSError);
        id v39 = +[NSString stringWithUTF8String:"nfcd"];
        id v40 = [v31 code];
        v66[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)[v31 code] > 70) {
          uint64_t v41 = 71;
        }
        else {
          uint64_t v41 = (uint64_t)[v31 code];
        }
        BOOL v42 = +[NSString stringWithUTF8String:off_100301908[v41]];
        v67[0] = v42;
        v67[1] = v31;
        v66[1] = NSUnderlyingErrorKey;
        v66[2] = @"Line";
        v67[2] = &off_10031A2A8;
        v66[3] = @"Method";
        id v43 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:")];
        v67[3] = v43;
        v66[4] = NSDebugDescriptionErrorKey;
        id v44 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:"), 612];
        v67[4] = v44;
        __int16 v45 = +[NSDictionary dictionaryWithObjects:v67 forKeys:v66 count:5];
        id v36 = [v38 initWithDomain:v39 code:v40 userInfo:v45];
      }
      else
      {
        id v36 = 0;
      }
      int v46 = NFSharedSignpostLog();
      if (os_signpost_enabled(v46))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "updating counters", buf, 2u);
      }

      sub_10003FAA0(a1);
      __int16 v47 = NFSharedSignpostLog();
      if (os_signpost_enabled(v47))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", "updating LPEM", buf, 2u);
      }

      uint64_t v48 = sub_1001AA1B4(*(void *)(a1 + 16));
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v49 = NFLogGetLogger();
      if (v49)
      {
        uint64_t v50 = (void (*)(uint64_t, const char *, ...))v49;
        uint64_t v51 = object_getClass((id)a1);
        BOOL v52 = class_isMetaClass(v51);
        uint64_t v61 = object_getClassName((id)a1);
        id v64 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        uint64_t v53 = 45;
        if (v52) {
          uint64_t v53 = 43;
        }
        v50(6, "%c[%{public}s %{public}s]:%i Updating express mode config after setting passes : update lpem: %d", v53, v61, v64, 621, v48 != 0);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v54 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v55 = object_getClass((id)a1);
        if (class_isMetaClass(v55)) {
          int v56 = 43;
        }
        else {
          int v56 = 45;
        }
        int v57 = object_getClassName((id)a1);
        int v58 = sel_getName("setExpressPassConfig:restoreAuthorization:updateStorage:");
        *(_DWORD *)buf = 67110146;
        int v71 = v56;
        __int16 v72 = 2082;
        unsigned int v73 = v57;
        __int16 v74 = 2082;
        int v75 = v58;
        __int16 v76 = 1024;
        int v77 = 621;
        __int16 v78 = 1024;
        BOOL v79 = v48 != 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Updating express mode config after setting passes : update lpem: %d", buf, 0x28u);
      }

      sub_1002155FC(*(void **)(a1 + 16), *(unsigned int *)(a1 + 152), v48 != 0);
      __int16 v32 = NFSharedSignpostLog();
      if (os_signpost_enabled(v32))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "setExpressPassConfig", (const char *)&unk_100286819, buf, 2u);
      }
    }
  }
  else
  {
    id v36 = 0;
  }

  return v36;
}

id sub_100044350(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    char v4 = sub_1000444D4(a1);
    id v5 = v4;
    if (v4)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v6 = v4;
      id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v16;
        while (2)
        {
          for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
            uint64_t v12 = [v11 objectForKeyedSubscript:@"appletIdentifier" error:v15];
            if ([v12 isEqualToString:v3])
            {
              id v13 = v11;

              goto LABEL_13;
            }
          }
          id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }
      id v13 = 0;
LABEL_13:
    }
    else
    {
      id v13 = 0;
    }
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

void *sub_1000444D4(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = (void *)a1[5];
    if (v2 || (sub_10003EF54((uint64_t)a1), (id v2 = (void *)v1[5]) != 0)) {
      id v2 = (void *)v2[2];
    }
    id v3 = v2;
    uint64_t v1 = [v3 copy];
  }

  return v1;
}

BOOL sub_10004453C(void *a1)
{
  id v2 = +[NFRoutingConfig embeddedWiredMode];
  id v3 = +[_NFHardwareManager sharedHardwareManager];
  char v4 = [v3 setRoutingConfig:v2];

  if (v4)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_setRoutingForWrapper:");
      uint64_t v10 = 45;
      if (isMetaClass) {
        uint64_t v10 = 43;
      }
      v6(3, "%c[%{public}s %{public}s]:%i Failed to set secure element to wired mode", v10, ClassName, Name, 668);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = object_getClass(a1);
      if (class_isMetaClass(v12)) {
        int v13 = 43;
      }
      else {
        int v13 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v17 = v13;
      __int16 v18 = 2082;
      __int16 v19 = object_getClassName(a1);
      __int16 v20 = 2082;
      BOOL v21 = sel_getName("_setRoutingForWrapper:");
      __int16 v22 = 1024;
      int v23 = 668;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set secure element to wired mode", buf, 0x22u);
    }
  }
  return v4 == 0;
}

uint64_t sub_10004471C(void *a1, void *a2, unsigned int a3)
{
  if (!a1) {
    return 0;
  }
  id v5 = a2;
  id v6 = NFSharedSignpostLog();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizationForAllAppletsExcept", (const char *)&unk_100286819, buf, 2u);
  }

  if (!a1[5]) {
    sub_10003EF54((uint64_t)a1);
  }
  id v7 = +[_NFHardwareManager sharedHardwareManager];
  id v8 = [v7 secureElementWrapper];
  id v9 = v5;
  id v10 = v8;
  if (v10)
  {
    if (sub_10004453C(a1))
    {
      char v27 = 0;
      uint64_t v11 = sub_1001FF5AC(v10, v9, a3, &v27);
      if (v11)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          int v13 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("_restoreAuthorizationForAllAppletsExcept:forSEWrapper:uid:");
          uint64_t v17 = 45;
          if (isMetaClass) {
            uint64_t v17 = 43;
          }
          v13(3, "%c[%{public}s %{public}s]:%i Failed to restore authorization on all applets", v17, ClassName, Name, 690);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v18 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          __int16 v19 = object_getClass(a1);
          if (class_isMetaClass(v19)) {
            int v20 = 43;
          }
          else {
            int v20 = 45;
          }
          BOOL v21 = object_getClassName(a1);
          __int16 v22 = sel_getName("_restoreAuthorizationForAllAppletsExcept:forSEWrapper:uid:");
          *(_DWORD *)buf = 67109890;
          int v29 = v20;
          __int16 v30 = 2082;
          unsigned int v31 = v21;
          __int16 v32 = 2082;
          id v33 = v22;
          __int16 v34 = 1024;
          int v35 = 690;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to restore authorization on all applets", buf, 0x22u);
        }
      }
      else if (v27)
      {
        id v25 = sub_10024379C(v10);
      }
    }
    else
    {
      uint64_t v11 = 6;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }

  int v23 = NFSharedSignpostLog();
  if (os_signpost_enabled(v23))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizationForAllAppletsExcept", (const char *)&unk_100286819, buf, 2u);
  }

  return v11;
}

id sub_100044A24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = a3;
    id v7 = NFSharedSignpostLog();
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizarionForKeys", (const char *)&unk_100286819, buf, 2u);
    }

    id v8 = sub_100047710((unsigned char *)a1, v6);

    if (v8)
    {
      id v9 = *(void **)(a1 + 40);
      id v10 = [v5 allObjects];
      id v11 = [v9 disableExpressForKeys:v10 onApplet:v8];

      uint64_t v12 = NFSharedSignpostLog();
      if (os_signpost_enabled(v12))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizarionForKeys", (const char *)&unk_100286819, buf, 2u);
      }
    }
    else
    {
      int v13 = NFSharedSignpostLog();
      if (os_signpost_enabled(v13))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "restoreAuthorizarionForKeys", "invalid aid", buf, 2u);
      }

      id v14 = objc_alloc((Class)NSError);
      uint64_t v12 = +[NSString stringWithUTF8String:"nfcd"];
      v22[0] = NSLocalizedDescriptionKey;
      long long v15 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      v23[0] = v15;
      v23[1] = &off_10031A2C0;
      v22[1] = @"Line";
      v22[2] = @"Method";
      id v16 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("restoreAuthorizarionForKeys:onApplet:")];
      v23[2] = v16;
      v22[3] = NSDebugDescriptionErrorKey;
      id v17 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("restoreAuthorizarionForKeys:onApplet:"), 723];
      v23[3] = v17;
      void v22[4] = NSLocalizedFailureReasonErrorKey;
      id v18 = [objc_alloc((Class)NSString) initWithFormat:@"Incorrect applet identifier!"];
      void v23[4] = v18;
      __int16 v19 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:5];
      id v11 = [v14 initWithDomain:v12 code:10 userInfo:v19];
    }
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

unsigned char *sub_100044D88(unsigned char *a1, void *a2)
{
  if (a1)
  {
    sub_100047710(a1, a2);
    a1 = (unsigned char *)objc_claimAutoreleasedReturnValue();
    uint64_t v2 = vars8;
  }
  return a1;
}

BOOL sub_100044DB8(BOOL result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = +[_NFHardwareManager sharedHardwareManager];
  id v3 = [v2 nfcRadioEnabled:0 showUIPopup:0];

  if (!v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)v1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)v1);
      Name = sel_getName("expressModesActive");
      uint64_t v18 = 45;
      if (isMetaClass) {
        uint64_t v18 = 43;
      }
      v14(6, "%c[%{public}s %{public}s]:%i NFC radio disabled", v18, ClassName, Name, 734);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = object_getClass((id)v1);
      if (class_isMetaClass(v20)) {
        int v21 = 43;
      }
      else {
        int v21 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v46 = v21;
      __int16 v47 = 2082;
      uint64_t v48 = object_getClassName((id)v1);
      __int16 v49 = 2082;
      uint64_t v50 = sel_getName("expressModesActive");
      __int16 v51 = 1024;
      int v52 = 734;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC radio disabled", buf, 0x22u);
    }

    return 0;
  }
  if (!*(unsigned char *)(v1 + 170))
  {
    uint64_t v22 = *(void *)(v1 + 40);
    if (v22) {
      uint64_t v23 = vaddvq_s64(vaddq_s64(*(int64x2_t *)(v22 + 24), *(int64x2_t *)(v22 + 40)))
    }
          + *(void *)(v22 + 56)
          + *(void *)(v22 + 64);
    else {
      uint64_t v23 = 0;
    }
    if (!*(unsigned char *)(v1 + 169) && *(void *)(v1 + 136) != 1 && !*(unsigned char *)(v1 + 168) && !*(unsigned char *)(v1 + 174) && !v23) {
      goto LABEL_49;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFLogGetLogger();
    if (v24)
    {
      id v25 = (void (*)(uint64_t, const char *, ...))v24;
      int v26 = object_getClass((id)v1);
      BOOL v27 = class_isMetaClass(v26);
      __int16 v28 = object_getClassName((id)v1);
      int v29 = sel_getName("expressModesActive");
      if (*(unsigned char *)(v1 + 169)) {
        CFStringRef v30 = @"YES";
      }
      else {
        CFStringRef v30 = @"NO";
      }
      CFStringRef v44 = v30;
      uint64_t v31 = 43;
      if (!v27) {
        uint64_t v31 = 45;
      }
      v25(6, "%c[%{public}s %{public}s]:%i Delayed=%{public}@ controlState=%ld paused=%d spAssertion=%d numberOfApplets=%d", v31, v28, v29, 750, v44, *(void *)(v1 + 136), *(unsigned __int8 *)(v1 + 168), *(unsigned __int8 *)(v1 + 174), v23);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v32 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = object_getClass((id)v1);
      if (class_isMetaClass(v33)) {
        int v34 = 43;
      }
      else {
        int v34 = 45;
      }
      int v35 = object_getClassName((id)v1);
      id v36 = sel_getName("expressModesActive");
      if (*(unsigned char *)(v1 + 169)) {
        CFStringRef v37 = @"YES";
      }
      else {
        CFStringRef v37 = @"NO";
      }
      uint64_t v38 = *(void *)(v1 + 136);
      int v39 = *(unsigned __int8 *)(v1 + 168);
      int v40 = *(unsigned __int8 *)(v1 + 174);
      *(_DWORD *)buf = 67111170;
      int v46 = v34;
      __int16 v47 = 2082;
      uint64_t v48 = v35;
      __int16 v49 = 2082;
      uint64_t v50 = v36;
      __int16 v51 = 1024;
      int v52 = 750;
      __int16 v53 = 2114;
      CFStringRef v54 = v37;
      __int16 v55 = 2048;
      uint64_t v56 = v38;
      __int16 v57 = 1024;
      int v58 = v39;
      __int16 v59 = 1024;
      int v60 = v40;
      __int16 v61 = 1024;
      int v62 = v23;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Delayed=%{public}@ controlState=%ld paused=%d spAssertion=%d numberOfApplets=%d", buf, 0x48u);
    }

    if (!*(unsigned char *)(v1 + 169) && !*(unsigned char *)(v1 + 168))
    {
LABEL_49:
      if (!*(unsigned char *)(v1 + 174)) {
        return *(void *)(v1 + 136) == 1 && v23 != 0;
      }
    }
    return 0;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v4 = NFLogGetLogger();
  if (v4)
  {
    id v5 = (void (*)(uint64_t, const char *, ...))v4;
    id v6 = object_getClass((id)v1);
    BOOL v7 = class_isMetaClass(v6);
    id v8 = object_getClassName((id)v1);
    BOOL v42 = sel_getName("expressModesActive");
    uint64_t v9 = 45;
    if (v7) {
      uint64_t v9 = 43;
    }
    v5(6, "%c[%{public}s %{public}s]:%i EMM Test mode : YES", v9, v8, v42, 738);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = object_getClass((id)v1);
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v46 = v12;
    __int16 v47 = 2082;
    uint64_t v48 = object_getClassName((id)v1);
    __int16 v49 = 2082;
    uint64_t v50 = sel_getName("expressModesActive");
    __int16 v51 = 1024;
    int v52 = 738;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i EMM Test mode : YES", buf, 0x22u);
  }

  return 1;
}

uint64_t sub_1000452C8(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283648 length:7];
    id v3 = [v2 NF_asHexString];

    id v4 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028364F length:7];
    id v5 = [v4 NF_asHexString];

    id v6 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283656 length:9];
    BOOL v7 = [v6 NF_asHexString];

    if (sub_10004544C(v1, v3) & 1) != 0 || (sub_10004544C(v1, v5) & 1) != 0 || (sub_10004544C(v1, v7))
    {
      uint64_t v1 = 1;
    }
    else
    {
      id v9 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.stockholm"];
      if ([v9 BOOLForKey:@"PtaAidForStepUpOperation"])
      {
        id v10 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028365F length:13];
        id v11 = [v10 NF_asHexString];

        uint64_t v1 = sub_10004544C(v1, v11);
      }
      else
      {
        uint64_t v1 = 0;
      }
    }
  }
  return v1;
}

uint64_t sub_10004544C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 length];
  id v5 = *(void **)(a1 + 40);
  if (v5) {
    id v5 = (void *)v5[9];
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v16;
LABEL_5:
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v16 != v9) {
        objc_enumerationMutation(v6);
      }
      id v11 = *(void **)(*((void *)&v15 + 1) + 8 * v10);
      id v12 = [v3 length:v15];
      if (v12 <= [v11 length])
      {
        uint64_t v13 = 1;
        if (!objc_msgSend(v11, "compare:options:range:", v3, 1, 0, v4)) {
          break;
        }
      }
      if (v8 == (id)++v10)
      {
        id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v8) {
          goto LABEL_5;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v13 = 0;
  }

  return v13;
}

id sub_1000455B0(void *a1)
{
  id v1 = a1;
  if (!a1) {
    goto LABEL_35;
  }
  id v2 = sub_1000444D4(a1);
  if (!v2)
  {
    id v1 = 0;
    goto LABEL_34;
  }
  id v3 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283648 length:7];
  uint64_t v48 = [v3 NF_asHexString];

  id v4 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028364F length:7];
  int v46 = [v4 NF_asHexString];

  id v5 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283656 length:9];
  id v43 = [v5 NF_asHexString];

  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = v2;
  id v6 = [obj countByEnumeratingWithState:&v50 objects:v64 count:16];
  int v39 = v2;
  if (!v6)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v47 = 0;
    goto LABEL_33;
  }
  id v7 = v6;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v47 = 0;
  uint64_t v8 = *(void *)v51;
  do
  {
    for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v51 != v8) {
        objc_enumerationMutation(obj);
      }
      uint64_t v10 = *(void **)(*((void *)&v50 + 1) + 8 * i);
      id v11 = [v10 objectForKeyedSubscript:@"appletIdentifier"];
      objc_opt_class();
      isKindOfClass Class = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        uint64_t v13 = [v10 objectForKeyedSubscript:@"appletIdentifier"];
        if ([v13 hasPrefix:v48])
        {
          ++v47;
          id v14 = [v10 objectForKeyedSubscript:@"expressEnabled"];
          objc_opt_class();
          char v15 = objc_opt_isKindOfClass();

          if ((v15 & 1) == 0) {
            goto LABEL_28;
          }
          long long v16 = [v10 objectForKeyedSubscript:@"expressEnabled"];
          v44 += [v16 BOOLValue];
          goto LABEL_27;
        }
        if ([v13 hasPrefix:v46])
        {
          ++v45;
          BOOL v27 = [v10 objectForKeyedSubscript:@"expressEnabled"];
          objc_opt_class();
          char v28 = objc_opt_isKindOfClass();

          if ((v28 & 1) == 0) {
            goto LABEL_28;
          }
          long long v16 = [v10 objectForKeyedSubscript:@"expressEnabled"];
          v41 += [v16 BOOLValue];
          goto LABEL_27;
        }
        if ([v13 hasPrefix:v43])
        {
          ++v42;
          int v29 = [v10 objectForKeyedSubscript:@"expressEnabled"];
          objc_opt_class();
          char v30 = objc_opt_isKindOfClass();

          if (v30)
          {
            long long v16 = [v10 objectForKeyedSubscript:@"expressEnabled"];
            v40 += [v16 BOOLValue];
LABEL_27:
          }
        }
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          long long v18 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(v1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v1);
          Name = sel_getName("unifiedAccessKeysStatistics");
          uint64_t v22 = 45;
          if (isMetaClass) {
            uint64_t v22 = 43;
          }
          v18(3, "%c[%{public}s %{public}s]:%i pass found with invalid AID. Skipping...", v22, ClassName, Name, 831);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v13 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = object_getClass(v1);
          if (class_isMetaClass(v23)) {
            int v24 = 43;
          }
          else {
            int v24 = 45;
          }
          id v25 = object_getClassName(v1);
          int v26 = sel_getName("unifiedAccessKeysStatistics");
          *(_DWORD *)buf = 67109890;
          int v57 = v24;
          __int16 v58 = 2082;
          __int16 v59 = v25;
          __int16 v60 = 2082;
          __int16 v61 = v26;
          __int16 v62 = 1024;
          int v63 = 831;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i pass found with invalid AID. Skipping...", buf, 0x22u);
        }
      }
LABEL_28:
    }
    id v7 = [obj countByEnumeratingWithState:&v50 objects:v64 count:16];
  }
  while (v7);
LABEL_33:

  v54[0] = @"totalHomePasses";
  uint64_t v31 = +[NSNumber numberWithInteger:v47];
  v55[0] = v31;
  v54[1] = @"totalHomeExpressEnabledPasses";
  __int16 v32 = +[NSNumber numberWithInteger:v44];
  v55[1] = v32;
  v54[2] = @"totalServerPasses";
  id v33 = +[NSNumber numberWithInteger:v45];
  v55[2] = v33;
  v54[3] = @"totalServerExpressEnabledPasses";
  int v34 = +[NSNumber numberWithInteger:v41];
  v55[3] = v34;
  v54[4] = @"totalAcwgPasses";
  int v35 = +[NSNumber numberWithInteger:v42];
  v55[4] = v35;
  v54[5] = @"totalAcwgExpressEnabledPasses";
  id v36 = +[NSNumber numberWithInteger:v40];
  v55[5] = v36;
  id v1 = +[NSDictionary dictionaryWithObjects:v55 forKeys:v54 count:6];

  id v2 = v39;
LABEL_34:

LABEL_35:

  return v1;
}

id sub_100045BDC(void *a1)
{
  if (!a1)
  {
    int v46 = 0;
    goto LABEL_56;
  }
  int v70 = objc_opt_new();
  id v2 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283648 length:7];
  id v67 = [v2 NF_asHexString];

  id v3 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028364F length:7];
  id v64 = [v3 NF_asHexString];

  id v4 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283656 length:9];
  __int16 v62 = [v4 NF_asHexString];

  id v5 = sub_1000444D4(a1);
  uint64_t v56 = v5;
  if (!v5)
  {
    int v46 = 0;
    goto LABEL_55;
  }
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  id obj = v5;
  id v68 = [obj countByEnumeratingWithState:&v91 objects:v98 count:16];
  if (!v68)
  {
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v57 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v79 = 0;
    uint64_t v6 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v63 = 0;
    goto LABEL_54;
  }
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v57 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = 0;
  uint64_t v6 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v63 = 0;
  uint64_t v66 = *(void *)v92;
  do
  {
    uint64_t v7 = 0;
    do
    {
      if (*(void *)v92 != v66)
      {
        uint64_t v8 = v7;
        objc_enumerationMutation(obj);
        uint64_t v7 = v8;
      }
      uint64_t v71 = v7;
      uint64_t v9 = *(void **)(*((void *)&v91 + 1) + 8 * v7);
      int v75 = [v9 objectForKeyedSubscript:@"passUniqueID"];
      uint64_t v10 = [v9 objectForKeyedSubscript:@"appletIdentifier"];
      objc_opt_class();
      isKindOfClass Class = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        unsigned int v73 = [v9 objectForKeyedSubscript:@"appletIdentifier"];
        if ([v73 hasPrefix:v67])
        {
          id v12 = [v9 objectForKeyedSubscript:@"expressEnabled"];
          objc_opt_class();
          char v13 = objc_opt_isKindOfClass();

          ++v63;
          if (v13)
          {
            id v14 = [v9 objectForKeyedSubscript:@"expressEnabled"];
            v60 += [v14 BOOLValue];
            goto LABEL_41;
          }
          goto LABEL_42;
        }
        if ([v73 hasPrefix:v64])
        {
          char v15 = [v9 objectForKeyedSubscript:@"expressEnabled"];
          objc_opt_class();
          char v16 = objc_opt_isKindOfClass();

          ++v61;
          if (v16)
          {
            id v14 = [v9 objectForKeyedSubscript:@"expressEnabled"];
            v59 += [v14 BOOLValue];
            goto LABEL_41;
          }
          goto LABEL_42;
        }
        if (![v73 hasPrefix:v62]) {
          goto LABEL_42;
        }
        long long v17 = [v9 objectForKeyedSubscript:@"associatedReaders"];
        objc_opt_class();
        char v18 = objc_opt_isKindOfClass();

        if (v18)
        {
          __int16 v19 = [v9 objectForKeyedSubscript:@"associatedReaders"];
          int v20 = v19;
          if (v19) {
            v57 += (uint64_t)[v19 count];
          }
        }
        int v21 = [v9 objectForKeyedSubscript:@"ECP2Info"];
        objc_opt_class();
        char v22 = objc_opt_isKindOfClass();

        if ((v22 & 1) == 0)
        {
LABEL_42:
          if (([v73 hasPrefix:v67] & 1) != 0
            || ([v73 hasPrefix:v64] & 1) != 0
            || [v73 hasPrefix:v62])
          {
            uint64_t v42 = [v70 valueForKey:v75];
            BOOL v43 = v42 == 0;

            if (v43)
            {
              [v70 setObject:&off_10031A2D8 forKeyedSubscript:v75];
            }
            else
            {
              uint64_t v44 = [v70 valueForKey:v75];
              uint64_t v45 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v44 intValue] + 1);

              [v70 setObject:v45 forKeyedSubscript:v75];
            }
          }

          goto LABEL_49;
        }
        uint64_t v23 = [v9 objectForKeyedSubscript:@"ECP2Info"];
        __int16 v58 = v23;
        if (!v23)
        {
          id v14 = 0;
LABEL_41:

          goto LABEL_42;
        }
        int v24 = [v23 objectForKeyedSubscript:@"TCIs"];
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        id v25 = [v24 countByEnumeratingWithState:&v87 objects:v97 count:16];
        if (!v25) {
          goto LABEL_39;
        }
        uint64_t v26 = *(void *)v88;
        while (2)
        {
          uint64_t v27 = 0;
LABEL_25:
          if (*(void *)v88 != v26) {
            objc_enumerationMutation(v24);
          }
          char v28 = *(void **)(*((void *)&v87 + 1) + 8 * v27);
          id v29 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028366C length:3];
          unsigned int v30 = [v28 isEqual:v29];

          uint64_t v31 = [v9 objectForKeyedSubscript:@"expressEnabled"];
          objc_opt_class();
          char v32 = objc_opt_isKindOfClass();

          if (v30)
          {
            if (v32)
            {
              id v33 = [v9 objectForKeyedSubscript:@"expressEnabled"];
              unsigned int v34 = [v33 BOOLValue];

              v79 += v34;
            }
            int v35 = [v9 objectForKeyedSubscript:@"UWBExpressEnabled"];
            objc_opt_class();
            char v36 = objc_opt_isKindOfClass();

            ++v6;
            if (v36)
            {
              CFStringRef v37 = [v9 objectForKeyedSubscript:@"UWBExpressEnabled"];
              v77 += [v37 BOOLValue];
              goto LABEL_36;
            }
          }
          else
          {
            if (v32)
            {
              uint64_t v38 = [v9 objectForKeyedSubscript:@"expressEnabled"];
              unsigned int v39 = [v38 BOOLValue];

              v80 += v39;
            }
            uint64_t v40 = [v9 objectForKeyedSubscript:@"UWBExpressEnabled"];
            objc_opt_class();
            char v41 = objc_opt_isKindOfClass();

            ++v81;
            if (v41)
            {
              CFStringRef v37 = [v9 objectForKeyedSubscript:@"UWBExpressEnabled"];
              v78 += [v37 BOOLValue];
LABEL_36:
            }
          }
          if (v25 == (id)++v27)
          {
            id v25 = [v24 countByEnumeratingWithState:&v87 objects:v97 count:16];
            if (!v25)
            {
LABEL_39:

              id v14 = v58;
              goto LABEL_41;
            }
            continue;
          }
          goto LABEL_25;
        }
      }
LABEL_49:

      uint64_t v7 = v71 + 1;
    }
    while ((id)(v71 + 1) != v68);
    id v68 = [obj countByEnumeratingWithState:&v91 objects:v98 count:16];
  }
  while (v68);
LABEL_54:

  uint64_t v83 = 0;
  BOOL v84 = &v83;
  uint64_t v85 = 0x2020000000;
  uint64_t v86 = 0;
  v82[0] = _NSConcreteStackBlock;
  v82[1] = 3221225472;
  v82[2] = sub_100046668;
  v82[3] = &unk_100301130;
  v82[4] = &v83;
  [v70 enumerateKeysAndObjectsUsingBlock:v82];
  v95[0] = @"uaHomePasses";
  __int16 v76 = +[NSNumber numberWithInteger:v63];
  v96[0] = v76;
  v95[1] = @"uaHomeExpressEnabledPasses";
  __int16 v74 = +[NSNumber numberWithInteger:v60];
  v96[1] = v74;
  v95[2] = @"uaServerPasses";
  __int16 v72 = +[NSNumber numberWithInteger:v61];
  v96[2] = v72;
  v95[3] = @"uaServerExpressEnabledPasses";
  id v69 = +[NSNumber numberWithInteger:v59];
  v96[3] = v69;
  void v95[4] = @"aliroHomePasses";
  uint64_t v47 = +[NSNumber numberWithInteger:v6];
  void v96[4] = v47;
  v95[5] = @"aliroHomeExpressEnabledPasses";
  uint64_t v48 = +[NSNumber numberWithInteger:v79];
  v96[5] = v48;
  v95[6] = @"aliroServerPasses";
  __int16 v49 = +[NSNumber numberWithInteger:v81];
  v96[6] = v49;
  v95[7] = @"aliroServerExpressEnabledPasses";
  long long v50 = +[NSNumber numberWithInteger:v80];
  v96[7] = v50;
  v95[8] = @"aliroHomeUWBExpressEnabledPasses";
  long long v51 = +[NSNumber numberWithInteger:v77];
  v96[8] = v51;
  v95[9] = @"aliroServerUWBExpressEnabledPasses";
  long long v52 = +[NSNumber numberWithInteger:v78];
  v96[9] = v52;
  v95[10] = @"aliroAuxKeyCount";
  long long v53 = +[NSNumber numberWithInteger:v57];
  v96[10] = v53;
  v95[11] = @"multiHomePasses";
  CFStringRef v54 = +[NSNumber numberWithInteger:v84[3]];
  v96[11] = v54;
  int v46 = +[NSDictionary dictionaryWithObjects:v96 forKeys:v95 count:12];

  _Block_object_dispose(&v83, 8);
LABEL_55:

LABEL_56:

  return v46;
}

void sub_100046644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_100046668(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v11 = a3;
  id v7 = a2;
  objc_opt_class();
  isKindOfClass Class = objc_opt_isKindOfClass();

  if (isKindOfClass & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    BOOL v9 = (int)[v11 intValue] < 2;
    uint64_t v10 = v11;
    if (!v9) {
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
  else
  {
    *a4 = 1;
    uint64_t v10 = v11;
  }
}

id sub_10004673C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = 0;
  if (!a1 || !v5) {
    goto LABEL_22;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v8 = *(void **)(a1 + 40);
  if (v8) {
    uint64_t v8 = (void *)v8[2];
  }
  id obj = v8;
  id v7 = [obj countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)v30;
  while (2)
  {
    for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v30 != v9) {
        objc_enumerationMutation(obj);
      }
      id v11 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      id v12 = [v11 objectForKeyedSubscript:@"appletIdentifier"];
      id v13 = [v5 caseInsensitiveCompare:v12];
      id v14 = v13;
      if (v6)
      {
        if (v13)
        {

          continue;
        }
        char v15 = [v11 objectForKeyedSubscript:@"keyIdentifier"];
        id v16 = [v6 caseInsensitiveCompare:v15];

        if (!v16)
        {
          uint64_t v23 = [v11 objectForKeyedSubscript:@"UWBExpressEnabled"];
          id v24 = [v23 BOOLValue];

          id v25 = [v11 objectForKeyedSubscript:@"expressEnabled"];
          id v26 = [v25 BOOLValue];

          v35[0] = @"supportsUWB";
          __int16 v19 = +[NSNumber numberWithBool:v24];
          v35[1] = @"expressEnabled";
          v36[0] = v19;
          int v20 = +[NSNumber numberWithBool:v26];
          v36[1] = v20;
          int v21 = v36;
          char v22 = v35;
          goto LABEL_20;
        }
      }
      else
      {

        if (!v14)
        {
          long long v17 = [v11 objectForKeyedSubscript:@"expressEnabled"];
          id v18 = [v17 BOOLValue];

          v33[0] = @"supportsUWB";
          __int16 v19 = +[NSNumber numberWithBool:0];
          v33[1] = @"expressEnabled";
          v34[0] = v19;
          int v20 = +[NSNumber numberWithBool:v18];
          v34[1] = v20;
          int v21 = v34;
          char v22 = v33;
LABEL_20:
          id v7 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v22 count:2];

          goto LABEL_21;
        }
      }
    }
    id v7 = [obj countByEnumeratingWithState:&v29 objects:v37 count:16];
    if (v7) {
      continue;
    }
    break;
  }
LABEL_21:

LABEL_22:

  return v7;
}

uint64_t sub_100046A30(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 40);
    if (v4) {
      id v4 = (void *)v4[9];
    }
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v5 = v4;
    uint64_t v6 = (uint64_t)[v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v5);
          }
          if (!objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "caseInsensitiveCompare:", v3, (void)v10))
          {
            uint64_t v6 = 1;
            goto LABEL_14;
          }
        }
        uint64_t v6 = (uint64_t)[v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t sub_100046B5C(uint64_t a1, void *a2, void *a3)
{
  id v26 = a2;
  id v24 = a3;
  if (a1)
  {
    id v5 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283656 length:9];
    id v25 = [v5 NF_asHexString];

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v6 = *(void **)(a1 + 40);
    if (v6) {
      uint64_t v6 = (void *)v6[2];
    }
    uint64_t v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v28;
LABEL_6:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v28 != v10) {
          objc_enumerationMutation(v7);
        }
        long long v12 = *(void **)(*((void *)&v27 + 1) + 8 * v11);
        long long v13 = [v12 objectForKeyedSubscript:@"expressEnabled"];
        unsigned int v14 = [v13 BOOLValue];

        if (!v14) {
          goto LABEL_22;
        }
        char v15 = [v12 objectForKeyedSubscript:@"keyIdentifier"];

        if (!v15) {
          goto LABEL_22;
        }
        id v16 = [v12 objectForKeyedSubscript:@"appletIdentifier"];
        if ([v16 hasPrefix:v25])
        {
          if (![v26 caseInsensitiveCompare:v16])
          {
            long long v17 = [v12 objectForKeyedSubscript:@"keyIdentifier"];
            unsigned __int8 v18 = [v24 containsObject:v17];

            if (v18)
            {
LABEL_25:

              a1 = 1;
              goto LABEL_26;
            }
          }
          goto LABEL_21;
        }
        __int16 v19 = [v12 objectForKeyedSubscript:@"appletIdentifier"];
        if (![v26 caseInsensitiveCompare:v19])
        {
          int v20 = [v12 objectForKeyedSubscript:@"keyIdentifier"];
          if ([v24 containsObject:v20])
          {
            int v21 = [v12 objectForKeyedSubscript:@"UWBExpressEnabled"];
            unsigned __int8 v22 = [v21 BOOLValue];

            if ((v22 & 1) == 0) {
              goto LABEL_25;
            }
            goto LABEL_21;
          }
        }
LABEL_21:

LABEL_22:
        if (v9 == (id)++v11)
        {
          id v9 = [v7 countByEnumeratingWithState:&v27 objects:v31 count:16];
          if (v9) {
            goto LABEL_6;
          }
          break;
        }
      }
    }
    a1 = 0;
LABEL_26:
  }
  return a1;
}

void sub_100046E20(uint64_t a1)
{
  id v2 = +[_NFHardwareManager sharedHardwareManager];
  sub_1000FA94C(v2, a1, 0);
}

void sub_100046E80(uint64_t a1)
{
  if (a1)
  {
    id v2 = NFSharedSignpostLog();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_UPDATE_APPLETS", "in", buf, 2u);
    }

    id v3 = sub_10020EC8C(*(void **)(a1 + 16), @"ExpressUpdate", 1uLL);
    if (v3)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v5 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("updateExpressAppletCache");
        uint64_t v8 = 45;
        if (isMetaClass) {
          uint64_t v8 = 43;
        }
        v5(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v8, ClassName, Name, 1079, v3);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = object_getClass((id)a1);
        if (class_isMetaClass(v10)) {
          int v11 = 43;
        }
        else {
          int v11 = 45;
        }
        long long v12 = object_getClassName((id)a1);
        long long v13 = sel_getName("updateExpressAppletCache");
        *(_DWORD *)buf = 67110146;
        int v23 = v11;
        __int16 v24 = 2082;
        id v25 = v12;
        __int16 v26 = 2082;
        long long v27 = v13;
        __int16 v28 = 1024;
        int v29 = 1079;
        __int16 v30 = 2112;
        long long v31 = v3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
      }
    }
    else
    {
      char v21 = 0;
      unsigned int v14 = *(void **)(a1 + 40);
      char v15 = [*(id *)(a1 + 56) identifier];
      id v16 = [v14 updateExpressConfigLimitedTo:v15 andActivate:0 hasChanged:&v21];

      if (v21)
      {
        sub_100046E20((uint64_t)"com.apple.stockholm.express.applets.updated");
        long long v17 = NFSharedSignpostLog();
        if (os_signpost_enabled(v17))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_MODE_APPLETS_UPDATED_NOTIFICATION", "com.apple.stockholm.express.applets.updated", buf, 2u);
        }
      }
      sub_1002114AC(*(void **)(a1 + 16), @"ExpressUpdate");
      unsigned __int8 v18 = NFSharedSignpostLog();
      if (os_signpost_enabled(v18))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "EXPRESS_UPDATE_APPLETS", "out", buf, 2u);
      }
    }
  }
}

uint64_t sub_1000471A0(uint64_t result, int a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v2 = *(void *)(result + 40);
      if (v2) {
        LOBYTE(v2) = vaddvq_s64(vaddq_s64(*(int64x2_t *)(v2 + 24), *(int64x2_t *)(v2 + 40)))
      }
                   + *(void *)(v2 + 56)
                   + *(void *)(v2 + 64) != 0;
    }
    else
    {
      LOBYTE(v2) = 0;
    }
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      *(unsigned char *)(v3 + 220) = v2;
    }
  }
  return result;
}

BOOL sub_1000471EC(id val, double a2)
{
  if (val)
  {
    if (*((void *)val + 17) == 1)
    {
      *((unsigned char *)val + 169) = 1;
      id v4 = (void *)*((void *)val + 9);
      if (!v4)
      {
        objc_initWeak(&location, val);
        id v5 = objc_alloc((Class)NFTimer);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        void v19[2] = sub_100047490;
        v19[3] = &unk_100301B50;
        objc_copyWeak(v20, &location);
        v20[1] = "restartExpressModeAfter:";
        void v20[2] = *(id *)&a2;
        id v6 = [v5 initWithCallback:v19 queue:*((void *)val + 15)];
        uint64_t v7 = (void *)*((void *)val + 9);
        *((void *)val + 9) = v6;

        objc_destroyWeak(v20);
        objc_destroyWeak(&location);
        id v4 = (void *)*((void *)val + 9);
      }
      [v4 stopTimer];
      [*((id *)val + 9) startTimer:a2 leeway:0.5];
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v9 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(val);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(val);
        Name = sel_getName("restartExpressModeAfter:");
        uint64_t v13 = 45;
        if (isMetaClass) {
          uint64_t v13 = 43;
        }
        v9(6, "%c[%{public}s %{public}s]:%i express is disabled - skipping", v13, ClassName, Name, 1149);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      unsigned int v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        char v15 = object_getClass(val);
        if (class_isMetaClass(v15)) {
          int v16 = 43;
        }
        else {
          int v16 = 45;
        }
        LODWORD(location) = 67109890;
        HIDWORD(location) = v16;
        __int16 v22 = 2082;
        int v23 = object_getClassName(val);
        __int16 v24 = 2082;
        id v25 = sel_getName("restartExpressModeAfter:");
        __int16 v26 = 1024;
        int v27 = 1149;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i express is disabled - skipping", (uint8_t *)&location, 0x22u);
      }
    }
  }
  return val != 0;
}

void sub_100047464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100047490(uint64_t a1)
{
  uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.restartTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  *(void *)os_activity_scope_state_s state = 0;
  *(void *)&state[8] = 0;
  os_activity_scope_enter(v2, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    *((unsigned char *)WeakRetained + 169) = 0;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v4);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v4);
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v6(6, "%c[%{public}s %{public}s]:%i Attempt to re-enabling express mode after %f", v11, ClassName, Name, 1169, *(void *)(a1 + 48));
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    long long v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = object_getClass(v4);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      char v15 = object_getClassName(v4);
      int v16 = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v17 = *(void *)(a1 + 48);
      *(_DWORD *)os_activity_scope_state_s state = 67110146;
      *(_DWORD *)&state[4] = v14;
      *(_WORD *)&state[8] = 2082;
      *(void *)&state[10] = v15;
      __int16 v20 = 2082;
      char v21 = v16;
      __int16 v22 = 1024;
      int v23 = 1169;
      __int16 v24 = 2048;
      uint64_t v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Attempt to re-enabling express mode after %f", state, 0x2Cu);
    }

    unsigned __int8 v18 = +[_NFHardwareManager sharedHardwareManager];
    [v18 maybeStartNextSession];
  }
}

BOOL sub_100047694(BOOL result)
{
  if (result)
  {
    id v1 = *(void **)(result + 40);
    return v1
        && (v1[5] && (*(unsigned char *)(result + 152) & 2) != 0
         || v1[6] && (*(unsigned char *)(result + 152) & 4) != 0
         || v1[8] && (*(unsigned char *)(result + 152) & 0x20) != 0
         || v1[7] && (*(unsigned char *)(result + 152) & 0x10) != 0
         || v1[3] && (*(unsigned char *)(result + 152) & 1) != 0
         || v1[4] && (*(unsigned char *)(result + 152) & 1) != 0);
  }
  return result;
}

unsigned char *sub_100047710(unsigned char *a1, void *a2)
{
  if (a1)
  {
    sub_100047744(a1, a2, 1);
    a1 = (unsigned char *)objc_claimAutoreleasedReturnValue();
    uint64_t v2 = vars8;
  }
  return a1;
}

unsigned char *sub_100047744(unsigned char *a1, void *a2, int a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    id v5 = a2;
    id v6 = +[_NFHardwareManager sharedHardwareManager];
    uint64_t v7 = [v6 secureElementWrapper];
    uint64_t v8 = v7;
    if (a3) {
      char v9 = v3[170] == 0;
    }
    else {
      char v9 = 0;
    }
    sub_1002473FC(v7, v5, v9);
    uint64_t v3 = (unsigned char *)objc_claimAutoreleasedReturnValue();
  }

  return v3;
}

id sub_1000477F4(unsigned char *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = +[_NFHardwareManager sharedHardwareManager];
  uint64_t v7 = [v6 secureElementWrapper];
  if (a1[170])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      char v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_secureElementWrapperForApplet:");
      uint64_t v13 = 45;
      if (isMetaClass) {
        uint64_t v13 = 43;
      }
      v9(6, "%c[%{public}s %{public}s]:%i Test mode - USING ESE", v13, ClassName, Name, 1223);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      char v15 = object_getClass(a1);
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v97 = v16;
      __int16 v98 = 2082;
      __int16 v99 = object_getClassName(a1);
      __int16 v100 = 2082;
      __int16 v101 = sel_getName("_secureElementWrapperForApplet:");
      __int16 v102 = 1024;
      int v103 = 1223;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Test mode - USING ESE", buf, 0x22u);
    }

    id v17 = v7;
  }
  else
  {
    unsigned __int8 v18 = [v5 identifier];
    __int16 v19 = sub_1002473C8(v7, v18);

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v20 = NFLogGetLogger();
    char v21 = (void (*)(uint64_t, const char *, ...))v20;
    if (v19)
    {
      if (v20)
      {
        __int16 v22 = object_getClass(a1);
        BOOL v23 = class_isMetaClass(v22);
        id v24 = v5;
        uint64_t v25 = a3;
        __int16 v26 = object_getClassName(a1);
        uint64_t v86 = sel_getName("_secureElementWrapperForApplet:");
        uint64_t v27 = 45;
        if (v23) {
          uint64_t v27 = 43;
        }
        __int16 v82 = v26;
        a3 = v25;
        id v5 = v24;
        v21(6, "%c[%{public}s %{public}s]:%i USING ESE", v27, v82, v86, 1229);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = object_getClass(a1);
        id v30 = v5;
        long long v31 = a3;
        if (class_isMetaClass(v29)) {
          int v32 = 43;
        }
        else {
          int v32 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v97 = v32;
        a3 = v31;
        id v5 = v30;
        __int16 v98 = 2082;
        __int16 v99 = object_getClassName(a1);
        __int16 v100 = 2082;
        __int16 v101 = sel_getName("_secureElementWrapperForApplet:");
        __int16 v102 = 1024;
        int v103 = 1229;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i USING ESE", buf, 0x22u);
      }

      id v17 = v7;
    }
    else
    {
      if (v20)
      {
        id v33 = object_getClass(a1);
        BOOL v34 = class_isMetaClass(v33);
        id v35 = v5;
        char v36 = a3;
        CFStringRef v37 = object_getClassName(a1);
        long long v87 = sel_getName("_secureElementWrapperForApplet:");
        uint64_t v38 = 45;
        if (v34) {
          uint64_t v38 = 43;
        }
        uint64_t v83 = v37;
        a3 = v36;
        id v5 = v35;
        v21(3, "%c[%{public}s %{public}s]:%i NO SE FOUND", v38, v83, v87, 1233);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      unsigned int v39 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = object_getClass(a1);
        id v41 = v5;
        uint64_t v42 = a3;
        if (class_isMetaClass(v40)) {
          int v43 = 43;
        }
        else {
          int v43 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v97 = v43;
        a3 = v42;
        id v5 = v41;
        __int16 v98 = 2082;
        __int16 v99 = object_getClassName(a1);
        __int16 v100 = 2082;
        __int16 v101 = sel_getName("_secureElementWrapperForApplet:");
        __int16 v102 = 1024;
        int v103 = 1233;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i NO SE FOUND", buf, 0x22u);
      }

      id v17 = 0;
    }
  }
  if (v17)
  {
    uint64_t v44 = +[NFRoutingConfig embeddedWiredMode];
    uint64_t v45 = +[_NFHardwareManager sharedHardwareManager];
    int v46 = [v45 setRoutingConfig:v44];

    if (!v46)
    {
      id v76 = v17;
      goto LABEL_64;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v47 = NFLogGetLogger();
    if (v47)
    {
      uint64_t v48 = (void (*)(uint64_t, const char *, ...))v47;
      __int16 v49 = object_getClass(a1);
      BOOL v50 = class_isMetaClass(v49);
      long long v51 = object_getClassName(a1);
      long long v88 = sel_getName("_activateSecureElementForApplet:outError:");
      uint64_t v52 = 45;
      if (v50) {
        uint64_t v52 = 43;
      }
      v48(3, "%c[%{public}s %{public}s]:%i Failed to set SE to wired mode", v52, v51, v88, 1267);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    long long v53 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v54 = object_getClass(a1);
      if (class_isMetaClass(v54)) {
        int v55 = 43;
      }
      else {
        int v55 = 45;
      }
      uint64_t v56 = object_getClassName(a1);
      uint64_t v57 = sel_getName("_activateSecureElementForApplet:outError:");
      *(_DWORD *)buf = 67109890;
      int v97 = v55;
      __int16 v98 = 2082;
      __int16 v99 = v56;
      __int16 v100 = 2082;
      __int16 v101 = v57;
      __int16 v102 = 1024;
      int v103 = 1267;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to set SE to wired mode", buf, 0x22u);
    }

    if (a3)
    {
      id v91 = v5;
      id v90 = objc_alloc((Class)NSError);
      __int16 v58 = +[NSString stringWithUTF8String:"nfcd"];
      id v59 = [v46 code];
      v92[0] = NSLocalizedDescriptionKey;
      uint64_t v60 = a3;
      if ((uint64_t)[v46 code] > 70) {
        uint64_t v61 = 71;
      }
      else {
        uint64_t v61 = (uint64_t)[v46 code];
      }
      uint64_t v77 = +[NSString stringWithUTF8String:off_100301908[v61]];
      v93[0] = v77;
      v93[1] = v46;
      v92[1] = NSUnderlyingErrorKey;
      v92[2] = @"Line";
      v93[2] = &off_10031A308;
      v92[3] = @"Method";
      id v78 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_activateSecureElementForApplet:outError:")];
      v93[3] = v78;
      void v92[4] = NSDebugDescriptionErrorKey;
      id v79 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_activateSecureElementForApplet:outError:"), 1269];
      void v93[4] = v79;
      uint64_t v80 = +[NSDictionary dictionaryWithObjects:v93 forKeys:v92 count:5];
      void *v60 = [v90 initWithDomain:v58 code:v59 userInfo:v80];

      id v76 = 0;
      id v5 = v91;
      goto LABEL_64;
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v62 = NFLogGetLogger();
    if (v62)
    {
      uint64_t v63 = (void (*)(uint64_t, const char *, ...))v62;
      id v64 = object_getClass(a1);
      BOOL v65 = class_isMetaClass(v64);
      BOOL v84 = object_getClassName(a1);
      long long v89 = sel_getName("_activateSecureElementForApplet:outError:");
      uint64_t v66 = 45;
      if (v65) {
        uint64_t v66 = 43;
      }
      v63(3, "%c[%{public}s %{public}s]:%i Failed to find SE for applet: %{public}@", v66, v84, v89, 1256, v5);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v67 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      id v68 = object_getClass(a1);
      if (class_isMetaClass(v68)) {
        int v69 = 43;
      }
      else {
        int v69 = 45;
      }
      int v70 = object_getClassName(a1);
      uint64_t v71 = sel_getName("_activateSecureElementForApplet:outError:");
      *(_DWORD *)buf = 67110146;
      int v97 = v69;
      __int16 v98 = 2082;
      __int16 v99 = v70;
      __int16 v100 = 2082;
      __int16 v101 = v71;
      __int16 v102 = 1024;
      int v103 = 1256;
      __int16 v104 = 2114;
      id v105 = v5;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find SE for applet: %{public}@", buf, 0x2Cu);
    }

    if (!a3)
    {
      id v76 = 0;
      goto LABEL_65;
    }
    id v72 = objc_alloc((Class)NSError);
    uint64_t v44 = +[NSString stringWithUTF8String:"nfcd"];
    v94[0] = NSLocalizedDescriptionKey;
    int v46 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    v95[0] = v46;
    v95[1] = &off_10031A2F0;
    v94[1] = @"Line";
    v94[2] = @"Method";
    id v73 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_activateSecureElementForApplet:outError:")];
    v95[2] = v73;
    v94[3] = NSDebugDescriptionErrorKey;
    id v74 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_activateSecureElementForApplet:outError:"), 1258];
    v95[3] = v74;
    int v75 = +[NSDictionary dictionaryWithObjects:v95 forKeys:v94 count:4];
    *a3 = [v72 initWithDomain:v44 code:10 userInfo:v75];
  }
  id v76 = 0;
LABEL_64:

LABEL_65:

  return v76;
}

id sub_100048244(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v54 = a3;
  id v53 = a4;
  if (!a1) {
    goto LABEL_31;
  }
  uint64_t v8 = NFSharedSignpostLog();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", (const char *)&unk_100286819, buf, 2u);
  }

  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v10 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("disableAuthorizationForApplets:andKey:authorization:");
    char v15 = +[NFApplet aidListForPrinting:v7];
    uint64_t v16 = 45;
    if (isMetaClass) {
      uint64_t v16 = 43;
    }
    v10(6, "%c[%{public}s %{public}s]:%i applets: %{public}@  key: %{public}@", v16, ClassName, Name, 1283, v15, v54);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v17 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v18 = object_getClass(a1);
    if (class_isMetaClass(v18)) {
      int v19 = 43;
    }
    else {
      int v19 = 45;
    }
    uint64_t v20 = object_getClassName(a1);
    char v21 = sel_getName("disableAuthorizationForApplets:andKey:authorization:");
    __int16 v22 = +[NFApplet aidListForPrinting:v7];
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)id v64 = 2082;
    *(void *)&v64[2] = v20;
    __int16 v65 = 2082;
    uint64_t v66 = v21;
    __int16 v67 = 1024;
    int v68 = 1283;
    __int16 v69 = 2114;
    int v70 = v22;
    __int16 v71 = 2114;
    id v72 = v54;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i applets: %{public}@  key: %{public}@", buf, 0x36u);
  }
  if (!a1[5]) {
    sub_10003EF54((uint64_t)a1);
  }
  id v23 = [v7 count];
  if (v54)
  {
    if (v23 == (id)1)
    {
      id v24 = [v7 objectAtIndexedSubscript:0];
      id v25 = v54;
      id v26 = v24;
      id v27 = v53;
      v73[0] = @"appletIdentifier";
      __int16 v28 = [v26 identifier];
      v73[1] = @"keyIdentifier";
      *(void *)buf = v28;
      *(void *)id v64 = v25;
      int v29 = +[NSDictionary dictionaryWithObjects:buf forKeys:v73 count:2];
      id v30 = +[NSArray arrayWithObject:v29];

      long long v31 = sub_10004AA78((void **)a1, v30, v26, v27);

      int v32 = NFSharedSignpostLog();
      if (os_signpost_enabled(v32))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "for keys", buf, 2u);
      }

      if (v31)
      {
        id v51 = objc_alloc((Class)NSError);
        id v33 = +[NSString stringWithUTF8String:"nfcd"];
        id v34 = [v31 code];
        v55[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)[v31 code] > 70) {
          uint64_t v35 = 71;
        }
        else {
          uint64_t v35 = (uint64_t)[v31 code];
        }
        id v41 = +[NSString stringWithUTF8String:off_100301908[v35]];
        v56[0] = v41;
        v56[1] = v31;
        v55[1] = NSUnderlyingErrorKey;
        v55[2] = @"Line";
        v56[2] = &off_10031A368;
        v55[3] = @"Method";
        id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("disableAuthorizationForApplets:andKey:authorization:")];
        v56[3] = v42;
        v55[4] = NSDebugDescriptionErrorKey;
        id v47 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1308];
        v56[4] = v47;
        uint64_t v48 = +[NSDictionary dictionaryWithObjects:v56 forKeys:v55 count:5];
        id v45 = [v51 initWithDomain:v33 code:v34 userInfo:v48];

        goto LABEL_40;
      }
LABEL_31:
      id v45 = 0;
      goto LABEL_41;
    }
    unsigned int v39 = NFSharedSignpostLog();
    if (os_signpost_enabled(v39))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "too many applets", buf, 2u);
    }

    id v40 = objc_alloc((Class)NSError);
    long long v31 = +[NSString stringWithUTF8String:"nfcd"];
    v57[0] = NSLocalizedDescriptionKey;
    id v33 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    v58[0] = v33;
    v58[1] = &off_10031A350;
    v57[1] = @"Line";
    v57[2] = @"Method";
    id v41 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("disableAuthorizationForApplets:andKey:authorization:")];
    v58[2] = v41;
    v57[3] = NSDebugDescriptionErrorKey;
    id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1303];
    v58[3] = v42;
    int v43 = v58;
    uint64_t v44 = v57;
  }
  else
  {
    if (v23)
    {
      long long v31 = sub_100048C5C(a1, v7, v53);
      char v36 = NFSharedSignpostLog();
      if (os_signpost_enabled(v36))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "for applets", buf, 2u);
      }

      if (v31)
      {
        id v37 = objc_alloc((Class)NSError);
        id v33 = +[NSString stringWithUTF8String:"nfcd"];
        id v52 = [v31 code];
        v59[0] = NSLocalizedDescriptionKey;
        if ((uint64_t)[v31 code] > 70) {
          uint64_t v38 = 71;
        }
        else {
          uint64_t v38 = (uint64_t)[v31 code];
        }
        id v41 = +[NSString stringWithUTF8String:off_100301908[v38]];
        v60[0] = v41;
        v60[1] = v31;
        v59[1] = NSUnderlyingErrorKey;
        v59[2] = @"Line";
        v60[2] = &off_10031A338;
        v59[3] = @"Method";
        id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("disableAuthorizationForApplets:andKey:authorization:")];
        v60[3] = v42;
        v59[4] = NSDebugDescriptionErrorKey;
        id v47 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1297];
        v60[4] = v47;
        __int16 v49 = +[NSDictionary dictionaryWithObjects:v60 forKeys:v59 count:5];
        id v45 = [v37 initWithDomain:v33 code:v52 userInfo:v49];

        goto LABEL_40;
      }
      goto LABEL_31;
    }
    int v46 = NFSharedSignpostLog();
    if (os_signpost_enabled(v46))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForApplets", "no keys no applets", buf, 2u);
    }

    id v40 = objc_alloc((Class)NSError);
    long long v31 = +[NSString stringWithUTF8String:"nfcd"];
    v61[0] = NSLocalizedDescriptionKey;
    id v33 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    v62[0] = v33;
    v62[1] = &off_10031A320;
    v61[1] = @"Line";
    v61[2] = @"Method";
    id v41 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("disableAuthorizationForApplets:andKey:authorization:")];
    v62[2] = v41;
    v61[3] = NSDebugDescriptionErrorKey;
    id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("disableAuthorizationForApplets:andKey:authorization:"), 1293];
    v62[3] = v42;
    int v43 = v62;
    uint64_t v44 = v61;
  }
  id v47 = +[NSDictionary dictionaryWithObjects:v43 forKeys:v44 count:4];
  id v45 = [v40 initWithDomain:v31 code:10 userInfo:v47];
LABEL_40:

LABEL_41:

  return v45;
}

id sub_100048C5C(unsigned char *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v129 = a3;
  id v6 = [v5 objectAtIndexedSubscript:0];
  id v134 = 0;
  id v7 = sub_1000477F4(a1, v6, &v134);
  id v8 = v134;

  if (!v7 || v8)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v54 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_disableAuthOnApplets:authorization:uid:");
      uint64_t v57 = 45;
      if (isMetaClass) {
        uint64_t v57 = 43;
      }
      v54(3, "%c[%{public}s %{public}s]:%i Failed to load SE for applets: %{public}@", v57, ClassName, Name, 1380, v5);
    }
    BOOL v128 = v7;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v58 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      id v59 = object_getClass(a1);
      if (class_isMetaClass(v59)) {
        int v60 = 43;
      }
      else {
        int v60 = 45;
      }
      uint64_t v61 = object_getClassName(a1);
      uint64_t v62 = sel_getName("_disableAuthOnApplets:authorization:uid:");
      *(_DWORD *)buf = 67110146;
      int v149 = v60;
      __int16 v150 = 2082;
      uint64_t v151 = v61;
      __int16 v152 = 2082;
      int v153 = v62;
      __int16 v154 = 1024;
      int v155 = 1380;
      __int16 v156 = 2114;
      id v157 = v5;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to load SE for applets: %{public}@", buf, 0x2Cu);
    }

    id v63 = objc_alloc((Class)NSError);
    id v9 = +[NSString stringWithUTF8String:"nfcd"];
    if (v8)
    {
      id v64 = [v8 code];
      v146[0] = NSLocalizedDescriptionKey;
      id v65 = v9;
      if ((uint64_t)[v8 code] > 70) {
        uint64_t v66 = 71;
      }
      else {
        uint64_t v66 = (uint64_t)[v8 code];
      }
      __int16 v67 = +[NSString stringWithUTF8String:off_100301908[v66]];
      v147[0] = v67;
      v147[1] = v8;
      v146[1] = NSUnderlyingErrorKey;
      v146[2] = @"Line";
      v147[2] = &off_10031A3B0;
      v146[3] = @"Method";
      id v71 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnApplets:authorization:uid:")];
      v147[3] = v71;
      v146[4] = NSDebugDescriptionErrorKey;
      id v72 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnApplets:authorization:uid:"), 1381];
      v147[4] = v72;
      +[NSDictionary dictionaryWithObjects:v147 forKeys:v146 count:5];
      v74 = id v73 = v8;
      id v52 = [v63 initWithDomain:v65 code:v64 userInfo:v74];

      id v8 = v73;
      id v9 = v65;
    }
    else
    {
      v144[0] = NSLocalizedDescriptionKey;
      __int16 v67 = +[NSString stringWithUTF8String:"Unknown Error"];
      v145[0] = v67;
      v145[1] = &off_10031A3B0;
      v144[1] = @"Line";
      v144[2] = @"Method";
      id v68 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnApplets:authorization:uid:")];
      v145[2] = v68;
      v144[3] = NSDebugDescriptionErrorKey;
      id v69 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnApplets:authorization:uid:"), 1381];
      v145[3] = v69;
      int v70 = +[NSDictionary dictionaryWithObjects:v145 forKeys:v144 count:4];
      id v52 = [v63 initWithDomain:v9 code:6 userInfo:v70];
    }
    id v7 = v128;
  }
  else
  {
    id v9 = [objc_alloc((Class)NSMutableArray) initWithCapacity:objc_msgSend(v5, "count")];
    long long v130 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    id v127 = v5;
    id v10 = v5;
    id v11 = [v10 countByEnumeratingWithState:&v130 objects:v143 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v131;
      id v126 = 0;
LABEL_5:
      uint64_t v14 = 0;
      while (1)
      {
        if (*(void *)v131 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(id *)(*((void *)&v130 + 1) + 8 * v14);
        uint64_t v16 = [v15 identifier];
        id v17 = sub_1002473C8(v7, v16);

        if (v17)
        {
          if (([v17 authTransientConfigurable] & 1) == 0)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v91 = NFLogGetLogger();
            if (v91)
            {
              long long v92 = (void (*)(uint64_t, const char *, ...))v91;
              long long v93 = object_getClass(a1);
              BOOL v94 = class_isMetaClass(v93);
              BOOL v118 = object_getClassName(a1);
              v122 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              uint64_t v95 = 45;
              if (v94) {
                uint64_t v95 = 43;
              }
              v92(3, "%c[%{public}s %{public}s]:%i Applet %{public}@ is not auth transient configurable", v95, v118, v122, 1390, v17);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            int v96 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
            {
              int v97 = object_getClass(a1);
              if (class_isMetaClass(v97)) {
                int v98 = 43;
              }
              else {
                int v98 = 45;
              }
              __int16 v99 = object_getClassName(a1);
              __int16 v100 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              *(_DWORD *)buf = 67110146;
              int v149 = v98;
              __int16 v150 = 2082;
              uint64_t v151 = v99;
              __int16 v152 = 2082;
              int v153 = v100;
              __int16 v154 = 1024;
              int v155 = 1390;
              __int16 v156 = 2114;
              id v157 = v17;
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet %{public}@ is not auth transient configurable", buf, 0x2Cu);
            }

            id v125 = objc_alloc((Class)NSError);
            uint64_t v85 = +[NSString stringWithUTF8String:"nfcd"];
            v141[0] = NSLocalizedDescriptionKey;
            uint64_t v86 = +[NSString stringWithUTF8String:"Invalid Parameter"];
            v142[0] = v86;
            v142[1] = &off_10031A3C8;
            v141[1] = @"Line";
            v141[2] = @"Method";
            id v87 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnApplets:authorization:uid:")];
            v142[2] = v87;
            v141[3] = NSDebugDescriptionErrorKey;
            id v88 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnApplets:authorization:uid:"), 1391];
            v142[3] = v88;
            long long v89 = v142;
            id v90 = v141;
            goto LABEL_88;
          }
          if ([v17 lifecycleState] == 130
            || [v17 lifecycleState] == 129)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v75 = NFLogGetLogger();
            if (v75)
            {
              id v76 = (void (*)(uint64_t, const char *, ...))v75;
              uint64_t v77 = object_getClass(a1);
              BOOL v78 = class_isMetaClass(v77);
              int v117 = object_getClassName(a1);
              uint64_t v121 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              uint64_t v79 = 45;
              if (v78) {
                uint64_t v79 = 43;
              }
              v76(3, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", v79, v117, v121, 1395, v17);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v80 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              uint64_t v81 = object_getClass(a1);
              if (class_isMetaClass(v81)) {
                int v82 = 43;
              }
              else {
                int v82 = 45;
              }
              uint64_t v83 = object_getClassName(a1);
              BOOL v84 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              *(_DWORD *)buf = 67110146;
              int v149 = v82;
              __int16 v150 = 2082;
              uint64_t v151 = v83;
              __int16 v152 = 2082;
              int v153 = v84;
              __int16 v154 = 1024;
              int v155 = 1395;
              __int16 v156 = 2114;
              id v157 = v17;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", buf, 0x2Cu);
            }

            id v125 = objc_alloc((Class)NSError);
            uint64_t v85 = +[NSString stringWithUTF8String:"nfcd"];
            v139[0] = NSLocalizedDescriptionKey;
            uint64_t v86 = +[NSString stringWithUTF8String:"Invalid Parameter"];
            v140[0] = v86;
            v140[1] = &off_10031A3E0;
            v139[1] = @"Line";
            v139[2] = @"Method";
            id v87 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnApplets:authorization:uid:")];
            v140[2] = v87;
            v139[3] = NSDebugDescriptionErrorKey;
            id v88 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnApplets:authorization:uid:"), 1396];
            v140[3] = v88;
            long long v89 = v140;
            id v90 = v139;
            goto LABEL_88;
          }
          unsigned int v18 = [v17 authTransientSupport];
          if (!v129 && v18)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v101 = NFLogGetLogger();
            if (v101)
            {
              __int16 v102 = (void (*)(uint64_t, const char *, ...))v101;
              int v103 = object_getClass(a1);
              BOOL v104 = class_isMetaClass(v103);
              id v105 = object_getClassName(a1);
              int v123 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              uint64_t v106 = 45;
              if (v104) {
                uint64_t v106 = 43;
              }
              v102(3, "%c[%{public}s %{public}s]:%i Missing authorization", v106, v105, v123, 1400);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            v107 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
            {
              __int16 v108 = object_getClass(a1);
              if (class_isMetaClass(v108)) {
                int v109 = 43;
              }
              else {
                int v109 = 45;
              }
              __int16 v110 = object_getClassName(a1);
              int v111 = sel_getName("_disableAuthOnApplets:authorization:uid:");
              *(_DWORD *)buf = 67109890;
              int v149 = v109;
              __int16 v150 = 2082;
              uint64_t v151 = v110;
              __int16 v152 = 2082;
              int v153 = v111;
              __int16 v154 = 1024;
              int v155 = 1400;
              _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing authorization", buf, 0x22u);
            }

            id v125 = objc_alloc((Class)NSError);
            uint64_t v85 = +[NSString stringWithUTF8String:"nfcd"];
            v137[0] = NSLocalizedDescriptionKey;
            uint64_t v86 = +[NSString stringWithUTF8String:"Invalid Parameter"];
            v138[0] = v86;
            v138[1] = &off_10031A3F8;
            v137[1] = @"Line";
            v137[2] = @"Method";
            id v87 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnApplets:authorization:uid:")];
            v138[2] = v87;
            v137[3] = NSDebugDescriptionErrorKey;
            id v88 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnApplets:authorization:uid:"), 1401];
            v138[3] = v88;
            long long v89 = v138;
            id v90 = v137;
LABEL_88:
            BOOL v112 = +[NSDictionary dictionaryWithObjects:v89 forKeys:v90 count:4];
            id v52 = [v125 initWithDomain:v85 code:10 userInfo:v112];

            goto LABEL_89;
          }
        }
        if ([v17 authTransientSupport]) {
          [v9 addObject:v17];
        }

        if (v12 == (id)++v14)
        {
          id v12 = [v10 countByEnumeratingWithState:&v130 objects:v143 count:16];
          id v8 = 0;
          if (v12) {
            goto LABEL_5;
          }
          break;
        }
      }
    }

    if ([v9 count])
    {
      id v126 = v8;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v19 = NFLogGetLogger();
      if (v19)
      {
        uint64_t v20 = (void (*)(uint64_t, const char *, ...))v19;
        char v21 = object_getClass(a1);
        BOOL v22 = class_isMetaClass(v21);
        id v23 = object_getClassName(a1);
        id v24 = sel_getName("_disableAuthOnApplets:authorization:uid:");
        id v124 = [v9 count];
        uint64_t v25 = 45;
        if (v22) {
          uint64_t v25 = 43;
        }
        v20(6, "%c[%{public}s %{public}s]:%i Disabling transient authorization on %u applets", v25, v23, v24, 1412, v124);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v26 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        id v27 = object_getClass(a1);
        if (class_isMetaClass(v27)) {
          int v28 = 43;
        }
        else {
          int v28 = 45;
        }
        int v29 = object_getClassName(a1);
        id v30 = sel_getName("_disableAuthOnApplets:authorization:uid:");
        unsigned int v31 = [v9 count];
        *(_DWORD *)buf = 67110146;
        int v149 = v28;
        __int16 v150 = 2082;
        uint64_t v151 = v29;
        __int16 v152 = 2082;
        int v153 = v30;
        __int16 v154 = 1024;
        int v155 = 1412;
        __int16 v156 = 1024;
        LODWORD(v157) = v31;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Disabling transient authorization on %u applets", buf, 0x28u);
      }

      unsigned int v32 = sub_1001FE394(v7, 0, 0xFFFFFFFF, v9, v129);
      id v5 = v127;
      if (v32)
      {
        unsigned int v33 = v32;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v34 = NFLogGetLogger();
        if (v34)
        {
          uint64_t v35 = (void (*)(uint64_t, const char *, ...))v34;
          char v36 = object_getClass(a1);
          BOOL v37 = class_isMetaClass(v36);
          uint64_t v115 = object_getClassName(a1);
          BOOL v119 = sel_getName("_disableAuthOnApplets:authorization:uid:");
          uint64_t v38 = 45;
          if (v37) {
            uint64_t v38 = 43;
          }
          v35(3, "%c[%{public}s %{public}s]:%i Failed to disable transient auth for applets: %{public}@", v38, v115, v119, 1419, v9);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        unsigned int v39 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          id v40 = object_getClass(a1);
          if (class_isMetaClass(v40)) {
            int v41 = 43;
          }
          else {
            int v41 = 45;
          }
          id v42 = object_getClassName(a1);
          int v43 = sel_getName("_disableAuthOnApplets:authorization:uid:");
          *(_DWORD *)buf = 67110146;
          int v149 = v41;
          __int16 v150 = 2082;
          uint64_t v151 = v42;
          __int16 v152 = 2082;
          int v153 = v43;
          __int16 v154 = 1024;
          int v155 = 1419;
          __int16 v156 = 2114;
          id v157 = v9;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to disable transient auth for applets: %{public}@", buf, 0x2Cu);
        }

        id v44 = objc_alloc((Class)NSError);
        id v45 = +[NSString stringWithUTF8String:"nfcd"];
        uint64_t v46 = v33;
        v135[0] = NSLocalizedDescriptionKey;
        if (v33 >= 0x47) {
          int v47 = 71;
        }
        else {
          int v47 = v33;
        }
        uint64_t v48 = +[NSString stringWithUTF8String:off_100301908[v47]];
        v136[0] = v48;
        v136[1] = &off_10031A410;
        v135[1] = @"Line";
        v135[2] = @"Method";
        id v49 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnApplets:authorization:uid:")];
        v136[2] = v49;
        v135[3] = NSDebugDescriptionErrorKey;
        id v50 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnApplets:authorization:uid:"), 1420];
        v136[3] = v50;
        id v51 = +[NSDictionary dictionaryWithObjects:v136 forKeys:v135 count:4];
        id v52 = [v44 initWithDomain:v45 code:v46 userInfo:v51];

LABEL_89:
        id v5 = v127;
      }
      else
      {
        id v114 = sub_10024379C(v7);
        id v52 = 0;
      }
      id v8 = v126;
    }
    else
    {
      id v52 = 0;
      id v5 = v127;
    }
  }

  return v52;
}

id sub_100049D4C(void *a1, void *a2, void *a3)
{
  id v76 = a2;
  id v77 = a3;
  if (a1)
  {
    id v5 = NFSharedSignpostLog();
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForPasses", (const char *)&unk_100286819, buf, 2u);
    }

    *(void *)buf = 0;
    long long v89 = buf;
    uint64_t v90 = 0x3032000000;
    uint64_t v91 = sub_10000B7D8;
    long long v92 = sub_10004A9FC;
    id v93 = 0;
    if (!a1[5]) {
      sub_10003EF54((uint64_t)a1);
    }
    id v6 = "disableAuthorizationForPasses:authorization:";
    if (!v77)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(a1);
        if (class_isMetaClass(Class)) {
          uint64_t v9 = 43;
        }
        else {
          uint64_t v9 = 45;
        }
        ClassName = object_getClassName(a1);
        Name = sel_getName("disableAuthorizationForPasses:authorization:");
        Logger(6, "%c[%{public}s %{public}s]:%i This invocation is immutable and will not change state of applets", v9, ClassName, Name, 1321);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = object_getClass(a1);
        if (class_isMetaClass(v13)) {
          int v14 = 43;
        }
        else {
          int v14 = 45;
        }
        id v15 = object_getClassName(a1);
        uint64_t v16 = sel_getName("disableAuthorizationForPasses:authorization:");
        *(_DWORD *)int v96 = 67109890;
        int v97 = v14;
        __int16 v98 = 2082;
        __int16 v99 = v15;
        __int16 v100 = 2082;
        uint64_t v101 = v16;
        __int16 v102 = 1024;
        int v103 = 1321;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i This invocation is immutable and will not change state of applets", v96, 0x22u);
      }
    }
    id v78 = objc_alloc_init((Class)NSMutableArray);
    id v79 = objc_alloc_init((Class)NSMutableDictionary);
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    id v17 = v76;
    id v18 = [v17 countByEnumeratingWithState:&v84 objects:v108 count:16];
    if (v18)
    {
      uint64_t v80 = *(void *)v85;
LABEL_20:
      uint64_t v19 = 0;
      while (1)
      {
        if (*(void *)v85 != v80) {
          objc_enumerationMutation(v17);
        }
        uint64_t v20 = *(void **)(*((void *)&v84 + 1) + 8 * v19);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v25)
          {
            id v26 = object_getClass(a1);
            if (class_isMetaClass(v26)) {
              uint64_t v27 = 43;
            }
            else {
              uint64_t v27 = 45;
            }
            int v28 = object_getClassName(a1);
            int v29 = sel_getName(v6);
            v25(3, "%c[%{public}s %{public}s]:%i Invalid pass type.", v27, v28, v29, 1330);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          char v21 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            id v30 = object_getClass(a1);
            if (class_isMetaClass(v30)) {
              int v31 = 43;
            }
            else {
              int v31 = 45;
            }
            unsigned int v32 = object_getClassName(a1);
            unsigned int v33 = sel_getName(v6);
            *(_DWORD *)int v96 = 67109890;
            int v97 = v31;
            __int16 v98 = 2082;
            __int16 v99 = v32;
            __int16 v100 = 2082;
            uint64_t v101 = v33;
            __int16 v102 = 1024;
            int v103 = 1330;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid pass type.", v96, 0x22u);
          }
          goto LABEL_55;
        }
        char v21 = [v20 objectForKeyedSubscript:@"appletIdentifier"];
        if (!v21 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v51)
          {
            id v52 = object_getClass(a1);
            if (class_isMetaClass(v52)) {
              uint64_t v53 = 43;
            }
            else {
              uint64_t v53 = 45;
            }
            id v54 = object_getClassName(a1);
            int v55 = sel_getName(v6);
            v51(3, "%c[%{public}s %{public}s]:%i Invalid AID type.", v53, v54, v55, 1336);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v56 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            uint64_t v57 = object_getClass(a1);
            if (class_isMetaClass(v57)) {
              int v58 = 43;
            }
            else {
              int v58 = 45;
            }
            id v59 = object_getClassName(a1);
            int v60 = sel_getName(v6);
            *(_DWORD *)int v96 = 67109890;
            int v97 = v58;
            __int16 v98 = 2082;
            __int16 v99 = v59;
            __int16 v100 = 2082;
            uint64_t v101 = v60;
            __int16 v102 = 1024;
            int v103 = 1336;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid AID type.", v96, 0x22u);
          }

          uint64_t v61 = NFSharedSignpostLog();
          if (os_signpost_enabled(v61))
          {
            *(_WORD *)int v96 = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v61, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForPasses", "invalid aid", v96, 2u);
          }

          id v62 = objc_alloc((Class)NSError);
          id v63 = +[NSString stringWithUTF8String:"nfcd"];
          v106[0] = NSLocalizedDescriptionKey;
          id v64 = +[NSString stringWithUTF8String:"Invalid Parameter"];
          v107[0] = v64;
          v107[1] = &off_10031A380;
          v106[1] = @"Line";
          v106[2] = @"Method";
          id v65 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(v6)];
          v107[2] = v65;
          v106[3] = NSDebugDescriptionErrorKey;
          id v66 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(v6), 1338];
          v107[3] = v66;
          void v106[4] = NSLocalizedFailureReasonErrorKey;
          id v67 = [objc_alloc((Class)NSString) initWithFormat:@"Invalid AID type."];
          void v107[4] = v67;
          id v68 = +[NSDictionary dictionaryWithObjects:v107 forKeys:v106 count:5];
          id v69 = [v62 initWithDomain:v63 code:10 userInfo:v68];

          goto LABEL_83;
        }
        BOOL v22 = sub_100044D88(a1, v21);
        if (v22)
        {
          id v23 = [v20 objectForKeyedSubscript:@"keyIdentifier"];

          if (!v23)
          {
            [v78 addObject:v22];
            goto LABEL_54;
          }
          id v24 = [v79 objectForKeyedSubscript:v22];
          if (!v24)
          {
            id v24 = objc_alloc_init((Class)NSMutableArray);
            [v79 setObject:v24 forKeyedSubscript:v22];
          }
          [v24 addObject:v20];
        }
        else
        {
          id v34 = v17;
          uint64_t v35 = v6;
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          char v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v36)
          {
            BOOL v37 = object_getClass(a1);
            if (class_isMetaClass(v37)) {
              uint64_t v38 = 43;
            }
            else {
              uint64_t v38 = 45;
            }
            unsigned int v39 = object_getClassName(a1);
            id v40 = sel_getName(v35);
            v36(4, "%c[%{public}s %{public}s]:%i no applet exist for AID: %{public}@  ignoring", v38, v39, v40, 1343, v21);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v24 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            int v41 = object_getClass(a1);
            if (class_isMetaClass(v41)) {
              int v42 = 43;
            }
            else {
              int v42 = 45;
            }
            int v43 = object_getClassName(a1);
            id v44 = sel_getName(v35);
            *(_DWORD *)int v96 = 67110146;
            int v97 = v42;
            __int16 v98 = 2082;
            __int16 v99 = v43;
            __int16 v100 = 2082;
            uint64_t v101 = v44;
            __int16 v102 = 1024;
            int v103 = 1343;
            __int16 v104 = 2114;
            id v105 = v21;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i no applet exist for AID: %{public}@  ignoring", v96, 0x2Cu);
          }
          id v6 = v35;
          id v17 = v34;
        }

LABEL_54:
LABEL_55:

        if (v18 == (id)++v19)
        {
          id v18 = [v17 countByEnumeratingWithState:&v84 objects:v108 count:16];
          if (v18) {
            goto LABEL_20;
          }
          break;
        }
      }
    }

    if ([v78 count])
    {
      id v45 = sub_100048C5C(a1, v78, v77);
      if (v45) {
        objc_storeStrong((id *)v89 + 5, v45);
      }
    }
    v81[0] = _NSConcreteStackBlock;
    v81[1] = 3221225472;
    v81[2] = sub_10004AA04;
    v81[3] = &unk_100301B78;
    v81[4] = a1;
    id v82 = v77;
    uint64_t v83 = buf;
    [v79 enumerateKeysAndObjectsUsingBlock:v81];
    uint64_t v46 = NFSharedSignpostLog();
    if (os_signpost_enabled(v46))
    {
      *(_WORD *)int v96 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disableAuthorizationForPasses", (const char *)&unk_100286819, v96, 2u);
    }

    if (*((void *)v89 + 5))
    {
      id v47 = objc_alloc((Class)NSError);
      uint64_t v48 = +[NSString stringWithUTF8String:"nfcd"];
      id v49 = [*((id *)v89 + 5) code];
      v94[0] = NSLocalizedDescriptionKey;
      if ((uint64_t)[*((id *)v89 + 5) code] > 70) {
        uint64_t v50 = 71;
      }
      else {
        uint64_t v50 = (uint64_t)[*((id *)v89 + 5) code];
      }
      int v70 = +[NSString stringWithUTF8String:off_100301908[v50]];
      uint64_t v71 = *((void *)v89 + 5);
      v95[0] = v70;
      v95[1] = v71;
      v94[1] = NSUnderlyingErrorKey;
      v94[2] = @"Line";
      v95[2] = &off_10031A398;
      v94[3] = @"Method";
      id v72 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(v6)];
      v95[3] = v72;
      void v94[4] = NSDebugDescriptionErrorKey;
      id v73 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(v6), 1370];
      void v95[4] = v73;
      id v74 = +[NSDictionary dictionaryWithObjects:v95 forKeys:v94 count:5];
      id v69 = [v47 initWithDomain:v48 code:v49 userInfo:v74];
    }
    else
    {
      id v69 = 0;
    }

LABEL_83:
    _Block_object_dispose(buf, 8);
  }
  else
  {
    id v69 = 0;
  }

  return v69;
}

void sub_10004A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_10004A9FC(uint64_t a1)
{
}

uint64_t sub_10004AA04(uint64_t a1, void *a2, void *a3)
{
  id v4 = sub_10004AA78(*(void ***)(a1 + 32), a3, a2, *(void **)(a1 + 40));
  id v5 = v4;
  if (v4)
  {
    id v7 = v4;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v4);
    id v5 = v7;
  }

  return _objc_release_x1(v4, v5);
}

id sub_10004AA78(void **a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
      uint64_t v15 = 45;
      if (isMetaClass) {
        uint64_t v15 = 43;
      }
      v11(6, "%c[%{public}s %{public}s]:%i AID: %{public}@ keys: %{public}@", v15, ClassName, Name, 1453, v8, v7);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = object_getClass(a1);
      if (class_isMetaClass(v17)) {
        int v18 = 43;
      }
      else {
        int v18 = 45;
      }
      uint64_t v19 = object_getClassName(a1);
      uint64_t v20 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
      *(_DWORD *)buf = 67110402;
      int v96 = v18;
      __int16 v97 = 2082;
      __int16 v98 = v19;
      __int16 v99 = 2082;
      __int16 v100 = v20;
      __int16 v101 = 1024;
      int v102 = 1453;
      __int16 v103 = 2114;
      id v104 = v8;
      __int16 v105 = 2114;
      id v106 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i AID: %{public}@ keys: %{public}@", buf, 0x36u);
    }

    id v83 = v9;
    if (v7 && [v7 count])
    {
      id v84 = 0;
      char v21 = sub_1000477F4(a1, v8, &v84);
      id v22 = v84;
      id v23 = v22;
      id v82 = v7;
      if (!v21 || v22)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v47 = NFLogGetLogger();
        uint64_t v80 = v23;
        if (v47)
        {
          uint64_t v48 = (void (*)(uint64_t, const char *, ...))v47;
          id v49 = object_getClass(a1);
          BOOL v50 = class_isMetaClass(v49);
          id v51 = v21;
          id v52 = object_getClassName(a1);
          uint64_t v53 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
          id v54 = [v8 identifier];
          id v73 = v52;
          uint64_t v55 = 45;
          if (v50) {
            uint64_t v55 = 43;
          }
          char v21 = v51;
          v48(3, "%c[%{public}s %{public}s]:%i Failed to load SE for applet: %{public}@", v55, v73, v53, 1463, v54);

          id v23 = v80;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v56 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          uint64_t v57 = object_getClass(a1);
          if (class_isMetaClass(v57)) {
            int v58 = 43;
          }
          else {
            int v58 = 45;
          }
          id v59 = object_getClassName(a1);
          int v60 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
          uint64_t v61 = [v8 identifier];
          *(_DWORD *)buf = 67110146;
          int v96 = v58;
          __int16 v97 = 2082;
          __int16 v98 = v59;
          id v23 = v80;
          __int16 v99 = 2082;
          __int16 v100 = v60;
          __int16 v101 = 1024;
          int v102 = 1463;
          __int16 v103 = 2114;
          id v104 = v61;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to load SE for applet: %{public}@", buf, 0x2Cu);
        }
        id v62 = objc_alloc((Class)NSError);
        uint64_t v63 = +[NSString stringWithUTF8String:"nfcd"];
        if (v23)
        {
          SEL sel = (SEL)[v23 code];
          v91[0] = NSLocalizedDescriptionKey;
          id v64 = v62;
          id v39 = v8;
          if ((uint64_t)[v23 code] > 70) {
            uint64_t v65 = 71;
          }
          else {
            uint64_t v65 = (uint64_t)[v23 code];
          }
          id v41 = +[NSString stringWithUTF8String:off_100301908[v65]];
          v92[0] = v41;
          v92[1] = v23;
          v91[1] = NSUnderlyingErrorKey;
          v91[2] = @"Line";
          v92[2] = &off_10031A440;
          v91[3] = @"Method";
          id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:")];
          v92[3] = v42;
          v91[4] = NSDebugDescriptionErrorKey;
          id v43 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", @"_disableAuthOnKeys:forApplet:authorization:uid:", 1464];
          void v92[4] = v43;
          id v69 = +[NSDictionary dictionaryWithObjects:v92 forKeys:v91 count:5];
          id v45 = [v64 initWithDomain:v63 code:sel userInfo:v69];

          uint64_t v25 = v80;
          id v40 = (id)v63;
        }
        else
        {
          id v39 = v8;
          v89[0] = NSLocalizedDescriptionKey;
          id v40 = +[NSString stringWithUTF8String:"Unknown Error"];
          v90[0] = v40;
          v90[1] = &off_10031A440;
          v89[1] = @"Line";
          v89[2] = @"Method";
          id v68 = v62;
          id v41 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:")];
          v90[2] = v41;
          v89[3] = NSDebugDescriptionErrorKey;
          id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1464];
          v90[3] = v42;
          id v43 = +[NSDictionary dictionaryWithObjects:v90 forKeys:v89 count:4];
          id v45 = [v68 initWithDomain:v63 code:6 userInfo:v43];
          uint64_t v25 = (void *)v63;
        }
      }
      else
      {
        id v24 = [v8 identifier];
        uint64_t v25 = sub_1002473C8(v21, v24);

        if (v25
          && ([v25 lifecycleState] == 130
           || [v25 lifecycleState] == 129))
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v26 = NFLogGetLogger();
          if (v26)
          {
            uint64_t v27 = (void (*)(uint64_t, const char *, ...))v26;
            int v28 = object_getClass(a1);
            int v29 = v25;
            BOOL v30 = class_isMetaClass(v28);
            id v72 = object_getClassName(a1);
            uint64_t v75 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
            BOOL v31 = !v30;
            uint64_t v25 = v29;
            uint64_t v32 = 45;
            if (!v31) {
              uint64_t v32 = 43;
            }
            v27(3, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", v32, v72, v75, 1469, v8);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          unsigned int v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            id v34 = object_getClass(a1);
            if (class_isMetaClass(v34)) {
              int v35 = 43;
            }
            else {
              int v35 = 45;
            }
            char v36 = v25;
            BOOL v37 = object_getClassName(a1);
            uint64_t v38 = sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:");
            *(_DWORD *)buf = 67110146;
            int v96 = v35;
            __int16 v97 = 2082;
            __int16 v98 = v37;
            uint64_t v25 = v36;
            __int16 v99 = 2082;
            __int16 v100 = v38;
            __int16 v101 = 1024;
            int v102 = 1469;
            __int16 v103 = 2114;
            id v104 = v8;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet %{public}@ is frozen or terminated", buf, 0x2Cu);
          }
          id v39 = v8;

          id v76 = objc_alloc((Class)NSError);
          id v40 = +[NSString stringWithUTF8String:"nfcd"];
          v87[0] = NSLocalizedDescriptionKey;
          id v41 = +[NSString stringWithUTF8String:"Invalid Parameter"];
          v88[0] = v41;
          v88[1] = &off_10031A458;
          v87[1] = @"Line";
          v87[2] = @"Method";
          id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:")];
          _DWORD v88[2] = v42;
          v87[3] = NSDebugDescriptionErrorKey;
          id v43 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1470];
          v88[3] = v43;
          id v44 = +[NSDictionary dictionaryWithObjects:v88 forKeys:v87 count:4];
          id v45 = [v76 initWithDomain:v40 code:10 userInfo:v44];
        }
        else
        {
          uint64_t v66 = sub_1000247A4(a1[5], v7, v25, 1, v9, 0xFFFFFFFF);
          if (!v66)
          {
            id v45 = 0;
LABEL_53:

            id v9 = v83;
            goto LABEL_54;
          }
          id v40 = (id)v66;
          sela = (char *)objc_alloc((Class)NSError);
          id v41 = +[NSString stringWithUTF8String:"nfcd"];
          id v77 = [v40 code];
          v85[0] = NSLocalizedDescriptionKey;
          uint64_t v81 = v25;
          id v39 = v8;
          if ((uint64_t)[v40 code] > 70) {
            uint64_t v67 = 71;
          }
          else {
            uint64_t v67 = (uint64_t)[v40 code];
          }
          id v42 = +[NSString stringWithUTF8String:off_100301908[v67]];
          v86[0] = v42;
          v86[1] = v40;
          v85[1] = NSUnderlyingErrorKey;
          v85[2] = @"Line";
          v86[2] = &off_10031A470;
          v85[3] = @"Method";
          id v43 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:")];
          v86[3] = v43;
          v85[4] = NSDebugDescriptionErrorKey;
          id v44 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1479];
          v86[4] = v44;
          int v70 = +[NSDictionary dictionaryWithObjects:v86 forKeys:v85 count:5];
          id v45 = [sela initWithDomain:v41 code:v77 userInfo:v70];

          uint64_t v25 = v81;
        }
      }
      id v7 = v82;
    }
    else
    {
      id v39 = v8;
      id v46 = objc_alloc((Class)NSError);
      char v21 = +[NSString stringWithUTF8String:"nfcd"];
      v93[0] = NSLocalizedDescriptionKey;
      uint64_t v25 = +[NSString stringWithUTF8String:"Success"];
      v94[0] = v25;
      v94[1] = &off_10031A428;
      v93[1] = @"Line";
      v93[2] = @"Method";
      id v40 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:")];
      v94[2] = v40;
      v93[3] = NSDebugDescriptionErrorKey;
      id v41 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_disableAuthOnKeys:forApplet:authorization:uid:"), 1456];
      v94[3] = v41;
      id v42 = +[NSDictionary dictionaryWithObjects:v94 forKeys:v93 count:4];
      id v45 = [v46 initWithDomain:v21 code:0 userInfo:v42];
    }

    id v8 = v39;
    goto LABEL_53;
  }
  id v45 = 0;
LABEL_54:

  return v45;
}

id sub_10004B64C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = objc_opt_new();
    id v5 = [*(id *)(a1 + 40) getExpressAidsForType:1 onlyInExpress:a2];
    if (v5) {
      [v4 addObjectsFromArray:v5];
    }
    id v6 = [*(id *)(a1 + 40) getExpressAidsForType:5 onlyInExpress:a2];

    if (v6) {
      [v4 addObjectsFromArray:v6];
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_10004B700(uint64_t a1)
{
  if (a1)
  {
    if (!*(void *)(a1 + 40)) {
      sub_10003EF54(a1);
    }
    uint64_t v2 = objc_opt_new();
    uint64_t v3 = [*(id *)(a1 + 40) getExpressAidsForType:1];
    if (v3)
    {
      id v4 = +[NSNumber numberWithInt:1];
      [v2 setObject:v3 forKey:v4];
    }
    id v5 = [*(id *)(a1 + 40) getExpressAidsForType:5];

    if (v5)
    {
      id v6 = +[NSNumber numberWithInt:5];
      [v2 setObject:v5 forKey:v6];
    }
    id v7 = [*(id *)(a1 + 40) getExpressAidsForType:2];

    if (v7)
    {
      id v8 = +[NSNumber numberWithInt:2];
      [v2 setObject:v7 forKey:v8];
    }
    id v9 = [*(id *)(a1 + 40) getExpressAidsForType:3];

    if (v9)
    {
      id v10 = +[NSNumber numberWithInt:3];
      [v2 setObject:v9 forKey:v10];
    }
    id v11 = [*(id *)(a1 + 40) getExpressAidsForType:4];

    if (v11)
    {
      id v12 = +[NSNumber numberWithInt:4];
      [v2 setObject:v11 forKey:v12];
    }
    uint64_t v13 = [*(id *)(a1 + 40) getExpressAidsForType:6];

    if (v13)
    {
      int v14 = +[NSNumber numberWithInt:6];
      [v2 setObject:v13 forKey:v14];
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id sub_10004B90C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_opt_new();
    uint64_t v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 136)];
    [v2 setObject:v3 forKeyedSubscript:@"controlState"];

    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 24);
    }
    else {
      uint64_t v5 = 0;
    }
    id v6 = +[NSNumber numberWithUnsignedInteger:v5];
    [v2 setObject:v6 forKeyedSubscript:@"numberOfExpressFelicaTransitApplets"];

    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      uint64_t v8 = *(void *)(v7 + 40);
    }
    else {
      uint64_t v8 = 0;
    }
    id v9 = +[NSNumber numberWithUnsignedInteger:v8];
    [v2 setObject:v9 forKeyedSubscript:@"numberOfExpressECPAccessApplets"];

    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      uint64_t v11 = *(void *)(v10 + 48);
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = +[NSNumber numberWithUnsignedInteger:v11];
    [v2 setObject:v12 forKeyedSubscript:@"numberOfExpressGenericAApplets"];

    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      uint64_t v14 = *(void *)(v13 + 56);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = +[NSNumber numberWithUnsignedInteger:v14];
    [v2 setObject:v15 forKeyedSubscript:@"numberOfExpressECP2Applets"];

    uint64_t v16 = *(void *)(a1 + 40);
    if (v16) {
      uint64_t v17 = *(void *)(v16 + 64);
    }
    else {
      uint64_t v17 = 0;
    }
    int v18 = +[NSNumber numberWithUnsignedInteger:v17];
    [v2 setObject:v18 forKeyedSubscript:@"numberOfExpressSinglePollApplets"];

    uint64_t v19 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 169)];
    [v2 setObject:v19 forKeyedSubscript:@"delayed"];

    uint64_t v20 = *(void **)(a1 + 40);
    if (v20) {
      uint64_t v20 = (void *)v20[2];
    }
    char v21 = v20;
    [v2 setObject:v21 forKeyedSubscript:@"eseConfig"];

    if (*(unsigned char *)(a1 + 168)) {
      CFStringRef v22 = @"YES";
    }
    else {
      CFStringRef v22 = @"NO";
    }
    [v2 setObject:v22 forKeyedSubscript:@"paused"];
    if (*(unsigned char *)(a1 + 170)) {
      CFStringRef v23 = @"YES";
    }
    else {
      CFStringRef v23 = @"NO";
    }
    [v2 setObject:v23 forKeyedSubscript:@"factoryTestMode"];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

BOOL sub_10004BB60(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 156);
    id v6 = *(id *)(a1 + 56);
    uint64_t v7 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10004BD18;
    v15[3] = &unk_100301BA0;
    void v15[4] = a1;
    v15[5] = "restrictToTypeForApplet:";
    uint64_t v8 = objc_retainBlock(v15);
    id v9 = (void (**)(void, void, void))v8;
    if (v4)
    {
      uint64_t v10 = *(void **)(a1 + 48);
      uint64_t v11 = [v4 identifier];
      id v12 = [v10 objectForKey:v11];

      BOOL v13 = v12 != 0;
      if (v12)
      {
        *(unsigned char *)(a1 + 156) = [v12 integerValue];
        sub_1000413E0(a1);
        objc_storeStrong((id *)(a1 + 56), a2);
        ((void (**)(void, uint64_t, id))v9)[2](v9, v5, v6);
      }
      else
      {
        *(unsigned char *)(a1 + 156) = 0;
        ((void (**)(void, uint64_t, id))v9)[2](v9, v5, v6);
        sub_1000413E0(a1);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 156) = 0;
      ((void (*)(void *, uint64_t, id))v8[2])(v8, v5, v6);
      sub_1000413E0(a1);
      BOOL v13 = 0;
    }
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

void sub_10004BD18(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 156) != a2 || *(void *)(v4 + 56) != a3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v21 = *(unsigned __int8 *)(v11 + 156);
      uint64_t v22 = *(void *)(v11 + 56);
      uint64_t v12 = 45;
      if (isMetaClass) {
        uint64_t v12 = 43;
      }
      v6(6, "%c[%{public}s %{public}s]:%i Express mode limited to type: %d   applet: %{public}@", v12, ClassName, Name, 1651, v21, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v14)) {
        int v15 = 43;
      }
      else {
        int v15 = 45;
      }
      uint64_t v16 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v17 = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = *(unsigned __int8 *)(v18 + 156);
      uint64_t v20 = *(void *)(v18 + 56);
      *(_DWORD *)buf = 67110402;
      int v24 = v15;
      __int16 v25 = 2082;
      uint64_t v26 = v16;
      __int16 v27 = 2082;
      int v28 = v17;
      __int16 v29 = 1024;
      int v30 = 1651;
      __int16 v31 = 1024;
      int v32 = v19;
      __int16 v33 = 2114;
      uint64_t v34 = v20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode limited to type: %d   applet: %{public}@", buf, 0x32u);
    }
  }
}

uint64_t sub_10004BEE0(id *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = +[_NFHardwareManager sharedHardwareManager];
  uint64_t v3 = [v2 secureElementWrapper];

  uint64_t v4 = [a1[5] getExpressAidsForType:3];
  uint64_t v16 = [a1[5] getExpressAidsForType:6];
  sub_1002431DC(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    if (!sub_10004453C(a1))
    {
      uint64_t v8 = 0;
      goto LABEL_19;
    }
    id v21 = 0;
    id v6 = sub_100243D60(v3, &v21);
    id v5 = v21;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = v5;
  uint64_t v8 = (uint64_t)[v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (!v8) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)v18;
  while (2)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      if (*(void *)v18 != v9) {
        objc_enumerationMutation(v7);
      }
      uint64_t v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
      uint64_t v12 = [v11 identifier];
      if ([v4 containsObject:v12])
      {
      }
      else
      {
        BOOL v13 = [v11 identifier];
        unsigned int v14 = [v16 containsObject:v13];

        if (!v14) {
          continue;
        }
      }
      if (sub_100252724((uint64_t)v3, v11))
      {
        uint64_t v8 = 1;
        goto LABEL_18;
      }
    }
    uint64_t v8 = (uint64_t)[v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
    if (v8) {
      continue;
    }
    break;
  }
LABEL_18:

LABEL_19:
  return v8;
}

void sub_10004C0F8(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 170) = a2;
  id v3 = +[NSUserDefaults standardUserDefaults];
  [v3 setBool:*(unsigned __int8 *)(a1 + 170) forKey:@"ExpressModeFactoryTest"];
  [v3 synchronize];
}

unsigned __int8 *sub_10004C164(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (!*((void *)a1 + 5)) {
      sub_10003EF54((uint64_t)a1);
    }
    int v4 = v2[170];
    if (a2)
    {
      sub_10004C0F8((uint64_t)v2, 1);
      uint64_t v5 = *((void *)v2 + 5);
      if (v5)
      {
        *(unsigned char *)(v5 + 8_Block_object_dispose(&STACK[0x2B0], 8) = 1;
        id v6 = (void *)*((void *)v2 + 5);
      }
      else
      {
        id v6 = 0;
      }
      uint64_t v7 = [v6 reconfigureWithArray:&__NSArray0__struct restoreAuthorization:0 updateStorage:1];
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          uint64_t v10 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(v2);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v2);
          Name = sel_getName("setTestMode:");
          uint64_t v13 = 45;
          if (isMetaClass) {
            uint64_t v13 = 43;
          }
          v10(3, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", v13, ClassName, Name, 1763, v8);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        unsigned int v14 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v15 = object_getClass(v2);
          if (class_isMetaClass(v15)) {
            int v16 = 43;
          }
          else {
            int v16 = 45;
          }
          *(_DWORD *)buf = 67110146;
          int v26 = v16;
          __int16 v27 = 2082;
          int v28 = object_getClassName(v2);
          __int16 v29 = 2082;
          int v30 = sel_getName("setTestMode:");
          __int16 v31 = 1024;
          int v32 = 1763;
          __int16 v33 = 2114;
          uint64_t v34 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear express applets on eSE: %{public}@", buf, 0x2Cu);
        }

        sub_10004C0F8((uint64_t)v2, 0);
        goto LABEL_30;
      }
      uint64_t v19 = sub_1000282B0(*((id **)v2 + 5), 0);
      uint64_t v8 = (void *)v19;
      if (!v4 && v19)
      {
        uint64_t v20 = *((void *)v2 + 5);
        if (v20) {
          *(unsigned char *)(v20 + 8_Block_object_dispose(&STACK[0x2B0], 8) = 0;
        }
        sub_10004C0F8((uint64_t)v2, 0);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v17 = [*((id *)v2 + 5) reconfigureWithArray:&__NSArray0__struct restoreAuthorization:0 updateStorage:1];
      uint64_t v8 = (void *)v17;
      if (v4 && v17) {
        goto LABEL_29;
      }
      uint64_t v18 = *((void *)v2 + 5);
      if (v18) {
        *(unsigned char *)(v18 + 8_Block_object_dispose(&STACK[0x2B0], 8) = 0;
      }
      sub_10004C0F8((uint64_t)v2, 0);
    }

    uint64_t v8 = 0;
LABEL_29:
    id v21 = sub_1000429A8((uint64_t)v2, a2);
    sub_10003FAA0((uint64_t)v2);
    sub_100040348((uint64_t)v2);
LABEL_30:
    uint64_t v2 = v8;
  }

  return v2;
}

void sub_10004C454(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i express mode state %d", v8, ClassName, Name, 1805, *(unsigned int *)(*(void *)(a1 + 32) + 160));
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v13 = sel_getName(*(SEL *)(a1 + 40));
    int v14 = *(_DWORD *)(*(void *)(a1 + 32) + 160);
    *(_DWORD *)buf = 67110146;
    int v19 = v11;
    __int16 v20 = 2082;
    id v21 = v12;
    __int16 v22 = 2082;
    CFStringRef v23 = v13;
    __int16 v24 = 1024;
    int v25 = 1805;
    __int16 v26 = 1024;
    int v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i express mode state %d", buf, 0x28u);
  }

  id v15 = *(id *)(a1 + 32);
  objc_sync_enter(v15);
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(_DWORD *)(v16 + 160);
  if ((v17 - 1) <= 1)
  {
    *(_DWORD *)(v16 + 160) = 3;
    int v17 = *(_DWORD *)(*(void *)(a1 + 32) + 160);
  }
  objc_sync_exit(v15);

  if (v17 == 5)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) handleAppletInactivityTimeout:0 atlData:0 caData:0];
  }
  else if (v17 == 3)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) handleExpressModeTimeout];
  }
}

void sub_10004C6DC(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v1);
      if (class_isMetaClass(Class)) {
        uint64_t v6 = 43;
      }
      else {
        uint64_t v6 = 45;
      }
      ClassName = object_getClassName(v1);
      Name = sel_getName("driverExpressModeEnteredSync:");
      if ((v2 - 1) > 5) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = off_100301D00[(char)(v2 - 1)];
      }
      v4(6, "%c[%{public}s %{public}s]:%i %{public}@ express mode entered (%d)", v6, ClassName, Name, 1827, v9, v2);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = object_getClass(v1);
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      uint64_t v13 = object_getClassName(v1);
      int v14 = sel_getName("driverExpressModeEnteredSync:");
      if ((v2 - 1) > 5) {
        id v15 = 0;
      }
      else {
        id v15 = off_100301D00[(char)(v2 - 1)];
      }
      *(_DWORD *)buf = 67110402;
      int v28 = v12;
      __int16 v29 = 2082;
      int v30 = v13;
      __int16 v31 = 2082;
      int v32 = v14;
      __int16 v33 = 1024;
      int v34 = 1827;
      __int16 v35 = 2114;
      char v36 = v15;
      __int16 v37 = 1024;
      int v38 = v2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@ express mode entered (%d)", buf, 0x32u);
    }

    uint64_t v16 = v1;
    objc_sync_enter(v16);
    if (*((unsigned char *)v16 + 172))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v17)
      {
        uint64_t v18 = object_getClass(v16);
        if (class_isMetaClass(v18)) {
          uint64_t v19 = 43;
        }
        else {
          uint64_t v19 = 45;
        }
        __int16 v20 = object_getClassName(v16);
        id v21 = sel_getName("driverExpressModeEnteredSync:");
        v17(3, "%c[%{public}s %{public}s]:%i Express mode is already entered?", v19, v20, v21, 1831);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v23 = object_getClass(v16);
        if (class_isMetaClass(v23)) {
          int v24 = 43;
        }
        else {
          int v24 = 45;
        }
        int v25 = object_getClassName(v16);
        __int16 v26 = sel_getName("driverExpressModeEnteredSync:");
        *(_DWORD *)buf = 67109890;
        int v28 = v24;
        __int16 v29 = 2082;
        int v30 = v25;
        __int16 v31 = 2082;
        int v32 = v26;
        __int16 v33 = 1024;
        int v34 = 1831;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Express mode is already entered?", buf, 0x22u);
      }

      objc_sync_exit(v16);
    }
    else
    {
      [v16[11] stopTimer];
      [v16[11] startTimer:*((double *)v16 + 16) leeway:0.5];
      *((_DWORD *)v16 + 40) = 1;
      *((unsigned char *)v16 + 157) = v2;
      *((_WORD *)v16 + 86) = 1;
      [v16[14] removeAllObjects];
      objc_sync_exit(v16);

      [v16[1] handleExpressModeStarted];
    }
  }
}

void sub_10004CA40(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004CB00(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  if (v1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("_sync_driverRequestService:");
      uint64_t v7 = 45;
      if (isMetaClass) {
        uint64_t v7 = 43;
      }
      v4(6, "%c[%{public}s %{public}s]:%i service requested %{public}@", v7, ClassName, Name, 1859, v2);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = object_getClass(v1);
      if (class_isMetaClass(v9)) {
        int v10 = 43;
      }
      else {
        int v10 = 45;
      }
      *(_DWORD *)buf = 67110146;
      int v18 = v10;
      __int16 v19 = 2082;
      __int16 v20 = object_getClassName(v1);
      __int16 v21 = 2082;
      __int16 v22 = sel_getName("_sync_driverRequestService:");
      __int16 v23 = 1024;
      int v24 = 1859;
      __int16 v25 = 2114;
      id v26 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i service requested %{public}@", buf, 0x2Cu);
    }

    int v11 = v1;
    objc_sync_enter(v11);
    int v12 = v11[40];
    objc_sync_exit(v11);

    if (v12)
    {
      if (v12 == 1)
      {
        uint64_t v13 = v11;
        objc_sync_enter(v13);
        v11[40] = 2;
        objc_sync_exit(v13);

        [v13[12] stopTimer];
        [v13[1] handleRequestService:v2 inExpress:1];
        [v13[12] startTimer:0.25];
      }
    }
    else
    {
      int v14 = v11;
      objc_sync_enter(v14);
      v11[40] = 5;
      objc_sync_exit(v14);
    }
  }
}

void sub_10004CD44(void *a1, int a2)
{
  if (!a1) {
    return;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    int v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v4(6, "%c[%{public}s %{public}s]:%i express mode exited", v8, ClassName, Name, 1899);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = object_getClass(a1);
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v94 = v11;
    __int16 v95 = 2082;
    int v96 = object_getClassName(a1);
    __int16 v97 = 2082;
    __int16 v98 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    __int16 v99 = 1024;
    int v100 = 1899;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i express mode exited", buf, 0x22u);
  }

  int v12 = a1;
  objc_sync_enter(v12);
  if (*((unsigned char *)v12 + 172))
  {
    [v12[11] stopTimer];
    int v88 = *((_DWORD *)v12 + 40);
    uint64_t v13 = *((unsigned __int8 *)v12 + 157);
    *((_DWORD *)v12 + 40) = 0;
    *((unsigned char *)v12 + 157) = 0;
    *((_WORD *)v12 + 86) = 0;
    [v12[4] invalidate];
    id v14 = v12[4];
    v12[4] = 0;

    objc_sync_exit(v12);
    [v12[12] stopTimer];
    switch((int)v13)
    {
      case 1:
      case 5:
        id v15 = v12[8];
        if (v15) {
          goto LABEL_14;
        }
        BOOL v50 = sub_10004B700((uint64_t)v12);
        id v51 = v50;
        if (v13 == 1)
        {
          id v52 = [v50 objectForKeyedSubscript:&off_10031A4A0];
          id v53 = [v52 count];
        }
        else
        {
          if (v13 != 5) {
            goto LABEL_64;
          }
          id v52 = [v50 objectForKeyedSubscript:&off_10031A488];
          id v53 = [v52 count];
        }
        if (v53)
        {
          uint64_t v65 = [v52 objectAtIndexedSubscript:0];

          if (v65)
          {
            sub_100047710(v12, v65);
            id v15 = (id)objc_claimAutoreleasedReturnValue();

            if (!v15) {
              goto LABEL_65;
            }
LABEL_14:
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v16)
            {
              int v17 = object_getClass(v12);
              if (class_isMetaClass(v17)) {
                uint64_t v18 = 43;
              }
              else {
                uint64_t v18 = 45;
              }
              __int16 v19 = object_getClassName(v12);
              __int16 v20 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
              __int16 v21 = [v15 identifier];
              v16(6, "%c[%{public}s %{public}s]:%i changing to wired and calling to ATL end of transaction for %{public}@", v18, v19, v20, 1949, v21);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            __int16 v22 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v23 = object_getClass(v12);
              if (class_isMetaClass(v23)) {
                int v24 = 43;
              }
              else {
                int v24 = 45;
              }
              __int16 v25 = object_getClassName(v12);
              id v26 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
              int v27 = [v15 identifier];
              *(_DWORD *)buf = 67110146;
              int v94 = v24;
              __int16 v95 = 2082;
              int v96 = v25;
              __int16 v97 = 2082;
              __int16 v98 = v26;
              __int16 v99 = 1024;
              int v100 = 1949;
              __int16 v101 = 2114;
              int v102 = v27;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i changing to wired and calling to ATL end of transaction for %{public}@", buf, 0x2Cu);
            }
            int v28 = objc_opt_new();
            id v29 = v12[5];
            id v90 = v28;
            BOOL v30 = sub_100028E2C(v29, v15, &v90);
            __int16 v31 = v90;

            if (v30)
            {
              if (!v31)
              {
LABEL_76:

                if ((v88 - 1) <= 1)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v75 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v75)
                  {
                    id v76 = object_getClass(v12);
                    if (class_isMetaClass(v76)) {
                      uint64_t v77 = 43;
                    }
                    else {
                      uint64_t v77 = 45;
                    }
                    id v78 = object_getClassName(v12);
                    id v79 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                    v75(6, "%c[%{public}s %{public}s]:%i Transit express mode finished before timeout - posting timeout", v77, v78, v79, 1968);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v80 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v81 = object_getClass(v12);
                    if (class_isMetaClass(v81)) {
                      int v82 = 43;
                    }
                    else {
                      int v82 = 45;
                    }
                    id v83 = object_getClassName(v12);
                    id v84 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                    *(_DWORD *)buf = 67109890;
                    int v94 = v82;
                    __int16 v95 = 2082;
                    int v96 = v83;
                    __int16 v97 = 2082;
                    __int16 v98 = v84;
                    __int16 v99 = 1024;
                    int v100 = 1968;
                    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Transit express mode finished before timeout - posting timeout", buf, 0x22u);
                  }

                  [v12[1] handleExpressModeTimeout];
                }
                id v85 = v12[8];
                if (v85)
                {
                  long long v86 = [v85 identifierAsData];
                  [v12[14] setObject:v86 forKeyedSubscript:@"AID"];
                }
                +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:&off_1003229E8];

LABEL_91:
                if (a2) {
                  [v12[1] handleForceExpressModeEndEvent];
                }
                [v12[1] handleExpressModeExited];
                sub_1002535C4();
                return;
              }
              int v32 = +[NSNumber numberWithUnsignedChar:v13];
              [v31 setObject:v32 forKeyedSubscript:@"expressType"];

              __int16 v33 = [v15 identifier];
              [v31 setObject:v33 forKeyedSubscript:@"aid"];

              [v31 setObject:@"ActivityTimeout" forKeyedSubscript:@"EventType"];
              int v34 = [v15 identifier];
              int v35 = sub_100046A30((uint64_t)v12, v34);
              sub_100240214((uint64_t)NFHciTransactionEventCALogger, v31, v35);
            }
            else
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              id v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v54)
              {
                uint64_t v55 = object_getClass(v12);
                if (class_isMetaClass(v55)) {
                  uint64_t v56 = 43;
                }
                else {
                  uint64_t v56 = 45;
                }
                uint64_t v57 = object_getClassName(v12);
                int v58 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                id v59 = [v15 identifier];
                v54(3, "%c[%{public}s %{public}s]:%i Failed to handle Felica V2 End of Transaction for %{public}@", v56, v57, v58, 1952, v59);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              int v34 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
              {
                int v60 = object_getClass(v12);
                if (class_isMetaClass(v60)) {
                  int v61 = 43;
                }
                else {
                  int v61 = 45;
                }
                id v62 = object_getClassName(v12);
                uint64_t v63 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
                id v64 = [v15 identifier];
                *(_DWORD *)buf = 67110146;
                int v94 = v61;
                __int16 v95 = 2082;
                int v96 = v62;
                __int16 v97 = 2082;
                __int16 v98 = v63;
                __int16 v99 = 1024;
                int v100 = 1952;
                __int16 v101 = 2114;
                int v102 = v64;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to handle Felica V2 End of Transaction for %{public}@", buf, 0x2Cu);
              }
            }

            goto LABEL_76;
          }
        }
        else
        {
        }
LABEL_64:

LABEL_65:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v66 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v66)
        {
          uint64_t v67 = object_getClass(v12);
          if (class_isMetaClass(v67)) {
            uint64_t v68 = 43;
          }
          else {
            uint64_t v68 = 45;
          }
          id v69 = object_getClassName(v12);
          int v70 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
          v66(6, "%c[%{public}s %{public}s]:%i No Applet used for NFExpressTypeFelicaTransit or NFExpressTypeCathayTransit", v68, v69, v70, 1963);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v31 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v71 = object_getClass(v12);
          if (class_isMetaClass(v71)) {
            int v72 = 43;
          }
          else {
            int v72 = 45;
          }
          id v73 = object_getClassName(v12);
          id v74 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
          *(_DWORD *)buf = 67109890;
          int v94 = v72;
          __int16 v95 = 2082;
          int v96 = v73;
          __int16 v97 = 2082;
          __int16 v98 = v74;
          __int16 v99 = 1024;
          int v100 = 1963;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No Applet used for NFExpressTypeFelicaTransit or NFExpressTypeCathayTransit", buf, 0x22u);
        }
        id v15 = 0;
        goto LABEL_76;
      case 2:
        +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:&off_100322A10];
        +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:&off_100322A38];
        goto LABEL_91;
      case 3:
      case 6:
        +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:&off_100322A60];
        +[NFGeneralStatisticsCALogger updateGeneralDeviceStatistic:&off_100322A88];
        goto LABEL_91;
      default:
        id v46 = v12[8];
        if (v46)
        {
          uint64_t v47 = [v46 identifier];
          uint64_t v48 = (void *)v47;
          if (v47)
          {
            v91[0] = @"EventType";
            v91[1] = @"appletIdentifier";
            v92[0] = @"ActivityTimeout";
            v92[1] = v47;
            id v49 = +[NSDictionary dictionaryWithObjects:v92 forKeys:v91 count:2];
            sub_1000B6368((uint64_t)NFUnifiedAccessTransactionCALogger, v49);
          }
        }
        goto LABEL_91;
    }
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  char v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v36)
  {
    __int16 v37 = object_getClass(v12);
    if (class_isMetaClass(v37)) {
      uint64_t v38 = 43;
    }
    else {
      uint64_t v38 = 45;
    }
    id v39 = object_getClassName(v12);
    id v40 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    v36(6, "%c[%{public}s %{public}s]:%i Express mode is not in progress.", v38, v39, v40, 1905);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v41 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    id v42 = object_getClass(v12);
    if (class_isMetaClass(v42)) {
      int v43 = 43;
    }
    else {
      int v43 = 45;
    }
    id v44 = object_getClassName(v12);
    id v45 = sel_getName("_sync_driverExpressModeExitedFromTimeout:");
    *(_DWORD *)buf = 67109890;
    int v94 = v43;
    __int16 v95 = 2082;
    int v96 = v44;
    __int16 v97 = 2082;
    __int16 v98 = v45;
    __int16 v99 = 1024;
    int v100 = 1905;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode is not in progress.", buf, 0x22u);
  }

  objc_sync_exit(v12);
}

void sub_10004D820(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004D860(uint64_t a1)
{
}

void sub_10004D870(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v2)
  {
LABEL_15:
    [v2 handleStepUpEvent:*(void *)(a1 + 40) transactionType:4 forApplet:*(void *)(a1 + 48)];
    return;
  }
  id v3 = [[NFStepUpController alloc] initWithQueue:*(void *)(*(void *)(a1 + 32) + 120) driverWrapper:*(void *)(*(void *)(a1 + 32) + 16)];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = v3;

  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v6)
  {
    uint64_t v7 = [v6 startISO18013WithConnectionHandoverConfiguration];
    if (v7)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v9 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(*(id *)(a1 + 32));
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 56));
        uint64_t v12 = 45;
        if (isMetaClass) {
          uint64_t v12 = 43;
        }
        v9(3, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", v12, ClassName, Name, 2063, v7);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v14 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v14)) {
          int v15 = 43;
        }
        else {
          int v15 = 45;
        }
        uint64_t v16 = object_getClassName(*(id *)(a1 + 32));
        int v17 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67110146;
        int v33 = v15;
        __int16 v34 = 2082;
        int v35 = v16;
        __int16 v36 = 2082;
        __int16 v37 = v17;
        __int16 v38 = 1024;
        int v39 = 2063;
        __int16 v40 = 2114;
        id v41 = v7;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", buf, 0x2Cu);
      }
    }
    id v2 = *(void **)(*(void *)(a1 + 32) + 32);
    goto LABEL_15;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v18 = NFLogGetLogger();
  if (v18)
  {
    __int16 v19 = (void (*)(uint64_t, const char *, ...))v18;
    __int16 v20 = object_getClass(*(id *)(a1 + 32));
    BOOL v21 = class_isMetaClass(v20);
    __int16 v22 = object_getClassName(*(id *)(a1 + 32));
    __int16 v31 = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v23 = 45;
    if (v21) {
      uint64_t v23 = 43;
    }
    v19(3, "%c[%{public}s %{public}s]:%i Could not allocate unified access helper object", v23, v22, v31, 2059);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v24 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    __int16 v25 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v25)) {
      int v26 = 43;
    }
    else {
      int v26 = 45;
    }
    int v27 = object_getClassName(*(id *)(a1 + 32));
    int v28 = sel_getName(*(SEL *)(a1 + 56));
    *(_DWORD *)buf = 67109890;
    int v33 = v26;
    __int16 v34 = 2082;
    int v35 = v27;
    __int16 v36 = 2082;
    __int16 v37 = v28;
    __int16 v38 = 1024;
    int v39 = 2059;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not allocate unified access helper object", buf, 0x22u);
  }
}

id sub_10004DC2C(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v7 = 45;
    if (isMetaClass) {
      uint64_t v7 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i ", v7, ClassName, Name, 2073);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v9)) {
      int v10 = 43;
    }
    else {
      int v10 = 45;
    }
    int v11 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v12 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    int v21 = v10;
    __int16 v22 = 2082;
    uint64_t v23 = v11;
    __int16 v24 = 2082;
    __int16 v25 = v12;
    __int16 v26 = 1024;
    int v27 = 2073;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v13 + 172) || *(void *)(v13 + 56)) {
    return [*(id *)(v13 + 8) handleHostCardReaderDetected:*(void *)(a1 + 40)];
  }
  int v15 = *(void **)(v13 + 32);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_10004DE24;
  v19[3] = &unk_100301BF0;
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  void v19[4] = v13;
  v19[5] = v17;
  return [v15 hceReadWithHandle:v16 completion:v19];
}

void sub_10004DE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    [v4 handleTransactionEndEvent:a2 atlData:a3 caData:0];
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v10 = 45;
      if (isMetaClass) {
        uint64_t v10 = 43;
      }
      v6(3, "%c[%{public}s %{public}s]:%i Invalid decoded event for posting EndEvent.", v10, ClassName, Name, 2081);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v12)) {
        int v13 = 43;
      }
      else {
        int v13 = 45;
      }
      id v14 = object_getClassName(*(id *)(a1 + 32));
      int v15 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      int v18 = v13;
      __int16 v19 = 2082;
      __int16 v20 = v14;
      __int16 v21 = 2082;
      __int16 v22 = v15;
      __int16 v23 = 1024;
      int v24 = 2081;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid decoded event for posting EndEvent.", buf, 0x22u);
    }
  }
}

void sub_10004E288(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004EF9C(uint64_t a1, double a2)
{
  if (a1)
  {
    [*(id *)(a1 + 80) stopTimer];
    objc_initWeak(&location, (id)a1);
    id v4 = objc_alloc((Class)NFTimer);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10004F23C;
    v17[3] = &unk_100301C18;
    objc_copyWeak(&v18, &location);
    id v5 = [v4 initWithCallback:v17 queue:*(void *)(a1 + 120)];
    uint64_t v6 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v5;

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
    {
      Class Class = object_getClass((id)a1);
      if (class_isMetaClass(Class)) {
        uint64_t v9 = 43;
      }
      else {
        uint64_t v9 = 45;
      }
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("activateAppletsAfter:");
      Logger(6, "%c[%{public}s %{public}s]:%i Activate applet after %fs", v9, ClassName, Name, 2312, *(void *)&a2);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = object_getClass((id)a1);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      int v15 = object_getClassName((id)a1);
      uint64_t v16 = sel_getName("activateAppletsAfter:");
      *(_DWORD *)buf = 67110146;
      int v21 = v14;
      __int16 v22 = 2082;
      __int16 v23 = v15;
      __int16 v24 = 2082;
      __int16 v25 = v16;
      __int16 v26 = 1024;
      int v27 = 2312;
      __int16 v28 = 2048;
      double v29 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Activate applet after %fs", buf, 0x2Cu);
    }

    [*(id *)(a1 + 80) startTimer:a2];
    objc_destroyWeak(&v18);
    objc_destroyWeak(&location);
  }
}

void sub_10004F1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004F23C(uint64_t a1)
{
  id v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.express.reactivationTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v2, &v5);
  os_activity_scope_leave(&v5);

  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    sub_10004F2BC(WeakRetained);
  }
}

void sub_10004F2BC(unsigned __int8 *a1)
{
  if (a1)
  {
    id v2 = +[_NFHardwareManager sharedHardwareManager];
    unsigned int v3 = [v2 hasSession];

    uint64_t v4 = a1[172];
    BOOL v5 = a1[172] == 0;
    BOOL v6 = sub_100044DB8((BOOL)a1);
    int v7 = v5 & ~v3;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("activateAppletsIfPossible");
      uint64_t v12 = 45;
      if (isMetaClass) {
        uint64_t v12 = 43;
      }
      v9(6, "%c[%{public}s %{public}s]:%i activeSession=%d,expressInProgress=%d,expressModesActive=%d", v12, ClassName, Name, 2330, v3, v4, v6);
    }
    int v13 = v7 & v6;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = object_getClass(a1);
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      *(_DWORD *)buf = 67110658;
      int v33 = v16;
      __int16 v34 = 2082;
      int v35 = object_getClassName(a1);
      __int16 v36 = 2082;
      __int16 v37 = sel_getName("activateAppletsIfPossible");
      __int16 v38 = 1024;
      int v39 = 2330;
      __int16 v40 = 1024;
      unsigned int v41 = v3;
      __int16 v42 = 1024;
      int v43 = v4;
      __int16 v44 = 1024;
      BOOL v45 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i activeSession=%d,expressInProgress=%d,expressModesActive=%d", buf, 0x34u);
    }

    if (v13)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v17 = NFLogGetLogger();
      if (v17)
      {
        id v18 = (void (*)(uint64_t, const char *, ...))v17;
        __int16 v19 = object_getClass(a1);
        BOOL v20 = class_isMetaClass(v19);
        int v21 = object_getClassName(a1);
        __int16 v31 = sel_getName("activateAppletsIfPossible");
        uint64_t v22 = 45;
        if (v20) {
          uint64_t v22 = 43;
        }
        v18(6, "%c[%{public}s %{public}s]:%i Express mode reactivation required", v22, v21, v31, 2333);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v24 = object_getClass(a1);
        if (class_isMetaClass(v24)) {
          int v25 = 43;
        }
        else {
          int v25 = 45;
        }
        __int16 v26 = object_getClassName(a1);
        int v27 = sel_getName("activateAppletsIfPossible");
        *(_DWORD *)buf = 67109890;
        int v33 = v25;
        __int16 v34 = 2082;
        int v35 = v26;
        __int16 v36 = 2082;
        __int16 v37 = v27;
        __int16 v38 = 1024;
        int v39 = 2333;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Express mode reactivation required", buf, 0x22u);
      }

      sub_100040348((uint64_t)a1);
      __int16 v28 = +[_NFHardwareManager sharedHardwareManager];
      [v28 maybeStartNextSession];
    }
  }
}

uint64_t sub_10004F5F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = v6;
  if (!a1)
  {
    uint64_t v35 = 0;
    goto LABEL_59;
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v8 = (void *)a1[5];
  id v53 = v6;
  if (v8) {
    uint64_t v8 = (void *)v8[2];
  }
  uint64_t v9 = v8;
  id v10 = [v9 countByEnumeratingWithState:&v54 objects:v68 count:16];
  if (!v10) {
    goto LABEL_12;
  }
  id v11 = v10;
  uint64_t v12 = *(void *)v55;
  while (2)
  {
    for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v55 != v12) {
        objc_enumerationMutation(v9);
      }
      int v14 = *(void **)(*((void *)&v54 + 1) + 8 * i);
      int v15 = [v14 objectForKeyedSubscript:@"appletIdentifier"];
      unsigned __int8 v16 = [v15 isEqualToString:v5];

      if (v16)
      {
        uint64_t v17 = v14;

        if (!v17) {
          goto LABEL_30;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          __int16 v19 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("matchApplet:toField:");
          uint64_t v22 = 45;
          if (isMetaClass) {
            uint64_t v22 = 43;
          }
          v19(6, "%c[%{public}s %{public}s]:%i Checking passInfo %{public}@", v22, ClassName, Name, 2358, v17);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v23 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v24 = object_getClass(a1);
          if (class_isMetaClass(v24)) {
            int v25 = 43;
          }
          else {
            int v25 = 45;
          }
          __int16 v26 = object_getClassName(a1);
          int v27 = sel_getName("matchApplet:toField:");
          *(_DWORD *)buf = 67110146;
          int v59 = v25;
          __int16 v60 = 2082;
          int v61 = v26;
          __int16 v62 = 2082;
          uint64_t v63 = v27;
          __int16 v64 = 1024;
          int v65 = 2358;
          __int16 v66 = 2114;
          uint64_t v67 = v17;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Checking passInfo %{public}@", buf, 0x2Cu);
        }

        __int16 v28 = [v17 objectForKeyedSubscript:@"ExpressType"];
        int v7 = v53;
        id v29 = [v53 notificationType];
        if (v29 != (id)1)
        {
          if (v29 != (id)2)
          {
            if (v29 == (id)3 && [v28 isEqualToString:@"ECP2"])
            {
              BOOL v30 = [v17 objectForKeyedSubscript:@"ECP2Info"];
              __int16 v31 = [v30 objectForKeyedSubscript:@"primaryTCIs"];
              int v32 = [v30 objectForKeyedSubscript:@"TCIs"];
              int v33 = [v53 tciArray];
              __int16 v34 = [v33 firstObject];

              if (v34)
              {
                if ([v31 containsObject:v34]) {
                  uint64_t v35 = 1;
                }
                else {
                  uint64_t v35 = (uint64_t)[v32 containsObject:v34];
                }
              }
              else
              {
                uint64_t v35 = 0;
              }

              goto LABEL_57;
            }
            goto LABEL_56;
          }
          if ([v28 isEqualToString:@"ECP1.Access"])
          {
            uint64_t v35 = 1;
LABEL_57:

            goto LABEL_58;
          }
LABEL_56:
          uint64_t v35 = 0;
          goto LABEL_57;
        }
        unsigned __int8 v46 = [v53 rfTechnology];
        unsigned __int8 v47 = [v53 rfTechnology];
        if ([v28 isEqualToString:@"Suica"])
        {
          if ((v46 & 4) == 0) {
            goto LABEL_56;
          }
          BOOL v48 = [v53 typeFSystemCode] == 3;
        }
        else
        {
          uint64_t v35 = v47 & 1;
          if ([v28 isEqualToString:@"GenericA"]) {
            goto LABEL_57;
          }
          if (![v28 isEqualToString:@"Cathay"])
          {
            if ([v28 isEqualToString:@"QuickMode"]) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
          if ((v46 & 4) == 0) {
            goto LABEL_56;
          }
          BOOL v48 = [v53 typeFSystemCode] == 32776;
        }
        uint64_t v35 = v48;
        goto LABEL_57;
      }
    }
    id v11 = [v9 countByEnumeratingWithState:&v54 objects:v68 count:16];
    if (v11) {
      continue;
    }
    break;
  }
LABEL_12:

LABEL_30:
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v36 = NFLogGetLogger();
  if (v36)
  {
    __int16 v37 = (void (*)(uint64_t, const char *, ...))v36;
    __int16 v38 = object_getClass(a1);
    BOOL v39 = class_isMetaClass(v38);
    __int16 v40 = object_getClassName(a1);
    id v52 = sel_getName("matchApplet:toField:");
    uint64_t v41 = 45;
    if (v39) {
      uint64_t v41 = 43;
    }
    v37(4, "%c[%{public}s %{public}s]:%i Applet exists in group config but not configured in passinfo?!", v41, v40, v52, 2355);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v17 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    __int16 v42 = object_getClass(a1);
    if (class_isMetaClass(v42)) {
      int v43 = 43;
    }
    else {
      int v43 = 45;
    }
    __int16 v44 = object_getClassName(a1);
    BOOL v45 = sel_getName("matchApplet:toField:");
    *(_DWORD *)buf = 67109890;
    int v59 = v43;
    __int16 v60 = 2082;
    int v61 = v44;
    __int16 v62 = 2082;
    uint64_t v63 = v45;
    __int16 v64 = 1024;
    int v65 = 2355;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet exists in group config but not configured in passinfo?!", buf, 0x22u);
  }
  uint64_t v35 = 0;
  int v7 = v53;
LABEL_58:

LABEL_59:
  return v35;
}

void sub_1000505B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000507D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100051034(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000517CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100051AC8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100051AF0(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    unsigned int v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v8, ClassName, Name, 299, *(void *)(*(void *)(a1 + 32) + 56));
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 56);
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    __int16 v19 = v12;
    __int16 v20 = 2082;
    int v21 = v13;
    __int16 v22 = 1024;
    int v23 = 299;
    __int16 v24 = 2114;
    uint64_t v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  return [*(id *)(a1 + 32) internalEndSession:*(void *)(a1 + 40)];
}

uint64_t sub_100051D50(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    unsigned int v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v7 = 45;
    if (isMetaClass) {
      uint64_t v7 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i ", v7, ClassName, Name, 311);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v9)) {
      int v10 = 43;
    }
    else {
      int v10 = 45;
    }
    int v11 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v12 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    int v30 = v10;
    __int16 v31 = 2082;
    int v32 = v11;
    __int16 v33 = 2082;
    __int16 v34 = v12;
    __int16 v35 = 1024;
    int v36 = 311;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v13 = NFLogGetLogger();
    if (v13)
    {
      uint64_t v14 = (void (*)(uint64_t, const char *, ...))v13;
      int v15 = object_getClass(*(id *)(a1 + 32));
      BOOL v16 = class_isMetaClass(v15);
      int v17 = object_getClassName(*(id *)(a1 + 32));
      __int16 v18 = sel_getName(*(SEL *)(a1 + 48));
      __int16 v19 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v20 = 45;
      if (v16) {
        uint64_t v20 = 43;
      }
      v14(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v20, v17, v18, 313, v19);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v22)) {
        int v23 = 43;
      }
      else {
        int v23 = 45;
      }
      __int16 v24 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v25 = sel_getName(*(SEL *)(a1 + 48));
      __int16 v26 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v30 = v23;
      __int16 v31 = 2082;
      int v32 = v24;
      __int16 v33 = 2082;
      __int16 v34 = v25;
      __int16 v35 = 1024;
      int v36 = 313;
      __int16 v37 = 2114;
      __int16 v38 = v26;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
  }
  else
  {
    int v21 = [*(id *)(a1 + 32) queue];
    [v21 prioritizeSession:*(void *)(a1 + 32)];
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10005215C(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    unsigned int v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v8 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i Requesting to active %{public}@ using token %{public}@", v9, ClassName, Name, 323, v8, *(void *)(a1 + 40));
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 56));
    int v15 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v16 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 67110402;
    int v20 = v12;
    __int16 v21 = 2082;
    __int16 v22 = v13;
    __int16 v23 = 2082;
    __int16 v24 = v14;
    __int16 v25 = 1024;
    int v26 = 323;
    __int16 v27 = 2114;
    __int16 v28 = v15;
    __int16 v29 = 2114;
    uint64_t v30 = v16;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Requesting to active %{public}@ using token %{public}@", buf, 0x36u);
  }
  int v17 = [*(id *)(a1 + 32) queue];
  __int16 v18 = [v17 switchToSession:*(void *)(a1 + 32) withToken:*(void *)(a1 + 40)];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100052944(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_100052B70(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v8.receiver = a1;
    v8.super_class = (Class)NFClientAppStateObserver;
    id v4 = [super init];
    a1 = v4;
    if (v4)
    {
      objc_storeWeak((id *)v4 + 3, v3);
      uint64_t v5 = objc_opt_new();
      id v6 = (void *)a1[2];
      a1[2] = v5;
    }
  }

  return a1;
}

void sub_100052C4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x3032000000;
  uint64_t v14 = sub_10000B7E8;
  int v15 = sub_100052EC8;
  id v16 = (id)objc_opt_new();
  uint64_t v18 = 0;
  __int16 v19 = &v18;
  uint64_t v20 = 0x2050000000;
  id v4 = (void *)qword_1003472F8;
  uint64_t v21 = qword_1003472F8;
  if (!qword_1003472F8)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100053DD0;
    v17[3] = &unk_100301E40;
    void v17[4] = &v18;
    sub_100053DD0((uint64_t)v17);
    id v4 = (void *)v19[3];
  }
  id v5 = v4;
  _Block_object_dispose(&v18, 8);
  id v6 = [v5 descriptor];
  [v6 setValues:1];
  [v6 setEndowmentNamespaces:&off_100322688];
  [v3 setStateDescriptor:v6];
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100052ED0;
  v10[3] = &unk_100301D88;
  v10[4] = &v11;
  [v7 enumerateObjectsUsingBlock:v10];
  [v3 setPredicates:v12[5]];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100004D00;
  v8[3] = &unk_100301DB0;
  objc_copyWeak(&v9, (id *)(a1 + 40));
  [v3 setUpdateHandler:v8];
  objc_destroyWeak(&v9);

  _Block_object_dispose(&v11, 8);
}

void sub_100052E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose((const void *)(v12 - 96), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100052EC8(uint64_t a1)
{
}

void sub_100052ED0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10000A64C();
  id v5 = [v3 processIdentifier];

  id v8 = [v4 identifierWithPid:v5];
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v7 = [sub_10000A730() predicateMatchingIdentifier:v8];
  [v6 addObject:v7];
}

void sub_100052F78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v6 = v3;
    id v4 = *(id *)(a1 + 16);
    objc_sync_enter(v4);
    [*(id *)(a1 + 16) removeObject:v6];
    if (sub_10000A018())
    {
      if ([*(id *)(a1 + 16) count])
      {
        sub_10000A0E8((void *)a1);
      }
      else
      {
        [*(id *)(a1 + 8) invalidate];
        id v5 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x2B0], 8) = 0;
      }
    }
    objc_sync_exit(v4);

    id v3 = v6;
  }
}

void sub_100053020(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100053034(id *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
LABEL_15:
    BOOL v12 = 0;
    goto LABEL_18;
  }
  if (!sub_10000A018())
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("isClientSuspended:");
      uint64_t v18 = 45;
      if (isMetaClass) {
        uint64_t v18 = 43;
      }
      v14(3, "%c[%{public}s %{public}s]:%i No RB, faking result", v18, ClassName, Name, 122);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = object_getClass(a1);
      if (class_isMetaClass(v20)) {
        int v21 = 43;
      }
      else {
        int v21 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v25 = v21;
      __int16 v26 = 2082;
      __int16 v27 = object_getClassName(a1);
      __int16 v28 = 2082;
      __int16 v29 = sel_getName("isClientSuspended:");
      __int16 v30 = 1024;
      int v31 = 122;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No RB, faking result", buf, 0x22u);
    }

    goto LABEL_15;
  }
  id v4 = a1[2];
  objc_sync_enter(v4);
  id v5 = sub_10000B6D4();
  id v6 = sub_10000A730();
  uint64_t v7 = [sub_10000A64C() identifierWithPid:[v3 processIdentifier]];
  id v8 = [v6 predicateMatchingIdentifier:v7];
  id v9 = [v5 handleForPredicate:v8 error:0];

  int v10 = [v9 currentState];
  uint64_t v11 = v10;
  if (v10) {
    BOOL v12 = [v10 taskState] == 3;
  }
  else {
    BOOL v12 = 1;
  }

  objc_sync_exit(v4);
LABEL_18:

  return v12;
}

void sub_1000532A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000532C0(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (sub_10000A018())
    {
      int v32 = a1[2];
      objc_sync_enter(v32);
      id v4 = sub_10000B6D4();
      id v5 = sub_10000A730();
      id v6 = [sub_10000A64C() identifierWithPid:[v3 processIdentifier]];
      uint64_t v7 = [v5 predicateMatchingIdentifier:v6];
      id v8 = [v4 handleForPredicate:v7 error:0];

      id v9 = [v8 currentState];
      int v10 = [v9 endowmentNamespaces];
      unsigned int v31 = [v10 containsObject:@"com.apple.frontboard.visibility"];
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(a1);
        if (class_isMetaClass(Class)) {
          uint64_t v13 = 43;
        }
        else {
          uint64_t v13 = 45;
        }
        ClassName = object_getClassName(a1);
        Name = sel_getName("isClientBackground:");
        Logger(6, "%c[%{public}s %{public}s]:%i State=%{public}@ task_state=%d for pid %d visibility = %{public}@", v13, ClassName, Name, 151, v9, [v9 taskState], objc_msgSend(v3, "processIdentifier"), v10);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v16 = NFSharedLogGetLogger();
      int v17 = v32;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = object_getClass(a1);
        if (class_isMetaClass(v18)) {
          int v19 = 43;
        }
        else {
          int v19 = 45;
        }
        *(_DWORD *)buf = 67110914;
        int v34 = v19;
        __int16 v35 = 2082;
        int v36 = object_getClassName(a1);
        __int16 v37 = 2082;
        __int16 v38 = sel_getName("isClientBackground:");
        __int16 v39 = 1024;
        int v40 = 151;
        __int16 v41 = 2114;
        __int16 v42 = v9;
        __int16 v43 = 1024;
        unsigned int v44 = [v9 taskState];
        __int16 v45 = 1024;
        unsigned int v46 = [v3 processIdentifier];
        __int16 v47 = 2114;
        BOOL v48 = v10;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i State=%{public}@ task_state=%d for pid %d visibility = %{public}@", buf, 0x42u);
      }

      if (v9)
      {
        if ([v9 taskState] == 3)
        {
          uint64_t v20 = 1;
        }
        else if ([v9 taskState] == 4)
        {
          uint64_t v20 = v31 ^ 1;
        }
        else
        {
          uint64_t v20 = 0;
        }
      }
      else
      {
        uint64_t v20 = 0;
      }

      objc_sync_exit(v32);
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v21 = NFLogGetLogger();
      if (v21)
      {
        __int16 v22 = (void (*)(uint64_t, const char *, ...))v21;
        __int16 v23 = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(v23);
        int v25 = object_getClassName(a1);
        __int16 v30 = sel_getName("isClientBackground:");
        uint64_t v26 = 45;
        if (isMetaClass) {
          uint64_t v26 = 43;
        }
        v22(3, "%c[%{public}s %{public}s]:%i No RB, faking result", v26, v25, v30, 141);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        __int16 v27 = object_getClass(a1);
        if (class_isMetaClass(v27)) {
          int v28 = 43;
        }
        else {
          int v28 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v34 = v28;
        __int16 v35 = 2082;
        int v36 = object_getClassName(a1);
        __int16 v37 = 2082;
        __int16 v38 = sel_getName("isClientBackground:");
        __int16 v39 = 1024;
        int v40 = 141;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No RB, faking result", buf, 0x22u);
      }
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }

  return v20;
}

void sub_1000536FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id obj)
{
}

uint64_t sub_100053730(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (sub_10000A018())
    {
      id obj = a1[2];
      objc_sync_enter(obj);
      id v4 = sub_10000B6D4();
      id v5 = sub_10000A730();
      id v6 = [sub_10000A64C() identifierWithPid:[v3 processIdentifier]];
      uint64_t v7 = [v5 predicateMatchingIdentifier:v6];
      id v8 = [v4 handleForPredicate:v7 error:0];

      __int16 v33 = v8;
      id v9 = [v8 currentState];
      int v10 = [v9 endowmentNamespaces];
      unsigned int v32 = [v10 containsObject:@"com.apple.frontboard.visibility"];
      uint64_t v11 = v3;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(a1);
        if (class_isMetaClass(Class)) {
          uint64_t v14 = 43;
        }
        else {
          uint64_t v14 = 45;
        }
        ClassName = object_getClassName(a1);
        Name = sel_getName("isClientForeground:");
        Logger(6, "%c[%{public}s %{public}s]:%i task_state=%d for pid %d visibility = %{public}@", v14, ClassName, Name, 176, [v9 taskState], [v11 processIdentifier], v10);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = object_getClass(a1);
        if (class_isMetaClass(v18)) {
          int v19 = 43;
        }
        else {
          int v19 = 45;
        }
        *(_DWORD *)buf = 67110658;
        int v36 = v19;
        __int16 v37 = 2082;
        __int16 v38 = object_getClassName(a1);
        __int16 v39 = 2082;
        int v40 = sel_getName("isClientForeground:");
        __int16 v41 = 1024;
        int v42 = 176;
        __int16 v43 = 1024;
        unsigned int v44 = [v9 taskState];
        __int16 v45 = 1024;
        unsigned int v46 = [v11 processIdentifier];
        __int16 v47 = 2114;
        BOOL v48 = v10;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i task_state=%d for pid %d visibility = %{public}@", buf, 0x38u);
      }

      id v3 = v11;
      if (v9 && ([v9 taskState] == 2 || objc_msgSend(v9, "taskState") == 4)) {
        uint64_t v20 = v32;
      }
      else {
        uint64_t v20 = 0;
      }

      __int16 v27 = obj;
      objc_sync_exit(obj);
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v21 = NFLogGetLogger();
      if (v21)
      {
        __int16 v22 = (void (*)(uint64_t, const char *, ...))v21;
        __int16 v23 = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(v23);
        int v25 = object_getClassName(a1);
        unsigned int v31 = sel_getName("isClientForeground:");
        uint64_t v26 = 45;
        if (isMetaClass) {
          uint64_t v26 = 43;
        }
        v22(3, "%c[%{public}s %{public}s]:%i No RB, faking result", v26, v25, v31, 166);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v27 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v28 = object_getClass(a1);
        if (class_isMetaClass(v28)) {
          int v29 = 43;
        }
        else {
          int v29 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v36 = v29;
        __int16 v37 = 2082;
        __int16 v38 = object_getClassName(a1);
        __int16 v39 = 2082;
        int v40 = sel_getName("isClientForeground:");
        __int16 v41 = 1024;
        int v42 = 166;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No RB, faking result", buf, 0x22u);
      }
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }

  return v20;
}

void sub_100053B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id obj)
{
}

uint64_t sub_100053BEC()
{
  uint64_t result = _sl_dlopen();
  qword_100347740 = result;
  return result;
}

void sub_100053C60(uint64_t a1)
{
  sub_100053D28();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessMonitor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1003472F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getRBSProcessMonitorClass(void)_block_invoke"];
    [v2 handleFailureInFunction:v3 file:@"NFClientAppStateObserver.m" lineNumber:22 description:@"Unable to find class %s", "RBSProcessMonitor"];

    __break(1u);
  }
}

void sub_100053D28()
{
  if (!sub_10000A018())
  {
    unsigned __int8 v0 = +[NSAssertionHandler currentHandler];
    id v1 = +[NSString stringWithUTF8String:"void *RunningBoardServicesLibrary(void)"];
    [v0 handleFailureInFunction:v1 file:@"NFClientAppStateObserver.m" lineNumber:21 description:@"%s"];

    __break(1u);
    free(v2);
  }
}

void sub_100053DD0(uint64_t a1)
{
  sub_100053D28();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessStateDescriptor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1003472F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getRBSProcessStateDescriptorClass(void)_block_invoke"];
    [v2 handleFailureInFunction:v3 file:@"NFClientAppStateObserver.m" lineNumber:23 description:@"Unable to find class %s" arguments:("RBSProcessStateDescriptor", nil)];

    __break(1u);
  }
}

void sub_100053E98(uint64_t a1)
{
  sub_100053D28();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessIdentifier");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100347300 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getRBSProcessIdentifierClass(void)_block_invoke"];
    [v2 handleFailureInFunction:v3 file:@"NFClientAppStateObserver.m" lineNumber:25 description:@"Unable to find class %s", "RBSProcessIdentifier"];

    __break(1u);
  }
}

void sub_100053F60(uint64_t a1)
{
  sub_100053D28();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessPredicate");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100347308 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getRBSProcessPredicateClass(void)_block_invoke"];
    [v2 handleFailureInFunction:v3 file:@"NFClientAppStateObserver.m" lineNumber:24 description:@"Unable to find class %s", "RBSProcessPredicate"];

    __break(1u);
  }
}

void sub_100054028(uint64_t a1)
{
  sub_100053D28();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("RBSProcessHandle");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_100347310 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = +[NSAssertionHandler currentHandler];
    id v3 = +[NSString stringWithUTF8String:"Class getRBSProcessHandleClass(void)_block_invoke"];
    [v2 handleFailureInFunction:v3 file:@"NFClientAppStateObserver.m" lineNumber:26 description:@"Unable to find class %s", "RBSProcessHandle"];

    __break(1u);
  }
}

void *sub_1000540F0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v8.receiver = a1;
    v8.super_class = (Class)NFWalletPresentationService;
    id v4 = [super init];
    a1 = v4;
    if (v4)
    {
      v4[3] = v3;
      uint64_t v5 = objc_opt_new();
      id v6 = (void *)a1[6];
      a1[6] = v5;
    }
  }

  return a1;
}

void sub_10005416C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
    {
      Class Class = object_getClass(v1);
      if (class_isMetaClass(Class)) {
        uint64_t v4 = 43;
      }
      else {
        uint64_t v4 = 45;
      }
      ClassName = object_getClassName(v1);
      Name = sel_getName("start");
      Logger(6, "%c[%{public}s %{public}s]:%i ", v4, ClassName, Name, 75);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      objc_super v8 = object_getClass(v1);
      if (class_isMetaClass(v8)) {
        int v9 = 43;
      }
      else {
        int v9 = 45;
      }
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)unsigned int v31 = 2082;
      *(void *)&v31[2] = object_getClassName(v1);
      __int16 v32 = 2082;
      __int16 v33 = sel_getName("start");
      __int16 v34 = 1024;
      int v35 = 75;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    if (*((unsigned char *)v1 + 8))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10)
      {
        uint64_t v11 = object_getClass(v1);
        if (class_isMetaClass(v11)) {
          uint64_t v12 = 43;
        }
        else {
          uint64_t v12 = 45;
        }
        uint64_t v13 = object_getClassName(v1);
        uint64_t v14 = sel_getName("start");
        v10(4, "%c[%{public}s %{public}s]:%i Previously invalidated", v12, v13, v14, 77);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v16 = object_getClass(v1);
        if (class_isMetaClass(v16)) {
          int v17 = 43;
        }
        else {
          int v17 = 45;
        }
        uint64_t v18 = object_getClassName(v1);
        int v19 = sel_getName("start");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)unsigned int v31 = 2082;
        *(void *)&v31[2] = v18;
        __int16 v32 = 2082;
        __int16 v33 = v19;
        __int16 v34 = 1024;
        int v35 = 77;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Previously invalidated", buf, 0x22u);
      }
    }
    else
    {
      uint64_t v20 = _os_activity_create((void *)&_mh_execute_header, "NFWalletPresentmentMonitor started", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
      *(void *)buf = 0;
      *(void *)unsigned int v31 = 0;
      os_activity_scope_enter(v20, (os_activity_scope_state_t)buf);
      os_activity_scope_leave((os_activity_scope_state_t)buf);

      uint64_t v21 = NFSharedSignpostLog();
      if (os_signpost_enabled(v21))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFWalletPresentmentMonitor_START", (const char *)&unk_100286819, buf, 2u);
      }

      id v22 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.nfcd.wallet.presentation"];
      objc_storeStrong(v1 + 2, v22);

      id v23 = v1[2];
      [v23 setDelegate:v1];

      __int16 v24 = v1[6];
      if (v24)
      {
        v24[10] = 0;
        *((_WORD *)v24 + 4) = 0;
      }

      id v25 = v1[2];
      [v25 activate];

      if (!v1[5])
      {
        uint64_t v26 = objc_opt_new();
        objc_storeStrong(v1 + 5, v26);

        id v27 = v1[5];
        int v28 = dispatch_get_global_queue(25, 0);
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_100054604;
        v29[3] = &unk_100301E68;
        void v29[4] = v1;
        sub_100201234(v27, v28, v29);
      }
    }
    objc_sync_exit(v1);
  }
}

void sub_1000545CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100054604(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v2 = v1;
    objc_sync_enter(v2);
    if (!v2[2])
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(v2);
        if (class_isMetaClass(Class)) {
          uint64_t v22 = 43;
        }
        else {
          uint64_t v22 = 45;
        }
        ClassName = object_getClassName(v2);
        Name = sel_getName("_keybagUpdate");
        Logger(4, "%c[%{public}s %{public}s]:%i Abort the initialization sequence", v22, ClassName, Name, 52);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v25 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = object_getClass(v2);
        if (class_isMetaClass(v26)) {
          int v27 = 43;
        }
        else {
          int v27 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v29 = v27;
        __int16 v30 = 2082;
        unsigned int v31 = object_getClassName(v2);
        __int16 v32 = 2082;
        __int16 v33 = sel_getName("_keybagUpdate");
        __int16 v34 = 1024;
        int v35 = 52;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Abort the initialization sequence", buf, 0x22u);
      }

      goto LABEL_32;
    }
    id v3 = v2 + 5;
    id v4 = v2[5];
    if (sub_100201550(v4))
    {
      id v5 = *v3;
      if (sub_1002015A0(v5))
      {
        id v6 = v2[4];

        if (!v6)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v7)
          {
            objc_super v8 = object_getClass(v2);
            if (class_isMetaClass(v8)) {
              uint64_t v9 = 43;
            }
            else {
              uint64_t v9 = 45;
            }
            int v10 = object_getClassName(v2);
            uint64_t v11 = sel_getName("_keybagUpdate");
            v7(6, "%c[%{public}s %{public}s]:%i Starting event publisher", v9, v10, v11, 58);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v12 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = object_getClass(v2);
            if (class_isMetaClass(v13)) {
              int v14 = 43;
            }
            else {
              int v14 = 45;
            }
            *(_DWORD *)buf = 67109890;
            int v29 = v14;
            __int16 v30 = 2082;
            unsigned int v31 = object_getClassName(v2);
            __int16 v32 = 2082;
            __int16 v33 = sel_getName("_keybagUpdate");
            __int16 v34 = 1024;
            int v35 = 58;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Starting event publisher", buf, 0x22u);
          }

          int v15 = objc_opt_new();
          objc_storeStrong(v2 + 4, v15);

          id v16 = v2[3];
          int v17 = v2[4];
          if (v17) {
            void v17[5] = v16;
          }

          id v18 = v2[4];
          [v18 addObserver:v2 forKeyPath:@"walletDomain" options:5 context:off_100344CB0];

          id v19 = *v3;
          sub_100201390(v19);

          objc_storeStrong(v2 + 5, 0);
        }
        goto LABEL_32;
      }
    }
LABEL_32:
    objc_sync_exit(v2);
  }
}

void sub_1000549A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000549D8(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    if (*((unsigned char *)v1 + 8))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(v1);
        if (class_isMetaClass(Class)) {
          uint64_t v4 = 43;
        }
        else {
          uint64_t v4 = 45;
        }
        ClassName = object_getClassName(v1);
        Name = sel_getName("invalidate");
        Logger(4, "%c[%{public}s %{public}s]:%i Previously invalidated", v4, ClassName, Name, 103);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        objc_super v8 = object_getClass(v1);
        if (class_isMetaClass(v8)) {
          int v9 = 43;
        }
        else {
          int v9 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v18 = v9;
        __int16 v19 = 2082;
        uint64_t v20 = object_getClassName(v1);
        __int16 v21 = 2082;
        uint64_t v22 = sel_getName("invalidate");
        __int16 v23 = 1024;
        int v24 = 103;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Previously invalidated", buf, 0x22u);
      }
    }
    else
    {
      *((unsigned char *)v1 + _Block_object_dispose(&STACK[0x2B0], 8) = 1;
      id v10 = v1[2];
      [v10 invalidate];

      id v11 = v1[2];
      [v11 setDelegate:0];

      id v12 = v1[2];
      v1[2] = 0;

      id v13 = v1[5];
      sub_100201390(v13);

      id v14 = v1[5];
      v1[5] = 0;

      id v15 = v1[4];
      [v15 removeObserver:v1 forKeyPath:@"walletDomain"];

      id v16 = v1[4];
      v1[4] = 0;
    }
    objc_sync_exit(v1);
  }
}

void sub_100054C08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100055120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *a18, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a18);
  objc_destroyWeak((id *)(v19 - 184));
  _Unwind_Resume(a1);
}

void sub_100055174(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = _os_activity_create((void *)&_mh_execute_header, "NFWalletPresentmentMonitor xpcInvalidated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    *(void *)os_activity_scope_state_s state = 0;
    *(void *)&state[8] = 0;
    os_activity_scope_enter(v3, (os_activity_scope_state_t)state);
    os_activity_scope_leave((os_activity_scope_state_t)state);

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class)) {
        uint64_t v7 = 43;
      }
      else {
        uint64_t v7 = 45;
      }
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v10 = sub_1001E3884(WeakRetained);
      id v11 = (void *)v10;
      if (v10) {
        id v12 = *(void **)(v10 + 8);
      }
      else {
        id v12 = 0;
      }
      id v13 = v12;
      v5(6, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", v7, ClassName, Name, 144, v13);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      int v17 = object_getClassName(*(id *)(a1 + 32));
      int v18 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v19 = sub_1001E3884(WeakRetained);
      uint64_t v20 = (void *)v19;
      if (v19) {
        __int16 v21 = *(void **)(v19 + 8);
      }
      else {
        __int16 v21 = 0;
      }
      id v22 = v21;
      *(_DWORD *)os_activity_scope_state_s state = 67110146;
      *(_DWORD *)&state[4] = v16;
      *(_WORD *)&state[8] = 2082;
      *(void *)&state[10] = v17;
      __int16 v24 = 2082;
      id v25 = v18;
      __int16 v26 = 1024;
      int v27 = 144;
      __int16 v28 = 2114;
      id v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", state, 0x2Cu);
    }
    [WeakRetained setUserInfo:0];
  }
}

void sub_1000553D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = _os_activity_create((void *)&_mh_execute_header, "NFWalletPresentmentMonitor xpcInterrupted", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    *(void *)os_activity_scope_state_s state = 0;
    *(void *)&state[8] = 0;
    os_activity_scope_enter(v3, (os_activity_scope_state_t)state);
    os_activity_scope_leave((os_activity_scope_state_t)state);

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class)) {
        uint64_t v7 = 43;
      }
      else {
        uint64_t v7 = 45;
      }
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v10 = sub_1001E3884(WeakRetained);
      id v11 = (void *)v10;
      if (v10) {
        id v12 = *(void **)(v10 + 8);
      }
      else {
        id v12 = 0;
      }
      id v13 = v12;
      v5(6, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", v7, ClassName, Name, 155, v13);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      int v17 = object_getClassName(*(id *)(a1 + 32));
      int v18 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v19 = sub_1001E3884(WeakRetained);
      uint64_t v20 = (void *)v19;
      if (v19) {
        __int16 v21 = *(void **)(v19 + 8);
      }
      else {
        __int16 v21 = 0;
      }
      id v22 = v21;
      *(_DWORD *)os_activity_scope_state_s state = 67110146;
      *(_DWORD *)&state[4] = v16;
      *(_WORD *)&state[8] = 2082;
      *(void *)&state[10] = v17;
      __int16 v24 = 2082;
      id v25 = v18;
      __int16 v26 = 1024;
      int v27 = 155;
      __int16 v28 = 2114;
      id v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i XPC (%{public}@) invalidated", state, 0x2Cu);
    }
  }
}

void sub_100055AB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100055E14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100055EA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100055F84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100056078(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000567FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
  if (!v2)
  {
    uint64_t v3 = objc_opt_new();
    uint64_t v4 = *(void **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2B0], 8) = v3;

    id v2 = *(void **)(a1 + 8);
  }

  return v2;
}

id sub_100056850(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v7 = 45;
    if (isMetaClass) {
      uint64_t v7 = 43;
    }
    v3(4, "%c[%{public}s %{public}s]:%i No settings found; init to default value", v7, ClassName, Name, 187);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  objc_super v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    int v9 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v9)) {
      int v10 = 43;
    }
    else {
      int v10 = 45;
    }
    id v11 = object_getClassName(*(id *)(a1 + 32));
    id v12 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67109890;
    int v19 = v10;
    __int16 v20 = 2082;
    __int16 v21 = v11;
    __int16 v22 = 2082;
    __int16 v23 = v12;
    __int16 v24 = 1024;
    int v25 = 187;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No settings found; init to default value",
      buf,
      0x22u);
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13 && (*(unsigned char *)(v13 + 32) = 0, (uint64_t v14 = *(void *)(a1 + 32)) != 0)) {
    id v15 = *(void **)(v14 + 64);
  }
  else {
    id v15 = 0;
  }
  return [v15 setBool:0 forKey:@"walletDoubleButtonPressedConsumerAvailable"];
}

id sub_1000569FC(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 40) BOOLValue];
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3 || (*(unsigned char *)(v3 + 33) = v2, (uint64_t v4 = *(void *)(a1 + 32)) == 0) || !*(unsigned char *)(v4 + 33))
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      __int16 v20 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(Class)) {
        uint64_t v22 = 43;
      }
      else {
        uint64_t v22 = 45;
      }
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v25 = *(void *)(a1 + 32);
      if (v25) {
        uint64_t v25 = *(unsigned __int8 *)(v25 + 32);
      }
      v20(5, "%c[%{public}s %{public}s]:%i [Resume] Consumer available=%{public}d", v22, ClassName, Name, 214, v25);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v26 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v27)) {
        int v28 = 43;
      }
      else {
        int v28 = 45;
      }
      id v29 = object_getClassName(*(id *)(a1 + 32));
      __int16 v30 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v31 = *(void *)(a1 + 32);
      if (v31) {
        LODWORD(v31) = *(unsigned __int8 *)(v31 + 32);
      }
      *(_DWORD *)buf = 67110146;
      int v37 = v28;
      __int16 v38 = 2082;
      __int16 v39 = v29;
      __int16 v40 = 2082;
      __int16 v41 = v30;
      __int16 v42 = 1024;
      int v43 = 214;
      __int16 v44 = 1026;
      int v45 = v31;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i [Resume] Consumer available=%{public}d", buf, 0x28u);
    }

    uint64_t v32 = *(void *)(a1 + 32);
    if (v32)
    {
      int v17 = *(void **)(v32 + 64);
      int v18 = *(unsigned __int8 *)(v32 + 32);
      goto LABEL_31;
    }
LABEL_33:
    int v17 = 0;
    BOOL v33 = 0;
    return [v17 setBool:v33 forKey:@"walletDoubleButtonPressedConsumerAvailable"];
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v5 = NFLogGetLogger();
  if (v5)
  {
    id v6 = (void (*)(uint64_t, const char *, ...))v5;
    uint64_t v7 = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(v7);
    int v9 = object_getClassName(*(id *)(a1 + 32));
    int v35 = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v10 = 45;
    if (isMetaClass) {
      uint64_t v10 = 43;
    }
    v6(5, "%c[%{public}s %{public}s]:%i [Suspension] Consumer available=0", v10, v9, v35, 210);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12)) {
      int v13 = 43;
    }
    else {
      int v13 = 45;
    }
    uint64_t v14 = object_getClassName(*(id *)(a1 + 32));
    id v15 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    int v37 = v13;
    __int16 v38 = 2082;
    __int16 v39 = v14;
    __int16 v40 = 2082;
    __int16 v41 = v15;
    __int16 v42 = 1024;
    int v43 = 210;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i [Suspension] Consumer available=0", buf, 0x22u);
  }

  uint64_t v16 = *(void *)(a1 + 32);
  if (!v16) {
    goto LABEL_33;
  }
  int v17 = *(void **)(v16 + 64);
  int v18 = *(unsigned __int8 *)(v16 + 33);
LABEL_31:
  BOOL v33 = v18 != 0;
  return [v17 setBool:v33 forKey:@"walletDoubleButtonPressedConsumerAvailable"];
}

void sub_100056DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100056E04(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 24);
  return result;
}

id sub_100056E18(os_unfair_lock_s *a1)
{
  if (a1)
  {
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x3032000000;
    int v13 = sub_10000B7F8;
    uint64_t v14 = sub_100056F50;
    id v15 = 0;
    id v1 = a1 + 4;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    id v6 = sub_100056F58;
    uint64_t v7 = &unk_100301EB8;
    objc_super v8 = a1;
    int v9 = &v10;
    unsigned __int8 v2 = v5;
    os_unfair_lock_lock(v1);
    v6((uint64_t)v2);
    os_unfair_lock_unlock(v1);

    id v3 = (id)v11[5];
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_100056F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100056F50(uint64_t a1)
{
}

void sub_100056F58(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 32);
  if (v2) {
    unsigned __int8 v2 = (void *)v2[7];
  }
  id v3 = v2;
  id v7 = [v3 defaultAppIdentifier];
  id v4 = [v7 copy];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100056FD0(id *a1)
{
  if (a1)
  {
    uint64_t v119 = 0;
    uint64_t v120 = &v119;
    uint64_t v121 = 0x2020000000;
    char v122 = 0;
    uint64_t v113 = 0;
    id v114 = &v113;
    uint64_t v115 = 0x3032000000;
    uint64_t v116 = sub_10000B7F8;
    int v117 = sub_100056F50;
    id v118 = 0;
    uint64_t v109 = 0;
    __int16 v110 = &v109;
    uint64_t v111 = 0x2020000000;
    uint64_t v112 = 0;
    unsigned __int8 v2 = (os_unfair_lock_s *)(a1 + 2);
    v102[0] = _NSConcreteStackBlock;
    v102[1] = 3221225472;
    __int16 v103 = sub_100057D50;
    id v104 = &unk_100301EE0;
    __int16 v105 = a1;
    id v106 = &v119;
    v107 = &v113;
    __int16 v108 = &v109;
    id v3 = v102;
    os_unfair_lock_lock(v2);
    v103(v3);
    os_unfair_lock_unlock(v2);

    if (*((unsigned char *)v120 + 24))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(a1);
        if (class_isMetaClass(Class)) {
          uint64_t v6 = 43;
        }
        else {
          uint64_t v6 = 45;
        }
        ClassName = object_getClassName(a1);
        Name = sel_getName("signalPresentation");
        Logger(5, "%c[%{public}s %{public}s]:%i Presentment intent suppression active", v6, ClassName, Name, 303);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v9 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      uint64_t v10 = object_getClass(a1);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      uint64_t v12 = object_getClassName(a1);
      int v13 = sel_getName("signalPresentation");
      *(_DWORD *)buf = 67109890;
      int v126 = v11;
      __int16 v127 = 2082;
      BOOL v128 = v12;
      __int16 v129 = 2082;
      long long v130 = v13;
      __int16 v131 = 1024;
      int v132 = 303;
      uint64_t v14 = "%c[%{public}s %{public}s]:%i Presentment intent suppression active";
      id v15 = v9;
      os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if ([(id)v114[5] lengthOfBytesUsingEncoding:4])
      {
        switch(v110[3])
        {
          case 0:
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            int v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v17)
            {
              int v18 = object_getClass(a1);
              if (class_isMetaClass(v18)) {
                uint64_t v19 = 43;
              }
              else {
                uint64_t v19 = 45;
              }
              __int16 v20 = object_getClassName(a1);
              __int16 v21 = sel_getName("signalPresentation");
              v17(6, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", v19, v20, v21, 329);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v22 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v23 = object_getClass(a1);
              if (class_isMetaClass(v23)) {
                int v24 = 43;
              }
              else {
                int v24 = 45;
              }
              uint64_t v25 = object_getClassName(a1);
              __int16 v26 = sel_getName("signalPresentation");
              *(_DWORD *)buf = 67109890;
              int v126 = v24;
              __int16 v127 = 2082;
              BOOL v128 = v25;
              __int16 v129 = 2082;
              long long v130 = v26;
              __int16 v131 = 1024;
              int v132 = 329;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", buf, 0x22u);
            }

            goto LABEL_28;
          case 1:
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            __int16 v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v47)
            {
              BOOL v48 = object_getClass(a1);
              if (class_isMetaClass(v48)) {
                uint64_t v49 = 43;
              }
              else {
                uint64_t v49 = 45;
              }
              BOOL v50 = object_getClassName(a1);
              id v51 = sel_getName("signalPresentation");
              v47(6, "%c[%{public}s %{public}s]:%i Notifying %{public}@", v49, v50, v51, 322, v114[5]);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            id v52 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            {
              id v53 = object_getClass(a1);
              if (class_isMetaClass(v53)) {
                int v54 = 43;
              }
              else {
                int v54 = 45;
              }
              long long v55 = object_getClassName(a1);
              long long v56 = sel_getName("signalPresentation");
              uint64_t v57 = v114[5];
              *(_DWORD *)buf = 67110146;
              int v126 = v54;
              __int16 v127 = 2082;
              BOOL v128 = v55;
              __int16 v129 = 2082;
              long long v130 = v56;
              __int16 v131 = 1024;
              int v132 = 322;
              __int16 v133 = 2114;
              uint64_t v134 = v57;
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notifying %{public}@", buf, 0x2Cu);
            }

            sub_1000567FC((uint64_t)a1);
            id v37 = (id)objc_claimAutoreleasedReturnValue();
            [v37 launchBundleWithIdentifier:v114[5] launchReason:2 launchDomain:1];
            goto LABEL_110;
          case 2:
            int v123 = 0;
            id v124 = 0;
            uint64_t v58 = ACMContextCreate((uint64_t *)&v124);
            if (v58 || !v124)
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v71 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v71)
              {
                int v72 = object_getClass(a1);
                if (class_isMetaClass(v72)) {
                  uint64_t v73 = 43;
                }
                else {
                  uint64_t v73 = 45;
                }
                id v74 = object_getClassName(a1);
                uint64_t v75 = sel_getName("_consumeDoubleButtonCredential");
                v71(4, "%c[%{public}s %{public}s]:%i Failed to create ACMContext? %d", v73, v74, v75, 536, v58);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              id v76 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
              {
                uint64_t v77 = object_getClass(a1);
                if (class_isMetaClass(v77)) {
                  int v78 = 43;
                }
                else {
                  int v78 = 45;
                }
                id v79 = object_getClassName(a1);
                uint64_t v80 = sel_getName("_consumeDoubleButtonCredential");
                *(_DWORD *)buf = 67110146;
                int v126 = v78;
                __int16 v127 = 2082;
                BOOL v128 = v79;
                __int16 v129 = 2082;
                long long v130 = v80;
                __int16 v131 = 1024;
                int v132 = 536;
                __int16 v133 = 1024;
                LODWORD(v134) = v58;
                _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create ACMContext? %d", buf, 0x28u);
              }
            }
            else
            {
              uint64_t v59 = ACMCredentialCreate(5, &v123);
              if (v59 || !v123)
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v81 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v81)
                {
                  int v82 = object_getClass(a1);
                  if (class_isMetaClass(v82)) {
                    uint64_t v83 = 43;
                  }
                  else {
                    uint64_t v83 = 45;
                  }
                  id v84 = object_getClassName(a1);
                  id v85 = sel_getName("_consumeDoubleButtonCredential");
                  v81(4, "%c[%{public}s %{public}s]:%i Failed to create ACMCredential? %d", v83, v84, v85, 542, v59);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                long long v86 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                {
                  long long v87 = object_getClass(a1);
                  if (class_isMetaClass(v87)) {
                    int v88 = 43;
                  }
                  else {
                    int v88 = 45;
                  }
                  long long v89 = object_getClassName(a1);
                  id v90 = sel_getName("_consumeDoubleButtonCredential");
                  *(_DWORD *)buf = 67110146;
                  int v126 = v88;
                  __int16 v127 = 2082;
                  BOOL v128 = v89;
                  __int16 v129 = 2082;
                  long long v130 = v90;
                  __int16 v131 = 1024;
                  int v132 = 542;
                  __int16 v133 = 1024;
                  LODWORD(v134) = v59;
                  _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create ACMCredential? %d", buf, 0x28u);
                }

                ACMContextDelete(v124, 1);
              }
              else
              {
                uint64_t v60 = ACMContextAddCredentialWithScope(v124, v123, 1);
                if (v60)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  int v61 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v61)
                  {
                    __int16 v62 = object_getClass(a1);
                    if (class_isMetaClass(v62)) {
                      uint64_t v63 = 43;
                    }
                    else {
                      uint64_t v63 = 45;
                    }
                    __int16 v64 = object_getClassName(a1);
                    int v65 = sel_getName("_consumeDoubleButtonCredential");
                    v61(4, "%c[%{public}s %{public}s]:%i Failed to AddCredentialWithScope? %d", v63, v64, v65, 549, v60);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  __int16 v66 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v67 = object_getClass(a1);
                    if (class_isMetaClass(v67)) {
                      int v68 = 43;
                    }
                    else {
                      int v68 = 45;
                    }
                    id v69 = object_getClassName(a1);
                    int v70 = sel_getName("_consumeDoubleButtonCredential");
                    *(_DWORD *)buf = 67110146;
                    int v126 = v68;
                    __int16 v127 = 2082;
                    BOOL v128 = v69;
                    __int16 v129 = 2082;
                    long long v130 = v70;
                    __int16 v131 = 1024;
                    int v132 = 549;
                    __int16 v133 = 1024;
                    LODWORD(v134) = v60;
                    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to AddCredentialWithScope? %d", buf, 0x28u);
                  }
                }
                ACMContextDelete(v124, 1);
                ACMCredentialDelete(v123);
              }
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v91 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v91)
            {
              long long v92 = object_getClass(a1);
              if (class_isMetaClass(v92)) {
                uint64_t v93 = 43;
              }
              else {
                uint64_t v93 = 45;
              }
              int v94 = object_getClassName(a1);
              __int16 v95 = sel_getName("signalPresentation");
              v91(6, "%c[%{public}s %{public}s]:%i Notifying %{public}@", v93, v94, v95, 315, v114[5]);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            int v96 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v97 = object_getClass(a1);
              if (class_isMetaClass(v97)) {
                int v98 = 43;
              }
              else {
                int v98 = 45;
              }
              __int16 v99 = object_getClassName(a1);
              int v100 = sel_getName("signalPresentation");
              uint64_t v101 = v114[5];
              *(_DWORD *)buf = 67110146;
              int v126 = v98;
              __int16 v127 = 2082;
              BOOL v128 = v99;
              __int16 v129 = 2082;
              long long v130 = v100;
              __int16 v131 = 1024;
              int v132 = 315;
              __int16 v133 = 2114;
              uint64_t v134 = v101;
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notifying %{public}@", buf, 0x2Cu);
            }

            sub_1000567FC((uint64_t)a1);
            id v37 = (id)objc_claimAutoreleasedReturnValue();
            [v37 launchBundleWithIdentifier:v114[5] launchReason:2 launchDomain:0];
            goto LABEL_110;
          case 3:
          case 4:
LABEL_28:
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            int v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v27)
            {
              int v28 = object_getClass(a1);
              if (class_isMetaClass(v28)) {
                uint64_t v29 = 43;
              }
              else {
                uint64_t v29 = 45;
              }
              __int16 v30 = object_getClassName(a1);
              uint64_t v31 = sel_getName("signalPresentation");
              v27(6, "%c[%{public}s %{public}s]:%i Notifying passkit", v29, v30, v31, 333);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v32 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v33 = object_getClass(a1);
              if (class_isMetaClass(v33)) {
                int v34 = 43;
              }
              else {
                int v34 = 45;
              }
              int v35 = object_getClassName(a1);
              int v36 = sel_getName("signalPresentation");
              *(_DWORD *)buf = 67109890;
              int v126 = v34;
              __int16 v127 = 2082;
              BOOL v128 = v35;
              __int16 v129 = 2082;
              long long v130 = v36;
              __int16 v131 = 1024;
              int v132 = 333;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notifying passkit", buf, 0x22u);
            }

            id v37 = a1[5];
            [v37 syncSendSimpleEvent:@"com.apple.stockholm.wallet.pre-arm"];
LABEL_110:

            break;
          default:
            break;
        }
        +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:&off_100322AB0];
        goto LABEL_112;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v38)
      {
        __int16 v39 = object_getClass(a1);
        if (class_isMetaClass(v39)) {
          uint64_t v40 = 43;
        }
        else {
          uint64_t v40 = 45;
        }
        __int16 v41 = object_getClassName(a1);
        __int16 v42 = sel_getName("signalPresentation");
        v38(3, "%c[%{public}s %{public}s]:%i Invalid app identifier", v40, v41, v42, 307);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v9 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_14:

LABEL_112:
        _Block_object_dispose(&v109, 8);
        _Block_object_dispose(&v113, 8);

        _Block_object_dispose(&v119, 8);
        return;
      }
      int v43 = object_getClass(a1);
      if (class_isMetaClass(v43)) {
        int v44 = 43;
      }
      else {
        int v44 = 45;
      }
      int v45 = object_getClassName(a1);
      unsigned int v46 = sel_getName("signalPresentation");
      *(_DWORD *)buf = 67109890;
      int v126 = v44;
      __int16 v127 = 2082;
      BOOL v128 = v45;
      __int16 v129 = 2082;
      long long v130 = v46;
      __int16 v131 = 1024;
      int v132 = 307;
      uint64_t v14 = "%c[%{public}s %{public}s]:%i Invalid app identifier";
      id v15 = v9;
      os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    }
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, buf, 0x22u);
    goto LABEL_14;
  }
}

void sub_100057CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_100057D50(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    LOBYTE(v2) = *(unsigned char *)(v2 + 33) != 0;
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v2;
  id v3 = (void *)a1[4];
  if (v3) {
    id v3 = (void *)v3[7];
  }
  id v4 = v3;
  uint64_t v5 = [v4 defaultAppIdentifier];
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *(void *)(*(void *)(a1[7] + 8) + 24) = *(void *)(a1[4] + 24);
}

void sub_100057DD8(void *a1)
{
  if (a1)
  {
    NSKeyValueChangeKey v3 = NSKeyValueChangeNewKey;
    id v4 = &__kCFBooleanTrue;
    uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
    [a1 observeValueForKeyPath:0 ofObject:0 change:v2 context:off_100344D30];
  }
}

void sub_100057E8C(void *a1)
{
  if (a1)
  {
    NSKeyValueChangeKey v3 = NSKeyValueChangeNewKey;
    id v4 = &__kCFBooleanFalse;
    uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
    [a1 observeValueForKeyPath:0 ofObject:0 change:v2 context:off_100344D30];
  }
}

void sub_100057F40(id *a1)
{
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      NSKeyValueChangeKey v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("deassertPKForegroundPresentment");
      uint64_t v7 = 45;
      if (isMetaClass) {
        uint64_t v7 = 43;
      }
      v3(6, "%c[%{public}s %{public}s]:%i ", v7, ClassName, Name, 365);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    objc_super v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = object_getClass(a1);
      if (class_isMetaClass(v9)) {
        int v10 = 43;
      }
      else {
        int v10 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v18 = v10;
      __int16 v19 = 2082;
      __int16 v20 = object_getClassName(a1);
      __int16 v21 = 2082;
      uint64_t v22 = sel_getName("deassertPKForegroundPresentment");
      __int16 v23 = 1024;
      int v24 = 365;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    id v11 = [a1[7] walletDomain];
    NSKeyValueChangeKey v15 = NSKeyValueChangeNewKey;
    uint64_t v12 = +[NSNumber numberWithUnsignedInteger:v11];
    os_log_type_t v16 = v12;
    int v13 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    [a1 observeValueForKeyPath:0 ofObject:0 change:v13 context:off_100344D28];
  }
}

BOOL sub_100058140(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v54 = 0;
    long long v55 = &v54;
    uint64_t v56 = 0x2020000000;
    uint64_t v57 = 0;
    uint64_t v50 = 0;
    id v51 = &v50;
    uint64_t v52 = 0x2020000000;
    char v53 = 0;
    uint64_t v44 = 0;
    int v45 = &v44;
    uint64_t v46 = 0x3032000000;
    __int16 v47 = sub_10000B7F8;
    BOOL v48 = sub_100056F50;
    id v49 = 0;
    id v4 = (os_unfair_lock_s *)(a1 + 16);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    __int16 v38 = sub_100058704;
    __int16 v39 = &unk_100301EE0;
    uint64_t v40 = a1;
    __int16 v41 = &v54;
    __int16 v42 = &v50;
    int v43 = &v44;
    uint64_t v5 = v37;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v38(v5);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));

    BOOL v6 = *((unsigned char *)v51 + 24) == 0;
    if (*((unsigned char *)v51 + 24))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass((id)a1);
        if (class_isMetaClass(Class)) {
          uint64_t v9 = 43;
        }
        else {
          uint64_t v9 = 45;
        }
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("notifyPresentmentWithFieldNotification:");
        Logger(5, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", v9, ClassName, Name, 393);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = object_getClass((id)a1);
        if (class_isMetaClass(v13)) {
          int v14 = 43;
        }
        else {
          int v14 = 45;
        }
        NSKeyValueChangeKey v15 = object_getClassName((id)a1);
        os_log_type_t v16 = sel_getName("notifyPresentmentWithFieldNotification:");
        *(_DWORD *)buf = 67109890;
        int v61 = v14;
        __int16 v62 = 2082;
        uint64_t v63 = v15;
        __int16 v64 = 2082;
        int v65 = v16;
        __int16 v66 = 1024;
        int v67 = 393;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", buf, 0x22u);
      }
    }
    else
    {
      switch(v55[3])
      {
        case 0:
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          int v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v17)
          {
            int v18 = object_getClass((id)a1);
            if (class_isMetaClass(v18)) {
              uint64_t v19 = 43;
            }
            else {
              uint64_t v19 = 45;
            }
            __int16 v20 = object_getClassName((id)a1);
            __int16 v21 = sel_getName("notifyPresentmentWithFieldNotification:");
            v17(6, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", v19, v20, v21, 412);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v22 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v23 = object_getClass((id)a1);
            if (class_isMetaClass(v23)) {
              int v24 = 43;
            }
            else {
              int v24 = 45;
            }
            uint64_t v25 = object_getClassName((id)a1);
            __int16 v26 = sel_getName("notifyPresentmentWithFieldNotification:");
            *(_DWORD *)buf = 67109890;
            int v61 = v24;
            __int16 v62 = 2082;
            uint64_t v63 = v25;
            __int16 v64 = 2082;
            int v65 = v26;
            __int16 v66 = 1024;
            int v67 = 412;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", buf, 0x22u);
          }

          goto LABEL_26;
        case 1:
          int v27 = sub_1000567FC(a1);
          [v27 launchBundleWithIdentifier:v45[5] launchReason:1 launchDomain:1];
          goto LABEL_29;
        case 2:
          int v27 = sub_1000567FC(a1);
          [v27 launchBundleWithIdentifier:v45[5] launchReason:1 launchDomain:0];
          goto LABEL_29;
        case 3:
        case 4:
LABEL_26:
          int v27 = [v3 asXPCObject];
          id v28 = *(id *)(a1 + 40);
          v58[0] = @"xpcEventName";
          v58[1] = @"field";
          v59[0] = @"com.apple.stockholm.wallet.presentment.field-detect";
          v59[1] = v27;
          uint64_t v29 = +[NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:2];
          [v28 sendDictionary:v29];

          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472;
          BOOL v33 = sub_1000587A0;
          int v34 = &unk_100301C40;
          uint64_t v35 = a1;
          int v36 = "notifyPresentmentWithFieldNotification:";
          __int16 v30 = v32;
          os_unfair_lock_lock(v4);
          v33((uint64_t)v30);
          os_unfair_lock_unlock(v4);

LABEL_29:
          break;
        default:
          break;
      }
      +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:&off_100322AD8];
    }
    _Block_object_dispose(&v44, 8);

    _Block_object_dispose(&v50, 8);
    _Block_object_dispose(&v54, 8);
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

void sub_10005869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_100058704(void *a1)
{
  *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(a1[4] + 24);
  uint64_t v2 = a1[4];
  if (v2) {
    LOBYTE(v2) = *(unsigned char *)(v2 + 33) != 0;
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v2;
  id v3 = (void *)a1[4];
  if (v3) {
    id v3 = (void *)v3[7];
  }
  uint64_t v7 = v3;
  uint64_t v4 = [v7 defaultAppIdentifier];
  uint64_t v5 = *(void *)(a1[7] + 8);
  BOOL v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1000587A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (!*(unsigned char *)(v1 + 34)) {
      goto LABEL_13;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v4(4, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", v8, ClassName, Name, 425);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
      int v13 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      int v16 = v11;
      __int16 v17 = 2082;
      int v18 = v12;
      __int16 v19 = 2082;
      __int16 v20 = v13;
      __int16 v21 = 1024;
      int v22 = 425;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", buf, 0x22u);
    }

    uint64_t v1 = *(void *)(a1 + 32);
    if (v1) {
LABEL_13:
    }
      *(unsigned char *)(v1 + 34) = 1;
  }
}

BOOL sub_10005893C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v51 = 0;
    uint64_t v52 = &v51;
    uint64_t v53 = 0x2020000000;
    char v54 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = &v45;
    uint64_t v47 = 0x3032000000;
    BOOL v48 = sub_10000B7F8;
    id v49 = sub_100056F50;
    id v50 = 0;
    BOOL v6 = (os_unfair_lock_s *)(a1 + 16);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    uint64_t v40 = sub_100058ED8;
    __int16 v41 = &unk_100301F08;
    uint64_t v42 = a1;
    int v43 = &v51;
    uint64_t v44 = &v45;
    uint64_t v7 = v39;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v40(v7);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));

    BOOL v8 = *((unsigned char *)v52 + 24) == 0;
    if (*((unsigned char *)v52 + 24))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass((id)a1);
        if (class_isMetaClass(Class)) {
          uint64_t v11 = 43;
        }
        else {
          uint64_t v11 = 45;
        }
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
        Logger(5, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", v11, ClassName, Name, 456);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        NSKeyValueChangeKey v15 = object_getClass((id)a1);
        if (class_isMetaClass(v15)) {
          int v16 = 43;
        }
        else {
          int v16 = 45;
        }
        __int16 v17 = object_getClassName((id)a1);
        int v18 = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
        *(_DWORD *)buf = 67109890;
        int v58 = v16;
        __int16 v59 = 2082;
        uint64_t v60 = v17;
        __int16 v61 = 2082;
        __int16 v62 = v18;
        __int16 v63 = 1024;
        int v64 = 456;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Presentment is currently suspended", buf, 0x22u);
      }
    }
    else
    {
      switch(a3)
      {
        case 0:
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          __int16 v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v19)
          {
            __int16 v20 = object_getClass((id)a1);
            if (class_isMetaClass(v20)) {
              uint64_t v21 = 43;
            }
            else {
              uint64_t v21 = 45;
            }
            int v22 = object_getClassName((id)a1);
            __int16 v23 = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
            v19(6, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", v21, v22, v23, 475);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          int v24 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = object_getClass((id)a1);
            if (class_isMetaClass(v25)) {
              int v26 = 43;
            }
            else {
              int v26 = 45;
            }
            int v27 = object_getClassName((id)a1);
            id v28 = sel_getName("notifyPresentmentWithFieldNotification:walletDomain:");
            *(_DWORD *)buf = 67109890;
            int v58 = v26;
            __int16 v59 = 2082;
            uint64_t v60 = v27;
            __int16 v61 = 2082;
            __int16 v62 = v28;
            __int16 v63 = 1024;
            int v64 = 475;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Routing to passkit in unknown config", buf, 0x22u);
          }

          goto LABEL_26;
        case 1:
          uint64_t v29 = sub_1000567FC(a1);
          [v29 launchBundleWithIdentifier:v46[5] launchReason:1 launchDomain:1];
          goto LABEL_29;
        case 2:
          uint64_t v29 = sub_1000567FC(a1);
          [v29 launchBundleWithIdentifier:v46[5] launchReason:1 launchDomain:0];
          goto LABEL_29;
        case 3:
        case 4:
LABEL_26:
          uint64_t v29 = [v5 asXPCObject];
          id v30 = *(id *)(a1 + 40);
          v55[0] = @"xpcEventName";
          v55[1] = @"field";
          v56[0] = @"com.apple.stockholm.wallet.presentment.field-detect";
          v56[1] = v29;
          uint64_t v31 = +[NSDictionary dictionaryWithObjects:v56 forKeys:v55 count:2];
          [v30 sendDictionary:v31];

          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472;
          uint64_t v35 = sub_100058F64;
          int v36 = &unk_100301C40;
          uint64_t v37 = a1;
          __int16 v38 = "notifyPresentmentWithFieldNotification:walletDomain:";
          uint64_t v32 = v34;
          os_unfair_lock_lock(v6);
          v35((uint64_t)v32);
          os_unfair_lock_unlock(v6);

LABEL_29:
          break;
        default:
          break;
      }
      +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:&off_100322B00];
    }
    _Block_object_dispose(&v45, 8);

    _Block_object_dispose(&v51, 8);
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

void sub_100058E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_100058ED8(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    LOBYTE(v2) = *(unsigned char *)(v2 + 33) != 0;
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = v2;
  id v3 = (void *)a1[4];
  if (v3) {
    id v3 = (void *)v3[7];
  }
  uint64_t v7 = v3;
  uint64_t v4 = [v7 defaultAppIdentifier];
  uint64_t v5 = *(void *)(a1[6] + 8);
  BOOL v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100058F64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (!*(unsigned char *)(v1 + 34)) {
      goto LABEL_13;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v4(4, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", v8, ClassName, Name, 488);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
      int v13 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      int v16 = v11;
      __int16 v17 = 2082;
      int v18 = v12;
      __int16 v19 = 2082;
      __int16 v20 = v13;
      __int16 v21 = 1024;
      int v22 = 488;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected duplicated notification", buf, 0x22u);
    }

    uint64_t v1 = *(void *)(a1 + 32);
    if (v1) {
LABEL_13:
    }
      *(unsigned char *)(v1 + 34) = 1;
  }
}

id sub_100059100(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = objc_opt_new();
    id v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 32)];
    [v2 setObject:v3 forKeyedSubscript:@"PresenterAvailable"];

    uint64_t v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 33)];
    [v2 setObject:v4 forKeyedSubscript:@"PresenterSuspension"];

    uint64_t v5 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 24)];
    [v2 setObject:v5 forKeyedSubscript:@"WalletDomain"];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id sub_10005A7D8()
{
  self;
  unsigned __int8 v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFReaderSessionInternalInterface];
  +[NFReaderSessionInterface _configureInterface:v0];

  return v0;
}

id *sub_10005AA18(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  id v16 = a6;
  id v17 = a7;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)_NFSecureTransactionServicesHandoverSession;
    int v18 = (id *)[super initWithRemoteObject:a2 workQueue:a8 expressModeManager:a5 allowsBackgroundMode:1];
    __int16 v19 = v18;
    if (v18)
    {
      v18[20] = a3;
      v18[21] = a4;
      objc_storeStrong(v18 + 24, a6);
      objc_storeStrong(v19 + 23, a7);
    }
  }
  else
  {
    __int16 v19 = 0;
  }

  return v19;
}

void sub_10005AB74(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 200), a2);
  }
}

void sub_10005AFE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 120, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    __int16 v19 = v12;
    __int16 v20 = 2082;
    objc_super v21 = v13;
    __int16 v22 = 1024;
    int v23 = 120;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

id sub_10005B180(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = [v2 remoteObject];
    id v2 = [v4 remoteObjectProxyWithErrorHandler:v3];
  }

  return v2;
}

void sub_10005B28C(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 128, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    __int16 v19 = v12;
    __int16 v20 = 2082;
    objc_super v21 = v13;
    __int16 v22 = 1024;
    int v23 = 128;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_10005BEFC(uint64_t a1)
{
  if (a1)
  {
    id v2 = [NFSecureElementProxyListener alloc];
    id v3 = *(id *)(a1 + 184);
    uint64_t v4 = [(NFSecureElementProxyListener *)v2 initWithDriverWrapper:v3];
    uint64_t v5 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = v4;

    BOOL v6 = *(void **)(a1 + 200);
    id v7 = *(id *)(a1 + 224);
    id v8 = v6;
    uint64_t v9 = [(id)a1 workQueue];
    int v10 = [v8 startSEProxyListener:v7 parameters:&__NSDictionary0__struct workQueue:v9];

    if (v10)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v12 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_startSEProxyListener");
        uint64_t v15 = 45;
        if (isMetaClass) {
          uint64_t v15 = 43;
        }
        v12(3, "%c[%{public}s %{public}s]:%i SE proxy listener start error=%{public}@", v15, ClassName, Name, 249, v10);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v17 = object_getClass((id)a1);
        if (class_isMetaClass(v17)) {
          int v18 = 43;
        }
        else {
          int v18 = 45;
        }
        *(_DWORD *)buf = 67110146;
        int v22 = v18;
        __int16 v23 = 2082;
        __int16 v24 = object_getClassName((id)a1);
        __int16 v25 = 2082;
        int v26 = sel_getName("_startSEProxyListener");
        __int16 v27 = 1024;
        int v28 = 249;
        __int16 v29 = 2114;
        id v30 = v10;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SE proxy listener start error=%{public}@", buf, 0x2Cu);
      }
    }
  }
}

void sub_10005D058(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i error: %{public}@", v8, ClassName, Name, 259, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v22 = v11;
    __int16 v23 = 2082;
    __int16 v24 = v12;
    __int16 v25 = 2082;
    int v26 = v13;
    __int16 v27 = 1024;
    int v28 = 259;
    __int16 v29 = 2114;
    id v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i error: %{public}@", buf, 0x2Cu);
  }

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_10005D288;
  v19[3] = &unk_100301F70;
  long long v20 = *(_OWORD *)(a1 + 32);
  int v14 = sub_10005B180((id)v20, v19);
  [v14 didStartSession:v3];

  uint64_t v15 = *(void *)(a1 + 32);
  if (v15) {
    id v16 = *(void **)(v15 + 200);
  }
  else {
    id v16 = 0;
  }
  [v16 invalidate];
  sub_10005AB74(*(void *)(a1 + 32), 0);
}

void sub_10005D288(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 261, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    __int16 v19 = v12;
    __int16 v20 = 2082;
    objc_super v21 = v13;
    __int16 v22 = 1024;
    int v23 = 261;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_10005D420(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10005D4B0;
  v2[3] = &unk_100301F70;
  long long v3 = *(_OWORD *)(a1 + 32);
  uint64_t v1 = sub_10005B180((id)v3, v2);
  [v1 didStartSession:0];
}

void sub_10005D4B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 269, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    __int16 v19 = v12;
    __int16 v20 = 2082;
    objc_super v21 = v13;
    __int16 v22 = 1024;
    int v23 = 269;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

uint64_t sub_10005D648(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("getCHConfig");
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v3(6, "%c[%{public}s %{public}s]:%i type=0x%lx", v8, ClassName, Name, 811, v1[21]);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = object_getClass(v1);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      uint64_t v12 = object_getClassName(v1);
      int v13 = sel_getName("getCHConfig");
      uint64_t v14 = v1[21];
      *(_DWORD *)buf = 67110146;
      int v16 = v11;
      __int16 v17 = 2082;
      __int16 v18 = v12;
      __int16 v19 = 2082;
      __int16 v20 = v13;
      __int16 v21 = 1024;
      int v22 = 811;
      __int16 v23 = 2048;
      uint64_t v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i type=0x%lx", buf, 0x2Cu);
    }

    return (16 * (v1[21] & 1)) | (v1[21] >> 1) & 0xFLL;
  }
  return result;
}

uint64_t sub_10005D810(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 160);
    if ((unint64_t)(v2 - 2) < 3 || v2 == -1)
    {
      uint64_t v4 = +[NSAssertionHandler currentHandler];
      [v4 handleFailureInMethod:"getSTSHelperOperation" object:v1 file:@"_NFSecureTransactionServicesHandoverSession.m" lineNumber:835 description:@"Invalid"];

      return -1;
    }
    else
    {
      return v2 == 1;
    }
  }
  return result;
}

void sub_10005D8B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(3, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", v8, ClassName, Name, 308, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
      int v13 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      int v29 = v11;
      __int16 v30 = 2082;
      uint64_t v31 = v12;
      __int16 v32 = 2082;
      BOOL v33 = v13;
      __int16 v34 = 1024;
      int v35 = 308;
      __int16 v36 = 2114;
      id v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader start error: %{public}@", buf, 0x2Cu);
    }

    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = objc_alloc((Class)NSError);
    int v16 = +[NSString stringWithUTF8String:"nfcd"];
    id v17 = [v3 code];
    v26[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)[v3 code] > 70) {
      uint64_t v18 = 71;
    }
    else {
      uint64_t v18 = (uint64_t)[v3 code];
    }
    __int16 v19 = +[NSString stringWithUTF8String:off_100301F90[v18]];
    v27[0] = v19;
    v27[1] = v3;
    v26[1] = NSUnderlyingErrorKey;
    v26[2] = @"Line";
    v27[2] = &off_10031A500;
    v26[3] = @"Method";
    id v20 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
    v27[3] = v20;
    v26[4] = NSDebugDescriptionErrorKey;
    id v21 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 309];
    void v27[4] = v21;
    int v22 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:5];
    id v23 = [v15 initWithDomain:v16 code:v17 userInfo:v22];
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v23);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10005DC10(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass((id)a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName((id)a1);
    Name = sel_getName("_startTNEPReaderWithCallback:");
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v5(6, "%c[%{public}s %{public}s]:%i ", v9, ClassName, Name, 378);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass((id)a1);
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    *(_DWORD *)buf = 67109890;
    int v26 = v12;
    __int16 v27 = 2082;
    int v28 = object_getClassName((id)a1);
    __int16 v29 = 2082;
    __int16 v30 = sel_getName("_startTNEPReaderWithCallback:");
    __int16 v31 = 1024;
    int v32 = 378;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  int v13 = [NFTNEPHandler alloc];
  uint64_t v14 = *(void *)(a1 + 160);
  id v15 = (void *)a1;
  if (v14 != 1)
  {
    id v15 = [(id)a1 remoteObject];
  }
  id v16 = *(id *)(a1 + 184);
  id v17 = sub_1002535F4((id *)&v13->super.isa, (void *)1, v15, v16, (unint64_t)[(id)a1 signpostId]);
  uint64_t v18 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = v17;

  if (v14 != 1) {
  __int16 v19 = *(void **)(a1 + 216);
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10005E588;
  v22[3] = &unk_100302228;
  void v22[4] = a1;
  uint64_t v24 = "_startTNEPReaderWithCallback:";
  id v20 = v3;
  id v23 = v20;
  [v19 startTNEPReaderWithCallback:v22];
}

void sub_10005DEB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(3, "%c[%{public}s %{public}s]:%i Device start error: %{public}@", v8, ClassName, Name, 344, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      int v12 = object_getClassName(*(id *)(a1 + 32));
      int v13 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      int v29 = v11;
      __int16 v30 = 2082;
      __int16 v31 = v12;
      __int16 v32 = 2082;
      BOOL v33 = v13;
      __int16 v34 = 1024;
      int v35 = 344;
      __int16 v36 = 2114;
      id v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Device start error: %{public}@", buf, 0x2Cu);
    }

    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = objc_alloc((Class)NSError);
    id v16 = +[NSString stringWithUTF8String:"nfcd"];
    id v17 = [v3 code];
    v26[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)[v3 code] > 70) {
      uint64_t v18 = 71;
    }
    else {
      uint64_t v18 = (uint64_t)[v3 code];
    }
    __int16 v19 = +[NSString stringWithUTF8String:off_100301F90[v18]];
    v27[0] = v19;
    v27[1] = v3;
    v26[1] = NSUnderlyingErrorKey;
    v26[2] = @"Line";
    v27[2] = &off_10031A518;
    v26[3] = @"Method";
    id v20 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
    v27[3] = v20;
    v26[4] = NSDebugDescriptionErrorKey;
    id v21 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 345];
    void v27[4] = v21;
    int v22 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:5];
    id v23 = [v15 initWithDomain:v16 code:v17 userInfo:v22];
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v23);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10005E208(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_startTNEPDeviceWithServices:optionalRecords:callback:");
      uint64_t v14 = 45;
      if (isMetaClass) {
        uint64_t v14 = 43;
      }
      v11(6, "%c[%{public}s %{public}s]:%i services=%{public}@", v14, ClassName, Name, 362, v7);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = object_getClass((id)a1);
      if (class_isMetaClass(v16)) {
        int v17 = 43;
      }
      else {
        int v17 = 45;
      }
      *(_DWORD *)buf = 67110146;
      int v30 = v17;
      __int16 v31 = 2082;
      __int16 v32 = object_getClassName((id)a1);
      __int16 v33 = 2082;
      __int16 v34 = sel_getName("_startTNEPDeviceWithServices:optionalRecords:callback:");
      __int16 v35 = 1024;
      int v36 = 362;
      __int16 v37 = 2114;
      id v38 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i services=%{public}@", buf, 0x2Cu);
    }

    uint64_t v18 = [NFTNEPHandler alloc];
    uint64_t v19 = *(void *)(a1 + 160);
    if (v19)
    {
      id v20 = [(id)a1 remoteObject];
    }
    else
    {
      id v20 = (void *)a1;
    }
    id v21 = *(id *)(a1 + 184);
    int v22 = sub_1002535F4((id *)&v18->super.isa, 0, v20, v21, (unint64_t)[(id)a1 signpostId]);
    id v23 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = v22;

    if (v19) {
    uint64_t v24 = *(void **)(a1 + 216);
    }
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10005E4DC;
    v27[3] = &unk_100302200;
    id v28 = v9;
    [v24 startTNEPDeviceWithServices:v7 optionalRecords:v8 callback:v27];
  }
}

void sub_10005E4DC(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (!v6)
  {
    id v3 = +[_NFHardwareManager sharedHardwareManager];
    uint64_t v4 = +[NFRoutingConfig embeddedWiredModeWithHCE];
    id v5 = [v3 setRoutingConfig:v4];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005E588(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4
    && (uint64_t v5 = *(void *)(v4 + 184)) != 0
    && [*(id *)(v5 + 88) readerModeProtectionActive])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v7(4, "%c[%{public}s %{public}s]:%i Reader mode protection enabled", v11, ClassName, Name, 386);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      id v15 = object_getClassName(*(id *)(a1 + 32));
      id v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      int v32 = v14;
      __int16 v33 = 2082;
      __int16 v34 = v15;
      __int16 v35 = 2082;
      int v36 = v16;
      __int16 v37 = 1024;
      int v38 = 386;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Reader mode protection enabled", buf, 0x22u);
    }

    uint64_t v17 = *(void *)(a1 + 40);
    id v18 = objc_alloc((Class)NSError);
    uint64_t v19 = +[NSString stringWithUTF8String:"nfcd"];
    v29[0] = NSLocalizedDescriptionKey;
    id v20 = +[NSString stringWithUTF8String:"Reader mode temporarily disabled"];
    v30[0] = v20;
    v30[1] = &off_10031A548;
    v29[1] = @"Line";
    v29[2] = @"Method";
    id v21 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 48))];
    v30[2] = v21;
    v29[3] = NSDebugDescriptionErrorKey;
    id v22 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 48)), 387];
    v30[3] = v22;
    id v23 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:4];
    id v24 = [v18 initWithDomain:v19 code:47 userInfo:v23];
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v24);
  }
  else
  {
    if (!v3)
    {
      sub_1001B0E88(*(void *)(*(void *)(a1 + 32) + 176), *(void **)(a1 + 32));
      id v25 = +[NFRoutingConfig readerModeWithFD:1];
      [v25 setPollingMask:19 tagConfig:48];
      int v26 = +[_NFHardwareManager sharedHardwareManager];
      id v27 = [v26 setRoutingConfig:v25];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10005F060(uint64_t a1)
{
  if (([*(id *)(a1 + 32) didEnd] & 1) == 0)
  {
    id v4 = +[_NFHardwareManager sharedHardwareManager];
    uint64_t v2 = [v4 defaultRoutingConfig:3];
    id v3 = [v4 setRoutingConfig:v2];

    sub_1001B03F0(*(void *)(*(void *)(a1 + 32) + 176), *(void **)(a1 + 32));
  }
}

void sub_10005F210(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 64));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 457, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      int v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 64));
      id v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v68 = v12;
      __int16 v69 = 2082;
      int v70 = v13;
      __int16 v71 = 2082;
      int v72 = v14;
      __int16 v73 = 1024;
      int v74 = 457;
      __int16 v75 = 2114;
      id v76 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 56);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      id v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v65 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      __int16 v66 = v19;
      id v20 = +[NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, v21);

LABEL_15:
    }
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id v18 = *(id *)(a1 + 40);
    id v22 = (char *)[v18 countByEnumeratingWithState:&v53 objects:v64 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v54;
      while (2)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v54 != v24) {
            objc_enumerationMutation(v18);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v33 = *(void *)(a1 + 56);
            id v34 = objc_alloc((Class)NSError);
            __int16 v35 = +[NSString stringWithUTF8String:"nfcd"];
            v62[0] = NSLocalizedDescriptionKey;
            int v36 = +[NSString stringWithUTF8String:"Invalid Parameter"];
            v63[0] = v36;
            v63[1] = &off_10031A560;
            v62[1] = @"Line";
            v62[2] = @"Method";
            id v37 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 64))];
            v63[2] = v37;
            v62[3] = NSDebugDescriptionErrorKey;
            id v38 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 64)), 461];
            v63[3] = v38;
            __int16 v39 = v63;
            uint64_t v40 = v62;
LABEL_42:
            __int16 v41 = +[NSDictionary dictionaryWithObjects:v39 forKeys:v40 count:4];
            id v42 = [v34 initWithDomain:v35 code:10 userInfo:v41];
            (*(void (**)(uint64_t, id))(v33 + 16))(v33, v42);

            goto LABEL_15;
          }
        }
        id v23 = (char *)[v18 countByEnumeratingWithState:&v53 objects:v64 count:16];
        if (v23) {
          continue;
        }
        break;
      }
    }

    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v18 = *(id *)(a1 + 48);
    int v26 = (char *)[v18 countByEnumeratingWithState:&v49 objects:v61 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v50;
      while (2)
      {
        for (j = 0; j != v27; ++j)
        {
          if (*(void *)v50 != v28) {
            objc_enumerationMutation(v18);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v33 = *(void *)(a1 + 56);
            id v34 = objc_alloc((Class)NSError);
            __int16 v35 = +[NSString stringWithUTF8String:"nfcd"];
            v59[0] = NSLocalizedDescriptionKey;
            int v36 = +[NSString stringWithUTF8String:"Invalid Parameter"];
            v60[0] = v36;
            v60[1] = &off_10031A578;
            v59[1] = @"Line";
            void v59[2] = @"Method";
            id v37 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 64))];
            v60[2] = v37;
            v59[3] = NSDebugDescriptionErrorKey;
            id v38 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 64)), 467];
            v60[3] = v38;
            __int16 v39 = v60;
            uint64_t v40 = v59;
            goto LABEL_42;
          }
        }
        id v27 = (char *)[v18 countByEnumeratingWithState:&v49 objects:v61 count:16];
        if (v27) {
          continue;
        }
        break;
      }
    }

    uint64_t v30 = *(void *)(a1 + 32);
    if (!v30 || ((uint64_t v31 = *(void *)(v30 + 160)) != 0 ? (v32 = v31 == 3) : (v32 = 1), v32))
    {
      sub_10005E208(v30, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
    }
    else
    {
      uint64_t v43 = *(void *)(a1 + 56);
      id v44 = objc_alloc((Class)NSError);
      uint64_t v45 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v57 = NSLocalizedDescriptionKey;
      uint64_t v46 = +[NSString stringWithUTF8String:"Invalid State"];
      int v58 = v46;
      uint64_t v47 = +[NSDictionary dictionaryWithObjects:&v58 forKeys:&v57 count:1];
      id v48 = [v44 initWithDomain:v45 code:12 userInfo:v47];
      (*(void (**)(uint64_t, id))(v43 + 16))(v43, v48);
    }
  }
}

void sub_10005FA2C(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 485, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      int v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 56));
      id v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v63 = v12;
      __int16 v64 = 2082;
      NSErrorUserInfoKey v65 = v13;
      __int16 v66 = 2082;
      int v67 = v14;
      __int16 v68 = 1024;
      int v69 = 485;
      __int16 v70 = 2114;
      __int16 v71 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      id v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v60 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      __int16 v61 = v19;
      id v20 = +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, v21);
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v22 = NFLogGetLogger();
    if (v22)
    {
      id v23 = (void (*)(uint64_t, const char *, ...))v22;
      uint64_t v24 = object_getClass(*(id *)(a1 + 32));
      BOOL v25 = class_isMetaClass(v24);
      int v26 = object_getClassName(*(id *)(a1 + 32));
      long long v56 = sel_getName(*(SEL *)(a1 + 56));
      uint64_t v27 = 45;
      if (v25) {
        uint64_t v27 = 43;
      }
      v23(6, "%c[%{public}s %{public}s]:%i ", v27, v26, v56, 487);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v28 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v29)) {
        int v30 = 43;
      }
      else {
        int v30 = 45;
      }
      uint64_t v31 = object_getClassName(*(id *)(a1 + 32));
      BOOL v32 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      int v63 = v30;
      __int16 v64 = 2082;
      NSErrorUserInfoKey v65 = v31;
      __int16 v66 = 2082;
      int v67 = v32;
      __int16 v68 = 1024;
      int v69 = 487;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    uint64_t v33 = *(void *)(a1 + 32);
    if (v33)
    {
      id v34 = *(id *)(v33 + 216);
      if (v34)
      {
        uint64_t v35 = *(void *)(a1 + 32);
        if (v35)
        {
          uint64_t v36 = *(void *)(v35 + 160);

          if (v36 == 3)
          {
            uint64_t v37 = *(void *)(a1 + 32);
            if (v37) {
              id v38 = *(void **)(v37 + 216);
            }
            else {
              id v38 = 0;
            }
            [v38 tnepTagDeviceSendNDEFMessage:*(void *)(a1 + 40) callback:*(void *)(a1 + 48)];
            return;
          }
        }
        else
        {
        }
      }
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v39 = NFLogGetLogger();
    if (v39)
    {
      uint64_t v40 = (void (*)(uint64_t, const char *, ...))v39;
      __int16 v41 = object_getClass(*(id *)(a1 + 32));
      BOOL v42 = class_isMetaClass(v41);
      uint64_t v43 = object_getClassName(*(id *)(a1 + 32));
      NSErrorUserInfoKey v57 = sel_getName(*(SEL *)(a1 + 56));
      uint64_t v44 = 45;
      if (v42) {
        uint64_t v44 = 43;
      }
      v40(3, "%c[%{public}s %{public}s]:%i Invalid state", v44, v43, v57, 489);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v45 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      uint64_t v46 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v46)) {
        int v47 = 43;
      }
      else {
        int v47 = 45;
      }
      id v48 = object_getClassName(*(id *)(a1 + 32));
      long long v49 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      int v63 = v47;
      __int16 v64 = 2082;
      NSErrorUserInfoKey v65 = v48;
      __int16 v66 = 2082;
      int v67 = v49;
      __int16 v68 = 1024;
      int v69 = 489;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid state", buf, 0x22u);
    }

    uint64_t v50 = *(void *)(a1 + 48);
    id v51 = objc_alloc((Class)NSError);
    long long v52 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v58 = NSLocalizedDescriptionKey;
    long long v53 = +[NSString stringWithUTF8String:"Invalid State"];
    __int16 v59 = v53;
    long long v54 = +[NSDictionary dictionaryWithObjects:&v59 forKeys:&v58 count:1];
    id v55 = [v51 initWithDomain:v52 code:12 userInfo:v54];
    (*(void (**)(uint64_t, id))(v50 + 16))(v50, v55);
  }
}

void sub_1000600D4(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 502, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      int v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 48));
      id v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v47 = v12;
      __int16 v48 = 2082;
      long long v49 = v13;
      __int16 v50 = 2082;
      id v51 = v14;
      __int16 v52 = 1024;
      int v53 = 502;
      __int16 v54 = 2114;
      id v55 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      id v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v44 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      uint64_t v45 = v19;
      id v20 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, v21);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22 && *(void *)(v22 + 160) == 4)
    {
      id v23 = *(void **)(a1 + 40);
      sub_10005DC10(v22, v23);
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v24 = NFLogGetLogger();
      if (v24)
      {
        BOOL v25 = (void (*)(uint64_t, const char *, ...))v24;
        int v26 = object_getClass(*(id *)(a1 + 32));
        BOOL v27 = class_isMetaClass(v26);
        uint64_t v28 = object_getClassName(*(id *)(a1 + 32));
        __int16 v41 = sel_getName(*(SEL *)(a1 + 48));
        uint64_t v29 = 45;
        if (v27) {
          uint64_t v29 = 43;
        }
        v25(3, "%c[%{public}s %{public}s]:%i Invalid state", v29, v28, v41, 505);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v31)) {
          int v32 = 43;
        }
        else {
          int v32 = 45;
        }
        uint64_t v33 = object_getClassName(*(id *)(a1 + 32));
        id v34 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        int v47 = v32;
        __int16 v48 = 2082;
        long long v49 = v33;
        __int16 v50 = 2082;
        id v51 = v34;
        __int16 v52 = 1024;
        int v53 = 505;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid state", buf, 0x22u);
      }

      uint64_t v35 = *(void *)(a1 + 40);
      id v36 = objc_alloc((Class)NSError);
      uint64_t v37 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v42 = NSLocalizedDescriptionKey;
      id v38 = +[NSString stringWithUTF8String:"Invalid State"];
      uint64_t v43 = v38;
      uint64_t v39 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
      id v40 = [v36 initWithDomain:v37 code:12 userInfo:v39];
      (*(void (**)(uint64_t, id))(v35 + 16))(v35, v40);
    }
  }
}

void sub_100060694(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 517, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      int v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 56));
      id v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v60 = v12;
      __int16 v61 = 2082;
      __int16 v62 = v13;
      __int16 v63 = 2082;
      __int16 v64 = v14;
      __int16 v65 = 1024;
      int v66 = 517;
      __int16 v67 = 2114;
      __int16 v68 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      id v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v57 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      NSErrorUserInfoKey v58 = v19;
      id v20 = +[NSDictionary dictionaryWithObjects:&v58 forKeys:&v57 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, v21);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 216);
    }
    else {
      uint64_t v23 = 0;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFLogGetLogger();
    BOOL v25 = (void (*)(uint64_t, const char *, ...))v24;
    if (v23)
    {
      if (v24)
      {
        int v26 = object_getClass(*(id *)(a1 + 32));
        BOOL v27 = class_isMetaClass(v26);
        uint64_t v28 = object_getClassName(*(id *)(a1 + 32));
        uint64_t v29 = sel_getName(*(SEL *)(a1 + 56));
        uint64_t v30 = 45;
        if (v27) {
          uint64_t v30 = 43;
        }
        v25(6, "%c[%{public}s %{public}s]:%i %{public}@", v30, v28, v29, 523, *(void *)(a1 + 40));
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v32)) {
          int v33 = 43;
        }
        else {
          int v33 = 45;
        }
        id v34 = object_getClassName(*(id *)(a1 + 32));
        uint64_t v35 = sel_getName(*(SEL *)(a1 + 56));
        id v36 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 67110146;
        int v60 = v33;
        __int16 v61 = 2082;
        __int16 v62 = v34;
        __int16 v63 = 2082;
        __int16 v64 = v35;
        __int16 v65 = 1024;
        int v66 = 523;
        __int16 v67 = 2114;
        __int16 v68 = v36;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
      }

      uint64_t v37 = *(void *)(a1 + 32);
      if (v37) {
        id v38 = *(void **)(v37 + 216);
      }
      else {
        id v38 = 0;
      }
      [v38 tnepReaderSelectService:*(void *)(a1 + 40) callback:*(void *)(a1 + 48)];
    }
    else
    {
      if (v24)
      {
        uint64_t v39 = object_getClass(*(id *)(a1 + 32));
        BOOL v40 = class_isMetaClass(v39);
        __int16 v41 = object_getClassName(*(id *)(a1 + 32));
        __int16 v54 = sel_getName(*(SEL *)(a1 + 56));
        uint64_t v42 = 45;
        if (v40) {
          uint64_t v42 = 43;
        }
        v25(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v42, v41, v54, 520);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v43 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        NSErrorUserInfoKey v44 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v44)) {
          int v45 = 43;
        }
        else {
          int v45 = 45;
        }
        uint64_t v46 = object_getClassName(*(id *)(a1 + 32));
        int v47 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        int v60 = v45;
        __int16 v61 = 2082;
        __int16 v62 = v46;
        __int16 v63 = 2082;
        __int16 v64 = v47;
        __int16 v65 = 1024;
        int v66 = 520;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      uint64_t v48 = *(void *)(a1 + 48);
      id v49 = objc_alloc((Class)NSError);
      __int16 v50 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v55 = NSLocalizedDescriptionKey;
      id v51 = +[NSString stringWithUTF8String:"Invalid State"];
      long long v56 = v51;
      __int16 v52 = +[NSDictionary dictionaryWithObjects:&v56 forKeys:&v55 count:1];
      id v53 = [v49 initWithDomain:v50 code:12 userInfo:v52];
      (*(void (**)(uint64_t, id))(v48 + 16))(v48, v53);
    }
  }
}

void sub_100060D24(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 532, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      int v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 48));
      id v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v59 = v12;
      __int16 v60 = 2082;
      __int16 v61 = v13;
      __int16 v62 = 2082;
      __int16 v63 = v14;
      __int16 v64 = 1024;
      int v65 = 532;
      __int16 v66 = 2114;
      __int16 v67 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      id v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v56 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      NSErrorUserInfoKey v57 = v19;
      id v20 = +[NSDictionary dictionaryWithObjects:&v57 forKeys:&v56 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, v21);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 216);
    }
    else {
      uint64_t v23 = 0;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFLogGetLogger();
    BOOL v25 = (void (*)(uint64_t, const char *, ...))v24;
    if (v23)
    {
      if (v24)
      {
        int v26 = object_getClass(*(id *)(a1 + 32));
        BOOL v27 = class_isMetaClass(v26);
        uint64_t v28 = object_getClassName(*(id *)(a1 + 32));
        __int16 v52 = sel_getName(*(SEL *)(a1 + 48));
        uint64_t v29 = 45;
        if (v27) {
          uint64_t v29 = 43;
        }
        v25(6, "%c[%{public}s %{public}s]:%i ", v29, v28, v52, 538);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v31)) {
          int v32 = 43;
        }
        else {
          int v32 = 45;
        }
        int v33 = object_getClassName(*(id *)(a1 + 32));
        id v34 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        int v59 = v32;
        __int16 v60 = 2082;
        __int16 v61 = v33;
        __int16 v62 = 2082;
        __int16 v63 = v34;
        __int16 v64 = 1024;
        int v65 = 538;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      uint64_t v35 = *(void *)(a1 + 32);
      if (v35) {
        id v36 = *(void **)(v35 + 216);
      }
      else {
        id v36 = 0;
      }
      [v36 tnepReaderDeselectWithCallback:*(void *)(a1 + 40)];
    }
    else
    {
      if (v24)
      {
        uint64_t v37 = object_getClass(*(id *)(a1 + 32));
        BOOL v38 = class_isMetaClass(v37);
        uint64_t v39 = object_getClassName(*(id *)(a1 + 32));
        id v53 = sel_getName(*(SEL *)(a1 + 48));
        uint64_t v40 = 45;
        if (v38) {
          uint64_t v40 = 43;
        }
        v25(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v40, v39, v53, 535);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v41 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        uint64_t v42 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v42)) {
          int v43 = 43;
        }
        else {
          int v43 = 45;
        }
        NSErrorUserInfoKey v44 = object_getClassName(*(id *)(a1 + 32));
        int v45 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        int v59 = v43;
        __int16 v60 = 2082;
        __int16 v61 = v44;
        __int16 v62 = 2082;
        __int16 v63 = v45;
        __int16 v64 = 1024;
        int v65 = 535;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      uint64_t v46 = *(void *)(a1 + 40);
      id v47 = objc_alloc((Class)NSError);
      uint64_t v48 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v54 = NSLocalizedDescriptionKey;
      id v49 = +[NSString stringWithUTF8String:"Invalid State"];
      NSErrorUserInfoKey v55 = v49;
      __int16 v50 = +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
      id v51 = [v47 initWithDomain:v48 code:12 userInfo:v50];
      (*(void (**)(uint64_t, id))(v46 + 16))(v46, v51);
    }
  }
}

void sub_1000613C4(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 548, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      int v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 56));
      id v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v59 = v12;
      __int16 v60 = 2082;
      __int16 v61 = v13;
      __int16 v62 = 2082;
      __int16 v63 = v14;
      __int16 v64 = 1024;
      int v65 = 548;
      __int16 v66 = 2114;
      __int16 v67 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      id v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v56 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      NSErrorUserInfoKey v57 = v19;
      id v20 = +[NSDictionary dictionaryWithObjects:&v57 forKeys:&v56 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, void, id))(v16 + 16))(v16, 0, v21);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 216);
    }
    else {
      uint64_t v23 = 0;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFLogGetLogger();
    BOOL v25 = (void (*)(uint64_t, const char *, ...))v24;
    if (v23)
    {
      if (v24)
      {
        int v26 = object_getClass(*(id *)(a1 + 32));
        BOOL v27 = class_isMetaClass(v26);
        uint64_t v28 = object_getClassName(*(id *)(a1 + 32));
        __int16 v52 = sel_getName(*(SEL *)(a1 + 56));
        uint64_t v29 = 45;
        if (v27) {
          uint64_t v29 = 43;
        }
        v25(6, "%c[%{public}s %{public}s]:%i ", v29, v28, v52, 554);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v31)) {
          int v32 = 43;
        }
        else {
          int v32 = 45;
        }
        int v33 = object_getClassName(*(id *)(a1 + 32));
        id v34 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        int v59 = v32;
        __int16 v60 = 2082;
        __int16 v61 = v33;
        __int16 v62 = 2082;
        __int16 v63 = v34;
        __int16 v64 = 1024;
        int v65 = 554;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      uint64_t v35 = *(void *)(a1 + 32);
      if (v35) {
        id v36 = *(void **)(v35 + 216);
      }
      else {
        id v36 = 0;
      }
      [v36 tnepReaderSend:*(void *)(a1 + 40) callback:*(void *)(a1 + 48)];
    }
    else
    {
      if (v24)
      {
        uint64_t v37 = object_getClass(*(id *)(a1 + 32));
        BOOL v38 = class_isMetaClass(v37);
        uint64_t v39 = object_getClassName(*(id *)(a1 + 32));
        id v53 = sel_getName(*(SEL *)(a1 + 56));
        uint64_t v40 = 45;
        if (v38) {
          uint64_t v40 = 43;
        }
        v25(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v40, v39, v53, 551);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v41 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        uint64_t v42 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v42)) {
          int v43 = 43;
        }
        else {
          int v43 = 45;
        }
        NSErrorUserInfoKey v44 = object_getClassName(*(id *)(a1 + 32));
        int v45 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        int v59 = v43;
        __int16 v60 = 2082;
        __int16 v61 = v44;
        __int16 v62 = 2082;
        __int16 v63 = v45;
        __int16 v64 = 1024;
        int v65 = 551;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      uint64_t v46 = *(void *)(a1 + 48);
      id v47 = objc_alloc((Class)NSError);
      uint64_t v48 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v54 = NSLocalizedDescriptionKey;
      id v49 = +[NSString stringWithUTF8String:"Invalid State"];
      NSErrorUserInfoKey v55 = v49;
      __int16 v50 = +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
      id v51 = [v47 initWithDomain:v48 code:12 userInfo:v50];
      (*(void (**)(uint64_t, void, id))(v46 + 16))(v46, 0, v51);
    }
  }
}

void sub_100061A44(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 563, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      int v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 48));
      id v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v65 = v12;
      __int16 v66 = 2082;
      __int16 v67 = v13;
      __int16 v68 = 2082;
      int v69 = v14;
      __int16 v70 = 1024;
      int v71 = 563;
      __int16 v72 = 2114;
      __int16 v73 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      id v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v62 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      __int16 v63 = v19;
      id v20 = +[NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, id))(v16 + 16))(v16, v21);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 216);
    }
    else {
      uint64_t v23 = 0;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFLogGetLogger();
    BOOL v25 = (void (*)(uint64_t, const char *, ...))v24;
    if (v23)
    {
      if (v24)
      {
        int v26 = object_getClass(*(id *)(a1 + 32));
        BOOL v27 = class_isMetaClass(v26);
        uint64_t v28 = object_getClassName(*(id *)(a1 + 32));
        NSErrorUserInfoKey v58 = sel_getName(*(SEL *)(a1 + 48));
        uint64_t v29 = 45;
        if (v27) {
          uint64_t v29 = 43;
        }
        v25(6, "%c[%{public}s %{public}s]:%i ", v29, v28, v58, 569);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v31)) {
          int v32 = 43;
        }
        else {
          int v32 = 45;
        }
        int v33 = object_getClassName(*(id *)(a1 + 32));
        id v34 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        int v65 = v32;
        __int16 v66 = 2082;
        __int16 v67 = v33;
        __int16 v68 = 2082;
        int v69 = v34;
        __int16 v70 = 1024;
        int v71 = 569;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
      }

      uint64_t v35 = *(void *)(a1 + 32);
      if (v35)
      {
        id v36 = *(void **)(v35 + 184);
        uint64_t v37 = *(void **)(v35 + 208);
      }
      else
      {
        id v36 = 0;
        uint64_t v37 = 0;
      }
      id v38 = v36;
      sub_1001900C4(v38, v37, 0);

      uint64_t v39 = *(void *)(a1 + 32);
      if (v39) {
        uint64_t v40 = *(void **)(v39 + 216);
      }
      else {
        uint64_t v40 = 0;
      }
      [v40 tnepReaderRestartPollingWithCallback:*(void *)(a1 + 40)];
      uint64_t v41 = *(void *)(a1 + 32);
      if (v41) {
        uint64_t v42 = *(void **)(v41 + 184);
      }
      else {
        uint64_t v42 = 0;
      }
      sub_1002128B4(v42);
    }
    else
    {
      if (v24)
      {
        int v43 = object_getClass(*(id *)(a1 + 32));
        BOOL v44 = class_isMetaClass(v43);
        int v45 = object_getClassName(*(id *)(a1 + 32));
        int v59 = sel_getName(*(SEL *)(a1 + 48));
        uint64_t v46 = 45;
        if (v44) {
          uint64_t v46 = 43;
        }
        v25(3, "%c[%{public}s %{public}s]:%i Missing tnepHandler", v46, v45, v59, 566);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v47 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v48 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v48)) {
          int v49 = 43;
        }
        else {
          int v49 = 45;
        }
        __int16 v50 = object_getClassName(*(id *)(a1 + 32));
        id v51 = sel_getName(*(SEL *)(a1 + 48));
        *(_DWORD *)buf = 67109890;
        int v65 = v49;
        __int16 v66 = 2082;
        __int16 v67 = v50;
        __int16 v68 = 2082;
        int v69 = v51;
        __int16 v70 = 1024;
        int v71 = 566;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tnepHandler", buf, 0x22u);
      }

      uint64_t v52 = *(void *)(a1 + 40);
      id v53 = objc_alloc((Class)NSError);
      NSErrorUserInfoKey v54 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v60 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v55 = +[NSString stringWithUTF8String:"Invalid State"];
      __int16 v61 = v55;
      NSErrorUserInfoKey v56 = +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
      id v57 = [v53 initWithDomain:v54 code:12 userInfo:v56];
      (*(void (**)(uint64_t, id))(v52 + 16))(v52, v57);
    }
  }
}

void sub_1000623F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
}

void sub_100062414(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(WeakRetained);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(WeakRetained);
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v4(6, "%c[%{public}s %{public}s]:%i ", v8, ClassName, Name, 587);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = object_getClass(WeakRetained);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      int v12 = object_getClassName(WeakRetained);
      int v13 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67109890;
      int v20 = v11;
      __int16 v21 = 2082;
      uint64_t v22 = v12;
      __int16 v23 = 2082;
      uint64_t v24 = v13;
      __int16 v25 = 1024;
      int v26 = 587;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    [WeakRetained[27] tnepServiceInvalidate];
    id v14 = WeakRetained[27];
    WeakRetained[27] = 0;

    id v15 = +[_NFHardwareManager sharedHardwareManager];
    uint64_t v16 = +[NFRoutingConfig embeddedWiredModeWithFD:1];
    id v17 = [v15 setRoutingConfig:v16];
  }
}

void sub_1000629F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 614, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    int v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    uint64_t v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 614;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_100063040(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 629, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    int v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    uint64_t v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 629;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_1000631D8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 232), a2);
  }
}

void sub_1000631F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 644, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    int v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    uint64_t v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 644;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_100063388(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 648, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    int v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    uint64_t v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 648;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_100063678(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  sub_1000631D8(*(void *)(a1 + 32), v8);
  if (v8)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v13 = 45;
      if (isMetaClass) {
        uint64_t v13 = 43;
      }
      v10(3, "%c[%{public}s %{public}s]:%i CH process error=%{public}@", v13, ClassName, Name, 662, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      int v17 = object_getClassName(*(id *)(a1 + 32));
      __int16 v18 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      int v40 = v16;
      __int16 v41 = 2082;
      uint64_t v42 = v17;
      __int16 v43 = 2082;
      BOOL v44 = v18;
      __int16 v45 = 1024;
      int v46 = 662;
      __int16 v47 = 2114;
      id v48 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH process error=%{public}@", buf, 0x2Cu);
    }
  }
  if ([v7 length])
  {
    id v19 = objc_alloc((Class)NFNdefMessageInternal);
    id v20 = v7;
    id v21 = [v19 initWithBytes:[v20 bytes] length:[v20 length]];
  }
  else if (*(void *)(a1 + 32))
  {
    id v22 = objc_alloc_init((Class)NFNdefRecordInternal);
    [v22 setTypeNameFormat:1];
    id v23 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002836EE length:3];
    [v22 setType:v23];

    id v24 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002836F1 length:2];
    [v22 setPayload:v24];

    id v25 = objc_alloc_init((Class)NFNdefRecordInternal);
    id v26 = [objc_alloc((Class)NSMutableData) initWithBytes:&unk_1002836F5 length:2];
    BOOL v27 = [v22 asData];
    [v26 appendData:v27];

    [v25 setTypeNameFormat:1];
    id v28 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002836F3 length:2];
    [v25 setType:v28];

    [v25 setPayload:v26];
    id v21 = objc_alloc_init((Class)NFNdefMessageInternal);
    [v21 addRecord:v25];
  }
  else
  {
    id v21 = 0;
  }
  uint64_t v29 = *(void *)(a1 + 32);
  if (v29) {
    uint64_t v30 = *(void **)(v29 + 216);
  }
  else {
    uint64_t v30 = 0;
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  void v35[2] = sub_100063A60;
  v35[3] = &unk_1003022C8;
  uint64_t v31 = *(void *)(a1 + 40);
  id v36 = v8;
  uint64_t v37 = v31;
  v35[4] = v29;
  char v38 = a3;
  id v32 = v8;
  [v30 tnepTagDeviceSendNDEFMessage:v21 callback:v35];
}

void sub_100063A60(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(3, "%c[%{public}s %{public}s]:%i error=%{public}@", v8, ClassName, Name, 671, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    int v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    int v12 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v13 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)id v36 = v11;
    *(_WORD *)&v36[4] = 2082;
    *(void *)&v36[6] = v12;
    *(_WORD *)&v36[14] = 2082;
    *(void *)&v36[16] = v13;
    __int16 v37 = 1024;
    int v38 = 671;
    __int16 v39 = 2114;
    id v40 = v3;
    id v14 = "%c[%{public}s %{public}s]:%i error=%{public}@";
    id v15 = v9;
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    uint32_t v17 = 44;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v14, buf, v17);
LABEL_12:

    goto LABEL_14;
  }
  if (!*(void *)(a1 + 40) && *(unsigned char *)(a1 + 56))
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v22 = NFLogGetLogger();
    if (v22)
    {
      id v23 = (void (*)(uint64_t, const char *, ...))v22;
      id v24 = object_getClass(*(id *)(a1 + 32));
      BOOL v25 = class_isMetaClass(v24);
      id v26 = object_getClassName(*(id *)(a1 + 32));
      id v34 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v27 = 45;
      if (v25) {
        uint64_t v27 = 43;
      }
      v23(6, "%c[%{public}s %{public}s]:%i TNEP is completed", v27, v26, v34, 673);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    id v28 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v28)) {
      int v29 = 43;
    }
    else {
      int v29 = 45;
    }
    uint64_t v30 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v31 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)id v36 = v29;
    *(_WORD *)&v36[4] = 2082;
    *(void *)&v36[6] = v30;
    *(_WORD *)&v36[14] = 2082;
    *(void *)&v36[16] = v31;
    __int16 v37 = 1024;
    int v38 = 673;
    id v14 = "%c[%{public}s %{public}s]:%i TNEP is completed";
    id v15 = v9;
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
    uint32_t v17 = 34;
    goto LABEL_11;
  }
LABEL_14:
  __int16 v18 = NFSharedSignpostLog();
  id v19 = (char *)[*(id *)(a1 + 32) signpostId];
  if ((unint64_t)(v19 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v20 = (os_signpost_id_t)v19;
    if (os_signpost_enabled(v18))
    {
      if (v3)
      {
        id v21 = "Failed";
      }
      else
      {
        id v21 = "Failed";
        if (!*(void *)(a1 + 40) && *(unsigned char *)(a1 + 56)) {
          id v21 = "Completed";
        }
      }
      *(_DWORD *)buf = 136315394;
      *(void *)id v36 = v21;
      *(_WORD *)&v36[8] = 2112;
      *(void *)&v36[10] = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, v20, "CH_Negotiation", "status=%s, error=%@", buf, 0x16u);
    }
  }
}

void sub_100064274(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)NSError);
  uint64_t v5 = +[NSString stringWithUTF8String:"nfcd"];
  id v6 = [v3 code];
  v16[0] = NSLocalizedDescriptionKey;
  if ((uint64_t)[v3 code] > 70) {
    uint64_t v7 = 71;
  }
  else {
    uint64_t v7 = (uint64_t)[v3 code];
  }
  uint64_t v8 = +[NSString stringWithUTF8String:off_100301F90[v7]];
  v17[0] = v8;
  v17[1] = v3;
  v16[1] = NSUnderlyingErrorKey;
  void v16[2] = @"Line";
  v17[2] = &off_10031A590;
  v16[3] = @"Method";
  id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 40))];
  v17[3] = v9;
  void v16[4] = NSDebugDescriptionErrorKey;
  id v10 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 40)), 701];
  void v17[4] = v10;
  int v11 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:5];
  id v12 = [v4 initWithDomain:v5 code:v6 userInfo:v11];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000644FC;
  v14[3] = &unk_100301F70;
  long long v15 = *(_OWORD *)(a1 + 32);
  uint64_t v13 = sub_10005B180((id)v15, v14);
  [v13 connectionHandoverProcessFailure:v12];

  if ([v3 code] == (id)47) {
    [*(id *)(a1 + 32) tnepReaderServicesAborted:v3];
  }
}

void sub_1000644FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 703, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    id v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    id v12 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    id v19 = v12;
    __int16 v20 = 2082;
    id v21 = v13;
    __int16 v22 = 1024;
    int v23 = 703;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_100064694(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 712, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    id v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    id v12 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    id v19 = v12;
    __int16 v20 = 2082;
    id v21 = v13;
    __int16 v22 = 1024;
    int v23 = 712;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_10006482C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(3, "%c[%{public}s %{public}s]:%i select failed, error=%{public}@", v8, ClassName, Name, 717, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      id v12 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v13 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      int v25 = v11;
      __int16 v26 = 2082;
      uint64_t v27 = v12;
      __int16 v28 = 2082;
      int v29 = v13;
      __int16 v30 = 1024;
      int v31 = 717;
      __int16 v32 = 2114;
      id v33 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i select failed, error=%{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v14 = *(void **)(a1 + 32);
    if (v14) {
      long long v15 = (void *)v14[25];
    }
    else {
      long long v15 = 0;
    }
    id v16 = v15;
    int v17 = [v14 workQueue];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100064AA0;
    v22[3] = &unk_100302318;
    void v22[4] = *(void *)(a1 + 32);
    long long v21 = *(_OWORD *)(a1 + 40);
    id v18 = (id)v21;
    long long v23 = v21;
    [v16 generateConnectionHandoverRequestWithQueue:v17 responseHandler:v22];
  }
}

void sub_100064AA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v8(3, "%c[%{public}s %{public}s]:%i CH Request generation fail: %{public}@", v11, ClassName, Name, 725, v6);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      long long v15 = object_getClassName(*(id *)(a1 + 32));
      id v16 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      int v29 = v14;
      __int16 v30 = 2082;
      int v31 = v15;
      __int16 v32 = 2082;
      id v33 = v16;
      __int16 v34 = 1024;
      int v35 = 725;
      __int16 v36 = 2114;
      id v37 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH Request generation fail: %{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v17 = objc_alloc((Class)NFNdefMessageInternal);
    id v18 = v5;
    id v19 = [v17 initWithBytes:[v18 bytes] length:[v18 length]];
    uint64_t v20 = *(void *)(a1 + 32);
    if (v20) {
      long long v21 = *(void **)(v20 + 216);
    }
    else {
      long long v21 = 0;
    }
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100064D44;
    v26[3] = &unk_100302340;
    v26[4] = v20;
    long long v25 = *(_OWORD *)(a1 + 40);
    id v22 = (id)v25;
    long long v27 = v25;
    [v21 tnepReaderSend:v19 callback:v26];
  }
}

void sub_100064D44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v10 = 45;
      if (isMetaClass) {
        uint64_t v10 = 43;
      }
      v7(3, "%c[%{public}s %{public}s]:%i CH exchange error=%{public}@", v10, ClassName, Name, 733, v5);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v12)) {
        int v13 = 43;
      }
      else {
        int v13 = 45;
      }
      int v14 = object_getClassName(*(id *)(a1 + 32));
      long long v15 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      int v31 = v13;
      __int16 v32 = 2082;
      id v33 = v14;
      __int16 v34 = 2082;
      int v35 = v15;
      __int16 v36 = 1024;
      int v37 = 733;
      __int16 v38 = 2114;
      id v39 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i CH exchange error=%{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v16 = *(void **)(a1 + 32);
    if (v16) {
      id v16 = (void *)v16[25];
    }
    id v17 = v16;
    id v18 = [a2 asData];
    id v19 = [*(id *)(a1 + 32) workQueue];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100065040;
    v28[3] = &unk_100302228;
    v28[4] = *(void *)(a1 + 32);
    long long v26 = *(_OWORD *)(a1 + 40);
    id v20 = (id)v26;
    long long v29 = v26;
    [v17 connectRemoteWithConnectionHandoverSelect:v18 callbackQueue:v19 responseHandler:v28];

    uint64_t v21 = *(void *)(a1 + 32);
    if (v21) {
      id v22 = *(void **)(v21 + 216);
    }
    else {
      id v22 = 0;
    }
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1000651F0;
    v27[3] = &unk_100301F70;
    uint64_t v23 = *(void *)(a1 + 48);
    void v27[4] = v21;
    void v27[5] = v23;
    [v22 tnepReaderDeselectWithCallback:v27];
  }
}

void sub_100065040(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(3, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", v8, ClassName, Name, 743, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      id v12 = object_getClassName(*(id *)(a1 + 32));
      int v13 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      int v17 = v11;
      __int16 v18 = 2082;
      id v19 = v12;
      __int16 v20 = 2082;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = 743;
      __int16 v24 = 2114;
      id v25 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", buf, 0x2Cu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000651F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(6, "%c[%{public}s %{public}s]:%i Deselect failure: %@; ignore since AC has successfully negotiated and connection attempt started",
        v8,
        ClassName,
        Name,
        753,
        v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      id v12 = object_getClassName(*(id *)(a1 + 32));
      int v13 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      int v20 = v11;
      __int16 v21 = 2082;
      __int16 v22 = v12;
      __int16 v23 = 2082;
      __int16 v24 = v13;
      __int16 v25 = 1024;
      int v26 = 753;
      __int16 v27 = 2112;
      id v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Deselect failure: %@; ignore since AC has successfully negotiated and connection attempt started",
        buf,
        0x2Cu);
    }
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000653F4;
  v17[3] = &unk_100301F70;
  long long v18 = *(_OWORD *)(a1 + 32);
  int v14 = sub_10005B180((id)v18, v17);
  [v14 connectionHandoverProcessCompleted];
}

void sub_1000653F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 756, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    id v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    id v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 756;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_1000657D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(3, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", v8, ClassName, Name, 771, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      id v12 = object_getClassName(*(id *)(a1 + 32));
      int v13 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      int v22 = v11;
      __int16 v23 = 2082;
      __int16 v24 = v12;
      __int16 v25 = 2082;
      int v26 = v13;
      __int16 v27 = 1024;
      int v28 = 771;
      __int16 v29 = 2114;
      id v30 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i AC connection failure: %{public}@", buf, 0x2Cu);
    }

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100065A50;
    v19[3] = &unk_100301F70;
    long long v20 = *(_OWORD *)(a1 + 32);
    int v14 = sub_10005B180((id)v20, v19);
    [v14 connectionHandoverProcessFailure:v3];
  }
  else
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100065BE8;
    v17[3] = &unk_100301F70;
    long long v18 = *(_OWORD *)(a1 + 32);
    int v14 = sub_10005B180((id)v18, v17);
    [v14 connectionHandoverProcessCompleted];
  }
}

void sub_100065A50(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 773, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    id v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    id v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 773;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_100065BE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 778, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    id v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    id v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 778;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_100065FF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(3, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", v8, ClassName, Name, 793, v3);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    id v12 = object_getClassName(*(id *)(a1 + 32));
    int v13 = sel_getName(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 67110146;
    int v17 = v11;
    __int16 v18 = 2082;
    id v19 = v12;
    __int16 v20 = 2082;
    __int16 v21 = v13;
    __int16 v22 = 1024;
    int v23 = 793;
    __int16 v24 = 2114;
    id v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i XPC error=%{public}@", buf, 0x2Cu);
  }
}

void sub_100067030(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v8 = "Enable";
    }
    else {
      uint64_t v8 = "Disable";
    }
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %s ContinuousWave", v9, ClassName, Name, 187, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    int v14 = sel_getName(*(SEL *)(a1 + 48));
    if (*(unsigned char *)(a1 + 56)) {
      long long v15 = "Enable";
    }
    else {
      long long v15 = "Disable";
    }
    *(_DWORD *)buf = 67110146;
    int v51 = v12;
    __int16 v52 = 2082;
    id v53 = v13;
    __int16 v54 = 2082;
    NSErrorUserInfoKey v55 = v14;
    __int16 v56 = 1024;
    int v57 = 187;
    __int16 v58 = 2080;
    int v59 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %s ContinuousWave", buf, 0x2Cu);
  }

  id v16 = [*(id *)(a1 + 32) driverWrapper];
  int v17 = +[NFRoutingConfig none];
  __int16 v18 = [v16 setRouting:v17];

  if (v18)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v19 = NFLogGetLogger();
    if (v19)
    {
      __int16 v20 = (void (*)(uint64_t, const char *, ...))v19;
      __int16 v21 = object_getClass(*(id *)(a1 + 32));
      BOOL v22 = class_isMetaClass(v21);
      int v23 = object_getClassName(*(id *)(a1 + 32));
      id v48 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v24 = 45;
      if (v22) {
        uint64_t v24 = 43;
      }
      v20(6, "%c[%{public}s %{public}s]:%i Error turning off operating mode.", v24, v23, v48, 191);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v25 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_43;
    }
    int v26 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v26)) {
      int v27 = 43;
    }
    else {
      int v27 = 45;
    }
    int v28 = object_getClassName(*(id *)(a1 + 32));
    __int16 v29 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    int v51 = v27;
    __int16 v52 = 2082;
    id v53 = v28;
    __int16 v54 = 2082;
    NSErrorUserInfoKey v55 = v29;
    __int16 v56 = 1024;
    int v57 = 191;
    id v30 = "%c[%{public}s %{public}s]:%i Error turning off operating mode.";
    int v31 = v25;
    os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
    uint32_t v33 = 34;
    goto LABEL_42;
  }
  __int16 v34 = [*(id *)(a1 + 32) driverWrapper];
  __int16 v18 = [v34 enableContinuousWave:*(unsigned __int8 *)(a1 + 56) withFrequencySweep:*(unsigned __int8 *)(a1 + 57)];

  if (!v18)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 112) = *(unsigned char *)(a1 + 56);
    goto LABEL_44;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v35 = NFLogGetLogger();
  if (v35)
  {
    __int16 v36 = (void (*)(uint64_t, const char *, ...))v35;
    int v37 = object_getClass(*(id *)(a1 + 32));
    BOOL v38 = class_isMetaClass(v37);
    id v39 = object_getClassName(*(id *)(a1 + 32));
    id v40 = sel_getName(*(SEL *)(a1 + 48));
    if (*(unsigned char *)(a1 + 56)) {
      __int16 v41 = "enable";
    }
    else {
      __int16 v41 = "disable";
    }
    int v49 = v41;
    uint64_t v42 = 45;
    if (v38) {
      uint64_t v42 = 43;
    }
    v36(3, "%c[%{public}s %{public}s]:%i Failed to %s ContinuousWave - error=%{public}@", v42, v39, v40, 195, v49, v18);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v25 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    __int16 v43 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v43)) {
      int v44 = 43;
    }
    else {
      int v44 = 45;
    }
    __int16 v45 = object_getClassName(*(id *)(a1 + 32));
    int v46 = sel_getName(*(SEL *)(a1 + 48));
    if (*(unsigned char *)(a1 + 56)) {
      __int16 v47 = "enable";
    }
    else {
      __int16 v47 = "disable";
    }
    *(_DWORD *)buf = 67110402;
    int v51 = v44;
    __int16 v52 = 2082;
    id v53 = v45;
    __int16 v54 = 2082;
    NSErrorUserInfoKey v55 = v46;
    __int16 v56 = 1024;
    int v57 = 195;
    __int16 v58 = 2080;
    int v59 = v47;
    __int16 v60 = 2114;
    __int16 v61 = v18;
    id v30 = "%c[%{public}s %{public}s]:%i Failed to %s ContinuousWave - error=%{public}@";
    int v31 = v25;
    os_log_type_t v32 = OS_LOG_TYPE_ERROR;
    uint32_t v33 = 54;
LABEL_42:
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, v33);
  }
LABEL_43:

LABEL_44:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006770C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 8_Block_object_dispose(&STACK[0x2B0], 8) = 1;
  uint64_t v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)id v6 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "scanningForTags", (const char *)&unk_100286819, v6, 2u);
  }

  sub_1001B0E88(*(void *)(*(void *)(a1 + 32) + 128), *(void **)(a1 + 32));
  id v3 = [*(id *)(a1 + 32) driverWrapper];
  id v4 = +[NFRoutingConfig accessoryReaderWithPolling:239 lpcd:0];
  id v5 = [v3 setRouting:v4];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100067A5C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 52);
  *(unsigned char *)(*(void *)(a1 + 32) + 8_Block_object_dispose(&STACK[0x2B0], 8) = 1;
  *(_DWORD *)(*(void *)(a1 + 32) + 92) = *(_DWORD *)(a1 + 48);
  id v3 = NFSharedSignpostLog();
  if (os_signpost_enabled(v3))
  {
    int v4 = *(_DWORD *)(a1 + 48);
    v10[0] = 67109120;
    v10[1] = v4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "scanningForTags", "tech=0x%04x", (uint8_t *)v10, 8u);
  }

  uint64_t v5 = *(unsigned int *)(a1 + 48);
  uint64_t v6 = (v5 - 1);
  if (v6 <= 0x3F)
  {
    if (((1 << (v5 - 1)) & 0x800000008000000BLL) != 0) {
      goto LABEL_10;
    }
    if (v6 == 15)
    {
      uint64_t v5 = 8;
      goto LABEL_10;
    }
  }
  if (v5 == 128) {
    uint64_t v5 = 128;
  }
  else {
    uint64_t v5 = 239;
  }
LABEL_10:
  sub_1001B0E88(*(void *)(*(void *)(a1 + 32) + 128), *(void **)(a1 + 32));
  uint64_t v7 = [*(id *)(a1 + 32) driverWrapper];
  uint64_t v8 = +[NFRoutingConfig accessoryReaderWithPolling:v5 lpcd:v2 != 0];
  uint64_t v9 = [v7 setRouting:v8];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100067E28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 88))
  {
    *(unsigned char *)(v2 + 8_Block_object_dispose(&STACK[0x2B0], 8) = 0;
    id v3 = NFSharedSignpostLog();
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "scanningForTags", (const char *)&unk_100286819, v7, 2u);
    }

    uint64_t v2 = *(void *)(a1 + 32);
  }
  sub_1001B03F0(*(void *)(v2 + 128), (void *)v2);
  int v4 = [*(id *)(a1 + 32) driverWrapper];
  uint64_t v5 = +[NFRoutingConfig none];
  uint64_t v6 = [v4 setRouting:v5];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100068150(uint64_t a1)
{
  sub_1001B03F0(*(void *)(*(void *)(a1 + 32) + 128), *(void **)(a1 + 32));
  uint64_t v2 = [*(id *)(a1 + 32) driverWrapper];
  id v3 = [v2 currentRouting];
  id v4 = [v3 copy];

  uint64_t v5 = [*(id *)(a1 + 32) driverWrapper];
  uint64_t v6 = +[NFRoutingConfig none];
  id v8 = [v5 setRouting:v6];

  if (!v8)
  {
    sub_1001B0E88(*(void *)(*(void *)(a1 + 32) + 128), *(void **)(a1 + 32));
    uint64_t v7 = [*(id *)(a1 + 32) driverWrapper];
    id v8 = [v7 setRouting:v4];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000684C8(uint64_t a1)
{
  v31.tv_sec = 0;
  *(void *)&v31.tv_usec = 0;
  uint64_t v30 = 0;
  gettimeofday(&v31, &v30);
  *(void *)(*(void *)(a1 + 32) + 96) = 1000 * v31.tv_sec + v31.tv_usec / 1000;
  *(unsigned char *)(*(void *)(a1 + 32) + 89) = 0;
  uint64_t v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "connectTag", (const char *)&unk_100286819, (uint8_t *)buf, 2u);
  }

  id v3 = [*(id *)(a1 + 32) driverWrapper];
  unsigned int v4 = [v3 connectTag:*(void *)(a1 + 40)];

  uint64_t v5 = NFSharedSignpostLog();
  if (os_signpost_enabled(v5))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "connectTag", (const char *)&unk_100286819, (uint8_t *)buf, 2u);
  }

  if (v4)
  {
    id v6 = objc_alloc((Class)NSError);
    uint64_t v7 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    id v8 = +[NSString stringWithUTF8String:"Unknown Error"];
    uint32_t v33 = v8;
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    id v10 = [v6 initWithDomain:v7 code:6 userInfo:v9];
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 80), *(id *)(a1 + 40));
    [*(id *)(a1 + 32) _getMaxRFTimeLimitOverride];
    double v12 = v11;
    if (v11 > 0.0)
    {
      int v13 = *(void **)(a1 + 32);
      int v14 = (void *)v13[15];
      if (!v14)
      {
        objc_initWeak(buf, v13);
        id v15 = objc_alloc((Class)NFTimer);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100068950;
        v27[3] = &unk_100302620;
        id v16 = *(void **)(a1 + 56);
        void v27[4] = *(void *)(a1 + 32);
        v28[1] = v16;
        objc_copyWeak(v28, buf);
        v26.receiver = *(id *)(a1 + 32);
        v26.super_class = (Class)_NFACReaderSession;
        int v17 = [super workQueue];
        id v18 = [v15 initWithCallback:v27 queue:v17];
        uint64_t v19 = *(void *)(a1 + 32);
        __int16 v20 = *(void **)(v19 + 120);
        *(void *)(v19 + 120) = v18;

        objc_destroyWeak(v28);
        objc_destroyWeak(buf);
        int v14 = *(void **)(*(void *)(a1 + 32) + 120);
      }
      [v14 startTimer:v12];
    }
    id v10 = 0;
  }
  if ([*(id *)(a1 + 40) type] == 8)
  {
    __int16 v21 = [*(id *)(a1 + 32) driverWrapper];
    uint64_t v22 = [v21 setISO15693DataRate:*(unsigned int *)(*(void *)(a1 + 32) + 104) forTag:*(void *)(a1 + 40)];

    id v10 = (id)v22;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  int v23 = sub_1002090CC();
  uint64_t v24 = sub_100209560((uint64_t)v23, (int)[*(id *)(*(void *)(a1 + 32) + 80) type], 1, 0, (uint64_t)[v10 code]);

  id v25 = +[NSDistributedNotificationCenter defaultCenter];
  [v25 postNotificationName:@"com.apple.nfcacd.tag.session.event" object:0 userInfo:v24 options:3];
}

void sub_100068924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_100068950(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v7 = 45;
    if (isMetaClass) {
      uint64_t v7 = 43;
    }
    v3(3, "%c[%{public}s %{public}s]:%i Max session limit reached", v7, ClassName, Name, 303);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v9)) {
      int v10 = 43;
    }
    else {
      int v10 = 45;
    }
    double v11 = object_getClassName(*(id *)(a1 + 32));
    double v12 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    int v16 = v10;
    __int16 v17 = 2082;
    id v18 = v11;
    __int16 v19 = 2082;
    __int16 v20 = v12;
    __int16 v21 = 1024;
    int v22 = 303;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Max session limit reached", buf, 0x22u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained handleReaderBurnoutTimer];
}

void sub_100068D00(uint64_t a1)
{
  v24.__darwin_time_t tv_sec = 0;
  *(void *)&v24.__darwin_suseconds_t tv_usec = 0;
  uint64_t v23 = 0;
  [*(id *)(*(void *)(a1 + 32) + 120) stopTimer];
  gettimeofday(&v24, &v23);
  __darwin_time_t tv_sec = v24.tv_sec;
  __darwin_suseconds_t tv_usec = v24.tv_usec;
  unsigned int v4 = *(void **)(*(void *)(a1 + 32) + 80);
  if (v4)
  {
    int v5 = [v4 type];
    id v6 = NFSharedSignpostLog();
    if (os_signpost_enabled(v6))
    {
      *(_WORD *)int v22 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "disconnectTag", (const char *)&unk_100286819, v22, 2u);
    }

    uint64_t v7 = [*(id *)(a1 + 32) driverWrapper];
    unsigned int v8 = [v7 disconnectTag:*(void *)(*(void *)(a1 + 32) + 80) tagRemovalDetect:0];

    uint64_t v9 = NFSharedSignpostLog();
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)int v22 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "disconnectTag", (const char *)&unk_100286819, v22, 2u);
    }

    if (v8)
    {
      id v10 = objc_alloc((Class)NSError);
      double v11 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
      double v12 = +[NSString stringWithUTF8String:"Unknown Error"];
      objc_super v26 = v12;
      int v13 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      id v14 = [v10 initWithDomain:v11 code:6 userInfo:v13];
    }
    else
    {
      id v14 = 0;
      uint64_t v18 = *(void *)(a1 + 32);
      double v11 = *(void **)(v18 + 80);
      *(void *)(v18 + 80) = 0;
    }
  }
  else
  {
    id v15 = objc_alloc((Class)NSError);
    double v11 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    int v16 = +[NSString stringWithUTF8String:"Invalid State"];
    int v28 = v16;
    __int16 v17 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    id v14 = [v15 initWithDomain:v11 code:12 userInfo:v17];

    int v5 = 0;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  __int16 v19 = sub_1002090CC();
  __int16 v20 = sub_100209560((uint64_t)v19, v5, 2, 1000 * tv_sec + tv_usec / 1000 - *(void *)(*(void *)(a1 + 32) + 96), (uint64_t)[v14 code]);

  __int16 v21 = +[NSDistributedNotificationCenter defaultCenter];
  [v21 postNotificationName:@"com.apple.nfcacd.tag.session.event" object:0 userInfo:v20 options:3];
}

void sub_1000692C4(uint64_t a1)
{
  uint64_t v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_READER_SESSION_CHECK_PRESENCE", (const char *)&unk_100286819, buf, 2u);
  }

  id v3 = *(void **)(a1 + 32);
  if (!v3[10])
  {
    uint64_t v28 = *(void *)(a1 + 40);
    id v29 = objc_alloc((Class)NSError);
    int v22 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v45 = NSLocalizedDescriptionKey;
    uint64_t v30 = +[NSString stringWithUTF8String:"Invalid State"];
    int v46 = v30;
    timeval v31 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
    id v32 = [v29 initWithDomain:v22 code:12 userInfo:v31];
    (*(void (**)(uint64_t, void, id))(v28 + 16))(v28, 0, v32);

LABEL_25:
    return;
  }
  unsigned int v4 = [v3 driverWrapper];
  unsigned int v5 = [v4 checkTagPresence:*(void *)(*(void *)(a1 + 32) + 80)];

  if (v5)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      if (v5 == 28) {
        double v12 = "NFResultTagNotFound";
      }
      else {
        double v12 = "NFResultRFDeactivated";
      }
      uint64_t v13 = 45;
      if (isMetaClass) {
        uint64_t v13 = 43;
      }
      v7(3, "%c[%{public}s %{public}s]:%i checkTagPresence return error: %s", v13, ClassName, Name, 381, v12);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      __int16 v17 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v18 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67110146;
      if (v5 == 28) {
        __int16 v19 = "NFResultTagNotFound";
      }
      else {
        __int16 v19 = "NFResultRFDeactivated";
      }
      int v36 = v16;
      __int16 v37 = 2082;
      BOOL v38 = v17;
      __int16 v39 = 2082;
      id v40 = v18;
      __int16 v41 = 1024;
      int v42 = 381;
      __int16 v43 = 2080;
      int v44 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i checkTagPresence return error: %s", buf, 0x2Cu);
    }

    uint64_t v20 = *(void *)(a1 + 40);
    id v21 = objc_alloc((Class)NSError);
    int v22 = +[NSString stringWithUTF8String:"nfcd"];
    uint64_t v23 = v5;
    NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
    if (v5 >= 0x47) {
      int v24 = 71;
    }
    else {
      int v24 = v5;
    }
    NSErrorUserInfoKey v25 = +[NSString stringWithUTF8String:off_1003023D8[v24]];
    __int16 v34 = v25;
    objc_super v26 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    id v27 = [v21 initWithDomain:v22 code:v23 userInfo:v26];
    (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0, v27);

    goto LABEL_25;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000698CC(uint64_t a1)
{
  uint64_t v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_READER_SESSION_CHECK_NDEF", (const char *)&unk_100286819, buf, 2u);
  }

  *(void *)buf = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  id v3 = [*(id *)(a1 + 32) driverWrapper];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 80);
  id v6 = 0;
  [v3 queryTagNDEFCapability:v4 hasNdefAbility:buf error:&v6];
  id v5 = v6;

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100069BD8(uint64_t a1)
{
  uint64_t v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFCACD_READER_SESSION_READ_NDEF", (const char *)&unk_100286819, buf, 2u);
  }

  *(void *)buf = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v3 = NFSharedSignpostLog();
  if (os_signpost_enabled(v3))
  {
    *(_WORD *)id v15 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "readNdef", (const char *)&unk_100286819, v15, 2u);
  }

  uint64_t v4 = [*(id *)(a1 + 32) driverWrapper];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 80);
  id v14 = 0;
  unsigned int v6 = [v4 queryTagNDEFCapability:v5 hasNdefAbility:buf error:&v14];
  id v7 = v14;

  if (v6)
  {
    if ((_BYTE)v18)
    {
      uint64_t v8 = [*(id *)(a1 + 32) driverWrapper];
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 80);
      id v13 = v7;
      id v10 = [v8 readNdefDataFromTag:v9 messageSize:*(unsigned int *)buf error:&v13];
      id v11 = v13;

      id v7 = v11;
    }
    else
    {
      id v10 = 0;
    }
    [*(id *)(*(void *)(a1 + 32) + 80) _setNDEFMessageSize:*(void *)buf];
    [*(id *)(*(void *)(a1 + 32) + 80) _setNDEFContainerSize:v17];
  }
  else
  {
    id v10 = 0;
  }
  double v12 = NFSharedSignpostLog();
  if (os_signpost_enabled(v12))
  {
    *(_WORD *)id v15 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "readNdef", (const char *)&unk_100286819, v15, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006A040(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  if (*(void *)(*(void *)(a1 + 40) + 80))
  {
    id v3 = NFSharedSignpostLog();
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "transceive", (const char *)&unk_100286819, buf, 2u);
    }

    uint64_t v4 = [*(id *)(a1 + 40) driverWrapper];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 80);
    id v24 = 0;
    unsigned int v6 = [v4 transceive:v2 tag:v5 maxTimeout:&v24 error:20.0];
    id v7 = v24;

    uint64_t v8 = NFSharedSignpostLog();
    if (os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "transceive", (const char *)&unk_100286819, buf, 2u);
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 40));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 40));
      Name = sel_getName(*(SEL *)(a1 + 56));
      uint64_t v14 = 45;
      if (isMetaClass) {
        uint64_t v14 = 43;
      }
      v10(3, "%c[%{public}s %{public}s]:%i No tag is connected", v14, ClassName, Name, 436);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = object_getClass(*(id *)(a1 + 40));
      if (class_isMetaClass(v16)) {
        int v17 = 43;
      }
      else {
        int v17 = 45;
      }
      uint64_t v18 = object_getClassName(*(id *)(a1 + 40));
      __int16 v19 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      int v28 = v17;
      __int16 v29 = 2082;
      uint64_t v30 = v18;
      __int16 v31 = 2082;
      id v32 = v19;
      __int16 v33 = 1024;
      int v34 = 436;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No tag is connected", buf, 0x22u);
    }

    id v20 = objc_alloc((Class)NSError);
    uint64_t v8 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
    id v21 = +[NSString stringWithUTF8String:"Tag Not Found"];
    objc_super v26 = v21;
    int v22 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    id v7 = [v20 initWithDomain:v8 code:28 userInfo:v22];

    unsigned int v6 = 0;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10006B648(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 80);
  if (v2)
  {
    unsigned int v3 = [v2 silentType];
    uint64_t v4 = *(void *)(a1 + 32);
    if (v3 == 1
      || (v5 = [*(id *)(v4 + 80) silentType], uint64_t v4 = *(void *)(a1 + 32), v5 == 2)
      || (v6 = [*(id *)(v4 + 80) silentType], uint64_t v4 = *(void *)(a1 + 32), v6 == 3)
      || (int v7 = *(_DWORD *)(v4 + 92), v7 == 32)
      || v7 == 128
      || v7 == 64)
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      [(id)v4 _transceiveTypeAAccessoryCommand:v8 callback:v9];
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 40);
      uint64_t v27 = *(void *)(a1 + 48);
      [(id)v4 _transceiveNTAG5VAccessoryCommand:v26 callback:v27];
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v11 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 56));
      uint64_t v15 = 45;
      if (isMetaClass) {
        uint64_t v15 = 43;
      }
      v11(3, "%c[%{public}s %{public}s]:%i No tag is connected", v15, ClassName, Name, 566);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v17 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v17)) {
        int v18 = 43;
      }
      else {
        int v18 = 45;
      }
      __int16 v19 = object_getClassName(*(id *)(a1 + 32));
      id v20 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      int v32 = v18;
      __int16 v33 = 2082;
      int v34 = v19;
      __int16 v35 = 2082;
      int v36 = v20;
      __int16 v37 = 1024;
      int v38 = 566;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No tag is connected", buf, 0x22u);
    }

    id v21 = objc_alloc((Class)NSError);
    int v22 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
    uint64_t v23 = +[NSString stringWithUTF8String:"Tag Not Found"];
    uint64_t v30 = v23;
    id v24 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
    id v25 = [v21 initWithDomain:v22 code:28 userInfo:v24];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10006C440(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 80))
  {
    id v2 = NFSharedSignpostLog();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "readTypeIdentifier", (const char *)&unk_100286819, buf, 2u);
    }

    unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 80) technology];
    uint64_t v4 = *(id **)(a1 + 32);
    if (v3 == 1)
    {
      uint64_t v27 = 0;
      unsigned int v5 = (id *)&v27;
      uint64_t v6 = [v4 _readTypeATagId:&v27];
    }
    else
    {
      if ([v4[10] technology] != 16)
      {
        uint64_t v23 = 0;
        id v22 = 0;
LABEL_20:
        __int16 v19 = NFSharedSignpostLog();
        if (os_signpost_enabled(v19))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "readTypeIdentifier", (const char *)&unk_100286819, buf, 2u);
        }
        goto LABEL_22;
      }
      id v24 = *(void **)(a1 + 32);
      uint64_t v26 = 0;
      unsigned int v5 = (id *)&v26;
      uint64_t v6 = [v24 _readTypeVTagId:&v26];
    }
    uint64_t v23 = (void *)v6;
    id v22 = *v5;
    goto LABEL_20;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v12 = 45;
    if (isMetaClass) {
      uint64_t v12 = 43;
    }
    v8(3, "%c[%{public}s %{public}s]:%i No tag is connected", v12, ClassName, Name, 681);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v13 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v14)) {
      int v15 = 43;
    }
    else {
      int v15 = 45;
    }
    int v16 = object_getClassName(*(id *)(a1 + 32));
    int v17 = sel_getName(*(SEL *)(a1 + 48));
    *(_DWORD *)buf = 67109890;
    int v31 = v15;
    __int16 v32 = 2082;
    __int16 v33 = v16;
    __int16 v34 = 2082;
    __int16 v35 = v17;
    __int16 v36 = 1024;
    int v37 = 681;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i No tag is connected", buf, 0x22u);
  }

  id v18 = objc_alloc((Class)NSError);
  __int16 v19 = +[NSString stringWithUTF8String:"nfcd"];
  NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
  id v20 = +[NSString stringWithUTF8String:"Tag Not Found"];
  NSErrorUserInfoKey v29 = v20;
  id v21 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
  id v22 = [v18 initWithDomain:v19 code:28 userInfo:v21];

  uint64_t v23 = 0;
LABEL_22:

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006C9D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 88) || *(void *)(v2 + 80))
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v4(3, "%c[%{public}s %{public}s]:%i Cannot change rate when polling or connected", v8, ClassName, Name, 708);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
      id v13 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)buf = 67109890;
      int v25 = v11;
      __int16 v26 = 2082;
      uint64_t v27 = v12;
      __int16 v28 = 2082;
      NSErrorUserInfoKey v29 = v13;
      __int16 v30 = 1024;
      int v31 = 708;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Cannot change rate when polling or connected", buf, 0x22u);
    }

    id v14 = objc_alloc((Class)NSError);
    int v15 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    int v16 = +[NSString stringWithUTF8String:"Invalid State"];
    uint64_t v23 = v16;
    int v17 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    id v18 = [v14 initWithDomain:v15 code:12 userInfo:v17];
  }
  else
  {
    __int16 v19 = NFSharedSignpostLog();
    if (os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setTypeATagDataRate", (const char *)&unk_100286819, buf, 2u);
    }

    id v20 = [*(id *)(a1 + 32) driverWrapper];
    id v18 = [v20 setTypeATagDataRate:*(unsigned int *)(a1 + 56)];

    *(void *)(*(void *)(a1 + 32) + 104) = *(void *)(a1 + 56);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006CD5C(uint64_t a1)
{
  [*(id *)(a1 + 32) disconnectTag:&stru_100302688];
  uint64_t v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "handleReaderBurnoutTimer", (const char *)&unk_100286819, v9, 2u);
  }

  [*(id *)(a1 + 32) internalEndSession:&stru_1003026A8];
  unsigned int v3 = [*(id *)(a1 + 32) remoteObject];
  id v4 = objc_alloc((Class)NSError);
  unsigned int v5 = +[NSString stringWithUTF8String:"nfcd"];
  NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
  uint64_t v6 = +[NSString stringWithUTF8String:"Timeout"];
  int v11 = v6;
  int v7 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  id v8 = [v4 initWithDomain:v5 code:5 userInfo:v7];
  [v3 didTerminate:v8];
}

void sub_10006D5C0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    NSErrorUserInfoKey v22 = [*(id *)(a1 + 32) secureElementWrapper];
    id v23 = 0;
    id v18 = sub_100243D60(v22, &v23);
    id v19 = v23;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_15;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    unsigned int v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    id v8 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 63, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  NSErrorUserInfoKey v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    id v13 = object_getClassName(*(id *)(a1 + 32));
    id v14 = sel_getName(*(SEL *)(a1 + 48));
    int v15 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    int v27 = v12;
    __int16 v28 = 2082;
    NSErrorUserInfoKey v29 = v13;
    __int16 v30 = 2082;
    int v31 = v14;
    __int16 v32 = 1024;
    int v33 = 63;
    __int16 v34 = 2114;
    __int16 v35 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16)
  {
    id v17 = objc_alloc((Class)NSError);
    id v18 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
    id v19 = +[NSString stringWithUTF8String:"Session not active"];
    id v25 = v19;
    id v20 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
    (*(void (**)(uint64_t, void, id))(v16 + 16))(v16, 0, v21);

LABEL_15:
  }
}

void sub_10006D9D4(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    unsigned int v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    id v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 76, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  NSErrorUserInfoKey v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    id v13 = object_getClassName(*(id *)(a1 + 32));
    id v14 = sel_getName(*(SEL *)(a1 + 64));
    int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v46 = v12;
    __int16 v47 = 2082;
    id v48 = v13;
    __int16 v49 = 2082;
    __int16 v50 = v14;
    __int16 v51 = 1024;
    int v52 = 76;
    __int16 v53 = 2114;
    __int16 v54 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    __int16 v36 = [*(id *)(a1 + 32) secureElementWrapper];
    int v37 = *(void **)(a1 + 40);
    id v38 = [*(id *)(a1 + 32) uid];
    __int16 v39 = *(void **)(a1 + 48);
    id v42 = 0;
    __int16 v32 = sub_1001F40E0(v36, v37, (uint64_t)v38, v39, (uint64_t *)&v42);
    id v40 = v42;

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    __int16 v41 = [*(id *)(a1 + 48) appletIdentifier];

    sub_1002400F0((uint64_t)NFHciTransactionEventCALogger, v32, v41);
    sub_100222D30((uint64_t)NFDailyStatisticsCALogger, @"totalAuthECommerce");
    +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:&off_100322B50];
    goto LABEL_24;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v16 = NFLogGetLogger();
  if (v16)
  {
    id v17 = (void (*)(uint64_t, const char *, ...))v16;
    id v18 = object_getClass(*(id *)(a1 + 32));
    BOOL v19 = class_isMetaClass(v18);
    id v20 = object_getClassName(*(id *)(a1 + 32));
    id v21 = sel_getName(*(SEL *)(a1 + 64));
    NSErrorUserInfoKey v22 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v23 = 45;
    if (v19) {
      uint64_t v23 = 43;
    }
    v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 78, v22);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  NSErrorUserInfoKey v24 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    id v25 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v25)) {
      int v26 = 43;
    }
    else {
      int v26 = 45;
    }
    int v27 = object_getClassName(*(id *)(a1 + 32));
    __int16 v28 = sel_getName(*(SEL *)(a1 + 64));
    NSErrorUserInfoKey v29 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    int v46 = v26;
    __int16 v47 = 2082;
    id v48 = v27;
    __int16 v49 = 2082;
    __int16 v50 = v28;
    __int16 v51 = 1024;
    int v52 = 78;
    __int16 v53 = 2114;
    __int16 v54 = v29;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v30 = *(void *)(a1 + 56);
  if (v30)
  {
    id v31 = objc_alloc((Class)NSError);
    __int16 v32 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v43 = NSLocalizedDescriptionKey;
    int v33 = +[NSString stringWithUTF8String:"Session not active"];
    int v44 = v33;
    __int16 v34 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
    id v35 = [v31 initWithDomain:v32 code:54 userInfo:v34];
    (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v35);

LABEL_24:
  }
}

void sub_10006DF94(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    unsigned int v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    id v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 104, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  NSErrorUserInfoKey v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    id v13 = object_getClassName(*(id *)(a1 + 32));
    id v14 = sel_getName(*(SEL *)(a1 + 56));
    int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v43 = v12;
    __int16 v44 = 2082;
    NSErrorUserInfoKey v45 = v13;
    __int16 v46 = 2082;
    __int16 v47 = v14;
    __int16 v48 = 1024;
    int v49 = 104;
    __int16 v50 = 2114;
    __int16 v51 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    id v38 = *(void **)(a1 + 40);
    id v39 = 0;
    int v33 = sub_1001D812C((uint64_t)NFECommercePaymentRequestEncoder, v38, 0, &v39);
    id v32 = v39;
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_24;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v16 = NFLogGetLogger();
  if (v16)
  {
    id v17 = (void (*)(uint64_t, const char *, ...))v16;
    id v18 = object_getClass(*(id *)(a1 + 32));
    BOOL v19 = class_isMetaClass(v18);
    id v20 = object_getClassName(*(id *)(a1 + 32));
    id v21 = sel_getName(*(SEL *)(a1 + 56));
    NSErrorUserInfoKey v22 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v23 = 45;
    if (v19) {
      uint64_t v23 = 43;
    }
    v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 106, v22);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  NSErrorUserInfoKey v24 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    id v25 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v25)) {
      int v26 = 43;
    }
    else {
      int v26 = 45;
    }
    int v27 = object_getClassName(*(id *)(a1 + 32));
    __int16 v28 = sel_getName(*(SEL *)(a1 + 56));
    NSErrorUserInfoKey v29 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    int v43 = v26;
    __int16 v44 = 2082;
    NSErrorUserInfoKey v45 = v27;
    __int16 v46 = 2082;
    __int16 v47 = v28;
    __int16 v48 = 1024;
    int v49 = 106;
    __int16 v50 = 2114;
    __int16 v51 = v29;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v30 = *(void *)(a1 + 48);
  if (v30)
  {
    id v31 = objc_alloc((Class)NSError);
    id v32 = +[NSString stringWithUTF8String:"nfcd"];
    v40[0] = NSLocalizedDescriptionKey;
    int v33 = +[NSString stringWithUTF8String:"Session not active"];
    v41[0] = v33;
    v41[1] = &off_10031A5D8;
    v40[1] = @"Line";
    v40[2] = @"Method";
    id v34 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
    v41[2] = v34;
    v40[3] = NSDebugDescriptionErrorKey;
    id v35 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 106];
    v41[3] = v35;
    __int16 v36 = +[NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:4];
    id v37 = [v31 initWithDomain:v32 code:54 userInfo:v36];
    (*(void (**)(uint64_t, id))(v30 + 16))(v30, v37);

LABEL_24:
  }
}

void sub_10006E5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  self;
  v12[0] = @"status";
  int v7 = +[NSNumber numberWithUnsignedInt:a3];
  v13[0] = v7;
  v12[1] = @"stackLoadTime";
  id v8 = +[NSNumber numberWithUnsignedInt:a2];
  v13[1] = v8;
  v12[2] = @"nfcControllerType";
  uint64_t v9 = +[NSNumber numberWithUnsignedInt:a4];
  _DWORD v13[2] = v9;
  NSErrorUserInfoKey v10 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:3];

  int v11 = +[NFCALogger sharedCALogger];
  [v11 postCAEventFor:@"com.apple.nfcd.stackLoadEvent" eventInput:v10];
}

void sub_10006E6D4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_1001E1E24();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setInterface:v3 forSelector:"queueSecureElementManagerSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];
}

void sub_10006E754(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10006F460();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setInterface:v3 forSelector:"queueSeshatSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];
}

void sub_10006E7D4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10005A7D8();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setInterface:v3 forSelector:"queueReaderSessionInternal:sessionAttribute:completion:" argumentIndex:0 ofReply:1];
}

void sub_10006E854(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_1000E4524();
  [v2 setInterface:v3 forSelector:"queueContactlessPaymentSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  id v4 = sub_1000E4524();
  [v2 setInterface:v4 forSelector:"queueLoyaltyAndPaymentSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  sub_1000E4524();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setInterface:v5 forSelector:"queueUnifiedAccessSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];
}

void sub_10006E93C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NFSecureTransactionServicesHandoverSessionInterface interface];
  [v2 setInterface:v3 forSelector:"queueSecureTransactionServicesSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  id v4 = +[NFSecureTransactionServicesHandoverHybridSessionInterface interface];
  [v2 setInterface:v4 forSelector:"queueSecureTransactionServicesHybridSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];
}

void sub_10006E9F0(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFHardwareManagerInterface];
  id v2 = (void *)qword_100347318;
  qword_100347318 = v1;

  id v3 = objc_alloc((Class)NSSet);
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  id v87 = [v3 initWithObjects:v4, v5, v6, v7, v8, v9, v10, v11, objc_opt_class(), 0];
  [(id)qword_100347318 setClasses:v87 forSelector:"checkExpressPassCompatibilityDeprecated:callback:" argumentIndex:0 ofReply:0];
  [(id)qword_100347318 setClasses:v87 forSelector:"checkExpressPassCompatibility:callback:" argumentIndex:0 ofReply:0];
  int v12 = (void *)qword_100347318;
  id v13 = objc_alloc((Class)NSSet);
  uint64_t v14 = objc_opt_class();
  id v15 = [v13 initWithObjects:v14, objc_opt_class(), 0];
  [v12 setClasses:v15 forSelector:"secureElementsWithCompletion:" argumentIndex:0 ofReply:1];

  long long v86 = sub_10000A1BC();
  [(id)qword_100347318 setInterface:v86 forSelector:"registerForCallbacks:" argumentIndex:0 ofReply:0];
  [(id)qword_100347318 setInterface:v86 forSelector:"unregisterForCallbacks:" argumentIndex:0 ofReply:0];
  uint64_t v16 = (void *)qword_100347318;
  id v17 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFSecureElementManagerSessionCallbacks];
  [v16 setInterface:v17 forSelector:"queueSecureElementManagerSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  uint64_t v18 = sub_1000E4A14();
  [(id)qword_100347318 setInterface:v18 forSelector:"queueContactlessPaymentSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];
  id v84 = (void *)v18;
  [(id)qword_100347318 setInterface:v18 forSelector:"queueLoyaltyAndPaymentSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];
  id v85 = +[NFContactlessSessionCallbacks interface];
  [qword_100347318 setInterface:v85 forSelector:v86 argumentIndex:v87 ofReply:v88];
  BOOL v19 = (void *)qword_100347318;
  id v20 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFECommercePaymentSessionCallbacks];
  [v19 setInterface:v20 forSelector:x0 argumentIndex:x1 ofReply:x2];

  id v21 = (void *)qword_100347318;
  NSErrorUserInfoKey v22 = +[NFFieldDetectSessionInterfaceCallbacks interface];
  [v21 setInterface:v22 forSelector:x0 argumentIndex:x1 ofReply:x2];

  uint64_t v23 = (void *)qword_100347318;
  NSErrorUserInfoKey v24 = +[NFReaderSessionInternalCallbacks interface];
  [v23 setInterface:v24 forSelector:"queueReaderSessionInternal:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  id v25 = (void *)qword_100347318;
  int v26 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFSeshatSessionCallbacks];
  [v25 setInterface:v26 forSelector:"queueSeshatSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  int v27 = (void *)qword_100347318;
  __int16 v28 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFPeerPaymentSessionCallbacks];
  [v27 setInterface:v28 forSelector:v29 argumentIndex:v30 ofReply:v31];

  NSErrorUserInfoKey v29 = (void *)qword_100347318;
  uint64_t v30 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFTrustSessionCallbacks];
  [v29 setInterface:v30 forSelector:x0 argumentIndex:x1 ofReply:x2];

  id v31 = (void *)qword_100347318;
  id v32 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFNdefTagSessionCallbacks];
  [v31 setInterface:v32 forSelector:"queueNdefTagSession:sessionAttribute:data:completion:" argumentIndex:0 ofReply:0];

  int v33 = (void *)qword_100347318;
  id v34 = +[NFHostEmulationSessionCallbacks interface];
  [v33 setInterface:v34 forSelector:argumentIndex:ofReply:];

  id v35 = (void *)qword_100347318;
  __int16 v36 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFSecureElementAndHostCardEmulationSessionCallbacks];
  [v35 setInterface:v36 forSelector:"queueSecureElementAndHostEmulationSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  id v37 = (void *)qword_100347318;
  id v38 = +[NFSecureElementReaderSessionCallbacks interface];
  [v37 setInterface:v38 forSelector:"queueSecureElementReaderSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  id v39 = (void *)qword_100347318;
  id v40 = +[NFSecureTransactionServicesHandoverSessionCallbacksInterface interface];
  [v39 setInterface:v40 forSelector:"queueSecureTransactionServicesSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  __int16 v41 = (void *)qword_100347318;
  id v42 = +[NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface interface];
  [v41 setInterface:v42 forSelector:"queueSecureTransactionServicesHybridSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  [(id)qword_100347318 setInterface:v18 forSelector:"queueUnifiedAccessSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];
  int v43 = (void *)qword_100347318;
  __int16 v44 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFSecureElementLoggingSessionCallbacks];
  [v43 setInterface:v44 forSelector:"queueSecureElementLoggingSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  NSErrorUserInfoKey v45 = (void *)qword_100347318;
  __int16 v46 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFLPEMConfigSessionCallbacks];
  [v45 setInterface:v46 forSelector:"queueLPEMConfigSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  __int16 v47 = (void *)qword_100347318;
  __int16 v48 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFCredentialSessionCallbackInterface];
  [v47 setInterface:v48 forSelector:"queueCredentialSession:sessionAttribute:completion:" argumentIndex:0 ofReply:0];

  int v49 = (void *)qword_100347318;
  __int16 v50 = +[NFECommercePaymentSessionInterface interface];
  [v49 setInterface:v50 forSelector:"queueECommercePaymentSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  __int16 v51 = (void *)qword_100347318;
  int v52 = +[NFContactlessSessionInterface interface];
  [v51 setInterface:v52 forSelector:"queueContactlessSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  __int16 v53 = (void *)qword_100347318;
  __int16 v54 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFFieldDetectSessionInterface];
  [v53 setInterface:v54 forSelector:"queueFieldDetectSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  NSErrorUserInfoKey v55 = (void *)qword_100347318;
  __int16 v56 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFPeerPaymentSessionInterface];
  [v55 setInterface:v56 forSelector:"queuePeerPaymentSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  int v57 = (void *)qword_100347318;
  __int16 v58 = +[NFTrustSessionInterface interface];
  [v57 setInterface:v58 forSelector:"queueTrustSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  int v59 = (void *)qword_100347318;
  __int16 v60 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFNdefTagSessionInterface];
  [v59 setInterface:v60 forSelector:"queueNdefTagSession:sessionAttribute:data:completion:" argumentIndex:0 ofReply:1];

  __int16 v61 = (void *)qword_100347318;
  NSErrorUserInfoKey v62 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFHostEmulationSessionInterface];
  [v61 setInterface:v62 forSelector:"queueHostEmulationSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  __int16 v63 = (void *)qword_100347318;
  __int16 v64 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFSecureElementAndHostCardEmulationSessionInterface];
  [v63 setInterface:v64 forSelector:"queueSecureElementAndHostEmulationSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  int v65 = (void *)qword_100347318;
  __int16 v66 = +[NFSecureElementReaderSessionInterface interface];
  [v65 setInterface:v66 forSelector:"queueSecureElementReaderSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  __int16 v67 = (void *)qword_100347318;
  __int16 v68 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFSecureElementLoggingSessionInterface];
  [v67 setInterface:v68 forSelector:"queueSecureElementLoggingSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  int v69 = (void *)qword_100347318;
  __int16 v70 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFLPEMConfigSessionInterface];
  [v69 setInterface:v70 forSelector:"queueLPEMConfigSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  int v71 = (void *)qword_100347318;
  __int16 v72 = +[NFCredentialSessionInterface interface];
  [v71 setInterface:v72 forSelector:"queueCredentialSession:sessionAttribute:completion:" argumentIndex:0 ofReply:1];

  __int16 v73 = (void *)qword_100347318;
  id v74 = objc_alloc((Class)NSSet);
  uint64_t v75 = objc_opt_class();
  uint64_t v76 = objc_opt_class();
  uint64_t v77 = objc_opt_class();
  uint64_t v78 = objc_opt_class();
  uint64_t v79 = objc_opt_class();
  uint64_t v80 = objc_opt_class();
  uint64_t v81 = objc_opt_class();
  uint64_t v82 = objc_opt_class();
  id v83 = [v74 initWithObjects:v75, v76, v77, v78, v79, v80, v81, v82, objc_opt_class(), 0];
  [v73 setClasses:v83 forSelector:"stateInfoWithCompletion:" argumentIndex:0 ofReply:1];
}

void sub_10006F418(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFHardwareManagerCallbacks];
  uint64_t v2 = qword_100347328;
  qword_100347328 = v1;

  _objc_release_x1(v1, v2);
}

id sub_10006F460()
{
  self;
  unsigned __int8 v0 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFSeshatSessionInterface];
  id v1 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:v1 forSelector:"allocateSlot:authorizingUser:authorizingUserToken:completion:" argumentIndex:0 ofReply:0];

  id v2 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:v2 forSelector:"derive:userHash:completion:" argumentIndex:0 ofReply:0];

  id v3 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:v3 forSelector:"resetCounter:userToken:completion:" argumentIndex:0 ofReply:0];

  id v4 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:v4 forSelector:"authorizeUpdate:slotIndex:userToken:completion:" argumentIndex:0 ofReply:0];

  id v5 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:v5 forSelector:"allocateSlot:authorizingUser:authorizingUserToken:completion:" argumentIndex:0 ofReply:1];

  id v6 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:v6 forSelector:"derive:userHash:completion:" argumentIndex:0 ofReply:1];

  id v7 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v0 setClasses:v7 forSelector:"getDataWithCompletion:" argumentIndex:0 ofReply:1];

  return v0;
}

void sub_10006F6C8(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_100347338;
  qword_100347338 = v1;

  [(id)qword_100347338 setObject:&off_100322B78 forKeyedSubscript:&off_10031A680];
  [(id)qword_100347338 setObject:&off_100322BA0 forKeyedSubscript:&off_10031A6C8];
  [(id)qword_100347338 setObject:&off_100322BC8 forKeyedSubscript:&off_10031A710];
  id v3 = (void *)qword_100347338;

  [v3 setObject:&off_100322BF0 forKeyedSubscript:&off_10031A740];
}

id sub_10006F76C(void *a1, __int16 a2, __int16 a3)
{
  char v35 = 4;
  __int16 v34 = -505;
  __int16 v36 = a2;
  __int16 v37 = a3;
  id v4 = objc_opt_new();
  id v5 = [objc_alloc((Class)NSMutableData) initWithBytes:&v34 length:7];
  id v6 = sub_10006FA80(a1, (uint64_t)v5);
  id v7 = [v6 response];
  uint64_t v8 = (char *)[v7 length];
  if ([v6 status] != 36864 || (unint64_t)v8 < 6) {
    goto LABEL_26;
  }
  id v10 = v7;
  uint64_t v11 = [v10 bytes];
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  BOOL v14 = !v11[3] && v13 == 0;
  if (!v14 || (unint64_t)(v8 - 9) > 0xFFFFFFFFFFFFFFFBLL)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v17 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("felicaGetEventDataCommand:block:");
      uint64_t v31 = [v6 status];
      uint64_t v20 = 45;
      if (isMetaClass) {
        uint64_t v20 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Response Status = 0x%04x, StatusOne = 0x%02x, StatusTwo = 0x%02x", v20, ClassName, Name, 252, v31, v12, v13);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      NSErrorUserInfoKey v22 = object_getClass(a1);
      if (class_isMetaClass(v22)) {
        int v23 = 43;
      }
      else {
        int v23 = 45;
      }
      NSErrorUserInfoKey v24 = object_getClassName(a1);
      id v25 = sel_getName("felicaGetEventDataCommand:block:");
      unsigned int v26 = [v6 status];
      *(_DWORD *)buf = 67110658;
      int v39 = v23;
      __int16 v40 = 2082;
      __int16 v41 = v24;
      __int16 v42 = 2082;
      int v43 = v25;
      __int16 v44 = 1024;
      int v45 = 252;
      __int16 v46 = 1024;
      unsigned int v47 = v26;
      __int16 v48 = 1024;
      int v49 = v12;
      __int16 v50 = 1024;
      int v51 = v13;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Response Status = 0x%04x, StatusOne = 0x%02x, StatusTwo = 0x%02x", buf, 0x34u);
    }
  }
  else
  {
    int v27 = v11 + 9;
    id v28 = v10;
    [v4 appendBytes:v27 length:(char *)[v28 length] - (v27 - [v28 bytes])];
  }
  if (v12 | v13) {
    id v29 = 0;
  }
  else {
LABEL_26:
  }
    id v29 = v4;

  return v29;
}

id sub_10006FA80(void *a1, uint64_t a2)
{
  id v2 = [a1 sendCommandWithClass:128 instruction:194 p1:0 p2:0 data:a2 error:0];

  return v2;
}

NSObject *sub_10006FAC4(NSObject *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (([a1 selectApplet:v3 error:0] & 1) == 0)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v31 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getFelicaAppletState:");
        __int16 v36 = [v3 identifierAsData];
        uint64_t v37 = 45;
        if (isMetaClass) {
          uint64_t v37 = 43;
        }
        v31(3, "%c[%{public}s %{public}s]:%i Failed to select applet: %{public}@", v37, ClassName, Name, 267, v36);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v4 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v38 = object_getClass(a1);
        if (class_isMetaClass(v38)) {
          int v39 = 43;
        }
        else {
          int v39 = 45;
        }
        __int16 v40 = object_getClassName(a1);
        __int16 v41 = sel_getName("getFelicaAppletState:");
        __int16 v42 = [v3 identifierAsData];
        *(_DWORD *)buf = 67110146;
        int v161 = v39;
        __int16 v162 = 2082;
        uint64_t v163 = v40;
        __int16 v164 = 2082;
        long long v165 = v41;
        __int16 v166 = 1024;
        int v167 = 267;
        __int16 v168 = 2114;
        uint64_t v169 = v42;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select applet: %{public}@", buf, 0x2Cu);
      }
      a1 = 0;
      goto LABEL_49;
    }
    id v4 = sub_10006F76C(a1, 0, 0);
    if (!v4
      || (+[NFFelicaStateEvent decodeEvent:v4],
          (id v5 = objc_claimAutoreleasedReturnValue()) == 0)
      || (id v6 = v5,
          [v5 objectForKeyedSubscript:@"NFServiceProviderID"],
          id v7 = objc_claimAutoreleasedReturnValue(),
          v6,
          !v7))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v43 = NFLogGetLogger();
      if (v43)
      {
        __int16 v44 = (void (*)(uint64_t, const char *, ...))v43;
        int v45 = object_getClass(a1);
        BOOL v46 = class_isMetaClass(v45);
        unsigned int v47 = object_getClassName(a1);
        BOOL v140 = sel_getName("getFelicaAppletState:");
        uint64_t v48 = 45;
        if (v46) {
          uint64_t v48 = 43;
        }
        v44(3, "%c[%{public}s %{public}s]:%i Failed to query applet service provider", v48, v47, v140, 285);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v49 = object_getClass(a1);
        if (class_isMetaClass(v49)) {
          int v50 = 43;
        }
        else {
          int v50 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v161 = v50;
        __int16 v162 = 2082;
        uint64_t v163 = object_getClassName(a1);
        __int16 v164 = 2082;
        long long v165 = sel_getName("getFelicaAppletState:");
        __int16 v166 = 1024;
        int v167 = 285;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query applet service provider", buf, 0x22u);
      }
      a1 = 0;
      goto LABEL_48;
    }
    uint64_t v8 = v7;
    __int16 v152 = v4;
    if (qword_100347340 != -1) {
      dispatch_once(&qword_100347340, &stru_100302708);
    }
    uint64_t v9 = [(id)qword_100347338 objectForKeyedSubscript:v8];
    if (v9)
    {
      id v150 = v3;
      id v4 = objc_opt_new();
      long long v154 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      id v10 = [&off_100322748 countByEnumeratingWithState:&v154 objects:buf count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = v4;
        uint64_t v147 = v8;
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)v155;
        do
        {
          id v15 = 0;
          uint64_t v16 = v13;
          do
          {
            if (*(void *)v155 != v14) {
              objc_enumerationMutation(&off_100322748);
            }
            uint64_t v13 = [v9 objectForKeyedSubscript:*(void *)(*((void *)&v154 + 1) + 8 * (void)v15)];

            if (v13)
            {
              id v17 = [v13 objectAtIndexedSubscript:0];
              uint64_t v18 = [v13 objectAtIndexedSubscript:1];
              BOOL v19 = sub_10006F76C(a1, (__int16)[v17 unsignedShortValue], (__int16)[v18 unsignedShortValue]);
              if (v19) {
                [v12 appendData:v19];
              }
            }
            id v15 = (char *)v15 + 1;
            uint64_t v16 = v13;
          }
          while (v11 != v15);
          id v11 = [&off_100322748 countByEnumeratingWithState:&v154 objects:buf count:16];
        }
        while (v11);

        uint64_t v8 = v147;
        id v4 = v12;
      }
      uint64_t v20 = [v9 objectForKeyedSubscript:@"NFHistoryCount"];
      unsigned int v21 = [v20 unsignedShortValue];

      NSErrorUserInfoKey v22 = [v9 objectForKeyedSubscript:@"NFHistoryRecords"];
      int v23 = v22;
      if (v22)
      {
        NSErrorUserInfoKey v24 = v8;
        id v25 = [v22 objectAtIndexedSubscript:0];
        unsigned __int16 v26 = (unsigned __int16)[v25 unsignedShortValue];
        if (v21)
        {
          __int16 v27 = v26;
          for (unsigned __int16 i = 0; i < v21; ++i)
          {
            id v29 = sub_10006F76C(a1, v27, i);
            if (v29) {
              [v4 appendData:v29];
            }
          }
        }

        id v3 = v150;
        uint64_t v8 = v24;
      }
      else
      {
        id v3 = v150;
      }
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v52 = NFLogGetLogger();
      if (v52)
      {
        __int16 v53 = (void (*)(uint64_t, const char *, ...))v52;
        __int16 v54 = object_getClass(a1);
        BOOL v55 = class_isMetaClass(v54);
        int v139 = object_getClassName(a1);
        uint64_t v141 = sel_getName("_getAppletStateForProvider:");
        uint64_t v56 = 45;
        if (v55) {
          uint64_t v56 = 43;
        }
        v53(3, "%c[%{public}s %{public}s]:%i Unknown service provider %{public}@", v56, v139, v141, 60, v8);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        int v57 = object_getClass(a1);
        if (class_isMetaClass(v57)) {
          int v58 = 43;
        }
        else {
          int v58 = 45;
        }
        *(_DWORD *)buf = 67110146;
        int v161 = v58;
        __int16 v162 = 2082;
        uint64_t v163 = object_getClassName(a1);
        __int16 v164 = 2082;
        long long v165 = sel_getName("_getAppletStateForProvider:");
        __int16 v166 = 1024;
        int v167 = 60;
        __int16 v168 = 2114;
        uint64_t v169 = v8;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown service provider %{public}@", buf, 0x2Cu);
      }
      id v4 = 0;
    }

    if (!v4 || ![v4 length])
    {
      __int16 v67 = v4;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v68 = NFLogGetLogger();
      if (v68)
      {
        int v69 = (void (*)(uint64_t, const char *, ...))v68;
        __int16 v70 = object_getClass(a1);
        BOOL v71 = class_isMetaClass(v70);
        __int16 v72 = object_getClassName(a1);
        uint64_t v142 = sel_getName("getFelicaAppletState:");
        uint64_t v73 = 45;
        if (v71) {
          uint64_t v73 = 43;
        }
        v69(3, "%c[%{public}s %{public}s]:%i Failed to get applet state", v73, v72, v142, 295);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v74 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        uint64_t v75 = object_getClass(a1);
        if (class_isMetaClass(v75)) {
          int v76 = 43;
        }
        else {
          int v76 = 45;
        }
        uint64_t v77 = object_getClassName(a1);
        uint64_t v78 = sel_getName("getFelicaAppletState:");
        *(_DWORD *)buf = 67109890;
        int v161 = v76;
        __int16 v162 = 2082;
        uint64_t v163 = v77;
        __int16 v164 = 2082;
        long long v165 = v78;
        __int16 v166 = 1024;
        int v167 = 295;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get applet state", buf, 0x22u);
      }

      a1 = 0;
      id v4 = v67;
      goto LABEL_48;
    }
    int v59 = +[NFFelicaStateEvent decodeEvent:v4];
    if (([v8 isEqualToNumber:&off_10031A680] & 1) == 0)
    {
LABEL_136:
      a1 = v59;

      uint64_t v8 = a1;
LABEL_48:

LABEL_49:
      goto LABEL_50;
    }
    id v151 = v3;
    int v153 = v4;
    int v148 = v8;
    unsigned __int16 v60 = (unsigned __int16)[&off_10031A638 unsignedShortValue];
    unsigned __int8 v159 = 1;
    __int16 v61 = objc_opt_new();
    char v158 = 16;
    [v61 appendBytes:&v158 length:1];
    char v158 = 6;
    [v61 appendBytes:&v158 length:1];
    id v62 = [objc_alloc((Class)NSData) initWithBytes:&unk_100345B78 length:6];
    __int16 v63 = sub_10006FA80(a1, (uint64_t)v62);
    __int16 v64 = v63;
    if (v63)
    {
      int v65 = [v63 response];
      if ((unint64_t)[v65 length] >= 0xA)
      {
        id v79 = [v64 response];
        uint64_t v80 = (char *)[v79 bytes];

        id v66 = [objc_alloc((Class)NSData) initWithBytes:v80 + 2 length:8];
      }
      else
      {
        id v66 = 0;
      }
    }
    else
    {
      id v66 = 0;
    }

    id v149 = v66;
    [v61 appendData:v66];
    char v158 = 1;
    [v61 appendBytes:&v158 length:1];
    LOWORD(v154) = v60;
    [v61 appendBytes:&v154 length:2];
    [v61 appendBytes:&v159 length:1];
    if (v159)
    {
      for (unsigned int j = 0; j < v159; ++j)
      {
        char v158 = 0x80;
        [v61 appendBytes:&v158 length:1];
        char v158 = j;
        [v61 appendBytes:&v158 length:1];
      }
    }
    uint64_t v82 = sub_10006FA80(a1, (uint64_t)v61);
    id v83 = v82;
    if (v82)
    {
      id v84 = [v82 response];
      if ((unint64_t)[v84 length] <= 0xD)
      {
        id v85 = v59;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v86 = NFLogGetLogger();
        if (v86)
        {
          id v87 = (void (*)(uint64_t, const char *, ...))v86;
          int v88 = object_getClass(a1);
          BOOL v89 = class_isMetaClass(v88);
          id v90 = object_getClassName(a1);
          BOOL v143 = sel_getName("_readFromService:numBlocks:");
          uint64_t v91 = 45;
          if (v89) {
            uint64_t v91 = 43;
          }
          v87(3, "%c[%{public}s %{public}s]:%i response length too small", v91, v90, v143, 169);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        long long v92 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
          goto LABEL_130;
        }
        uint64_t v93 = object_getClass(a1);
        if (class_isMetaClass(v93)) {
          int v94 = 43;
        }
        else {
          int v94 = 45;
        }
        __int16 v95 = object_getClassName(a1);
        int v96 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        int v161 = v94;
        __int16 v162 = 2082;
        uint64_t v163 = v95;
        __int16 v164 = 2082;
        long long v165 = v96;
        __int16 v166 = 1024;
        int v167 = 169;
        __int16 v97 = "%c[%{public}s %{public}s]:%i response length too small";
LABEL_129:
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, v97, buf, 0x22u);
LABEL_130:
        uint64_t v8 = v148;
        __int16 v110 = v149;
        int v59 = v85;

        uint64_t v109 = 0;
        goto LABEL_131;
      }
      uint64_t v111 = v84;
      uint64_t v112 = [v111 bytes];
      if (v112[10])
      {
        id v85 = v59;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v113 = NFLogGetLogger();
        if (v113)
        {
          id v114 = (void (*)(uint64_t, const char *, ...))v113;
          uint64_t v115 = object_getClass(a1);
          BOOL v116 = class_isMetaClass(v115);
          int v117 = object_getClassName(a1);
          int v145 = sel_getName("_readFromService:numBlocks:");
          uint64_t v118 = 45;
          if (v116) {
            uint64_t v118 = 43;
          }
          v114(3, "%c[%{public}s %{public}s]:%i failed to read blocks from service", v118, v117, v145, 182);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        long long v92 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
          goto LABEL_130;
        }
        uint64_t v119 = object_getClass(a1);
        if (class_isMetaClass(v119)) {
          int v120 = 43;
        }
        else {
          int v120 = 45;
        }
        uint64_t v121 = object_getClassName(a1);
        char v122 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        int v161 = v120;
        __int16 v162 = 2082;
        uint64_t v163 = v121;
        __int16 v164 = 2082;
        long long v165 = v122;
        __int16 v166 = 1024;
        int v167 = 182;
        __int16 v97 = "%c[%{public}s %{public}s]:%i failed to read blocks from service";
        goto LABEL_129;
      }
      int v123 = v112;
      unsigned __int8 v159 = v112[12];
      unint64_t v124 = (16 * v159) | 0xC;
      if (v124 > (unint64_t)[v111 length])
      {
        id v85 = v59;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v125 = NFLogGetLogger();
        if (v125)
        {
          int v126 = (void (*)(uint64_t, const char *, ...))v125;
          __int16 v127 = object_getClass(a1);
          BOOL v128 = class_isMetaClass(v127);
          __int16 v129 = object_getClassName(a1);
          uint64_t v146 = sel_getName("_readFromService:numBlocks:");
          uint64_t v130 = 45;
          if (v128) {
            uint64_t v130 = 43;
          }
          v126(3, "%c[%{public}s %{public}s]:%i Invalid data length", v130, v129, v146, 191);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        long long v92 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
          goto LABEL_130;
        }
        __int16 v131 = object_getClass(a1);
        if (class_isMetaClass(v131)) {
          int v132 = 43;
        }
        else {
          int v132 = 45;
        }
        __int16 v133 = object_getClassName(a1);
        uint64_t v134 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        int v161 = v132;
        __int16 v162 = 2082;
        uint64_t v163 = v133;
        __int16 v164 = 2082;
        long long v165 = v134;
        __int16 v166 = 1024;
        int v167 = 191;
        __int16 v97 = "%c[%{public}s %{public}s]:%i Invalid data length";
        goto LABEL_129;
      }
      uint64_t v109 = objc_opt_new();
      if (!v159)
      {
        id v84 = v111;
        uint64_t v8 = v148;
        goto LABEL_108;
      }
      int v98 = v59;
      unsigned int v136 = 0;
      uint64_t v137 = v123 + 13;
      uint64_t v8 = v148;
      do
      {
        id v138 = [objc_alloc((Class)NSData) initWithBytes:v137 length:16];
        [v109 addObject:v138];

        v137 += 16;
        ++v136;
      }
      while (v136 < v159);
      id v84 = v111;
    }
    else
    {
      int v98 = v59;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v99 = NFLogGetLogger();
      if (v99)
      {
        int v100 = (void (*)(uint64_t, const char *, ...))v99;
        uint64_t v101 = object_getClass(a1);
        BOOL v102 = class_isMetaClass(v101);
        __int16 v103 = object_getClassName(a1);
        uint64_t v144 = sel_getName("_readFromService:numBlocks:");
        uint64_t v104 = 45;
        if (v102) {
          uint64_t v104 = 43;
        }
        v100(3, "%c[%{public}s %{public}s]:%i Failed to execute command", v104, v103, v144, 160);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v84 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
      {
        __int16 v105 = object_getClass(a1);
        if (class_isMetaClass(v105)) {
          int v106 = 43;
        }
        else {
          int v106 = 45;
        }
        v107 = object_getClassName(a1);
        __int16 v108 = sel_getName("_readFromService:numBlocks:");
        *(_DWORD *)buf = 67109890;
        int v161 = v106;
        __int16 v162 = 2082;
        uint64_t v163 = v107;
        __int16 v164 = 2082;
        long long v165 = v108;
        __int16 v166 = 1024;
        int v167 = 160;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute command", buf, 0x22u);
      }
      uint64_t v109 = 0;
      uint64_t v8 = v148;
    }
    int v59 = v98;
LABEL_108:
    __int16 v110 = v149;
LABEL_131:

    id v3 = v151;
    id v4 = v153;
    if (v109)
    {
      id v135 = +[NFFelicaStateEvent decodeProvider:v8 service:&off_10031A638 blocks:v109];
      if (v135) {
        [v59 addEntriesFromDictionary:v135];
      }
    }
    goto LABEL_136;
  }
LABEL_50:

  return a1;
}

void sub_1000711A8(uint64_t a1)
{
  kdebug_trace();
  id v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_START_EMULATION", (const char *)&unk_100286819, buf, 2u);
  }

  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v9 = [*(id *)(a1 + 32) clientName];
    uint64_t v10 = 45;
    if (isMetaClass) {
      uint64_t v10 = 43;
    }
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 69, v9);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12)) {
      int v13 = 43;
    }
    else {
      int v13 = 45;
    }
    uint64_t v14 = object_getClassName(*(id *)(a1 + 32));
    id v15 = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v16 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v56 = v13;
    __int16 v57 = 2082;
    int v58 = v14;
    __int16 v59 = 2082;
    unsigned __int16 v60 = v15;
    __int16 v61 = 1024;
    int v62 = 69;
    __int16 v63 = 2114;
    __int16 v64 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    uint64_t v37 = +[_NFHardwareManager sharedHardwareManager];
    id v38 = +[NFRoutingConfig embeddedWiredModeWithHCE];
    id v39 = [v37 setRoutingConfig:v38];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v40 = NFLogGetLogger();
    if (v40)
    {
      __int16 v41 = (void (*)(uint64_t, const char *, ...))v40;
      __int16 v42 = object_getClass(*(id *)(a1 + 32));
      BOOL v43 = class_isMetaClass(v42);
      __int16 v44 = object_getClassName(*(id *)(a1 + 32));
      int v45 = sel_getName(*(SEL *)(a1 + 48));
      BOOL v46 = [*(id *)(a1 + 32) clientName];
      uint64_t v47 = 45;
      if (v43) {
        uint64_t v47 = 43;
      }
      v41(6, "%c[%{public}s %{public}s]:%i NFC emulation mode activated: %@", v47, v44, v45, 76, v46);
    }
    int v33 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v48)) {
        int v49 = 43;
      }
      else {
        int v49 = 45;
      }
      int v50 = object_getClassName(*(id *)(a1 + 32));
      int v51 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v52 = [*(id *)(a1 + 32) clientName];
      *(_DWORD *)buf = 67110146;
      int v56 = v49;
      __int16 v57 = 2082;
      int v58 = v50;
      __int16 v59 = 2082;
      unsigned __int16 v60 = v51;
      __int16 v61 = 1024;
      int v62 = 76;
      __int16 v63 = 2112;
      __int16 v64 = v52;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC emulation mode activated: %@", buf, 0x2Cu);
    }
    goto LABEL_26;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v17 = NFLogGetLogger();
  if (v17)
  {
    uint64_t v18 = (void (*)(uint64_t, const char *, ...))v17;
    BOOL v19 = object_getClass(*(id *)(a1 + 32));
    BOOL v20 = class_isMetaClass(v19);
    unsigned int v21 = object_getClassName(*(id *)(a1 + 32));
    NSErrorUserInfoKey v22 = sel_getName(*(SEL *)(a1 + 48));
    int v23 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v24 = 45;
    if (v20) {
      uint64_t v24 = 43;
    }
    v18(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v24, v21, v22, 71, v23);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v25 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    unsigned __int16 v26 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v26)) {
      int v27 = 43;
    }
    else {
      int v27 = 45;
    }
    id v28 = object_getClassName(*(id *)(a1 + 32));
    id v29 = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v30 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    int v56 = v27;
    __int16 v57 = 2082;
    int v58 = v28;
    __int16 v59 = 2082;
    unsigned __int16 v60 = v29;
    __int16 v61 = 1024;
    int v62 = 71;
    __int16 v63 = 2114;
    __int16 v64 = v30;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v31 = *(void *)(a1 + 40);
  if (v31)
  {
    id v32 = objc_alloc((Class)NSError);
    int v33 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v53 = NSLocalizedDescriptionKey;
    __int16 v34 = +[NSString stringWithUTF8String:"Session not active"];
    __int16 v54 = v34;
    char v35 = +[NSDictionary dictionaryWithObjects:&v54 forKeys:&v53 count:1];
    id v36 = [v32 initWithDomain:v33 code:54 userInfo:v35];
    (*(void (**)(uint64_t, id))(v31 + 16))(v31, v36);

LABEL_26:
  }
}

void sub_10007187C(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 83, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 48));
    id v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v55 = v12;
    __int16 v56 = 2082;
    __int16 v57 = v13;
    __int16 v58 = 2082;
    __int16 v59 = v14;
    __int16 v60 = 1024;
    int v61 = 83;
    __int16 v62 = 2114;
    __int16 v63 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    id v36 = +[_NFHardwareManager sharedHardwareManager];
    uint64_t v37 = +[NFRoutingConfig embeddedWiredMode];
    id v38 = [v36 setRoutingConfig:v37];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v39 = NFLogGetLogger();
    if (v39)
    {
      uint64_t v40 = (void (*)(uint64_t, const char *, ...))v39;
      __int16 v41 = object_getClass(*(id *)(a1 + 32));
      BOOL v42 = class_isMetaClass(v41);
      BOOL v43 = object_getClassName(*(id *)(a1 + 32));
      __int16 v44 = sel_getName(*(SEL *)(a1 + 48));
      int v45 = [*(id *)(a1 + 32) clientName];
      uint64_t v46 = 45;
      if (v42) {
        uint64_t v46 = 43;
      }
      v40(6, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", v46, v43, v44, 91, v45);
    }
    id v32 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v47)) {
        int v48 = 43;
      }
      else {
        int v48 = 45;
      }
      int v49 = object_getClassName(*(id *)(a1 + 32));
      int v50 = sel_getName(*(SEL *)(a1 + 48));
      int v51 = [*(id *)(a1 + 32) clientName];
      *(_DWORD *)buf = 67110146;
      int v55 = v48;
      __int16 v56 = 2082;
      __int16 v57 = v49;
      __int16 v58 = 2082;
      __int16 v59 = v50;
      __int16 v60 = 1024;
      int v61 = 91;
      __int16 v62 = 2112;
      __int16 v63 = v51;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", buf, 0x2Cu);
    }
    goto LABEL_24;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v16 = NFLogGetLogger();
  if (v16)
  {
    uint64_t v17 = (void (*)(uint64_t, const char *, ...))v16;
    uint64_t v18 = object_getClass(*(id *)(a1 + 32));
    BOOL v19 = class_isMetaClass(v18);
    BOOL v20 = object_getClassName(*(id *)(a1 + 32));
    unsigned int v21 = sel_getName(*(SEL *)(a1 + 48));
    NSErrorUserInfoKey v22 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v23 = 45;
    if (v19) {
      uint64_t v23 = 43;
    }
    v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 85, v22);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v24 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    id v25 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v25)) {
      int v26 = 43;
    }
    else {
      int v26 = 45;
    }
    int v27 = object_getClassName(*(id *)(a1 + 32));
    id v28 = sel_getName(*(SEL *)(a1 + 48));
    id v29 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    int v55 = v26;
    __int16 v56 = 2082;
    __int16 v57 = v27;
    __int16 v58 = 2082;
    __int16 v59 = v28;
    __int16 v60 = 1024;
    int v61 = 85;
    __int16 v62 = 2114;
    __int16 v63 = v29;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v30 = *(void *)(a1 + 40);
  if (v30)
  {
    id v31 = objc_alloc((Class)NSError);
    id v32 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v52 = NSLocalizedDescriptionKey;
    int v33 = +[NSString stringWithUTF8String:"Session not active"];
    NSErrorUserInfoKey v53 = v33;
    __int16 v34 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
    id v35 = [v31 initWithDomain:v32 code:54 userInfo:v34];
    (*(void (**)(uint64_t, id))(v30 + 16))(v30, v35);

LABEL_24:
  }
}

void sub_100071F2C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    uint64_t v22 = [*(id *)(a1 + 32) _getSecureElementWrapperForSEID:*(void *)(a1 + 40)];
    if (v22)
    {
      uint64_t v18 = (void *)v22;
      uint64_t v23 = [*(id *)(a1 + 32) embeddedSecureElementWrapper];
      uint64_t v24 = *(void *)(a1 + 48);
      id v29 = 0;
      BOOL v19 = [v23 transceiveData:v24 toOS:0 error:&v29];
      id v20 = v29;

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 56);
      id v26 = objc_alloc((Class)NSError);
      BOOL v19 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
      id v20 = +[NSString stringWithUTF8String:"Stack Error"];
      id v31 = v20;
      int v27 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
      id v28 = [v26 initWithDomain:v19 code:15 userInfo:v27];
      (*(void (**)(uint64_t, void, id))(v25 + 16))(v25, 0, v28);

      uint64_t v18 = 0;
    }
    goto LABEL_15;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    uint64_t v8 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 98, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    id v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 64));
    id v15 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    int v35 = v12;
    __int16 v36 = 2082;
    uint64_t v37 = v13;
    __int16 v38 = 2082;
    uint64_t v39 = v14;
    __int16 v40 = 1024;
    int v41 = 98;
    __int16 v42 = 2114;
    BOOL v43 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v16 = *(void *)(a1 + 56);
  if (v16)
  {
    id v17 = objc_alloc((Class)NSError);
    uint64_t v18 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    BOOL v19 = +[NSString stringWithUTF8String:"Session not active"];
    int v33 = v19;
    id v20 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
    (*(void (**)(uint64_t, void, id))(v16 + 16))(v16, 0, v21);

LABEL_15:
  }
}

uint64_t sub_100072B2C(void *a1, void *a2)
{
  id v3 = a2;
  if ([v3 p1] == 4 && !objc_msgSend(v3, "p2"))
  {
    if ([v3 payloadBytes] && objc_msgSend(v3, "payloadLength") == 10)
    {
      id v15 = [v3 payloadBytes];
      if (*(void *)v15 == 0x2E5341562E45534FLL && v15[4] == 12592)
      {
        uint64_t v13 = 36864;
        goto LABEL_14;
      }
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v18 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_validateOseSelect:");
      uint64_t v21 = 45;
      if (isMetaClass) {
        uint64_t v21 = 43;
      }
      v18(3, "%c[%{public}s %{public}s]:%i Bad Select OSE VAS version number: %{public}@", v21, ClassName, Name, 105, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = object_getClass(a1);
      if (class_isMetaClass(v22)) {
        int v23 = 43;
      }
      else {
        int v23 = 45;
      }
      *(_DWORD *)buf = 67110146;
      int v28 = v23;
      __int16 v29 = 2082;
      NSErrorUserInfoKey v30 = object_getClassName(a1);
      __int16 v31 = 2082;
      NSErrorUserInfoKey v32 = sel_getName("_validateOseSelect:");
      __int16 v33 = 1024;
      int v34 = 105;
      __int16 v35 = 2114;
      id v36 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Bad Select OSE VAS version number: %{public}@", buf, 0x2Cu);
    }
    uint64_t v13 = 27264;
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v4 = NFLogGetLogger();
    if (v4)
    {
      id v5 = (void (*)(uint64_t, const char *, ...))v4;
      id v6 = object_getClass(a1);
      BOOL v7 = class_isMetaClass(v6);
      uint64_t v8 = object_getClassName(a1);
      uint64_t v25 = sel_getName("_validateOseSelect:");
      uint64_t v9 = 45;
      if (v7) {
        uint64_t v9 = 43;
      }
      v5(3, "%c[%{public}s %{public}s]:%i Bad p1/p2", v9, v8, v25, 100);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = object_getClass(a1);
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v28 = v12;
      __int16 v29 = 2082;
      NSErrorUserInfoKey v30 = object_getClassName(a1);
      __int16 v31 = 2082;
      NSErrorUserInfoKey v32 = sel_getName("_validateOseSelect:");
      __int16 v33 = 1024;
      int v34 = 100;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Bad p1/p2", buf, 0x22u);
    }
    uint64_t v13 = 27392;
  }

LABEL_14:
  return v13;
}

unsigned int *sub_100072E64(unsigned int *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    uint64_t v3 = sub_100072B2C(a1, a2);
    *((_WORD *)v2 + 7) = v3;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    id v5 = (void (*)(uint64_t, const char *, ...))Logger;
    if (v3 == 36864)
    {
      if (Logger)
      {
        Class Class = object_getClass(v2);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v2);
        Name = sel_getName("_handleOseSelect:");
        uint64_t v10 = 45;
        if (isMetaClass) {
          uint64_t v10 = 43;
        }
        v5(6, "%c[%{public}s %{public}s]:%i MobileCaps = 0x%04x encryption = 0x%02x, loyalty = 0x%02x, payment = 0x%02x", v10, ClassName, Name, 140, v2[2], v2[2] & 3, (v2[2] >> 2) & 3, (v2[2] >> 4) & 3);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = object_getClass(v2);
        if (class_isMetaClass(v12)) {
          int v13 = 43;
        }
        else {
          int v13 = 45;
        }
        uint64_t v14 = object_getClassName(v2);
        id v15 = sel_getName("_handleOseSelect:");
        unsigned int v16 = v2[2];
        *(_DWORD *)buf = 67110914;
        int v45 = v13;
        __int16 v46 = 2082;
        uint64_t v47 = v14;
        __int16 v48 = 2082;
        int v49 = v15;
        __int16 v50 = 1024;
        int v51 = 140;
        __int16 v52 = 1024;
        unsigned int v53 = v16;
        __int16 v54 = 1024;
        int v55 = v16 & 3;
        __int16 v56 = 1024;
        int v57 = (v16 >> 2) & 3;
        __int16 v58 = 1024;
        int v59 = (v16 >> 4) & 3;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i MobileCaps = 0x%04x encryption = 0x%02x, loyalty = 0x%02x, payment = 0x%02x", buf, 0x3Au);
      }

      id v17 = (void *)*((void *)v2 + 3);
      uint64_t v18 = +[NSNumber numberWithUnsignedInt:v2[2]];
      [v17 setObject:v18 forKey:@"DeviceCaps"];

      *(_DWORD *)buf = 0;
      if (SecRandomCopyBytes(kSecRandomDefault, 4uLL, buf))
      {
        int v41 = +[NSAssertionHandler currentHandler];
        [v41 handleFailureInMethod:"_handleOseSelect:" object:v2 file:@"NFLoyaltyAgent.m" lineNumber:145 description:@"Failed to initialize nonce"];
      }
      BOOL v19 = (void *)*((void *)v2 + 3);
      id v20 = [objc_alloc((Class)NSData) initWithBytes:buf length:4];
      [v19 setObject:v20 forKey:@"DeviceNonce"];

      id v21 = objc_alloc((Class)NSMutableArray);
      id v22 = [objc_alloc((Class)NSData) initWithBytes:"ApplePay" length:8];
      int v23 = +[NFTLV TLVWithTag:80 value:v22];
      id v24 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002836F7 length:2];
      uint64_t v25 = +[NFTLV TLVWithTag:40737 value:v24];
      id v26 = +[NFTLV TLVWithTag:40740 unsignedLongValue:*(unsigned int *)buf];
      int v27 = +[NFTLV TLVWithTag:40739 unsignedLongValue:bswap32(v2[2])];
      id v28 = [v21 initWithObjects:v23, v25, v26, v27, 0];

      __int16 v29 = +[NFTLV TLVWithTag:111 children:v28];
      NSErrorUserInfoKey v30 = [v29 asMutableData];

      if (v30)
      {
        __int16 v43 = 144;
        [v30 appendBytes:&v43 length:2];
      }
      *((_WORD *)v2 + 7) = -28672;
      *((unsigned char *)v2 + 12) = 1;
      *((unsigned char *)v2 + 32) = 1;
      id v2 = v30;
    }
    else
    {
      if (Logger)
      {
        __int16 v31 = object_getClass(v2);
        BOOL v32 = class_isMetaClass(v31);
        __int16 v33 = object_getClassName(v2);
        __int16 v42 = sel_getName("_handleOseSelect:");
        uint64_t v34 = 45;
        if (v32) {
          uint64_t v34 = 43;
        }
        v5(6, "%c[%{public}s %{public}s]:%i returning failed validation", v34, v33, v42, 127);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v35 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        id v36 = object_getClass(v2);
        if (class_isMetaClass(v36)) {
          int v37 = 43;
        }
        else {
          int v37 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v45 = v37;
        __int16 v46 = 2082;
        uint64_t v47 = object_getClassName(v2);
        __int16 v48 = 2082;
        int v49 = sel_getName("_handleOseSelect:");
        __int16 v50 = 1024;
        int v51 = 127;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i returning failed validation", buf, 0x22u);
      }

      __int16 v38 = objc_opt_new();
      uint64_t v39 = v38;
      if (v38)
      {
        *(_WORD *)buf = __rev16(v3);
        [v38 appendBytes:buf length:2];
      }
      +[NFExceptionsCALogger postAnalyticsVASTransactionException:0 withSWStatus:v3];
      id v2 = v39;
    }
  }

  return v2;
}

id sub_1000733D4(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_opt_new();
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v3 = [&off_100322760 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v26;
      do
      {
        for (unsigned __int16 i = 0; i != v4; unsigned __int16 i = (char *)i + 1)
        {
          if (*(void *)v26 != v5) {
            objc_enumerationMutation(&off_100322760);
          }
          uint64_t v7 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          uint64_t v8 = [*(id *)(a1 + 24) objectForKey:v7];
          if (v8) {
            [v2 setObject:v8 forKey:v7];
          }
        }
        id v4 = [&off_100322760 countByEnumeratingWithState:&v25 objects:v33 count:16];
      }
      while (v4);
    }
    int v9 = *(unsigned __int8 *)(a1 + 12);
    if (v9 == 4)
    {
      id v17 = objc_alloc((Class)NSError);
      uint64_t v18 = 0;
      uint64_t v19 = *(unsigned __int16 *)(a1 + 14);
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      id v20 = "Unknown Error";
      while ((unsigned __int16)word_100302728[v18] != v19)
      {
        v18 += 8;
        if (v18 == 192) {
          goto LABEL_23;
        }
      }
      id v20 = *(const char **)&word_100302728[v18 + 4];
LABEL_23:
      id v21 = +[NSString stringWithUTF8String:v20];
      NSErrorUserInfoKey v30 = v21;
      id v22 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      id v23 = [v17 initWithDomain:@"GP" code:v19 userInfo:v22];
      [v2 setObject:v23 forKey:@"Error"];

      int v24 = *(unsigned __int16 *)(a1 + 14);
      switch(v24)
      {
        case 25223:
          id v15 = &off_10031A788;
          break;
        case 27267:
          id v15 = &off_10031A7B8;
          break;
        case 27012:
          id v15 = &off_10031A7A0;
          break;
        default:
          id v15 = &off_10031A7D0;
          break;
      }
    }
    else
    {
      if (v9 != 3) {
        goto LABEL_15;
      }
      id v10 = objc_alloc((Class)NSError);
      id v11 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
      int v12 = +[NSString stringWithUTF8String:"Success"];
      BOOL v32 = v12;
      int v13 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      id v14 = [v10 initWithDomain:v11 code:0 userInfo:v13];
      [v2 setObject:v14 forKey:@"Error"];

      id v15 = &off_10031A770;
    }
    [v2 setObject:v15 forKey:@"Result"];
  }
  else
  {
    id v2 = 0;
  }
LABEL_15:

  return v2;
}

uint64_t sub_10007379C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 payload];
  uint64_t v5 = +[NFTLV TLVsWithData:v4];

  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v144 = v5;
    id v145 = v3;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      long long v156 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("_validateGetVasDataCommand:");
      uint64_t v160 = 45;
      if (isMetaClass) {
        uint64_t v160 = 43;
      }
      v156(3, "%c[%{public}s %{public}s]:%i Applet is not in selected state", v160, ClassName, Name, 243);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v161 = object_getClass((id)a1);
      if (class_isMetaClass(v161)) {
        int v162 = 43;
      }
      else {
        int v162 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v308 = v162;
      __int16 v309 = 2082;
      v310 = object_getClassName((id)a1);
      __int16 v311 = 2082;
      v312 = sel_getName("_validateGetVasDataCommand:");
      __int16 v313 = 1024;
      int v314 = 243;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Applet is not in selected state", buf, 0x22u);
    }
    id v10 = 0;
    uint64_t v154 = 27013;
    goto LABEL_158;
  }
  if ([v3 p1] != 1
    || [v3 p2] && objc_msgSend(v3, "p2") != 1)
  {
    uint64_t v144 = v5;
    id v145 = v3;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v146 = NFLogGetLogger();
    if (v146)
    {
      uint64_t v147 = (void (*)(uint64_t, const char *, ...))v146;
      int v148 = object_getClass((id)a1);
      BOOL v149 = class_isMetaClass(v148);
      id v150 = object_getClassName((id)a1);
      v284 = sel_getName("_validateGetVasDataCommand:");
      uint64_t v151 = 45;
      if (v149) {
        uint64_t v151 = 43;
      }
      v147(3, "%c[%{public}s %{public}s]:%i Invalid P1/P2", v151, v150, v284, 248);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      __int16 v152 = object_getClass((id)a1);
      if (class_isMetaClass(v152)) {
        int v153 = 43;
      }
      else {
        int v153 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v308 = v153;
      __int16 v309 = 2082;
      v310 = object_getClassName((id)a1);
      __int16 v311 = 2082;
      v312 = sel_getName("_validateGetVasDataCommand:");
      __int16 v313 = 1024;
      int v314 = 248;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid P1/P2", buf, 0x22u);
    }
    id v10 = 0;
    uint64_t v154 = 27392;
LABEL_158:
    int v132 = v145;
    uint64_t v163 = v144;
    goto LABEL_159;
  }
  v297 = v5;
  v298 = v3;
  long long v305 = 0u;
  long long v306 = 0u;
  long long v303 = 0u;
  long long v304 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v303 objects:v318 count:16];
  if (!v7)
  {

    id v10 = 0;
LABEL_162:
    int v132 = v298;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v165 = NFLogGetLogger();
    if (v165)
    {
      __int16 v166 = (void (*)(uint64_t, const char *, ...))v165;
      int v167 = object_getClass((id)a1);
      BOOL v168 = class_isMetaClass(v167);
      uint64_t v169 = object_getClassName((id)a1);
      v286 = sel_getName("_validateGetVasDataCommand:");
      uint64_t v170 = 45;
      if (v168) {
        uint64_t v170 = 43;
      }
      v166(3, "%c[%{public}s %{public}s]:%i Missing mandatory fields", v170, v169, v286, 365);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_172;
    }
    v171 = object_getClass((id)a1);
    if (class_isMetaClass(v171)) {
      int v172 = 43;
    }
    else {
      int v172 = 45;
    }
    v173 = object_getClassName((id)a1);
    uint64_t v174 = sel_getName("_validateGetVasDataCommand:");
    *(_DWORD *)buf = 67109890;
    int v308 = v172;
    __int16 v309 = 2082;
    v310 = v173;
    __int16 v311 = 2082;
    v312 = v174;
    __int16 v313 = 1024;
    int v314 = 365;
    BOOL v143 = "%c[%{public}s %{public}s]:%i Missing mandatory fields";
    goto LABEL_171;
  }
  id v8 = v7;
  uint64_t v296 = 0;
  int v300 = 0;
  int v9 = 0;
  id v10 = 0;
  uint64_t v11 = *(void *)v304;
  v301 = v6;
  while (2)
  {
    for (unint64_t i = 0; i < (unint64_t)v8; ++i)
    {
      int v13 = v10;
      if (*(void *)v304 != v11) {
        objc_enumerationMutation(v6);
      }
      id v14 = *(void **)(*((void *)&v303 + 1) + 8 * i);
      id v10 = [v14 value];

      if ([v14 tag] == 40738)
      {
        if ([v10 length] != (id)2)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v175 = NFLogGetLogger();
          if (v175)
          {
            long long v176 = (void (*)(uint64_t, const char *, ...))v175;
            int v177 = object_getClass((id)a1);
            BOOL v178 = class_isMetaClass(v177);
            id v179 = object_getClassName((id)a1);
            v287 = sel_getName("_validateGetVasDataCommand:");
            uint64_t v180 = 45;
            if (v178) {
              uint64_t v180 = 43;
            }
            v176(3, "%c[%{public}s %{public}s]:%i Invalid terminal app version length", v180, v179, v287, 259);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v181 = NFSharedLogGetLogger();
          uint64_t v163 = v297;
          if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          {
            int v182 = object_getClass((id)a1);
            if (class_isMetaClass(v182)) {
              int v183 = 43;
            }
            else {
              int v183 = 45;
            }
            uint64_t v184 = object_getClassName((id)a1);
            uint64_t v185 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            int v308 = v183;
            __int16 v309 = 2082;
            v310 = v184;
            __int16 v311 = 2082;
            v312 = v185;
            __int16 v313 = 1024;
            int v314 = 259;
            int v186 = "%c[%{public}s %{public}s]:%i Invalid terminal app version length";
            goto LABEL_182;
          }
          goto LABEL_204;
        }
        if (*(_WORD *)[v10 bytes] != 1)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v189 = NFLogGetLogger();
          if (v189)
          {
            __int16 v190 = (void (*)(uint64_t, const char *, ...))v189;
            uint64_t v191 = object_getClass((id)a1);
            BOOL v192 = class_isMetaClass(v191);
            v193 = object_getClassName((id)a1);
            v288 = sel_getName("_validateGetVasDataCommand:");
            uint64_t v194 = 45;
            if (v192) {
              uint64_t v194 = 43;
            }
            v190(3, "%c[%{public}s %{public}s]:%i Invalid AppVersion", v194, v193, v288, 264);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v181 = NFSharedLogGetLogger();
          uint64_t v163 = v297;
          if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          {
            id v195 = object_getClass((id)a1);
            if (class_isMetaClass(v195)) {
              int v196 = 43;
            }
            else {
              int v196 = 45;
            }
            uint64_t v197 = object_getClassName((id)a1);
            __int16 v198 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            int v308 = v196;
            __int16 v309 = 2082;
            v310 = v197;
            __int16 v311 = 2082;
            v312 = v198;
            __int16 v313 = 1024;
            int v314 = 264;
            int v199 = "%c[%{public}s %{public}s]:%i Invalid AppVersion";
            id v200 = v181;
            os_log_type_t v201 = OS_LOG_TYPE_ERROR;
            goto LABEL_192;
          }
          goto LABEL_193;
        }
        unsigned int v15 = [v14 valueAsUnsignedShort];
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v16 = NFLogGetLogger();
        if (v16)
        {
          id v17 = (void (*)(uint64_t, const char *, ...))v16;
          uint64_t v18 = object_getClass((id)a1);
          BOOL v19 = class_isMetaClass(v18);
          id v20 = object_getClassName((id)a1);
          v274 = sel_getName("_validateGetVasDataCommand:");
          BOOL v21 = !v19;
          id v6 = v301;
          uint64_t v22 = 45;
          if (!v21) {
            uint64_t v22 = 43;
          }
          v17(10, "%c[%{public}s %{public}s]:%i VAS Terminal Version number = 0x%08x, %d", v22, v20, v274, 269, v15, v15);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v23 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = object_getClass((id)a1);
          if (class_isMetaClass(v24)) {
            int v25 = 43;
          }
          else {
            int v25 = 45;
          }
          long long v26 = object_getClassName((id)a1);
          long long v27 = sel_getName("_validateGetVasDataCommand:");
          *(_DWORD *)buf = 67110402;
          int v308 = v25;
          __int16 v309 = 2082;
          v310 = v26;
          __int16 v311 = 2082;
          v312 = v27;
          __int16 v313 = 1024;
          int v314 = 269;
          __int16 v315 = 1024;
          *(_DWORD *)v316 = v15;
          *(_WORD *)&v316[4] = 1024;
          *(_DWORD *)&v316[6] = v15;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS Terminal Version number = 0x%08x, %d", buf, 0x2Eu);
        }

        long long v28 = *(void **)(a1 + 24);
        NSErrorUserInfoKey v29 = +[NSNumber numberWithUnsignedInt:__rev16(v15)];
        [v28 setObject:v29 forKey:@"TerminalAppVersion"];

        int v9 = 1;
      }
      else if ([v14 tag] == 40741)
      {
        id v30 = [v10 length];
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v31 = NFLogGetLogger();
        BOOL v32 = (void (*)(uint64_t, const char *, ...))v31;
        if (v30 != (id)32)
        {
          if (v31)
          {
            int v202 = object_getClass((id)a1);
            BOOL v203 = class_isMetaClass(v202);
            long long v204 = object_getClassName((id)a1);
            __int16 v205 = sel_getName("_validateGetVasDataCommand:");
            id v295 = [v10 length];
            uint64_t v206 = 45;
            if (v203) {
              uint64_t v206 = 43;
            }
            v32(3, "%c[%{public}s %{public}s]:%i Invalid merchantId length: %d", v206, v204, v205, 276, v295);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v181 = NFSharedLogGetLogger();
          uint64_t v163 = v297;
          if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          {
            v207 = object_getClass((id)a1);
            if (class_isMetaClass(v207)) {
              int v208 = 43;
            }
            else {
              int v208 = 45;
            }
            v209 = object_getClassName((id)a1);
            v210 = sel_getName("_validateGetVasDataCommand:");
            unsigned int v211 = [v10 length];
            *(_DWORD *)buf = 67110146;
            int v308 = v208;
            __int16 v309 = 2082;
            v310 = v209;
            __int16 v311 = 2082;
            v312 = v210;
            __int16 v313 = 1024;
            int v314 = 276;
            __int16 v315 = 1024;
            *(_DWORD *)v316 = v211;
            int v186 = "%c[%{public}s %{public}s]:%i Invalid merchantId length: %d";
            __int16 v187 = v181;
            uint32_t v188 = 40;
            goto LABEL_203;
          }
          goto LABEL_204;
        }
        if (v31)
        {
          __int16 v33 = object_getClass((id)a1);
          BOOL v34 = class_isMetaClass(v33);
          v272 = object_getClassName((id)a1);
          v275 = sel_getName("_validateGetVasDataCommand:");
          uint64_t v35 = 45;
          if (v34) {
            uint64_t v35 = 43;
          }
          v32(10, "%c[%{public}s %{public}s]:%i VAS Terminal Merchant Id: %@", v35, v272, v275, 280, v10);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v36 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = object_getClass((id)a1);
          if (class_isMetaClass(v37)) {
            int v38 = 43;
          }
          else {
            int v38 = 45;
          }
          uint64_t v39 = object_getClassName((id)a1);
          __int16 v40 = sel_getName("_validateGetVasDataCommand:");
          *(_DWORD *)buf = 67110146;
          int v308 = v38;
          __int16 v309 = 2082;
          v310 = v39;
          __int16 v311 = 2082;
          v312 = v40;
          __int16 v313 = 1024;
          int v314 = 280;
          __int16 v315 = 2112;
          *(void *)v316 = v10;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS Terminal Merchant Id: %@", buf, 0x2Cu);
        }

        [*(id *)(a1 + 24) setObject:v10 forKey:@"MerchantId"];
        int v300 = 1;
      }
      else
      {
        if ([v14 tag] == 40744)
        {
          if ([v10 length] == (id)4)
          {
            [*(id *)(a1 + 24) setObject:v10 forKey:@"TerminalNonce"];
            continue;
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v212 = NFLogGetLogger();
          if (v212)
          {
            v213 = (void (*)(uint64_t, const char *, ...))v212;
            __int16 v214 = object_getClass((id)a1);
            BOOL v215 = class_isMetaClass(v214);
            int v216 = object_getClassName((id)a1);
            v289 = sel_getName("_validateGetVasDataCommand:");
            uint64_t v217 = 45;
            if (v215) {
              uint64_t v217 = 43;
            }
            v213(3, "%c[%{public}s %{public}s]:%i Invalid nonce length", v217, v216, v289, 285);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v181 = NFSharedLogGetLogger();
          uint64_t v163 = v297;
          if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          {
            __int16 v218 = object_getClass((id)a1);
            if (class_isMetaClass(v218)) {
              int v219 = 43;
            }
            else {
              int v219 = 45;
            }
            __int16 v220 = object_getClassName((id)a1);
            __int16 v221 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            int v308 = v219;
            __int16 v309 = 2082;
            v310 = v220;
            __int16 v311 = 2082;
            v312 = v221;
            __int16 v313 = 1024;
            int v314 = 285;
            int v186 = "%c[%{public}s %{public}s]:%i Invalid nonce length";
            goto LABEL_182;
          }
          goto LABEL_204;
        }
        if ([v14 tag] == 40747)
        {
          int v299 = v9;
          if ([v10 length] == (id)4)
          {
            int v41 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", bswap32(*(_DWORD *)[v10 bytes]));
            [*(id *)(a1 + 24) setObject:v41 forKey:@"Filter"];
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v42 = NFLogGetLogger();
            if (v42)
            {
              __int16 v43 = (void (*)(uint64_t, const char *, ...))v42;
              __int16 v44 = object_getClass((id)a1);
              BOOL v45 = class_isMetaClass(v44);
              v273 = object_getClassName((id)a1);
              v276 = sel_getName("_validateGetVasDataCommand:");
              uint64_t v46 = 45;
              if (v45) {
                uint64_t v46 = 43;
              }
              v43(10, "%c[%{public}s %{public}s]:%i VAS Filter: %@", v46, v273, v276, 297, v41);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v47 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v48 = object_getClass((id)a1);
              if (class_isMetaClass(v48)) {
                int v49 = 43;
              }
              else {
                int v49 = 45;
              }
              __int16 v50 = object_getClassName((id)a1);
              int v51 = sel_getName("_validateGetVasDataCommand:");
              *(_DWORD *)buf = 67110146;
              int v308 = v49;
              __int16 v309 = 2082;
              v310 = v50;
              __int16 v311 = 2082;
              v312 = v51;
              __int16 v313 = 1024;
              int v314 = 297;
              __int16 v315 = 2112;
              *(void *)v316 = v41;
              __int16 v52 = v47;
              unsigned int v53 = "%c[%{public}s %{public}s]:%i VAS Filter: %@";
              uint32_t v54 = 44;
              goto LABEL_75;
            }
          }
          else
          {
            if ([v10 length] != (id)5)
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v232 = NFLogGetLogger();
              if (v232)
              {
                v233 = (void (*)(uint64_t, const char *, ...))v232;
                v234 = object_getClass((id)a1);
                BOOL v235 = class_isMetaClass(v234);
                v236 = object_getClassName((id)a1);
                v291 = sel_getName("_validateGetVasDataCommand:");
                uint64_t v237 = 45;
                if (v235) {
                  uint64_t v237 = 43;
                }
                v233(3, "%c[%{public}s %{public}s]:%i Invalid category filter length", v237, v236, v291, 314);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              id v181 = NFSharedLogGetLogger();
              uint64_t v163 = v297;
              if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
              {
                v238 = object_getClass((id)a1);
                if (class_isMetaClass(v238)) {
                  int v239 = 43;
                }
                else {
                  int v239 = 45;
                }
                v240 = object_getClassName((id)a1);
                v241 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                int v308 = v239;
                __int16 v309 = 2082;
                v310 = v240;
                __int16 v311 = 2082;
                v312 = v241;
                __int16 v313 = 1024;
                int v314 = 314;
                int v186 = "%c[%{public}s %{public}s]:%i Invalid category filter length";
                goto LABEL_182;
              }
              goto LABEL_204;
            }
            __int16 v72 = (unsigned __int8 *)[v10 bytes];
            uint64_t v73 = *v72;
            if ((v73 - 1) >= 2)
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v242 = NFLogGetLogger();
              if (v242)
              {
                v243 = (void (*)(uint64_t, const char *, ...))v242;
                v244 = object_getClass((id)a1);
                BOOL v245 = class_isMetaClass(v244);
                v246 = object_getClassName((id)a1);
                v292 = sel_getName("_validateGetVasDataCommand:");
                uint64_t v247 = 45;
                if (v245) {
                  uint64_t v247 = 43;
                }
                v243(5, "%c[%{public}s %{public}s]:%i Invalid Filter Type", v247, v246, v292, 304);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              id v181 = NFSharedLogGetLogger();
              uint64_t v163 = v297;
              if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
              {
                v248 = object_getClass((id)a1);
                if (class_isMetaClass(v248)) {
                  int v249 = 43;
                }
                else {
                  int v249 = 45;
                }
                v250 = object_getClassName((id)a1);
                v251 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                int v308 = v249;
                __int16 v309 = 2082;
                v310 = v250;
                __int16 v311 = 2082;
                v312 = v251;
                __int16 v313 = 1024;
                int v314 = 304;
                int v199 = "%c[%{public}s %{public}s]:%i Invalid Filter Type";
                id v200 = v181;
                os_log_type_t v201 = OS_LOG_TYPE_DEFAULT;
LABEL_192:
                _os_log_impl((void *)&_mh_execute_header, v200, v201, v199, buf, 0x22u);
              }
LABEL_193:
              uint64_t v154 = 27264;
LABEL_205:

              int v132 = v298;
              goto LABEL_159;
            }
            int v41 = +[NSNumber numberWithInt:bswap32(*(_DWORD *)(v72 + 1))];
            id v74 = *(void **)(a1 + 24);
            uint64_t v75 = +[NSNumber numberWithInt:v73];
            [v74 setObject:v75 forKey:@"FilterType"];

            [*(id *)(a1 + 24) setObject:v41 forKey:@"Filter"];
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v76 = NFLogGetLogger();
            if (v76)
            {
              uint64_t v77 = (void (*)(uint64_t, const char *, ...))v76;
              uint64_t v78 = object_getClass((id)a1);
              BOOL v79 = class_isMetaClass(v78);
              uint64_t v80 = object_getClassName((id)a1);
              v278 = sel_getName("_validateGetVasDataCommand:");
              uint64_t v81 = 45;
              if (v79) {
                uint64_t v81 = 43;
              }
              v77(10, "%c[%{public}s %{public}s]:%i VAS Filter = %@, FilterType = %d", v81, v80, v278, 311, v41, v73);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v47 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v82 = object_getClass((id)a1);
              if (class_isMetaClass(v82)) {
                int v83 = 43;
              }
              else {
                int v83 = 45;
              }
              id v84 = object_getClassName((id)a1);
              id v85 = sel_getName("_validateGetVasDataCommand:");
              *(_DWORD *)buf = 67110402;
              int v308 = v83;
              __int16 v309 = 2082;
              v310 = v84;
              __int16 v311 = 2082;
              v312 = v85;
              __int16 v313 = 1024;
              int v314 = 311;
              __int16 v315 = 2112;
              *(void *)v316 = v41;
              *(_WORD *)&v316[8] = 1024;
              int v317 = v73;
              __int16 v52 = v47;
              unsigned int v53 = "%c[%{public}s %{public}s]:%i VAS Filter = %@, FilterType = %d";
              uint32_t v54 = 50;
LABEL_75:
              _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v53, buf, v54);
            }
          }

          id v6 = v301;
LABEL_123:
          int v9 = v299;
          continue;
        }
        if ([v14 tag] == 40742)
        {
          if ([v10 length] == (id)4)
          {
            unsigned __int8 v302 = 0;
            [v10 getBytes:&v302 range:NSMakeRange([v10 length] - 1, 1)];
            int v55 = *(void **)(a1 + 24);
            __int16 v56 = +[NSNumber numberWithUnsignedInt:v302];
            [v55 setObject:v56 forKey:@"TerminalCaps"];

            unsigned __int8 v57 = v302;
            int v58 = v302 & 3;
            if (v58)
            {
              if (v58 != 2)
              {
                if (v58 == 1)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v59 = NFLogGetLogger();
                  if (v59)
                  {
                    __int16 v60 = (void (*)(uint64_t, const char *, ...))v59;
                    int v61 = object_getClass((id)a1);
                    BOOL v62 = class_isMetaClass(v61);
                    __int16 v63 = object_getClassName((id)a1);
                    v277 = sel_getName("_validateGetVasDataCommand:");
                    uint64_t v64 = 45;
                    if (v62) {
                      uint64_t v64 = 43;
                    }
                    v60(6, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS + PAYMENT", v64, v63, v277, 330);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  int v65 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
                  {
                    id v66 = object_getClass((id)a1);
                    if (class_isMetaClass(v66)) {
                      int v67 = 43;
                    }
                    else {
                      int v67 = 45;
                    }
                    uint64_t v68 = object_getClassName((id)a1);
                    int v69 = sel_getName("_validateGetVasDataCommand:");
                    *(_DWORD *)buf = 67109890;
                    int v308 = v67;
                    __int16 v309 = 2082;
                    v310 = v68;
                    __int16 v311 = 2082;
                    v312 = v69;
                    __int16 v313 = 1024;
                    int v314 = 330;
                    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS + PAYMENT", buf, 0x22u);
                  }

                  __int16 v70 = *(void **)(a1 + 24);
                  uint64_t v71 = 4;
                  goto LABEL_100;
                }
LABEL_101:
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v112 = NFLogGetLogger();
                uint64_t v113 = (void (*)(uint64_t, const char *, ...))v112;
                int v299 = v9;
                if ((v57 & 0x80) != 0)
                {
                  if (v112)
                  {
                    unint64_t v124 = object_getClass((id)a1);
                    BOOL v125 = class_isMetaClass(v124);
                    int v126 = object_getClassName((id)a1);
                    v282 = sel_getName("_validateGetVasDataCommand:");
                    uint64_t v127 = 45;
                    if (v125) {
                      uint64_t v127 = 43;
                    }
                    v113(6, "%c[%{public}s %{public}s]:%i More GET VAS DATA requests expected", v127, v126, v282, 343);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v118 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                  {
                    BOOL v128 = object_getClass((id)a1);
                    if (class_isMetaClass(v128)) {
                      int v129 = 43;
                    }
                    else {
                      int v129 = 45;
                    }
                    uint64_t v130 = object_getClassName((id)a1);
                    __int16 v131 = sel_getName("_validateGetVasDataCommand:");
                    *(_DWORD *)buf = 67109890;
                    int v308 = v129;
                    __int16 v309 = 2082;
                    v310 = v130;
                    __int16 v311 = 2082;
                    v312 = v131;
                    __int16 v313 = 1024;
                    int v314 = 343;
                    _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i More GET VAS DATA requests expected", buf, 0x22u);
                  }
                  int v123 = &__kCFBooleanFalse;
                }
                else
                {
                  if (v112)
                  {
                    id v114 = object_getClass((id)a1);
                    BOOL v115 = class_isMetaClass(v114);
                    BOOL v116 = object_getClassName((id)a1);
                    v281 = sel_getName("_validateGetVasDataCommand:");
                    uint64_t v117 = 45;
                    if (v115) {
                      uint64_t v117 = 43;
                    }
                    v113(6, "%c[%{public}s %{public}s]:%i Last GET VAS DATA request", v117, v116, v281, 347);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v118 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v119 = object_getClass((id)a1);
                    if (class_isMetaClass(v119)) {
                      int v120 = 43;
                    }
                    else {
                      int v120 = 45;
                    }
                    uint64_t v121 = object_getClassName((id)a1);
                    char v122 = sel_getName("_validateGetVasDataCommand:");
                    *(_DWORD *)buf = 67109890;
                    int v308 = v120;
                    __int16 v309 = 2082;
                    v310 = v121;
                    __int16 v311 = 2082;
                    v312 = v122;
                    __int16 v313 = 1024;
                    int v314 = 347;
                    _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Last GET VAS DATA request", buf, 0x22u);
                  }
                  int v123 = &__kCFBooleanTrue;
                }

                [*(id *)(a1 + 24) setObject:v123 forKey:@"LastRequest"];
                BYTE4(v296) = 1;
                goto LABEL_123;
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v100 = NFLogGetLogger();
              if (v100)
              {
                uint64_t v101 = (void (*)(uint64_t, const char *, ...))v100;
                BOOL v102 = object_getClass((id)a1);
                BOOL v103 = class_isMetaClass(v102);
                uint64_t v104 = object_getClassName((id)a1);
                v280 = sel_getName("_validateGetVasDataCommand:");
                uint64_t v105 = 45;
                if (v103) {
                  uint64_t v105 = 43;
                }
                v101(6, "%c[%{public}s %{public}s]:%i Terminal Capabilites: VAS ONLY", v105, v104, v280, 334);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              int v106 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
              {
                v107 = object_getClass((id)a1);
                if (class_isMetaClass(v107)) {
                  int v108 = 43;
                }
                else {
                  int v108 = 45;
                }
                uint64_t v109 = object_getClassName((id)a1);
                __int16 v110 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                int v308 = v108;
                __int16 v309 = 2082;
                v310 = v109;
                __int16 v311 = 2082;
                v312 = v110;
                __int16 v313 = 1024;
                int v314 = 334;
                _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Terminal Capabilites: VAS ONLY", buf, 0x22u);
              }

              __int16 v70 = *(void **)(a1 + 24);
              uint64_t v71 = 2;
            }
            else
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v89 = NFLogGetLogger();
              if (v89)
              {
                id v90 = (void (*)(uint64_t, const char *, ...))v89;
                uint64_t v91 = object_getClass((id)a1);
                BOOL v92 = class_isMetaClass(v91);
                uint64_t v93 = object_getClassName((id)a1);
                v279 = sel_getName("_validateGetVasDataCommand:");
                uint64_t v94 = 45;
                if (v92) {
                  uint64_t v94 = 43;
                }
                v90(6, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS | PAYMENT", v94, v93, v279, 338);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              __int16 v95 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              {
                int v96 = object_getClass((id)a1);
                if (class_isMetaClass(v96)) {
                  int v97 = 43;
                }
                else {
                  int v97 = 45;
                }
                int v98 = object_getClassName((id)a1);
                uint64_t v99 = sel_getName("_validateGetVasDataCommand:");
                *(_DWORD *)buf = 67109890;
                int v308 = v97;
                __int16 v309 = 2082;
                v310 = v98;
                __int16 v311 = 2082;
                v312 = v99;
                __int16 v313 = 1024;
                int v314 = 338;
                _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Terminal Capabilities: VAS | PAYMENT", buf, 0x22u);
              }

              __int16 v70 = *(void **)(a1 + 24);
              uint64_t v71 = 8;
            }
LABEL_100:
            uint64_t v111 = +[NSNumber numberWithShort:v71];
            [v70 setObject:v111 forKey:@"TerminalMode"];

            unsigned __int8 v57 = v302;
            goto LABEL_101;
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v222 = NFLogGetLogger();
          if (v222)
          {
            __int16 v223 = (void (*)(uint64_t, const char *, ...))v222;
            int v224 = object_getClass((id)a1);
            BOOL v225 = class_isMetaClass(v224);
            v226 = object_getClassName((id)a1);
            v290 = sel_getName("_validateGetVasDataCommand:");
            uint64_t v227 = 45;
            if (v225) {
              uint64_t v227 = 43;
            }
            v223(3, "%c[%{public}s %{public}s]:%i Invalid category filter length", v227, v226, v290, 321);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v181 = NFSharedLogGetLogger();
          uint64_t v163 = v297;
          if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          {
            v228 = object_getClass((id)a1);
            if (class_isMetaClass(v228)) {
              int v229 = 43;
            }
            else {
              int v229 = 45;
            }
            v230 = object_getClassName((id)a1);
            v231 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            int v308 = v229;
            __int16 v309 = 2082;
            v310 = v230;
            __int16 v311 = 2082;
            v312 = v231;
            __int16 v313 = 1024;
            int v314 = 321;
            int v186 = "%c[%{public}s %{public}s]:%i Invalid category filter length";
            goto LABEL_182;
          }
LABEL_204:
          uint64_t v154 = 26368;
          goto LABEL_205;
        }
        if ([v14 tag] != 40745) {
          continue;
        }
        if ((unint64_t)[v10 length] >= 0x41)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v252 = NFLogGetLogger();
          if (v252)
          {
            v253 = (void (*)(uint64_t, const char *, ...))v252;
            v254 = object_getClass((id)a1);
            BOOL v255 = class_isMetaClass(v254);
            v256 = object_getClassName((id)a1);
            v293 = sel_getName("_validateGetVasDataCommand:");
            uint64_t v257 = 45;
            if (v255) {
              uint64_t v257 = 43;
            }
            v253(3, "%c[%{public}s %{public}s]:%i Invalid merchant url length", v257, v256, v293, 354);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v181 = NFSharedLogGetLogger();
          uint64_t v163 = v297;
          if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
          {
            v258 = object_getClass((id)a1);
            if (class_isMetaClass(v258)) {
              int v259 = 43;
            }
            else {
              int v259 = 45;
            }
            v260 = object_getClassName((id)a1);
            v261 = sel_getName("_validateGetVasDataCommand:");
            *(_DWORD *)buf = 67109890;
            int v308 = v259;
            __int16 v309 = 2082;
            v310 = v260;
            __int16 v311 = 2082;
            v312 = v261;
            __int16 v313 = 1024;
            int v314 = 354;
            int v186 = "%c[%{public}s %{public}s]:%i Invalid merchant url length";
LABEL_182:
            __int16 v187 = v181;
            uint32_t v188 = 34;
LABEL_203:
            _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_ERROR, v186, buf, v188);
          }
          goto LABEL_204;
        }
        uint64_t v86 = [v14 valueAsString];
        id v87 = +[NSCharacterSet whitespaceAndNewlineCharacterSet];
        int v88 = [v86 stringByTrimmingCharactersInSet:v87];

        [*(id *)(a1 + 24) setObject:v88 forKey:@"SignupUrl"];
        LOBYTE(v296) = 1;
      }
    }
    id v8 = [v6 countByEnumeratingWithState:&v303 objects:v318 count:16];
    if (v8) {
      continue;
    }
    break;
  }

  if ((v9 & v300 & 1) == 0) {
    goto LABEL_162;
  }
  int v132 = v298;
  if ([v298 p2] != 1)
  {
    if (([v298 p2] != 0) | v296 & 1) {
      goto LABEL_252;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v262 = NFLogGetLogger();
    if (v262)
    {
      v263 = (void (*)(uint64_t, const char *, ...))v262;
      v264 = object_getClass((id)a1);
      BOOL v265 = class_isMetaClass(v264);
      v266 = object_getClassName((id)a1);
      v294 = sel_getName("_validateGetVasDataCommand:");
      uint64_t v267 = 45;
      if (v265) {
        uint64_t v267 = 43;
      }
      v263(3, "%c[%{public}s %{public}s]:%i Missing URL", v267, v266, v294, 378);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_172;
    }
    v268 = object_getClass((id)a1);
    if (class_isMetaClass(v268)) {
      int v269 = 43;
    }
    else {
      int v269 = 45;
    }
    v270 = object_getClassName((id)a1);
    v271 = sel_getName("_validateGetVasDataCommand:");
    *(_DWORD *)buf = 67109890;
    int v308 = v269;
    __int16 v309 = 2082;
    v310 = v270;
    __int16 v311 = 2082;
    v312 = v271;
    __int16 v313 = 1024;
    int v314 = 378;
    BOOL v143 = "%c[%{public}s %{public}s]:%i Missing URL";
LABEL_171:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v143, buf, 0x22u);
    goto LABEL_172;
  }
  if ((v296 & 0x100000000) != 0)
  {
LABEL_252:
    uint64_t v154 = 36864;
    uint64_t v163 = v297;
    goto LABEL_160;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v133 = NFLogGetLogger();
  if (v133)
  {
    uint64_t v134 = (void (*)(uint64_t, const char *, ...))v133;
    id v135 = object_getClass((id)a1);
    BOOL v136 = class_isMetaClass(v135);
    uint64_t v137 = object_getClassName((id)a1);
    v283 = sel_getName("_validateGetVasDataCommand:");
    uint64_t v138 = 45;
    if (v136) {
      uint64_t v138 = 43;
    }
    v134(3, "%c[%{public}s %{public}s]:%i Missing terminal capabilities", v138, v137, v283, 372);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v139 = object_getClass((id)a1);
    if (class_isMetaClass(v139)) {
      int v140 = 43;
    }
    else {
      int v140 = 45;
    }
    uint64_t v141 = object_getClassName((id)a1);
    uint64_t v142 = sel_getName("_validateGetVasDataCommand:");
    *(_DWORD *)buf = 67109890;
    int v308 = v140;
    __int16 v309 = 2082;
    v310 = v141;
    __int16 v311 = 2082;
    v312 = v142;
    __int16 v313 = 1024;
    int v314 = 372;
    BOOL v143 = "%c[%{public}s %{public}s]:%i Missing terminal capabilities";
    goto LABEL_171;
  }
LABEL_172:
  uint64_t v154 = 27264;
  uint64_t v163 = v297;
LABEL_159:

LABEL_160:
  return v154;
}

BOOL sub_100075828(BOOL a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1) {
    a1 = [v3 isSelectCommand] && sub_100072B2C((void *)a1, v4) == 36864;
  }

  return a1;
}

void sub_100076D28(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFCHardwareManagerInterface];
  id v2 = (void *)qword_100347348;
  qword_100347348 = v1;

  id v3 = (void *)qword_100347348;
  id v4 = +[NFReaderSessionCallbacks interface];
  [v3 setInterface:v4 forSelector:"queueReaderSession:sessionConfig:completion:" argumentIndex:0 ofReply:0];

  uint64_t v5 = (void *)qword_100347348;
  id v6 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v5 setClasses:v6 forSelector:"queueReaderSession:sessionConfig:completion:" argumentIndex:1 ofReply:0];

  id v7 = (void *)qword_100347348;
  id v8 = +[NFReaderSessionInterface interface];
  [v7 setInterface:v8 forSelector:"queueReaderSession:sessionConfig:completion:" argumentIndex:0 ofReply:1];

  int v9 = (void *)qword_100347348;
  id v10 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [v9 setClasses:v10 forSelector:"queueCardSession:sessionConfig:completion:" argumentIndex:1 ofReply:0];

  uint64_t v11 = (void *)qword_100347348;
  int v12 = sub_10024F82C();
  [v11 setInterface:v12 forSelector:"queueCardSession:sessionConfig:completion:" argumentIndex:0 ofReply:0];

  int v13 = (void *)qword_100347348;
  id v14 = sub_10024F7F4();
  [v13 setInterface:v14 forSelector:"queueCardSession:sessionConfig:completion:" argumentIndex:0 ofReply:1];

  unsigned int v15 = (void *)qword_100347348;
  uint64_t v16 = +[NFCFieldDetectSessionCallbacksInterface interface];
  [v15 setInterface:v16 forSelector:"queueCardFieldDetectSession:completion:" argumentIndex:0 ofReply:0];

  id v17 = (void *)qword_100347348;
  id v18 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFCFieldDetectSessionInterface];
  [v17 setInterface:v18 forSelector:"queueCardFieldDetectSession:completion:" argumentIndex:0 ofReply:1];
}

void sub_100076FD8(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NFCHardwareManagerCallbacks];
  uint64_t v2 = qword_100347358;
  qword_100347358 = v1;

  _objc_release_x1(v1, v2);
}

id *sub_100077710(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)NFThermalMonitor;
    uint64_t v5 = (id *)[super init];
    a1 = v5;
    if (v5)
    {
      *((_DWORD *)v5 + 6) = -1;
      v5[1] = 0;
      objc_storeStrong(v5 + 2, a2);
    }
  }

  return a1;
}

void sub_100077794(int *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_initWeak(&location, a1);
    id v4 = a1 + 6;
    if (a1[6] == -1)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100077A44;
      handler[3] = &unk_100302900;
      objc_copyWeak(&v18, &location);
      uint64_t v5 = notify_register_dispatch(kOSThermalNotificationPressureLevelName, a1 + 6, v3, handler);
      if (v5)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
        {
          Class Class = object_getClass(a1);
          if (class_isMetaClass(Class)) {
            uint64_t v8 = 43;
          }
          else {
            uint64_t v8 = 45;
          }
          ClassName = object_getClassName(a1);
          Name = sel_getName("registerOSThermalStateChange:");
          Logger(3, "%c[%{public}s %{public}s]:%i Failed to register thermal pressure notification : %d", v8, ClassName, Name, 82, v5);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v11 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          int v12 = object_getClass(a1);
          if (class_isMetaClass(v12)) {
            int v13 = 43;
          }
          else {
            int v13 = 45;
          }
          id v14 = object_getClassName(a1);
          unsigned int v15 = sel_getName("registerOSThermalStateChange:");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v13;
          __int16 v21 = 2082;
          uint64_t v22 = v14;
          __int16 v23 = 2082;
          int v24 = v15;
          __int16 v25 = 1024;
          int v26 = 82;
          __int16 v27 = 1024;
          int v28 = v5;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to register thermal pressure notification : %d", buf, 0x28u);
        }
      }
      else
      {
        int v16 = *v4;
        if (*v4 != -1)
        {
          *(void *)buf = 0;
          if (!notify_get_state(v16, (uint64_t *)buf)) {
            sub_100077AF4(a1, *(uint64_t *)buf);
          }
        }
      }
      objc_destroyWeak(&v18);
    }
    objc_destroyWeak(&location);
  }
}

void sub_100077A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100077A44(uint64_t a1, int a2)
{
  uint64_t state64 = 0;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!notify_get_state(a2, &state64))
    {
      id v4 = _os_activity_create((void *)&_mh_execute_header, "thermalStateChange:Nominal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      os_activity_scope_enter(v4, &state);
      os_activity_scope_leave(&state);

      sub_100077AF4(WeakRetained, state64);
      uint64_t v5 = WeakRetained[4];
      if (v5) {
        (*(void (**)(uint64_t, void))(v5 + 16))(v5, WeakRetained[1]);
      }
    }
  }
}

void sub_100077AF4(void *a1, uint64_t a2)
{
  id v3 = a1;
  objc_sync_enter(v3);
  if (a2 <= 29)
  {
    if (a2)
    {
      if (a2 == 10)
      {
        a2 = 1;
      }
      else
      {
        if (a2 != 20) {
          goto LABEL_13;
        }
        a2 = 2;
      }
    }
    goto LABEL_12;
  }
  if (a2 == 30)
  {
    a2 = 3;
    goto LABEL_12;
  }
  if (a2 == 40 || a2 == 50)
  {
    a2 = 4;
LABEL_12:
    v3[1] = a2;
  }
LABEL_13:
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    Class Class = object_getClass(v3);
    if (class_isMetaClass(Class)) {
      uint64_t v6 = 43;
    }
    else {
      uint64_t v6 = 45;
    }
    ClassName = object_getClassName(v3);
    Name = sel_getName("storeThermalLevel:");
    Logger(6, "%c[%{public}s %{public}s]:%i New state : %lx", v6, ClassName, Name, 176, v3[1]);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = object_getClass(v3);
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    int v12 = object_getClassName(v3);
    int v13 = sel_getName("storeThermalLevel:");
    uint64_t v14 = v3[1];
    *(_DWORD *)buf = 67110146;
    int v16 = v11;
    __int16 v17 = 2082;
    id v18 = v12;
    __int16 v19 = 2082;
    id v20 = v13;
    __int16 v21 = 1024;
    int v22 = 176;
    __int16 v23 = 2048;
    uint64_t v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i New state : %lx", buf, 0x2Cu);
  }

  objc_sync_exit(v3);
}

void sub_100077CF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100077D1C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = objc_retainBlock(v8);
    objc_super v7 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v6;

    if (NFThermalMonitorProvidedBySMC()) {
      sub_1001ACBCC(*(id **)(a1 + 16), (void *)a1, v5);
    }
    else {
      sub_100077794((int *)a1, v5);
    }
  }
}

void sub_100077DB0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;

    if (NFThermalMonitorProvidedBySMC())
    {
      id v3 = *(id **)(a1 + 16);
      sub_1001ACBCC(v3, 0, 0);
    }
    else
    {
      int v4 = *(_DWORD *)(a1 + 24);
      if ((v4 & 0x80000000) == 0)
      {
        notify_cancel(v4);
        *(_DWORD *)(a1 + 24) = -1;
      }
    }
  }
}

uint64_t sub_100077E24(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  uint64_t v2 = v1[1];
  objc_sync_exit(v1);

  return v2;
}

uint64_t sub_100077E6C(uint64_t result, id a2)
{
  if (result)
  {
    uint64_t v2 = result;
    id v3 = objc_retainBlock(a2);
    uint64_t v4 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = v3;
    return _objc_release_x1(v3, v4);
  }
  return result;
}

void sub_1000780D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100078224(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100078A38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007937C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007959C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A1C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A5BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v5 NF_asHexString];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v7 = v5;
  }
  id v8 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10007A6D0;
  v10[3] = &unk_100302B68;
  id v11 = (id)objc_opt_new();
  id v9 = v11;
  [v6 enumerateKeysAndObjectsUsingBlock:v10];

  [*(id *)(a1 + 32) setObject:v9 forKey:v8];
}

void sub_10007A6D0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if ([v9 isEqualToString:@"tagHandle"])
  {
    objc_opt_class();
    isKindOfClass Class = objc_opt_isKindOfClass();
    id v7 = *(void **)(a1 + 32);
    if (isKindOfClass)
    {
      [v7 setObject:@"NULL" forKeyedSubscript:v9];
      if (![(__CFString *)v5 pointerValue]) {
        goto LABEL_7;
      }
      id v7 = *(void **)(a1 + 32);
      CFStringRef v8 = @"NON-NULL";
    }
    else
    {
      CFStringRef v8 = v5;
    }
    [v7 setObject:v8 forKeyedSubscript:v9];
  }
LABEL_7:
}

void sub_10007BBCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007BE2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007C390(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007C990(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007D3F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007D79C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007D848(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007DA48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007E49C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007E928(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007ED44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007EE50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007EEDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007EFC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007FB5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100080D98(void *a1, uint64_t a2)
{
  return [a1 driverDidDetectHardwareReset:a2];
}

id sub_100080DA0(void *a1, uint64_t a2)
{
  return [a1 driverDidDetectHostCardReader:a2];
}

void sub_100080DA8(void *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  if ((a2 & 0x10) == 0)
  {
    int v8 = a2;
    word_100347368 = 0;
    id v9 = objc_opt_new();
    id v10 = v9;
    if ((v8 & 8) != 0 && a3 && a4 >= 1)
    {
      if (*a3 != 106)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger) {
          Logger(3, "%s:%i Houston we have a problem! Payload corrupted without RF errors being set. vData[0] = 0x%X", "_NFDriverWrapperProccessRFTechDetectionInfo", 1787, *a3);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v13 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          int v26 = *a3;
          *(_DWORD *)buf = 136446722;
          id v30 = "_NFDriverWrapperProccessRFTechDetectionInfo";
          __int16 v31 = 1024;
          int v32 = 1787;
          __int16 v33 = 1024;
          int v34 = v26;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Houston we have a problem! Payload corrupted without RF errors being set. vData[0] = 0x%X", buf, 0x18u);
        }
        unsigned int v15 = 0;
        goto LABEL_35;
      }
      [v9 appendBytes:a3 length:a4];
    }
    v27[0] = @"FieldTechnology";
    id v11 = +[NSNumber numberWithUnsignedInt:v8 & 0xF];
    v28[0] = v11;
    v27[1] = @"SystemCode";
    int v12 = +[NSNumber numberWithUnsignedShort:(v8 << 29 >> 31) & HIWORD(a2)];
    v27[2] = @"ECPData";
    v28[1] = v12;
    id v28[2] = v10;
    int v13 = +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];

    uint64_t v14 = +[NFFieldNotification notificationWithDictionary:v13];
    unsigned int v15 = v14;
    if (v14)
    {
      id v16 = v14;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23) {
        v23(3, "%s:%i Error creating field notification", "_NFDriverWrapperProccessRFTechDetectionInfo", 1814);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        id v30 = "_NFDriverWrapperProccessRFTechDetectionInfo";
        __int16 v31 = 1024;
        int v32 = 1814;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i Error creating field notification", buf, 0x12u);
      }
    }
LABEL_35:

    if (v15)
    {
      [a1 driverDidReceiveTechnologyEvent:v15];
    }
    return;
  }
  ++word_100347368;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  __int16 v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v17) {
    v17(3, "%s:%i ECP payload corrupted.", "_NFDriverWrapperProccessRFTechDetectionInfo", 1759);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v18 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    id v30 = "_NFDriverWrapperProccessRFTechDetectionInfo";
    __int16 v31 = 1024;
    int v32 = 1759;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i ECP payload corrupted.", buf, 0x12u);
  }

  unsigned int v19 = (unsigned __int16)word_100347368;
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v19 > 4)
  {
    if (v20) {
      v20(3, "%s:%i Too many back to back RF Error found. Probably bad Reader. Will no longer attempt to restart discovery", "_NFDriverWrapperProccessRFTechDetectionInfo", 1765);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v30 = "_NFDriverWrapperProccessRFTechDetectionInfo";
      __int16 v31 = 1024;
      int v32 = 1765;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Too many back to back RF Error found. Probably bad Reader. Will no longer attempt to restart discovery", buf, 0x12u);
    }
  }
  else
  {
    if (v20) {
      v20(3, "%s:%i RF Error found. Restart Discovery", "_NFDriverWrapperProccessRFTechDetectionInfo", 1761);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      id v30 = "_NFDriverWrapperProccessRFTechDetectionInfo";
      __int16 v31 = 1024;
      int v32 = 1761;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i RF Error found. Restart Discovery", buf, 0x12u);
    }

    [a1 driverRestartDiscovery];
  }
}

id sub_10008128C(void *a1, uint64_t a2, uint64_t a3)
{
  return [a1 driverDidDetectRemoteTags:a2 count:a3];
}

id sub_100081298(void *a1, uint64_t a2, uint64_t a3)
{
  return [a1 driverDidDetectMultiTagStateChange:a2 rfError:a3];
}

void sub_100081620(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100083B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_UNKNOWN **sub_1000855F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) requestedApplets];
  id v3 = [v2 objectForKey:*(void *)(a1 + 40)];
  if (v3) {
    uint64_t v4 = &off_10031A908;
  }
  else {
    uint64_t v4 = &off_10031A920;
  }
  id v5 = v4;

  return v5;
}

void sub_100085D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t sub_100085D60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if (WeakRetained[22] == 2)
    {
      int v8 = WeakRetained;
      id WeakRetained = [WeakRetained firstFieldNotification];
      uint64_t v2 = v8;
      if ((WeakRetained & 1) == 0)
      {
        id v3 = +[_NFHardwareManager sharedHardwareManager];
        uint64_t v4 = [v3 driverWrapper];
        if (v4)
        {
          uint64_t v5 = v4;
          [*(id *)(v4 + 104) lock];
          int v6 = *(unsigned __int8 *)(v5 + 176);
          [*(id *)(v5 + 104) unlock];

          uint64_t v2 = v8;
          if (v6) {
            goto LABEL_7;
          }
        }
        else
        {

          uint64_t v2 = v8;
        }
        id WeakRetained = [v2 handleFieldChanged:0];
        uint64_t v2 = v8;
      }
    }
  }
LABEL_7:

  return _objc_release_x1(WeakRetained, v2);
}

void sub_1000870E0(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 80));
    int v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %@", v9, ClassName, Name, 348, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 80));
    unsigned int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)v209 = v12;
    *(_WORD *)&v209[4] = 2082;
    *(void *)&v209[6] = v13;
    __int16 v210 = 2082;
    unsigned int v211 = v14;
    __int16 v212 = 1024;
    int v213 = 348;
    __int16 v214 = 2112;
    BOOL v215 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      __int16 v17 = (void (*)(uint64_t, const char *, ...))v16;
      id v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      id v20 = object_getClassName(*(id *)(a1 + 32));
      __int16 v21 = sel_getName(*(SEL *)(a1 + 80));
      int v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 354, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      int v28 = sel_getName(*(SEL *)(a1 + 80));
      NSErrorUserInfoKey v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)v209 = v26;
      *(_WORD *)&v209[4] = 2082;
      *(void *)&v209[6] = v27;
      __int16 v210 = 2082;
      unsigned int v211 = v28;
      __int16 v212 = 1024;
      int v213 = 354;
      __int16 v214 = 2114;
      BOOL v215 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 72);
    id v31 = objc_alloc((Class)NSError);
    int v32 = +[NSString stringWithUTF8String:"nfcd"];
    v206[0] = NSLocalizedDescriptionKey;
    __int16 v33 = +[NSString stringWithUTF8String:"Session not active"];
    v207[0] = v33;
    v207[1] = &off_10031AA40;
    v206[1] = @"Line";
    v206[2] = @"Method";
    id v34 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 80))];
    v207[2] = v34;
    v206[3] = NSDebugDescriptionErrorKey;
    id v35 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 80)), 351];
    v207[3] = v35;
    id v36 = +[NSDictionary dictionaryWithObjects:v207 forKeys:v206 count:4];
    id v37 = [v31 initWithDomain:v32 code:54 userInfo:v36];
    (*(void (**)(uint64_t, id))(v30 + 16))(v30, v37);

    int v38 = NFSharedSignpostLog();
    if (os_signpost_enabled(v38))
    {
      *(_WORD *)buf = 0;
      uint64_t v39 = "Session not active";
LABEL_24:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession requestApplets:externalAuth:mode:", v39, buf, 2u);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  uint64_t v40 = *(void *)(a1 + 88);
  if (v40 == 1)
  {
    if (![*(id *)(a1 + 48) count] && !objc_msgSend(*(id *)(a1 + 56), "count"))
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v126 = NFLogGetLogger();
      if (v126)
      {
        uint64_t v127 = (void (*)(uint64_t, const char *, ...))v126;
        BOOL v128 = object_getClass(*(id *)(a1 + 32));
        BOOL v129 = class_isMetaClass(v128);
        uint64_t v130 = object_getClassName(*(id *)(a1 + 32));
        id v179 = sel_getName(*(SEL *)(a1 + 80));
        uint64_t v131 = 45;
        if (v129) {
          uint64_t v131 = 43;
        }
        v127(3, "%c[%{public}s %{public}s]:%i Missing applet on wired", v131, v130, v179, 364);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v132 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        uint64_t v133 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v133)) {
          int v134 = 43;
        }
        else {
          int v134 = 45;
        }
        id v135 = object_getClassName(*(id *)(a1 + 32));
        BOOL v136 = sel_getName(*(SEL *)(a1 + 80));
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)v209 = v134;
        *(_WORD *)&v209[4] = 2082;
        *(void *)&v209[6] = v135;
        __int16 v210 = 2082;
        unsigned int v211 = v136;
        __int16 v212 = 1024;
        int v213 = 364;
        _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing applet on wired", buf, 0x22u);
      }

      uint64_t v137 = *(void *)(a1 + 72);
      id v138 = objc_alloc((Class)NSError);
      int v139 = +[NSString stringWithUTF8String:"nfcd"];
      v202[0] = NSLocalizedDescriptionKey;
      int v140 = +[NSString stringWithUTF8String:"Missing Parameter"];
      v203[0] = v140;
      v203[1] = &off_10031AA70;
      v202[1] = @"Line";
      v202[2] = @"Method";
      id v141 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 80))];
      v203[2] = v141;
      v202[3] = NSDebugDescriptionErrorKey;
      id v142 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 80)), 365];
      v203[3] = v142;
      BOOL v143 = +[NSDictionary dictionaryWithObjects:v203 forKeys:v202 count:4];
      id v144 = [v138 initWithDomain:v139 code:9 userInfo:v143];
      (*(void (**)(uint64_t, id))(v137 + 16))(v137, v144);

      int v38 = NFSharedSignpostLog();
      if (os_signpost_enabled(v38))
      {
        *(_WORD *)buf = 0;
        uint64_t v39 = "Missing applet on wired";
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    goto LABEL_33;
  }
  if (!v40)
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v41 = *(void *)(a1 + 72);
      id v42 = objc_alloc((Class)NSError);
      __int16 v43 = +[NSString stringWithUTF8String:"nfcd"];
      v204[0] = NSLocalizedDescriptionKey;
      __int16 v44 = +[NSString stringWithUTF8String:"Invalid State"];
      v205[0] = v44;
      v205[1] = &off_10031AA58;
      v204[1] = @"Line";
      v204[2] = @"Method";
      id v45 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 80))];
      v205[2] = v45;
      v204[3] = NSDebugDescriptionErrorKey;
      id v46 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 80)), 357];
      v205[3] = v46;
      uint64_t v47 = +[NSDictionary dictionaryWithObjects:v205 forKeys:v204 count:4];
      id v48 = [v42 initWithDomain:v43 code:12 userInfo:v47];
      (*(void (**)(uint64_t, id))(v41 + 16))(v41, v48);

      int v38 = NFSharedSignpostLog();
      if (!os_signpost_enabled(v38)) {
        goto LABEL_25;
      }
      *(_WORD *)buf = 0;
      uint64_t v39 = "InvalidState";
      goto LABEL_24;
    }
LABEL_33:
    uint64_t v40 = *(void *)(a1 + 88);
  }
  if (v40 == 2)
  {
    uint64_t v49 = *(void *)(a1 + 32);
    if (!v49 || (uint64_t v50 = *(void *)(v49 + 168)) == 0 || (*(unsigned char *)(v50 + 218) & 1) == 0)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v51 = NFLogGetLogger();
      if (v51)
      {
        __int16 v52 = (void (*)(uint64_t, const char *, ...))v51;
        unsigned int v53 = object_getClass(*(id *)(a1 + 32));
        BOOL v54 = class_isMetaClass(v53);
        int v55 = object_getClassName(*(id *)(a1 + 32));
        long long v176 = sel_getName(*(SEL *)(a1 + 80));
        uint64_t v56 = 45;
        if (v54) {
          uint64_t v56 = 43;
        }
        v52(3, "%c[%{public}s %{public}s]:%i Non-supported hardware", v56, v55, v176, 372);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      unsigned __int8 v57 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        int v58 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v58)) {
          int v59 = 43;
        }
        else {
          int v59 = 45;
        }
        __int16 v60 = object_getClassName(*(id *)(a1 + 32));
        int v61 = sel_getName(*(SEL *)(a1 + 80));
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)v209 = v59;
        *(_WORD *)&v209[4] = 2082;
        *(void *)&v209[6] = v60;
        __int16 v210 = 2082;
        unsigned int v211 = v61;
        __int16 v212 = 1024;
        int v213 = 372;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Non-supported hardware", buf, 0x22u);
      }

      uint64_t v62 = *(void *)(a1 + 72);
      id v63 = objc_alloc((Class)NSError);
      int v38 = +[NSString stringWithUTF8String:"nfcd"];
      v200[0] = NSLocalizedDescriptionKey;
      uint64_t v64 = +[NSString stringWithUTF8String:"Feature Not Supported"];
      v201[0] = v64;
      v201[1] = &off_10031AA88;
      v200[1] = @"Line";
      v200[2] = @"Method";
      id v65 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 80))];
      v201[2] = v65;
      v200[3] = NSDebugDescriptionErrorKey;
      id v66 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 80)), 373];
      v201[3] = v66;
      int v67 = +[NSDictionary dictionaryWithObjects:v201 forKeys:v200 count:4];
      id v68 = [v63 initWithDomain:v38 code:14 userInfo:v67];
      (*(void (**)(uint64_t, id))(v62 + 16))(v62, v68);

      goto LABEL_25;
    }
    if ([*(id *)(a1 + 48) count] != (id)1)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v98 = NFLogGetLogger();
      if (v98)
      {
        uint64_t v99 = (void (*)(uint64_t, const char *, ...))v98;
        uint64_t v100 = object_getClass(*(id *)(a1 + 32));
        BOOL v101 = class_isMetaClass(v100);
        BOOL v102 = object_getClassName(*(id *)(a1 + 32));
        BOOL v178 = sel_getName(*(SEL *)(a1 + 80));
        uint64_t v103 = 45;
        if (v101) {
          uint64_t v103 = 43;
        }
        v99(3, "%c[%{public}s %{public}s]:%i Single applet support only on contactless", v103, v102, v178, 378);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v104 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
      {
        uint64_t v105 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v105)) {
          int v106 = 43;
        }
        else {
          int v106 = 45;
        }
        v107 = object_getClassName(*(id *)(a1 + 32));
        int v108 = sel_getName(*(SEL *)(a1 + 80));
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)v209 = v106;
        *(_WORD *)&v209[4] = 2082;
        *(void *)&v209[6] = v107;
        __int16 v210 = 2082;
        unsigned int v211 = v108;
        __int16 v212 = 1024;
        int v213 = 378;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Single applet support only on contactless", buf, 0x22u);
      }

      uint64_t v109 = *(void *)(a1 + 72);
      id v110 = objc_alloc((Class)NSError);
      uint64_t v111 = +[NSString stringWithUTF8String:"nfcd"];
      v198[0] = NSLocalizedDescriptionKey;
      uint64_t v112 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      v199[0] = v112;
      v199[1] = &off_10031AAA0;
      v198[1] = @"Line";
      v198[2] = @"Method";
      id v113 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 80))];
      v199[2] = v113;
      v198[3] = NSDebugDescriptionErrorKey;
      id v114 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 80)), 379];
      v199[3] = v114;
      BOOL v115 = +[NSDictionary dictionaryWithObjects:v199 forKeys:v198 count:4];
      id v116 = [v110 initWithDomain:v111 code:10 userInfo:v115];
      (*(void (**)(uint64_t, id))(v109 + 16))(v109, v116);

      int v38 = NFSharedSignpostLog();
      if (os_signpost_enabled(v38))
      {
        *(_WORD *)buf = 0;
        uint64_t v39 = ">1 applet on contactless";
        goto LABEL_24;
      }
      goto LABEL_25;
    }
  }
  int v69 = *(void **)(a1 + 40);
  if (!v69 || [v69 length])
  {
    int v38 = objc_opt_new();
    uint64_t v70 = *(void *)(a1 + 88);
    if (v70 == 1)
    {
      if (![*(id *)(a1 + 56) count])
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v145 = NFLogGetLogger();
        if (v145)
        {
          uint64_t v146 = (void (*)(uint64_t, const char *, ...))v145;
          uint64_t v147 = object_getClass(*(id *)(a1 + 32));
          BOOL v148 = class_isMetaClass(v147);
          BOOL v149 = object_getClassName(*(id *)(a1 + 32));
          uint64_t v180 = sel_getName(*(SEL *)(a1 + 80));
          uint64_t v150 = 45;
          if (v148) {
            uint64_t v150 = 43;
          }
          v146(6, "%c[%{public}s %{public}s]:%i Use provided applet's AIDs for allowed list", v150, v149, v180, 409);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v151 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v152 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v152)) {
            int v153 = 43;
          }
          else {
            int v153 = 45;
          }
          uint64_t v154 = object_getClassName(*(id *)(a1 + 32));
          long long v155 = sel_getName(*(SEL *)(a1 + 80));
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)v209 = v153;
          *(_WORD *)&v209[4] = 2082;
          *(void *)&v209[6] = v154;
          __int16 v210 = 2082;
          unsigned int v211 = v155;
          __int16 v212 = 1024;
          int v213 = 409;
          _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Use provided applet's AIDs for allowed list", buf, 0x22u);
        }

        long long v186 = 0u;
        long long v187 = 0u;
        long long v184 = 0u;
        long long v185 = 0u;
        id v71 = *(id *)(a1 + 48);
        id v156 = [v71 countByEnumeratingWithState:&v184 objects:v192 count:16];
        if (v156)
        {
          id v157 = v156;
          uint64_t v158 = *(void *)v185;
          do
          {
            for (unint64_t i = 0; i != v157; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v185 != v158) {
                objc_enumerationMutation(v71);
              }
              uint64_t v160 = [*(id *)(*((void *)&v184 + 1) + 8 * i) identifierAsData];
              [v38 addObject:v160];
            }
            id v157 = [v71 countByEnumeratingWithState:&v184 objects:v192 count:16];
          }
          while (v157);
        }
LABEL_116:

        goto LABEL_117;
      }
      [v38 addObjectsFromArray:*(void *)(a1 + 56)];
    }
    else if (v70 == 2)
    {
      long long v190 = 0u;
      long long v191 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      id v71 = *(id *)(a1 + 48);
      id v72 = [v71 countByEnumeratingWithState:&v188 objects:v195 count:16];
      if (v72)
      {
        id v73 = v72;
        uint64_t v74 = *(void *)v189;
        while (2)
        {
          for (unsigned int j = 0; j != v73; unsigned int j = (char *)j + 1)
          {
            if (*(void *)v189 != v74) {
              objc_enumerationMutation(v71);
            }
            uint64_t v76 = *(void *)(*((void *)&v188 + 1) + 8 * (void)j);
            uint64_t v77 = [*(id *)(a1 + 32) secureElementWrapper];
            uint64_t v78 = [v77 cachedAppletsUnfiltered];
            LOBYTE(v76) = [v78 containsObject:v76];

            if ((v76 & 1) == 0)
            {
              uint64_t v117 = *(void *)(a1 + 72);
              id v118 = objc_alloc((Class)NSError);
              uint64_t v119 = +[NSString stringWithUTF8String:"nfcd"];
              v193[0] = NSLocalizedDescriptionKey;
              int v120 = +[NSString stringWithUTF8String:"Not found"];
              v194[0] = v120;
              v194[1] = &off_10031AAD0;
              v193[1] = @"Line";
              v193[2] = @"Method";
              id v121 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 80))];
              v194[2] = v121;
              v193[3] = NSDebugDescriptionErrorKey;
              id v122 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 80)), 398];
              v194[3] = v122;
              int v123 = +[NSDictionary dictionaryWithObjects:v194 forKeys:v193 count:4];
              id v124 = [v118 initWithDomain:v119 code:65 userInfo:v123];
              (*(void (**)(uint64_t, id))(v117 + 16))(v117, v124);

              BOOL v125 = NFSharedSignpostLog();
              if (os_signpost_enabled(v125))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v125, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession requestApplets:externalAuth:mode:", "ResultNotFound", buf, 2u);
              }

              goto LABEL_141;
            }
          }
          id v73 = [v71 countByEnumeratingWithState:&v188 objects:v195 count:16];
          if (v73) {
            continue;
          }
          break;
        }
      }
      goto LABEL_116;
    }
LABEL_117:
    int v161 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 164);
    v181[0] = _NSConcreteStackBlock;
    v181[1] = 3221225472;
    v181[2] = sub_1000888DC;
    v181[3] = &unk_100301CB8;
    id v162 = *(id *)(a1 + 48);
    uint64_t v163 = *(void *)(a1 + 32);
    id v182 = v162;
    uint64_t v183 = v163;
    os_unfair_lock_lock(v161);
    sub_1000888DC((uint64_t)v181);
    os_unfair_lock_unlock(v161);
    __int16 v164 = *(void **)(a1 + 32);
    if (v164 && v164[22] == 2)
    {
      if (*(void *)(a1 + 88) == 2)
      {
LABEL_127:
        v171 = [*(id *)(a1 + 48) firstObject];
        uint64_t v170 = [v164 _startCardEmulationWithApplet:v171 externalAuth:*(void *)(a1 + 40)];

        goto LABEL_128;
      }
      uint64_t v165 = sub_1001AED74();
      sub_1001AF914((uint64_t)v165);
    }
    switch(*(void *)(a1 + 88))
    {
      case 0:
        __int16 v166 = *(void **)(a1 + 32);
        uint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        break;
      case 1:
      case 3:
        __int16 v166 = *(void **)(a1 + 32);
        uint64_t v167 = *(void *)(a1 + 40);
        uint64_t v168 = *(void *)(a1 + 48);
        uint64_t v169 = *(void *)(a1 + 64);
        break;
      case 2:
        __int16 v164 = *(void **)(a1 + 32);
        goto LABEL_127;
      default:
        [*(id *)(a1 + 32) setAppletSelectedInWiredMode:0];
        goto LABEL_130;
    }
    uint64_t v170 = [v166 _startWiredModeWithExternalAuth:v167 applets:v168 selectOnStart:v169];
LABEL_128:
    [*(id *)(a1 + 32) setAppletSelectedInWiredMode:0];
    if (v170)
    {
      [*(id *)(a1 + 32) setMode:0];
      char v172 = 0;
      v173 = 0;
    }
    else
    {
LABEL_130:
      [*(id *)(a1 + 32) setMode:*(void *)(a1 + 88)];
      [*(id *)(a1 + 32) _setupFirstFieldNotificationTimer:*(void *)(a1 + 88)];
      uint64_t v170 = 0;
      if ([v38 count]) {
        v173 = v38;
      }
      else {
        v173 = 0;
      }
      char v172 = 1;
    }
    [*(id *)(a1 + 32) setAllowedAIDsListInWiredMode:v173];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    uint64_t v174 = NFSharedSignpostLog();
    if (os_signpost_enabled(v174))
    {
      if (v172)
      {
        uint64_t v175 = @"Success";
      }
      else
      {
        uint64_t v175 = [v170 description];
      }
      *(_DWORD *)buf = 138412290;
      *(void *)v209 = v175;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v174, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession requestApplets:externalAuth:mode:", "%@", buf, 0xCu);
      if ((v172 & 1) == 0) {
    }
      }
    id v71 = v182;
LABEL_141:

    goto LABEL_25;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v79 = NFLogGetLogger();
  if (v79)
  {
    uint64_t v80 = (void (*)(uint64_t, const char *, ...))v79;
    uint64_t v81 = object_getClass(*(id *)(a1 + 32));
    BOOL v82 = class_isMetaClass(v81);
    int v83 = object_getClassName(*(id *)(a1 + 32));
    int v177 = sel_getName(*(SEL *)(a1 + 80));
    uint64_t v84 = 45;
    if (v82) {
      uint64_t v84 = 43;
    }
    v80(3, "%c[%{public}s %{public}s]:%i Invalid auth data", v84, v83, v177, 385);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v85 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
  {
    uint64_t v86 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v86)) {
      int v87 = 43;
    }
    else {
      int v87 = 45;
    }
    int v88 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v89 = sel_getName(*(SEL *)(a1 + 80));
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)v209 = v87;
    *(_WORD *)&v209[4] = 2082;
    *(void *)&v209[6] = v88;
    __int16 v210 = 2082;
    unsigned int v211 = v89;
    __int16 v212 = 1024;
    int v213 = 385;
    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid auth data", buf, 0x22u);
  }

  uint64_t v90 = *(void *)(a1 + 72);
  id v91 = objc_alloc((Class)NSError);
  BOOL v92 = +[NSString stringWithUTF8String:"nfcd"];
  v196[0] = NSLocalizedDescriptionKey;
  uint64_t v93 = +[NSString stringWithUTF8String:"Invalid Parameter"];
  v197[0] = v93;
  v197[1] = &off_10031AAB8;
  v196[1] = @"Line";
  v196[2] = @"Method";
  id v94 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 80))];
  v197[2] = v94;
  v196[3] = NSDebugDescriptionErrorKey;
  id v95 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 80)), 386];
  v197[3] = v95;
  int v96 = +[NSDictionary dictionaryWithObjects:v197 forKeys:v196 count:4];
  id v97 = [v91 initWithDomain:v92 code:10 userInfo:v96];
  (*(void (**)(uint64_t, id))(v90 + 16))(v90, v97);

  int v38 = NFSharedSignpostLog();
  if (os_signpost_enabled(v38))
  {
    *(_WORD *)buf = 0;
    uint64_t v39 = "Invalid auth data";
    goto LABEL_24;
  }
LABEL_25:
}

void sub_1000888DC(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        uint64_t v9 = [v8 identifier:v10];
        [v2 setObject:v8 forKey:v9];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  [*(id *)(a1 + 40) setRequestedApplets:v2];
}

void sub_100088B68(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class)) {
      uint64_t v5 = 43;
    }
    else {
      uint64_t v5 = 45;
    }
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = (void *)v8;
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10) {
      uint64_t v10 = *(void *)(v10 + 176);
    }
    v3(6, "%c[%{public}s %{public}s]:%i %@, mode=%lu", v5, ClassName, Name, 464, v8, v10);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  long long v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    long long v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12)) {
      int v13 = 43;
    }
    else {
      int v13 = 45;
    }
    uint64_t v14 = object_getClassName(*(id *)(a1 + 32));
    unsigned int v15 = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v16 = [*(id *)(a1 + 32) clientName];
    __int16 v17 = (void *)v16;
    uint64_t v18 = *(void *)(a1 + 32);
    if (v18) {
      uint64_t v18 = *(void *)(v18 + 176);
    }
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)uint64_t v105 = v13;
    *(_WORD *)&void v105[4] = 2082;
    *(void *)&v105[6] = v14;
    __int16 v106 = 2082;
    v107 = v15;
    __int16 v108 = 1024;
    int v109 = 464;
    __int16 v110 = 2112;
    uint64_t v111 = v16;
    __int16 v112 = 2048;
    uint64_t v113 = v18;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@, mode=%lu", buf, 0x36u);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    __int16 v43 = *(void **)(a1 + 32);
    if (v43)
    {
      uint64_t v44 = v43[22];
      if (v44 == 1)
      {
        char v97 = 0;
        uint64_t v45 = *(void *)(a1 + 40);
        id v96 = 0;
        unsigned int v46 = [v43 _validateCAPDU:v45 isDFSelectCommand:&v97 outError:&v96];
        uint64_t v41 = v96;
        if (!v46)
        {
          (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
          uint64_t v50 = NFSharedSignpostLog();
          if (!os_signpost_enabled(v50))
          {
LABEL_72:

            goto LABEL_30;
          }
          int v83 = [v41 description];
          *(_DWORD *)buf = 138412290;
          *(void *)uint64_t v105 = v83;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession transceive:", "Validate APDU failed %@", buf, 0xCu);
LABEL_71:

          goto LABEL_72;
        }
        __int16 v43 = *(void **)(a1 + 32);
LABEL_37:
        uint64_t v47 = v41;
        id v48 = [v43 secureElementWrapper];
        uint64_t v49 = *(void *)(a1 + 40);
        id v95 = v41;
        uint64_t v50 = [v48 transceive:v49 error:&v95];
        uint64_t v41 = v95;

        [*(id *)(a1 + 32) setSeDirty:1];
        if (!v97) {
          goto LABEL_50;
        }
        uint64_t v51 = +[NFResponseAPDU responseWithData:v50];
        if ([v51 status] == 27268)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v52 = NFLogGetLogger();
          if (v52)
          {
            unsigned int v53 = (void (*)(uint64_t, const char *, ...))v52;
            BOOL v54 = object_getClass(*(id *)(a1 + 32));
            BOOL isMetaClass = class_isMetaClass(v54);
            uint64_t v56 = object_getClassName(*(id *)(a1 + 32));
            uint64_t v93 = sel_getName(*(SEL *)(a1 + 56));
            uint64_t v57 = 45;
            if (isMetaClass) {
              uint64_t v57 = 43;
            }
            v53(4, "%c[%{public}s %{public}s]:%i SELECT returns memory full", v57, v56, v93, 501);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          int v58 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            int v59 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v59)) {
              int v60 = 43;
            }
            else {
              int v60 = 45;
            }
            int v61 = object_getClassName(*(id *)(a1 + 32));
            uint64_t v62 = sel_getName(*(SEL *)(a1 + 56));
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)uint64_t v105 = v60;
            *(_WORD *)&void v105[4] = 2082;
            *(void *)&v105[6] = v61;
            __int16 v106 = 2082;
            v107 = v62;
            __int16 v108 = 1024;
            int v109 = 501;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i SELECT returns memory full", buf, 0x22u);
          }

          id v63 = [*(id *)(a1 + 32) secureElementWrapper];
          id v64 = [v63 globalUnmountCOX];
        }
        if (!v97)
        {
LABEL_50:
          if (([*(id *)(a1 + 32) appletSelectedInWiredMode] & 1) == 0)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v65 = NFLogGetLogger();
            if (v65)
            {
              id v66 = (void (*)(uint64_t, const char *, ...))v65;
              int v67 = object_getClass(*(id *)(a1 + 32));
              BOOL v68 = class_isMetaClass(v67);
              int v69 = object_getClassName(*(id *)(a1 + 32));
              id v94 = sel_getName(*(SEL *)(a1 + 56));
              uint64_t v70 = 45;
              if (v68) {
                uint64_t v70 = 43;
              }
              v66(4, "%c[%{public}s %{public}s]:%i Not in selected state", v70, v69, v94, 507);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            id v71 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
            {
              id v72 = object_getClass(*(id *)(a1 + 32));
              if (class_isMetaClass(v72)) {
                int v73 = 43;
              }
              else {
                int v73 = 45;
              }
              uint64_t v74 = object_getClassName(*(id *)(a1 + 32));
              uint64_t v75 = sel_getName(*(SEL *)(a1 + 56));
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)uint64_t v105 = v73;
              *(_WORD *)&void v105[4] = 2082;
              *(void *)&v105[6] = v74;
              __int16 v106 = 2082;
              v107 = v75;
              __int16 v108 = 1024;
              int v109 = 507;
              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Not in selected state", buf, 0x22u);
            }

            id v76 = objc_alloc((Class)NSError);
            uint64_t v77 = +[NSString stringWithUTF8String:"nfcd"];
            v98[0] = NSLocalizedDescriptionKey;
            uint64_t v78 = +[NSString stringWithUTF8String:"Security Not Initialized"];
            v99[0] = v78;
            v99[1] = &off_10031AB18;
            v98[1] = @"Line";
            v98[2] = @"Method";
            id v79 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
            v99[2] = v79;
            v98[3] = NSDebugDescriptionErrorKey;
            id v80 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 508];
            v99[3] = v80;
            uint64_t v81 = +[NSDictionary dictionaryWithObjects:v99 forKeys:v98 count:4];
            BOOL v82 = [v76 initWithDomain:v77 code:27 userInfo:v81];

            uint64_t v41 = v82;
          }
        }
        (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
        int v83 = NFSharedSignpostLog();
        if (os_signpost_enabled(v83))
        {
          if (v41)
          {
            uint64_t v84 = [v41 description];
          }
          else
          {
            uint64_t v84 = @"Success";
          }
          *(_DWORD *)buf = 138412290;
          *(void *)uint64_t v105 = v84;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession transceive:", "%@", buf, 0xCu);
          if (v41) {
        }
          }
        goto LABEL_71;
      }
      if (v44 == 3)
      {
        uint64_t v41 = 0;
        char v97 = 0;
        goto LABEL_37;
      }
    }
    uint64_t v85 = *(void *)(a1 + 48);
    id v86 = objc_alloc((Class)NSError);
    int v87 = +[NSString stringWithUTF8String:"nfcd"];
    v100[0] = NSLocalizedDescriptionKey;
    int v88 = +[NSString stringWithUTF8String:"Invalid State"];
    v101[0] = v88;
    v101[1] = &off_10031AB00;
    v100[1] = @"Line";
    v100[2] = @"Method";
    id v89 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
    v101[2] = v89;
    v100[3] = NSDebugDescriptionErrorKey;
    id v90 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 474];
    v101[3] = v90;
    id v91 = +[NSDictionary dictionaryWithObjects:v101 forKeys:v100 count:4];
    id v92 = [v86 initWithDomain:v87 code:12 userInfo:v91];
    (*(void (**)(uint64_t, void, id))(v85 + 16))(v85, 0, v92);

    uint64_t v41 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v41)) {
      goto LABEL_30;
    }
    *(_WORD *)buf = 0;
    id v42 = "Invalid state";
    goto LABEL_29;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v19 = NFLogGetLogger();
  if (v19)
  {
    id v20 = (void (*)(uint64_t, const char *, ...))v19;
    __int16 v21 = object_getClass(*(id *)(a1 + 32));
    BOOL v22 = class_isMetaClass(v21);
    uint64_t v23 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v24 = sel_getName(*(SEL *)(a1 + 56));
    __int16 v25 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v26 = 45;
    if (v22) {
      uint64_t v26 = 43;
    }
    v20(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v26, v23, v24, 470, v25);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  __int16 v27 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    int v28 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v28)) {
      int v29 = 43;
    }
    else {
      int v29 = 45;
    }
    uint64_t v30 = object_getClassName(*(id *)(a1 + 32));
    id v31 = sel_getName(*(SEL *)(a1 + 56));
    int v32 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)uint64_t v105 = v29;
    *(_WORD *)&void v105[4] = 2082;
    *(void *)&v105[6] = v30;
    __int16 v106 = 2082;
    v107 = v31;
    __int16 v108 = 1024;
    int v109 = 470;
    __int16 v110 = 2114;
    uint64_t v111 = (uint64_t)v32;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v33 = *(void *)(a1 + 48);
  id v34 = objc_alloc((Class)NSError);
  id v35 = +[NSString stringWithUTF8String:"nfcd"];
  v102[0] = NSLocalizedDescriptionKey;
  id v36 = +[NSString stringWithUTF8String:"Session not active"];
  v103[0] = v36;
  v103[1] = &off_10031AAE8;
  v102[1] = @"Line";
  void v102[2] = @"Method";
  id v37 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
  v103[2] = v37;
  v102[3] = NSDebugDescriptionErrorKey;
  id v38 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 467];
  v103[3] = v38;
  uint64_t v39 = +[NSDictionary dictionaryWithObjects:v103 forKeys:v102 count:4];
  id v40 = [v34 initWithDomain:v35 code:54 userInfo:v39];
  (*(void (**)(uint64_t, void, id))(v33 + 16))(v33, 0, v40);

  uint64_t v41 = NFSharedSignpostLog();
  if (os_signpost_enabled(v41))
  {
    *(_WORD *)buf = 0;
    id v42 = "Session not active";
LABEL_29:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession transceive:", v42, buf, 2u);
  }
LABEL_30:
}

void sub_1000898D4(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %@", v9, ClassName, Name, 536, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    long long v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 48));
    unsigned int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v72 = v12;
    __int16 v73 = 2082;
    uint64_t v74 = v13;
    __int16 v75 = 2082;
    id v76 = v14;
    __int16 v77 = 1024;
    int v78 = 536;
    __int16 v79 = 2112;
    id v80 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      __int16 v17 = (void (*)(uint64_t, const char *, ...))v16;
      uint64_t v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      id v20 = object_getClassName(*(id *)(a1 + 32));
      __int16 v21 = sel_getName(*(SEL *)(a1 + 48));
      BOOL v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 542, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      int v28 = sel_getName(*(SEL *)(a1 + 48));
      int v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v72 = v26;
      __int16 v73 = 2082;
      uint64_t v74 = v27;
      __int16 v75 = 2082;
      id v76 = v28;
      __int16 v77 = 1024;
      int v78 = 542;
      __int16 v79 = 2114;
      id v80 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 40);
    id v31 = objc_alloc((Class)NSError);
    int v32 = +[NSString stringWithUTF8String:"nfcd"];
    v69[0] = NSLocalizedDescriptionKey;
    uint64_t v33 = +[NSString stringWithUTF8String:"Session not active"];
    v70[0] = v33;
    v70[1] = &off_10031AB30;
    v69[1] = @"Line";
    v69[2] = @"Method";
    id v34 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 48))];
    v70[2] = v34;
    v69[3] = NSDebugDescriptionErrorKey;
    id v35 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 48)), 539];
    v70[3] = v35;
    id v36 = +[NSDictionary dictionaryWithObjects:v70 forKeys:v69 count:4];
    id v37 = [v31 initWithDomain:v32 code:54 userInfo:v36];
    (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v37);

    id v38 = NFSharedSignpostLog();
    if (os_signpost_enabled(v38))
    {
      *(_WORD *)buf = 0;
      uint64_t v39 = "Session not active";
LABEL_24:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession listAppletsAndRefreshCache:", v39, buf, 2u);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  id v40 = [*(id *)(a1 + 32) secureElementWrapper];
  uint64_t v41 = [v40 cachedAppletsUnfiltered];
  if (![v41 count] || (uint64_t v42 = *(void *)(a1 + 32)) == 0)
  {

    goto LABEL_38;
  }
  uint64_t v43 = *(void *)(v42 + 176);

  if (v43 != 3)
  {
LABEL_38:
    uint64_t v59 = *(void *)(a1 + 40);
    id v60 = objc_alloc((Class)NSError);
    int v61 = +[NSString stringWithUTF8String:"nfcd"];
    v67[0] = NSLocalizedDescriptionKey;
    uint64_t v62 = +[NSString stringWithUTF8String:"Invalid State"];
    v68[0] = v62;
    v68[1] = &off_10031AB48;
    v67[1] = @"Line";
    v67[2] = @"Method";
    id v63 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 48))];
    v68[2] = v63;
    v67[3] = NSDebugDescriptionErrorKey;
    id v64 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 48)), 546];
    v68[3] = v64;
    uint64_t v65 = +[NSDictionary dictionaryWithObjects:v68 forKeys:v67 count:4];
    id v66 = [v60 initWithDomain:v61 code:12 userInfo:v65];
    (*(void (**)(uint64_t, void, id))(v59 + 16))(v59, 0, v66);

    id v38 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v38)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v39 = "InvalidState";
    goto LABEL_24;
  }
  if (*(unsigned char *)(a1 + 56) || [*(id *)(a1 + 32) seDirty])
  {
    uint64_t v44 = *(void **)(a1 + 32);
    if (v44)
    {
      uint64_t v45 = [*(id *)(a1 + 32) secureElementWrapper];
      unsigned int v46 = [v45 handle];
      uint64_t v47 = [v46 info];
      unsigned __int8 v48 = [v47 restrictedMode];

      if ((v48 & 1) == 0)
      {
        uint64_t v49 = +[_NFHardwareManager sharedHardwareManager];
        [v49 refreshSecureElementInfo];
      }
      uint64_t v50 = [v44 secureElementWrapper];
      id v51 = sub_10024379C(v50);

      uint64_t v52 = [v44 secureElementWrapper];
      id v53 = sub_100250F44(v52);

      BOOL v54 = [v44 secureElementWrapper];
      id v55 = [v54 refreshISDCounter];
    }
  }
  [*(id *)(a1 + 32) setSeDirty:0];
  uint64_t v56 = *(void *)(a1 + 40);
  uint64_t v57 = [*(id *)(a1 + 32) secureElementWrapper];
  int v58 = [v57 cachedAppletsUnfiltered];
  (*(void (**)(uint64_t, void *, void))(v56 + 16))(v56, v58, 0);

  id v38 = NFSharedSignpostLog();
  if (os_signpost_enabled(v38))
  {
    *(_WORD *)buf = 0;
    uint64_t v39 = "Success";
    goto LABEL_24;
  }
LABEL_25:
}

void sub_10008A238(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %@", v9, ClassName, Name, 571, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    long long v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 56));
    unsigned int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)unsigned int v46 = v12;
    *(_WORD *)&v46[4] = 2082;
    *(void *)&v46[6] = v13;
    __int16 v47 = 2082;
    unsigned __int8 v48 = v14;
    __int16 v49 = 1024;
    int v50 = 571;
    __int16 v51 = 2112;
    uint64_t v52 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      __int16 v17 = (void (*)(uint64_t, const char *, ...))v16;
      uint64_t v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      id v20 = object_getClassName(*(id *)(a1 + 32));
      __int16 v21 = sel_getName(*(SEL *)(a1 + 56));
      BOOL v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 577, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      int v28 = sel_getName(*(SEL *)(a1 + 56));
      int v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)unsigned int v46 = v26;
      *(_WORD *)&v46[4] = 2082;
      *(void *)&v46[6] = v27;
      __int16 v47 = 2082;
      unsigned __int8 v48 = v28;
      __int16 v49 = 1024;
      int v50 = 577;
      __int16 v51 = 2114;
      uint64_t v52 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 48);
    id v31 = objc_alloc((Class)NSError);
    int v32 = +[NSString stringWithUTF8String:"nfcd"];
    v43[0] = NSLocalizedDescriptionKey;
    uint64_t v33 = +[NSString stringWithUTF8String:"Session not active"];
    v44[0] = v33;
    v44[1] = &off_10031AB60;
    v43[1] = @"Line";
    v43[2] = @"Method";
    id v34 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
    v44[2] = v34;
    v43[3] = NSDebugDescriptionErrorKey;
    id v35 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 574];
    v44[3] = v35;
    id v36 = +[NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:4];
    id v37 = [v31 initWithDomain:v32 code:54 userInfo:v36];
    (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v37);

    id v38 = NFSharedSignpostLog();
    if (os_signpost_enabled(v38))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession queryExtraInfoForApplets:", "Session not active", buf, 2u);
    }
  }
  else
  {
    id v38 = objc_opt_new();
    uint64_t v39 = [*(id *)(a1 + 32) secureElementWrapper];
    id v40 = sub_100246538(v39, *(void **)(a1 + 40), v38);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v41 = NFSharedSignpostLog();
    if (os_signpost_enabled(v41))
    {
      if (v40)
      {
        uint64_t v42 = [v40 description];
      }
      else
      {
        uint64_t v42 = @"Success";
      }
      *(_DWORD *)buf = 138412290;
      *(void *)unsigned int v46 = v42;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession queryExtraInfoForApplets:", "%@", buf, 0xCu);
      if (v40) {
    }
      }
  }
}

void sub_10008A948(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %@", v9, ClassName, Name, 598, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    long long v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 56));
    unsigned int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)__int16 v75 = v12;
    *(_WORD *)&v75[4] = 2082;
    *(void *)&v75[6] = v13;
    __int16 v76 = 2082;
    __int16 v77 = v14;
    __int16 v78 = 1024;
    int v79 = 598;
    __int16 v80 = 2112;
    uint64_t v81 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      __int16 v17 = (void (*)(uint64_t, const char *, ...))v16;
      uint64_t v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      id v20 = object_getClassName(*(id *)(a1 + 32));
      __int16 v21 = sel_getName(*(SEL *)(a1 + 56));
      BOOL v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 604, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      int v28 = sel_getName(*(SEL *)(a1 + 56));
      int v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)__int16 v75 = v26;
      *(_WORD *)&v75[4] = 2082;
      *(void *)&v75[6] = v27;
      __int16 v76 = 2082;
      __int16 v77 = v28;
      __int16 v78 = 1024;
      int v79 = 604;
      __int16 v80 = 2114;
      uint64_t v81 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 48);
    id v31 = objc_alloc((Class)NSError);
    int v32 = +[NSString stringWithUTF8String:"nfcd"];
    v72[0] = NSLocalizedDescriptionKey;
    uint64_t v33 = +[NSString stringWithUTF8String:"Session not active"];
    v73[0] = v33;
    v73[1] = &off_10031AB78;
    v72[1] = @"Line";
    v72[2] = @"Method";
    id v34 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
    void v73[2] = v34;
    v72[3] = NSDebugDescriptionErrorKey;
    id v35 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 601];
    v73[3] = v35;
    id v36 = +[NSDictionary dictionaryWithObjects:v73 forKeys:v72 count:4];
    id v37 = [v31 initWithDomain:v32 code:54 userInfo:v36];
    (*(void (**)(uint64_t, id))(v30 + 16))(v30, v37);

    id v38 = NFSharedSignpostLog();
    if (os_signpost_enabled(v38))
    {
      *(_WORD *)buf = 0;
      uint64_t v39 = "Session not active";
LABEL_24:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession deleteApplets:", v39, buf, 2u);
    }
  }
  else
  {
    id v40 = *(void **)(a1 + 32);
    if (!v40 || v40[22] != 3)
    {
      uint64_t v51 = *(void *)(a1 + 48);
      id v52 = objc_alloc((Class)NSError);
      id v53 = +[NSString stringWithUTF8String:"nfcd"];
      v70[0] = NSLocalizedDescriptionKey;
      BOOL v54 = +[NSString stringWithUTF8String:"Invalid State"];
      v71[0] = v54;
      v71[1] = &off_10031AB90;
      v70[1] = @"Line";
      v70[2] = @"Method";
      id v55 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
      v71[2] = v55;
      v70[3] = NSDebugDescriptionErrorKey;
      id v56 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 607];
      v71[3] = v56;
      uint64_t v57 = +[NSDictionary dictionaryWithObjects:v71 forKeys:v70 count:4];
      id v58 = [v52 initWithDomain:v53 code:12 userInfo:v57];
      (*(void (**)(uint64_t, id))(v51 + 16))(v51, v58);

      id v38 = NFSharedSignpostLog();
      if (!os_signpost_enabled(v38)) {
        goto LABEL_25;
      }
      *(_WORD *)buf = 0;
      uint64_t v39 = "InvalidState";
      goto LABEL_24;
    }
    [v40 setSeDirty:1];
    uint64_t v41 = [*(id *)(a1 + 32) secureElementWrapper];
    id v38 = sub_100245A08(v41, *(void **)(a1 + 40));

    uint64_t v42 = *(void **)(a1 + 32);
    if (v42 && v42[22] == 1)
    {
      id v43 = [v42 defaultWiredModeApplet];
      if (!v43) {
        id v43 = [objc_alloc((Class)NSData) initWithBytes:"FACTORYTESTAPP" length:14];
      }
      uint64_t v44 = [*(id *)(a1 + 32) secureElementWrapper];
      int v67 = v38;
      unsigned __int8 v45 = [v44 select:v43 error:&v67];
      unsigned int v46 = v67;

      if ((v45 & 1) == 0)
      {
        id v47 = objc_alloc((Class)NSError);
        unsigned __int8 v48 = +[NSString stringWithUTF8String:"nfcd"];
        id v49 = [v46 code];
        v68[0] = NSLocalizedDescriptionKey;
        id v66 = v49;
        if ((uint64_t)[v46 code] > 70) {
          uint64_t v50 = 71;
        }
        else {
          uint64_t v50 = (uint64_t)[v46 code];
        }
        uint64_t v59 = +[NSString stringWithUTF8String:off_100302B88[v50]];
        v69[0] = v59;
        v69[1] = v46;
        v68[1] = NSUnderlyingErrorKey;
        v68[2] = @"Line";
        v69[2] = &off_10031ABA8;
        v68[3] = @"Method";
        id v60 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
        v69[3] = v60;
        void v68[4] = NSDebugDescriptionErrorKey;
        id v61 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 625];
        void v69[4] = v61;
        uint64_t v62 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:5];
        id v63 = [v47 initWithDomain:v48 code:v66 userInfo:v62];

        unsigned int v46 = v63;
      }

      id v38 = v46;
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    id v64 = NFSharedSignpostLog();
    if (os_signpost_enabled(v64))
    {
      if (v38)
      {
        uint64_t v65 = [v38 description];
      }
      else
      {
        uint64_t v65 = @"Success";
      }
      *(_DWORD *)buf = 138412290;
      *(void *)__int16 v75 = v65;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v64, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession deleteApplets:", "%@", buf, 0xCu);
      if (v38) {
    }
      }
  }
LABEL_25:
}

void sub_10008B3FC(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %@", v9, ClassName, Name, 644, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    long long v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    int v13 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v14 = sel_getName(*(SEL *)(a1 + 56));
    unsigned int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v84 = v12;
    __int16 v85 = 2082;
    id v86 = v13;
    __int16 v87 = 2082;
    int v88 = v14;
    __int16 v89 = 1024;
    int v90 = 644;
    __int16 v91 = 2112;
    CFStringRef v92 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      __int16 v17 = (void (*)(uint64_t, const char *, ...))v16;
      uint64_t v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      id v20 = object_getClassName(*(id *)(a1 + 32));
      __int16 v21 = sel_getName(*(SEL *)(a1 + 56));
      BOOL v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 650, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      int v28 = sel_getName(*(SEL *)(a1 + 56));
      int v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v84 = v26;
      __int16 v85 = 2082;
      id v86 = v27;
      __int16 v87 = 2082;
      int v88 = v28;
      __int16 v89 = 1024;
      int v90 = 650;
      __int16 v91 = 2114;
      CFStringRef v92 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 48);
    id v31 = objc_alloc((Class)NSError);
    int v32 = +[NSString stringWithUTF8String:"nfcd"];
    v99[0] = NSLocalizedDescriptionKey;
    uint64_t v33 = +[NSString stringWithUTF8String:"Session not active"];
    v100[0] = v33;
    v100[1] = &off_10031ABC0;
    v99[1] = @"Line";
    v99[2] = @"Method";
    id v34 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
    v100[2] = v34;
    v99[3] = NSDebugDescriptionErrorKey;
    id v35 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 647];
    v100[3] = v35;
    id v36 = +[NSDictionary dictionaryWithObjects:v100 forKeys:v99 count:4];
    id v37 = [v31 initWithDomain:v32 code:54 userInfo:v36];
    (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v37);

    id v38 = NFSharedSignpostLog();
    if (os_signpost_enabled(v38))
    {
      *(_WORD *)buf = 0;
      uint64_t v39 = "Session not active";
LABEL_24:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession signChallenge:", v39, buf, 2u);
    }
  }
  else
  {
    id v40 = *(void **)(a1 + 32);
    if (!v40 || v40[22] != 3)
    {
      uint64_t v59 = *(void *)(a1 + 48);
      id v60 = objc_alloc((Class)NSError);
      id v61 = +[NSString stringWithUTF8String:"nfcd"];
      v97[0] = NSLocalizedDescriptionKey;
      uint64_t v62 = +[NSString stringWithUTF8String:"Invalid State"];
      v98[0] = v62;
      v98[1] = &off_10031ABD8;
      v97[1] = @"Line";
      v97[2] = @"Method";
      id v63 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
      v98[2] = v63;
      v97[3] = NSDebugDescriptionErrorKey;
      id v64 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 653];
      v98[3] = v64;
      uint64_t v65 = +[NSDictionary dictionaryWithObjects:v98 forKeys:v97 count:4];
      id v66 = [v60 initWithDomain:v61 code:12 userInfo:v65];
      (*(void (**)(uint64_t, void, id))(v59 + 16))(v59, 0, v66);

      id v38 = NFSharedSignpostLog();
      if (!os_signpost_enabled(v38)) {
        goto LABEL_25;
      }
      *(_WORD *)buf = 0;
      uint64_t v39 = "InvalidState";
      goto LABEL_24;
    }
    uint64_t v41 = [v40 secureElementWrapper];
    uint64_t v42 = *(void **)(a1 + 40);
    id v80 = 0;
    uint64_t v43 = sub_1001FD620((uint64_t)v41, v42, &v80);
    id v38 = v80;

    if (v43)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v44 = NFLogGetLogger();
      if (v44)
      {
        unsigned __int8 v45 = (void (*)(uint64_t, const char *, ...))v44;
        unsigned int v46 = object_getClass(*(id *)(a1 + 32));
        BOOL v47 = class_isMetaClass(v46);
        unsigned __int8 v48 = object_getClassName(*(id *)(a1 + 32));
        id v49 = sel_getName(*(SEL *)(a1 + 56));
        if (v43 >= 0x47) {
          int v50 = 71;
        }
        else {
          int v50 = v43;
        }
        int v79 = off_100302B88[v50];
        uint64_t v51 = 43;
        if (!v47) {
          uint64_t v51 = 45;
        }
        v45(3, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", v51, v48, v49, 661, @"Returned", v43, v79);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v52 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        id v53 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v53)) {
          int v54 = 43;
        }
        else {
          int v54 = 45;
        }
        id v55 = object_getClassName(*(id *)(a1 + 32));
        id v56 = sel_getName(*(SEL *)(a1 + 56));
        if (v43 >= 0x47) {
          uint64_t v57 = 71;
        }
        else {
          uint64_t v57 = v43;
        }
        id v58 = off_100302B88[v57];
        *(_DWORD *)buf = 67110658;
        int v84 = v54;
        __int16 v85 = 2082;
        id v86 = v55;
        __int16 v87 = 2082;
        int v88 = v56;
        __int16 v89 = 1024;
        int v90 = 661;
        __int16 v91 = 2112;
        CFStringRef v92 = @"Returned";
        __int16 v93 = 1024;
        int v94 = v43;
        __int16 v95 = 2080;
        id v96 = v58;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %@ err=%d \"%s\"", buf, 0x3Cu);
      }
      else if (v43 >= 0x47)
      {
        uint64_t v57 = 71;
      }
      else
      {
        uint64_t v57 = v43;
      }

      uint64_t v70 = *(void *)(a1 + 48);
      id v71 = objc_alloc((Class)NSError);
      int v72 = +[NSString stringWithUTF8String:"nfcd"];
      uint64_t v73 = v43;
      v81[0] = NSLocalizedDescriptionKey;
      uint64_t v74 = +[NSString stringWithUTF8String:off_100302B88[v57]];
      v82[0] = v74;
      v82[1] = &off_10031ABF0;
      v81[1] = @"Line";
      v81[2] = @"Method";
      id v75 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
      v82[2] = v75;
      v81[3] = NSDebugDescriptionErrorKey;
      id v76 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 662];
      v82[3] = v76;
      __int16 v77 = +[NSDictionary dictionaryWithObjects:v82 forKeys:v81 count:4];
      id v78 = [v71 initWithDomain:v72 code:v73 userInfo:v77];
      (*(void (**)(uint64_t, void, id))(v70 + 16))(v70, 0, v78);

      int v69 = NFSharedSignpostLog();
      if (os_signpost_enabled(v69))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v69, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession signChallenge:", "Sign Challenge Error", buf, 2u);
      }
    }
    else
    {
      int v67 = NFSharedSignpostLog();
      if (os_signpost_enabled(v67))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v67, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFCredentialSession signChallenge:", "user callback", buf, 2u);
      }

      uint64_t v68 = *(void *)(a1 + 48);
      int v69 = [v38 objectForKeyedSubscript:@"SignedResponse"];
      (*(void (**)(uint64_t, NSObject *, void))(v68 + 16))(v68, v69, 0);
    }
  }
LABEL_25:
}

id sub_10008C730(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) requestedApplets];
  id v2 = [v1 copy];

  return v2;
}

void sub_10008C9B0(id a1)
{
  uint64_t v8 = [[NFSecureTransactionServicesHandoverHybridSessionInterface alloc] initWithProtocol:&OBJC_PROTOCOL___NFSecureTransactionServicesHandoverHybridSessionInterface];
  uint64_t v1 = [(NFSecureTransactionServicesHandoverBaseSessionInterface *)v8 protocolInterface];
  id v2 = (void *)qword_100347370;
  qword_100347370 = v1;

  id v3 = objc_alloc((Class)NSSet);
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  id v6 = [v3 initWithObjects:v4, v5, objc_opt_class(), 0];
  id v7 = [objc_alloc((Class)NSSet) initWithObjects:objc_opt_class(), 0];
  [(id)qword_100347370 setClasses:v6 forSelector:"getAppletsWithCompletion:" argumentIndex:0 ofReply:1];
  [(id)qword_100347370 setClasses:v7 forSelector:"getAppletsWithCompletion:" argumentIndex:1 ofReply:1];
  [(id)qword_100347370 setClasses:v7 forSelector:"setActivePaymentApplet:keys:authorization:completion:" argumentIndex:0 ofReply:0];
  [(id)qword_100347370 setClasses:v7 forSelector:"setActivePaymentApplet:keys:authorization:completion:" argumentIndex:0 ofReply:1];
}

void sub_10008CC08(id a1)
{
  id v3 = [[NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface alloc] initWithProtocol:&OBJC_PROTOCOL___NFSecureTransactionServicesHandoverHybridSessionCallbacksInterface];
  uint64_t v1 = [(NFSecureTransactionServicesHandoverBaseSessionCallbacksInterface *)v3 protocolInterface];
  id v2 = (void *)qword_100347380;
  qword_100347380 = v1;
}

id *sub_10008D654(id *a1, void *a2, void *a3, void *a4, char a5, __int16 a6)
{
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)NFVASSelectResponse;
    unsigned int v15 = (id *)[super init];
    a1 = v15;
    if (v15)
    {
      objc_storeStrong(v15 + 2, a2);
      objc_storeStrong(a1 + 3, a3);
      objc_storeStrong(a1 + 4, a4);
      *((unsigned char *)a1 + _Block_object_dispose(&STACK[0x2B0], 8) = a5;
      *((_WORD *)a1 + 5) = a6;
    }
  }

  return a1;
}

NSObject *sub_10008D77C(uint64_t a1, NSObject *a2)
{
  if (a1)
  {
    uint64_t v172 = *(void *)"OSE.VAS.01";
    __int16 v173 = 12592;
    char v153 = 10;
    int v152 = 304128;
    char v151 = 0;
    id v4 = [objc_alloc((Class)NSMutableData) initWithBytes:&v152 length:5];
    [v4 appendBytes:&v172 length:10];
    [v4 appendBytes:&v151 length:1];
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = *(void **)(a1 + 16);
    id v150 = 0;
    id v7 = v6;
    id v8 = v5;
    uint64_t v9 = sub_100195A20(v8, v4, v7, &v150);
    id v10 = v150;

    if (v10)
    {
      if (a2)
      {
        uint64_t v145 = v9;
        long long v11 = a2;
        id v12 = objc_alloc((Class)NSError);
        id v13 = +[NSString stringWithUTF8String:"nfcd"];
        id v14 = [v10 code];
        v170[0] = NSLocalizedDescriptionKey;
        id v15 = v4;
        if ((uint64_t)[v10 code] > 70) {
          uint64_t v16 = 71;
        }
        else {
          uint64_t v16 = (uint64_t)[v10 code];
        }
        uint64_t v24 = +[NSString stringWithUTF8String:off_100302EE8[v16]];
        v171[0] = v24;
        v171[1] = v10;
        v170[1] = NSUnderlyingErrorKey;
        v170[2] = @"Line";
        v171[2] = &off_10031AC08;
        v170[3] = @"Method";
        id v25 = v10;
        id v26 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("selectOSE:")];
        v171[3] = v26;
        void v170[4] = NSDebugDescriptionErrorKey;
        id v27 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("selectOSE:"), 95];
        void v171[4] = v27;
        int v28 = +[NSDictionary dictionaryWithObjects:v171 forKeys:v170 count:5];
        v11->isa = (Class)[v12 initWithDomain:v13 code:v14 userInfo:v28];

        id v10 = v25;
        a2 = 0;
        uint64_t v9 = v145;
        id v4 = v15;
        goto LABEL_78;
      }
LABEL_79:

      goto LABEL_80;
    }
    if ((unint64_t)[v9 length] <= 1)
    {
      if (!a2) {
        goto LABEL_79;
      }
      id v146 = objc_alloc((Class)NSError);
      uint64_t v17 = +[NSString stringWithUTF8String:"nfcd"];
      v168[0] = NSLocalizedDescriptionKey;
      uint64_t v18 = +[NSString stringWithUTF8String:"Tag Error"];
      v169[0] = v18;
      v169[1] = &off_10031AC20;
      v168[1] = @"Line";
      v168[2] = @"Method";
      BOOL v19 = v9;
      id v20 = a2;
      id v21 = [[objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("selectOSE:")];
      v169[2] = v21;
      v168[3] = NSDebugDescriptionErrorKey;
      id v13 = (void *)v17;
      id v10 = 0;
      id v22 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("selectOSE:"), 100];
      v169[3] = v22;
      uint64_t v23 = +[NSDictionary dictionaryWithObjects:v169 forKeys:v168 count:4];
      v20->isa = (Class)[v146 initWithDomain:v13 code:29 userInfo:v23];
      uint64_t v9 = v19;

      a2 = 0;
LABEL_78:

      goto LABEL_79;
    }
    id v13 = +[NFResponseAPDU responseWithData:v9];
    id v144 = v13;
    if ([v13 status] == 36864)
    {
      BOOL v143 = a2;
      int v29 = [v9 subdataWithRange:0, (char *)[v9 length] - 2];
      uint64_t v30 = +[NFTLV TLVWithData:v29];

      if ([v30 tag] != 111)
      {
        id v142 = v30;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          __int16 v89 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass((id)a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName((id)a1);
          Name = sel_getName("selectOSE:");
          CFStringRef v92 = [v13 response];
          __int16 v93 = [v92 debugDescription];
          uint64_t v94 = 45;
          if (isMetaClass) {
            uint64_t v94 = 43;
          }
          v89(6, "%c[%{public}s %{public}s]:%i Invalid SELECT_OSE response=%{public}@", v94, ClassName, Name, 109, v93);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v95 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          id v96 = object_getClass((id)a1);
          if (class_isMetaClass(v96)) {
            int v97 = 43;
          }
          else {
            int v97 = 45;
          }
          uint64_t v98 = object_getClassName((id)a1);
          uint64_t v99 = sel_getName("selectOSE:");
          uint64_t v100 = [v144 response];
          BOOL v101 = [v100 debugDescription];
          *(_DWORD *)buf = 67110146;
          int v159 = v97;
          __int16 v160 = 2082;
          int v161 = v98;
          __int16 v162 = 2082;
          uint64_t v163 = v99;
          __int16 v164 = 1024;
          int v165 = 109;
          __int16 v166 = 2114;
          uint64_t v167 = v101;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Invalid SELECT_OSE response=%{public}@", buf, 0x2Cu);
        }
        if (v143)
        {
          id v102 = objc_alloc((Class)NSError);
          uint64_t v103 = +[NSString stringWithUTF8String:"nfcd"];
          v156[0] = NSLocalizedDescriptionKey;
          uint64_t v104 = +[NSString stringWithUTF8String:"Decoding Error"];
          v157[0] = v104;
          v157[1] = &off_10031AC38;
          v156[1] = @"Line";
          v156[2] = @"Method";
          id v105 = [[objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("selectOSE:")];
          v157[2] = v105;
          v156[3] = NSDebugDescriptionErrorKey;
          id v106 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("selectOSE:"), 110];
          v157[3] = v106;
          v107 = +[NSDictionary dictionaryWithObjects:v157 forKeys:v156 count:4];
          v143->isa = (Class)[v102 initWithDomain:v103 code:23 userInfo:v107];
        }
        id v13 = v144;
        a2 = sub_10008D654((id *)[NFVASSelectResponse alloc], 0, 0, 0, 0, (__int16)[v144 status]);
        uint64_t v30 = v142;
        goto LABEL_64;
      }
      if ([v30 tag] == 111)
      {
        int v139 = [v30 childWithTag:80];
        if (v139)
        {
          id v31 = v30;
          int v32 = v13;
          uint64_t v33 = [v139 value];
          objc_storeStrong((id *)(a1 + 40), v33);

          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v34 = NFLogGetLogger();
          if (v34)
          {
            id v35 = (void (*)(uint64_t, const char *, ...))v34;
            id v36 = object_getClass((id)a1);
            BOOL v37 = class_isMetaClass(v36);
            id v38 = object_getClassName((id)a1);
            uint64_t v39 = sel_getName("selectOSE:");
            uint64_t v40 = 45;
            if (v37) {
              uint64_t v40 = 43;
            }
            v35(6, "%c[%{public}s %{public}s]:%i VAS APP LABEL: %{public}@", v40, v38, v39, 122, *(void *)(a1 + 40));
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          a2 = NFSharedLogGetLogger();
          if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v41 = object_getClass((id)a1);
            if (class_isMetaClass(v41)) {
              int v42 = 43;
            }
            else {
              int v42 = 45;
            }
            uint64_t v43 = object_getClassName((id)a1);
            uint64_t v44 = sel_getName("selectOSE:");
            unsigned __int8 v45 = *(void **)(a1 + 40);
            *(_DWORD *)buf = 67110146;
            int v159 = v42;
            __int16 v160 = 2082;
            int v161 = v43;
            __int16 v162 = 2082;
            uint64_t v163 = v44;
            __int16 v164 = 1024;
            int v165 = 122;
            __int16 v166 = 2114;
            uint64_t v167 = v45;
            _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS APP LABEL: %{public}@", buf, 0x2Cu);
          }

          id v13 = v32;
          uint64_t v30 = v31;
        }
        uint64_t v147 = [v30 childWithTag:40737];
        if (v147)
        {
          unsigned int v46 = v30;
          BOOL v47 = v13;
          unsigned __int8 v48 = [v147 value];
          objc_storeStrong((id *)(a1 + 48), v48);

          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v49 = NFLogGetLogger();
          if (v49)
          {
            int v50 = (void (*)(uint64_t, const char *, ...))v49;
            uint64_t v51 = object_getClass((id)a1);
            BOOL v52 = class_isMetaClass(v51);
            id v53 = object_getClassName((id)a1);
            int v54 = sel_getName("selectOSE:");
            uint64_t v55 = 45;
            if (v52) {
              uint64_t v55 = 43;
            }
            v50(6, "%c[%{public}s %{public}s]:%i VAS APP VERSION: %{public}@", v55, v53, v54, 127, *(void *)(a1 + 48));
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          a2 = NFSharedLogGetLogger();
          if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
          {
            id v56 = object_getClass((id)a1);
            if (class_isMetaClass(v56)) {
              int v57 = 43;
            }
            else {
              int v57 = 45;
            }
            id v58 = object_getClassName((id)a1);
            uint64_t v59 = sel_getName("selectOSE:");
            id v60 = *(void **)(a1 + 48);
            *(_DWORD *)buf = 67110146;
            int v159 = v57;
            __int16 v160 = 2082;
            int v161 = v58;
            __int16 v162 = 2082;
            uint64_t v163 = v59;
            __int16 v164 = 1024;
            int v165 = 127;
            __int16 v166 = 2114;
            uint64_t v167 = v60;
            _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS APP VERSION: %{public}@", buf, 0x2Cu);
          }

          id v13 = v47;
          uint64_t v30 = v46;
        }
        id v138 = [v30 childWithTag:40740];
        if (v138)
        {
          id v61 = v30;
          uint64_t v62 = v13;
          id v63 = [v147 value];
          objc_storeStrong((id *)(a1 + 56), v63);

          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v64 = NFLogGetLogger();
          if (v64)
          {
            uint64_t v65 = (void (*)(uint64_t, const char *, ...))v64;
            id v66 = object_getClass((id)a1);
            BOOL v67 = class_isMetaClass(v66);
            uint64_t v68 = object_getClassName((id)a1);
            int v69 = sel_getName("selectOSE:");
            uint64_t v70 = 45;
            if (v67) {
              uint64_t v70 = 43;
            }
            v65(6, "%c[%{public}s %{public}s]:%i VAS APP NONCE: %{public}@", v70, v68, v69, 132, *(void *)(a1 + 56));
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          a2 = NFSharedLogGetLogger();
          if (os_log_type_enabled(a2, OS_LOG_TYPE_DEFAULT))
          {
            id v71 = object_getClass((id)a1);
            if (class_isMetaClass(v71)) {
              int v72 = 43;
            }
            else {
              int v72 = 45;
            }
            uint64_t v73 = object_getClassName((id)a1);
            uint64_t v74 = sel_getName("selectOSE:");
            id v75 = *(void **)(a1 + 56);
            *(_DWORD *)buf = 67110146;
            int v159 = v72;
            __int16 v160 = 2082;
            int v161 = v73;
            __int16 v162 = 2082;
            uint64_t v163 = v74;
            __int16 v164 = 1024;
            int v165 = 132;
            __int16 v166 = 2114;
            uint64_t v167 = v75;
            _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i VAS APP NONCE: %{public}@", buf, 0x2Cu);
          }

          id v13 = v62;
          uint64_t v30 = v61;
        }
        id v76 = [v30 childWithTag:40739];
        __int16 v77 = v76;
        if (v76)
        {
          id v141 = v30;
          id v78 = [v76 value];
          int v79 = [v78 bytes];

          id v80 = [v77 value];
          id v81 = [v80 length];

          if ((unint64_t)v81 >= 4) {
            *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x2B0], 8) = v79[3];
          }
          BOOL v82 = [NFVASSelectResponse alloc];
          int v83 = *(void **)(a1 + 40);
          int v84 = *(void **)(a1 + 48);
          char v137 = *(unsigned char *)(a1 + 8);
          id v85 = *(id *)(a1 + 56);
          id v86 = v84;
          id v87 = v83;
          id v13 = v144;
          a2 = sub_10008D654((id *)&v82->super.isa, v87, v86, v85, v137, (__int16)[v144 status]);

          uint64_t v30 = v141;
        }

        if (v77)
        {
LABEL_64:

          id v10 = 0;
          goto LABEL_78;
        }
      }

      a2 = v143;
      id v10 = 0;
    }
    id v149 = v4;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v108 = NFLogGetLogger();
    if (v108)
    {
      int v109 = (void (*)(uint64_t, const char *, ...))v108;
      __int16 v110 = object_getClass((id)a1);
      BOOL v111 = class_isMetaClass(v110);
      __int16 v112 = v9;
      uint64_t v113 = a2;
      id v114 = object_getClassName((id)a1);
      id v115 = v10;
      id v116 = sel_getName("selectOSE:");
      uint64_t v136 = [v144 status];
      int v134 = v114;
      id v135 = v116;
      id v10 = v115;
      uint64_t v117 = 45;
      if (v111) {
        uint64_t v117 = 43;
      }
      a2 = v113;
      uint64_t v9 = v112;
      v109(6, "%c[%{public}s %{public}s]:%i SELECT_OSE failed=0x%{public}02X", v117, v134, v135, 152, v136);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v118 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v119 = object_getClass((id)a1);
      if (class_isMetaClass(v119)) {
        int v120 = 43;
      }
      else {
        int v120 = 45;
      }
      id v121 = object_getClassName((id)a1);
      id v122 = sel_getName("selectOSE:");
      unsigned int v123 = [v144 status];
      *(_DWORD *)buf = 67110146;
      int v159 = v120;
      __int16 v160 = 2082;
      int v161 = v121;
      __int16 v162 = 2082;
      uint64_t v163 = v122;
      __int16 v164 = 1024;
      int v165 = 152;
      __int16 v166 = 1026;
      LODWORD(v167) = v123;
      _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i SELECT_OSE failed=0x%{public}02X", buf, 0x28u);
    }

    if (a2)
    {
      id v124 = v9;
      BOOL v125 = a2;
      id v126 = objc_alloc((Class)NSError);
      uint64_t v127 = +[NSString stringWithUTF8String:"nfcd"];
      v154[0] = NSLocalizedDescriptionKey;
      BOOL v128 = +[NSString stringWithUTF8String:"Not found"];
      v155[0] = v128;
      v155[1] = &off_10031AC50;
      v154[1] = @"Line";
      v154[2] = @"Method";
      id v129 = v10;
      id v130 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("selectOSE:")];
      v155[2] = v130;
      v154[3] = NSDebugDescriptionErrorKey;
      id v131 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("selectOSE:"), 153];
      v155[3] = v131;
      int v132 = +[NSDictionary dictionaryWithObjects:v155 forKeys:v154 count:4];
      v125->isa = (Class)[v126 initWithDomain:v127 code:65 userInfo:v132];
      uint64_t v9 = v124;

      id v10 = v129;
    }
    id v13 = v144;
    a2 = sub_10008D654((id *)[NFVASSelectResponse alloc], 0, 0, 0, 0, (__int16)[v144 status]);
    id v4 = v149;
    goto LABEL_78;
  }
  a2 = 0;
LABEL_80:

  return a2;
}

id sub_10008E820(unsigned __int8 *a1, void *a2, void *a3)
{
  id v191 = a2;
  if (!a1)
  {
    id v121 = 0;
    goto LABEL_99;
  }
  id v5 = *((id *)a1 + 5);
  if (![v5 length])
  {

    goto LABEL_87;
  }
  id v6 = [*((id *)a1 + 6) length];

  if (!v6)
  {
LABEL_87:
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      unsigned int v123 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("performRequests:responses:");
      uint64_t v127 = 45;
      if (isMetaClass) {
        uint64_t v127 = 43;
      }
      v123(3, "%c[%{public}s %{public}s]:%i Select OSE failed", v127, ClassName, Name, 295);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v128 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
    {
      id v129 = object_getClass(a1);
      if (class_isMetaClass(v129)) {
        int v130 = 43;
      }
      else {
        int v130 = 45;
      }
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v130;
      *(_WORD *)int v213 = 2082;
      *(void *)&v213[2] = object_getClassName(a1);
      *(_WORD *)&v213[10] = 2082;
      *(void *)&v213[12] = sel_getName("performRequests:responses:");
      *(_WORD *)&v213[20] = 1024;
      *(_DWORD *)&v213[22] = 295;
      _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Select OSE failed", buf, 0x22u);
    }

    id v131 = objc_alloc((Class)NSError);
    id v118 = +[NSString stringWithUTF8String:"nfcd"];
    v210[0] = NSLocalizedDescriptionKey;
    uint64_t v132 = +[NSString stringWithUTF8String:"Not found"];
    v211[0] = v132;
    v211[1] = &off_10031ACC8;
    v210[1] = @"Line";
    v210[2] = @"Method";
    id v133 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("performRequests:responses:")];
    v211[2] = v133;
    v210[3] = NSDebugDescriptionErrorKey;
    id v134 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("performRequests:responses:"), 296];
    v211[3] = v134;
    id v135 = +[NSDictionary dictionaryWithObjects:v211 forKeys:v210 count:4];
    uint64_t v136 = v131;
    id v137 = v118;
    uint64_t v138 = 65;
    goto LABEL_97;
  }
  if ((a1[8] & 0xC) == 0)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v140 = NFLogGetLogger();
    if (v140)
    {
      id v141 = (void (*)(uint64_t, const char *, ...))v140;
      id v142 = object_getClass(a1);
      BOOL v143 = class_isMetaClass(v142);
      id v144 = object_getClassName(a1);
      uint64_t v175 = sel_getName("performRequests:responses:");
      uint64_t v145 = 45;
      if (v143) {
        uint64_t v145 = 43;
      }
      v141(3, "%c[%{public}s %{public}s]:%i Remote does not support VAS", v145, v144, v175, 300);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v146 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
    {
      uint64_t v147 = object_getClass(a1);
      if (class_isMetaClass(v147)) {
        int v148 = 43;
      }
      else {
        int v148 = 45;
      }
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v148;
      *(_WORD *)int v213 = 2082;
      *(void *)&v213[2] = object_getClassName(a1);
      *(_WORD *)&v213[10] = 2082;
      *(void *)&v213[12] = sel_getName("performRequests:responses:");
      *(_WORD *)&v213[20] = 1024;
      *(_DWORD *)&v213[22] = 300;
      _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Remote does not support VAS", buf, 0x22u);
    }

    id v149 = objc_alloc((Class)NSError);
    id v118 = +[NSString stringWithUTF8String:"nfcd"];
    v208[0] = NSLocalizedDescriptionKey;
    uint64_t v132 = +[NSString stringWithUTF8String:"Feature Not Supported"];
    v209[0] = v132;
    v209[1] = &off_10031ACE0;
    v208[1] = @"Line";
    v208[2] = @"Method";
    id v133 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("performRequests:responses:")];
    v209[2] = v133;
    v208[3] = NSDebugDescriptionErrorKey;
    id v134 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("performRequests:responses:"), 301];
    v209[3] = v134;
    id v135 = +[NSDictionary dictionaryWithObjects:v209 forKeys:v208 count:4];
    uint64_t v136 = v149;
    id v137 = v118;
    uint64_t v138 = 14;
LABEL_97:
    id v121 = [v136 initWithDomain:v137 code:v138 userInfo:v135];

    id v7 = (id)v132;
    goto LABEL_98;
  }
  id v181 = a3;
  id v7 = (id)objc_opt_new();
  long long v187 = (char *)[v191 count];
  if (!v187)
  {
LABEL_84:
    if (v181)
    {
      id v7 = v7;
      id v118 = 0;
      id v121 = 0;
      void *v181 = v7;
    }
    else
    {
      id v118 = 0;
      id v121 = 0;
    }
    goto LABEL_98;
  }
  id v8 = 0;
  id v186 = v7;
  long long v190 = a1;
  while (1)
  {
    uint64_t v9 = [v191 objectAtIndex:v8];
    id v10 = [[NFVASRequest alloc] initWithDictionary:v9];
    long long v11 = [(NFVASRequest *)v10 terminalProtocol];
    unsigned __int8 v12 = [v11 unsignedCharValue];

    __int16 v202 = -13696;
    char v203 = 1;
    unsigned __int8 v204 = v12;
    unsigned __int8 v205 = 0;
    char v201 = 0;
    char v200 = 0;
    int v199 = 16917151;
    char v198 = 32;
    __int16 v197 = 9631;
    id v13 = [objc_alloc((Class)NSMutableData) initWithBytes:&v199 length:5];
    [v13 appendBytes:&v197 length:3];
    v193 = [(NFVASRequest *)v10 merchantId];
    id v14 = [v193 dataUsingEncoding:4];
    id v15 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x20uLL, 0x100004077774924uLL);
    uint64_t v194 = v13;
    id v195 = (void *)v9;
    BOOL v192 = v14;
    if (!v15)
    {
      id v21 = objc_alloc((Class)NSError);
      id v22 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v216 = NSLocalizedDescriptionKey;
      uint64_t v23 = +[NSString stringWithUTF8String:"No resources"];
      *(void *)buf = v23;
      *(void *)int v213 = &off_10031AC68;
      CFStringRef v217 = @"Line";
      CFStringRef v218 = @"Method";
      *(void *)&v213[8] = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_getVAS:lastInSequence:error:")];
      CFStringRef v219 = (const __CFString *)NSDebugDescriptionErrorKey;
      id v24 = *(id *)&v213[8];
      id v25 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_getVAS:lastInSequence:error:"), 190];
      *(void *)&v213[16] = v25;
      id v26 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v216 count:4];
      id v27 = [v21 initWithDomain:v22 code:34 userInfo:v26];
      int v28 = 0;
      goto LABEL_82;
    }
    uint64_t v16 = v15;
    id v17 = v14;
    CC_SHA256([v17 bytes], (CC_LONG)[v17 length], v16);
    [v13 appendBytes:v16 length:32];
    free(v16);
    uint64_t v18 = [(NFVASRequest *)v10 signupUrl];
    long long v189 = v18;
    if (v18)
    {
      BOOL v19 = [v18 absoluteString];
      id v20 = [v19 dataUsingEncoding:4];
    }
    else
    {
      id v20 = 0;
    }
    int v29 = [(NFVASRequest *)v10 terminalProtocol];
    unsigned int v30 = [v29 unsignedCharValue];

    long long v188 = v20;
    if (v30 == 1)
    {
      id v31 = [(NFVASRequest *)v10 terminalCap];
      unsigned int v32 = [v31 unsignedCharValue];

      if (v32 == 1) {
        char v33 = 1;
      }
      else {
        char v33 = 2;
      }
      if (!v32) {
        char v33 = 0;
      }
      *(_DWORD *)&buf[3] = 0;
      *(_DWORD *)buf = 272543;
      LODWORD(v216) = 272031;
      WORD2(v216) = 0;
      BYTE6(v216) = v33 | ((v187 - 1 != v8) << 7);
      LODWORD(__buf) = 0;
      arc4random_buf(&__buf, 4uLL);
      *(_DWORD *)&buf[3] = bswap32(__buf);
      [v13 appendBytes:buf length:7];
      [v13 appendBytes:&v216 length:7];
    }
    else if (![v20 length])
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v80 = NFLogGetLogger();
      if (v80)
      {
        id v81 = (void (*)(uint64_t, const char *, ...))v80;
        BOOL v82 = object_getClass(a1);
        BOOL v83 = class_isMetaClass(v82);
        int v84 = object_getClassName(a1);
        uint64_t v172 = sel_getName("_getVAS:lastInSequence:error:");
        uint64_t v85 = 45;
        if (v83) {
          uint64_t v85 = 43;
        }
        uint64_t v169 = v84;
        a1 = v190;
        v81(3, "%c[%{public}s %{public}s]:%i URL not present.  URL is mandatory!", v85, v169, v172, 223);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v86 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        id v87 = object_getClass(a1);
        if (class_isMetaClass(v87)) {
          int v88 = 43;
        }
        else {
          int v88 = 45;
        }
        __int16 v89 = object_getClassName(a1);
        int v90 = sel_getName("_getVAS:lastInSequence:error:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v88;
        *(_WORD *)int v213 = 2082;
        *(void *)&v213[2] = v89;
        *(_WORD *)&v213[10] = 2082;
        *(void *)&v213[12] = v90;
        *(_WORD *)&v213[20] = 1024;
        *(_DWORD *)&v213[22] = 223;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i URL not present.  URL is mandatory!", buf, 0x22u);
      }

      id v91 = objc_alloc((Class)NSError);
      uint64_t v92 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v216 = NSLocalizedDescriptionKey;
      id v25 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      *(void *)buf = v25;
      *(void *)int v213 = &off_10031AC80;
      CFStringRef v217 = @"Line";
      CFStringRef v218 = @"Method";
      id v26 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_getVAS:lastInSequence:error:")];
      *(void *)&v213[8] = v26;
      CFStringRef v219 = (const __CFString *)NSDebugDescriptionErrorKey;
      id v24 = (id)v92;
      id v93 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_getVAS:lastInSequence:error:"), 224];
      *(void *)&v213[16] = v93;
      uint64_t v94 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v216 count:4];
      id v27 = [v91 initWithDomain:v92 code:10 userInfo:v94];

      goto LABEL_63;
    }
    if (v20)
    {
      if ((unint64_t)[v20 length] >= 0x41)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v65 = NFLogGetLogger();
        if (v65)
        {
          id v66 = (void (*)(uint64_t, const char *, ...))v65;
          BOOL v67 = object_getClass(a1);
          BOOL v68 = class_isMetaClass(v67);
          int v69 = object_getClassName(a1);
          v171 = sel_getName("_getVAS:lastInSequence:error:");
          uint64_t v70 = 45;
          if (v68) {
            uint64_t v70 = 43;
          }
          v66(3, "%c[%{public}s %{public}s]:%i URL length is greater than 64bytes!", v70, v69, v171, 232);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v71 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          int v72 = object_getClass(a1);
          if (class_isMetaClass(v72)) {
            int v73 = 43;
          }
          else {
            int v73 = 45;
          }
          uint64_t v74 = object_getClassName(a1);
          id v75 = sel_getName("_getVAS:lastInSequence:error:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v73;
          *(_WORD *)int v213 = 2082;
          *(void *)&v213[2] = v74;
          *(_WORD *)&v213[10] = 2082;
          *(void *)&v213[12] = v75;
          *(_WORD *)&v213[20] = 1024;
          *(_DWORD *)&v213[22] = 232;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i URL length is greater than 64bytes!", buf, 0x22u);
        }

        id v76 = objc_alloc((Class)NSError);
        uint64_t v77 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v216 = NSLocalizedDescriptionKey;
        id v25 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        *(void *)buf = v25;
        *(void *)int v213 = &off_10031AC98;
        CFStringRef v217 = @"Line";
        CFStringRef v218 = @"Method";
        id v26 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_getVAS:lastInSequence:error:")];
        *(void *)&v213[8] = v26;
        CFStringRef v219 = (const __CFString *)NSDebugDescriptionErrorKey;
        id v24 = (id)v77;
        id v78 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_getVAS:lastInSequence:error:"), 233];
        *(void *)&v213[16] = v78;
        int v79 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v216 count:4];
        id v27 = [v76 initWithDomain:v77 code:10 userInfo:v79];

        goto LABEL_63;
      }
      *(_WORD *)buf = 10655;
      id buf[2] = [v20 length];
      [v13 appendBytes:buf length:3];
      [v13 appendData:v20];
    }
    unsigned __int8 v205 = [v13 length];
    id v24 = [objc_alloc((Class)NSMutableData) initWithBytes:&v202 length:5];
    [v24 appendData:v13];
    [v24 appendBytes:&v201 length:1];
    uint64_t v34 = (void *)*((void *)a1 + 4);
    id v35 = (void *)*((void *)a1 + 2);
    id __buf = 0;
    id v36 = v35;
    id v37 = v34;
    sub_100195A20(v37, v24, v36, &__buf);
    id v26 = (id)objc_claimAutoreleasedReturnValue();
    id v25 = __buf;

    if ((unint64_t)[v26 length] >= 2 && !v25)
    {
      id v38 = +[NFResponseAPDU responseWithData:v26];
      int v28 = objc_opt_new();
      uint64_t v39 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [v38 status]);
      [v28 setStatusCode:v39];

      id v7 = v186;
      if ([v38 status] == 36864)
      {
        uint64_t v40 = [(NFVASRequest *)v10 terminalProtocol];
        id v41 = v24;
        unsigned int v42 = [v40 unsignedCharValue];

        BOOL v43 = v42 == 1;
        id v24 = v41;
        if (v43)
        {
          uint64_t v44 = [v26 subdataWithRange:0, [v26 length] - 2];
          unsigned __int8 v45 = +[NFTLV TLVWithData:v44];

          if ([v45 tag] == 112)
          {
            unsigned int v46 = [v45 childWithTag:40743];
            BOOL v47 = v46;
            if (v46)
            {
              uint64_t v48 = [v46 value];
            }
            else
            {
              uint64_t v48 = objc_opt_new();
            }
            BOOL v101 = (void *)v48;
            [v28 setVasData:v48];

            id v102 = [v45 childWithTag:40746];

            uint64_t v183 = v102;
            if (v102)
            {
              uint64_t v103 = [v102 value];
            }
            else
            {
              uint64_t v103 = objc_opt_new();
            }
            uint64_t v104 = (void *)v103;
            [v28 setToken:v103];

            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v105 = NFLogGetLogger();
            long long v185 = v45;
            if (v105)
            {
              id v106 = (void (*)(uint64_t, const char *, ...))v105;
              v107 = object_getClass(v190);
              BOOL v179 = class_isMetaClass(v107);
              int v177 = object_getClassName(v190);
              uint64_t v108 = sel_getName("_getVAS:lastInSequence:error:");
              int v109 = [v28 vasData];
              __int16 v110 = [v28 token];
              __int16 v173 = v108;
              unsigned __int8 v45 = v185;
              uint64_t v111 = 45;
              if (v179) {
                uint64_t v111 = 43;
              }
              v106(6, "%c[%{public}s %{public}s]:%i Rx Data: %{public}@  Rx token:%{public}@", v111, v177, v173, 283, v109, v110);

              id v7 = v186;
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            __int16 v112 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v113 = object_getClass(v190);
              if (class_isMetaClass(v113)) {
                int v114 = 43;
              }
              else {
                int v114 = 45;
              }
              int v180 = v114;
              BOOL v178 = object_getClassName(v190);
              id v115 = sel_getName("_getVAS:lastInSequence:error:");
              id v116 = [v28 vasData];
              uint64_t v117 = [v28 token];
              *(_DWORD *)buf = 67110402;
              *(_DWORD *)&uint8_t buf[4] = v180;
              *(_WORD *)int v213 = 2082;
              *(void *)&v213[2] = v178;
              *(_WORD *)&v213[10] = 2082;
              *(void *)&v213[12] = v115;
              id v7 = v186;
              *(_WORD *)&v213[20] = 1024;
              *(_DWORD *)&v213[22] = 283;
              *(_WORD *)&v213[26] = 2114;
              *(void *)&v213[28] = v116;
              __int16 v214 = 2114;
              BOOL v215 = v117;
              _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Rx Data: %{public}@  Rx token:%{public}@", buf, 0x36u);

              unsigned __int8 v45 = v185;
            }
          }
          id v24 = v41;
        }
      }

      id v27 = 0;
      id v25 = 0;
      goto LABEL_81;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v49 = NFLogGetLogger();
    if (v49)
    {
      int v50 = (void (*)(uint64_t, const char *, ...))v49;
      id v51 = v24;
      BOOL v52 = object_getClass(v190);
      BOOL v53 = class_isMetaClass(v52);
      int v54 = object_getClassName(v190);
      uint64_t v55 = sel_getName("_getVAS:lastInSequence:error:");
      id v56 = [v25 description];
      uint64_t v170 = v55;
      id v24 = v51;
      uint64_t v57 = 45;
      if (v53) {
        uint64_t v57 = 43;
      }
      v50(3, "%c[%{public}s %{public}s]:%i Transceive error: %{public}@", v57, v54, v170, 254, v56);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v58 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      id v59 = v24;
      id v60 = object_getClass(v190);
      if (class_isMetaClass(v60)) {
        int v61 = 43;
      }
      else {
        int v61 = 45;
      }
      uint64_t v62 = object_getClassName(v190);
      id v63 = sel_getName("_getVAS:lastInSequence:error:");
      uint64_t v64 = [v25 description];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v61;
      *(_WORD *)int v213 = 2082;
      *(void *)&v213[2] = v62;
      id v24 = v59;
      *(_WORD *)&v213[10] = 2082;
      *(void *)&v213[12] = v63;
      *(_WORD *)&v213[20] = 1024;
      *(_DWORD *)&v213[22] = 254;
      *(_WORD *)&v213[26] = 2114;
      *(void *)&v213[28] = v64;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Transceive error: %{public}@", buf, 0x2Cu);
    }
    if ([v25 code] != (id)64)
    {
      id v182 = objc_alloc((Class)NSError);
      uint64_t v95 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v216 = NSLocalizedDescriptionKey;
      long long v184 = +[NSString stringWithUTF8String:"Tag Error"];
      *(void *)buf = v184;
      *(void *)int v213 = v25;
      CFStringRef v217 = (const __CFString *)NSUnderlyingErrorKey;
      CFStringRef v218 = @"Line";
      *(void *)&v213[8] = &off_10031ACB0;
      CFStringRef v219 = @"Method";
      id v96 = v24;
      id v97 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("_getVAS:lastInSequence:error:")];
      *(void *)&v213[16] = v97;
      NSErrorUserInfoKey v220 = NSDebugDescriptionErrorKey;
      id v98 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("_getVAS:lastInSequence:error:"), 256];
      *(void *)&v213[24] = v98;
      uint64_t v99 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v216 count:5];
      uint64_t v100 = (void *)v95;
      id v27 = [v182 initWithDomain:v95 code:29 userInfo:v99];

      id v24 = v96;
LABEL_63:
      int v28 = 0;
      goto LABEL_64;
    }
    id v27 = v25;
    int v28 = 0;
    id v25 = v27;
LABEL_64:
    id v7 = v186;
LABEL_81:
    uint64_t v23 = v188;
    id v22 = v189;
LABEL_82:

    id v118 = v27;
    [v28 setRequest:v10];
    a1 = v190;
    uint64_t v119 = +[NSNumber numberWithUnsignedChar:v190[8]];
    [v28 setMobileCapabilities:v119];

    if (v118) {
      break;
    }
    int v120 = [v28 asDictionary];
    [v7 addObject:v120];

    if (v187 == ++v8) {
      goto LABEL_84;
    }
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v150 = NFLogGetLogger();
  if (v150)
  {
    char v151 = (void (*)(uint64_t, const char *, ...))v150;
    int v152 = object_getClass(v190);
    BOOL v153 = class_isMetaClass(v152);
    uint64_t v154 = object_getClassName(v190);
    long long v176 = sel_getName("performRequests:responses:");
    uint64_t v155 = 45;
    if (v153) {
      uint64_t v155 = 43;
    }
    v151(3, "%c[%{public}s %{public}s]:%i GetVasData failed", v155, v154, v176, 317);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v156 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
  {
    id v157 = object_getClass(v190);
    if (class_isMetaClass(v157)) {
      int v158 = 43;
    }
    else {
      int v158 = 45;
    }
    int v159 = object_getClassName(v190);
    __int16 v160 = sel_getName("performRequests:responses:");
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v158;
    *(_WORD *)int v213 = 2082;
    *(void *)&v213[2] = v159;
    *(_WORD *)&v213[10] = 2082;
    *(void *)&v213[12] = v160;
    *(_WORD *)&v213[20] = 1024;
    *(_DWORD *)&v213[22] = 317;
    _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i GetVasData failed", buf, 0x22u);
  }

  id v161 = objc_alloc((Class)NSError);
  __int16 v162 = +[NSString stringWithUTF8String:"nfcd"];
  id v163 = [v118 code];
  v206[0] = NSLocalizedDescriptionKey;
  if ((uint64_t)[v118 code] > 70) {
    uint64_t v164 = 71;
  }
  else {
    uint64_t v164 = (uint64_t)[v118 code];
  }
  int v165 = +[NSString stringWithUTF8String:off_100302EE8[v164]];
  v207[0] = v165;
  v207[1] = v118;
  v206[1] = NSUnderlyingErrorKey;
  v206[2] = @"Line";
  v207[2] = &off_10031ACF8;
  v206[3] = @"Method";
  id v166 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("performRequests:responses:")];
  v207[3] = v166;
  void v206[4] = NSDebugDescriptionErrorKey;
  id v167 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("performRequests:responses:"), 318];
  void v207[4] = v167;
  uint64_t v168 = +[NSDictionary dictionaryWithObjects:v207 forKeys:v206 count:5];
  id v121 = [v161 initWithDomain:v162 code:v163 userInfo:v168];

  id v7 = v186;
LABEL_98:

LABEL_99:

  return v121;
}

void sub_10009011C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_10009012C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

id sub_1000901A4(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  id v9 = a5;
  id v10 = a2;
  self;
  uint64_t v11 = objc_opt_new();
  uint64_t v12 = v11;
  if (v11)
  {
    objc_storeStrong((id *)(v11 + 16), a2);

    *(_DWORD *)(v12 + _Block_object_dispose(&STACK[0x2B0], 8) = a3;
    objc_storeStrong((id *)(v12 + 24), a5);

    *(_DWORD *)(v12 + 12) = a4;
  }
  else
  {
  }

  return (id)v12;
}

void sub_100090EDC(uint64_t a1)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  id v2 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = v2 + 43;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  uint64_t v18 = sub_100091184;
  BOOL v19 = &unk_1003015D8;
  id v20 = v2;
  id v21 = &v22;
  id v4 = v17;
  os_unfair_lock_lock(v3);
  v18((uint64_t)v4);
  os_unfair_lock_unlock(v3);

  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    Class Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class)) {
      uint64_t v7 = 43;
    }
    else {
      uint64_t v7 = 45;
    }
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    if (*((unsigned char *)v23 + 24)) {
      id v10 = "Y";
    }
    else {
      id v10 = "N";
    }
    Logger(5, "%c[%{public}s %{public}s]:%i Assertion timer expired; connected=%{public}s",
      v7,
      ClassName,
      Name,
      127,
      v10);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12)) {
      int v13 = 43;
    }
    else {
      int v13 = 45;
    }
    id v14 = object_getClassName(*(id *)(a1 + 32));
    id v15 = sel_getName(*(SEL *)(a1 + 40));
    if (*((unsigned char *)v23 + 24)) {
      uint64_t v16 = "Y";
    }
    else {
      uint64_t v16 = "N";
    }
    *(_DWORD *)buf = 67110146;
    int v27 = v13;
    __int16 v28 = 2082;
    int v29 = v14;
    __int16 v30 = 2082;
    id v31 = v15;
    __int16 v32 = 1024;
    int v33 = 127;
    __int16 v34 = 2082;
    id v35 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Assertion timer expired; connected=%{public}s",
      buf,
      0x2Cu);
  }

  if (!*((unsigned char *)v23 + 24)) {
    [*(id *)(a1 + 32) _didLoseTarget:0 suspendAssertion:0];
  }
  _Block_object_dispose(&v22, 8);
}

void sub_100091158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100091184(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 184);
  *(void *)(v2 + 184) = 0;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(unsigned char *)(*(void *)(a1 + 32) + 169);
}

uint64_t sub_1000911D4(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceNow:*(double *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 184);
  *(void *)(v3 + 184) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100091338(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 169) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 184);
  *(void *)(v2 + 184) = 0;

  [*(id *)(*(void *)(a1 + 32) + 176) stopTimer];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 176);
  *(void *)(v4 + 176) = 0;
}

id sub_100091400(void *a1, char a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = v7;
  if (a1)
  {
    if (a2)
    {
      id v9 = [v7 length];
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      uint64_t v11 = (void (*)(uint64_t, const char *, ...))Logger;
      if (v9)
      {
        if (Logger)
        {
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          uint64_t v15 = 45;
          if (isMetaClass) {
            uint64_t v15 = 43;
          }
          v11(6, "%c[%{public}s %{public}s]:%i ECP broadcast enabled", v15, ClassName, Name, 180);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v16 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          id v17 = object_getClass(a1);
          if (class_isMetaClass(v17)) {
            int v18 = 43;
          }
          else {
            int v18 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v32 = v18;
          __int16 v33 = 2082;
          __int16 v34 = object_getClassName(a1);
          __int16 v35 = 2082;
          id v36 = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          __int16 v37 = 1024;
          int v38 = 180;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ECP broadcast enabled", buf, 0x22u);
        }

        uint64_t v19 = +[NFRoutingConfig hostCardEmulationVASBroadcastWithFrame:v8 lpcdEnable:0 fieldDetect:1 pollDuration:a4];
      }
      else
      {
        if (Logger)
        {
          id v20 = object_getClass(a1);
          BOOL v21 = class_isMetaClass(v20);
          uint64_t v22 = object_getClassName(a1);
          int v29 = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          uint64_t v23 = 45;
          if (v21) {
            uint64_t v23 = 43;
          }
          v11(6, "%c[%{public}s %{public}s]:%i HCE+FD enabled", v23, v22, v29, 187);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          char v25 = object_getClass(a1);
          if (class_isMetaClass(v25)) {
            int v26 = 43;
          }
          else {
            int v26 = 45;
          }
          *(_DWORD *)buf = 67109890;
          int v32 = v26;
          __int16 v33 = 2082;
          __int16 v34 = object_getClassName(a1);
          __int16 v35 = 2082;
          id v36 = sel_getName("_initialRoutingConfigWithEmulation:ecp:pollDurationInMS:");
          __int16 v37 = 1024;
          int v38 = 187;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i HCE+FD enabled", buf, 0x22u);
        }

        uint64_t v19 = +[NFRoutingConfig hostCardEmulationWithFieldDetect:1];
      }
    }
    else
    {
      v30.receiver = a1;
      v30.super_class = (Class)_NFHCESession;
      uint64_t v19 = [super initialRoutingConfig];
    }
    a1 = (void *)v19;
  }

  return a1;
}

void sub_100091A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100091A74(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 184) != 0;
  return result;
}

uint64_t sub_1000923B8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 169) = 0;
  return result;
}

void sub_100092810(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_100092824(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v4 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 64));
    id v9 = [*(id *)(a1 + 32) clientName];
    uint64_t v10 = 45;
    if (isMetaClass) {
      uint64_t v10 = 43;
    }
    v4(6, "%c[%{public}s %{public}s]:%i %{public}@", v10, ClassName, Name, 337, v9);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v12)) {
      int v13 = 43;
    }
    else {
      int v13 = 45;
    }
    id v14 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v15 = sel_getName(*(SEL *)(a1 + 64));
    uint64_t v16 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v56 = v13;
    __int16 v57 = 2082;
    id v58 = v14;
    __int16 v59 = 2082;
    id v60 = v15;
    __int16 v61 = 1024;
    int v62 = 337;
    __int16 v63 = 2114;
    uint64_t v64 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    __int16 v37 = +[_NFHardwareManager sharedHardwareManager];
    id v38 = [v37 setRoutingConfig:*(void *)(a1 + 40)];

    __int16 v33 = sub_1001AED74();
    sub_1001AF914((uint64_t)v33);
    uint64_t v39 = *(void *)(a1 + 48);
    if (v39) {
      (*(void (**)(uint64_t, void))(v39 + 16))(v39, 0);
    }
    uint64_t v40 = NFLogGetLogger();
    if (v40)
    {
      id v41 = (void (*)(uint64_t, const char *, ...))v40;
      unsigned int v42 = object_getClass(WeakRetained);
      BOOL v43 = class_isMetaClass(v42);
      uint64_t v44 = object_getClassName(WeakRetained);
      unsigned __int8 v45 = sel_getName(*(SEL *)(a1 + 64));
      unsigned int v46 = [*(id *)(a1 + 32) clientName];
      uint64_t v47 = 45;
      if (v43) {
        uint64_t v47 = 43;
      }
      v41(6, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", v47, v44, v45, 348, v46);
    }
    __int16 v34 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = object_getClass(WeakRetained);
      if (class_isMetaClass(v48)) {
        int v49 = 43;
      }
      else {
        int v49 = 45;
      }
      int v50 = object_getClassName(WeakRetained);
      id v51 = sel_getName(*(SEL *)(a1 + 64));
      BOOL v52 = [*(id *)(a1 + 32) clientName];
      *(_DWORD *)buf = 67110146;
      int v56 = v49;
      __int16 v57 = 2082;
      id v58 = v50;
      __int16 v59 = 2082;
      id v60 = v51;
      __int16 v61 = 1024;
      int v62 = 348;
      __int16 v63 = 2112;
      uint64_t v64 = v52;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i NFC emulation mode terminated: %@", buf, 0x2Cu);
    }
    goto LABEL_24;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v17 = NFLogGetLogger();
  if (v17)
  {
    int v18 = (void (*)(uint64_t, const char *, ...))v17;
    uint64_t v19 = object_getClass(*(id *)(a1 + 32));
    BOOL v20 = class_isMetaClass(v19);
    BOOL v21 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v22 = sel_getName(*(SEL *)(a1 + 64));
    uint64_t v23 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v24 = 45;
    if (v20) {
      uint64_t v24 = 43;
    }
    v18(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v24, v21, v22, 339, v23);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  char v25 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    int v26 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v26)) {
      int v27 = 43;
    }
    else {
      int v27 = 45;
    }
    __int16 v28 = object_getClassName(*(id *)(a1 + 32));
    int v29 = sel_getName(*(SEL *)(a1 + 64));
    objc_super v30 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)buf = 67110146;
    int v56 = v27;
    __int16 v57 = 2082;
    id v58 = v28;
    __int16 v59 = 2082;
    id v60 = v29;
    __int16 v61 = 1024;
    int v62 = 339;
    __int16 v63 = 2114;
    uint64_t v64 = v30;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v31 = *(void *)(a1 + 48);
  if (v31)
  {
    id v32 = objc_alloc((Class)NSError);
    __int16 v33 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v53 = NSLocalizedDescriptionKey;
    __int16 v34 = +[NSString stringWithUTF8String:"Session not active"];
    int v54 = v34;
    __int16 v35 = +[NSDictionary dictionaryWithObjects:&v54 forKeys:&v53 count:1];
    id v36 = [v32 initWithDomain:v33 code:54 userInfo:v35];
    (*(void (**)(uint64_t, id))(v31 + 16))(v31, v36);

LABEL_24:
  }
}

uint64_t sub_100092FD8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 169) = 1;
  return result;
}

void sub_100092FF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 length];
  if (!v6 && v7)
  {
    if ([*(id *)(a1 + 32) validateReceivedAPDU:v5])
    {
      id v8 = [*(id *)(a1 + 32) remoteObject];
      [v8 didReceiveAPDU:v5];
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v10 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(*(id *)(a1 + 32));
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(*(id *)(a1 + 32));
        Name = sel_getName(*(SEL *)(a1 + 40));
        uint64_t v13 = 45;
        if (isMetaClass) {
          uint64_t v13 = 43;
        }
        v10(3, "%c[%{public}s %{public}s]:%i APDU disallowed: %{public}@", v13, ClassName, Name, 386, v5);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v14 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v14)) {
          int v15 = 43;
        }
        else {
          int v15 = 45;
        }
        uint64_t v16 = object_getClassName(*(id *)(a1 + 32));
        uint64_t v17 = sel_getName(*(SEL *)(a1 + 40));
        *(_DWORD *)buf = 67110146;
        int v21 = v15;
        __int16 v22 = 2082;
        uint64_t v23 = v16;
        __int16 v24 = 2082;
        char v25 = v17;
        __int16 v26 = 1024;
        int v27 = 386;
        __int16 v28 = 2114;
        id v29 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i APDU disallowed: %{public}@", buf, 0x2Cu);
      }
    }
  }
  sub_10002041C(*(void *)(*(void *)(a1 + 32) + 192), v6);
}

void sub_1000936A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v8(3, "%c[%{public}s %{public}s]:%i error=%{public}@", v11, ClassName, Name, 422, v6);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      int v15 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v16 = sel_getName(*(SEL *)(a1 + 40));
      *(_DWORD *)buf = 67110146;
      int v20 = v14;
      __int16 v21 = 2082;
      __int16 v22 = v15;
      __int16 v23 = 2082;
      __int16 v24 = v16;
      __int16 v25 = 1024;
      int v26 = 422;
      __int16 v27 = 2114;
      id v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i error=%{public}@", buf, 0x2Cu);
    }
  }
  else
  {
    uint64_t v12 = +[_NFHardwareManager sharedHardwareManager];
    sub_1001DE3AC((id *)&v12->isa, *(void **)(a1 + 32), 1, 0, v5, 1);
  }
}

void sub_100093994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void *sub_1000939B8(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 169))
  {
    *(unsigned char *)(*(void *)(result[5] + 8) + 24) = 1;
    uint64_t v1 = result[4];
  }
  *(unsigned char *)(v1 + 169) = 0;
  *(unsigned char *)(*(void *)(result[6] + 8) + 24) = *(void *)(result[4] + 184) != 0;
  return result;
}

void sub_100093B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void *sub_100093BB0(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 169))
  {
    *(unsigned char *)(*(void *)(result[5] + 8) + 24) = 1;
    uint64_t v1 = result[4];
  }
  *(unsigned char *)(v1 + 169) = 0;
  *(unsigned char *)(*(void *)(result[6] + 8) + 24) = *(void *)(result[4] + 184) != 0;
  return result;
}

id sub_100094360(uint64_t a1)
{
  return [*(id *)(a1 + 32) _syncStartEmulationWithCompletion:*(void *)(a1 + 40)];
}

void sub_1000944E4(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class)) {
      uint64_t v5 = 43;
    }
    else {
      uint64_t v5 = 45;
    }
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    id v8 = [*(id *)(a1 + 32) clientName];
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v5, ClassName, Name, 512, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v13 = sel_getName(*(SEL *)(a1 + 56));
    int v14 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)unsigned int v123 = v11;
    *(_WORD *)&v123[4] = 2082;
    *(void *)&v123[6] = v12;
    __int16 v124 = 2082;
    BOOL v125 = v13;
    __int16 v126 = 1024;
    int v127 = 512;
    __int16 v128 = 2114;
    id v129 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15)
  {
    uint64_t v16 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v16)) {
      uint64_t v17 = 43;
    }
    else {
      uint64_t v17 = 45;
    }
    int v18 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v19 = sel_getName(*(SEL *)(a1 + 56));
    v15(6, "%c[%{public}s %{public}s]:%i %{public}@", v17, v18, v19, 513, *(void *)(a1 + 40));
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v20 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v21 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v21)) {
      int v22 = 43;
    }
    else {
      int v22 = 45;
    }
    __int16 v23 = object_getClassName(*(id *)(a1 + 32));
    __int16 v24 = sel_getName(*(SEL *)(a1 + 56));
    __int16 v25 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)unsigned int v123 = v22;
    *(_WORD *)&v123[4] = 2082;
    *(void *)&v123[6] = v23;
    __int16 v124 = 2082;
    BOOL v125 = v24;
    __int16 v126 = 1024;
    int v127 = 513;
    __int16 v128 = 2114;
    id v129 = v25;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }

  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26)
    {
      __int16 v27 = (id *)(a1 + 32);
      id v28 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v28)) {
        uint64_t v29 = 43;
      }
      else {
        uint64_t v29 = 45;
      }
      objc_super v30 = object_getClassName(*v27);
      uint64_t v31 = sel_getName(*(SEL *)(a1 + 56));
      id v32 = [*v27 sessionUID];
      v26(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v29, v30, v31, 515, v32);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v33 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      __int16 v34 = (id *)(a1 + 32);
      __int16 v35 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v35)) {
        int v36 = 43;
      }
      else {
        int v36 = 45;
      }
      __int16 v37 = object_getClassName(*v34);
      id v38 = sel_getName(*(SEL *)(a1 + 56));
      uint64_t v39 = [*v34 sessionUID];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)unsigned int v123 = v36;
      *(_WORD *)&v123[4] = 2082;
      *(void *)&v123[6] = v37;
      __int16 v124 = 2082;
      BOOL v125 = v38;
      __int16 v126 = 1024;
      int v127 = 515;
      __int16 v128 = 2114;
      id v129 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v40 = *(void *)(a1 + 48);
    if (v40)
    {
      id v41 = objc_alloc((Class)NSError);
      unsigned int v42 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v120 = NSLocalizedDescriptionKey;
      BOOL v43 = +[NSString stringWithUTF8String:"Session not active"];
      id v121 = v43;
      uint64_t v44 = +[NSDictionary dictionaryWithObjects:&v121 forKeys:&v120 count:1];
      id v45 = [v41 initWithDomain:v42 code:54 userInfo:v44];
      (*(void (**)(uint64_t, id))(v40 + 16))(v40, v45);
    }
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ([*(id *)(a1 + 40) length])
      {
        unsigned int v46 = *(os_unfair_lock_s **)(a1 + 32);
        uint64_t v47 = v46 + 43;
        v113[0] = _NSConcreteStackBlock;
        v113[1] = 3221225472;
        v113[2] = sub_10009539C;
        v113[3] = &unk_1003031A8;
        v113[4] = v46;
        os_unfair_lock_lock(v46 + 43);
        uint64_t v48 = sub_10009539C((uint64_t)v113);
        os_unfair_lock_unlock(v47);
        if (v48)
        {
          (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
        }
        else
        {
          uint64_t v85 = NFSharedSignpostLog();
          if (os_signpost_enabled(v85))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v85, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_WRITE", (const char *)&unk_100286819, buf, 2u);
          }

          unsigned int v86 = [*(id *)(*(void *)(a1 + 32) + 160) sendAPDU:*(void *)(a1 + 40)];
          id v87 = NFSharedSignpostLog();
          if (os_signpost_enabled(v87))
          {
            id v88 = [*(id *)(a1 + 40) length];
            int v89 = *(unsigned __int8 *)(a1 + 64);
            *(_DWORD *)buf = 134349568;
            *(void *)unsigned int v123 = v88;
            *(_WORD *)&v123[8] = 1026;
            *(_DWORD *)&v123[10] = v86;
            __int16 v124 = 1026;
            LODWORD(v125) = v89;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_WRITE", "len=%{public,signpost.description:attribute}lu, status=%{public,signpost.description:attribute}d, readOnCompletion=%{public,signpost.description:attribute}d", buf, 0x18u);
          }

          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          int v90 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v90)
          {
            id v91 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v91)) {
              uint64_t v92 = 43;
            }
            else {
              uint64_t v92 = 45;
            }
            id v93 = object_getClassName(*(id *)(a1 + 32));
            uint64_t v94 = sel_getName(*(SEL *)(a1 + 56));
            v90(6, "%c[%{public}s %{public}s]:%i isSent: %d", v92, v93, v94, 544, v86);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v95 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            id v96 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v96)) {
              int v97 = 43;
            }
            else {
              int v97 = 45;
            }
            id v98 = object_getClassName(*(id *)(a1 + 32));
            uint64_t v99 = sel_getName(*(SEL *)(a1 + 56));
            *(_DWORD *)buf = 67110146;
            *(_DWORD *)unsigned int v123 = v97;
            *(_WORD *)&v123[4] = 2082;
            *(void *)&v123[6] = v98;
            __int16 v124 = 2082;
            BOOL v125 = v99;
            __int16 v126 = 1024;
            int v127 = 544;
            __int16 v128 = 1024;
            LODWORD(v129) = v86;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i isSent: %d", buf, 0x28u);
          }

          if (v86)
          {
            uint64_t v100 = *(void *)(*(void *)(a1 + 32) + 192);
            unsigned int v101 = [*(id *)(a1 + 40) length];
            if (v100) {
              *(void *)(v100 + 8) += v101;
            }
            uint64_t v102 = *(void *)(*(void *)(a1 + 32) + 192);
            if (v102) {
              ++*(_DWORD *)(v102 + 24);
            }
            (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
            if (*(unsigned char *)(a1 + 64))
            {
              objc_initWeak((id *)buf, *(id *)(a1 + 32));
              uint64_t v103 = *(void **)(a1 + 32);
              v111[0] = _NSConcreteStackBlock;
              v111[1] = 3221225472;
              v111[2] = sub_1000954C0;
              v111[3] = &unk_1003031D0;
              objc_copyWeak(v112, (id *)buf);
              uint64_t v104 = *(void **)(a1 + 56);
              v111[4] = *(void *)(a1 + 32);
              v112[1] = v104;
              [v103 _asyncReadWithCompletion:v111];
              objc_destroyWeak(v112);
              objc_destroyWeak((id *)buf);
            }
          }
          else
          {
            uint64_t v105 = *(void *)(a1 + 48);
            id v106 = objc_alloc((Class)NSError);
            v107 = +[NSString stringWithUTF8String:"nfcd"];
            NSErrorUserInfoKey v114 = NSLocalizedDescriptionKey;
            uint64_t v108 = +[NSString stringWithUTF8String:"Tag Error"];
            id v115 = v108;
            int v109 = +[NSDictionary dictionaryWithObjects:&v115 forKeys:&v114 count:1];
            id v110 = [v106 initWithDomain:v107 code:29 userInfo:v109];
            (*(void (**)(uint64_t, id))(v105 + 16))(v105, v110);
          }
        }
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v67)
        {
          BOOL v68 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v68)) {
            uint64_t v69 = 43;
          }
          else {
            uint64_t v69 = 45;
          }
          uint64_t v70 = object_getClassName(*(id *)(a1 + 32));
          id v71 = sel_getName(*(SEL *)(a1 + 56));
          v67(3, "%c[%{public}s %{public}s]:%i Zero length data", v69, v70, v71, 524);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v72 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        {
          int v73 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v73)) {
            int v74 = 43;
          }
          else {
            int v74 = 45;
          }
          id v75 = object_getClassName(*(id *)(a1 + 32));
          id v76 = sel_getName(*(SEL *)(a1 + 56));
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)unsigned int v123 = v74;
          *(_WORD *)&v123[4] = 2082;
          *(void *)&v123[6] = v75;
          __int16 v124 = 2082;
          BOOL v125 = v76;
          __int16 v126 = 1024;
          int v127 = 524;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Zero length data", buf, 0x22u);
        }

        uint64_t v77 = *(void *)(a1 + 48);
        id v78 = objc_alloc((Class)NSError);
        int v79 = +[NSString stringWithUTF8String:"nfcd"];
        v116[0] = NSLocalizedDescriptionKey;
        uint64_t v80 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        v117[0] = v80;
        v117[1] = &off_10031AD40;
        v116[1] = @"Line";
        v116[2] = @"Method";
        id v81 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
        v117[2] = v81;
        v116[3] = NSDebugDescriptionErrorKey;
        id v82 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 525];
        v117[3] = v82;
        BOOL v83 = +[NSDictionary dictionaryWithObjects:v117 forKeys:v116 count:4];
        id v84 = [v78 initWithDomain:v79 code:10 userInfo:v83];
        (*(void (**)(uint64_t, id))(v77 + 16))(v77, v84);
      }
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v49)
      {
        int v50 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v50)) {
          uint64_t v51 = 43;
        }
        else {
          uint64_t v51 = 45;
        }
        BOOL v52 = object_getClassName(*(id *)(a1 + 32));
        NSErrorUserInfoKey v53 = sel_getName(*(SEL *)(a1 + 56));
        v49(3, "%c[%{public}s %{public}s]:%i Invalid data", v51, v52, v53, 518);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v54 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        uint64_t v55 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v55)) {
          int v56 = 43;
        }
        else {
          int v56 = 45;
        }
        __int16 v57 = object_getClassName(*(id *)(a1 + 32));
        id v58 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)unsigned int v123 = v56;
        *(_WORD *)&v123[4] = 2082;
        *(void *)&v123[6] = v57;
        __int16 v124 = 2082;
        BOOL v125 = v58;
        __int16 v126 = 1024;
        int v127 = 518;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid data", buf, 0x22u);
      }

      uint64_t v59 = *(void *)(a1 + 48);
      id v60 = objc_alloc((Class)NSError);
      __int16 v61 = +[NSString stringWithUTF8String:"nfcd"];
      v118[0] = NSLocalizedDescriptionKey;
      int v62 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      v119[0] = v62;
      v119[1] = &off_10031AD28;
      v118[1] = @"Line";
      v118[2] = @"Method";
      id v63 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
      v119[2] = v63;
      v118[3] = NSDebugDescriptionErrorKey;
      id v64 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 519];
      v119[3] = v64;
      uint64_t v65 = +[NSDictionary dictionaryWithObjects:v119 forKeys:v118 count:4];
      id v66 = [v60 initWithDomain:v61 code:10 userInfo:v65];
      (*(void (**)(uint64_t, id))(v59 + 16))(v59, v66);
    }
  }
}

void sub_100095378(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

id sub_10009539C(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 168))
  {
    id v1 = objc_alloc((Class)NSError);
    uint64_t v2 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    uint64_t v3 = +[NSString stringWithUTF8String:"Pending"];
    id v8 = v3;
    uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    id v5 = [v1 initWithDomain:v2 code:1 userInfo:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_1000954C0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v4 = [*(id *)(a1 + 32) validateReceivedAPDU:v6];
    if (v6)
    {
      if (v4)
      {
        id v5 = [WeakRetained remoteObject];
        [v5 didReceiveAPDU:v6];
      }
    }
  }
}

void sub_10009561C(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class)) {
      uint64_t v5 = 43;
    }
    else {
      uint64_t v5 = 45;
    }
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    id v8 = [*(id *)(a1 + 32) clientName];
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v5, ClassName, Name, 581, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    uint64_t v12 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v13 = sel_getName(*(SEL *)(a1 + 48));
    int v14 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v12;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v13;
    __int16 v64 = 1024;
    int v65 = 581;
    __int16 v66 = 2114;
    BOOL v67 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
    {
      uint64_t v16 = (id *)(a1 + 32);
      uint64_t v17 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v17)) {
        uint64_t v18 = 43;
      }
      else {
        uint64_t v18 = 45;
      }
      uint64_t v19 = object_getClassName(*v16);
      int v20 = sel_getName(*(SEL *)(a1 + 48));
      __int16 v21 = [*v16 sessionUID];
      v15(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v18, v19, v20, 583, v21);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int16 v23 = (id *)(a1 + 32);
      __int16 v24 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v24)) {
        int v25 = 43;
      }
      else {
        int v25 = 45;
      }
      int v26 = object_getClassName(*v23);
      __int16 v27 = sel_getName(*(SEL *)(a1 + 48));
      id v28 = [*v23 sessionUID];
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v26;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v27;
      __int16 v64 = 1024;
      int v65 = 583;
      __int16 v66 = 2114;
      BOOL v67 = v28;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v29 = *(void *)(a1 + 40);
    if (v29)
    {
      id v30 = objc_alloc((Class)NSError);
      uint64_t v31 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v61 = NSLocalizedDescriptionKey;
      id v32 = +[NSString stringWithUTF8String:"Session not active"];
      int v62 = v32;
      __int16 v33 = +[NSDictionary dictionaryWithObjects:&v62 forKeys:&v61 count:1];
      id v34 = [v30 initWithDomain:v31 code:54 userInfo:v33];
      (*(void (**)(uint64_t, void, id))(v29 + 16))(v29, 0, v34);
    }
  }
  else
  {
    __int16 v35 = *(os_unfair_lock_s **)(a1 + 32);
    int v36 = v35 + 43;
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472;
    v60[2] = sub_100095D6C;
    v60[3] = &unk_1003031A8;
    void v60[4] = v35;
    os_unfair_lock_lock(v35 + 43);
    __int16 v37 = sub_100095D6C((uint64_t)v60);
    os_unfair_lock_unlock(v36);
    if (v37)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      id v38 = NFSharedSignpostLog();
      if (os_signpost_enabled(v38))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_READ", (const char *)&unk_100286819, buf, 2u);
      }

      uint64_t v39 = *(void **)(*(void *)(a1 + 32) + 160);
      id v59 = 0;
      uint64_t v40 = [v39 readApduAndReturnError:&v59];
      id v41 = v59;
      if (!v41)
      {
        if ([v40 length])
        {
          uint64_t v42 = *(void *)(*(void *)(a1 + 32) + 192);
          unsigned int v43 = [v40 length];
          if (v42)
          {
            *(void *)(v42 + 16) += v43;
            *(unsigned char *)(v42 + 40) = 1;
          }
        }
      }
      uint64_t v44 = NFSharedSignpostLog();
      if (os_signpost_enabled(v44))
      {
        id v45 = [v40 length];
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v45;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v41 == 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_READ", "len=%{public,signpost.description:attribute}lu, status=%{public,signpost.description:attribute}d", buf, 0x12u);
      }

      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      buf[24] = 0;
      unsigned int v46 = *(os_unfair_lock_s **)(a1 + 32);
      uint64_t v47 = v46 + 43;
      v53[0] = _NSConcreteStackBlock;
      v53[1] = 3221225472;
      int v54 = sub_100095E98;
      uint64_t v55 = &unk_100303220;
      int v56 = v46;
      id v48 = v41;
      id v57 = v48;
      id v58 = buf;
      int v49 = v53;
      os_unfair_lock_lock(v47);
      v54(v49);
      os_unfair_lock_unlock(v47);

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        int v50 = [*(id *)(a1 + 32) remoteObject];
        [v50 didDisconnectFromReader];
      }
      uint64_t v51 = NFSharedSignpostLog();
      if (os_signpost_enabled(v51))
      {
        *(_WORD *)BOOL v52 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v51, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_TARGET_LOST", "onRead", v52, 2u);
      }

      _Block_object_dispose(buf, 8);
    }
  }
}

void sub_100095D48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_100095D6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 168))
  {
    id v2 = objc_alloc((Class)NSError);
    uint64_t v3 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    unsigned int v4 = +[NSString stringWithUTF8String:"Pending"];
    uint64_t v9 = v4;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    id v6 = [v2 initWithDomain:v3 code:1 userInfo:v5];
  }
  else
  {
    id v6 = 0;
    *(unsigned char *)(v1 + 16_Block_object_dispose(&STACK[0x2B0], 8) = 1;
  }

  return v6;
}

id sub_100095E98(id result)
{
  *(unsigned char *)(*((void *)result + 4) + 16_Block_object_dispose(&STACK[0x2B0], 8) = 0;
  if (*(unsigned char *)(*((void *)result + 4) + 169))
  {
    id v1 = result;
    uint64_t result = [*((id *)result + 5) code];
    if (result == (id)28 || (uint64_t result = [*((id *)v1 + 5) code], result == (id)62))
    {
      *(unsigned char *)(*(void *)(*((void *)v1 + 6) + 8) + 24) = 1;
      *(unsigned char *)(*((void *)v1 + 4) + 169) = 0;
    }
  }
  return result;
}

void sub_100095FE4(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    NSErrorUserInfoKey v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 639, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
    int v14 = sel_getName(*(SEL *)(a1 + 48));
    int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v39 = v12;
    __int16 v40 = 2082;
    id v41 = v13;
    __int16 v42 = 2082;
    unsigned int v43 = v14;
    __int16 v44 = 1024;
    int v45 = 639;
    __int16 v46 = 2114;
    uint64_t v47 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      uint64_t v17 = (void (*)(uint64_t, const char *, ...))v16;
      uint64_t v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      int v20 = object_getClassName(*(id *)(a1 + 32));
      __int16 v21 = sel_getName(*(SEL *)(a1 + 48));
      int v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 641, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      id v28 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v39 = v26;
      __int16 v40 = 2082;
      id v41 = v27;
      __int16 v42 = 2082;
      unsigned int v43 = v28;
      __int16 v44 = 1024;
      int v45 = 641;
      __int16 v46 = 2114;
      uint64_t v47 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 40);
    if (v30)
    {
      id v31 = objc_alloc((Class)NSError);
      id v32 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
      __int16 v33 = +[NSString stringWithUTF8String:"Session not active"];
      __int16 v37 = v33;
      id v34 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      id v35 = [v31 initWithDomain:v32 code:54 userInfo:v34];
      (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v35);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _asyncReadWithCompletion:*(void *)(a1 + 40)];
  }
}

id sub_10009680C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 168))
  {
    id v2 = objc_alloc((Class)NSError);
    uint64_t v3 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    unsigned int v4 = +[NSString stringWithUTF8String:"Pending"];
    uint64_t v9 = v4;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    id v6 = [v2 initWithDomain:v3 code:1 userInfo:v5];
  }
  else
  {
    id v6 = 0;
    *(unsigned char *)(v1 + 16_Block_object_dispose(&STACK[0x2B0], 8) = 1;
  }

  return v6;
}

void sub_100096938(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  NSErrorUserInfoKey v7 = *(os_unfair_lock_s **)(a1 + 32);
  NSErrorUserInfoKey v8 = v7 + 43;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_100096C84;
  v25[3] = &unk_100301C68;
  void v25[4] = v7;
  os_unfair_lock_lock(v7 + 43);
  sub_100096C84((uint64_t)v25);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = NFSharedSignpostLog();
  if (os_signpost_enabled(v9))
  {
    id v10 = [v5 length];
    int v11 = "ERROR";
    if (!v6) {
      int v11 = "SUCCESS";
    }
    *(_DWORD *)buf = 134349314;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&buf[12] = 2082;
    *(void *)&buf[14] = v11;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_READ", "len=%{public,signpost.description:attribute}lu, status=%{public,signpost.description:attribute}s", buf, 0x16u);
  }

  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if ([v6 code] == (id)28 || objc_msgSend(v6, "code") == (id)62)
    {
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v27 = 0;
      int v12 = *(os_unfair_lock_s **)(a1 + 32);
      uint64_t v13 = v12 + 43;
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      __int16 v21 = sub_100096C98;
      int v22 = &unk_1003015D8;
      uint64_t v23 = v12;
      __int16 v24 = buf;
      int v14 = v20;
      os_unfair_lock_lock(v13);
      v21((uint64_t)v14);
      os_unfair_lock_unlock(v13);

      if (*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        int v15 = [*(id *)(a1 + 32) remoteObject];
        [v15 didDisconnectFromReader];
      }
      uint64_t v16 = NFSharedSignpostLog();
      if (os_signpost_enabled(v16))
      {
        __int16 v19 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "TAG_SESSION_TARGET_LOST", "onRead", (uint8_t *)&v19, 2u);
      }

      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
    if ([v5 length])
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 192);
      unsigned int v18 = [v5 length];
      if (v17)
      {
        *(void *)(v17 + 16) += v18;
        *(unsigned char *)(v17 + 40) = 1;
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100096C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100096C84(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 16_Block_object_dispose(&STACK[0x2B0], 8) = 0;
  return result;
}

uint64_t sub_100096C98(uint64_t result)
{
  if (*(unsigned char *)(*(void *)(result + 32) + 169))
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(result + 32) + 169) = 0;
  }
  return result;
}

void sub_100096DC0(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(Class)) {
      uint64_t v5 = 43;
    }
    else {
      uint64_t v5 = 45;
    }
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    NSErrorUserInfoKey v8 = [*(id *)(a1 + 32) clientName];
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v5, ClassName, Name, 706, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    int v12 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v13 = sel_getName(*(SEL *)(a1 + 56));
    int v14 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)uint64_t v132 = 2082;
    *(void *)&v132[2] = v12;
    *(_WORD *)&v132[10] = 2082;
    *(void *)&v132[12] = v13;
    *(_WORD *)&v132[20] = 1024;
    *(_DWORD *)&v132[22] = 706;
    *(_WORD *)&v132[26] = 2114;
    *(void *)&v132[28] = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    id v35 = +[_NFHardwareManager sharedHardwareManager];
    id v31 = [v35 lastKnownRoutingConfig];

    if ([v31 hostMode] != (id)2)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v59)
      {
        id v60 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v60)) {
          uint64_t v61 = 43;
        }
        else {
          uint64_t v61 = 45;
        }
        int v62 = object_getClassName(*(id *)(a1 + 32));
        id v63 = sel_getName(*(SEL *)(a1 + 56));
        v59(3, "%c[%{public}s %{public}s]:%i Emulation has not started", v61, v62, v63, 712);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v64 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        int v65 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v65)) {
          int v66 = 43;
        }
        else {
          int v66 = 45;
        }
        BOOL v67 = object_getClassName(*(id *)(a1 + 32));
        BOOL v68 = sel_getName(*(SEL *)(a1 + 56));
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v66;
        *(_WORD *)uint64_t v132 = 2082;
        *(void *)&v132[2] = v67;
        *(_WORD *)&v132[10] = 2082;
        *(void *)&v132[12] = v68;
        *(_WORD *)&v132[20] = 1024;
        *(_DWORD *)&v132[22] = 712;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Emulation has not started", buf, 0x22u);
      }

      uint64_t v69 = *(void *)(a1 + 48);
      id v70 = objc_alloc((Class)NSError);
      id v71 = +[NSString stringWithUTF8String:"nfcd"];
      v135[0] = NSLocalizedDescriptionKey;
      int v72 = +[NSString stringWithUTF8String:"Invalid State"];
      v136[0] = v72;
      v136[1] = &off_10031AD58;
      v135[1] = @"Line";
      v135[2] = @"Method";
      id v73 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
      v136[2] = v73;
      v135[3] = NSDebugDescriptionErrorKey;
      id v74 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 713];
      v136[3] = v74;
      id v75 = +[NSDictionary dictionaryWithObjects:v136 forKeys:v135 count:4];
      id v76 = [v70 initWithDomain:v71 code:12 userInfo:v75];
      (*(void (**)(uint64_t, id))(v69 + 16))(v69, v76);

      goto LABEL_26;
    }
    [*(id *)(a1 + 40) doubleValue];
    double v37 = v36;
    double v38 = 2.0;
    if (!NFIsInternalBuild()) {
      goto LABEL_66;
    }
    int v39 = +[NSUserDefaults standardUserDefaults];
    __int16 v40 = [v39 objectForKey:@"MaxEmuAssertionTime"];

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
LABEL_65:

LABEL_66:
      if (v37 < 0.0 || v37 > v38)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v100 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v100)
        {
          unsigned int v101 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v101)) {
            uint64_t v102 = 43;
          }
          else {
            uint64_t v102 = 45;
          }
          uint64_t v103 = object_getClassName(*(id *)(a1 + 32));
          uint64_t v104 = sel_getName(*(SEL *)(a1 + 56));
          v100(3, "%c[%{public}s %{public}s]:%i Invalid interval: %f", v102, v103, v104, 734, *(void *)&v37);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v105 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          id v106 = object_getClass(*(id *)(a1 + 32));
          if (class_isMetaClass(v106)) {
            int v107 = 43;
          }
          else {
            int v107 = 45;
          }
          uint64_t v108 = object_getClassName(*(id *)(a1 + 32));
          int v109 = sel_getName(*(SEL *)(a1 + 56));
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v107;
          *(_WORD *)uint64_t v132 = 2082;
          *(void *)&v132[2] = v108;
          *(_WORD *)&v132[10] = 2082;
          *(void *)&v132[12] = v109;
          *(_WORD *)&v132[20] = 1024;
          *(_DWORD *)&v132[22] = 734;
          *(_WORD *)&v132[26] = 2048;
          *(double *)&v132[28] = v37;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid interval: %f", buf, 0x2Cu);
        }

        uint64_t v110 = *(void *)(a1 + 48);
        id v111 = objc_alloc((Class)NSError);
        __int16 v112 = +[NSString stringWithUTF8String:"nfcd"];
        v133[0] = NSLocalizedDescriptionKey;
        uint64_t v113 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        v134[0] = v113;
        v134[1] = &off_10031AD70;
        v133[1] = @"Line";
        v133[2] = @"Method";
        id v114 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 56))];
        v134[2] = v114;
        v133[3] = NSDebugDescriptionErrorKey;
        id v115 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 56)), 735];
        v134[3] = v115;
        id v116 = +[NSDictionary dictionaryWithObjects:v134 forKeys:v133 count:4];
        id v117 = [v111 initWithDomain:v112 code:10 userInfo:v116];
        (*(void (**)(uint64_t, id))(v110 + 16))(v110, v117);
      }
      else
      {
        *(void *)buf = 0;
        *(void *)uint64_t v132 = buf;
        *(void *)&v132[8] = 0x3032000000;
        *(void *)&v132[16] = sub_10000B808;
        *(void *)&v132[24] = sub_100097C10;
        *(void *)&v132[32] = 0;
        uint64_t v85 = *(os_unfair_lock_s **)(a1 + 32);
        unsigned int v86 = v85 + 43;
        v118[0] = _NSConcreteStackBlock;
        v118[1] = 3221225472;
        uint64_t v119 = sub_100097C18;
        NSErrorUserInfoKey v120 = &unk_100301EB8;
        id v121 = v85;
        id v122 = buf;
        id v87 = v118;
        os_unfair_lock_lock(v86);
        v119((uint64_t)v87);
        os_unfair_lock_unlock(v86);

        id v88 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceNow:v37];
        int v89 = v88;
        if (!*(void *)(*(void *)v132 + 40) || objc_msgSend(v88, "compare:") == (id)1)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          int v90 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v90)
          {
            id v91 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v91)) {
              uint64_t v92 = 43;
            }
            else {
              uint64_t v92 = 45;
            }
            id v93 = object_getClassName(*(id *)(a1 + 32));
            uint64_t v94 = sel_getName(*(SEL *)(a1 + 56));
            v90(5, "%c[%{public}s %{public}s]:%i Renew timer", v92, v93, v94, 747);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v95 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            id v96 = object_getClass(*(id *)(a1 + 32));
            if (class_isMetaClass(v96)) {
              int v97 = 43;
            }
            else {
              int v97 = 45;
            }
            id v98 = object_getClassName(*(id *)(a1 + 32));
            uint64_t v99 = sel_getName(*(SEL *)(a1 + 56));
            *(_DWORD *)unsigned int v123 = 67109890;
            int v124 = v97;
            __int16 v125 = 2082;
            __int16 v126 = v98;
            __int16 v127 = 2082;
            __int16 v128 = v99;
            __int16 v129 = 1024;
            int v130 = 747;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Renew timer", v123, 0x22u);
          }

          [*(id *)(a1 + 32) _syncStartAssertionTimer:v37];
        }
        (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

        _Block_object_dispose(buf, 8);
      }
      goto LABEL_26;
    }
    [v40 floatValue];
    float v42 = v41;
    BOOL v43 = v41 < 2.0;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v44 = NFLogGetLogger();
    int v45 = (void (*)(uint64_t, const char *, ...))v44;
    if (v43)
    {
      if (v44)
      {
        __int16 v46 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v46)) {
          uint64_t v47 = 43;
        }
        else {
          uint64_t v47 = 45;
        }
        id v48 = object_getClassName(*(id *)(a1 + 32));
        int v49 = sel_getName(*(SEL *)(a1 + 56));
        v45(4, "%c[%{public}s %{public}s]:%i Invalid max asssert interval override; revert to default",
          v47,
          v48,
          v49,
          725);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v50 = NFSharedLogGetLogger();
      double v38 = 2.0;
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
        goto LABEL_64;
      }
      uint64_t v51 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v51)) {
        int v52 = 43;
      }
      else {
        int v52 = 45;
      }
      NSErrorUserInfoKey v53 = object_getClassName(*(id *)(a1 + 32));
      int v54 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v52;
      *(_WORD *)uint64_t v132 = 2082;
      *(void *)&v132[2] = v53;
      *(_WORD *)&v132[10] = 2082;
      *(void *)&v132[12] = v54;
      *(_WORD *)&v132[20] = 1024;
      *(_DWORD *)&v132[22] = 725;
      uint64_t v55 = "%c[%{public}s %{public}s]:%i Invalid max asssert interval override; revert to default";
      int v56 = v50;
      os_log_type_t v57 = OS_LOG_TYPE_ERROR;
      uint32_t v58 = 34;
    }
    else
    {
      double v38 = v42;
      if (v44)
      {
        uint64_t v77 = object_getClass(*(id *)(a1 + 32));
        if (class_isMetaClass(v77)) {
          uint64_t v78 = 43;
        }
        else {
          uint64_t v78 = 45;
        }
        int v79 = object_getClassName(*(id *)(a1 + 32));
        uint64_t v80 = sel_getName(*(SEL *)(a1 + 56));
        v45(6, "%c[%{public}s %{public}s]:%i Max assert interval override=%f", v78, v79, v80, 728, *(void *)&v38);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v50 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_64;
      }
      id v81 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v81)) {
        int v82 = 43;
      }
      else {
        int v82 = 45;
      }
      BOOL v83 = object_getClassName(*(id *)(a1 + 32));
      id v84 = sel_getName(*(SEL *)(a1 + 56));
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v82;
      *(_WORD *)uint64_t v132 = 2082;
      *(void *)&v132[2] = v83;
      *(_WORD *)&v132[10] = 2082;
      *(void *)&v132[12] = v84;
      *(_WORD *)&v132[20] = 1024;
      *(_DWORD *)&v132[22] = 728;
      *(_WORD *)&v132[26] = 2048;
      *(double *)&v132[28] = v38;
      uint64_t v55 = "%c[%{public}s %{public}s]:%i Max assert interval override=%f";
      int v56 = v50;
      os_log_type_t v57 = OS_LOG_TYPE_DEFAULT;
      uint32_t v58 = 44;
    }
    _os_log_impl((void *)&_mh_execute_header, v56, v57, v55, buf, v58);
LABEL_64:

    goto LABEL_65;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15)
  {
    uint64_t v16 = (id *)(a1 + 32);
    uint64_t v17 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v17)) {
      uint64_t v18 = 43;
    }
    else {
      uint64_t v18 = 45;
    }
    __int16 v19 = object_getClassName(*v16);
    int v20 = sel_getName(*(SEL *)(a1 + 56));
    __int16 v21 = [*v16 sessionUID];
    v15(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v18, v19, v20, 708, v21);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    uint64_t v23 = (id *)(a1 + 32);
    __int16 v24 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v24)) {
      int v25 = 43;
    }
    else {
      int v25 = 45;
    }
    int v26 = object_getClassName(*v23);
    char v27 = sel_getName(*(SEL *)(a1 + 56));
    id v28 = [*v23 sessionUID];
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v25;
    *(_WORD *)uint64_t v132 = 2082;
    *(void *)&v132[2] = v26;
    *(_WORD *)&v132[10] = 2082;
    *(void *)&v132[12] = v27;
    *(_WORD *)&v132[20] = 1024;
    *(_DWORD *)&v132[22] = 708;
    *(_WORD *)&v132[26] = 2114;
    *(void *)&v132[28] = v28;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v29 = *(void *)(a1 + 48);
  if (v29)
  {
    id v30 = objc_alloc((Class)NSError);
    id v31 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v137 = NSLocalizedDescriptionKey;
    id v32 = +[NSString stringWithUTF8String:"Session not active"];
    uint64_t v138 = v32;
    __int16 v33 = +[NSDictionary dictionaryWithObjects:&v138 forKeys:&v137 count:1];
    id v34 = [v30 initWithDomain:v31 code:54 userInfo:v33];
    (*(void (**)(uint64_t, id))(v29 + 16))(v29, v34);

LABEL_26:
  }
}

void sub_100097BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100097C10(uint64_t a1)
{
}

void sub_100097C18(uint64_t a1)
{
}

void sub_100097D04(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    NSErrorUserInfoKey v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 758, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
    int v14 = sel_getName(*(SEL *)(a1 + 48));
    int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v30 = v12;
    __int16 v31 = 2082;
    id v32 = v13;
    __int16 v33 = 2082;
    id v34 = v14;
    __int16 v35 = 1024;
    int v36 = 758;
    __int16 v37 = 2114;
    double v38 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  uint64_t v16 = NFSharedSignpostLog();
  if (os_signpost_enabled(v16))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SESSION_RESUME_FROM_WAITING_ON_FIELD", (const char *)&unk_100286819, buf, 2u);
  }

  if ([*(id *)(a1 + 32) disableAutoStartOnField])
  {
    uint64_t v17 = +[_NFHardwareManager sharedHardwareManager];
    uint64_t v18 = [*(id *)(a1 + 32) sessionResumeField];
    sub_1001DD1C4(v17, v18, *(void **)(a1 + 32));

    [*(id *)(a1 + 32) setSessionResumeField:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 40);
    id v20 = objc_alloc((Class)NSError);
    __int16 v21 = +[NSString stringWithUTF8String:"nfcd"];
    v27[0] = NSLocalizedDescriptionKey;
    int v22 = +[NSString stringWithUTF8String:"Invalid State"];
    v28[0] = v22;
    v28[1] = &off_10031AD88;
    v27[1] = @"Line";
    v27[2] = @"Method";
    id v23 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 48))];
    id v28[2] = v23;
    void v27[3] = NSDebugDescriptionErrorKey;
    id v24 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 48)), 763];
    void v28[3] = v24;
    int v25 = +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:4];
    id v26 = [v20 initWithDomain:v21 code:12 userInfo:v25];
    (*(void (**)(uint64_t, id))(v19 + 16))(v19, v26);
  }
}

void sub_100098184(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 40));
    NSErrorUserInfoKey v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 778, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
    int v14 = sel_getName(*(SEL *)(a1 + 40));
    int v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)buf = 67110146;
    int v31 = v12;
    __int16 v32 = 2082;
    __int16 v33 = v13;
    __int16 v34 = 2082;
    __int16 v35 = v14;
    __int16 v36 = 1024;
    int v37 = 778;
    __int16 v38 = 2114;
    int v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      uint64_t v17 = (void (*)(uint64_t, const char *, ...))v16;
      uint64_t v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      id v20 = object_getClassName(*(id *)(a1 + 32));
      __int16 v21 = sel_getName(*(SEL *)(a1 + 40));
      int v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 780, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      char v27 = object_getClassName(*(id *)(a1 + 32));
      id v28 = sel_getName(*(SEL *)(a1 + 40));
      uint64_t v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)buf = 67110146;
      int v31 = v26;
      __int16 v32 = 2082;
      __int16 v33 = v27;
      __int16 v34 = 2082;
      __int16 v35 = v28;
      __int16 v36 = 1024;
      int v37 = 780;
      __int16 v38 = 2114;
      int v39 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
  }
  else
  {
    [*(id *)(*(void *)(a1 + 32) + 160) restartDiscovery];
  }
}

void sub_100098684(id a1)
{
  uint64_t v3 = [[NFSecureTransactionServicesHandoverSessionInterface alloc] initWithProtocol:&OBJC_PROTOCOL___NFSecureTransactionServicesHandoverSessionInterface];
  uint64_t v1 = [(NFSecureTransactionServicesHandoverBaseSessionInterface *)v3 protocolInterface];
  id v2 = (void *)qword_100347390;
  qword_100347390 = v1;
}

void sub_1000987D0(id a1)
{
  uint64_t v3 = [[NFSecureTransactionServicesHandoverSessionCallbacksInterface alloc] initWithProtocol:&OBJC_PROTOCOL___NFSecureTransactionServicesHandoverSessionCallbacksInterface];
  uint64_t v1 = [(NFSecureTransactionServicesHandoverBaseSessionCallbacksInterface *)v3 protocolInterface];
  id v2 = (void *)qword_1003473A0;
  qword_1003473A0 = v1;
}

id sub_1000988C8(void *a1)
{
  id v2 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283770 length:12];
  id v137 = 0;
  uint64_t v3 = [a1 selectByName:v2 error:&v137];
  id v4 = v137;

  if ([v3 status] == 36864)
  {
    id v5 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283784 length:11];
    id v138 = 0;
    id v6 = [a1 sendCommandWithClass:128 instruction:160 p1:128 p2:0 data:v5 error:&v138];
    id v7 = v138;

    if ([v6 status] == 27270)
    {
      id v8 = 0;
      byte_1003473B0 = 1;
LABEL_83:

      if (v8)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          __int16 v112 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("selectSURFApplet");
          uint64_t v115 = 45;
          if (isMetaClass) {
            uint64_t v115 = 43;
          }
          v112(3, "%c[%{public}s %{public}s]:%i Could not retrieve SURF slot : %{public}@", v115, ClassName, Name, 54, v8);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v23 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          id v116 = object_getClass(a1);
          if (class_isMetaClass(v116)) {
            int v117 = 43;
          }
          else {
            int v117 = 45;
          }
          id v118 = object_getClassName(a1);
          uint64_t v119 = sel_getName("selectSURFApplet");
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v117;
          __int16 v143 = 2082;
          id v144 = v118;
          __int16 v145 = 2082;
          id v146 = v119;
          __int16 v147 = 1024;
          int v148 = 54;
          __int16 v149 = 2114;
          v150[0] = v8;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not retrieve SURF slot : %{public}@", buf, 0x2Cu);
        }
        goto LABEL_93;
      }
      id v4 = 0;
      goto LABEL_95;
    }
    if ([v6 status] != 36864)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v47 = NFLogGetLogger();
      if (v47)
      {
        id v48 = (void (*)(uint64_t, const char *, ...))v47;
        int v49 = object_getClass(a1);
        BOOL v50 = class_isMetaClass(v49);
        id v51 = v7;
        int v52 = object_getClassName(a1);
        NSErrorUserInfoKey v53 = sel_getName("getSurfSlot");
        uint64_t v133 = [v6 status];
        uint64_t v54 = 45;
        if (v50) {
          uint64_t v54 = 43;
        }
        __int16 v125 = v52;
        id v7 = v51;
        v48(3, "%c[%{public}s %{public}s]:%i Failed to list keys inside applet : 0x%04x / %{public}@", v54, v125, v53, 95, v133, v51);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v55 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        int v56 = object_getClass(a1);
        if (class_isMetaClass(v56)) {
          int v57 = 43;
        }
        else {
          int v57 = 45;
        }
        uint32_t v58 = object_getClassName(a1);
        id v59 = sel_getName("getSurfSlot");
        unsigned int v60 = [v6 status];
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = v57;
        __int16 v143 = 2082;
        id v144 = v58;
        __int16 v145 = 2082;
        id v146 = v59;
        __int16 v147 = 1024;
        int v148 = 95;
        __int16 v149 = 1024;
        LODWORD(v150[0]) = v60;
        WORD2(v150[0]) = 2114;
        *(void *)((char *)v150 + 6) = v7;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to list keys inside applet : 0x%04x / %{public}@", buf, 0x32u);
      }

      if (v7)
      {
        id v8 = v7;
      }
      else
      {
        id v72 = objc_alloc((Class)NSError);
        id v73 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v141 = NSLocalizedDescriptionKey;
        id v74 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)buf = v74;
        id v75 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v141 count:1];
        id v8 = [v72 initWithDomain:v73 code:16 userInfo:v75];

        id v7 = 0;
      }
      goto LABEL_83;
    }
    id v135 = v7;
    int v26 = [v6 response];
    char v27 = +[NFTLV TLVWithData:v26];

    id v134 = v27;
    if (!v27)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v61 = NFLogGetLogger();
      if (v61)
      {
        int v62 = (void (*)(uint64_t, const char *, ...))v61;
        id v63 = object_getClass(a1);
        BOOL v64 = class_isMetaClass(v63);
        int v65 = object_getClassName(a1);
        __int16 v128 = sel_getName("getSurfSlot");
        uint64_t v66 = 45;
        if (v64) {
          uint64_t v66 = 43;
        }
        v62(3, "%c[%{public}s %{public}s]:%i Failed to list keys, expected top level TLV", v66, v65, v128, 102);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v67 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        BOOL v68 = object_getClass(a1);
        if (class_isMetaClass(v68)) {
          int v69 = 43;
        }
        else {
          int v69 = 45;
        }
        id v70 = object_getClassName(a1);
        id v71 = sel_getName("getSurfSlot");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v69;
        __int16 v143 = 2082;
        id v144 = v70;
        __int16 v145 = 2082;
        id v146 = v71;
        __int16 v147 = 1024;
        int v148 = 102;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to list keys, expected top level TLV", buf, 0x22u);
      }

      if (v7)
      {
        id v8 = v7;
      }
      else
      {
        id v86 = objc_alloc((Class)NSError);
        id v87 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v141 = NSLocalizedDescriptionKey;
        id v88 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)buf = v88;
        int v89 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v141 count:1];
        id v8 = [v86 initWithDomain:v87 code:16 userInfo:v89];

        id v7 = 0;
      }
      int v90 = 0;
      goto LABEL_82;
    }
    id v28 = [v27 value];
    uint64_t v29 = +[NFTLV TLVsWithData:v28];

    if ([v29 count] == (id)2)
    {
      int v30 = [v29 objectAtIndex:1];
      int v31 = [v30 value];
      __int16 v32 = +[NFTLV TLVsWithData:v31];

      if ([v32 count])
      {
        if ([v32 count] != (id)1)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v95 = NFLogGetLogger();
          if (v95)
          {
            id v96 = (void (*)(uint64_t, const char *, ...))v95;
            int v97 = object_getClass(a1);
            id v98 = v32;
            BOOL v99 = class_isMetaClass(v97);
            uint64_t v100 = object_getClassName(a1);
            int v130 = sel_getName("getSurfSlot");
            BOOL v101 = !v99;
            __int16 v32 = v98;
            uint64_t v102 = 45;
            if (!v101) {
              uint64_t v102 = 43;
            }
            v96(3, "%c[%{public}s %{public}s]:%i Expecting 1 key at most", v102, v100, v130, 122);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v103 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            uint64_t v104 = object_getClass(a1);
            if (class_isMetaClass(v104)) {
              int v105 = 43;
            }
            else {
              int v105 = 45;
            }
            id v106 = v32;
            int v107 = object_getClassName(a1);
            uint64_t v108 = sel_getName("getSurfSlot");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v105;
            __int16 v143 = 2082;
            id v144 = v107;
            __int16 v32 = v106;
            __int16 v145 = 2082;
            id v146 = v108;
            __int16 v147 = 1024;
            int v148 = 122;
            _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting 1 key at most", buf, 0x22u);
          }

          if (v7)
          {
            id v8 = v7;
            uint64_t v29 = v32;
          }
          else
          {
            id v121 = objc_alloc((Class)NSError);
            SEL sel = (SEL)v32;
            id v122 = +[NSString stringWithUTF8String:"nfcd"];
            NSErrorUserInfoKey v141 = NSLocalizedDescriptionKey;
            unsigned int v123 = +[NSString stringWithUTF8String:"Commmand Error"];
            *(void *)buf = v123;
            int v124 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v141 count:1];
            id v8 = [v121 initWithDomain:v122 code:16 userInfo:v124];

            uint64_t v29 = (void *)sel;
          }
          goto LABEL_81;
        }
        __int16 v33 = [v32 objectAtIndex:0];
        __int16 v34 = [v33 value];
        uint64_t v29 = +[NFTLV TLVsWithData:v34];

        if ((unint64_t)[v29 count] <= 1)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v35 = NFLogGetLogger();
          if (v35)
          {
            __int16 v36 = (void (*)(uint64_t, const char *, ...))v35;
            int v37 = object_getClass(a1);
            BOOL v38 = class_isMetaClass(v37);
            int v39 = object_getClassName(a1);
            __int16 v127 = sel_getName("getSurfSlot");
            uint64_t v40 = 45;
            if (v38) {
              uint64_t v40 = 43;
            }
            v36(3, "%c[%{public}s %{public}s]:%i Expecting at least two TLVs for KeyInSlot", v40, v39, v127, 129);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          float v41 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            goto LABEL_63;
          }
          float v42 = object_getClass(a1);
          if (class_isMetaClass(v42)) {
            int v43 = 43;
          }
          else {
            int v43 = 45;
          }
          uint64_t v44 = object_getClassName(a1);
          int v45 = sel_getName("getSurfSlot");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v43;
          __int16 v143 = 2082;
          id v144 = v44;
          __int16 v145 = 2082;
          id v146 = v45;
          __int16 v147 = 1024;
          int v148 = 129;
          __int16 v46 = "%c[%{public}s %{public}s]:%i Expecting at least two TLVs for KeyInSlot";
LABEL_62:
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, v46, buf, 0x22u);
LABEL_63:

          id v7 = v135;
          if (v135)
          {
            id v8 = v135;
          }
          else
          {
            id v91 = objc_alloc((Class)NSError);
            uint64_t v92 = +[NSString stringWithUTF8String:"nfcd"];
            NSErrorUserInfoKey v141 = NSLocalizedDescriptionKey;
            id v93 = +[NSString stringWithUTF8String:"Commmand Error"];
            *(void *)buf = v93;
            uint64_t v94 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v141 count:1];
            id v8 = [v91 initWithDomain:v92 code:16 userInfo:v94];

            id v7 = 0;
          }
          goto LABEL_81;
        }
        int v109 = [v29 objectAtIndex:1];
        id v110 = [v109 value];
        byte_1003473B0 = *((unsigned char *)[v110 bytes] + 1);

        id v8 = 0;
      }
      else
      {
        id v8 = 0;
        byte_1003473B0 = 0;
        uint64_t v29 = v32;
      }
LABEL_81:
      int v90 = v134;

LABEL_82:
      goto LABEL_83;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v76 = NFLogGetLogger();
    if (v76)
    {
      uint64_t v77 = (void (*)(uint64_t, const char *, ...))v76;
      uint64_t v78 = object_getClass(a1);
      BOOL v79 = class_isMetaClass(v78);
      uint64_t v80 = object_getClassName(a1);
      __int16 v129 = sel_getName("getSurfSlot");
      uint64_t v81 = 45;
      if (v79) {
        uint64_t v81 = 43;
      }
      v77(3, "%c[%{public}s %{public}s]:%i Failed to list keys, expected version and sequence TLVs", v81, v80, v129, 109);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    float v41 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      goto LABEL_63;
    }
    int v82 = object_getClass(a1);
    if (class_isMetaClass(v82)) {
      int v83 = 43;
    }
    else {
      int v83 = 45;
    }
    id v84 = object_getClassName(a1);
    uint64_t v85 = sel_getName("getSurfSlot");
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v83;
    __int16 v143 = 2082;
    id v144 = v84;
    __int16 v145 = 2082;
    id v146 = v85;
    __int16 v147 = 1024;
    int v148 = 109;
    __int16 v46 = "%c[%{public}s %{public}s]:%i Failed to list keys, expected version and sequence TLVs";
    goto LABEL_62;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFLogGetLogger();
  if (v9)
  {
    id v10 = (void (*)(uint64_t, const char *, ...))v9;
    int v11 = object_getClass(a1);
    BOOL v12 = class_isMetaClass(v11);
    uint64_t v13 = object_getClassName(a1);
    int v14 = sel_getName("selectSURFApplet");
    uint64_t v132 = [v3 status];
    uint64_t v15 = 45;
    if (v12) {
      uint64_t v15 = 43;
    }
    v10(3, "%c[%{public}s %{public}s]:%i Failed to select applet: 0x%04x / %{public}@", v15, v13, v14, 47, v132, v4);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = object_getClass(a1);
    if (class_isMetaClass(v17)) {
      int v18 = 43;
    }
    else {
      int v18 = 45;
    }
    BOOL v19 = object_getClassName(a1);
    id v20 = sel_getName("selectSURFApplet");
    unsigned int v21 = [v3 status];
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v18;
    __int16 v143 = 2082;
    id v144 = v19;
    __int16 v145 = 2082;
    id v146 = v20;
    __int16 v147 = 1024;
    int v148 = 47;
    __int16 v149 = 1024;
    LODWORD(v150[0]) = v21;
    WORD2(v150[0]) = 2114;
    *(void *)((char *)v150 + 6) = v4;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select applet: 0x%04x / %{public}@", buf, 0x32u);
  }

  if (!v4)
  {
    id v22 = objc_alloc((Class)NSError);
    uint64_t v23 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v139 = NSLocalizedDescriptionKey;
    id v24 = +[NSString stringWithUTF8String:"Commmand Error"];
    uint64_t v140 = v24;
    int v25 = +[NSDictionary dictionaryWithObjects:&v140 forKeys:&v139 count:1];
    id v8 = [v22 initWithDomain:v23 code:16 userInfo:v25];

LABEL_93:
    id v4 = v8;
  }
LABEL_95:

  return v4;
}

void sub_1000997F0(void *a1)
{
  if (a1)
  {
    id v2 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028377C length:8];
    id v19 = 0;
    uint64_t v3 = [a1 selectByName:v2 error:&v19];
    id v4 = v19;

    if ([v3 status] != 36864)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v6 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("deselectSURFApplet");
        uint64_t v18 = [v3 status];
        uint64_t v11 = 45;
        if (isMetaClass) {
          uint64_t v11 = 43;
        }
        v6(3, "%c[%{public}s %{public}s]:%i Failed to deselect applet: 0x%04x / %{public}@", v11, ClassName, Name, 67, v18, v4);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = object_getClass(a1);
        if (class_isMetaClass(v13)) {
          int v14 = 43;
        }
        else {
          int v14 = 45;
        }
        uint64_t v15 = object_getClassName(a1);
        uint64_t v16 = sel_getName("deselectSURFApplet");
        unsigned int v17 = [v3 status];
        *(_DWORD *)buf = 67110402;
        int v21 = v14;
        __int16 v22 = 2082;
        uint64_t v23 = v15;
        __int16 v24 = 2082;
        int v25 = v16;
        __int16 v26 = 1024;
        int v27 = 67;
        __int16 v28 = 1024;
        unsigned int v29 = v17;
        __int16 v30 = 2114;
        id v31 = v4;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to deselect applet: 0x%04x / %{public}@", buf, 0x32u);
      }
    }
  }
}

id sub_100099A20(void *a1, unsigned int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = __rev16(a2);
    id v4 = +[NFTLV TLVWithTag:2 unsignedChar:1];
    v48[0] = v4;
    id v5 = +[NFTLV TLVWithTag:2 unsignedShort:416];
    v48[1] = v5;
    id v6 = +[NFTLV TLVWithTag:2 unsignedChar:1];
    v47[0] = v6;
    id v7 = +[NFTLV TLVWithTag:4 unsignedShort:v3];
    v47[1] = v7;
    id v8 = +[NSArray arrayWithObjects:v47 count:2];
    uint64_t v9 = +[NFTLV TLVWithTag:48 children:v8];
    id v10 = [v9 asData];
    uint64_t v11 = +[NFTLV TLVWithTag:4 value:v10];
    v48[2] = v11;
    BOOL v12 = +[NSArray arrayWithObjects:v48 count:3];
    uint64_t v13 = +[NFTLV TLVWithTag:48 children:v12];
    __int16 v34 = [v13 asData];

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v15 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("deleteKeyCommandWithSlot:error:");
      uint64_t v20 = byte_1003473B0;
      int v21 = [v34 NF_asHexString];
      uint64_t v22 = 45;
      if (isMetaClass) {
        uint64_t v22 = 43;
      }
      v15(6, "%c[%{public}s %{public}s]:%i Using non-legacy delete command slot %d : %{public}@", v22, ClassName, Name, 175, v20, v21);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v24 = object_getClass(a1);
      if (class_isMetaClass(v24)) {
        int v25 = 43;
      }
      else {
        int v25 = 45;
      }
      __int16 v26 = object_getClassName(a1);
      int v27 = sel_getName("deleteKeyCommandWithSlot:error:");
      int v28 = byte_1003473B0;
      unsigned int v29 = [v34 NF_asHexString];
      *(_DWORD *)buf = 67110402;
      int v36 = v25;
      __int16 v37 = 2082;
      BOOL v38 = v26;
      __int16 v39 = 2082;
      uint64_t v40 = v27;
      __int16 v41 = 1024;
      int v42 = 175;
      __int16 v43 = 1024;
      int v44 = v28;
      __int16 v45 = 2114;
      __int16 v46 = v29;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Using non-legacy delete command slot %d : %{public}@", buf, 0x32u);
    }
    __int16 v30 = [a1 sendCommandWithClass:128 instruction:160 p1:128 p2:0 data:v34 error:a3];
  }
  else
  {
    __int16 v30 = 0;
  }

  return v30;
}

NSErrorUserInfoKey sub_100099DA8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = +[NFCALogger sharedCALogger];
    id v7 = [v6 getTimestamp];

    id v8 = sub_1000988C8(a1);
    if (v8)
    {
      uint64_t v9 = v8;
      v298[0] = &off_10031ADA0;
      v297[0] = @"peerPaymentEnrollmentErrorStep";
      v297[1] = @"peerPaymentEnrollmentErrorCode";
      id v10 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 code]);
      v298[1] = v10;
      v297[2] = @"peerPaymentEnrollmentStartTime";
      uint64_t v11 = +[NSNumber numberWithUnsignedLongLong:v7];
      v298[2] = v11;
      BOOL v12 = +[NSDictionary dictionaryWithObjects:v298 forKeys:v297 count:3];

      sub_10020328C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v12);
      NSErrorUserInfoKey v13 = v9;
      NSErrorUserInfoKey v14 = v13;
LABEL_163:

      goto LABEL_164;
    }
    id v267 = 0;
    BOOL v12 = sub_100099A20(a1, byte_1003473B0, (uint64_t)&v267);
    NSErrorUserInfoKey v13 = (NSErrorUserInfoKey)v267;
    if (!v12
      || [v12 status] != 36864 && objc_msgSend(v12, "status") != 27272)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        BOOL v67 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        id v71 = a1;
        Name = sel_getName("performPeerPaymentEnrollment:response:");
        uint64_t v243 = [v12 status];
        BOOL v235 = Name;
        a1 = v71;
        uint64_t v73 = 45;
        if (isMetaClass) {
          uint64_t v73 = 43;
        }
        v67(3, "%c[%{public}s %{public}s]:%i Failed to delete existing key : 0x%x / %{public}@", v73, ClassName, v235, 265, v243, v13);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v74 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        id v75 = object_getClass(a1);
        if (class_isMetaClass(v75)) {
          int v76 = 43;
        }
        else {
          int v76 = 45;
        }
        uint64_t v77 = object_getClassName(a1);
        uint64_t v78 = sel_getName("performPeerPaymentEnrollment:response:");
        unsigned int v79 = [v12 status];
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = v76;
        __int16 v289 = 2082;
        v290 = v77;
        __int16 v291 = 2082;
        v292 = v78;
        __int16 v293 = 1024;
        int v294 = 265;
        __int16 v295 = 1024;
        *(_DWORD *)uint64_t v296 = v79;
        *(_WORD *)&v296[4] = 2114;
        *(void *)&v296[6] = v13;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to delete existing key : 0x%x / %{public}@", buf, 0x32u);
      }

      v287[0] = &off_10031ADB8;
      v286[0] = @"peerPaymentEnrollmentErrorStep";
      v286[1] = @"peerPaymentEnrollmentErrorCode";
      uint64_t v80 = +[NSNumber numberWithInteger:[(NSString *)v13 code]];
      v287[1] = v80;
      v286[2] = @"peerPaymentEnrollmentStartTime";
      uint64_t v81 = +[NSNumber numberWithUnsignedLongLong:v7];
      v287[2] = v81;
      uint64_t v15 = +[NSDictionary dictionaryWithObjects:v287 forKeys:v286 count:3];

      sub_10020328C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v15);
      if (v13)
      {
        NSErrorUserInfoKey v13 = v13;
        NSErrorUserInfoKey v14 = v13;
      }
      else
      {
        id v99 = objc_alloc((Class)NSError);
        uint64_t v100 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v284 = NSLocalizedDescriptionKey;
        +[NSString stringWithUTF8String:"Commmand Error"];
        v102 = BOOL v101 = v15;
        v285 = v102;
        uint64_t v103 = +[NSDictionary dictionaryWithObjects:&v285 forKeys:&v284 count:1];
        NSErrorUserInfoKey v14 = (NSErrorUserInfoKey)[v99 initWithDomain:v100 code:16 userInfo:v103];

        uint64_t v15 = v101;
        NSErrorUserInfoKey v13 = 0;
      }
      goto LABEL_162;
    }
    uint64_t v15 = objc_opt_new();
    if ([v5 length] != (id)32)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v82 = NFLogGetLogger();
      if (v82)
      {
        int v83 = (void (*)(uint64_t, const char *, ...))v82;
        id v84 = object_getClass(a1);
        BOOL v85 = class_isMetaClass(v84);
        id v86 = object_getClassName(a1);
        v236 = sel_getName("performPeerPaymentEnrollment:response:");
        uint64_t v87 = 45;
        if (v85) {
          uint64_t v87 = 43;
        }
        v83(3, "%c[%{public}s %{public}s]:%i Invalid length for auth token", v87, v86, v236, 282);
      }
      v254 = v15;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v88 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
      {
        int v89 = object_getClass(a1);
        if (class_isMetaClass(v89)) {
          int v90 = 43;
        }
        else {
          int v90 = 45;
        }
        id v91 = object_getClassName(a1);
        uint64_t v92 = sel_getName("performPeerPaymentEnrollment:response:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v90;
        __int16 v289 = 2082;
        v290 = v91;
        __int16 v291 = 2082;
        v292 = v92;
        __int16 v293 = 1024;
        int v294 = 282;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid length for auth token", buf, 0x22u);
      }

      v282[0] = @"peerPaymentEnrollmentErrorStep";
      v282[1] = @"peerPaymentEnrollmentErrorCode";
      v283[0] = &off_10031ADD0;
      v283[1] = &off_10031ADE8;
      v282[2] = @"peerPaymentEnrollmentStartTime";
      id v93 = +[NSNumber numberWithUnsignedLongLong:v7];
      v283[2] = v93;
      __int16 v43 = +[NSDictionary dictionaryWithObjects:v283 forKeys:v282 count:3];

      sub_10020328C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v43);
      id v94 = objc_alloc((Class)NSError);
      uint64_t v95 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v280 = NSLocalizedDescriptionKey;
      id v96 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      v281 = v96;
      int v97 = +[NSDictionary dictionaryWithObjects:&v281 forKeys:&v280 count:1];
      id v98 = (void *)v95;
      NSErrorUserInfoKey v14 = (NSErrorUserInfoKey)[v94 initWithDomain:v95 code:10 userInfo:v97];

      uint64_t v15 = v254;
      goto LABEL_161;
    }
    id v250 = v7;
    id v251 = v5;
    uint64_t v247 = a3;
    uint64_t v16 = +[NFTLV TLVWithTag:24352 value:v5];
    [v15 addObject:v16];

    __int16 v266 = 256;
    id v17 = [objc_alloc((Class)NSData) initWithBytes:&v266 length:2];
    uint64_t v18 = +[NFTLV TLVWithTag:81 value:v17];
    [v15 addObject:v18];

    __int16 v265 = 257;
    id v19 = [objc_alloc((Class)NSData) initWithBytes:&v265 length:2];
    uint64_t v20 = +[NFTLV TLVWithTag:82 value:v19];
    [v15 addObject:v20];

    __int16 v263 = 513;
    char v264 = 4;
    id v21 = [objc_alloc((Class)NSData) initWithBytes:&v263 length:3];
    uint64_t v22 = +[NFTLV TLVWithTag:85 value:v21];
    [v15 addObject:v22];

    int v262 = -65536;
    id v23 = [objc_alloc((Class)NSData) initWithBytes:&v262 length:4];
    __int16 v24 = +[NFTLV TLVWithTag:87 value:v23];
    [v15 addObject:v24];

    int v25 = +[NFTLV TLVWithTag:32551 children:v15];
    uint64_t v252 = [v25 asData];

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v26 = NFLogGetLogger();
    if (v26)
    {
      int v27 = (void (*)(uint64_t, const char *, ...))v26;
      int v28 = object_getClass(a1);
      BOOL v29 = class_isMetaClass(v28);
      __int16 v30 = object_getClassName(a1);
      id v31 = a1;
      __int16 v32 = sel_getName("performPeerPaymentEnrollment:response:");
      __int16 v33 = +[NFTLV TLVWithTag:32551 children:v15];
      v234 = v32;
      a1 = v31;
      uint64_t v34 = 45;
      if (v29) {
        uint64_t v34 = 43;
      }
      v27(6, "%c[%{public}s %{public}s]:%i keygenDGI = %{public}@", v34, v30, v234, 303, v33);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v35 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      int v36 = object_getClass(a1);
      __int16 v37 = v12;
      if (class_isMetaClass(v36)) {
        int v38 = 43;
      }
      else {
        int v38 = 45;
      }
      __int16 v39 = object_getClassName(a1);
      uint64_t v40 = sel_getName("performPeerPaymentEnrollment:response:");
      +[NFTLV TLVWithTag:32551 children:v15];
      int v42 = v41 = a1;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v38;
      BOOL v12 = v37;
      __int16 v289 = 2082;
      v290 = v39;
      __int16 v291 = 2082;
      v292 = v40;
      __int16 v293 = 1024;
      int v294 = 303;
      __int16 v295 = 2114;
      *(void *)uint64_t v296 = v42;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i keygenDGI = %{public}@", buf, 0x2Cu);

      a1 = v41;
    }

    id v268 = 0;
    __int16 v43 = (void *)v252;
    int v44 = [a1 sendCommandWithClass:128 instruction:193 p1:0 p2:byte_1003473B0 data:v252 error:&v268];
    NSErrorUserInfoKey v45 = (NSErrorUserInfoKey)v268;
    id v257 = a1;
    if (v44)
    {
      if ([v44 status] != 36864)
      {
        BOOL v255 = objc_opt_new();
        id v116 = v45;
        while (([v44 status] & 0xFF00) == 0x6100)
        {
          int v117 = [v44 response];
          [v255 appendData:v117];

          unsigned __int8 v118 = [v44 status];
          NSErrorUserInfoKey v300 = v116;
          uint64_t v119 = [a1 sendCommandWithClass:128 instruction:192 p1:0 p2:0 data:0 expectedLength:v118 toOS:0 error:&v300];
          NSErrorUserInfoKey v45 = v300;

          if (!v119)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v159 = NFLogGetLogger();
            if (v159)
            {
              __int16 v160 = (void (*)(uint64_t, const char *, ...))v159;
              id v161 = object_getClass(a1);
              BOOL v162 = class_isMetaClass(v161);
              v230 = object_getClassName(a1);
              v238 = sel_getName("sendCreateKey:response:");
              uint64_t v163 = 45;
              if (v162) {
                uint64_t v163 = 43;
              }
              v160(3, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", v163, v230, v238, 223, v45);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v164 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
            {
              int v165 = object_getClass(a1);
              if (class_isMetaClass(v165)) {
                int v166 = 43;
              }
              else {
                int v166 = 45;
              }
              id v167 = object_getClassName(a1);
              uint64_t v168 = sel_getName("sendCreateKey:response:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v166;
              __int16 v289 = 2082;
              v290 = v167;
              __int16 v291 = 2082;
              v292 = v168;
              __int16 v293 = 1024;
              int v294 = 223;
              __int16 v295 = 2114;
              *(void *)uint64_t v296 = v45;
              _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", buf, 0x2Cu);
            }

            NSErrorUserInfoKey v45 = v45;
            id v115 = 0;
            int v44 = v255;
            int v65 = v45;
            goto LABEL_102;
          }
          int v44 = v119;
          id v116 = v45;
          if ([v119 status] == 36864)
          {
            NSErrorUserInfoKey v120 = [v119 response];
            [v255 appendData:v120];

            if ((unint64_t)[v255 length] > 0xA8)
            {
              id v115 = v255;

              int v65 = 0;
              int v44 = v115;
            }
            else
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v121 = NFLogGetLogger();
              if (v121)
              {
                id v122 = (void (*)(uint64_t, const char *, ...))v121;
                unsigned int v123 = object_getClass(a1);
                BOOL v124 = class_isMetaClass(v123);
                __int16 v125 = object_getClassName(a1);
                __int16 v126 = sel_getName("sendCreateKey:response:");
                id v244 = [v255 length];
                uint64_t v127 = 45;
                if (v124) {
                  uint64_t v127 = 43;
                }
                v122(3, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", v127, v125, v126, 230, v244);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              __int16 v128 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
              {
                __int16 v129 = object_getClass(v257);
                if (class_isMetaClass(v129)) {
                  int v130 = 43;
                }
                else {
                  int v130 = 45;
                }
                id v131 = object_getClassName(v257);
                uint64_t v132 = sel_getName("sendCreateKey:response:");
                id v133 = [v255 length];
                *(_DWORD *)buf = 67110146;
                *(_DWORD *)&uint8_t buf[4] = v130;
                __int16 v289 = 2082;
                v290 = v131;
                __int16 v291 = 2082;
                v292 = v132;
                __int16 v293 = 1024;
                int v294 = 230;
                __int16 v295 = 2048;
                *(void *)uint64_t v296 = v133;
                _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", buf, 0x2Cu);
              }

              id v134 = objc_alloc((Class)NSError);
              uint64_t v135 = +[NSString stringWithUTF8String:"nfcd"];
              NSErrorUserInfoKey v299 = NSLocalizedDescriptionKey;
              uint64_t v136 = +[NSString stringWithUTF8String:"Commmand Error"];
              *(void *)buf = v136;
              id v137 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v299 count:1];
              id v138 = (void *)v135;
              int v65 = (NSString *)[v134 initWithDomain:v135 code:16 userInfo:v137];

              id v115 = 0;
              int v44 = v255;
            }
            goto LABEL_102;
          }
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v141 = NFLogGetLogger();
        if (v141)
        {
          id v142 = (void (*)(uint64_t, const char *, ...))v141;
          __int16 v143 = object_getClass(a1);
          BOOL v144 = class_isMetaClass(v143);
          __int16 v145 = object_getClassName(a1);
          id v146 = sel_getName("sendCreateKey:response:");
          uint64_t v245 = [v44 status];
          uint64_t v147 = 45;
          if (v144) {
            uint64_t v147 = 43;
          }
          v142(3, "%c[%{public}s %{public}s]:%i Failed to create key: 0x%04x", v147, v145, v146, 239, v245);
        }
        int v148 = v12;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v149 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
        {
          uint64_t v150 = object_getClass(v257);
          if (class_isMetaClass(v150)) {
            int v151 = 43;
          }
          else {
            int v151 = 45;
          }
          int v152 = object_getClassName(v257);
          BOOL v153 = sel_getName("sendCreateKey:response:");
          unsigned int v154 = [v44 status];
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v151;
          __int16 v289 = 2082;
          v290 = v152;
          __int16 v291 = 2082;
          v292 = v153;
          __int16 v293 = 1024;
          int v294 = 239;
          __int16 v295 = 1024;
          *(_DWORD *)uint64_t v296 = v154;
          _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create key: 0x%04x", buf, 0x28u);
        }

        id v155 = objc_alloc((Class)NSError);
        id v156 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v299 = NSLocalizedDescriptionKey;
        id v157 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)buf = v157;
        int v158 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v299 count:1];
        int v65 = (NSString *)[v155 initWithDomain:v156 code:16 userInfo:v158];

        id v115 = 0;
        int v44 = v255;
        NSErrorUserInfoKey v45 = v116;
        BOOL v12 = v148;
        goto LABEL_102;
      }
      __int16 v46 = [v44 response];
      id v47 = [v46 length];

      if ((unint64_t)v47 > 0xA8)
      {
        id v115 = [v44 response];
        int v65 = 0;
LABEL_102:

        NSErrorUserInfoKey v45 = v65;
        __int16 v43 = (void *)v252;
        a1 = v257;
        goto LABEL_103;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v48 = NFLogGetLogger();
      if (v48)
      {
        int v49 = (void (*)(uint64_t, const char *, ...))v48;
        BOOL v50 = object_getClass(a1);
        BOOL v248 = class_isMetaClass(v50);
        v253 = object_getClassName(a1);
        id v51 = sel_getName("sendCreateKey:response:");
        int v52 = [v44 response];
        id v242 = [v52 length];
        uint64_t v53 = 45;
        if (v248) {
          uint64_t v53 = 43;
        }
        v49(3, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", v53, v253, v51, 201, v242);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v54 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        uint64_t v55 = object_getClass(v257);
        if (class_isMetaClass(v55)) {
          int v56 = 43;
        }
        else {
          int v56 = 45;
        }
        int v57 = object_getClassName(v257);
        uint32_t v58 = sel_getName("sendCreateKey:response:");
        id v59 = [v44 response];
        id v60 = [v59 length];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v56;
        __int16 v289 = 2082;
        v290 = v57;
        __int16 v291 = 2082;
        v292 = v58;
        __int16 v293 = 1024;
        int v294 = 201;
        __int16 v295 = 2048;
        *(void *)uint64_t v296 = v60;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid response size to create key: %lu bytes", buf, 0x2Cu);
      }
      id v61 = objc_alloc((Class)NSError);
      int v62 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v300 = NSLocalizedDescriptionKey;
      id v63 = +[NSString stringWithUTF8String:"Commmand Error"];
      *(void *)buf = v63;
      BOOL v64 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v300 count:1];
      int v65 = (NSString *)[v61 initWithDomain:v62 code:16 userInfo:v64];
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v104 = NFLogGetLogger();
      if (v104)
      {
        int v105 = (void (*)(uint64_t, const char *, ...))v104;
        id v106 = object_getClass(a1);
        BOOL v107 = class_isMetaClass(v106);
        uint64_t v108 = object_getClassName(a1);
        uint64_t v237 = sel_getName("sendCreateKey:response:");
        BOOL v189 = !v107;
        __int16 v43 = (void *)v252;
        uint64_t v109 = 45;
        if (!v189) {
          uint64_t v109 = 43;
        }
        v105(3, "%c[%{public}s %{public}s]:%i Failed to create key - no response", v109, v108, v237, 196);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v110 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
      {
        id v111 = object_getClass(a1);
        if (class_isMetaClass(v111)) {
          int v112 = 43;
        }
        else {
          int v112 = 45;
        }
        uint64_t v113 = object_getClassName(a1);
        id v114 = sel_getName("sendCreateKey:response:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v112;
        __int16 v289 = 2082;
        v290 = v113;
        __int16 v43 = (void *)v252;
        __int16 v291 = 2082;
        v292 = v114;
        __int16 v293 = 1024;
        int v294 = 196;
        _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create key - no response", buf, 0x22u);
      }

      if (v45)
      {
        id v115 = 0;
LABEL_103:
        id v169 = v115;

        if (v45 || !v169)
        {
          id v206 = v169;
          v279[0] = &off_10031AE00;
          v278[0] = @"peerPaymentEnrollmentErrorStep";
          v278[1] = @"peerPaymentEnrollmentErrorCode";
          v207 = +[NSNumber numberWithInteger:[(NSString *)v45 code]];
          v279[1] = v207;
          v278[2] = @"peerPaymentEnrollmentStartTime";
          int v208 = +[NSNumber numberWithUnsignedLongLong:v250];
          v279[2] = v208;
          id v96 = +[NSDictionary dictionaryWithObjects:v279 forKeys:v278 count:3];

          sub_10020328C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v96);
          if (v45)
          {
            NSErrorUserInfoKey v13 = v45;
            NSErrorUserInfoKey v14 = v13;
          }
          else
          {
            id v223 = objc_alloc((Class)NSError);
            +[NSString stringWithUTF8String:"nfcd"];
            v225 = int v224 = v15;
            NSErrorUserInfoKey v276 = NSLocalizedDescriptionKey;
            v226 = +[NSString stringWithUTF8String:"Unknown Error"];
            v277 = v226;
            +[NSDictionary dictionaryWithObjects:&v277 forKeys:&v276 count:1];
            v228 = uint64_t v227 = v96;
            NSErrorUserInfoKey v14 = (NSErrorUserInfoKey)[v223 initWithDomain:v225 code:6 userInfo:v228];

            id v96 = v227;
            uint64_t v15 = v224;
            __int16 v43 = (void *)v252;
            NSErrorUserInfoKey v13 = 0;
          }
          id v5 = v251;
          id v98 = v206;
        }
        else
        {
          id v246 = v169;
          uint64_t v170 = +[NFTLV TLVsWithData:v169];
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v171 = NFLogGetLogger();
          uint64_t v172 = (void (*)(uint64_t, const char *, ...))v171;
          int v249 = (char *)v170;
          if (v170)
          {
            id v5 = v251;
            if (v171)
            {
              __int16 v173 = object_getClass(a1);
              BOOL v174 = class_isMetaClass(v173);
              v231 = object_getClassName(a1);
              int v239 = sel_getName("performPeerPaymentEnrollment:response:");
              uint64_t v175 = 45;
              if (v174) {
                uint64_t v175 = 43;
              }
              v172(6, "%c[%{public}s %{public}s]:%i rTLVs = %{public}@", v175, v231, v239, 327, v170);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            long long v176 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
            {
              int v177 = object_getClass(a1);
              if (class_isMetaClass(v177)) {
                int v178 = 43;
              }
              else {
                int v178 = 45;
              }
              BOOL v179 = object_getClassName(a1);
              int v180 = sel_getName("performPeerPaymentEnrollment:response:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v178;
              __int16 v289 = 2082;
              v290 = v179;
              __int16 v291 = 2082;
              v292 = v180;
              __int16 v293 = 1024;
              int v294 = 327;
              __int16 v295 = 2114;
              *(void *)uint64_t v296 = v249;
              _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i rTLVs = %{public}@", buf, 0x2Cu);
            }

            id v181 = [objc_alloc((Class)NSMutableArray) initWithArray:v15];
            if (v181)
            {
              v256 = v15;
              long long v260 = 0u;
              long long v261 = 0u;
              long long v258 = 0u;
              long long v259 = 0u;
              id v182 = v249;
              id v183 = [v182 countByEnumeratingWithState:&v258 objects:v271 count:16];
              if (v183)
              {
                id v184 = v183;
                uint64_t v185 = *(void *)v259;
                do
                {
                  for (unint64_t i = 0; i != v184; unint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v259 != v185) {
                      objc_enumerationMutation(v182);
                    }
                    long long v187 = *(void **)(*((void *)&v258 + 1) + 8 * i);
                    unsigned int v188 = [v187 tag];
                    BOOL v189 = v188 - 65 > 0x18 || ((1 << (v188 - 65)) & 0x1000007) == 0;
                    if (!v189 || v188 == 32585 || v188 == 24375) {
                      [v181 addObject:v187];
                    }
                  }
                  id v184 = [v182 countByEnumeratingWithState:&v258 objects:v271 count:16];
                }
                while (v184);
              }

              id v5 = v251;
              __int16 v43 = (void *)v252;
              uint64_t v15 = v256;
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v192 = NFLogGetLogger();
            if (v192)
            {
              v193 = (void (*)(uint64_t, const char *, ...))v192;
              uint64_t v194 = object_getClass(v257);
              BOOL v195 = class_isMetaClass(v194);
              uint64_t v232 = object_getClassName(v257);
              v240 = sel_getName("performPeerPaymentEnrollment:response:");
              uint64_t v196 = 45;
              if (v195) {
                uint64_t v196 = 43;
              }
              id v5 = v251;
              v193(6, "%c[%{public}s %{public}s]:%i preSURFCertificate = %{public}@", v196, v232, v240, 348, v181);
            }
            __int16 v197 = v15;
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            char v198 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
            {
              int v199 = object_getClass(v257);
              if (class_isMetaClass(v199)) {
                int v200 = 43;
              }
              else {
                int v200 = 45;
              }
              char v201 = object_getClassName(v257);
              __int16 v202 = sel_getName("performPeerPaymentEnrollment:response:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v200;
              __int16 v289 = 2082;
              v290 = v201;
              __int16 v291 = 2082;
              v292 = v202;
              __int16 v293 = 1024;
              int v294 = 348;
              __int16 v295 = 2114;
              *(void *)uint64_t v296 = v181;
              _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i preSURFCertificate = %{public}@", buf, 0x2Cu);
            }

            char v203 = +[NFTLV TLVWithTag:32545 children:v181];
            *uint64_t v247 = [v203 asData];

            v269[0] = @"peerPaymentEnrollmentErrorStep";
            v269[1] = @"peerPaymentEnrollmentErrorCode";
            v270[0] = &off_10031AE48;
            v270[1] = &off_10031AE60;
            v269[2] = @"peerPaymentEnrollmentStartTime";
            unsigned __int8 v204 = +[NSNumber numberWithUnsignedLongLong:v250];
            v270[2] = v204;
            unsigned __int8 v205 = +[NSDictionary dictionaryWithObjects:v270 forKeys:v269 count:3];

            sub_10020328C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v205);
            NSErrorUserInfoKey v14 = 0;
          }
          else
          {
            __int16 v197 = v15;
            if (v171)
            {
              v209 = object_getClass(a1);
              BOOL v210 = class_isMetaClass(v209);
              unsigned int v211 = a1;
              __int16 v212 = object_getClassName(a1);
              v241 = sel_getName("performPeerPaymentEnrollment:response:");
              uint64_t v213 = 45;
              if (v210) {
                uint64_t v213 = 43;
              }
              v233 = v212;
              a1 = v211;
              v172(3, "%c[%{public}s %{public}s]:%i Failed to parse TLV from create key response", v213, v233, v241, 318);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            __int16 v214 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
            {
              BOOL v215 = object_getClass(a1);
              if (class_isMetaClass(v215)) {
                int v216 = 43;
              }
              else {
                int v216 = 45;
              }
              CFStringRef v217 = object_getClassName(a1);
              CFStringRef v218 = sel_getName("performPeerPaymentEnrollment:response:");
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v216;
              __int16 v289 = 2082;
              v290 = v217;
              __int16 v291 = 2082;
              v292 = v218;
              __int16 v293 = 1024;
              int v294 = 318;
              _os_log_impl((void *)&_mh_execute_header, v214, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to parse TLV from create key response", buf, 0x22u);
            }

            v274[0] = @"peerPaymentEnrollmentErrorStep";
            v274[1] = @"peerPaymentEnrollmentErrorCode";
            v275[0] = &off_10031AE18;
            v275[1] = &off_10031AE30;
            v274[2] = @"peerPaymentEnrollmentStartTime";
            CFStringRef v219 = +[NSNumber numberWithUnsignedLongLong:v250];
            v275[2] = v219;
            id v181 = +[NSDictionary dictionaryWithObjects:v275 forKeys:v274 count:3];

            sub_10020328C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v181);
            id v220 = objc_alloc((Class)NSError);
            unsigned __int8 v205 = +[NSString stringWithUTF8String:"nfcd"];
            NSErrorUserInfoKey v272 = NSLocalizedDescriptionKey;
            __int16 v221 = +[NSString stringWithUTF8String:"Decoding Error"];
            v273 = v221;
            uint64_t v222 = +[NSDictionary dictionaryWithObjects:&v273 forKeys:&v272 count:1];
            NSErrorUserInfoKey v14 = (NSErrorUserInfoKey)[v220 initWithDomain:v205 code:23 userInfo:v222];

            id v5 = v251;
            __int16 v43 = (void *)v252;
          }

          NSErrorUserInfoKey v13 = 0;
          uint64_t v15 = v197;
          id v98 = v246;
          id v96 = v249;
        }
LABEL_161:

LABEL_162:
        goto LABEL_163;
      }
      id v139 = objc_alloc((Class)NSError);
      NSErrorUserInfoKey v45 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v300 = NSLocalizedDescriptionKey;
      int v44 = +[NSString stringWithUTF8String:"Commmand Error"];
      *(void *)buf = v44;
      uint64_t v140 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v300 count:1];
      int v65 = (NSString *)[v139 initWithDomain:v45 code:16 userInfo:v140];
    }
    id v115 = 0;
    goto LABEL_102;
  }
  NSErrorUserInfoKey v14 = 0;
LABEL_164:

  return v14;
}

void *sub_10009BB7C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v235 = 0;
  uint64_t v232 = objc_opt_new();
  if (!v232)
  {
    if (a3)
    {
      id v38 = objc_alloc((Class)NSError);
      int v28 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v272 = NSLocalizedDescriptionKey;
      id v35 = +[NSString stringWithUTF8String:"No resources"];
      id v273 = v35;
      __int16 v39 = +[NSDictionary dictionaryWithObjects:&v273 forKeys:&v272 count:1];
      *a3 = [v38 initWithDomain:v28 code:34 userInfo:v39];

      uint64_t v232 = 0;
LABEL_101:
      a3 = 0;
      goto LABEL_102;
    }
    uint64_t v232 = 0;
    goto LABEL_106;
  }
  id v6 = [v5 appleTransactionHash];
  id v7 = +[NSData NF_dataWithHexString:v6];
  id v8 = [v7 length];

  if (v8 != (id)32)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      __int16 v41 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      NSErrorUserInfoKey v45 = v5;
      Name = sel_getName("createSURFSpecificInput:error:");
      id v47 = a3;
      [v45 appleTransactionHash];
      int v49 = v48 = a1;
      BOOL v50 = +[NSData NF_dataWithHexString:v49];
      id v226 = [v50 length];
      CFStringRef v217 = Name;
      id v5 = v45;
      uint64_t v51 = 45;
      if (isMetaClass) {
        uint64_t v51 = 43;
      }
      v41(3, "%c[%{public}s %{public}s]:%i Invalid apple transaction hash length : %d", v51, ClassName, v217, 378, v226);

      a3 = v47;
      a1 = v48;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v52 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = object_getClass(a1);
      if (class_isMetaClass(v53)) {
        int v54 = 43;
      }
      else {
        int v54 = 45;
      }
      uint64_t v55 = object_getClassName(a1);
      int v56 = sel_getName("createSURFSpecificInput:error:");
      int v57 = [v5 appleTransactionHash];
      uint32_t v58 = +[NSData NF_dataWithHexString:v57];
      *(_DWORD *)buf = 67110146;
      int v263 = v54;
      __int16 v264 = 2082;
      __int16 v265 = v55;
      __int16 v266 = 2082;
      id v267 = v56;
      __int16 v268 = 1024;
      int v269 = 378;
      __int16 v270 = 1024;
      unsigned int v271 = [v58 length];
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid apple transaction hash length : %d", buf, 0x28u);
    }
    if (!a3) {
      goto LABEL_106;
    }
    id v59 = objc_alloc((Class)NSError);
    int v28 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v260 = NSLocalizedDescriptionKey;
    id v35 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    id v261 = v35;
    id v60 = &v261;
    id v61 = &v260;
    goto LABEL_40;
  }
  id v231 = a1;
  uint64_t v9 = [v5 publicTransactionHash];
  id v10 = +[NSData NF_dataWithHexString:v9];
  id v11 = [v10 length];

  if (v11 != (id)32)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v62 = NFLogGetLogger();
    id v63 = v231;
    if (v62)
    {
      BOOL v64 = (void (*)(uint64_t, const char *, ...))v62;
      int v65 = object_getClass(v231);
      BOOL v66 = class_isMetaClass(v65);
      BOOL v67 = object_getClassName(v231);
      BOOL v68 = sel_getName("createSURFSpecificInput:error:");
      id v69 = v5;
      [v5 publicTransactionHash];
      v71 = id v70 = a3;
      id v72 = +[NSData NF_dataWithHexString:v71];
      id v227 = [v72 length];
      BOOL v73 = !v66;
      id v63 = v231;
      uint64_t v74 = 45;
      if (!v73) {
        uint64_t v74 = 43;
      }
      v64(3, "%c[%{public}s %{public}s]:%i Invalid public transaction hash length : %d", v74, v67, v68, 383, v227);

      id v5 = v69;
      a3 = v70;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v75 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      int v76 = object_getClass(v63);
      if (class_isMetaClass(v76)) {
        int v77 = 43;
      }
      else {
        int v77 = 45;
      }
      uint64_t v78 = object_getClassName(v63);
      unsigned int v79 = sel_getName("createSURFSpecificInput:error:");
      uint64_t v80 = [v5 publicTransactionHash];
      uint64_t v81 = +[NSData NF_dataWithHexString:v80];
      *(_DWORD *)buf = 67110146;
      int v263 = v77;
      __int16 v264 = 2082;
      __int16 v265 = v78;
      __int16 v266 = 2082;
      id v267 = v79;
      __int16 v268 = 1024;
      int v269 = 383;
      __int16 v270 = 1024;
      unsigned int v271 = [v81 length];
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid public transaction hash length : %d", buf, 0x28u);
    }
    if (!a3) {
      goto LABEL_106;
    }
    id v59 = objc_alloc((Class)NSError);
    int v28 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v258 = NSLocalizedDescriptionKey;
    id v35 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    id v259 = v35;
    id v60 = &v259;
    id v61 = &v258;
LABEL_40:
    uint64_t v82 = +[NSDictionary dictionaryWithObjects:v60 forKeys:v61 count:1];
    *a3 = [v59 initWithDomain:v28 code:10 userInfo:v82];
LABEL_100:

    goto LABEL_101;
  }
  BOOL v12 = a3;
  NSErrorUserInfoKey v13 = [v5 appleTransactionHash];
  NSErrorUserInfoKey v14 = +[NSData NF_dataWithHexString:v13];
  uint64_t v15 = +[NFTLV TLVWithTag:145 value:v14];

  if (!v15)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v83 = NFLogGetLogger();
    if (v83)
    {
      id v84 = (void (*)(uint64_t, const char *, ...))v83;
      BOOL v85 = object_getClass(v231);
      BOOL v86 = class_isMetaClass(v85);
      uint64_t v87 = object_getClassName(v231);
      CFStringRef v218 = sel_getName("createSURFSpecificInput:error:");
      uint64_t v88 = 45;
      if (v86) {
        uint64_t v88 = 43;
      }
      v84(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v88, v87, v218, 389);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v89 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      int v90 = object_getClass(v231);
      if (class_isMetaClass(v90)) {
        int v91 = 43;
      }
      else {
        int v91 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v263 = v91;
      __int16 v264 = 2082;
      __int16 v265 = object_getClassName(v231);
      __int16 v266 = 2082;
      id v267 = sel_getName("createSURFSpecificInput:error:");
      __int16 v268 = 1024;
      int v269 = 389;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (!a3) {
      goto LABEL_105;
    }
    id v92 = objc_alloc((Class)NSError);
    int v28 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v256 = NSLocalizedDescriptionKey;
    id v35 = +[NSString stringWithUTF8String:"No resources"];
    id v257 = v35;
    id v93 = &v257;
    id v94 = &v256;
    goto LABEL_64;
  }
  [v232 addObject:v15];
  uint64_t v16 = [v5 publicTransactionHash];
  +[NSData NF_dataWithHexString:v16];
  uint64_t v18 = v17 = v5;
  id v19 = +[NFTLV TLVWithTag:146 value:v18];

  if (!v19)
  {
    id v5 = v17;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v95 = NFLogGetLogger();
    if (v95)
    {
      id v96 = (void (*)(uint64_t, const char *, ...))v95;
      int v97 = object_getClass(v231);
      BOOL v98 = class_isMetaClass(v97);
      id v99 = object_getClassName(v231);
      CFStringRef v219 = sel_getName("createSURFSpecificInput:error:");
      uint64_t v100 = 45;
      if (v98) {
        uint64_t v100 = 43;
      }
      v96(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v100, v99, v219, 392);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v101 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      uint64_t v102 = object_getClass(v231);
      if (class_isMetaClass(v102)) {
        int v103 = 43;
      }
      else {
        int v103 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v263 = v103;
      __int16 v264 = 2082;
      __int16 v265 = object_getClassName(v231);
      __int16 v266 = 2082;
      id v267 = sel_getName("createSURFSpecificInput:error:");
      __int16 v268 = 1024;
      int v269 = 392;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (!a3) {
      goto LABEL_105;
    }
    id v92 = objc_alloc((Class)NSError);
    int v28 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v254 = NSLocalizedDescriptionKey;
    id v35 = +[NSString stringWithUTF8String:"No resources"];
    id v255 = v35;
    id v93 = &v255;
    id v94 = &v254;
LABEL_64:
    uint64_t v82 = +[NSDictionary dictionaryWithObjects:v93 forKeys:v94 count:1];
    uint64_t v104 = v92;
    int v105 = v28;
    uint64_t v106 = 34;
LABEL_99:
    *a3 = [v104 initWithDomain:v105 code:v106 userInfo:v82];
    goto LABEL_100;
  }
  [v232 addObject:v19];
  uint64_t v20 = [v17 transactionCurrency];
  id v21 = sub_1001D703C((uint64_t)NFECommercePaymentRequestEncoder, v20, &v235);

  if (!v21)
  {
    id v5 = v17;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v107 = NFLogGetLogger();
    if (v107)
    {
      uint64_t v108 = (void (*)(uint64_t, const char *, ...))v107;
      uint64_t v109 = object_getClass(v231);
      BOOL v110 = class_isMetaClass(v109);
      id v111 = object_getClassName(v231);
      id v220 = sel_getName("createSURFSpecificInput:error:");
      uint64_t v112 = 45;
      if (v110) {
        uint64_t v112 = 43;
      }
      v108(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v112, v111, v220, 395);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v113 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
    {
      id v114 = object_getClass(v231);
      if (class_isMetaClass(v114)) {
        int v115 = 43;
      }
      else {
        int v115 = 45;
      }
      id v116 = object_getClassName(v231);
      int v117 = sel_getName("createSURFSpecificInput:error:");
      *(_DWORD *)buf = 67109890;
      int v263 = v115;
      __int16 v264 = 2082;
      __int16 v265 = v116;
      __int16 v266 = 2082;
      id v267 = v117;
      __int16 v268 = 1024;
      int v269 = 395;
      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (a3)
    {
      id v118 = objc_alloc((Class)NSError);
      int v28 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v252 = NSLocalizedDescriptionKey;
      id v35 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      id v253 = v35;
      uint64_t v119 = &v253;
      NSErrorUserInfoKey v120 = &v252;
LABEL_98:
      uint64_t v82 = +[NSDictionary dictionaryWithObjects:v119 forKeys:v120 count:1];
      uint64_t v104 = v118;
      int v105 = v28;
      uint64_t v106 = 10;
      goto LABEL_99;
    }
LABEL_105:
    a3 = 0;
LABEL_106:
    uint64_t v34 = 0;
    goto LABEL_107;
  }
  [v232 addObject:v21];
  uint64_t v22 = [v17 transactionAmount];
  id v23 = sub_1001D756C((uint64_t)NFECommercePaymentRequestEncoder, v22, v235);

  if (!v23)
  {
    id v5 = v17;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v121 = NFLogGetLogger();
    if (v121)
    {
      id v122 = (void (*)(uint64_t, const char *, ...))v121;
      unsigned int v123 = object_getClass(v231);
      BOOL v124 = class_isMetaClass(v123);
      __int16 v125 = object_getClassName(v231);
      __int16 v221 = sel_getName("createSURFSpecificInput:error:");
      uint64_t v126 = 45;
      if (v124) {
        uint64_t v126 = 43;
      }
      v122(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v126, v125, v221, 398);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v127 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
    {
      __int16 v128 = object_getClass(v231);
      if (class_isMetaClass(v128)) {
        int v129 = 43;
      }
      else {
        int v129 = 45;
      }
      int v130 = object_getClassName(v231);
      id v131 = sel_getName("createSURFSpecificInput:error:");
      *(_DWORD *)buf = 67109890;
      int v263 = v129;
      __int16 v264 = 2082;
      __int16 v265 = v130;
      __int16 v266 = 2082;
      id v267 = v131;
      __int16 v268 = 1024;
      int v269 = 398;
      _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (a3)
    {
      id v118 = objc_alloc((Class)NSError);
      int v28 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v250 = NSLocalizedDescriptionKey;
      id v35 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      id v251 = v35;
      uint64_t v119 = &v251;
      NSErrorUserInfoKey v120 = &v250;
      goto LABEL_98;
    }
    goto LABEL_105;
  }
  [v232 addObject:v23];
  __int16 v24 = [v17 transactionDate];
  int v25 = sub_1001D67D0((uint64_t)NFECommercePaymentRequestEncoder, v24);

  if (!v25)
  {
    id v5 = v17;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v132 = NFLogGetLogger();
    if (v132)
    {
      id v133 = (void (*)(uint64_t, const char *, ...))v132;
      id v134 = object_getClass(v231);
      BOOL v135 = class_isMetaClass(v134);
      uint64_t v136 = object_getClassName(v231);
      uint64_t v222 = sel_getName("createSURFSpecificInput:error:");
      uint64_t v137 = 45;
      if (v135) {
        uint64_t v137 = 43;
      }
      v133(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v137, v136, v222, 401);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v138 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
    {
      id v139 = object_getClass(v231);
      if (class_isMetaClass(v139)) {
        int v140 = 43;
      }
      else {
        int v140 = 45;
      }
      uint64_t v141 = object_getClassName(v231);
      id v142 = sel_getName("createSURFSpecificInput:error:");
      *(_DWORD *)buf = 67109890;
      int v263 = v140;
      __int16 v264 = 2082;
      __int16 v265 = v141;
      __int16 v266 = 2082;
      id v267 = v142;
      __int16 v268 = 1024;
      int v269 = 401;
      _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
    }

    if (a3)
    {
      id v118 = objc_alloc((Class)NSError);
      int v28 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v248 = NSLocalizedDescriptionKey;
      id v35 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      id v249 = v35;
      uint64_t v119 = &v249;
      NSErrorUserInfoKey v120 = &v248;
      goto LABEL_98;
    }
    goto LABEL_105;
  }
  v230 = a3;
  [v232 addObject:v25];
  uint64_t v26 = [v17 transactionCountry];
  a3 = sub_1001D6AE4((uint64_t)NFECommercePaymentRequestEncoder, v26);

  id v5 = v17;
  if (a3)
  {
    [v232 addObject:a3];
    uint64_t v27 = +[NFTLV TLVWithTag:148 children:v232];
    if (v27)
    {
      int v28 = (void *)v27;
      int v229 = v17;
      BOOL v29 = objc_opt_new();

      char v234 = 0;
      id v30 = [objc_alloc((Class)NSData) initWithBytes:&v234 length:1];
      id v31 = +[NFTLV TLVWithTag:144 value:v30];

      if (!v31)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v159 = NFLogGetLogger();
        uint64_t v34 = v12;
        if (v159)
        {
          __int16 v160 = (void (*)(uint64_t, const char *, ...))v159;
          id v161 = object_getClass(v231);
          BOOL v162 = class_isMetaClass(v161);
          uint64_t v163 = object_getClassName(v231);
          int v224 = sel_getName("createSURFSpecificInput:error:");
          uint64_t v164 = 45;
          if (v162) {
            uint64_t v164 = 43;
          }
          v160(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v164, v163, v224, 418);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v165 = NFSharedLogGetLogger();
        id v5 = v17;
        if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
        {
          int v166 = object_getClass(v231);
          if (class_isMetaClass(v166)) {
            int v167 = 43;
          }
          else {
            int v167 = 45;
          }
          uint64_t v168 = object_getClassName(v231);
          id v169 = sel_getName("createSURFSpecificInput:error:");
          *(_DWORD *)buf = 67109890;
          int v263 = v167;
          __int16 v264 = 2082;
          __int16 v265 = v168;
          __int16 v266 = 2082;
          id v267 = v169;
          __int16 v268 = 1024;
          int v269 = 418;
          _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
        }

        if (!v230)
        {
          a3 = 0;
          uint64_t v232 = v29;
          goto LABEL_104;
        }
        id v170 = objc_alloc((Class)NSError);
        id v35 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v242 = NSLocalizedDescriptionKey;
        uint64_t v171 = +[NSString stringWithUTF8String:"No resources"];
        uint64_t v243 = v171;
        uint64_t v172 = +[NSDictionary dictionaryWithObjects:&v243 forKeys:&v242 count:1];
        void *v230 = [v170 initWithDomain:v35 code:34 userInfo:v172];

        a3 = 0;
        uint64_t v34 = 0;
LABEL_134:
        uint64_t v232 = v29;
        goto LABEL_103;
      }
      [v29 addObject:v31];
      __int16 v32 = [v17 nonce];
      id v33 = [v32 length];

      uint64_t v34 = v230;
      if (v33 == (id)4)
      {
        int v233 = 0;
        id v35 = [objc_alloc((Class)NSMutableData) initWithBytes:&v233 length:4];
        int v36 = [v17 nonce];
        [v35 appendData:v36];

        __int16 v37 = v231;
        if (v35)
        {
          a3 = +[NFTLV TLVWithTag:145 value:v35];

          if (a3)
          {
            [v29 addObject:a3];
            [v29 addObject:v28];
            uint64_t v34 = +[NFTLV TLVWithTag:32525 children:v29];
            uint64_t v232 = v29;
LABEL_153:
            id v5 = v229;
            goto LABEL_103;
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v199 = NFLogGetLogger();
          id v5 = v17;
          if (v199)
          {
            int v200 = (void (*)(uint64_t, const char *, ...))v199;
            char v201 = object_getClass(v231);
            BOOL v202 = class_isMetaClass(v201);
            char v203 = v29;
            unsigned __int8 v204 = object_getClassName(v231);
            BOOL v225 = sel_getName("createSURFSpecificInput:error:");
            BOOL v73 = !v202;
            __int16 v37 = v231;
            uint64_t v205 = 45;
            if (!v73) {
              uint64_t v205 = 43;
            }
            int v216 = v204;
            BOOL v29 = v203;
            v200(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v205, v216, v225, 435);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v206 = NFSharedLogGetLogger();
          uint64_t v34 = v230;
          if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
          {
            v207 = object_getClass(v37);
            if (class_isMetaClass(v207)) {
              int v208 = 43;
            }
            else {
              int v208 = 45;
            }
            v209 = object_getClassName(v37);
            BOOL v210 = sel_getName("createSURFSpecificInput:error:");
            *(_DWORD *)buf = 67109890;
            int v263 = v208;
            __int16 v264 = 2082;
            __int16 v265 = v209;
            __int16 v266 = 2082;
            id v267 = v210;
            __int16 v268 = 1024;
            int v269 = 435;
            _os_log_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
          }

          if (v230)
          {
            id v211 = objc_alloc((Class)NSError);
            __int16 v212 = +[NSString stringWithUTF8String:"nfcd"];
            NSErrorUserInfoKey v236 = NSLocalizedDescriptionKey;
            uint64_t v213 = +[NSString stringWithUTF8String:"No resources"];
            uint64_t v237 = v213;
            +[NSDictionary dictionaryWithObjects:&v237 forKeys:&v236 count:1];
            v215 = __int16 v214 = v29;
            void *v230 = [v211 initWithDomain:v212 code:34 userInfo:v215];

            a3 = 0;
            uint64_t v34 = 0;
            uint64_t v232 = v214;
            goto LABEL_103;
          }
          a3 = 0;
          goto LABEL_134;
        }
        if (v230)
        {
          id v194 = objc_alloc((Class)NSError);
          BOOL v195 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v238 = NSLocalizedDescriptionKey;
          uint64_t v196 = +[NSString stringWithUTF8String:"No resources"];
          int v239 = v196;
          +[NSDictionary dictionaryWithObjects:&v239 forKeys:&v238 count:1];
          char v198 = v197 = v29;
          void *v230 = [v194 initWithDomain:v195 code:34 userInfo:v198];

          id v35 = 0;
          uint64_t v34 = 0;
          uint64_t v232 = v197;
          goto LABEL_152;
        }
        id v35 = 0;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v173 = NFLogGetLogger();
        BOOL v174 = v231;
        if (v173)
        {
          uint64_t v175 = (void (*)(uint64_t, const char *, ...))v173;
          long long v176 = object_getClass(v231);
          BOOL v177 = class_isMetaClass(v176);
          int v178 = object_getClassName(v231);
          BOOL v179 = sel_getName("createSURFSpecificInput:error:");
          [v17 nonce];
          v181 = int v180 = v29;
          id v228 = [v181 length];
          uint64_t v34 = v230;
          BOOL v73 = !v177;
          BOOL v174 = v231;
          uint64_t v182 = 45;
          if (!v73) {
            uint64_t v182 = 43;
          }
          v175(3, "%c[%{public}s %{public}s]:%i Invalid nonce length : %d", v182, v178, v179, 422, v228);

          BOOL v29 = v180;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v183 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
        {
          id v184 = object_getClass(v174);
          if (class_isMetaClass(v184)) {
            int v185 = 43;
          }
          else {
            int v185 = 45;
          }
          id v186 = object_getClassName(v174);
          long long v187 = sel_getName("createSURFSpecificInput:error:");
          [v229 nonce];
          BOOL v189 = v188 = v29;
          unsigned int v190 = [v189 length];
          *(_DWORD *)buf = 67110146;
          int v263 = v185;
          __int16 v264 = 2082;
          __int16 v265 = v186;
          __int16 v266 = 2082;
          id v267 = v187;
          __int16 v268 = 1024;
          int v269 = 422;
          __int16 v270 = 1024;
          unsigned int v271 = v190;
          _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid nonce length : %d", buf, 0x28u);

          BOOL v29 = v188;
        }

        if (!v34)
        {
          uint64_t v232 = v29;
          a3 = v31;
          id v5 = v229;
          goto LABEL_104;
        }
        id v191 = objc_alloc((Class)NSError);
        id v35 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v240 = NSLocalizedDescriptionKey;
        uint64_t v192 = +[NSString stringWithUTF8String:"Invalid Parameter"];
        v241 = v192;
        v193 = +[NSDictionary dictionaryWithObjects:&v241 forKeys:&v240 count:1];
        *uint64_t v34 = [v191 initWithDomain:v35 code:10 userInfo:v193];

        uint64_t v34 = 0;
      }
      uint64_t v232 = v29;
LABEL_152:
      a3 = v31;
      goto LABEL_153;
    }
    uint64_t v34 = v12;
    if (!v12)
    {
      int v28 = 0;
      goto LABEL_104;
    }
    id v156 = objc_alloc((Class)NSError);
    id v35 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v244 = NSLocalizedDescriptionKey;
    id v157 = +[NSString stringWithUTF8String:"No resources"];
    uint64_t v245 = v157;
    int v158 = +[NSDictionary dictionaryWithObjects:&v245 forKeys:&v244 count:1];
    void *v230 = [v156 initWithDomain:v35 code:34 userInfo:v158];

    int v28 = 0;
LABEL_102:
    uint64_t v34 = 0;
LABEL_103:

LABEL_104:
    goto LABEL_107;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v144 = NFLogGetLogger();
  if (v144)
  {
    __int16 v145 = (void (*)(uint64_t, const char *, ...))v144;
    id v146 = object_getClass(v231);
    BOOL v147 = class_isMetaClass(v146);
    int v148 = object_getClassName(v231);
    id v223 = sel_getName("createSURFSpecificInput:error:");
    uint64_t v149 = 45;
    if (v147) {
      uint64_t v149 = 43;
    }
    v145(3, "%c[%{public}s %{public}s]:%i Invalid parameter", v149, v148, v223, 404);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v150 = NFSharedLogGetLogger();
  uint64_t v34 = v12;
  if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
  {
    int v151 = object_getClass(v231);
    if (class_isMetaClass(v151)) {
      int v152 = 43;
    }
    else {
      int v152 = 45;
    }
    BOOL v153 = object_getClassName(v231);
    unsigned int v154 = sel_getName("createSURFSpecificInput:error:");
    *(_DWORD *)buf = 67109890;
    int v263 = v152;
    __int16 v264 = 2082;
    __int16 v265 = v153;
    __int16 v266 = 2082;
    id v267 = v154;
    __int16 v268 = 1024;
    int v269 = 404;
    _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameter", buf, 0x22u);
  }

  if (v230)
  {
    id v155 = objc_alloc((Class)NSError);
    int v28 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v246 = NSLocalizedDescriptionKey;
    id v35 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    id v247 = v35;
    uint64_t v82 = +[NSDictionary dictionaryWithObjects:&v247 forKeys:&v246 count:1];
    void *v230 = [v155 initWithDomain:v28 code:10 userInfo:v82];
    goto LABEL_100;
  }
  a3 = 0;
LABEL_107:

  return v34;
}

NSObject *sub_10009D720(void *a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15 = a2;
  id v200 = a4;
  id v199 = a5;
  id v16 = a6;
  id v17 = a7;
  char v201 = objc_opt_new();
  uint64_t v18 = objc_opt_new();
  if (v18)
  {
    id v19 = (void *)v18;
    unsigned int v196 = a3;
    char v198 = v17;
    char v202 = byte_1003473B0;
    id v20 = [objc_alloc((Class)NSData) initWithBytes:&v202 length:1];
    id v21 = +[NFTLV TLVWithTag:196 value:v20];
    [v19 addObject:v21];

    uint64_t v22 = [v15 transferRequest];
    __int16 v197 = a8;
    id v23 = sub_10009BB7C(a1, v22, a8);

    if (!v23)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      __int16 v32 = v16;
      if (Logger)
      {
        int v54 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
        uint64_t v58 = 45;
        if (isMetaClass) {
          uint64_t v58 = 43;
        }
        v54(3, "%c[%{public}s %{public}s]:%i Failed to create SURF specific input", v58, ClassName, Name, 515);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v59 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        id v60 = object_getClass(a1);
        if (class_isMetaClass(v60)) {
          int v61 = 43;
        }
        else {
          int v61 = 45;
        }
        uint64_t v62 = object_getClassName(a1);
        id v63 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v61;
        __int16 v208 = 2082;
        v209 = v62;
        __int16 v210 = 2082;
        id v211 = v63;
        __int16 v212 = 1024;
        int v213 = 515;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create SURF specific input", buf, 0x22u);
      }
      __int16 v37 = 0;
      int v52 = 0;
      int v49 = v19;
      id v31 = (char *)v15;
      goto LABEL_123;
    }
    [v19 addObject:v23];
    __int16 v24 = +[NFTLV TLVWithTag:239 children:v19];

    int v25 = objc_opt_new();
    id v26 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283770 length:12];
    uint64_t v27 = +[NFTLV TLVWithTag:79 value:v26];
    [v25 addObject:v27];

    [v25 addObject:v24];
    BOOL v195 = v25;
    int v28 = +[NFTLV TLVWithTag:228 children:v25];

    BOOL v29 = [v28 asData];
    [v201 appendData:v29];

    id v30 = [v15 topUpRequest];

    id v31 = (char *)v15;
    __int16 v32 = v16;
    if (v30)
    {
      id v33 = [v15 topUpRequest];
      uint64_t v34 = sub_1001D812C((uint64_t)NFECommercePaymentRequestEncoder, v33, 0, v197);
      if (v34)
      {
        id v35 = +[NFTLV TLVWithTag:230 value:v34];
        if (v35)
        {
          int v36 = v35;
          __int16 v37 = v36;
        }
        else
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v74 = NFLogGetLogger();
          if (v74)
          {
            id v75 = (void (*)(uint64_t, const char *, ...))v74;
            int v76 = object_getClass(a1);
            BOOL v77 = class_isMetaClass(v76);
            uint64_t v78 = object_getClassName(a1);
            id v183 = sel_getName("createOsloSpecificInput:error:");
            uint64_t v79 = 45;
            if (v77) {
              uint64_t v79 = 43;
            }
            v75(3, "%c[%{public}s %{public}s]:%i Failed to create TLV.", v79, v78, v183, 455);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v80 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
          {
            uint64_t v81 = object_getClass(a1);
            if (class_isMetaClass(v81)) {
              int v82 = 43;
            }
            else {
              int v82 = 45;
            }
            uint64_t v83 = object_getClassName(a1);
            id v84 = sel_getName("createOsloSpecificInput:error:");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v82;
            id v31 = (char *)v15;
            __int16 v208 = 2082;
            v209 = v83;
            __int16 v210 = 2082;
            id v211 = v84;
            __int16 v212 = 1024;
            int v213 = 455;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV.", buf, 0x22u);
          }

          if (v197)
          {
            uint64_t v192 = (char *)objc_alloc((Class)NSError);
            +[NSString stringWithUTF8String:"nfcd"];
            BOOL v86 = v85 = v31;
            NSErrorUserInfoKey v220 = NSLocalizedDescriptionKey;
            uint64_t v87 = +[NSString stringWithUTF8String:"No resources"];
            *(void *)buf = v87;
            uint64_t v88 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v220 count:1];
            void *v197 = [v192 initWithDomain:v86 code:34 userInfo:v88];

            id v31 = v85;
          }
          int v36 = 0;
          __int16 v37 = 0;
        }
      }
      else
      {
        id v191 = v16;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v64 = NFLogGetLogger();
        if (v64)
        {
          int v65 = (void (*)(uint64_t, const char *, ...))v64;
          BOOL v66 = object_getClass(a1);
          BOOL v67 = class_isMetaClass(v66);
          BOOL v68 = object_getClassName(a1);
          uint64_t v182 = sel_getName("createOsloSpecificInput:error:");
          uint64_t v69 = 45;
          if (v67) {
            uint64_t v69 = 43;
          }
          v65(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", v69, v68, v182, 449);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v36 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          id v70 = object_getClass(a1);
          if (class_isMetaClass(v70)) {
            int v71 = 43;
          }
          else {
            int v71 = 45;
          }
          id v72 = object_getClassName(a1);
          BOOL v73 = sel_getName("createOsloSpecificInput:error:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v71;
          __int16 v208 = 2082;
          v209 = v72;
          __int16 v210 = 2082;
          id v211 = v73;
          __int16 v212 = 1024;
          int v213 = 449;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", buf, 0x22u);
        }
        __int16 v37 = 0;
        __int16 v32 = v191;
      }

      if (!v37)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v100 = NFLogGetLogger();
        id v17 = v198;
        if (v100)
        {
          BOOL v101 = (void (*)(uint64_t, const char *, ...))v100;
          uint64_t v102 = object_getClass(a1);
          BOOL v103 = class_isMetaClass(v102);
          uint64_t v104 = v31;
          int v105 = object_getClassName(a1);
          id v184 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
          uint64_t v106 = 45;
          if (v103) {
            uint64_t v106 = 43;
          }
          long long v176 = v105;
          id v31 = v104;
          v101(3, "%c[%{public}s %{public}s]:%i Failed to create Oslo specific input", v106, v176, v184, 534);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v59 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          uint64_t v107 = object_getClass(a1);
          if (class_isMetaClass(v107)) {
            int v108 = 43;
          }
          else {
            int v108 = 45;
          }
          uint64_t v109 = object_getClassName(a1);
          BOOL v110 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v108;
          __int16 v208 = 2082;
          v209 = v109;
          __int16 v210 = 2082;
          id v211 = v110;
          __int16 v212 = 1024;
          int v213 = 534;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create Oslo specific input", buf, 0x22u);
        }
        __int16 v37 = 0;
        int v52 = 0;
        goto LABEL_82;
      }
      int v89 = [v37 asData];
      [v201 appendData:v89];
    }
    else
    {
      __int16 v37 = v28;
    }
    id v17 = v198;
    kdebug_trace();
    int v90 = NFSharedSignpostLog();
    if (os_signpost_enabled(v90))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v90, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "acmGetOlsoType in", buf, 2u);
    }

    uint64_t v91 = sub_1002200C0((uint64_t)NFSSEWrapper, v200);
    kdebug_trace();
    id v92 = NFSharedSignpostLog();
    if (os_signpost_enabled(v92))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v92, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "acmGetOlsoType out", buf, 2u);
    }

    uint64_t v93 = v91 == 4;
    char v94 = v91 == 4 || v91 == 2;
    if (v91 == 2 || v91 == 4 || (uint64_t v93 = v91 == 3, v91 == 1) || v91 == 3)
    {
LABEL_63:
      id v95 = v201;
      unint64_t v96 = (unint64_t)[v95 length];
      int v204 = 849024;
      char v203 = 0;
      int v97 = objc_opt_new();
      [v97 appendBytes:&v204 length:4];
      if (v96 > 0xFF)
      {
        if (v96 >> 16)
        {
          if (v197)
          {
            unsigned int v190 = v93;
            id v111 = objc_alloc((Class)NSError);
            SEL v193 = v31;
            uint64_t v112 = +[NSString stringWithUTF8String:"nfcd"];
            NSErrorUserInfoKey v220 = NSLocalizedDescriptionKey;
            +[NSString stringWithUTF8String:"Invalid Parameter"];
            id v114 = v113 = v37;
            *(void *)buf = v114;
            int v115 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v220 count:1];
            id v116 = v111;
            uint64_t v93 = v190;
            void *v197 = [v116 initWithDomain:v112 code:10 userInfo:v115];

            id v31 = (char *)v193;
            __int16 v37 = v113;
          }
          id v59 = 0;
LABEL_86:

          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v117 = NFLogGetLogger();
          id v118 = (void (*)(uint64_t, const char *, ...))v117;
          if (v59)
          {
            uint64_t v119 = v93;
            SEL v194 = v31;
            if (v117)
            {
              NSErrorUserInfoKey v120 = object_getClass(a1);
              BOOL v121 = class_isMetaClass(v120);
              BOOL v177 = object_getClassName(a1);
              int v185 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              uint64_t v122 = 45;
              if (v121) {
                uint64_t v122 = 43;
              }
              v118(6, "%c[%{public}s %{public}s]:%i Sending data to be signed : %{public}@", v122, v177, v185, 569, v59);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            unsigned int v123 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v124 = object_getClass(a1);
              if (class_isMetaClass(v124)) {
                int v125 = 43;
              }
              else {
                int v125 = 45;
              }
              uint64_t v126 = object_getClassName(a1);
              uint64_t v127 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v125;
              __int16 v208 = 2082;
              v209 = v126;
              __int16 v210 = 2082;
              id v211 = v127;
              __int16 v212 = 1024;
              int v213 = 569;
              __int16 v214 = 2114;
              BOOL v215 = v59;
              _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Sending data to be signed : %{public}@", buf, 0x2Cu);
            }

            kdebug_trace();
            __int16 v128 = NFSharedSignpostLog();
            if (os_signpost_enabled(v128))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v128, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "authorizeAndSign in", buf, 2u);
            }

            int v129 = [a1 serialNumberAsData];
            int v52 = sub_100220920((uint64_t)NFSSEWrapper, 3, v59, v196, v200, v129, v94, v119, v199, v32, v198, 0, 0, 0, 0);

            kdebug_trace();
            int v130 = NFSharedSignpostLog();
            if (os_signpost_enabled(v130))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v130, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "NFSSEWRAPPER_CALL", "authorizeAndSign out", buf, 2u);
            }

            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v131 = NFLogGetLogger();
            uint64_t v132 = (void (*)(uint64_t, const char *, ...))v131;
            if (!v52)
            {
              if (v131)
              {
                uint64_t v150 = object_getClass(a1);
                BOOL v151 = class_isMetaClass(v150);
                int v152 = object_getClassName(a1);
                unsigned int v188 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
                uint64_t v153 = 45;
                if (v151) {
                  uint64_t v153 = 43;
                }
                v132(3, "%c[%{public}s %{public}s]:%i Failed to get signed data.", v153, v152, v188, 592);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              unsigned int v154 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
              {
                id v155 = object_getClass(a1);
                if (class_isMetaClass(v155)) {
                  int v156 = 43;
                }
                else {
                  int v156 = 45;
                }
                id v157 = object_getClassName(a1);
                int v158 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v156;
                __int16 v208 = 2082;
                v209 = v157;
                __int16 v210 = 2082;
                id v211 = v158;
                __int16 v212 = 1024;
                int v213 = 592;
                _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get signed data.", buf, 0x22u);
              }

              id v17 = v198;
              if (!v197)
              {
                int v52 = 0;
                id v31 = (char *)v194;
                int v49 = v195;
                goto LABEL_123;
              }
              id v159 = objc_alloc((Class)NSError);
              uint64_t v136 = +[NSString stringWithUTF8String:"nfcd"];
              NSErrorUserInfoKey v205 = NSLocalizedDescriptionKey;
              __int16 v160 = +[NSString stringWithUTF8String:"Unexpected Result"];
              id v206 = v160;
              id v161 = +[NSDictionary dictionaryWithObjects:&v206 forKeys:&v205 count:1];
              void *v197 = [v159 initWithDomain:v136 code:13 userInfo:v161];

              int v52 = 0;
              id v31 = (char *)v194;
              int v49 = v195;
              goto LABEL_122;
            }
            if (v131)
            {
              id v133 = object_getClass(a1);
              BOOL v134 = class_isMetaClass(v133);
              int v178 = object_getClassName(a1);
              id v186 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              uint64_t v135 = 45;
              if (v134) {
                uint64_t v135 = 43;
              }
              v132(6, "%c[%{public}s %{public}s]:%i Signed data is %{public}@.", v135, v178, v186, 595, v52);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v136 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v137 = object_getClass(a1);
              if (class_isMetaClass(v137)) {
                int v138 = 43;
              }
              else {
                int v138 = 45;
              }
              id v139 = object_getClassName(a1);
              int v140 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v138;
              __int16 v208 = 2082;
              v209 = v139;
              __int16 v210 = 2082;
              id v211 = v140;
              __int16 v212 = 1024;
              int v213 = 595;
              __int16 v214 = 2114;
              BOOL v215 = v52;
              _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Signed data is %{public}@.", buf, 0x2Cu);
            }
            id v17 = v198;
            id v31 = (char *)v194;
          }
          else
          {
            if (v117)
            {
              uint64_t v141 = object_getClass(a1);
              BOOL v142 = class_isMetaClass(v141);
              __int16 v143 = object_getClassName(a1);
              long long v187 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              uint64_t v144 = 45;
              if (v142) {
                uint64_t v144 = 43;
              }
              v118(3, "%c[%{public}s %{public}s]:%i Failed to create APDU", v144, v143, v187, 565);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v136 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
            {
              __int16 v145 = object_getClass(a1);
              if (class_isMetaClass(v145)) {
                int v146 = 43;
              }
              else {
                int v146 = 45;
              }
              BOOL v147 = object_getClassName(a1);
              int v148 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v146;
              __int16 v208 = 2082;
              v209 = v147;
              __int16 v210 = 2082;
              id v211 = v148;
              __int16 v212 = 1024;
              int v213 = 565;
              _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create APDU", buf, 0x22u);
            }
            int v52 = 0;
            id v17 = v198;
          }
          int v49 = v195;
LABEL_122:

          goto LABEL_123;
        }
        buf[0] = 0;
        buf[1] = BYTE1(v96);
        id buf[2] = v96;
        BOOL v98 = v97;
        uint64_t v99 = 3;
      }
      else
      {
        buf[0] = v96;
        BOOL v98 = v97;
        uint64_t v99 = 1;
      }
      [v98 appendBytes:buf length:v99];
      [v97 appendData:v95];
      [v97 appendBytes:&v203 length:1];
      id v59 = v97;
      goto LABEL_86;
    }
    if (v91 == 5)
    {
      uint64_t v93 = 1;
      goto LABEL_63;
    }
    BOOL v162 = v31;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v163 = NFLogGetLogger();
    if (v163)
    {
      uint64_t v164 = (void (*)(uint64_t, const char *, ...))v163;
      int v165 = object_getClass(a1);
      BOOL v166 = class_isMetaClass(v165);
      BOOL v179 = object_getClassName(a1);
      BOOL v189 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
      uint64_t v167 = 45;
      if (v166) {
        uint64_t v167 = 43;
      }
      v164(3, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", v167, v179, v189, 558, v91);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v168 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
    {
      id v169 = object_getClass(a1);
      if (class_isMetaClass(v169)) {
        int v170 = 43;
      }
      else {
        int v170 = 45;
      }
      uint64_t v171 = object_getClassName(a1);
      uint64_t v172 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v170;
      __int16 v208 = 2082;
      v209 = v171;
      __int16 v210 = 2082;
      id v211 = v172;
      __int16 v212 = 1024;
      int v213 = 558;
      __int16 v214 = 1024;
      LODWORD(v215) = v91;
      _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", buf, 0x28u);
    }

    if (!v197)
    {
      int v52 = 0;
      id v31 = v162;
      int v49 = v195;
      goto LABEL_124;
    }
    id v173 = objc_alloc((Class)NSError);
    id v59 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v216 = NSLocalizedDescriptionKey;
    BOOL v174 = +[NSString stringWithUTF8String:"Unexpected Result"];
    CFStringRef v217 = v174;
    uint64_t v175 = +[NSDictionary dictionaryWithObjects:&v217 forKeys:&v216 count:1];
    void *v197 = [v173 initWithDomain:v59 code:13 userInfo:v175];

    int v52 = 0;
    id v31 = v162;
LABEL_82:
    int v49 = v195;
LABEL_123:

LABEL_124:
    goto LABEL_125;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v38 = NFLogGetLogger();
  if (v38)
  {
    __int16 v39 = (void (*)(uint64_t, const char *, ...))v38;
    uint64_t v40 = object_getClass(a1);
    BOOL v41 = class_isMetaClass(v40);
    int v42 = object_getClassName(a1);
    int v180 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
    uint64_t v43 = 45;
    if (v41) {
      uint64_t v43 = 43;
    }
    v39(3, "%c[%{public}s %{public}s]:%i Failed to create TLV children", v43, v42, v180, 505);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v44 = NFSharedLogGetLogger();
  NSErrorUserInfoKey v45 = a8;
  __int16 v32 = v16;
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    __int16 v46 = object_getClass(a1);
    if (class_isMetaClass(v46)) {
      int v47 = 43;
    }
    else {
      int v47 = 45;
    }
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v47;
    __int16 v208 = 2082;
    v209 = object_getClassName(a1);
    __int16 v210 = 2082;
    id v211 = sel_getName("getSEPPKSURFPaymentRequest:uid:authorization:hostChallenge:cardChallenge:cryptogram:error:");
    __int16 v212 = 1024;
    int v213 = 505;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV children", buf, 0x22u);
  }

  if (!v45)
  {
    int v52 = 0;
    id v31 = (char *)v15;
    goto LABEL_126;
  }
  id v48 = objc_alloc((Class)NSError);
  int v49 = +[NSString stringWithUTF8String:"nfcd"];
  NSErrorUserInfoKey v218 = NSLocalizedDescriptionKey;
  BOOL v50 = +[NSString stringWithUTF8String:"No resources"];
  CFStringRef v219 = v50;
  uint64_t v51 = +[NSDictionary dictionaryWithObjects:&v219 forKeys:&v218 count:1];
  void *v45 = [v48 initWithDomain:v49 code:34 userInfo:v51];

  int v52 = 0;
  id v31 = (char *)v15;
LABEL_125:

LABEL_126:

  return v52;
}

uint64_t sub_10009ED00(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [v5 bytes];
  if ((unint64_t)[v5 length] > 3)
  {
    if (v6[3] == 3) {
      a3 = 4;
    }
    else {
      a3 = v6[3];
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getUserVerification:error:");
      uint64_t v12 = 45;
      if (isMetaClass) {
        uint64_t v12 = 43;
      }
      v8(3, "%c[%{public}s %{public}s]:%i Signed data is too small, unable to get user verification", v12, ClassName, Name, 608);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    NSErrorUserInfoKey v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      NSErrorUserInfoKey v14 = object_getClass(a1);
      if (class_isMetaClass(v14)) {
        int v15 = 43;
      }
      else {
        int v15 = 45;
      }
      *(_DWORD *)buf = 67109890;
      int v25 = v15;
      __int16 v26 = 2082;
      uint64_t v27 = object_getClassName(a1);
      __int16 v28 = 2082;
      BOOL v29 = sel_getName("getUserVerification:error:");
      __int16 v30 = 1024;
      int v31 = 608;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Signed data is too small, unable to get user verification", buf, 0x22u);
    }

    if (a3)
    {
      id v16 = objc_alloc((Class)NSError);
      id v17 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
      uint64_t v18 = +[NSString stringWithUTF8String:"Unexpected Result"];
      id v23 = v18;
      id v19 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      *(void *)a3 = [v16 initWithDomain:v17 code:13 userInfo:v19];

      a3 = 0;
    }
  }

  return a3;
}

id sub_10009EF78(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v81 = a1;
  id v6 = [a1 transceiveData:v5 toOS:0 error:a3];
  if (!v6)
  {
    if (!a3 || *a3)
    {
      id v8 = 0;
      goto LABEL_73;
    }
    __int16 v30 = a3;
    id v31 = objc_alloc((Class)NSError);
    id v7 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v105 = NSLocalizedDescriptionKey;
    __int16 v32 = +[NSString stringWithUTF8String:"No resources"];
    uint64_t v106 = v32;
    id v33 = +[NSDictionary dictionaryWithObjects:&v106 forKeys:&v105 count:1];
    void *v30 = [v31 initWithDomain:v7 code:34 userInfo:v33];

    goto LABEL_37;
  }
  id v7 = +[NFResponseAPDU responseWithData:v6];
  if ([v7 status] != 36864)
  {
    unsigned int v9 = [v7 status];
    if ((v9 & 0xFFF0) == 0x69F0) {
      unsigned int v9 = [v7 decodeUnderlyingAppletError:0];
    }
    if (v9 == 27272)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v11 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("sendSEPPKSURFPaymentRequest:error:");
        uint64_t v15 = 45;
        if (isMetaClass) {
          uint64_t v15 = 43;
        }
        v11(3, "%c[%{public}s %{public}s]:%i Failed to send payment request : not registered", v15, ClassName, Name, 654);
      }
      id v80 = v5;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = object_getClass(a1);
        if (class_isMetaClass(v17)) {
          int v18 = 43;
        }
        else {
          int v18 = 45;
        }
        *(_DWORD *)buf = 67109890;
        int v93 = v18;
        __int16 v94 = 2082;
        id v95 = object_getClassName(v81);
        __int16 v96 = 2082;
        int v97 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
        __int16 v98 = 1024;
        int v99 = 654;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send payment request : not registered", buf, 0x22u);
      }
      uint64_t v79 = a3;

      id v87 = 0;
      id v19 = sub_100246F2C(v81, &v87);
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      id obj = v87;
      id v20 = [obj countByEnumeratingWithState:&v83 objects:v104 count:16];
      if (v20)
      {
        id v21 = v20;
        NSErrorUserInfoKey v22 = 0;
        uint64_t v23 = *(void *)v84;
        do
        {
          for (unint64_t i = 0; i != v21; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v84 != v23) {
              objc_enumerationMutation(obj);
            }
            int v25 = *(void **)(*((void *)&v83 + 1) + 8 * i);
            __int16 v26 = [v25 identifierAsData];
            id v27 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283770 length:12];
            unsigned int v28 = [v26 isEqualToData:v27];

            if (v28)
            {
              id v29 = v25;

              NSErrorUserInfoKey v22 = v29;
            }
          }
          id v21 = [obj countByEnumeratingWithState:&v83 objects:v104 count:16];
        }
        while (v21);
      }
      else
      {
        NSErrorUserInfoKey v22 = 0;
      }

      if ([v22 lifecycleState] == 7
        || [v22 lifecycleState] == 15)
      {
        id v5 = v80;
        if (v79 && !*v79)
        {
          id v34 = objc_alloc((Class)NSError);
          id v35 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v102 = NSLocalizedDescriptionKey;
          int v36 = +[NSString stringWithUTF8String:"Not registered"];
          BOOL v103 = v36;
          __int16 v37 = +[NSDictionary dictionaryWithObjects:&v103 forKeys:&v102 count:1];
          void *v79 = [v34 initWithDomain:v35 code:42 userInfo:v37];
        }
LABEL_37:
        id v8 = 0;
        goto LABEL_72;
      }

      id v5 = v80;
      a3 = v79;
    }
    uint64_t v38 = objc_opt_new();
    while (1)
    {
      if (([v7 status] & 0xFF00) != 0x6100)
      {
        uint64_t v40 = v7;
        if (a3 && !*a3)
        {
          id v42 = objc_alloc((Class)NSError);
          uint64_t v43 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v88 = NSLocalizedDescriptionKey;
          int v44 = +[NSString stringWithUTF8String:"Commmand Error"];
          int v89 = v44;
          NSErrorUserInfoKey v45 = +[NSDictionary dictionaryWithObjects:&v89 forKeys:&v88 count:1];
          *a3 = [v42 initWithDomain:v43 code:16 userInfo:v45];
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v46 = NFLogGetLogger();
        if (v46)
        {
          int v47 = (void (*)(uint64_t, const char *, ...))v46;
          id v48 = object_getClass(v81);
          BOOL v49 = class_isMetaClass(v48);
          BOOL v50 = object_getClassName(v81);
          uint64_t v51 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
          uint64_t v78 = [v40 status];
          uint64_t v52 = 45;
          if (v49) {
            uint64_t v52 = 43;
          }
          v47(3, "%c[%{public}s %{public}s]:%i Failed to send payment request: 0x%04x", v52, v50, v51, 699, v78);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v53 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          int v54 = object_getClass(v81);
          if (class_isMetaClass(v54)) {
            int v55 = 43;
          }
          else {
            int v55 = 45;
          }
          int v56 = object_getClassName(v81);
          int v57 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
          unsigned int v58 = [v40 status];
          *(_DWORD *)buf = 67110146;
          int v93 = v55;
          __int16 v94 = 2082;
          id v95 = v56;
          __int16 v96 = 2082;
          int v97 = v57;
          __int16 v98 = 1024;
          int v99 = 699;
          __int16 v100 = 1024;
          LODWORD(v101) = v58;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send payment request: 0x%04x", buf, 0x28u);
        }

        id v8 = 0;
        goto LABEL_57;
      }
      __int16 v39 = [v7 response];
      [v38 appendData:v39];

      uint64_t v40 = [v81 sendCommandWithClass:128 instruction:192 p1:0 p2:0 data:0 expectedLength:[v7 status] toOS:0 error:a3];

      if (!v40) {
        break;
      }
      id v7 = v40;
      if ([v40 status] == 36864)
      {
        BOOL v41 = [v40 response];
        [v38 appendData:v41];

        id v8 = v38;
LABEL_57:
        id v7 = v40;
        goto LABEL_71;
      }
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v59 = NFLogGetLogger();
    if (v59)
    {
      id v60 = (void (*)(uint64_t, const char *, ...))v59;
      int v61 = object_getClass(v81);
      BOOL v62 = class_isMetaClass(v61);
      id v63 = object_getClassName(v81);
      uint64_t v64 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
      uint64_t v65 = 45;
      if (v62) {
        uint64_t v65 = 43;
      }
      v60(3, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", v65, v63, v64, 686, *a3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v66 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      BOOL v67 = object_getClass(v81);
      if (class_isMetaClass(v67)) {
        int v68 = 43;
      }
      else {
        int v68 = 45;
      }
      uint64_t v69 = object_getClassName(v81);
      id v70 = sel_getName("sendSEPPKSURFPaymentRequest:error:");
      uint64_t v71 = *a3;
      *(_DWORD *)buf = 67110146;
      int v93 = v68;
      __int16 v94 = 2082;
      id v95 = v69;
      __int16 v96 = 2082;
      int v97 = v70;
      __int16 v98 = 1024;
      int v99 = 686;
      __int16 v100 = 2114;
      uint64_t v101 = v71;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed : %{public}@", buf, 0x2Cu);
    }
    else
    {

      if (!a3) {
        goto LABEL_70;
      }
    }
    if (!*a3)
    {
      id v72 = objc_alloc((Class)NSError);
      BOOL v73 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v90 = NSLocalizedDescriptionKey;
      uint64_t v74 = +[NSString stringWithUTF8String:"Commmand Error"];
      uint64_t v91 = v74;
      id v75 = +[NSDictionary dictionaryWithObjects:&v91 forKeys:&v90 count:1];
      *a3 = [v72 initWithDomain:v73 code:16 userInfo:v75];
    }
LABEL_70:
    id v7 = 0;
    id v8 = 0;
LABEL_71:

    goto LABEL_72;
  }
  id v8 = [v7 response];
LABEL_72:

LABEL_73:

  return v8;
}

id sub_10009F980(void *a1, void *a2, void *a3, char a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = objc_opt_new();
  id v11 = +[NFTLV TLVsWithData:v9];
  uint64_t v12 = v11;
  if (!v11)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      int v56 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("createSURFToken:from:userVerification:error:");
      uint64_t v59 = 45;
      if (isMetaClass) {
        uint64_t v59 = 43;
      }
      v56(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", v59, ClassName, Name, 722, 0);
    }
    id v96 = v9;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v60 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      int v61 = object_getClass(a1);
      if (class_isMetaClass(v61)) {
        int v62 = 43;
      }
      else {
        int v62 = 45;
      }
      id v63 = object_getClassName(a1);
      uint64_t v64 = sel_getName("createSURFToken:from:userVerification:error:");
      int buf = 67110146;
      int v124 = v62;
      __int16 v125 = 2082;
      uint64_t v126 = v63;
      __int16 v127 = 2082;
      __int16 v128 = v64;
      __int16 v129 = 1024;
      int v130 = 722;
      __int16 v131 = 2114;
      id v132 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", (uint8_t *)&buf, 0x2Cu);
    }

    if (!a5)
    {
      uint64_t v23 = 0;
      __int16 v24 = 0;
      __int16 v37 = 0;
      goto LABEL_75;
    }
    __int16 v94 = 0;
    id v95 = v10;
    id v65 = objc_alloc((Class)NSError);
    id v33 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v121 = NSLocalizedDescriptionKey;
    uint64_t v93 = +[NSString stringWithUTF8String:"Unknown Error"];
    uint64_t v122 = v93;
    id v34 = +[NSDictionary dictionaryWithObjects:&v122 forKeys:&v121 count:1];
    id v66 = [v65 initWithDomain:v33 code:6 userInfo:v34];
    uint64_t v23 = 0;
    __int16 v24 = 0;
    BOOL v67 = a5;
    a5 = 0;
    __int16 v37 = 0;
    void *v67 = v66;
    goto LABEL_73;
  }
  char v92 = a4;
  __int16 v94 = v11;
  id v95 = v10;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  id v13 = v11;
  id v14 = [v13 countByEnumeratingWithState:&v103 objects:v120 count:16];
  if (!v14)
  {
LABEL_10:

LABEL_32:
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v43 = NFLogGetLogger();
    if (v43)
    {
      int v44 = (void (*)(uint64_t, const char *, ...))v43;
      NSErrorUserInfoKey v45 = object_getClass(a1);
      BOOL v46 = class_isMetaClass(v45);
      long long v84 = object_getClassName(a1);
      id v87 = sel_getName("createSURFToken:from:userVerification:error:");
      uint64_t v47 = 45;
      if (v46) {
        uint64_t v47 = 43;
      }
      v44(3, "%c[%{public}s %{public}s]:%i Failed to find TLV_SURF_CRS_SMURF_TOKEN in %{public}@", v47, v84, v87, 735, v9);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v48 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      BOOL v49 = object_getClass(a1);
      if (class_isMetaClass(v49)) {
        int v50 = 43;
      }
      else {
        int v50 = 45;
      }
      uint64_t v51 = object_getClassName(a1);
      uint64_t v52 = sel_getName("createSURFToken:from:userVerification:error:");
      int buf = 67110146;
      int v124 = v50;
      __int16 v125 = 2082;
      uint64_t v126 = v51;
      __int16 v127 = 2082;
      __int16 v128 = v52;
      __int16 v129 = 1024;
      int v130 = 735;
      __int16 v131 = 2114;
      id v132 = v9;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to find TLV_SURF_CRS_SMURF_TOKEN in %{public}@", (uint8_t *)&buf, 0x2Cu);
    }

    if (!a5)
    {
      id v19 = 0;
      id v33 = 0;
      uint64_t v23 = 0;
      __int16 v24 = 0;
LABEL_55:
      __int16 v37 = 0;
      goto LABEL_74;
    }
    id v96 = v9;
    id v53 = objc_alloc((Class)NSError);
    id v34 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v118 = NSLocalizedDescriptionKey;
    __int16 v39 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    uint64_t v119 = v39;
    uint64_t v40 = +[NSDictionary dictionaryWithObjects:&v119 forKeys:&v118 count:1];
    id v54 = [v53 initWithDomain:v34 code:10 userInfo:v40];
    uint64_t v93 = 0;
    id v33 = 0;
    uint64_t v23 = 0;
    __int16 v24 = 0;
LABEL_70:
    uint64_t v79 = a5;
    a5 = 0;
    void *v79 = v54;
    goto LABEL_71;
  }
  id v15 = v14;
  uint64_t v16 = *(void *)v104;
LABEL_4:
  uint64_t v17 = 0;
  while (1)
  {
    if (*(void *)v104 != v16) {
      objc_enumerationMutation(v13);
    }
    int v18 = *(void **)(*((void *)&v103 + 1) + 8 * v17);
    if ([v18 tag] == 234) {
      break;
    }
    if (v15 == (id)++v17)
    {
      id v15 = [v13 countByEnumeratingWithState:&v103 objects:v120 count:16];
      if (v15) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  id v19 = v18;

  if (!v19) {
    goto LABEL_32;
  }
  uint64_t v91 = v8;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  id v20 = [v19 children];
  id v21 = [v20 countByEnumeratingWithState:&v99 objects:v117 count:16];
  id v96 = v9;
  uint64_t v93 = (uint64_t)v19;
  if (!v21)
  {

    __int16 v24 = 0;
    uint64_t v23 = 0;
    goto LABEL_59;
  }
  id v22 = v21;
  NSErrorUserInfoKey v90 = a5;
  uint64_t v23 = 0;
  __int16 v24 = 0;
  uint64_t v25 = *(void *)v100;
  do
  {
    for (unint64_t i = 0; i != v22; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v100 != v25) {
        objc_enumerationMutation(v20);
      }
      id v27 = *(void **)(*((void *)&v99 + 1) + 8 * i);
      if ([v27 tag] == 150)
      {
        id v28 = v27;

        __int16 v24 = v28;
      }
      if ([v27 tag] == 24375)
      {
        id v29 = v27;

        uint64_t v23 = v29;
      }
    }
    id v22 = [v20 countByEnumeratingWithState:&v99 objects:v117 count:16];
  }
  while (v22);

  if (!v24)
  {
    a5 = v90;
    goto LABEL_59;
  }
  id v9 = v96;
  a5 = v90;
  if (!v23)
  {
LABEL_59:
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v68 = NFLogGetLogger();
    if (v68)
    {
      uint64_t v69 = (void (*)(uint64_t, const char *, ...))v68;
      id v70 = object_getClass(a1);
      BOOL v71 = class_isMetaClass(v70);
      long long v86 = object_getClassName(a1);
      int v89 = sel_getName("createSURFToken:from:userVerification:error:");
      uint64_t v72 = 45;
      if (v71) {
        uint64_t v72 = 43;
      }
      v69(3, "%c[%{public}s %{public}s]:%i Failed to get current counter or signature: %{public}@", v72, v86, v89, 749, v13);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v73 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      uint64_t v74 = object_getClass(a1);
      if (class_isMetaClass(v74)) {
        int v75 = 43;
      }
      else {
        int v75 = 45;
      }
      int v76 = object_getClassName(a1);
      BOOL v77 = sel_getName("createSURFToken:from:userVerification:error:");
      int buf = 67110146;
      int v124 = v75;
      __int16 v125 = 2082;
      uint64_t v126 = v76;
      __int16 v127 = 2082;
      __int16 v128 = v77;
      __int16 v129 = 1024;
      int v130 = 749;
      __int16 v131 = 2114;
      id v132 = v13;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get current counter or signature: %{public}@", (uint8_t *)&buf, 0x2Cu);
    }

    id v8 = v91;
    if (a5)
    {
      id v78 = objc_alloc((Class)NSError);
      id v34 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v115 = NSLocalizedDescriptionKey;
      __int16 v39 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      id v116 = v39;
      uint64_t v40 = +[NSDictionary dictionaryWithObjects:&v116 forKeys:&v115 count:1];
      id v54 = [v78 initWithDomain:v34 code:10 userInfo:v40];
      id v33 = 0;
      goto LABEL_70;
    }
    id v33 = 0;
    __int16 v37 = 0;
    id v9 = v96;
    goto LABEL_74;
  }
  id v8 = v91;
  __int16 v30 = sub_10009BB7C(a1, v91, v90);
  a5 = v30;
  if (!v30)
  {
LABEL_81:
    id v33 = 0;
    goto LABEL_55;
  }
  id v31 = [v30 children];
  [v95 addObjectsFromArray:v31];

  [v95 addObject:v24];
  char v98 = v92;
  id v32 = [objc_alloc((Class)NSData) initWithBytes:&v98 length:1];
  id v33 = +[NFTLV TLVWithTag:151 value:v32];

  if (!v33)
  {
    if (v90)
    {
      id v81 = objc_alloc((Class)NSError);
      id v34 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v113 = NSLocalizedDescriptionKey;
      __int16 v39 = +[NSString stringWithUTF8String:"No resources"];
      id v114 = v39;
      uint64_t v40 = +[NSDictionary dictionaryWithObjects:&v114 forKeys:&v113 count:1];
      id v33 = 0;
      void *v90 = [v81 initWithDomain:v34 code:34 userInfo:v40];
      goto LABEL_71;
    }
    goto LABEL_81;
  }
  [v95 addObject:v33];
  id v34 = +[NFTLV TLVWithTag:32525 children:v95];
  if (v34)
  {
    id v35 = [objc_alloc((Class)NSMutableArray) initWithObjects:v34, v23, nil];

    if (v35)
    {
      int v36 = +[NFTLV TLVWithTag:234 children:v35];
      __int16 v37 = [v36 asData];

      if (!v90 || v37)
      {
        id v95 = v35;
        goto LABEL_73;
      }
      id v38 = objc_alloc((Class)NSError);
      __int16 v39 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v107 = NSLocalizedDescriptionKey;
      uint64_t v40 = +[NSString stringWithUTF8String:"No resources"];
      int v108 = v40;
      BOOL v41 = +[NSDictionary dictionaryWithObjects:&v108 forKeys:&v107 count:1];
      id v42 = [v38 initWithDomain:v39 code:34 userInfo:v41];
      id v95 = v35;
    }
    else
    {
      if (!v90)
      {
        id v95 = 0;
        goto LABEL_72;
      }
      id v83 = objc_alloc((Class)NSError);
      __int16 v39 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v109 = NSLocalizedDescriptionKey;
      uint64_t v40 = +[NSString stringWithUTF8String:"No resources"];
      BOOL v110 = v40;
      BOOL v41 = +[NSDictionary dictionaryWithObjects:&v110 forKeys:&v109 count:1];
      id v42 = [v83 initWithDomain:v39 code:34 userInfo:v41];
      id v95 = 0;
    }
  }
  else
  {
    if (!v90)
    {
      id v34 = 0;
      goto LABEL_72;
    }
    id v82 = objc_alloc((Class)NSError);
    __int16 v39 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v111 = NSLocalizedDescriptionKey;
    uint64_t v40 = +[NSString stringWithUTF8String:"No resources"];
    uint64_t v112 = v40;
    BOOL v41 = +[NSDictionary dictionaryWithObjects:&v112 forKeys:&v111 count:1];
    id v42 = [v82 initWithDomain:v39 code:34 userInfo:v41];
  }
  void *v90 = v42;

  id v8 = v91;
LABEL_71:

LABEL_72:
  __int16 v37 = 0;
LABEL_73:

  id v9 = v96;
  id v19 = (id)v93;
LABEL_74:

  uint64_t v12 = v94;
  id v10 = v95;
LABEL_75:

  return v37;
}

void *sub_1000A0620(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = +[NFTLV TLVsWithData:a2];
  id v8 = v7;
  if (v7)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v9 = v7;
    id v10 = [v9 countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v34;
      while (2)
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v34 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          if ([v14 tag] == 235)
          {
            id v15 = [v14 childWithTag:225];
            uint64_t v16 = v15;
            if (a3 && v15)
            {
              uint64_t v17 = [v15 childWithTag:130];
              int v18 = v17;
              if (v17)
              {
                id v19 = [v17 value];
                [v19 NF_asHexString];
                *a3 = (id)objc_claimAutoreleasedReturnValue();
              }
            }
            a4 = [v14 asData];
            goto LABEL_28;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v33 objects:v37 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
    a4 = 0;
    goto LABEL_29;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v21 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("createOsloToken:transactionID:error:");
    uint64_t v24 = 45;
    if (isMetaClass) {
      uint64_t v24 = 43;
    }
    v21(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", v24, ClassName, Name, 801, 0);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v25 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    __int16 v26 = object_getClass(a1);
    if (class_isMetaClass(v26)) {
      int v27 = 43;
    }
    else {
      int v27 = 45;
    }
    *(_DWORD *)int buf = 67110146;
    int v41 = v27;
    __int16 v42 = 2082;
    uint64_t v43 = object_getClassName(a1);
    __int16 v44 = 2082;
    NSErrorUserInfoKey v45 = sel_getName("createOsloToken:transactionID:error:");
    __int16 v46 = 1024;
    int v47 = 801;
    __int16 v48 = 2114;
    uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from payment request: %{public}@", buf, 0x2Cu);
  }

  if (a4)
  {
    id v28 = objc_alloc((Class)NSError);
    id v9 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    uint64_t v16 = +[NSString stringWithUTF8String:"Unknown Error"];
    __int16 v39 = v16;
    id v29 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    *a4 = [v28 initWithDomain:v9 code:6 userInfo:v29];

    a4 = 0;
LABEL_28:

LABEL_29:
  }

  return a4;
}

id sub_1000A09B4(void *a1, void *a2, unsigned int a3, void *a4, NFPeerPaymentResponse **a5)
{
  id v223 = a2;
  id v9 = a4;
  if (a1)
  {
    id v10 = +[NFCALogger sharedCALogger];
    id v11 = [v10 getTimestamp];

    uint64_t v12 = [v9 transferRequest];
    if (v12
      && (id v13 = (void *)v12,
          [v9 topUpRequest],
          id v14 = objc_claimAutoreleasedReturnValue(),
          v14,
          v13,
          v14))
    {
      uint64_t v15 = 3;
    }
    else
    {
      uint64_t v16 = [v9 transferRequest];

      if (v16)
      {
        uint64_t v15 = 1;
      }
      else
      {
        uint64_t v17 = [v9 topUpRequest];
        BOOL v18 = v17 != 0;

        uint64_t v15 = (2 * v18);
      }
    }
    id v232 = 0;
    unsigned int v19 = sub_10021F7F0((uint64_t)NFSSEWrapper, &v232);
    id v20 = v232;
    id v21 = v20;
    if (!v20 || v19)
    {
      id v222 = v9;
      id v38 = v20;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v40 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("performPeerPayment:uid:request:response:");
        uint64_t v44 = 45;
        if (isMetaClass) {
          uint64_t v44 = 43;
        }
        v40(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v44, ClassName, Name, 845);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      NSErrorUserInfoKey v45 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        __int16 v46 = object_getClass(a1);
        if (class_isMetaClass(v46)) {
          int v47 = 43;
        }
        else {
          int v47 = 45;
        }
        __int16 v48 = object_getClassName(a1);
        uint64_t v49 = sel_getName("performPeerPayment:uid:request:response:");
        *(_DWORD *)int buf = 67109890;
        int v258 = v47;
        __int16 v259 = 2082;
        NSErrorUserInfoKey v260 = v48;
        __int16 v261 = 2082;
        int v262 = v49;
        __int16 v263 = 1024;
        int v264 = 845;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
      }

      id v50 = objc_alloc((Class)NSError);
      uint64_t v51 = +[NSString stringWithUTF8String:"nfcd"];
      if (v19)
      {
        NSErrorUserInfoKey v269 = NSLocalizedDescriptionKey;
        if (v19 >= 0x47) {
          int v52 = 71;
        }
        else {
          int v52 = v19;
        }
        id v53 = +[NSString stringWithUTF8String:off_1003032A8[v52]];
        __int16 v270 = v53;
        id v54 = +[NSDictionary dictionaryWithObjects:&v270 forKeys:&v269 count:1];
        int v55 = v50;
        int v56 = v51;
        uint64_t v57 = v19;
      }
      else
      {
        NSErrorUserInfoKey v271 = NSLocalizedDescriptionKey;
        id v53 = +[NSString stringWithUTF8String:"Unknown Error"];
        NSErrorUserInfoKey v272 = v53;
        id v54 = +[NSDictionary dictionaryWithObjects:&v272 forKeys:&v271 count:1];
        int v55 = v50;
        int v56 = v51;
        uint64_t v57 = 6;
      }
      id v60 = [v55 initWithDomain:v56 code:v57 userInfo:v54];

      v267[0] = @"peerPaymentRequestType";
      BOOL v71 = +[NSNumber numberWithUnsignedInt:v15];
      v268[0] = v71;
      v268[1] = &off_10031ADA0;
      v267[1] = @"peerPaymentRequestErrorStep";
      v267[2] = @"peerPaymentRequestErrorCode";
      uint64_t v72 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v60 code]);
      v268[2] = v72;
      v267[3] = @"peerPaymentRequestStartTime";
      BOOL v73 = +[NSNumber numberWithUnsignedLongLong:v11];
      v268[3] = v73;
      uint64_t v74 = v268;
      int v75 = v267;
      goto LABEL_48;
    }
    uint64_t v22 = sub_1000988C8(a1);
    if (v22)
    {
      uint64_t v23 = (void *)v22;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v24 = NFLogGetLogger();
      if (v24)
      {
        uint64_t v25 = (void (*)(uint64_t, const char *, ...))v24;
        __int16 v26 = object_getClass(a1);
        BOOL v27 = class_isMetaClass(v26);
        id v199 = object_getClassName(a1);
        char v202 = sel_getName("performPeerPayment:uid:request:response:");
        uint64_t v28 = 45;
        if (v27) {
          uint64_t v28 = 43;
        }
        v25(3, "%c[%{public}s %{public}s]:%i Failed to initialize SURF applet : %{public}@", v28, v199, v202, 859, v23);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        __int16 v30 = object_getClass(a1);
        id v31 = v9;
        id v32 = v21;
        if (class_isMetaClass(v30)) {
          int v33 = 43;
        }
        else {
          int v33 = 45;
        }
        long long v34 = object_getClassName(a1);
        long long v35 = sel_getName("performPeerPayment:uid:request:response:");
        *(_DWORD *)int buf = 67110146;
        int v258 = v33;
        id v21 = v32;
        id v9 = v31;
        __int16 v259 = 2082;
        NSErrorUserInfoKey v260 = v34;
        __int16 v261 = 2082;
        int v262 = v35;
        __int16 v263 = 1024;
        int v264 = 859;
        __int16 v265 = 2114;
        id v266 = v23;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to initialize SURF applet : %{public}@", buf, 0x2Cu);
      }

      id v36 = v23;
      id v37 = v36;
      goto LABEL_50;
    }
    id v231 = 0;
    id v58 = [a1 selectCRSWithError:&v231];
    id v59 = v231;
    id v222 = v9;
    if (v59)
    {
      id v60 = v59;
      id v38 = v21;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v61 = NFLogGetLogger();
      if (v61)
      {
        int v62 = (void (*)(uint64_t, const char *, ...))v61;
        id v63 = object_getClass(a1);
        BOOL v64 = class_isMetaClass(v63);
        id v200 = object_getClassName(a1);
        int v204 = sel_getName("performPeerPayment:uid:request:response:");
        uint64_t v65 = 45;
        if (v64) {
          uint64_t v65 = 43;
        }
        v62(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v65, v200, v204, 867, v60);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v66 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        BOOL v67 = object_getClass(a1);
        if (class_isMetaClass(v67)) {
          int v68 = 43;
        }
        else {
          int v68 = 45;
        }
        uint64_t v69 = object_getClassName(a1);
        id v70 = sel_getName("performPeerPayment:uid:request:response:");
        *(_DWORD *)int buf = 67110146;
        int v258 = v68;
        __int16 v259 = 2082;
        NSErrorUserInfoKey v260 = v69;
        __int16 v261 = 2082;
        int v262 = v70;
        __int16 v263 = 1024;
        int v264 = 867;
        __int16 v265 = 2114;
        id v266 = v60;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
      }

      v255[0] = @"peerPaymentRequestType";
      BOOL v71 = +[NSNumber numberWithUnsignedInt:v15];
      v256[0] = v71;
      v256[1] = &off_10031ADB8;
      v255[1] = @"peerPaymentRequestErrorStep";
      v255[2] = @"peerPaymentRequestErrorCode";
      uint64_t v72 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v60 code]);
      v256[2] = v72;
      v255[3] = @"peerPaymentRequestStartTime";
      BOOL v73 = +[NSNumber numberWithUnsignedLongLong:v11];
      v256[3] = v73;
      uint64_t v74 = v256;
      int v75 = v255;
LABEL_48:
      int v76 = +[NSDictionary dictionaryWithObjects:v74 forKeys:v75 count:4];

      sub_10020346C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v76);
      id v36 = v60;

      id v37 = v36;
      id v21 = v38;
LABEL_49:
      id v9 = v222;
LABEL_50:

      goto LABEL_51;
    }
    id v230 = 0;
    uint64_t v78 = sub_1000C5684(a1, v21, &v230);
    id v79 = v230;
    id v80 = v79;
    if (v78)
    {
      NSErrorUserInfoKey v220 = v79;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v81 = NFLogGetLogger();
      if (v81)
      {
        id v82 = (void (*)(uint64_t, const char *, ...))v81;
        id v83 = object_getClass(a1);
        BOOL v84 = class_isMetaClass(v83);
        char v201 = object_getClassName(a1);
        NSErrorUserInfoKey v205 = sel_getName("performPeerPayment:uid:request:response:");
        uint64_t v85 = 45;
        if (v84) {
          uint64_t v85 = 43;
        }
        v82(3, "%c[%{public}s %{public}s]:%i Failed to auth with CRS applet : 0x%x", v85, v201, v205, 882, v78);
      }
      long long v86 = v21;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v87 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      {
        NSErrorUserInfoKey v88 = object_getClass(a1);
        if (class_isMetaClass(v88)) {
          int v89 = 43;
        }
        else {
          int v89 = 45;
        }
        NSErrorUserInfoKey v90 = object_getClassName(a1);
        uint64_t v91 = sel_getName("performPeerPayment:uid:request:response:");
        *(_DWORD *)int buf = 67110146;
        int v258 = v89;
        __int16 v259 = 2082;
        NSErrorUserInfoKey v260 = v90;
        __int16 v261 = 2082;
        int v262 = v91;
        __int16 v263 = 1024;
        int v264 = 882;
        __int16 v265 = 1024;
        LODWORD(v266) = v78;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to auth with CRS applet : 0x%x", buf, 0x28u);
      }

      v253[0] = @"peerPaymentRequestType";
      char v92 = +[NSNumber numberWithUnsignedInt:v15];
      v254[0] = v92;
      v254[1] = &off_10031AE00;
      v253[1] = @"peerPaymentRequestErrorStep";
      v253[2] = @"peerPaymentRequestErrorCode";
      uint64_t v93 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [0 code]);
      v254[2] = v93;
      v253[3] = @"peerPaymentRequestStartTime";
      __int16 v94 = +[NSNumber numberWithUnsignedLongLong:v11];
      v254[3] = v94;
      id v95 = +[NSDictionary dictionaryWithObjects:v254 forKeys:v253 count:4];

      sub_10020346C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v95);
      id v96 = objc_alloc((Class)NSError);
      int v97 = +[NSString stringWithUTF8String:"nfcd"];
      uint64_t v98 = v78;
      NSErrorUserInfoKey v251 = NSLocalizedDescriptionKey;
      if (v78 >= 0x47) {
        int v99 = 71;
      }
      else {
        int v99 = v78;
      }
      long long v100 = +[NSString stringWithUTF8String:off_1003032A8[v99]];
      NSErrorUserInfoKey v252 = v100;
      long long v101 = +[NSDictionary dictionaryWithObjects:&v252 forKeys:&v251 count:1];
      id v37 = [v96 initWithDomain:v97 code:v98 userInfo:v101];
    }
    else
    {
      if ((unint64_t)[v79 length] > 0xF)
      {
        uint64_t v117 = [v80 subdataWithRange:0, 8];
        NSErrorUserInfoKey v118 = [v80 subdataWithRange:NSMakeRange(8, 8)];
        CFStringRef v219 = v117;
        if (v117 && v118)
        {
          id v229 = 0;
          NSErrorUserInfoKey v218 = v118;
          uint64_t v119 = sub_10009D720(a1, v9, a3, v223, v21, v117, v118, &v229);
          id v120 = v229;
          NSErrorUserInfoKey v121 = v120;
          if (v119)
          {
            id v228 = v120;
            sub_10009EF78(a1, v119, &v228);
            NSErrorUserInfoKey v216 = v119;
            uint64_t v123 = v122 = v121;
            id v213 = v228;

            CFStringRef v217 = (void *)v123;
            if (v123)
            {
              __int16 v221 = v80;
              long long v100 = v216;
              id v227 = v213;
              unsigned int v211 = sub_10009ED00(a1, v216, (uint64_t)&v227);
              id v124 = v227;

              if (v124)
              {
                __int16 v125 = v124;
                v239[0] = @"peerPaymentRequestType";
                uint64_t v126 = +[NSNumber numberWithUnsignedInt:v15];
                v240[0] = v126;
                v240[1] = &off_10031AE48;
                v239[1] = @"peerPaymentRequestErrorStep";
                v239[2] = @"peerPaymentRequestErrorCode";
                __int16 v127 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v124 code]);
                v240[2] = v127;
                v239[3] = @"peerPaymentRequestStartTime";
                __int16 v128 = +[NSNumber numberWithUnsignedLongLong:v11];
                v240[3] = v128;
                __int16 v129 = +[NSDictionary dictionaryWithObjects:v240 forKeys:v239 count:4];

                sub_10020346C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v129);
                id v36 = v125;
                id v37 = v36;
                id v95 = v219;
                id v116 = v221;
                int v130 = v217;
                int v97 = v218;
              }
              else
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v145 = NFLogGetLogger();
                if (v145)
                {
                  int v146 = (void (*)(uint64_t, const char *, ...))v145;
                  BOOL v147 = object_getClass(a1);
                  BOOL v148 = class_isMetaClass(v147);
                  __int16 v214 = object_getClassName(a1);
                  uint64_t v149 = sel_getName("performPeerPayment:uid:request:response:");
                  uint64_t v150 = 45;
                  if (v148) {
                    uint64_t v150 = 43;
                  }
                  v146(6, "%c[%{public}s %{public}s]:%i User verification (PT spec bitmask) 0x%x", v150, v214, v149, 945, v211);
                }
                __int16 v210 = v21;
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                BOOL v151 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
                {
                  int v152 = object_getClass(a1);
                  if (class_isMetaClass(v152)) {
                    int v153 = 43;
                  }
                  else {
                    int v153 = 45;
                  }
                  unsigned int v154 = object_getClassName(a1);
                  id v155 = sel_getName("performPeerPayment:uid:request:response:");
                  *(_DWORD *)int buf = 67110146;
                  int v258 = v153;
                  __int16 v259 = 2082;
                  NSErrorUserInfoKey v260 = v154;
                  __int16 v261 = 2082;
                  int v262 = v155;
                  __int16 v263 = 1024;
                  int v264 = 945;
                  __int16 v265 = 1024;
                  LODWORD(v266) = v211;
                  _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i User verification (PT spec bitmask) 0x%x", buf, 0x28u);
                }

                BOOL v215 = objc_opt_new();
                int v156 = [v9 transferRequest];
                id v226 = 0;
                uint64_t v157 = sub_10009F980(a1, v156, v217, v211, &v226);
                id v158 = v226;

                v209 = (void *)v157;
                if (v157)
                {
                  [v215 appendData:v157];
                  id v224 = v158;
                  id v225 = 0;
                  uint64_t v159 = sub_1000A0620(a1, (uint64_t)v217, &v225, &v224);
                  id v212 = v225;
                  id v160 = v224;
                  id v161 = v158;
                  id v36 = v160;

                  __int16 v208 = (void *)v159;
                  if (v36)
                  {
                    v235[0] = @"peerPaymentRequestType";
                    BOOL v162 = +[NSNumber numberWithUnsignedInt:v15];
                    v236[0] = v162;
                    v236[1] = &off_10031AE90;
                    v235[1] = @"peerPaymentRequestErrorStep";
                    v235[2] = @"peerPaymentRequestErrorCode";
                    uint64_t v163 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v36 code]);
                    v236[2] = v163;
                    v235[3] = @"peerPaymentRequestStartTime";
                    uint64_t v164 = +[NSNumber numberWithUnsignedLongLong:v11];
                    v236[3] = v164;
                    int v165 = +[NSDictionary dictionaryWithObjects:v236 forKeys:v235 count:4];

                    sub_10020346C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v165);
                    id v37 = v36;
                    id v21 = v210;
                    id v116 = v221;
                  }
                  else
                  {
                    if (v159) {
                      [v215 appendData:v159];
                    }
                    int v165 = objc_opt_new();
                    BOOL v174 = [a1 rsaCertificate];

                    id v21 = v210;
                    if (v174)
                    {
                      uint64_t v175 = [a1 rsaCertificate];
                      [v165 setObject:v175 forKeyedSubscript:@"RSA"];
                    }
                    long long v176 = [a1 eccCertificate];

                    if (v176)
                    {
                      BOOL v177 = [a1 eccCertificate];
                      [v165 setObject:v177 forKeyedSubscript:@"ECDSA"];
                    }
                    int v178 = [a1 eckaCertificate];

                    if (v178)
                    {
                      BOOL v179 = [a1 eckaCertificate];
                      [v165 setObject:v179 forKeyedSubscript:@"ECKA"];
                    }
                    int v180 = [a1 eccCertificate];

                    if (v180)
                    {
                      id v181 = [a1 eccCertificate];
                      [v165 setObject:v181 forKeyedSubscript:@"ECC"];
                    }
                    uint64_t v182 = objc_opt_new();
                    [v182 setObject:v215 forKeyedSubscript:@"transactionData"];
                    [v182 setObject:v165 forKeyedSubscript:@"certificates"];
                    if (v212) {
                      [v182 setObject:v212 forKeyedSubscript:@"transactionIdentifier"];
                    }
                    id v183 = [[NFPeerPaymentResponse alloc] initWithDictionary:v182];
                    *a5 = v183;
                    id v116 = v221;
                    if (v183)
                    {
                      id v37 = 0;
                    }
                    else
                    {
                      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      uint64_t v184 = NFLogGetLogger();
                      if (v184)
                      {
                        int v185 = (void (*)(uint64_t, const char *, ...))v184;
                        id v186 = object_getClass(a1);
                        BOOL v187 = class_isMetaClass(v186);
                        unsigned int v188 = object_getClassName(a1);
                        id v206 = sel_getName("performPeerPayment:uid:request:response:");
                        uint64_t v189 = 45;
                        if (v187) {
                          uint64_t v189 = 43;
                        }
                        v185(3, "%c[%{public}s %{public}s]:%i Failed to create response", v189, v188, v206, 990);
                      }
                      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                      unsigned int v190 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
                      {
                        id v191 = object_getClass(a1);
                        if (class_isMetaClass(v191)) {
                          int v192 = 43;
                        }
                        else {
                          int v192 = 45;
                        }
                        SEL v193 = object_getClassName(a1);
                        SEL v194 = sel_getName("performPeerPayment:uid:request:response:");
                        *(_DWORD *)int buf = 67109890;
                        int v258 = v192;
                        __int16 v259 = 2082;
                        NSErrorUserInfoKey v260 = v193;
                        __int16 v261 = 2082;
                        int v262 = v194;
                        __int16 v263 = 1024;
                        int v264 = 990;
                        _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create response", buf, 0x22u);
                      }

                      id v195 = objc_alloc((Class)NSError);
                      unsigned int v196 = +[NSString stringWithUTF8String:"nfcd"];
                      NSErrorUserInfoKey v233 = NSLocalizedDescriptionKey;
                      __int16 v197 = +[NSString stringWithUTF8String:"No resources"];
                      char v234 = v197;
                      char v198 = +[NSDictionary dictionaryWithObjects:&v234 forKeys:&v233 count:1];
                      id v37 = [v195 initWithDomain:v196 code:34 userInfo:v198];

                      id v21 = v210;
                      id v116 = v221;
                    }
                  }
                  int v97 = v218;
                  id v95 = v219;
                }
                else
                {
                  v237[0] = @"peerPaymentRequestType";
                  int v170 = +[NSNumber numberWithUnsignedInt:v15];
                  v238[0] = v170;
                  v238[1] = &off_10031AE78;
                  v237[1] = @"peerPaymentRequestErrorStep";
                  v237[2] = @"peerPaymentRequestErrorCode";
                  uint64_t v171 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v158 code]);
                  v238[2] = v171;
                  v237[3] = @"peerPaymentRequestStartTime";
                  uint64_t v172 = +[NSNumber numberWithUnsignedLongLong:v11];
                  v238[3] = v172;
                  id v173 = +[NSDictionary dictionaryWithObjects:v238 forKeys:v237 count:4];

                  id v212 = v173;
                  sub_10020346C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v173);
                  id v36 = v158;
                  id v37 = v36;
                  id v21 = v210;
                  id v95 = v219;
                  id v116 = v221;
                  int v97 = v218;
                }
                int v130 = v217;
                __int16 v129 = v215;
              }
            }
            else
            {
              v241[0] = @"peerPaymentRequestType";
              uint64_t v141 = +[NSNumber numberWithUnsignedInt:v15];
              v242[0] = v141;
              v242[1] = &off_10031ADD0;
              v241[1] = @"peerPaymentRequestErrorStep";
              v241[2] = @"peerPaymentRequestErrorCode";
              BOOL v142 = v80;
              __int16 v143 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v213 code]);
              v242[2] = v143;
              v241[3] = @"peerPaymentRequestStartTime";
              uint64_t v144 = +[NSNumber numberWithUnsignedLongLong:v11];
              v242[3] = v144;
              __int16 v129 = +[NSDictionary dictionaryWithObjects:v242 forKeys:v241 count:4];

              id v116 = v142;
              sub_10020346C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v129);
              id v36 = v213;
              id v37 = v36;
              int v97 = v218;
              id v95 = v219;
              long long v100 = v216;
              int v130 = 0;
            }
          }
          else
          {
            uint64_t v135 = v80;
            uint64_t v136 = v21;
            v245[0] = @"peerPaymentRequestType";
            uint64_t v137 = +[NSNumber numberWithUnsignedInt:v15];
            v246[0] = v137;
            v246[1] = &off_10031AE18;
            v245[1] = @"peerPaymentRequestErrorStep";
            v245[2] = @"peerPaymentRequestErrorCode";
            int v138 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v121 code]);
            v246[2] = v138;
            v245[3] = @"peerPaymentRequestStartTime";
            id v139 = +[NSNumber numberWithUnsignedLongLong:v11];
            v246[3] = v139;
            int v140 = +[NSDictionary dictionaryWithObjects:v246 forKeys:v245 count:4];

            int v130 = v140;
            sub_10020346C((uint64_t)NFPeerPaymentAndPurpleTrustCALogger, v140);
            if (v121)
            {
              id v36 = v121;
              long long v100 = 0;
              id v37 = v36;
            }
            else
            {
              id v166 = objc_alloc((Class)NSError);
              uint64_t v167 = +[NSString stringWithUTF8String:"nfcd"];
              NSErrorUserInfoKey v243 = NSLocalizedDescriptionKey;
              uint64_t v168 = +[NSString stringWithUTF8String:"Unknown Error"];
              NSErrorUserInfoKey v244 = v168;
              id v169 = +[NSDictionary dictionaryWithObjects:&v244 forKeys:&v243 count:1];
              id v37 = [v166 initWithDomain:v167 code:6 userInfo:v169];

              long long v100 = 0;
              id v36 = 0;
            }
            id v21 = v136;
            id v116 = v135;
            int v97 = v218;
            id v95 = v219;
          }
        }
        else
        {
          int v97 = v118;
          __int16 v131 = v80;
          id v132 = objc_alloc((Class)NSError);
          long long v100 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v247 = NSLocalizedDescriptionKey;
          int v130 = +[NSString stringWithUTF8String:"Commmand Error"];
          NSErrorUserInfoKey v248 = v130;
          id v133 = +[NSDictionary dictionaryWithObjects:&v248 forKeys:&v247 count:1];
          BOOL v134 = v132;
          id v116 = v131;
          id v37 = [v134 initWithDomain:v100 code:16 userInfo:v133];

          id v36 = 0;
          id v95 = v219;
        }

        goto LABEL_80;
      }
      NSErrorUserInfoKey v220 = v80;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v102 = NFLogGetLogger();
      if (v102)
      {
        long long v103 = (void (*)(uint64_t, const char *, ...))v102;
        long long v104 = object_getClass(a1);
        BOOL v105 = class_isMetaClass(v104);
        long long v106 = object_getClassName(a1);
        NSErrorUserInfoKey v107 = sel_getName("performPeerPayment:uid:request:response:");
        id v207 = [v220 length];
        uint64_t v108 = 45;
        if (v105) {
          uint64_t v108 = 43;
        }
        v103(3, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", v108, v106, v107, 893, v207);
      }
      long long v86 = v21;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      NSErrorUserInfoKey v109 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        BOOL v110 = object_getClass(a1);
        if (class_isMetaClass(v110)) {
          int v111 = 43;
        }
        else {
          int v111 = 45;
        }
        uint64_t v112 = object_getClassName(a1);
        NSErrorUserInfoKey v113 = sel_getName("performPeerPayment:uid:request:response:");
        id v114 = [v220 length];
        *(_DWORD *)int buf = 67110146;
        int v258 = v111;
        __int16 v259 = 2082;
        NSErrorUserInfoKey v260 = v112;
        __int16 v261 = 2082;
        int v262 = v113;
        __int16 v263 = 1024;
        int v264 = 893;
        __int16 v265 = 2048;
        id v266 = v114;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", buf, 0x2Cu);
      }

      id v115 = objc_alloc((Class)NSError);
      id v95 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v249 = NSLocalizedDescriptionKey;
      int v97 = +[NSString stringWithUTF8String:"Commmand Error"];
      NSErrorUserInfoKey v250 = v97;
      long long v100 = +[NSDictionary dictionaryWithObjects:&v250 forKeys:&v249 count:1];
      id v37 = [v115 initWithDomain:v95 code:16 userInfo:v100];
    }
    id v36 = 0;
    id v21 = v86;
    id v116 = v220;
LABEL_80:

    goto LABEL_49;
  }
  id v37 = 0;
LABEL_51:

  return v37;
}

id sub_1000A230C(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = sub_1000988C8(a1);
    if (v2)
    {
      id v3 = v2;
      id v1 = v3;
    }
    else
    {
      id v24 = 0;
      id v4 = sub_100099A20(v1, byte_1003473B0, (uint64_t)&v24);
      id v3 = v24;
      if (v4 && [v4 status] == 36864)
      {
        id v1 = 0;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          id v6 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(v1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(v1);
          Name = sel_getName("deleteKey");
          uint64_t v23 = [v4 status];
          uint64_t v11 = 45;
          if (isMetaClass) {
            uint64_t v11 = 43;
          }
          v6(3, "%c[%{public}s %{public}s]:%i Failed to delete: 0x%04x / %{public}@", v11, ClassName, Name, 1006, v23, v3);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          id v13 = object_getClass(v1);
          if (class_isMetaClass(v13)) {
            int v14 = 43;
          }
          else {
            int v14 = 45;
          }
          uint64_t v15 = object_getClassName(v1);
          uint64_t v16 = sel_getName("deleteKey");
          unsigned int v17 = [v4 status];
          *(_DWORD *)int buf = 67110402;
          int v28 = v14;
          __int16 v29 = 2082;
          __int16 v30 = v15;
          __int16 v31 = 2082;
          id v32 = v16;
          __int16 v33 = 1024;
          int v34 = 1006;
          __int16 v35 = 1024;
          unsigned int v36 = v17;
          __int16 v37 = 2114;
          id v38 = v3;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to delete: 0x%04x / %{public}@", buf, 0x32u);
        }

        if (v3)
        {
          id v1 = v3;
        }
        else
        {
          id v18 = objc_alloc((Class)NSError);
          unsigned int v19 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
          id v20 = +[NSString stringWithUTF8String:"Commmand Error"];
          __int16 v26 = v20;
          id v21 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
          id v1 = [v18 initWithDomain:v19 code:16 userInfo:v21];
        }
      }
    }
  }

  return v1;
}

void *sub_1000A2608(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = [a1 getData:254 subtag:57137];
    id v3 = v2;
    if (v2 && (unint64_t)[v2 length] > 1)
    {
      id v1 = (void *)(bswap32(*(unsigned __int16 *)[v3 bytes]) >> 16);
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v5 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(v1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v1);
        Name = sel_getName("getUpdateCounter");
        uint64_t v9 = 45;
        if (isMetaClass) {
          uint64_t v9 = 43;
        }
        v5(3, "%c[%{public}s %{public}s]:%i Failed to get update info", v9, ClassName, Name, 21);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = object_getClass(v1);
        if (class_isMetaClass(v11)) {
          int v12 = 43;
        }
        else {
          int v12 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        int v16 = v12;
        __int16 v17 = 2082;
        id v18 = object_getClassName(v1);
        __int16 v19 = 2082;
        id v20 = sel_getName("getUpdateCounter");
        __int16 v21 = 1024;
        int v22 = 21;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get update info", buf, 0x22u);
      }

      id v1 = 0;
    }
  }
  return v1;
}

id sub_1000A27EC(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_opt_new();
    id v3 = [v1 handle];
    id v4 = [v3 info];
    id v5 = [v4 rsaCertificate];
    if (v5)
    {
    }
    else
    {
      id v6 = [v1 handle];
      id v7 = [v6 info];
      id v8 = [v7 ecdsaCertificate];

      if (v8)
      {
LABEL_6:
        uint64_t v9 = [v1 handle];
        id v10 = [v9 info];
        uint64_t v11 = [v10 rsaCertificate];
        if (!v11)
        {
          uint64_t v11 = [v1 handle];
          int v12 = [v11 info];
          id v13 = [v12 ecdsaCertificate];
          if (!v13)
          {
            long long v101 = [v1 handle];
            uint64_t v102 = [v101 info];
            long long v103 = [v102 eckaCertificate];

            if (!v103)
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t Logger = NFLogGetLogger();
              if (Logger)
              {
                BOOL v105 = (void (*)(uint64_t, const char *, ...))Logger;
                Class Class = object_getClass(v1);
                BOOL isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName(v1);
                Name = sel_getName("getCertificates");
                uint64_t v109 = 45;
                if (isMetaClass) {
                  uint64_t v109 = 43;
                }
                v105(4, "%c[%{public}s %{public}s]:%i Failed to retrieve certificates !", v109, ClassName, Name, 61);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              BOOL v110 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
              {
                int v111 = object_getClass(v1);
                if (class_isMetaClass(v111)) {
                  int v112 = 43;
                }
                else {
                  int v112 = 45;
                }
                *(_DWORD *)int buf = 67109890;
                int v118 = v112;
                __int16 v119 = 2082;
                id v120 = object_getClassName(v1);
                __int16 v121 = 2082;
                uint64_t v122 = sel_getName("getCertificates");
                __int16 v123 = 1024;
                int v124 = 61;
                _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to retrieve certificates !", buf, 0x22u);
              }

              id v1 = 0;
              goto LABEL_51;
            }
LABEL_10:
            int v14 = [v1 handle];
            uint64_t v15 = [v14 info];
            int v16 = [v15 rsaCertificate];

            if (v16)
            {
              __int16 v17 = [v1 handle];
              id v18 = [v17 info];
              __int16 v19 = [v18 rsaCertificate];
              id v20 = +[NSData NF_dataWithHexString:v19];

              if (v20)
              {
                __int16 v21 = [v1 handle];
                int v22 = [v21 info];
                uint64_t v23 = [v22 rsaCertificate];
                id v24 = +[NSData NF_dataWithHexString:v23];
                [v2 setObject:v24 forKey:@"RSA"];
              }
              else
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v25 = NFLogGetLogger();
                if (v25)
                {
                  __int16 v26 = (void (*)(uint64_t, const char *, ...))v25;
                  BOOL v27 = object_getClass(v1);
                  BOOL v28 = class_isMetaClass(v27);
                  __int16 v29 = object_getClassName(v1);
                  __int16 v30 = sel_getName("getCertificates");
                  __int16 v31 = [v1 handle];
                  id v32 = [v31 info];
                  id v33 = [v32 rsaCertificate];
                  id v114 = [v33 UTF8String];
                  uint64_t v34 = 45;
                  if (v28) {
                    uint64_t v34 = 43;
                  }
                  v26(3, "%c[%{public}s %{public}s]:%i Failed to decrypt RSA cert : %s", v34, v29, v30, 42, v114);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                __int16 v35 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                {
                  unsigned int v36 = object_getClass(v1);
                  if (class_isMetaClass(v36)) {
                    int v37 = 43;
                  }
                  else {
                    int v37 = 45;
                  }
                  id v38 = object_getClassName(v1);
                  __int16 v39 = sel_getName("getCertificates");
                  uint64_t v40 = [v1 handle];
                  int v41 = [v40 info];
                  id v42 = [v41 rsaCertificate];
                  *(_DWORD *)int buf = 67110146;
                  int v118 = v37;
                  __int16 v119 = 2082;
                  id v120 = v38;
                  __int16 v121 = 2082;
                  uint64_t v122 = v39;
                  __int16 v123 = 1024;
                  int v124 = 42;
                  __int16 v125 = 2080;
                  id v126 = [v42 UTF8String];
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to decrypt RSA cert : %s", buf, 0x2Cu);
                }
              }
            }
            uint64_t v43 = [v1 handle];
            uint64_t v44 = [v43 info];
            NSErrorUserInfoKey v45 = [v44 ecdsaCertificate];

            if (v45)
            {
              __int16 v46 = [v1 handle];
              int v47 = [v46 info];
              __int16 v48 = [v47 ecdsaCertificate];
              uint64_t v49 = +[NSData NF_dataWithHexString:v48];

              if (v49)
              {
                id v50 = [v1 handle];
                uint64_t v51 = [v50 info];
                int v52 = [v51 ecdsaCertificate];
                id v53 = +[NSData NF_dataWithHexString:v52];
                [v2 setObject:v53 forKey:@"ECDSA"];
              }
              else
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v54 = NFLogGetLogger();
                if (v54)
                {
                  int v55 = (void (*)(uint64_t, const char *, ...))v54;
                  int v56 = object_getClass(v1);
                  BOOL v57 = class_isMetaClass(v56);
                  id v58 = object_getClassName(v1);
                  id v59 = sel_getName("getCertificates");
                  id v60 = [v1 handle];
                  uint64_t v61 = [v60 info];
                  id v62 = [v61 ecdsaCertificate];
                  id v115 = [v62 UTF8String];
                  uint64_t v63 = 45;
                  if (v57) {
                    uint64_t v63 = 43;
                  }
                  v55(3, "%c[%{public}s %{public}s]:%i Failed to decrypt ECDSA cert : %s", v63, v58, v59, 49, v115);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                id v50 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
                {
                  BOOL v64 = object_getClass(v1);
                  if (class_isMetaClass(v64)) {
                    int v65 = 43;
                  }
                  else {
                    int v65 = 45;
                  }
                  id v66 = object_getClassName(v1);
                  BOOL v67 = sel_getName("getCertificates");
                  int v68 = [v1 handle];
                  uint64_t v69 = [v68 info];
                  id v70 = [v69 ecdsaCertificate];
                  id v71 = [v70 UTF8String];
                  *(_DWORD *)int buf = 67110146;
                  int v118 = v65;
                  __int16 v119 = 2082;
                  id v120 = v66;
                  __int16 v121 = 2082;
                  uint64_t v122 = v67;
                  __int16 v123 = 1024;
                  int v124 = 49;
                  __int16 v125 = 2080;
                  id v126 = v71;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to decrypt ECDSA cert : %s", buf, 0x2Cu);
                }
              }
            }
            uint64_t v72 = [v1 handle];
            BOOL v73 = [v72 info];
            uint64_t v74 = [v73 eckaCertificate];

            if (!v74) {
              goto LABEL_50;
            }
            int v75 = [v1 handle];
            int v76 = [v75 info];
            BOOL v77 = [v76 eckaCertificate];
            uint64_t v78 = +[NSData NF_dataWithHexString:v77];

            if (v78)
            {
              id v79 = [v1 handle];
              id v80 = [v79 info];
              uint64_t v81 = [v80 eckaCertificate];
              id v82 = +[NSData NF_dataWithHexString:v81];
              [v2 setObject:v82 forKey:@"ECKA"];
            }
            else
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v83 = NFLogGetLogger();
              if (v83)
              {
                BOOL v84 = (void (*)(uint64_t, const char *, ...))v83;
                uint64_t v85 = object_getClass(v1);
                BOOL v86 = class_isMetaClass(v85);
                id v87 = object_getClassName(v1);
                NSErrorUserInfoKey v88 = sel_getName("getCertificates");
                int v89 = [v1 handle];
                NSErrorUserInfoKey v90 = [v89 info];
                id v91 = [v90 eckaCertificate];
                id v116 = [v91 UTF8String];
                uint64_t v92 = 45;
                if (v86) {
                  uint64_t v92 = 43;
                }
                v84(3, "%c[%{public}s %{public}s]:%i Failed to decrypt ECKA cert : %s", v92, v87, v88, 56, v116);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              id v79 = NFSharedLogGetLogger();
              if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR)) {
                goto LABEL_49;
              }
              uint64_t v93 = object_getClass(v1);
              if (class_isMetaClass(v93)) {
                int v94 = 43;
              }
              else {
                int v94 = 45;
              }
              id v95 = object_getClassName(v1);
              id v96 = sel_getName("getCertificates");
              id v80 = [v1 handle];
              int v97 = [v80 info];
              id v98 = [v97 eckaCertificate];
              id v99 = [v98 UTF8String];
              *(_DWORD *)int buf = 67110146;
              int v118 = v94;
              __int16 v119 = 2082;
              id v120 = v95;
              __int16 v121 = 2082;
              uint64_t v122 = v96;
              __int16 v123 = 1024;
              int v124 = 56;
              __int16 v125 = 2080;
              id v126 = v99;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to decrypt ECKA cert : %s", buf, 0x2Cu);
            }
LABEL_49:

LABEL_50:
            id v1 = v2;
LABEL_51:

            goto LABEL_52;
          }
        }
        goto LABEL_10;
      }
      id v3 = [v1 delegate];
      [v3 updateSeInfo:v1];
    }

    goto LABEL_6;
  }
LABEL_52:

  return v1;
}

BOOL sub_1000A3344(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  char v4 = 1;
  while (1)
  {
    char v5 = v4;
    uint64_t v6 = *((unsigned int *)&unk_100283790 + v3);
    uint64_t v7 = [a1 getData:254 subtag:v6];
    BOOL v53 = v7 != 0;
    uint64_t v54 = (void *)v7;
    if (v7) {
      break;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v9 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("getAvailableMemory:");
      if (isMetaClass) {
        uint64_t v12 = 43;
      }
      else {
        uint64_t v12 = 45;
      }
      v9(4, "%c[%{public}s %{public}s]:%i Failed to get memory info with subtag:0x%x", v12, ClassName, Name, 74, v6);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = object_getClass(a1);
      if (class_isMetaClass(v14)) {
        int v15 = 43;
      }
      else {
        int v15 = 45;
      }
      int v16 = object_getClassName(a1);
      __int16 v17 = sel_getName("getAvailableMemory:");
      *(_DWORD *)int buf = 67110146;
      int v62 = v15;
      __int16 v63 = 2082;
      BOOL v64 = v16;
      __int16 v65 = 2082;
      id v66 = v17;
      __int16 v67 = 1024;
      int v68 = 74;
      __int16 v69 = 1024;
      unsigned int v70 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get memory info with subtag:0x%x", buf, 0x28u);
    }

    char v4 = 0;
    uint64_t v3 = 1;
    if ((v5 & 1) == 0)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v18 = NFLogGetLogger();
      if (v18)
      {
        __int16 v19 = (void (*)(uint64_t, const char *, ...))v18;
        id v20 = object_getClass(a1);
        BOOL v21 = class_isMetaClass(v20);
        int v22 = object_getClassName(a1);
        uint64_t v51 = sel_getName("getAvailableMemory:");
        uint64_t v23 = 45;
        if (v21) {
          uint64_t v23 = 43;
        }
        v19(3, "%c[%{public}s %{public}s]:%i Failed to get memory info", v23, v22, v51, 78);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = object_getClass(a1);
        if (class_isMetaClass(v25)) {
          int v26 = 43;
        }
        else {
          int v26 = 45;
        }
        BOOL v27 = object_getClassName(a1);
        BOOL v28 = sel_getName("getAvailableMemory:");
        *(_DWORD *)int buf = 67109890;
        int v62 = v26;
        __int16 v63 = 2082;
        BOOL v64 = v27;
        __int16 v65 = 2082;
        id v66 = v28;
        __int16 v67 = 1024;
        int v68 = 78;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get memory info", buf, 0x22u);
      }
      goto LABEL_55;
    }
  }
  *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x2B0], 8) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v24 = +[NFTLV TLVsWithData:v7];
  id v29 = [v24 countByEnumeratingWithState:&v56 objects:v60 count:16];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = *(void *)v57;
    do
    {
      for (unint64_t i = 0; i != v30; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v57 != v31) {
          objc_enumerationMutation(v24);
        }
        id v33 = *(void **)(*((void *)&v56 + 1) + 8 * i);
        switch([v33 tag])
        {
          case 0u:
            *(_DWORD *)a2 = [v33 valueAsUnsignedLong];
            break;
          case 1u:
            *(_DWORD *)(a2 + 4) = [v33 valueAsUnsignedLong];
            break;
          case 2u:
            *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x2B0], 8) = [v33 valueAsUnsignedLong];
            break;
          case 3u:
            *(_DWORD *)(a2 + 12) = [v33 valueAsUnsignedLong];
            break;
          case 4u:
            *(_DWORD *)(a2 + 16) = [v33 valueAsUnsignedLong];
            break;
          case 5u:
            *(_DWORD *)(a2 + 20) = [v33 valueAsUnsignedLong];
            break;
          case 6u:
            *(_DWORD *)(a2 + 24) = [v33 valueAsUnsignedLong];
            break;
          case 0xCu:
            *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x2B0], 8) = [v33 valueAsUnsignedLong];
            break;
          case 0xDu:
            *(_DWORD *)(a2 + 32) = [v33 valueAsUnsignedLong];
            break;
          case 0xEu:
            *(_DWORD *)(a2 + 36) = [v33 valueAsUnsignedLong];
            break;
          case 0xFu:
            *(_DWORD *)(a2 + 40) = [v33 valueAsUnsignedLong];
            break;
          case 0x10u:
            *(_DWORD *)(a2 + 44) = [v33 valueAsUnsignedLong];
            break;
          case 0x11u:
            *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x2B0], 8) = [v33 valueAsUnsignedLong];
            break;
          default:
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v34 = NFLogGetLogger();
            if (v34)
            {
              __int16 v35 = (void (*)(uint64_t, const char *, ...))v34;
              unsigned int v36 = object_getClass(a1);
              BOOL v37 = class_isMetaClass(v36);
              id v38 = object_getClassName(a1);
              __int16 v39 = sel_getName("getAvailableMemory:");
              id v52 = [v33 tag];
              uint64_t v40 = 45;
              if (v37) {
                uint64_t v40 = 43;
              }
              v35(3, "%c[%{public}s %{public}s]:%i Unknown tag 0x%x", v40, v38, v39, 140, v52);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            int v41 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              id v42 = object_getClass(a1);
              if (class_isMetaClass(v42)) {
                int v43 = 43;
              }
              else {
                int v43 = 45;
              }
              uint64_t v44 = object_getClassName(a1);
              NSErrorUserInfoKey v45 = sel_getName("getAvailableMemory:");
              unsigned int v46 = [v33 tag];
              *(_DWORD *)int buf = 67110146;
              int v62 = v43;
              __int16 v63 = 2082;
              BOOL v64 = v44;
              __int16 v65 = 2082;
              id v66 = v45;
              __int16 v67 = 1024;
              int v68 = 140;
              __int16 v69 = 1024;
              unsigned int v70 = v46;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown tag 0x%x", buf, 0x28u);
            }

            break;
        }
      }
      id v30 = [v24 countByEnumeratingWithState:&v56 objects:v60 count:16];
    }
    while (v30);
  }
LABEL_55:
  BOOL v47 = v53;

  return v47;
}

id sub_1000A39CC(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    char v4 = [a1 sendCommandWithClass:0 instruction:136 p1:240 p2:a3 data:a2 error:0];
    char v5 = v4;
    if (v4)
    {
      if ([v4 status] == 36864)
      {
        uint64_t v6 = [v5 response];
LABEL_25:

        goto LABEL_26;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v20 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("signChallenge:authenticationType:");
        uint64_t v30 = [v5 status];
        uint64_t v25 = 45;
        if (isMetaClass) {
          uint64_t v25 = 43;
        }
        v20(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v25, ClassName, Name, 164, v30);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v13 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
LABEL_24:

        uint64_t v6 = 0;
        goto LABEL_25;
      }
      int v26 = object_getClass(a1);
      if (class_isMetaClass(v26)) {
        int v27 = 43;
      }
      else {
        int v27 = 45;
      }
      *(_DWORD *)int buf = 67110146;
      int v32 = v27;
      __int16 v33 = 2082;
      uint64_t v34 = object_getClassName(a1);
      __int16 v35 = 2082;
      unsigned int v36 = sel_getName("signChallenge:authenticationType:");
      __int16 v37 = 1024;
      int v38 = 164;
      __int16 v39 = 1024;
      unsigned int v40 = [v5 status];
      int v16 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
      __int16 v17 = v13;
      uint32_t v18 = 40;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v7 = NFLogGetLogger();
      if (v7)
      {
        id v8 = (void (*)(uint64_t, const char *, ...))v7;
        uint64_t v9 = object_getClass(a1);
        BOOL v10 = class_isMetaClass(v9);
        uint64_t v11 = object_getClassName(a1);
        id v29 = sel_getName("signChallenge:authenticationType:");
        uint64_t v12 = 45;
        if (v10) {
          uint64_t v12 = 43;
        }
        v8(3, "%c[%{public}s %{public}s]:%i Command failed", v12, v11, v29, 160);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v13 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
      int v14 = object_getClass(a1);
      if (class_isMetaClass(v14)) {
        int v15 = 43;
      }
      else {
        int v15 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v32 = v15;
      __int16 v33 = 2082;
      uint64_t v34 = object_getClassName(a1);
      __int16 v35 = 2082;
      unsigned int v36 = sel_getName("signChallenge:authenticationType:");
      __int16 v37 = 1024;
      int v38 = 160;
      int v16 = "%c[%{public}s %{public}s]:%i Command failed";
      __int16 v17 = v13;
      uint32_t v18 = 34;
    }
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    goto LABEL_24;
  }
  uint64_t v6 = 0;
LABEL_26:

  return v6;
}

void sub_1000A3D08(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  char v4 = [(id)a1 driverWrapper];
  if (!v4 || (char v5 = v4[218], v4, (v5 & 1) == 0))
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("requestFieldDetectKeepAlive:");
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v7(4, "%c[%{public}s %{public}s]:%i Device does not have antenna", v11, ClassName, Name, 27);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = object_getClass((id)a1);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v68 = v14;
      __int16 v69 = 2082;
      unsigned int v70 = object_getClassName((id)a1);
      __int16 v71 = 2082;
      uint64_t v72 = sel_getName("requestFieldDetectKeepAlive:");
      __int16 v73 = 1024;
      int v74 = 27;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Device does not have antenna", buf, 0x22u);
    }

    return;
  }
  if ((*(unsigned char *)(a1 + 355) & 1) == a2) {
    return;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v15 = NFLogGetLogger();
  if (v15)
  {
    int v16 = (void (*)(uint64_t, const char *, ...))v15;
    __int16 v17 = object_getClass((id)a1);
    BOOL v18 = class_isMetaClass(v17);
    __int16 v19 = object_getClassName((id)a1);
    id v20 = sel_getName("requestFieldDetectKeepAlive:");
    uint64_t v21 = 45;
    if (v18) {
      uint64_t v21 = 43;
    }
    v16(6, "%c[%{public}s %{public}s]:%i enable: %d, current=%d", v21, v19, v20, 36, a2, *(unsigned char *)(a1 + 355) & 1);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = object_getClass((id)a1);
    if (class_isMetaClass(v23)) {
      int v24 = 43;
    }
    else {
      int v24 = 45;
    }
    uint64_t v25 = object_getClassName((id)a1);
    int v26 = sel_getName("requestFieldDetectKeepAlive:");
    int v27 = *(unsigned char *)(a1 + 355) & 1;
    *(_DWORD *)int buf = 67110402;
    int v68 = v24;
    __int16 v69 = 2082;
    unsigned int v70 = v25;
    __int16 v71 = 2082;
    uint64_t v72 = v26;
    __int16 v73 = 1024;
    int v74 = 36;
    __int16 v75 = 1024;
    LODWORD(v76[0]) = a2;
    WORD2(v76[0]) = 1024;
    *(_DWORD *)((char *)v76 + 6) = v27;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enable: %d, current=%d", buf, 0x2Eu);
  }

  BOOL v28 = [(id)a1 driverWrapper];
  id v29 = v28;
  if (!a2)
  {
    sub_1002114AC(v28, @"Field Detect");

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v41 = NFLogGetLogger();
    if (v41)
    {
      id v42 = (void (*)(uint64_t, const char *, ...))v41;
      int v43 = object_getClass((id)a1);
      BOOL v44 = class_isMetaClass(v43);
      NSErrorUserInfoKey v45 = object_getClassName((id)a1);
      id v66 = sel_getName("requestFieldDetectKeepAlive:");
      uint64_t v46 = 45;
      if (v44) {
        uint64_t v46 = 43;
      }
      v42(6, "%c[%{public}s %{public}s]:%i releasing NFCD keep alive transaction for Field Detect", v46, v45, v66, 50);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v47 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v48 = object_getClass((id)a1);
      if (class_isMetaClass(v48)) {
        int v49 = 43;
      }
      else {
        int v49 = 45;
      }
      id v50 = object_getClassName((id)a1);
      uint64_t v51 = sel_getName("requestFieldDetectKeepAlive:");
      *(_DWORD *)int buf = 67109890;
      int v68 = v49;
      __int16 v69 = 2082;
      unsigned int v70 = v50;
      __int16 v71 = 2082;
      uint64_t v72 = v51;
      __int16 v73 = 1024;
      int v74 = 50;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i releasing NFCD keep alive transaction for Field Detect", buf, 0x22u);
    }

    id v52 = *(void **)(a1 + 264);
    *(void *)(a1 + 264) = 0;
    goto LABEL_56;
  }
  uint64_t v30 = sub_10020EC8C(v28, @"Field Detect", 1uLL);

  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v31 = NFLogGetLogger();
  int v32 = (void (*)(uint64_t, const char *, ...))v31;
  if (!v30)
  {
    if (v31)
    {
      BOOL v53 = object_getClass((id)a1);
      BOOL v54 = class_isMetaClass(v53);
      int v55 = object_getClassName((id)a1);
      long long v56 = sel_getName("requestFieldDetectKeepAlive:");
      uint64_t v57 = 45;
      if (v54) {
        uint64_t v57 = 43;
      }
      v32(6, "%c[%{public}s %{public}s]:%i creating NFCD keep alive transaction for Field Detect", v57, v55, v56, 45);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    long long v58 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      long long v59 = object_getClass((id)a1);
      if (class_isMetaClass(v59)) {
        int v60 = 43;
      }
      else {
        int v60 = 45;
      }
      uint64_t v61 = object_getClassName((id)a1);
      int v62 = sel_getName("requestFieldDetectKeepAlive:");
      *(_DWORD *)int buf = 67109890;
      int v68 = v60;
      __int16 v69 = 2082;
      unsigned int v70 = v61;
      __int16 v71 = 2082;
      uint64_t v72 = v62;
      __int16 v73 = 1024;
      int v74 = 45;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i creating NFCD keep alive transaction for Field Detect", buf, 0x22u);
    }

    id v52 = (void *)os_transaction_create();
    objc_storeStrong((id *)(a1 + 264), v52);
LABEL_56:

    *(unsigned char *)(a1 + 355) = a2;
    return;
  }
  if (v31)
  {
    __int16 v33 = object_getClass((id)a1);
    BOOL v34 = class_isMetaClass(v33);
    __int16 v63 = object_getClassName((id)a1);
    __int16 v65 = sel_getName("requestFieldDetectKeepAlive:");
    uint64_t v35 = 45;
    if (v34) {
      uint64_t v35 = 43;
    }
    v32(3, "%c[%{public}s %{public}s]:%i Failed to open session : %@", v35, v63, v65, 40, v30);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  unsigned int v36 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    __int16 v37 = object_getClass((id)a1);
    if (class_isMetaClass(v37)) {
      int v38 = 43;
    }
    else {
      int v38 = 45;
    }
    __int16 v39 = object_getClassName((id)a1);
    unsigned int v40 = sel_getName("requestFieldDetectKeepAlive:");
    *(_DWORD *)int buf = 67110146;
    int v68 = v38;
    __int16 v69 = 2082;
    unsigned int v70 = v39;
    __int16 v71 = 2082;
    uint64_t v72 = v40;
    __int16 v73 = 1024;
    int v74 = 40;
    __int16 v75 = 2112;
    v76[0] = v30;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to open session : %@", buf, 0x2Cu);
  }
}

id sub_1000A43A4(id *a1, unsigned int a2)
{
  if (!a1)
  {
    id v49 = 0;
    goto LABEL_45;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    char v5 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("enableFieldDetect:");
    uint64_t v8 = 45;
    if (isMetaClass) {
      uint64_t v8 = 43;
    }
    v5(6, "%c[%{public}s %{public}s]:%i enable: %d", v8, ClassName, Name, 64, a2);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = object_getClass(a1);
    if (class_isMetaClass(v10)) {
      int v11 = 43;
    }
    else {
      int v11 = 45;
    }
    *(_DWORD *)int buf = 67110146;
    int v62 = v11;
    __int16 v63 = 2082;
    BOOL v64 = object_getClassName(a1);
    __int16 v65 = 2082;
    id v66 = sel_getName("enableFieldDetect:");
    __int16 v67 = 1024;
    int v68 = 64;
    __int16 v69 = 1024;
    unsigned int v70 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enable: %d", buf, 0x28u);
  }

  id v12 = a1[3];
  sub_100040C1C(v12);

  if (a2) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 0;
  }
  int v14 = [a1 lastKnownRoutingConfig];
  uint64_t v15 = [v14 cloneWithFieldDetect:v13];

  int v16 = [a1 setRoutingConfig:v15];
  if ([v16 code] == (id)47)
  {
    uint64_t v17 = [a1 driverWrapper];
    BOOL v18 = (void *)v17;
    if (v17)
    {
      unsigned int v19 = [*(id *)(v17 + 88) readerModeProtectionActive];

      if (!v19) {
        goto LABEL_29;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v20 = NFLogGetLogger();
      if (v20)
      {
        uint64_t v21 = (void (*)(uint64_t, const char *, ...))v20;
        int v22 = object_getClass(a1);
        BOOL v23 = class_isMetaClass(v22);
        int v24 = object_getClassName(a1);
        uint64_t v57 = sel_getName("enableFieldDetect:");
        uint64_t v25 = 45;
        if (v23) {
          uint64_t v25 = 43;
        }
        v21(3, "%c[%{public}s %{public}s]:%i Disabling reader mode", v25, v24, v57, 75);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v26 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = object_getClass(a1);
        if (class_isMetaClass(v27)) {
          int v28 = 43;
        }
        else {
          int v28 = 45;
        }
        id v29 = object_getClassName(a1);
        uint64_t v30 = sel_getName("enableFieldDetect:");
        *(_DWORD *)int buf = 67109890;
        int v62 = v28;
        __int16 v63 = 2082;
        BOOL v64 = v29;
        __int16 v65 = 2082;
        id v66 = v30;
        __int16 v67 = 1024;
        int v68 = 75;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Disabling reader mode", buf, 0x22u);
      }

      uint64_t v31 = [a1 lastKnownRoutingConfig];
      unsigned int v32 = [v31 wantsReader];

      if (!v32) {
        goto LABEL_29;
      }
      BOOL v18 = [v15 cloneWithReaderDisabled];
      uint64_t v33 = [a1 setRoutingConfig:v18];

      int v16 = (void *)v33;
    }
  }
LABEL_29:
  if (v16)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v34 = NFLogGetLogger();
    if (v34)
    {
      uint64_t v35 = (void (*)(uint64_t, const char *, ...))v34;
      unsigned int v36 = object_getClass(a1);
      BOOL v37 = class_isMetaClass(v36);
      int v38 = object_getClassName(a1);
      long long v58 = sel_getName("enableFieldDetect:");
      uint64_t v39 = 45;
      if (v37) {
        uint64_t v39 = 43;
      }
      v35(3, "%c[%{public}s %{public}s]:%i Failed to change mode", v39, v38, v58, 83);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    unsigned int v40 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = object_getClass(a1);
      if (class_isMetaClass(v41)) {
        int v42 = 43;
      }
      else {
        int v42 = 45;
      }
      int v43 = object_getClassName(a1);
      BOOL v44 = sel_getName("enableFieldDetect:");
      *(_DWORD *)int buf = 67109890;
      int v62 = v42;
      __int16 v63 = 2082;
      BOOL v64 = v43;
      __int16 v65 = 2082;
      id v66 = v44;
      __int16 v67 = 1024;
      int v68 = 83;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to change mode", buf, 0x22u);
    }

    id v45 = objc_alloc((Class)NSError);
    uint64_t v46 = +[NSString stringWithUTF8String:"nfcd"];
    id v47 = [v16 code];
    v59[0] = NSLocalizedDescriptionKey;
    if ((uint64_t)[v16 code] > 70) {
      uint64_t v48 = 71;
    }
    else {
      uint64_t v48 = (uint64_t)[v16 code];
    }
    id v50 = +[NSString stringWithUTF8String:off_1003034E8[v48]];
    v60[0] = v50;
    v60[1] = v16;
    v59[1] = NSUnderlyingErrorKey;
    void v59[2] = @"Line";
    v60[2] = &off_10031AEA8;
    v59[3] = @"Method";
    id v51 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("enableFieldDetect:")];
    v60[3] = v51;
    void v59[4] = NSDebugDescriptionErrorKey;
    id v52 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("enableFieldDetect:"), 84];
    void v60[4] = v52;
    BOOL v53 = +[NSDictionary dictionaryWithObjects:v60 forKeys:v59 count:5];
    id v49 = [v45 initWithDomain:v46 code:v47 userInfo:v53];
  }
  else
  {
    id v49 = 0;
  }

LABEL_45:

  return v49;
}

uint64_t sub_1000A49F8(void *a1)
{
  if (!a1 || a1[36] != 1 || !sub_1000FAF70(a1)) {
    return 0;
  }

  return sub_1000A4A58((uint64_t)a1);
}

uint64_t sub_1000A4A58(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = *(id *)(result + 120);
    unsigned int v3 = [v2 fieldDetectRequested];

    id v4 = *(id *)(v1 + 16);
    unsigned int v5 = [v4 isActive];

    uint64_t v6 = *(id *)(v1 + 24);
    if (v6) {
      BOOL v7 = v6[17] == 1 || *((unsigned char *)v6 + 170) != 0;
    }
    else {
      BOOL v7 = 0;
    }

    return v5 | v7 | sub_1001DE1EC(v1) | v3;
  }
  return result;
}

uint64_t sub_1000A4B04(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1 || [v3 notificationType] != (id)3)
  {
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  id v5 = v4;
  if ([v5 terminalType] == (id)5 && !objc_msgSend(v5, "terminalSubType"))
  {
    uint64_t v6 = [v5 userInfo];

    if (!v6) {
      goto LABEL_6;
    }
    sub_100183960();
    uint64_t v8 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = sub_100184158(v8);

    sub_100183960();
    BOOL v10 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = sub_100183E14(v10);

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v13 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("updateFieldNotificationWithCHInfo:");
      uint64_t v17 = 45;
      if (isMetaClass) {
        uint64_t v17 = 43;
      }
      v13(6, "%c[%{public}s %{public}s]:%i Setting local random  in CH field : %llu   %@", v17, ClassName, Name, 146, v11, v9);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = object_getClass(a1);
      if (class_isMetaClass(v19)) {
        int v20 = 43;
      }
      else {
        int v20 = 45;
      }
      *(_DWORD *)int buf = 67110402;
      int v60 = v20;
      __int16 v61 = 2082;
      int v62 = object_getClassName(a1);
      __int16 v63 = 2082;
      BOOL v64 = sel_getName("updateFieldNotificationWithCHInfo:");
      __int16 v65 = 1024;
      int v66 = 146;
      __int16 v67 = 2048;
      uint64_t v68 = v11;
      __int16 v69 = 2112;
      unsigned int v70 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Setting local random  in CH field : %llu   %@", buf, 0x36u);
    }

    uint64_t v21 = [v5 userInfo];
    [v21 setValue:v9 forKey:@"CHLocalRandom"];

    int v22 = [v5 userInfo];
    BOOL v23 = [v22 objectForKey:@"CHRemoteRandom"];

    if (!v23 || !v9)
    {
LABEL_56:

      uint64_t v6 = 1;
      goto LABEL_6;
    }
    if ((unint64_t)[v23 length] > 8)
    {
      id v24 = 0;
      id v56 = 0;
    }
    else
    {
      id v58 = 0;
      id v56 = [v23 NF_toUint64:&v58];
      id v24 = v58;
      if (!v24)
      {
        int v36 = 1;
LABEL_35:
        if ((unint64_t)[v9 length] <= 8)
        {
          id v57 = v24;
          id v37 = [v9 NF_toUint64:&v57];
          id v38 = v57;

          if (v38)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v39 = NFLogGetLogger();
            if (v39)
            {
              unsigned int v40 = (void (*)(uint64_t, const char *, ...))v39;
              uint64_t v41 = object_getClass(a1);
              BOOL v42 = class_isMetaClass(v41);
              id v52 = object_getClassName(a1);
              int v55 = sel_getName("updateFieldNotificationWithCHInfo:");
              uint64_t v43 = 45;
              if (v42) {
                uint64_t v43 = 43;
              }
              v40(3, "%c[%{public}s %{public}s]:%i Invalid value: %@", v43, v52, v55, 169, v9);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            BOOL v44 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            {
              id v45 = object_getClass(a1);
              if (class_isMetaClass(v45)) {
                int v46 = 43;
              }
              else {
                int v46 = 45;
              }
              id v47 = object_getClassName(a1);
              uint64_t v48 = sel_getName("updateFieldNotificationWithCHInfo:");
              *(_DWORD *)int buf = 67110146;
              int v60 = v46;
              __int16 v61 = 2082;
              int v62 = v47;
              __int16 v63 = 2082;
              BOOL v64 = v48;
              __int16 v65 = 1024;
              int v66 = 169;
              __int16 v67 = 2112;
              uint64_t v68 = (uint64_t)v9;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid value: %@", buf, 0x2Cu);
            }

            id v24 = v38;
          }
          else
          {
            if (v56 < v37) {
              int v49 = v36;
            }
            else {
              int v49 = 0;
            }
            if (v49 == 1)
            {
              id v24 = [v5 userInfo];
              id v50 = +[NSNumber numberWithBool:1];
              [v24 setValue:v50 forKey:@"CHInitiatorDetected"];
LABEL_55:

              goto LABEL_56;
            }
            id v24 = 0;
          }
        }
        id v50 = [v5 userInfo];
        id v51 = +[NSNumber numberWithBool:1];
        [v50 setValue:v51 forKey:@"CHReceiverDetected"];

        goto LABEL_55;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v25 = NFLogGetLogger();
      if (v25)
      {
        int v26 = (void (*)(uint64_t, const char *, ...))v25;
        int v27 = object_getClass(a1);
        BOOL v28 = class_isMetaClass(v27);
        id v29 = object_getClassName(a1);
        BOOL v54 = sel_getName("updateFieldNotificationWithCHInfo:");
        uint64_t v30 = 45;
        if (v28) {
          uint64_t v30 = 43;
        }
        v26(3, "%c[%{public}s %{public}s]:%i Invalid value: %@", v30, v29, v54, 159, v23);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        unsigned int v32 = object_getClass(a1);
        if (class_isMetaClass(v32)) {
          int v33 = 43;
        }
        else {
          int v33 = 45;
        }
        uint64_t v34 = object_getClassName(a1);
        uint64_t v35 = sel_getName("updateFieldNotificationWithCHInfo:");
        *(_DWORD *)int buf = 67110146;
        int v60 = v33;
        __int16 v61 = 2082;
        int v62 = v34;
        __int16 v63 = 2082;
        BOOL v64 = v35;
        __int16 v65 = 1024;
        int v66 = 159;
        __int16 v67 = 2112;
        uint64_t v68 = (uint64_t)v23;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid value: %@", buf, 0x2Cu);
      }
    }
    int v36 = 0;
    goto LABEL_35;
  }
  uint64_t v6 = 0;
LABEL_6:

LABEL_8:
  return v6;
}

void sub_1000A5150(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v11 = v3;
    uint64_t v4 = sub_10000C050();
    unsigned int v5 = [v11 rfTechnology];
    if (v4) {
      *(_DWORD *)(v4 + 16) = v5;
    }
    if (!sub_1001804AC(a1) || [v11 chFieldType] == (id)1)
    {
      if ([v11 notificationType] == (id)2)
      {
        id v6 = v11;
        BOOL v7 = v6;
        if (v4)
        {
          *(_DWORD *)(v4 + 32) = 2;
          *(unsigned char *)(v4 + 20) = 1;
          *(_DWORD *)(v4 + 40) = [v6 terminalType];
          unsigned int v8 = [v7 terminalMode];

          *(_DWORD *)(v4 + 44) = v8;
LABEL_12:

          id v3 = v11;
          goto LABEL_13;
        }
        [v6 terminalType];
        [v7 terminalMode];
LABEL_18:

        goto LABEL_12;
      }
      if ([v11 notificationType] != (id)3) {
        goto LABEL_12;
      }
    }
    id v9 = v11;
    BOOL v7 = v9;
    if (v4)
    {
      *(_DWORD *)(v4 + 32) = 3;
      *(unsigned char *)(v4 + 20) = 1;
      *(_DWORD *)(v4 + 40) = [v9 terminalType];
      unsigned int v10 = [v7 terminalSubType];

      *(_DWORD *)(v4 + 36) = v10;
      goto LABEL_12;
    }
    [v9 terminalType];
    [v7 terminalSubType];
    goto LABEL_18;
  }
LABEL_13:
}

void sub_1000A52B4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && [v3 notificationType] == (id)2 && objc_msgSend(v4, "terminalType") == 3)
  {
    sub_100003C44(a1, "com.apple.nearfield.handoff.terminal");
    unsigned int v5 = NFSharedSignpostLog();
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)id v6 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "HANDOFF_FIELD_ON_NOTIFICATION", (const char *)&unk_100286819, v6, 2u);
    }
  }
}

void sub_1000A5370(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && [v3 notificationType] == (id)3)
  {
    id v5 = v4;
    if ([v5 terminalType] == (id)2 && objc_msgSend(v5, "terminalSubType") == 4)
    {
      id v6 = [v5 homeKitSchemeDataPayload];
      BOOL v7 = [v6 NF_asHexString];

      if (v7)
      {
        unsigned int v8 = +[NSDistributedNotificationCenter defaultCenter];
        [v8 postNotificationName:@"com.apple.nfcd.homekit.field" object:v7 userInfo:0 options:3];

        id v9 = a1[13];
        [v9 sendXpcNotificationEventWithString:v7];
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          id v11 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("_notifyHKAndUAWithFieldNotification:");
          uint64_t v15 = 45;
          if (isMetaClass) {
            uint64_t v15 = 43;
          }
          v11(3, "%c[%{public}s %{public}s]:%i Invalid ecp payload ", v15, ClassName, Name, 243);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v16 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = object_getClass(a1);
          if (class_isMetaClass(v17)) {
            int v18 = 43;
          }
          else {
            int v18 = 45;
          }
          *(_DWORD *)int buf = 67109890;
          int v21 = v18;
          __int16 v22 = 2082;
          BOOL v23 = object_getClassName(a1);
          __int16 v24 = 2082;
          uint64_t v25 = sel_getName("_notifyHKAndUAWithFieldNotification:");
          __int16 v26 = 1024;
          int v27 = 243;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid ecp payload ", buf, 0x22u);
        }
      }
    }
  }
}

uint64_t sub_1000A55C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if (([v3 cachedBeforeRFReset] & 1) != 0
      || (id v5 = *(id *)(a1 + 112),
          [v5 suspendOnFieldList],
          id v6 = objc_claimAutoreleasedReturnValue(),
          id v7 = [v6 count],
          v6,
          v5,
          !v7))
    {
      a1 = 0;
    }
    else
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id v8 = *(id *)(a1 + 112);
      id v9 = [v8 suspendOnFieldList];

      id v10 = [v9 countByEnumeratingWithState:&v32 objects:v46 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v33;
        while (2)
        {
          for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v33 != v12) {
              objc_enumerationMutation(v9);
            }
            if ([*(id *)(*((void *)&v32 + 1) + 8 * i) isEqual:v4])
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t Logger = NFLogGetLogger();
              if (Logger)
              {
                uint64_t v15 = (void (*)(uint64_t, const char *, ...))Logger;
                Class Class = object_getClass((id)a1);
                BOOL isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName((id)a1);
                Name = sel_getName("_checkActiveSessionForSuspensionWithFieldNotification:");
                id v20 = *(id *)(a1 + 112);
                uint64_t v21 = 45;
                if (isMetaClass) {
                  uint64_t v21 = 43;
                }
                v15(6, "%c[%{public}s %{public}s]:%i Suspend active session %{public}@ on field", v21, ClassName, Name, 258, v20);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              __int16 v22 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                BOOL v23 = object_getClass((id)a1);
                if (class_isMetaClass(v23)) {
                  int v24 = 43;
                }
                else {
                  int v24 = 45;
                }
                uint64_t v25 = object_getClassName((id)a1);
                __int16 v26 = sel_getName("_checkActiveSessionForSuspensionWithFieldNotification:");
                id v27 = *(id *)(a1 + 112);
                *(_DWORD *)int buf = 67110146;
                int v37 = v24;
                __int16 v38 = 2082;
                uint64_t v39 = v25;
                __int16 v40 = 2082;
                uint64_t v41 = v26;
                __int16 v42 = 1024;
                int v43 = 258;
                __int16 v44 = 2114;
                id v45 = v27;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Suspend active session %{public}@ on field", buf, 0x2Cu);
              }
              id v28 = *(id *)(a1 + 112);
              v30[0] = _NSConcreteStackBlock;
              v30[1] = 3221225472;
              v30[2] = sub_1000A5910;
              v30[3] = &unk_100303730;
              void v30[4] = a1;
              id v31 = v4;
              [v28 createHandoffTokenWithCompletion:v30];

              a1 = 1;
              goto LABEL_24;
            }
          }
          id v11 = [v9 countByEnumeratingWithState:&v32 objects:v46 count:16];
          if (v11) {
            continue;
          }
          break;
        }
      }
      a1 = 0;
LABEL_24:
    }
  }

  return a1;
}

void sub_1000A5910(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  if (v3) {
    id v5 = *(void **)(v3 + 112);
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  sub_1001DE3AC((id *)v3, v6, 2, *(void **)(a1 + 40), v4, 0);
}

void sub_1000A5998(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1 && ([v4 cachedBeforeRFReset] & 1) == 0)
  {
    id v3 = *(id *)(a1 + 120);
    [v3 forceNotifyFieldDetectPresentmentWithFieldNotification:v4 walletDomain:3];
  }
}

void sub_1000A5A08(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v91 = a4;
  if (a1)
  {
    unint64_t v9 = sub_100035CF0(v7);
    char v10 = sub_100003110((uint64_t)a1);
    id v11 = [a1[15] walletDomain];
    char v12 = (char)v11;
    BOOL obj = (unint64_t)v11 < 5;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    int v94 = a1;
    if (Logger)
    {
      int v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
      id v89 = [v7 category];
      BOOL v86 = Name;
      a1 = v94;
      uint64_t v19 = 45;
      if (isMetaClass) {
        uint64_t v19 = 43;
      }
      v14(6, "%c[%{public}s %{public}s]:%i CategoryFromField=0x%lx, ResultFieldDetectCategory=0x%lx", v19, ClassName, v86, 296, v89, v9);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = object_getClass(a1);
      id v22 = v8;
      BOOL v23 = v7;
      if (class_isMetaClass(v21)) {
        int v24 = 43;
      }
      else {
        int v24 = 45;
      }
      uint64_t v25 = object_getClassName(v94);
      __int16 v26 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
      id v27 = [v23 category];
      *(_DWORD *)int buf = 67110402;
      int v101 = v24;
      id v7 = v23;
      id v8 = v22;
      a1 = v94;
      __int16 v102 = 2082;
      long long v103 = v25;
      __int16 v104 = 2082;
      BOOL v105 = v26;
      __int16 v106 = 1024;
      int v107 = 296;
      __int16 v108 = 2048;
      id v109 = v27;
      __int16 v110 = 2048;
      unint64_t v111 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i CategoryFromField=0x%lx, ResultFieldDetectCategory=0x%lx", buf, 0x36u);
    }

    if (v10 & 1 | (v9 >> 2) & 1)
    {
      if (v8)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v28 = NFLogGetLogger();
        if (v28)
        {
          id v29 = (void (*)(uint64_t, const char *, ...))v28;
          uint64_t v30 = object_getClass(a1);
          BOOL v31 = class_isMetaClass(v30);
          long long v32 = object_getClassName(a1);
          long long v33 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
          long long v34 = [v8 clientName];
          uint64_t v35 = 45;
          if (v31) {
            uint64_t v35 = 43;
          }
          v29(6, "%c[%{public}s %{public}s]:%i Notify %{public}@ without app launch trigger", v35, v32, v33, 308, v34);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v36 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = object_getClass(a1);
          if (class_isMetaClass(v37)) {
            int v38 = 43;
          }
          else {
            int v38 = 45;
          }
          uint64_t v39 = object_getClassName(a1);
          __int16 v40 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
          uint64_t v41 = [v8 clientName];
          *(_DWORD *)int buf = 67110146;
          int v101 = v38;
          __int16 v102 = 2082;
          long long v103 = v39;
          __int16 v104 = 2082;
          BOOL v105 = v40;
          __int16 v106 = 1024;
          int v107 = 308;
          __int16 v108 = 2114;
          id v109 = v41;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notify %{public}@ without app launch trigger", buf, 0x2Cu);
        }
        [v8 handleFieldNotification:v7];
        goto LABEL_44;
      }
      if ((obj & (0x19u >> v12) & 1) != 0
        || (id v54 = a1[15],
            unsigned int v55 = [v54 notifyFieldDetectPresentmentWithFieldNotification:v7],
            v54,
            !v55))
      {
LABEL_44:
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        obja = v91;
        id v66 = [obja countByEnumeratingWithState:&v95 objects:v99 count:16];
        if (v66)
        {
          id v67 = v66;
          id v90 = v8;
          id v68 = v7;
          uint64_t v69 = *(void *)v96;
          do
          {
            for (unint64_t i = 0; i != v67; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v96 != v69) {
                objc_enumerationMutation(obja);
              }
              __int16 v71 = *(void **)(*((void *)&v95 + 1) + 8 * i);
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v72 = NFLogGetLogger();
              if (v72)
              {
                __int16 v73 = (void (*)(uint64_t, const char *, ...))v72;
                int v74 = object_getClass(v94);
                BOOL v75 = class_isMetaClass(v74);
                int v76 = object_getClassName(v94);
                BOOL v77 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
                uint64_t v78 = [v71 clientName];
                uint64_t v79 = 45;
                if (v75) {
                  uint64_t v79 = 43;
                }
                v73(6, "%c[%{public}s %{public}s]:%i Notify %{public}@", v79, v76, v77, 323, v78);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              id v80 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v81 = object_getClass(v94);
                if (class_isMetaClass(v81)) {
                  int v82 = 43;
                }
                else {
                  int v82 = 45;
                }
                uint64_t v83 = object_getClassName(v94);
                BOOL v84 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
                uint64_t v85 = [v71 clientName];
                *(_DWORD *)int buf = 67110146;
                int v101 = v82;
                __int16 v102 = 2082;
                long long v103 = v83;
                __int16 v104 = 2082;
                BOOL v105 = v84;
                __int16 v106 = 1024;
                int v107 = 323;
                __int16 v108 = 2114;
                id v109 = v85;
                _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Notify %{public}@", buf, 0x2Cu);
              }
              [v71 handleFieldNotification:v68];
            }
            id v67 = [obja countByEnumeratingWithState:&v95 objects:v99 count:16];
          }
          while (v67);
          id v7 = v68;
          id v8 = v90;
        }
        uint64_t v48 = obja;
        goto LABEL_62;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v56 = NFLogGetLogger();
      if (v56)
      {
        id v57 = (void (*)(uint64_t, const char *, ...))v56;
        id v58 = object_getClass(a1);
        BOOL v59 = class_isMetaClass(v58);
        int v60 = object_getClassName(a1);
        NSErrorUserInfoKey v88 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
        uint64_t v61 = 45;
        if (v59) {
          uint64_t v61 = 43;
        }
        v57(6, "%c[%{public}s %{public}s]:%i App launch in progress; skipping notifications to other sessions",
          v61,
          v60,
          v88,
          316);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v48 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_62;
      }
      int v62 = object_getClass(a1);
      if (class_isMetaClass(v62)) {
        int v63 = 43;
      }
      else {
        int v63 = 45;
      }
      BOOL v64 = object_getClassName(a1);
      __int16 v65 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
      *(_DWORD *)int buf = 67109890;
      int v101 = v63;
      __int16 v102 = 2082;
      long long v103 = v64;
      __int16 v104 = 2082;
      BOOL v105 = v65;
      __int16 v106 = 1024;
      int v107 = 316;
      BOOL v53 = "%c[%{public}s %{public}s]:%i App launch in progress; skipping notifications to other sessions";
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v42 = NFLogGetLogger();
      if (v42)
      {
        int v43 = (void (*)(uint64_t, const char *, ...))v42;
        __int16 v44 = object_getClass(a1);
        BOOL v45 = class_isMetaClass(v44);
        int v46 = object_getClassName(a1);
        id v87 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
        uint64_t v47 = 45;
        if (v45) {
          uint64_t v47 = 43;
        }
        v43(6, "%c[%{public}s %{public}s]:%i Field not intent for wallet processing", v47, v46, v87, 302);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v48 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_62;
      }
      int v49 = object_getClass(a1);
      if (class_isMetaClass(v49)) {
        int v50 = 43;
      }
      else {
        int v50 = 45;
      }
      id v51 = object_getClassName(a1);
      id v52 = sel_getName("_handleAppPresentmentWithField:sessionOverridingAppLaunch:walletIntentSessions:");
      *(_DWORD *)int buf = 67109890;
      int v101 = v50;
      __int16 v102 = 2082;
      long long v103 = v51;
      __int16 v104 = 2082;
      BOOL v105 = v52;
      __int16 v106 = 1024;
      int v107 = 302;
      BOOL v53 = "%c[%{public}s %{public}s]:%i Field not intent for wallet processing";
    }
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v53, buf, 0x22u);
LABEL_62:
  }
}

void sub_1000A6270(uint64_t a1, void *a2, char a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (a1)
  {
    id v11 = *(id *)(a1 + 232);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A6370;
    block[3] = &unk_100303780;
    char v17 = a3;
    void block[4] = a1;
    uint64_t v15 = "_queueFieldDetectProtocolSession:coreNFC:requestor:completion:";
    int v16 = a4;
    id v14 = v10;
    id v13 = v9;
    dispatch_async(v11, block);
  }
}

void sub_1000A6370(uint64_t a1)
{
  id v2 = &v16;
  uint64_t v16 = 0;
  char v17 = &v16;
  uint64_t v18 = 0x3032000000;
  uint64_t v19 = sub_10000B818;
  id v20 = sub_1000A6558;
  id v21 = 0;
  if (*(unsigned char *)(a1 + 68))
  {
    id v3 = *(void **)(a1 + 32);
    if (v3) {
      id v3 = (void *)v3[2];
    }
    id v4 = v3;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000A6560;
    v14[3] = &unk_100303758;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    int v15 = *(_DWORD *)(a1 + 64);
    void v14[4] = v5;
    v14[5] = &v16;
    v14[6] = v6;
    [v4 enumerateFieldDetectSessionsUsingBlock:v14];

    id v2 = v17;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v7 + 16))(v7, *(void *)(a1 + 40), v2[5]);
    id v2 = v17;
  }
  if (!v2[5])
  {
    id v8 = *(void **)(a1 + 32);
    if (v8) {
      id v8 = (void *)v8[2];
    }
    id v9 = v8;
    [v9 addFieldDetectSession:*(void *)(a1 + 40)];

    [*(id *)(a1 + 40) willStartSession];
    [*(id *)(a1 + 40) didStartSession:0];
    char v13 = 0;
    id v10 = [*(id *)(a1 + 32) driverWrapper];
    id v12 = 0;
    sub_100216618(v10, &v13, &v12);
    id v11 = v12;

    if (v13)
    {
      [*(id *)(a1 + 40) handleFieldChanged:1];
      if (v11) {
        [*(id *)(a1 + 40) handleFieldNotification:v11];
      }
    }
    [*(id *)(a1 + 32) maybeStartNextSession];
  }
  _Block_object_dispose(&v16, 8);
}

void sub_1000A653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A6558(uint64_t a1)
{
}

void sub_1000A6560(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v3 serviceType] == (id)2)
  {
    id v4 = [v3 connection];
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v6 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      id v11 = [v4 NF_userInfo];
      id v12 = [v11 objectForKeyedSubscript:@"ClientName"];
      uint64_t v13 = 45;
      if (isMetaClass) {
        uint64_t v13 = 43;
      }
      v6(6, "%c[%{public}s %{public}s]:%i Existing session found (%{public}@)", v13, ClassName, Name, 351, v12);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v15)) {
        int v16 = 43;
      }
      else {
        int v16 = 45;
      }
      char v17 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v18 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v19 = [v4 NF_userInfo];
      id v20 = [v19 objectForKeyedSubscript:@"ClientName"];
      *(_DWORD *)int buf = 67110146;
      int v39 = v16;
      __int16 v40 = 2082;
      uint64_t v41 = v17;
      __int16 v42 = 2082;
      int v43 = v18;
      __int16 v44 = 1024;
      int v45 = 351;
      __int16 v46 = 2114;
      uint64_t v47 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Existing session found (%{public}@)", buf, 0x2Cu);
    }
    unsigned int v21 = [v4 processIdentifier];
    int v22 = *(_DWORD *)(a1 + 56);
    id v23 = objc_alloc((Class)NSError);
    int v24 = +[NSString stringWithUTF8String:"nfcd"];
    if (v21 == v22)
    {
      NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
      CFStringRef v37 = @"Previous session exists";
      uint64_t v25 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      id v26 = [v23 initWithDomain:v24 code:36 userInfo:v25];
      uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8);
      id v28 = *(id *)(v27 + 40);
      *(void *)(v27 + 40) = v26;
    }
    else
    {
      v34[0] = NSLocalizedDescriptionKey;
      uint64_t v25 = +[NSString stringWithUTF8String:"Busy"];
      v35[0] = v25;
      v35[1] = &off_10031AEC0;
      v34[1] = @"Line";
      void v34[2] = @"Method";
      id v28 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName(*(SEL *)(a1 + 48))];
      void v35[2] = v28;
      v34[3] = NSDebugDescriptionErrorKey;
      id v29 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName(*(SEL *)(a1 + 48)), 355];
      v35[3] = v29;
      uint64_t v30 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:4];
      id v31 = [v23 initWithDomain:v24 code:2 userInfo:v30];
      uint64_t v32 = *(void *)(*(void *)(a1 + 40) + 8);
      long long v33 = *(void **)(v32 + 40);
      *(void *)(v32 + 40) = v31;
    }
  }
}

NSString *sub_1000A695C(void *a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    uint64_t v18 = 0;
    goto LABEL_174;
  }
  switch((int)a2)
  {
    case 1:
      uint64_t v5 = sub_1000A84BC(a1, 0, a3);
      goto LABEL_15;
    case 2:
      uint64_t v5 = sub_1000A84BC(a1, 1, a3);
LABEL_15:
      uint64_t v18 = (NSString *)v5;
      goto LABEL_174;
    case 3:
      uint64_t v19 = objc_opt_new();
      NSErrorUserInfoKey v197 = 0;
      id v20 = a1;
      id v181 = [a1 selectCRSWithError:&v197];
      unsigned int v21 = v197;
      int v22 = v21;
      if (v21)
      {
        uint64_t v18 = v21;
        goto LABEL_173;
      }
      if (!v181)
      {
        id v81 = objc_alloc((Class)NSError);
        int v82 = +[NSString stringWithUTF8String:"nfcd"];
        v195[0] = NSLocalizedDescriptionKey;
        uint64_t v83 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)int buf = v83;
        BOOL v84 = +[NSDictionary dictionaryWithObjects:buf forKeys:v195 count:1];
        uint64_t v18 = (NSString *)[v81 initWithDomain:v82 code:16 userInfo:v84];

        goto LABEL_173;
      }
      id v179 = [v181 response];
      BOOL v174 = objc_opt_new();
      uint64_t v47 = +[NFTLV TLVWithData:v179];

      if ([v47 tag] == 111)
      {
        uint64_t v171 = objc_opt_new();
        [v174 setObject:v171 forKey:@"File Control Info"];
        uint64_t v48 = [v47 childWithTag:132];
        int v49 = v48;
        if (v48)
        {
          int v50 = [v48 value];
          [v171 setObject:v50 forKey:@"Dedicated File Name"];
        }
        id v51 = [v47 childWithTag:165];

        if (v51)
        {
          id v52 = objc_opt_new();
          [v171 setObject:v52 forKey:@"File Control Info (Proprietary)"];
          BOOL v53 = [v51 childWithTag:40712];

          if (v53)
          {
            id v54 = [v53 value];
            [v52 setObject:v54 forKey:@"Version"];
          }
          int v49 = [v51 childWithTag:128];

          if (v49)
          {
            unsigned int v55 = [v49 value];
            [v52 setObject:v55 forKey:@"Global Update Counter"];
          }
          SEL sel = v174;
        }
        else
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger)
          {
            Class Class = object_getClass(a1);
            if (class_isMetaClass(Class)) {
              uint64_t v116 = 43;
            }
            else {
              uint64_t v116 = 45;
            }
            ClassName = object_getClassName(v20);
            Name = sel_getName("decodeCRSResponse:");
            Logger(3, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", v116, ClassName, Name, 636, 165);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v52 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            __int16 v119 = object_getClass(v20);
            if (class_isMetaClass(v119)) {
              int v120 = 43;
            }
            else {
              int v120 = 45;
            }
            *(_DWORD *)int buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v120;
            *(_WORD *)SEL v194 = 2082;
            *(void *)&v194[2] = object_getClassName(v20);
            *(_WORD *)&v194[10] = 2082;
            *(void *)&v194[12] = sel_getName("decodeCRSResponse:");
            *(_WORD *)&v194[20] = 1024;
            *(_DWORD *)&v194[22] = 636;
            *(_WORD *)&v194[26] = 1024;
            *(_DWORD *)&v194[28] = 165;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", buf, 0x28u);
          }
          SEL sel = 0;
        }

        uint64_t v47 = v51;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        long long v95 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v95)
        {
          long long v96 = object_getClass(a1);
          if (class_isMetaClass(v96)) {
            uint64_t v97 = 43;
          }
          else {
            uint64_t v97 = 45;
          }
          long long v98 = object_getClassName(v20);
          id v99 = sel_getName("decodeCRSResponse:");
          v95(3, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", v97, v98, v99, 624, [v47 tag]);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v49 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          long long v100 = object_getClass(v20);
          if (class_isMetaClass(v100)) {
            int v101 = 43;
          }
          else {
            int v101 = 45;
          }
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v101;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = object_getClassName(v20);
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = sel_getName("decodeCRSResponse:");
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 624;
          *(_WORD *)&v194[26] = 1024;
          *(_DWORD *)&v194[28] = [v47 tag];
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", buf, 0x28u);
        }
        SEL sel = 0;
      }

      if (sel) {
        CFStringRef v121 = (const __CFString *)sel;
      }
      else {
        CFStringRef v121 = @"<ERROR>";
      }
      [v19 setObject:v121 forKey:@"<SELECT>"];
      uint64_t v122 = objc_opt_new();
      __int16 v123 = +[NFTLV TLVWithTag:79 value:0];
      int v124 = [v123 asData];
      [v122 appendData:v124];

      id v180 = [objc_alloc((Class)NSMutableData) initWithBytes:&unk_10028381A length:12];
      if (([v20 supportedTechnologies] & 4) != 0) {
        [v180 appendBytes:&unk_100283826 length:1];
      }
      __int16 v125 = +[NFTLV TLVWithTag:92 value:v180];
      id v126 = [v125 asData];
      [v122 appendData:v126];

      uint64_t v127 = sub_1000C1AB4(v20, v122, 0);
      uint64_t v175 = (void *)v127;
      if (v127) {
        CFStringRef v128 = (const __CFString *)v127;
      }
      else {
        CFStringRef v128 = @"<ERROR>";
      }
      [v19 setObject:v128 forKey:@"APPS"];
      __int16 v129 = [v20 getData:209];
      uint64_t v172 = v129;
      if (v129)
      {
        int v130 = [v129 NF_asHexString];
        [v19 setObject:v130 forKey:@"Version"];
      }
      else
      {
        [v19 setObject:@"<ERROR>" forKey:@"Version"];
      }
      __int16 v131 = [v20 getData:217];
      id v132 = v131;
      if (!v131) {
        goto LABEL_171;
      }
      id v170 = v131;
      if ((unint64_t)[v170 length] > 3)
      {
        BOOL v147 = (char *)[v170 bytes];
        BOOL v148 = (unsigned __int8 *)v147;
        if (*v147 == 1)
        {
          uint64_t v149 = bswap32(*(unsigned __int16 *)(v147 + 1)) >> 16;
          unsigned int v150 = v147[3];
          v195[0] = @"MaxTimeout";
          int v138 = +[NSNumber numberWithUnsignedShort:v149];
          *(void *)int buf = v138;
          v195[1] = @"OsloSupport";
          BOOL v151 = +[NSNumber numberWithBool:v150 & 1];
          *(void *)SEL v194 = v151;
          v195[2] = @"AuthMandatory";
          int v152 = +[NSNumber numberWithBool:(v150 >> 2) & 1];
          *(void *)&v194[8] = v152;
          int v153 = +[NSDictionary dictionaryWithObjects:buf forKeys:v195 count:3];

          goto LABEL_169;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v157 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v157)
        {
          id v158 = object_getClass(v20);
          if (class_isMetaClass(v158)) {
            uint64_t v159 = 43;
          }
          else {
            uint64_t v159 = 45;
          }
          id v160 = object_getClassName(v20);
          id v161 = sel_getName("decodeCRSPlatformConfiguration:");
          v157(3, "%c[%{public}s %{public}s]:%i Unknown version: %d", v159, v160, v161, 661, *v148);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v138 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
        {
          BOOL v162 = object_getClass(v20);
          if (class_isMetaClass(v162)) {
            int v163 = 43;
          }
          else {
            int v163 = 45;
          }
          uint64_t v164 = object_getClassName(v20);
          int v165 = sel_getName("decodeCRSPlatformConfiguration:");
          int v166 = *v148;
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v163;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = v164;
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = v165;
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 661;
          *(_WORD *)&v194[26] = 1024;
          *(_DWORD *)&v194[28] = v166;
          uint64_t v144 = "%c[%{public}s %{public}s]:%i Unknown version: %d";
          uint64_t v145 = v138;
          uint32_t v146 = 40;
          goto LABEL_167;
        }
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v133 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v133)
        {
          BOOL v134 = object_getClass(v20);
          if (class_isMetaClass(v134)) {
            uint64_t v135 = 43;
          }
          else {
            uint64_t v135 = 45;
          }
          uint64_t v136 = object_getClassName(v20);
          uint64_t v137 = sel_getName("decodeCRSPlatformConfiguration:");
          v133(3, "%c[%{public}s %{public}s]:%i Invalid length: %zd", v135, v136, v137, 655, [v170 length]);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v138 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
        {
          id v139 = object_getClass(v20);
          if (class_isMetaClass(v139)) {
            int v140 = 43;
          }
          else {
            int v140 = 45;
          }
          uint64_t v141 = object_getClassName(v20);
          BOOL v142 = sel_getName("decodeCRSPlatformConfiguration:");
          id v143 = [v170 length];
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v140;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = v141;
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = v142;
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 655;
          *(_WORD *)&v194[26] = 2048;
          *(void *)&v194[28] = v143;
          uint64_t v144 = "%c[%{public}s %{public}s]:%i Invalid length: %zd";
          uint64_t v145 = v138;
          uint32_t v146 = 44;
LABEL_167:
          _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_ERROR, v144, buf, v146);
        }
      }
      int v153 = 0;
LABEL_169:

      if (v153)
      {
        [v19 setObject:v153 forKey:@"PlatformConfiguration"];
      }
      else
      {
LABEL_171:
        [v19 setObject:@"<ERROR>" forKey:@"PlatformConfiguration"];
      }
      *a3 = v19;

      uint64_t v18 = 0;
LABEL_173:

      goto LABEL_174;
    case 4:
      *(void *)int buf = 0;
      *(void *)SEL v194 = buf;
      *(void *)&v194[8] = 0x3032000000;
      *(void *)&v194[16] = sub_10000B828;
      *(void *)&v194[24] = sub_1000AA6E0;
      *(void *)&v194[32] = objc_opt_new();
      id v182 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283798 length:10];
      v192[0] = v182;
      id v178 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837A2 length:10];
      v192[1] = v178;
      sela = (char *)[objc_alloc((Class)NSData) initWithBytes:&unk_1002837AC length:10];
      v192[2] = sela;
      id v23 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837B6 length:10];
      v192[3] = v23;
      id v24 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837C0 length:10];
      v192[4] = v24;
      id v25 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837CA length:10];
      v192[5] = v25;
      id v26 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837D4 length:10];
      v192[6] = v26;
      id v27 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837DE length:10];
      v192[7] = v27;
      id v28 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837E8 length:10];
      v192[8] = v28;
      id v29 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837F2 length:10];
      v192[9] = v29;
      id v30 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837FC length:10];
      v192[10] = v30;
      id v31 = +[NSArray arrayWithObjects:v192 count:11];

      v187[0] = _NSConcreteStackBlock;
      v187[1] = 3221225472;
      v187[2] = sub_1000AA6E8;
      v187[3] = &unk_1003037A8;
      v187[4] = a1;
      v187[5] = buf;
      v187[6] = "dumpDomain:info:";
      [v31 enumerateObjectsUsingBlock:v187];
      if ([*(id *)(*(void *)v194 + 40) count])
      {
        uint64_t v18 = 0;
        if (a3) {
          *a3 = *(id *)(*(void *)v194 + 40);
        }
      }
      else
      {
        id v64 = objc_alloc((Class)NSError);
        __int16 v65 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v190 = NSLocalizedDescriptionKey;
        id v66 = +[NSString stringWithUTF8String:"Unknown Error"];
        id v191 = v66;
        id v67 = +[NSDictionary dictionaryWithObjects:&v191 forKeys:&v190 count:1];
        uint64_t v18 = (NSString *)[v64 initWithDomain:v65 code:6 userInfo:v67];
      }
      _Block_object_dispose(buf, 8);

      goto LABEL_174;
    case 5:
      id v183 = (id)objc_opt_new();
      id v32 = [objc_alloc((Class)NSData) initWithBytes:"FACTORYTESTAPP" length:14];
      v195[0] = 0;
      long long v33 = a1;
      long long v34 = [a1 selectByName:v32 error:v195];
      uint64_t v18 = (NSString *)v195[0];

      if (!v34)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v56)
        {
          id v57 = object_getClass(v33);
          if (class_isMetaClass(v57)) {
            uint64_t v58 = 43;
          }
          else {
            uint64_t v58 = 45;
          }
          BOOL v59 = object_getClassName(v33);
          int v60 = sel_getName("dumpFTAppletLogging:");
          v56(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v58, v59, v60, 1121, v18);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v61 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          int v62 = object_getClass(v33);
          if (class_isMetaClass(v62)) {
            int v63 = 43;
          }
          else {
            int v63 = 45;
          }
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v63;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = object_getClassName(v33);
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = sel_getName("dumpFTAppletLogging:");
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 1121;
          *(_WORD *)&v194[26] = 2114;
          *(void *)&v194[28] = v18;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
        }

        if (v18)
        {
          id v45 = 0;
          goto LABEL_153;
        }
        id v85 = objc_alloc((Class)NSError);
        uint64_t v18 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v197 = NSLocalizedDescriptionKey;
        long long v34 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)int buf = v34;
        BOOL v86 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v197 count:1];
        __int16 v46 = (NSString *)[v85 initWithDomain:v18 code:16 userInfo:v86];

        goto LABEL_151;
      }
      if ([v34 status] != 36864)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v68 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v68)
        {
          uint64_t v69 = object_getClass(v33);
          if (class_isMetaClass(v69)) {
            uint64_t v70 = 43;
          }
          else {
            uint64_t v70 = 45;
          }
          __int16 v71 = object_getClassName(v33);
          uint64_t v72 = sel_getName("dumpFTAppletLogging:");
          v68(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v70, v71, v72, 1125, [v34 status]);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v73 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          int v74 = object_getClass(v33);
          if (class_isMetaClass(v74)) {
            int v75 = 43;
          }
          else {
            int v75 = 45;
          }
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v75;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = object_getClassName(v33);
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = sel_getName("dumpFTAppletLogging:");
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 1125;
          *(_WORD *)&v194[26] = 1024;
          *(_DWORD *)&v194[28] = [v34 status];
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
        }

        BOOL v76 = [v34 status] == 26277;
        id v77 = objc_alloc((Class)NSError);
        uint64_t v78 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v197 = NSLocalizedDescriptionKey;
        if (v76)
        {
          uint64_t v79 = +[NSString stringWithUTF8String:"Restricted Mode"];
          *(void *)int buf = v79;
          id v80 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v197 count:1];
          __int16 v46 = (NSString *)[v77 initWithDomain:v78 code:24 userInfo:v80];
        }
        else
        {
          uint64_t v79 = +[NSString stringWithUTF8String:"Commmand Error"];
          *(void *)int buf = v79;
          id v80 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v197 count:1];
          __int16 v46 = (NSString *)[v77 initWithDomain:v78 code:16 userInfo:v80];
        }

LABEL_151:
        id v45 = 0;
        goto LABEL_152;
      }
      NSErrorUserInfoKey v197 = v18;
      uint64_t v35 = [v33 sendCommandWithClass:128 instruction:253 p1:1 p2:0 data:0 expectedLength:0 toOS:0 error:&v197];
      NSErrorUserInfoKey v36 = v197;

      if (!v35)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v87 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v87)
        {
          NSErrorUserInfoKey v88 = object_getClass(v33);
          if (class_isMetaClass(v88)) {
            uint64_t v89 = 43;
          }
          else {
            uint64_t v89 = 45;
          }
          id v90 = object_getClassName(v33);
          id v91 = sel_getName("dumpFTAppletLogging:");
          v87(3, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", v89, v90, v91, 1135, v36);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v92 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          uint64_t v93 = object_getClass(v33);
          if (class_isMetaClass(v93)) {
            int v94 = 43;
          }
          else {
            int v94 = 45;
          }
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v94;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = object_getClassName(v33);
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = sel_getName("dumpFTAppletLogging:");
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 1135;
          *(_WORD *)&v194[26] = 2114;
          *(void *)&v194[28] = v36;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", buf, 0x2Cu);
        }

        if (v36)
        {
          id v45 = 0;
          uint64_t v18 = v36;
          goto LABEL_153;
        }
        id v154 = objc_alloc((Class)NSError);
        uint64_t v18 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v196 = NSLocalizedDescriptionKey;
        long long v34 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)int buf = v34;
        id v155 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v196 count:1];
        __int16 v46 = (NSString *)[v154 initWithDomain:v18 code:16 userInfo:v155];

        goto LABEL_151;
      }
      if ([v35 status] == 27013)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        CFStringRef v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v37)
        {
          int v38 = object_getClass(v33);
          if (class_isMetaClass(v38)) {
            uint64_t v39 = 43;
          }
          else {
            uint64_t v39 = 45;
          }
          __int16 v40 = object_getClassName(v33);
          uint64_t v41 = sel_getName("dumpFTAppletLogging:");
          v37(6, "%c[%{public}s %{public}s]:%i No logging data", v39, v40, v41, 1139);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v42 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          int v43 = object_getClass(v33);
          if (class_isMetaClass(v43)) {
            int v44 = 43;
          }
          else {
            int v44 = 45;
          }
          *(_DWORD *)int buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v44;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = object_getClassName(v33);
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = sel_getName("dumpFTAppletLogging:");
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 1139;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No logging data", buf, 0x22u);
        }

        id v45 = (id)objc_opt_new();
        __int16 v46 = 0;
      }
      else
      {
        if ([v35 status] == 36864)
        {
          id v45 = [v35 response];
          uint64_t v18 = v36;
          long long v34 = v35;
          __int16 v46 = v18;
          goto LABEL_152;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        __int16 v102 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v102)
        {
          long long v103 = object_getClass(v33);
          if (class_isMetaClass(v103)) {
            uint64_t v104 = 43;
          }
          else {
            uint64_t v104 = 45;
          }
          BOOL v105 = object_getClassName(v33);
          __int16 v106 = sel_getName("dumpFTAppletLogging:");
          v102(3, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", v104, v105, v106, 1144, [v35 status]);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v107 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          __int16 v108 = object_getClass(v33);
          if (class_isMetaClass(v108)) {
            int v109 = 43;
          }
          else {
            int v109 = 45;
          }
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v109;
          *(_WORD *)SEL v194 = 2082;
          *(void *)&v194[2] = object_getClassName(v33);
          *(_WORD *)&v194[10] = 2082;
          *(void *)&v194[12] = sel_getName("dumpFTAppletLogging:");
          *(_WORD *)&v194[20] = 1024;
          *(_DWORD *)&v194[22] = 1144;
          *(_WORD *)&v194[26] = 1024;
          *(_DWORD *)&v194[28] = [v35 status];
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", buf, 0x28u);
        }

        id v110 = objc_alloc((Class)NSError);
        unint64_t v111 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v196 = NSLocalizedDescriptionKey;
        int v112 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)int buf = v112;
        NSErrorUserInfoKey v113 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v196 count:1];
        __int16 v46 = (NSString *)[v110 initWithDomain:v111 code:16 userInfo:v113];

        id v45 = 0;
      }
      long long v34 = v35;
      uint64_t v18 = v36;
LABEL_152:

      uint64_t v18 = v46;
LABEL_153:
      id v156 = v45;
      if (!v18)
      {
        [v183 setValue:v156 forKey:@"FTA Logging"];
        if (a3) {
          *a3 = v183;
        }
      }

LABEL_174:
      return v18;
    default:
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v6 = NFLogGetLogger();
      if (v6)
      {
        uint64_t v7 = (void (*)(uint64_t, const char *, ...))v6;
        id v8 = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(v8);
        uint64_t v168 = object_getClassName(a1);
        id v169 = sel_getName("dumpDomain:info:");
        uint64_t v10 = 45;
        if (isMetaClass) {
          uint64_t v10 = 43;
        }
        v7(3, "%c[%{public}s %{public}s]:%i Unknown app id: %d", v10, v168, v169, 149, a2);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = object_getClass(a1);
        if (class_isMetaClass(v12)) {
          int v13 = 43;
        }
        else {
          int v13 = 45;
        }
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v13;
        *(_WORD *)SEL v194 = 2082;
        *(void *)&v194[2] = object_getClassName(a1);
        *(_WORD *)&v194[10] = 2082;
        *(void *)&v194[12] = sel_getName("dumpDomain:info:");
        *(_WORD *)&v194[20] = 1024;
        *(_DWORD *)&v194[22] = 149;
        *(_WORD *)&v194[26] = 1024;
        *(_DWORD *)&v194[28] = a2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown app id: %d", buf, 0x28u);
      }

      id v14 = objc_alloc((Class)NSError);
      int v15 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v188 = NSLocalizedDescriptionKey;
      int v16 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      uint64_t v189 = v16;
      char v17 = +[NSDictionary dictionaryWithObjects:&v189 forKeys:&v188 count:1];
      uint64_t v18 = (NSString *)[v14 initWithDomain:v15 code:10 userInfo:v17];

      goto LABEL_174;
  }
}

void sub_1000A8488(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

id sub_1000A84BC(void *a1, int a2, void *a3)
{
  uint64_t v6 = objc_opt_new();
  if (a2 == 1)
  {
    id v7 = objc_alloc((Class)NSData);
    id v8 = &unk_10028380E;
    uint64_t v9 = 12;
  }
  else
  {
    if (a2)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v52 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("dumpRootSecurityDomain:info:");
        uint64_t v56 = 45;
        if (isMetaClass) {
          uint64_t v56 = 43;
        }
        v52(3, "%c[%{public}s %{public}s]:%i Invalid domain parameter", v56, ClassName, Name, 168);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v57 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
      {
        uint64_t v58 = object_getClass(a1);
        if (class_isMetaClass(v58)) {
          int v59 = 43;
        }
        else {
          int v59 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v59;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = object_getClassName(a1);
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = sel_getName("dumpRootSecurityDomain:info:");
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = 168;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid domain parameter", buf, 0x22u);
      }

      id v60 = objc_alloc((Class)NSError);
      id v10 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v330 = NSLocalizedDescriptionKey;
      uint64_t v61 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      v331 = v61;
      id v11 = +[NSDictionary dictionaryWithObjects:&v331 forKeys:&v330 count:1];
      id v62 = [v60 initWithDomain:v10 code:10 userInfo:v11];
      goto LABEL_51;
    }
    id v7 = objc_alloc((Class)NSData);
    id v8 = &unk_100283806;
    uint64_t v9 = 8;
  }
  id v10 = [v7 initWithBytes:v8 length:v9];
  id v317 = 0;
  id v11 = [a1 selectByName:v10 error:&v317];
  id v314 = v317;
  if (!v11)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v63 = NFLogGetLogger();
    uint64_t v61 = v314;
    if (v63)
    {
      id v64 = (void (*)(uint64_t, const char *, ...))v63;
      __int16 v65 = object_getClass(a1);
      BOOL v66 = class_isMetaClass(v65);
      v288 = object_getClassName(a1);
      __int16 v291 = sel_getName("dumpRootSecurityDomain:info:");
      uint64_t v67 = 45;
      if (v66) {
        uint64_t v67 = 43;
      }
      v64(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v67, v288, v291, 176, v314);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v68 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      uint64_t v69 = object_getClass(a1);
      if (class_isMetaClass(v69)) {
        int v70 = 43;
      }
      else {
        int v70 = 45;
      }
      __int16 v71 = object_getClassName(a1);
      uint64_t v72 = sel_getName("dumpRootSecurityDomain:info:");
      *(_DWORD *)int buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v70;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v71;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v72;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 176;
      *(_WORD *)&buf[34] = 2114;
      *(void *)&buf[36] = v314;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
    }

    if (!v314)
    {
      id v108 = objc_alloc((Class)NSError);
      int v109 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v328 = NSLocalizedDescriptionKey;
      id v110 = +[NSString stringWithUTF8String:"Commmand Error"];
      v329 = v110;
      unint64_t v111 = +[NSDictionary dictionaryWithObjects:&v329 forKeys:&v328 count:1];
      id v73 = [v108 initWithDomain:v109 code:16 userInfo:v111];

      id v11 = 0;
      goto LABEL_142;
    }
    id v62 = v314;
    uint64_t v61 = v62;
    id v11 = 0;
LABEL_51:
    id v73 = v62;
    goto LABEL_142;
  }
  if ([v11 status] == 36864)
  {
    int v308 = a3;
    v312 = v6;
    id v313 = v10;
    id v12 = [v11 response];
    int v13 = objc_opt_new();
    id v14 = +[NFTLV TLVWithData:v12];

    __int16 v309 = v13;
    if ([v14 tag] == 111)
    {
      int v15 = objc_opt_new();
      [v13 setObject:v15 forKey:@"File Control Info"];
      int v16 = [v14 childWithTag:132];
      char v17 = v16;
      if (v16)
      {
        uint64_t v18 = [v16 value];
        [v15 setObject:v18 forKey:@"Dedicated File Name"];
      }
      long long v306 = v15;
      uint64_t v19 = [v14 childWithTag:165];

      if (v19)
      {
        id v20 = objc_opt_new();
        [v306 setObject:v20 forKey:@"File Control Info (Proprietary)"];
        unsigned int v21 = [v19 childWithTag:40805];

        if (v21)
        {
          int v22 = [v21 value];
          [v20 setObject:v22 forKey:@"Command Max Data Length"];
        }
        char v17 = [v19 childWithTag:40814];

        if (v17)
        {
          id v23 = [v17 value];
          [v20 setObject:v23 forKey:@"App Production Lifecycle"];
        }
        v301 = v20;
        id v24 = [v19 childWithTag:115];
        if (v24)
        {
          NSErrorUserInfoKey v299 = v19;
          id v25 = objc_opt_new();
          [v306 setObject:v25 forKey:@"Security Domain Management"];
          id v26 = [v24 childWithTag:6];

          if (v26)
          {
            id v27 = [v26 value];
            id v28 = [v26 value];
            id v29 = [v27 subdataWithRange:6, [v28 length] - 6];

            [v25 setObject:v29 forKey:@"Tag Allocation Authority"];
          }
          id v30 = [v24 childWithTag:96];
          id v31 = [v30 childWithTag:6];

          if (v31)
          {
            id v32 = [v31 value];
            long long v33 = [v31 value];
            long long v34 = [v32 subdataWithRange:6, (char *)[v33 length] - 6];

            [v25 setObject:v34 forKey:@"Card Management Type and Version"];
          }
          uint64_t v35 = [v24 childWithTag:99];
          NSErrorUserInfoKey v36 = [v35 childWithTag:6];

          if (v36)
          {
            CFStringRef v37 = [v36 value];
            int v38 = [v36 value];
            uint64_t v39 = [v37 subdataWithRange:6, [v38 length] - 6];

            [v25 setObject:v39 forKey:@"Card Identification Scheme"];
          }
          __int16 v40 = [v24 childWithTag:100];
          uint64_t v41 = [v40 childWithTag:6];

          if (v41)
          {
            __int16 v42 = [v41 value];
            int v43 = [v41 value];
            int v44 = [v42 subdataWithRange:6, [v43 length] - 6];

            [v25 setObject:v44 forKey:@"Secure Channel Protocol"];
          }
          id v45 = [v24 childWithTag:101];
          __int16 v46 = [v45 childWithTag:6];

          if (v46)
          {
            uint64_t v47 = [v46 value];
            [v25 setObject:v47 forKey:@"Card Configuration"];
          }
          uint64_t v48 = [v24 childWithTag:102];
          char v17 = [v48 childWithTag:6];

          if (v17)
          {
            int v49 = [v17 value];
            [v25 setObject:v49 forKey:@"Card/Chip Details"];
          }
          uint64_t v19 = v299;
        }
        id v50 = v309;
      }
      else
      {
        id v304 = v12;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v112 = NFLogGetLogger();
        if (v112)
        {
          NSErrorUserInfoKey v113 = (void (*)(uint64_t, const char *, ...))v112;
          id v114 = object_getClass(a1);
          BOOL v115 = class_isMetaClass(v114);
          uint64_t v116 = object_getClassName(a1);
          v292 = sel_getName("decodeRootSecurityDomainResponse:");
          uint64_t v117 = 45;
          if (v115) {
            uint64_t v117 = 43;
          }
          v113(3, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", v117, v116, v292, 435, 165);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          int v118 = object_getClass(a1);
          if (class_isMetaClass(v118)) {
            int v119 = 43;
          }
          else {
            int v119 = 45;
          }
          int v120 = object_getClassName(a1);
          CFStringRef v121 = sel_getName("decodeRootSecurityDomainResponse:");
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v119;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v120;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v121;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = 435;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 165;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Missing tag: 0x%x", buf, 0x28u);
        }
        id v50 = 0;
        id v12 = v304;
      }
    }
    else
    {
      id v303 = v12;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v96 = NFLogGetLogger();
      if (v96)
      {
        uint64_t v97 = (void (*)(uint64_t, const char *, ...))v96;
        long long v98 = object_getClass(a1);
        BOOL v99 = class_isMetaClass(v98);
        long long v100 = object_getClassName(a1);
        int v101 = sel_getName("decodeRootSecurityDomainResponse:");
        id v295 = [v14 tag];
        uint64_t v102 = 45;
        if (v99) {
          uint64_t v102 = 43;
        }
        v97(3, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", v102, v100, v101, 423, v295);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      char v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        long long v103 = object_getClass(a1);
        if (class_isMetaClass(v103)) {
          int v104 = 43;
        }
        else {
          int v104 = 45;
        }
        BOOL v105 = object_getClassName(a1);
        __int16 v106 = sel_getName("decodeRootSecurityDomainResponse:");
        unsigned int v107 = [v14 tag];
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v104;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = v105;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v106;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = 423;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v107;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", buf, 0x28u);
      }
      id v50 = 0;
      uint64_t v19 = v14;
      id v12 = v303;
    }

    uint64_t v6 = v312;
    if (!v50)
    {
      [v312 setObject:@"<ERROR>" forKey:@"<SELECT>"];
      id v124 = objc_alloc((Class)NSError);
      __int16 v125 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v322 = NSLocalizedDescriptionKey;
      id v126 = +[NSString stringWithUTF8String:"Unknown Error"];
      v323 = v126;
      uint64_t v127 = +[NSDictionary dictionaryWithObjects:&v323 forKeys:&v322 count:1];
      id v73 = [v124 initWithDomain:v125 code:6 userInfo:v127];

      id v10 = v313;
      uint64_t v61 = v314;
LABEL_141:

      goto LABEL_142;
    }
    [v312 setObject:v50 forKey:@"<SELECT>"];
    uint64_t v122 = sub_1000A2608(a1);
    id v10 = v313;
    if (v122)
    {
      __int16 v123 = +[NSNumber numberWithUnsignedShort:v122];
      [v312 setObject:v123 forKey:@"COUNTER"];
    }
    else
    {
      [v312 setObject:@"<ERROR>" forKey:@"COUNTER"];
    }
    CFStringRef v128 = [a1 getData:40831];
    __int16 v129 = v128;
    if (v128)
    {
      id v130 = v128;
      if ([v130 length] == (id)42)
      {
        __int16 v131 = (__CFString *)objc_opt_new();
        id v132 = objc_alloc((Class)NSString);
        id v133 = [v130 subdataWithRange:0, 2];
        [v133 NF_asHexString];
        BOOL v134 = v310 = v129;
        id v135 = [v132 initWithFormat:@"IC Fabricator: %@", v134];
        [(__CFString *)v131 addObject:v135];

        id v136 = objc_alloc((Class)NSString);
        uint64_t v137 = [v130 subdataWithRange:2, 2];
        int v138 = [v137 NF_asHexString];
        id v139 = [v136 initWithFormat:@"IC Type: %@", v138];
        [(__CFString *)v131 addObject:v139];

        id v140 = objc_alloc((Class)NSString);
        uint64_t v141 = [v130 subdataWithRange:4, 2];
        BOOL v142 = [v141 NF_asHexString];
        id v143 = [v140 initWithFormat:@"OS Provider: %@", v142];
        [(__CFString *)v131 addObject:v143];

        id v144 = objc_alloc((Class)NSString);
        uint64_t v145 = [v130 subdataWithRange:6, 2];
        uint32_t v146 = [v145 NF_asHexString];
        id v147 = [v144 initWithFormat:@"OS Release Date: %@", v146];
        [(__CFString *)v131 addObject:v147];

        id v148 = objc_alloc((Class)NSString);
        uint64_t v149 = [v130 subdataWithRange:8, 2];
        unsigned int v150 = [v149 NF_asHexString];
        id v151 = [v148 initWithFormat:@"OS Release Level: %@", v150];
        [(__CFString *)v131 addObject:v151];

        id v152 = objc_alloc((Class)NSString);
        int v153 = [v130 subdataWithRange:10, 2];
        id v154 = [v153 NF_asHexString];
        id v155 = [v152 initWithFormat:@"IC Fabrication Date: %@", v154];
        [(__CFString *)v131 addObject:v155];

        id v156 = objc_alloc((Class)NSString);
        uint64_t v157 = [v130 subdataWithRange:12, 4];
        id v158 = [v157 NF_asHexString];
        id v159 = [v156 initWithFormat:@"IC Serial Number: %@", v158];
        [(__CFString *)v131 addObject:v159];

        id v160 = objc_alloc((Class)NSString);
        id v161 = [v130 subdataWithRange:NSMakeRange(16, 2)];
        BOOL v162 = [v161 NF_asHexString];
        id v163 = [v160 initWithFormat:@"IC Batch Identifier: %@", v162];
        [(__CFString *)v131 addObject:v163];

        id v164 = objc_alloc((Class)NSString);
        int v165 = [v130 subdataWithRange:NSMakeRange(18, 2)];
        int v166 = [v165 NF_asHexString];
        id v167 = [v164 initWithFormat:@"IC Module Fabricator: %@", v166];
        [(__CFString *)v131 addObject:v167];

        id v168 = objc_alloc((Class)NSString);
        id v169 = [v130 subdataWithRange:NSMakeRange(20, 2)];
        id v170 = [v169 NF_asHexString];
        id v171 = [v168 initWithFormat:@"IC Module Packaging Date: %@", v170];
        [(__CFString *)v131 addObject:v171];

        id v172 = objc_alloc((Class)NSString);
        id v173 = [v130 subdataWithRange:22, 2];
        BOOL v174 = [v173 NF_asHexString];
        id v175 = [v172 initWithFormat:@"IC Manufacturer: %@", v174];
        [(__CFString *)v131 addObject:v175];

        id v176 = objc_alloc((Class)NSString);
        BOOL v177 = [v130 subdataWithRange:24, 2];
        id v178 = [v177 NF_asHexString];
        id v179 = [v176 initWithFormat:@"IC Embedding Date: %@", v178];
        [(__CFString *)v131 addObject:v179];

        id v180 = objc_alloc((Class)NSString);
        id v181 = [v130 subdataWithRange:26, 2];
        id v182 = [v181 NF_asHexString];
        id v183 = [v180 initWithFormat:@"Prepersonalizer Identifier: %@", v182];
        [(__CFString *)v131 addObject:v183];

        id v184 = objc_alloc((Class)NSString);
        int v185 = [v130 subdataWithRange:NSMakeRange(28, 2)];
        id v186 = [v185 NF_asHexString];
        id v187 = [v184 initWithFormat:@"Prepersonalization Date: %@", v186];
        [(__CFString *)v131 addObject:v187];

        id v188 = objc_alloc((Class)NSString);
        uint64_t v189 = [v130 subdataWithRange:30, 4];
        NSErrorUserInfoKey v190 = [v189 NF_asHexString];
        id v191 = [v188 initWithFormat:@"Prepersonalization Equipment: %@", v190];
        [(__CFString *)v131 addObject:v191];

        id v192 = objc_alloc((Class)NSString);
        SEL v193 = [v130 subdataWithRange:NSMakeRange(34, 2)];
        SEL v194 = [v193 NF_asHexString];
        id v195 = [v192 initWithFormat:@"Personalizer Identifier: %@", v194];
        [(__CFString *)v131 addObject:v195];

        id v196 = objc_alloc((Class)NSString);
        NSErrorUserInfoKey v197 = [v130 subdataWithRange:36, 2];
        char v198 = [v197 NF_asHexString];
        id v199 = [v196 initWithFormat:@"Personalization Date: %@", v198];
        [(__CFString *)v131 addObject:v199];

        id v200 = objc_alloc((Class)NSString);
        char v201 = [v130 subdataWithRange:38, 4];
        char v202 = [v201 NF_asHexString];
        id v203 = [v200 initWithFormat:@"Personalization Equipment: %@", v202];
        [(__CFString *)v131 addObject:v203];

        __int16 v129 = v310;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v204 = NFLogGetLogger();
        if (v204)
        {
          NSErrorUserInfoKey v205 = (void (*)(uint64_t, const char *, ...))v204;
          id v206 = object_getClass(a1);
          BOOL v207 = class_isMetaClass(v206);
          __int16 v208 = object_getClassName(a1);
          v209 = v129;
          id v210 = v50;
          unsigned int v211 = sel_getName("decodeCPLCResponse:");
          id v296 = [v130 length];
          __int16 v293 = v211;
          id v50 = v210;
          __int16 v129 = v209;
          uint64_t v212 = 45;
          if (v207) {
            uint64_t v212 = 43;
          }
          v205(3, "%c[%{public}s %{public}s]:%i Invalid length: %d", v212, v208, v293, 565, v296);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        char v201 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
        {
          id v213 = object_getClass(a1);
          if (class_isMetaClass(v213)) {
            int v214 = 43;
          }
          else {
            int v214 = 45;
          }
          BOOL v215 = object_getClassName(a1);
          NSErrorUserInfoKey v216 = v129;
          CFStringRef v217 = sel_getName("decodeCPLCResponse:");
          unsigned int v218 = [v130 length];
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v214;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v215;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v217;
          __int16 v129 = v216;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = 565;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v218;
          _os_log_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid length: %d", buf, 0x28u);
          __int16 v131 = 0;
        }
        else
        {
          __int16 v131 = 0;
        }
      }

      if (v131) {
        CFStringRef v219 = v131;
      }
      else {
        CFStringRef v219 = @"<ERROR>";
      }
      uint64_t v6 = v312;
      [v312 setObject:v219 forKey:@"CPLC"];

      id v10 = v313;
    }
    else
    {
      [v312 setObject:@"<ERROR>" forKey:@"CPLC"];
    }
    if (a2 == 1)
    {
      NSErrorUserInfoKey v220 = sub_1000A27EC(a1);
      if (v220)
      {
        v315[0] = _NSConcreteStackBlock;
        v315[1] = 3221225472;
        v315[2] = sub_1000AB4B4;
        v315[3] = &unk_100303A10;
        v315[4] = a1;
        id v316 = v6;
        [v220 enumerateKeysAndObjectsUsingBlock:v315];
      }
      else
      {
        [v6 setObject:@"<ERROR>" forKey:@"CERTIFICATE-RSA"];
        [v6 setObject:@"<ERROR>" forKey:@"CERTIFICATE-ECC"];
      }
      __int16 v221 = [a1 getData:254 subtag:57120];

      if (v221)
      {
        id v222 = [objc_alloc((Class)NSString) initWithData:v221 encoding:1];
        id v223 = v222;
        if (v222) {
          id v224 = v222;
        }
        else {
          id v224 = v221;
        }
        [v6 setObject:v224 forKey:@"PLATFORM"];
      }
      else
      {
        [v6 setObject:@"<ERROR>" forKey:@"PLATFORM"];
      }
    }
    else
    {
      __int16 v221 = v129;
    }
    id v225 = [a1 getData:254 subtag:57121];

    if (v225) {
      CFStringRef v226 = v225;
    }
    else {
      CFStringRef v226 = @"<ERROR>";
    }
    [v6 setObject:v226 forKey:@"SERIAL"];
    if (a2 == 1)
    {
      unsigned int v321 = 0;
      memset(buf, 0, sizeof(buf));
      if (sub_1000A3344(a1, (uint64_t)buf))
      {
        v318[0] = @"Persistent";
        __int16 v311 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)buf];
        v319[0] = v311;
        v318[1] = @"Clear on Reset";
        v307 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[4]];
        v319[1] = v307;
        v318[2] = @"Clear on Deselect";
        long long v305 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[8]];
        v319[2] = v305;
        v318[3] = @"Available Indicies";
        unsigned __int8 v302 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[12]];
        v319[3] = v302;
        v318[4] = @"Total Number of Indicies";
        NSErrorUserInfoKey v300 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[16]];
        v319[4] = v300;
        v318[5] = @"Available persistent memory excluding pre-allocated indices [System]";
        v298 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[20]];
        v319[5] = v298;
        v318[6] = @"Available transient memory [eUICC]";
        v297 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[24]];
        v319[6] = v297;
        v318[7] = @"Reserved clear-on-deselect memory [System]";
        id v227 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[28]];
        v319[7] = v227;
        v318[8] = @"Maximum mapped clear-on-deselect memory [System]";
        id v228 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[32]];
        v319[8] = v228;
        v318[9] = @"OS update transient memory reserved [eSE]";
        id v229 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[36]];
        v319[9] = v229;
        v318[10] = @"OS update persistent memory reserved [eSE]";
        id v230 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[40]];
        v319[10] = v230;
        v318[11] = @"Transient common pool [System]";
        +[NSNumber numberWithUnsignedInt:*(unsigned int *)&buf[44]];
        id v232 = v231 = v50;
        v319[11] = v232;
        v318[12] = @"Persistent common pool [System]";
        NSErrorUserInfoKey v233 = +[NSNumber numberWithUnsignedInt:v321];
        v319[12] = v233;
        char v234 = +[NSDictionary dictionaryWithObjects:v319 forKeys:v318 count:13];
        [v312 setObject:v234 forKey:@"MEMORY"];

        uint64_t v6 = v312;
        id v50 = v231;

        id v10 = v313;
      }
      else
      {
        [v6 setObject:@"<ERROR>" forKey:@"MEMORY"];
      }
      uint64_t v61 = v314;
      id v253 = v308;

      goto LABEL_140;
    }
    uint64_t v235 = [a1 getData:254 subtag:57137];

    if (!v235)
    {
      [v6 setObject:@"<ERROR>" forKey:@"UPDATE"];
LABEL_139:
      uint64_t v61 = v314;
      id v253 = v308;
LABEL_140:
      id v73 = 0;
      void *v253 = v6;
      goto LABEL_141;
    }
    id v236 = v235;
    uint64_t v237 = objc_opt_new();
    id v238 = objc_alloc((Class)NSString);
    int v239 = [v236 subdataWithRange:0, 2];
    NSErrorUserInfoKey v240 = [v239 NF_asHexString];
    id v241 = [v238 initWithFormat:@"Sequence Number: %@", v240];
    [v237 addObject:v241];

    if ([v236 length] == (id)6)
    {
      id v242 = objc_alloc((Class)NSString);
      NSErrorUserInfoKey v243 = [v236 subdataWithRange:2, 2];
      NSErrorUserInfoKey v244 = [v243 NF_asHexString];
      id v245 = [v242 initWithFormat:@"Firmware Version: %@", v244];
      [v237 addObject:v245];

      id v246 = objc_alloc((Class)NSString);
      NSErrorUserInfoKey v247 = [v236 subdataWithRange:4, 1];
      NSErrorUserInfoKey v248 = [v247 NF_asHexString];
      id v249 = [v246 initWithFormat:@"Hardware Version: %@", v248];
      [v237 addObject:v249];

      id v250 = objc_alloc((Class)NSString);
      NSErrorUserInfoKey v251 = v236;
      uint64_t v252 = 5;
    }
    else
    {
      if ([v236 length] != (id)8)
      {
        if ([v236 length] != (id)16) {
          goto LABEL_138;
        }
        id v271 = objc_alloc((Class)NSString);
        NSErrorUserInfoKey v272 = [v236 subdataWithRange:2, 2];
        id v273 = [v272 NF_asHexString];
        id v274 = [v271 initWithFormat:@"SVC ROM Version: %@", v273];
        [v237 addObject:v274];

        id v275 = objc_alloc((Class)NSString);
        NSErrorUserInfoKey v276 = [v236 subdataWithRange:6, 1];
        v277 = [v276 NF_asHexString];
        id v278 = [v275 initWithFormat:@"Hardware Version: %@", v277];
        [v237 addObject:v278];

        id v279 = objc_alloc((Class)NSString);
        NSErrorUserInfoKey v280 = [v236 subdataWithRange:7, 1];
        v281 = [v280 NF_asHexString];
        id v282 = [v279 initWithFormat:@"Device Type: %@", v281];
        [v237 addObject:v282];

        id v283 = objc_alloc((Class)NSString);
        NSErrorUserInfoKey v284 = [v236 subdataWithRange:8, 3];
        v285 = [v284 NF_asHexString];
        id v286 = [v283 initWithFormat:@"SVC FLASH Version: %@", v285];
        [v237 addObject:v286];

        id v287 = objc_alloc((Class)NSString);
        id v266 = [v236 subdataWithRange:11, 3];
        id v267 = [v266 NF_asHexString];
        id v268 = [v287 initWithFormat:@"CL Version: %@", v267];
LABEL_137:
        NSErrorUserInfoKey v269 = v268;
        [v237 addObject:v268];

LABEL_138:
        [v6 setObject:v237 forKey:@"UPDATE"];

        id v10 = v313;
        goto LABEL_139;
      }
      id v254 = objc_alloc((Class)NSString);
      id v255 = [v236 subdataWithRange:2, 2];
      NSErrorUserInfoKey v256 = [v255 NF_asHexString];
      id v257 = [v254 initWithFormat:@"Firmware Version: %@", v256];
      [v237 addObject:v257];

      id v258 = objc_alloc((Class)NSString);
      __int16 v259 = [v236 subdataWithRange:4, 2];
      NSErrorUserInfoKey v260 = [v259 NF_asHexString];
      id v261 = [v258 initWithFormat:@"JCOP Version: %@", v260];
      [v237 addObject:v261];

      id v262 = objc_alloc((Class)NSString);
      __int16 v263 = [v236 subdataWithRange:6, 1];
      int v264 = [v263 NF_asHexString];
      id v265 = [v262 initWithFormat:@"Hardware Version: %@", v264];
      [v237 addObject:v265];

      id v250 = objc_alloc((Class)NSString);
      NSErrorUserInfoKey v251 = v236;
      uint64_t v252 = 7;
    }
    id v266 = [v251 subdataWithRange:v252];
    id v267 = [v266 NF_asHexString];
    id v268 = [v250 initWithFormat:@"Device Type: %@", v267];
    goto LABEL_137;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v74 = NFLogGetLogger();
  if (v74)
  {
    int v75 = (void (*)(uint64_t, const char *, ...))v74;
    BOOL v76 = object_getClass(a1);
    BOOL v77 = class_isMetaClass(v76);
    id v78 = v10;
    uint64_t v79 = object_getClassName(a1);
    id v80 = sel_getName("dumpRootSecurityDomain:info:");
    uint64_t v294 = [v11 status];
    __int16 v289 = v79;
    uint64_t v81 = 45;
    if (v77) {
      uint64_t v81 = 43;
    }
    id v10 = v78;
    v75(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v81, v289, v80, 180, v294);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v82 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
  {
    uint64_t v83 = object_getClass(a1);
    if (class_isMetaClass(v83)) {
      int v84 = 43;
    }
    else {
      int v84 = 45;
    }
    id v85 = object_getClassName(a1);
    BOOL v86 = sel_getName("dumpRootSecurityDomain:info:");
    unsigned int v87 = [v11 status];
    *(_DWORD *)int buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v84;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v85;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v86;
    *(_WORD *)&unsigned char buf[28] = 1024;
    *(_DWORD *)&buf[30] = 180;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = v87;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
  }

  unsigned int v88 = [v11 status];
  id v89 = objc_alloc((Class)NSError);
  id v90 = +[NSString stringWithUTF8String:"nfcd"];
  uint64_t v61 = v314;
  if (v88 == 26277)
  {
    NSErrorUserInfoKey v326 = NSLocalizedDescriptionKey;
    id v91 = +[NSString stringWithUTF8String:"Restricted Mode"];
    v327 = v91;
    uint64_t v92 = +[NSDictionary dictionaryWithObjects:&v327 forKeys:&v326 count:1];
    uint64_t v93 = v89;
    int v94 = v90;
    uint64_t v95 = 24;
  }
  else
  {
    NSErrorUserInfoKey v324 = NSLocalizedDescriptionKey;
    id v91 = +[NSString stringWithUTF8String:"Commmand Error"];
    v325 = v91;
    uint64_t v92 = +[NSDictionary dictionaryWithObjects:&v325 forKeys:&v324 count:1];
    uint64_t v93 = v89;
    int v94 = v90;
    uint64_t v95 = 16;
  }
  id v73 = [v93 initWithDomain:v94 code:v95 userInfo:v92];

LABEL_142:

  return v73;
}

void sub_1000AA6E0(uint64_t a1)
{
}

void sub_1000AA6E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  id v5 = v3;
  if (v4)
  {
    uint64_t v6 = objc_opt_new();
    id v124 = 0;
    id v7 = [v4 selectByName:v5 error:&v124];
    id v8 = v124;
    if (v7)
    {
      if ([v7 status] == 36864)
      {
        CFStringRef v121 = v6;
        __int16 v123 = v8;
        uint64_t v9 = [v4 sendRepeatingExtendedCommandWithClass:128 instruction:1 p1:0 firstP2:0 nextP2:0 expectedLength:0 toOS:0 error:&v123];
        id v10 = v123;

        if (v9)
        {
          if ([v9 status] == 36864)
          {
            id v11 = [v9 response];
            id v12 = [v11 length];

            if (!v12) {
              goto LABEL_55;
            }
            int v13 = [v9 response];
            [v121 setValue:v13 forKey:@"FixedBuffer"];
          }
          else
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t Logger = NFLogGetLogger();
            if (Logger)
            {
              id v60 = (void (*)(uint64_t, const char *, ...))Logger;
              Class Class = object_getClass(v4);
              BOOL isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName(v4);
              Name = sel_getName("dumpAppletLogging:info:");
              uint64_t v118 = [v9 status];
              uint64_t v65 = 45;
              if (isMetaClass) {
                uint64_t v65 = 43;
              }
              v60(3, "%c[%{public}s %{public}s]:%i Failed to query fixed buffer : 0x%04x", v65, ClassName, Name, 1077, v118);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            BOOL v66 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              uint64_t v67 = object_getClass(v4);
              if (class_isMetaClass(v67)) {
                int v68 = 43;
              }
              else {
                int v68 = 45;
              }
              uint64_t v69 = object_getClassName(v4);
              int v70 = sel_getName("dumpAppletLogging:info:");
              unsigned int v71 = [v9 status];
              *(_DWORD *)int buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v68;
              *(_WORD *)uint64_t v127 = 2082;
              *(void *)&v127[2] = v69;
              *(_WORD *)&v127[10] = 2082;
              *(void *)&v127[12] = v70;
              *(_WORD *)&v127[20] = 1024;
              *(_DWORD *)&v127[22] = 1077;
              *(_WORD *)&v127[26] = 1024;
              *(_DWORD *)&v127[28] = v71;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query fixed buffer : 0x%04x", buf, 0x28u);
            }

            if ([v9 status] != 27267) {
              goto LABEL_55;
            }
            int v13 = v10;
            id v10 = 0;
          }
        }
        else
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v50 = NFLogGetLogger();
          if (v50)
          {
            id v51 = (void (*)(uint64_t, const char *, ...))v50;
            id v52 = object_getClass(v4);
            BOOL v53 = class_isMetaClass(v52);
            int v109 = object_getClassName(v4);
            id v114 = sel_getName("dumpAppletLogging:info:");
            uint64_t v54 = 45;
            if (v53) {
              uint64_t v54 = 43;
            }
            v51(3, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", v54, v109, v114, 1075, v10);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          int v13 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            unsigned int v55 = object_getClass(v4);
            if (class_isMetaClass(v55)) {
              int v56 = 43;
            }
            else {
              int v56 = 45;
            }
            id v57 = object_getClassName(v4);
            uint64_t v58 = sel_getName("dumpAppletLogging:info:");
            *(_DWORD *)int buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v56;
            *(_WORD *)uint64_t v127 = 2082;
            *(void *)&v127[2] = v57;
            *(_WORD *)&v127[10] = 2082;
            *(void *)&v127[12] = v58;
            *(_WORD *)&v127[20] = 1024;
            *(_DWORD *)&v127[22] = 1075;
            *(_WORD *)&v127[26] = 2114;
            *(void *)&v127[28] = v10;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", buf, 0x2Cu);
          }
        }

LABEL_55:
        uint64_t v122 = v10;
        uint64_t v72 = [v4 sendRepeatingExtendedCommandWithClass:128 instruction:3 p1:0 firstP2:0 nextP2:0 expectedLength:0 toOS:0 error:&v122];
        id v8 = v122;

        id v73 = [v72 response];
        id v7 = v73;
        if (!v73 || v8)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v75 = NFLogGetLogger();
          if (v75)
          {
            BOOL v76 = (void (*)(uint64_t, const char *, ...))v75;
            BOOL v77 = object_getClass(v4);
            BOOL v78 = class_isMetaClass(v77);
            id v110 = object_getClassName(v4);
            BOOL v115 = sel_getName("dumpAppletLogging:info:");
            uint64_t v79 = 45;
            if (v78) {
              uint64_t v79 = 43;
            }
            v76(3, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", v79, v110, v115, 1097, v8);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v80 = NFSharedLogGetLogger();
          uint64_t v6 = v121;
          if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
          {
            uint64_t v81 = object_getClass(v4);
            if (class_isMetaClass(v81)) {
              int v82 = 43;
            }
            else {
              int v82 = 45;
            }
            uint64_t v83 = object_getClassName(v4);
            int v84 = sel_getName("dumpAppletLogging:info:");
            *(_DWORD *)int buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v82;
            *(_WORD *)uint64_t v127 = 2082;
            *(void *)&v127[2] = v83;
            *(_WORD *)&v127[10] = 2082;
            *(void *)&v127[12] = v84;
            *(_WORD *)&v127[20] = 1024;
            *(_DWORD *)&v127[22] = 1097;
            *(_WORD *)&v127[26] = 2114;
            *(void *)&v127[28] = v8;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", buf, 0x2Cu);
          }

          id v85 = objc_alloc((Class)NSError);
          BOOL v86 = +[NSString stringWithUTF8String:"nfcd"];
          if (v8)
          {
            int v119 = v85;
            int v120 = v72;
            id v87 = [v8 code];
            v125[0] = NSLocalizedDescriptionKey;
            unsigned int v88 = v86;
            if ((uint64_t)[v8 code] > 70) {
              uint64_t v89 = 71;
            }
            else {
              uint64_t v89 = (uint64_t)[v8 code];
            }
            uint64_t v92 = +[NSString stringWithUTF8String:off_1003037C8[v89]];
            *(void *)int buf = v92;
            *(void *)uint64_t v127 = v8;
            v125[1] = NSUnderlyingErrorKey;
            v125[2] = @"Line";
            *(void *)&v127[8] = &off_10031B010;
            v125[3] = @"Method";
            id v93 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("dumpAppletLogging:info:")];
            *(void *)&v127[16] = v93;
            v125[4] = NSDebugDescriptionErrorKey;
            id v94 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("dumpAppletLogging:info:"), 1098];
            *(void *)&v127[24] = v94;
            uint64_t v95 = +[NSDictionary dictionaryWithObjects:buf forKeys:v125 count:5];
            uint64_t v48 = [v119 initWithDomain:v88 code:v87 userInfo:v95];

            id v4 = 0;
            id v7 = v120;
            uint64_t v6 = v121;
            goto LABEL_76;
          }
          v125[0] = NSLocalizedDescriptionKey;
          id v90 = +[NSString stringWithUTF8String:"Commmand Error"];
          *(void *)int buf = v90;
          id v91 = +[NSDictionary dictionaryWithObjects:buf forKeys:v125 count:1];
          uint64_t v48 = [v85 initWithDomain:v86 code:16 userInfo:v91];

          id v4 = 0;
        }
        else
        {
          uint64_t v6 = v121;
          if ([v73 length])
          {
            uint64_t v74 = [v72 response];
            [v121 setValue:v74 forKey:@"CyclicBuffer"];
          }
          id v4 = [objc_alloc((Class)NSDictionary) initWithDictionary:v121];
          uint64_t v48 = 0;
        }
        id v8 = v72;
LABEL_76:

        id v8 = v48;
        goto LABEL_77;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v24 = NFLogGetLogger();
      if (v24)
      {
        id v25 = (void (*)(uint64_t, const char *, ...))v24;
        id v26 = object_getClass(v4);
        BOOL v27 = class_isMetaClass(v26);
        id v28 = object_getClassName(v4);
        uint64_t v29 = a1;
        id v30 = v5;
        id v31 = v6;
        id v32 = sel_getName("dumpAppletLogging:info:");
        uint64_t v117 = [v7 status];
        NSErrorUserInfoKey v113 = v32;
        uint64_t v6 = v31;
        id v5 = v30;
        a1 = v29;
        uint64_t v33 = 45;
        if (v27) {
          uint64_t v33 = 43;
        }
        v25(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v33, v28, v113, 1057, v117);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      long long v34 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = object_getClass(v4);
        if (class_isMetaClass(v35)) {
          int v36 = 43;
        }
        else {
          int v36 = 45;
        }
        CFStringRef v37 = object_getClassName(v4);
        int v38 = sel_getName("dumpAppletLogging:info:");
        unsigned int v39 = [v7 status];
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)uint64_t v127 = 2082;
        *(void *)&v127[2] = v37;
        *(_WORD *)&v127[10] = 2082;
        *(void *)&v127[12] = v38;
        *(_WORD *)&v127[20] = 1024;
        *(_DWORD *)&v127[22] = 1057;
        *(_WORD *)&v127[26] = 1024;
        *(_DWORD *)&v127[28] = v39;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      unsigned int v40 = [v7 status];
      id v41 = objc_alloc((Class)NSError);
      __int16 v42 = +[NSString stringWithUTF8String:"nfcd"];
      v125[0] = NSLocalizedDescriptionKey;
      if (v40 == 26277)
      {
        int v43 = +[NSString stringWithUTF8String:"Restricted Mode"];
        *(void *)int buf = v43;
        int v44 = +[NSDictionary dictionaryWithObjects:buf forKeys:v125 count:1];
        id v45 = v41;
        __int16 v46 = v42;
        uint64_t v47 = 24;
      }
      else
      {
        int v43 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)int buf = v43;
        int v44 = +[NSDictionary dictionaryWithObjects:buf forKeys:v125 count:1];
        id v45 = v41;
        __int16 v46 = v42;
        uint64_t v47 = 16;
      }
      uint64_t v48 = [v45 initWithDomain:v46 code:v47 userInfo:v44];
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v14 = NFLogGetLogger();
      if (v14)
      {
        int v15 = (void (*)(uint64_t, const char *, ...))v14;
        int v16 = object_getClass(v4);
        BOOL v17 = class_isMetaClass(v16);
        id v108 = object_getClassName(v4);
        uint64_t v112 = sel_getName("dumpAppletLogging:info:");
        uint64_t v18 = 45;
        if (v17) {
          uint64_t v18 = 43;
        }
        v15(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v18, v108, v112, 1053, v8);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = object_getClass(v4);
        if (class_isMetaClass(v20)) {
          int v21 = 43;
        }
        else {
          int v21 = 45;
        }
        int v22 = object_getClassName(v4);
        id v23 = sel_getName("dumpAppletLogging:info:");
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)uint64_t v127 = 2082;
        *(void *)&v127[2] = v22;
        *(_WORD *)&v127[10] = 2082;
        *(void *)&v127[12] = v23;
        *(_WORD *)&v127[20] = 1024;
        *(_DWORD *)&v127[22] = 1053;
        *(_WORD *)&v127[26] = 2114;
        *(void *)&v127[28] = v8;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
      }

      if (v8)
      {
        id v4 = 0;
LABEL_77:

        goto LABEL_78;
      }
      id v49 = objc_alloc((Class)NSError);
      id v8 = +[NSString stringWithUTF8String:"nfcd"];
      v125[0] = NSLocalizedDescriptionKey;
      id v7 = +[NSString stringWithUTF8String:"Commmand Error"];
      *(void *)int buf = v7;
      __int16 v42 = +[NSDictionary dictionaryWithObjects:buf forKeys:v125 count:1];
      uint64_t v48 = [v49 initWithDomain:v8 code:16 userInfo:v42];
    }

    id v4 = 0;
    goto LABEL_76;
  }
  id v8 = 0;
LABEL_78:

  id v96 = v4;
  if (v8)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v97 = NFLogGetLogger();
    if (v97)
    {
      long long v98 = (void (*)(uint64_t, const char *, ...))v97;
      BOOL v99 = object_getClass(*(id *)(a1 + 32));
      BOOL v100 = class_isMetaClass(v99);
      unint64_t v111 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v116 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v101 = 45;
      if (v100) {
        uint64_t v101 = 43;
      }
      v98(3, "%c[%{public}s %{public}s]:%i Failed to get data : %{public}@", v101, v111, v116, 116, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v102 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
    {
      long long v103 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v103)) {
        int v104 = 43;
      }
      else {
        int v104 = 45;
      }
      BOOL v105 = object_getClassName(*(id *)(a1 + 32));
      __int16 v106 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)int buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v104;
      *(_WORD *)uint64_t v127 = 2082;
      *(void *)&v127[2] = v105;
      *(_WORD *)&v127[10] = 2082;
      *(void *)&v127[12] = v106;
      *(_WORD *)&v127[20] = 1024;
      *(_DWORD *)&v127[22] = 116;
      *(_WORD *)&v127[26] = 2114;
      *(void *)&v127[28] = v8;
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get data : %{public}@", buf, 0x2Cu);
    }
  }
  else
  {
    unsigned int v107 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v102 = [v5 NF_asHexString];
    [v107 setValue:v96 forKey:v102];
  }
}

void sub_1000AB4B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v25 = a2;
  id v5 = a3;
  uint64_t v24 = v5;
  if (v4)
  {
    id v6 = v5;
    BOOL v27 = (__CFString *)objc_opt_new();
    id v7 = +[NFTLV TLVsWithData:v6];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (!v8) {
      goto LABEL_38;
    }
    id v9 = v8;
    uint64_t v10 = *(void *)v29;
    while (1)
    {
      id v11 = 0;
      do
      {
        if (*(void *)v29 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v11);
        int v13 = [v12 tag];
        if (v13 <= 24351)
        {
          if (v13 <= 82)
          {
            if (v13 == 66)
            {
              uint64_t v14 = [v12 value];
              int v15 = v27;
              int v16 = v14;
              CFStringRef v17 = @"CA Identifier";
              goto LABEL_33;
            }
            if (v13 == 69)
            {
              uint64_t v14 = [v12 value];
              int v15 = v27;
              int v16 = v14;
              CFStringRef v17 = @"CA Security Domain Image Number";
              goto LABEL_33;
            }
          }
          else
          {
            switch(v13)
            {
              case 83:
                uint64_t v14 = [v12 value];
                int v15 = v27;
                int v16 = v14;
                CFStringRef v17 = @"Discretionary Data";
                goto LABEL_33;
              case 147:
                uint64_t v14 = [v12 value];
                int v15 = v27;
                int v16 = v14;
                CFStringRef v17 = @"Certificate Serial Number";
                goto LABEL_33;
              case 149:
                uint64_t v14 = [v12 value];
                int v15 = v27;
                int v16 = v14;
                CFStringRef v17 = @"Key Usage";
                goto LABEL_33;
            }
          }
          goto LABEL_36;
        }
        if (v13 <= 24374)
        {
          switch(v13)
          {
            case 24352:
              uint64_t v14 = [v12 value];
              int v15 = v27;
              int v16 = v14;
              CFStringRef v17 = @"Subject Identifier";
              goto LABEL_33;
            case 24356:
              uint64_t v14 = [v12 value];
              int v15 = v27;
              int v16 = v14;
              CFStringRef v17 = @"Expiration Date";
              goto LABEL_33;
            case 24357:
              uint64_t v14 = [v12 value];
              int v15 = v27;
              int v16 = v14;
              CFStringRef v17 = @"Effective Date";
LABEL_33:
              [(__CFString *)v15 setObject:v16 forKey:v17];
              goto LABEL_34;
          }
LABEL_36:
          uint64_t v14 = [v12 value];
          id v20 = [objc_alloc((Class)NSString) initWithFormat:@"0x%02x", [v12 tag]];
          [(__CFString *)v27 setObject:v14 forKey:v20];

          goto LABEL_34;
        }
        if (v13 == 24375)
        {
          uint64_t v14 = [v12 value];
          int v15 = v27;
          int v16 = v14;
          CFStringRef v17 = @"Signature";
          goto LABEL_33;
        }
        if (v13 == 24376)
        {
          uint64_t v14 = [v12 value];
          int v15 = v27;
          int v16 = v14;
          CFStringRef v17 = @"Public Key Modulus Remainder";
          goto LABEL_33;
        }
        if (v13 != 32585) {
          goto LABEL_36;
        }
        uint64_t v18 = [v12 childWithTag:134];
        uint64_t v14 = v18;
        if (v18)
        {
          uint64_t v19 = [v18 value];
          [(__CFString *)v27 setObject:v19 forKey:@"Public Key"];
        }
LABEL_34:

        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v21 = [v7 countByEnumeratingWithState:&v28 objects:v32 count:16];
      id v9 = v21;
      if (!v21)
      {
LABEL_38:

        goto LABEL_39;
      }
    }
  }
  BOOL v27 = 0;
LABEL_39:

  id v22 = [objc_alloc((Class)NSString) initWithFormat:@"CERTIFICATE-%@", v25];
  if (v27) {
    CFStringRef v23 = v27;
  }
  else {
    CFStringRef v23 = @"<ERROR>";
  }
  [*(id *)(a1 + 40) setObject:v23 forKey:v22];
}

NSString *sub_1000AB908(void *a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_16;
  }
  if ((a2 - 1) < 3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v4 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("clearLogs:");
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v4(3, "%c[%{public}s %{public}s]:%i Unsupported domain", v8, ClassName, Name, 404);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = object_getClass(a1);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      __int16 v137 = 2082;
      int v138 = object_getClassName(a1);
      __int16 v139 = 2082;
      id v140 = sel_getName("clearLogs:");
      __int16 v141 = 1024;
      int v142 = 404;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unsupported domain", buf, 0x22u);
    }

    id v12 = objc_alloc((Class)NSError);
    int v13 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v132 = NSLocalizedDescriptionKey;
    uint64_t v14 = +[NSString stringWithUTF8String:"Invalid Parameter"];
    id v133 = v14;
    int v15 = &v133;
    int v16 = &v132;
LABEL_53:
    id v64 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v16 count:1];
    id v26 = (NSString *)[v12 initWithDomain:v13 code:10 userInfo:v64];

    goto LABEL_94;
  }
  if (a2 != 5)
  {
    if (a2 != 4)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v56 = NFLogGetLogger();
      if (v56)
      {
        id v57 = (void (*)(uint64_t, const char *, ...))v56;
        uint64_t v58 = object_getClass(a1);
        BOOL v59 = class_isMetaClass(v58);
        NSErrorUserInfoKey v113 = object_getClassName(a1);
        uint64_t v118 = sel_getName("clearLogs:");
        uint64_t v60 = 45;
        if (v59) {
          uint64_t v60 = 43;
        }
        v57(3, "%c[%{public}s %{public}s]:%i Unknown app id: %d", v60, v113, v118, 408, a2);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v61 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        id v62 = object_getClass(a1);
        if (class_isMetaClass(v62)) {
          int v63 = 43;
        }
        else {
          int v63 = 45;
        }
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v63;
        __int16 v137 = 2082;
        int v138 = object_getClassName(a1);
        __int16 v139 = 2082;
        id v140 = sel_getName("clearLogs:");
        __int16 v141 = 1024;
        int v142 = 408;
        __int16 v143 = 1024;
        LODWORD(v144) = a2;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown app id: %d", buf, 0x28u);
      }

      id v12 = objc_alloc((Class)NSError);
      int v13 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v130 = NSLocalizedDescriptionKey;
      uint64_t v14 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      __int16 v131 = v14;
      int v15 = &v131;
      int v16 = &v130;
      goto LABEL_53;
    }
    id v125 = objc_alloc((Class)NSArray);
    id v124 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283798 length:10];
    id v17 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837A2 length:10];
    id v18 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837AC length:10];
    id v19 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837B6 length:10];
    id v20 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837C0 length:10];
    id v21 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837CA length:10];
    id v123 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837D4 length:10];
    id v22 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837DE length:10];
    id v23 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837E8 length:10];
    id v24 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837F2 length:10];
    id v25 = [objc_alloc((Class)NSData) initWithBytes:&unk_1002837FC length:10];
    id v126 = [v125 initWithObjects:v124, v17, v18, v19, v20, v21, v123, v22, v23, v24, v25, 0];

    v128[0] = _NSConcreteStackBlock;
    v128[1] = 3221225472;
    v128[2] = sub_1000AC85C;
    v128[3] = &unk_100303A38;
    v128[4] = a1;
    [v126 enumerateObjectsUsingBlock:v128];

LABEL_16:
    id v26 = 0;
    goto LABEL_94;
  }
  id v27 = [objc_alloc((Class)NSData) initWithBytes:"FACTORYTESTAPP" length:14];
  id v129 = 0;
  long long v28 = [a1 selectByName:v27 error:&v129];
  long long v29 = (NSString *)v129;

  if (v28)
  {
    if ([v28 status] != 36864)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v76 = NFLogGetLogger();
      if (v76)
      {
        BOOL v77 = (void (*)(uint64_t, const char *, ...))v76;
        BOOL v78 = object_getClass(a1);
        BOOL v79 = class_isMetaClass(v78);
        id v80 = object_getClassName(a1);
        uint64_t v81 = sel_getName("clearFTALogging");
        uint64_t v122 = [v28 status];
        uint64_t v82 = 45;
        if (v79) {
          uint64_t v82 = 43;
        }
        v77(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v82, v80, v81, 1165, v122);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v83 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        int v84 = object_getClass(a1);
        if (class_isMetaClass(v84)) {
          int v85 = 43;
        }
        else {
          int v85 = 45;
        }
        BOOL v86 = object_getClassName(a1);
        id v87 = sel_getName("clearFTALogging");
        unsigned int v88 = [v28 status];
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v85;
        __int16 v137 = 2082;
        int v138 = v86;
        __int16 v139 = 2082;
        id v140 = v87;
        __int16 v141 = 1024;
        int v142 = 1165;
        __int16 v143 = 1024;
        LODWORD(v144) = v88;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      unsigned int v89 = [v28 status];
      id v90 = objc_alloc((Class)NSError);
      id v91 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v135 = NSLocalizedDescriptionKey;
      if (v89 == 26277)
      {
        uint64_t v92 = +[NSString stringWithUTF8String:"Restricted Mode"];
        *(void *)int buf = v92;
        id v93 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v135 count:1];
        id v94 = v90;
        uint64_t v95 = v91;
        uint64_t v96 = 24;
      }
      else
      {
        uint64_t v92 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)int buf = v92;
        id v93 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v135 count:1];
        id v94 = v90;
        uint64_t v95 = v91;
        uint64_t v96 = 16;
      }
      id v26 = (NSString *)[v94 initWithDomain:v95 code:v96 userInfo:v93];

      long long v30 = v28;
      long long v31 = v29;
      goto LABEL_93;
    }
    NSErrorUserInfoKey v135 = v29;
    long long v30 = [a1 sendCommandWithClass:128 instruction:253 p1:2 p2:0 data:0 expectedLength:0 toOS:0 error:&v135];
    long long v31 = v135;

    if (v30)
    {
      if ([v30 status] == 27013)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v32 = NFLogGetLogger();
        if (v32)
        {
          uint64_t v33 = (void (*)(uint64_t, const char *, ...))v32;
          long long v34 = object_getClass(a1);
          BOOL v35 = class_isMetaClass(v34);
          int v36 = object_getClassName(a1);
          uint64_t v117 = sel_getName("clearFTALogging");
          uint64_t v37 = 45;
          if (v35) {
            uint64_t v37 = 43;
          }
          v33(6, "%c[%{public}s %{public}s]:%i No logging data", v37, v36, v117, 1179);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v38 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v39 = object_getClass(a1);
          if (class_isMetaClass(v39)) {
            int v40 = 43;
          }
          else {
            int v40 = 45;
          }
          id v41 = object_getClassName(a1);
          __int16 v42 = sel_getName("clearFTALogging");
          *(_DWORD *)int buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v40;
          __int16 v137 = 2082;
          int v138 = v41;
          __int16 v139 = 2082;
          id v140 = v42;
          __int16 v141 = 1024;
          int v142 = 1179;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No logging data", buf, 0x22u);
        }
      }
      if ([v30 status] != 36864)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v43 = NFLogGetLogger();
        if (v43)
        {
          int v44 = (void (*)(uint64_t, const char *, ...))v43;
          id v45 = object_getClass(a1);
          BOOL v46 = class_isMetaClass(v45);
          uint64_t v47 = object_getClassName(a1);
          uint64_t v48 = sel_getName("clearFTALogging");
          uint64_t v121 = [v30 status];
          uint64_t v49 = 45;
          if (v46) {
            uint64_t v49 = 43;
          }
          v44(3, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", v49, v47, v48, 1182, v121);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v50 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          id v51 = object_getClass(a1);
          if (class_isMetaClass(v51)) {
            int v52 = 43;
          }
          else {
            int v52 = 45;
          }
          BOOL v53 = object_getClassName(a1);
          uint64_t v54 = sel_getName("clearFTALogging");
          unsigned int v55 = [v30 status];
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v52;
          __int16 v137 = 2082;
          int v138 = v53;
          __int16 v139 = 2082;
          id v140 = v54;
          __int16 v141 = 1024;
          int v142 = 1182;
          __int16 v143 = 1024;
          LODWORD(v144) = v55;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command: 0x%04x", buf, 0x28u);
        }
      }
      id v26 = 0;
      goto LABEL_93;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v101 = NFLogGetLogger();
    if (v101)
    {
      uint64_t v102 = (void (*)(uint64_t, const char *, ...))v101;
      long long v103 = object_getClass(a1);
      BOOL v104 = class_isMetaClass(v103);
      BOOL v115 = object_getClassName(a1);
      int v120 = sel_getName("clearFTALogging");
      uint64_t v105 = 45;
      if (v104) {
        uint64_t v105 = 43;
      }
      v102(3, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", v105, v115, v120, 1175, v31);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v106 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      unsigned int v107 = object_getClass(a1);
      if (class_isMetaClass(v107)) {
        int v108 = 43;
      }
      else {
        int v108 = 45;
      }
      int v109 = object_getClassName(a1);
      id v110 = sel_getName("clearFTALogging");
      *(_DWORD *)int buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v108;
      __int16 v137 = 2082;
      int v138 = v109;
      __int16 v139 = 2082;
      id v140 = v110;
      __int16 v141 = 1024;
      int v142 = 1175;
      __int16 v143 = 2114;
      id v144 = v31;
      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send command : %{public}@", buf, 0x2Cu);
    }

    if (v31)
    {
      uint64_t v75 = v31;
      goto LABEL_90;
    }
    id v97 = objc_alloc((Class)NSError);
    long long v98 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v134 = NSLocalizedDescriptionKey;
    BOOL v99 = +[NSString stringWithUTF8String:"Commmand Error"];
    *(void *)int buf = v99;
    BOOL v100 = &v134;
LABEL_92:
    unint64_t v111 = +[NSDictionary dictionaryWithObjects:buf forKeys:v100 count:1];
    id v26 = (NSString *)[v97 initWithDomain:v98 code:16 userInfo:v111];

    long long v30 = 0;
    long long v31 = 0;
    goto LABEL_93;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v65 = NFLogGetLogger();
  if (v65)
  {
    BOOL v66 = (void (*)(uint64_t, const char *, ...))v65;
    uint64_t v67 = object_getClass(a1);
    BOOL v68 = class_isMetaClass(v67);
    id v114 = object_getClassName(a1);
    int v119 = sel_getName("clearFTALogging");
    uint64_t v69 = 45;
    if (v68) {
      uint64_t v69 = 43;
    }
    v66(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v69, v114, v119, 1161, v29);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v70 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
  {
    unsigned int v71 = object_getClass(a1);
    if (class_isMetaClass(v71)) {
      int v72 = 43;
    }
    else {
      int v72 = 45;
    }
    id v73 = object_getClassName(a1);
    uint64_t v74 = sel_getName("clearFTALogging");
    *(_DWORD *)int buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v72;
    __int16 v137 = 2082;
    int v138 = v73;
    __int16 v139 = 2082;
    id v140 = v74;
    __int16 v141 = 1024;
    int v142 = 1161;
    __int16 v143 = 2114;
    id v144 = v29;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
  }

  if (!v29)
  {
    id v97 = objc_alloc((Class)NSError);
    long long v98 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v135 = NSLocalizedDescriptionKey;
    BOOL v99 = +[NSString stringWithUTF8String:"Commmand Error"];
    *(void *)int buf = v99;
    BOOL v100 = &v135;
    goto LABEL_92;
  }
  uint64_t v75 = v29;
LABEL_90:
  long long v31 = v75;
  long long v30 = 0;
  id v26 = v75;
LABEL_93:

LABEL_94:

  return v26;
}

void sub_1000AC85C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    uint64_t v74 = 0;
    goto LABEL_90;
  }
  id v112 = 0;
  id v3 = [v2 selectByName:a2 error:&v112];
  uint64_t v4 = (NSString *)v112;
  if (v3)
  {
    if ([v3 status] != 36864)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v54 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(v2);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v2);
        Name = sel_getName("clearFixedAndCyclicLogging:");
        uint64_t v110 = [v3 status];
        uint64_t v59 = 45;
        if (isMetaClass) {
          uint64_t v59 = 43;
        }
        v54(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v59, ClassName, Name, 1200, v110);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v60 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        uint64_t v61 = object_getClass(v2);
        if (class_isMetaClass(v61)) {
          int v62 = 43;
        }
        else {
          int v62 = 45;
        }
        int v63 = object_getClassName(v2);
        id v64 = sel_getName("clearFixedAndCyclicLogging:");
        unsigned int v65 = [v3 status];
        *(_DWORD *)int buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v62;
        __int16 v116 = 2082;
        uint64_t v117 = v63;
        __int16 v118 = 2082;
        int v119 = v64;
        __int16 v120 = 1024;
        int v121 = 1200;
        __int16 v122 = 1024;
        LODWORD(v123) = v65;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      unsigned int v66 = [v3 status];
      id v67 = objc_alloc((Class)NSError);
      BOOL v68 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v114 = NSLocalizedDescriptionKey;
      if (v66 == 26277)
      {
        uint64_t v69 = +[NSString stringWithUTF8String:"Restricted Mode"];
        *(void *)int buf = v69;
        int v70 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v114 count:1];
        unsigned int v71 = v67;
        int v72 = v68;
        uint64_t v73 = 24;
      }
      else
      {
        uint64_t v69 = +[NSString stringWithUTF8String:"Commmand Error"];
        *(void *)int buf = v69;
        int v70 = +[NSDictionary dictionaryWithObjects:buf forKeys:&v114 count:1];
        unsigned int v71 = v67;
        int v72 = v68;
        uint64_t v73 = 16;
      }
      uint64_t v74 = (NSString *)[v71 initWithDomain:v72 code:v73 userInfo:v70];

      goto LABEL_89;
    }
    NSErrorUserInfoKey v114 = v4;
    LOBYTE(v101) = 1;
    id v5 = [v2 sendCommandWithClass:128 instruction:1 p1:1 p2:0 data:0 expectedLength:0 toOS:0 useExtendedLength:v101 error:&v114];
    id v6 = v114;

    if (v5)
    {
      if ([v5 status] != 36864)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v7 = NFLogGetLogger();
        if (v7)
        {
          uint64_t v8 = (void (*)(uint64_t, const char *, ...))v7;
          id v9 = object_getClass(v2);
          BOOL v10 = class_isMetaClass(v9);
          int v11 = object_getClassName(v2);
          id v12 = sel_getName("clearFixedAndCyclicLogging:");
          uint64_t v109 = [v5 status];
          uint64_t v13 = 45;
          if (v10) {
            uint64_t v13 = 43;
          }
          v8(3, "%c[%{public}s %{public}s]:%i Failed to clear fixed buffer : 0x%04x", v13, v11, v12, 1222, v109);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v14 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v15 = object_getClass(v2);
          if (class_isMetaClass(v15)) {
            int v16 = 43;
          }
          else {
            int v16 = 45;
          }
          id v17 = object_getClassName(v2);
          id v18 = sel_getName("clearFixedAndCyclicLogging:");
          unsigned int v19 = [v5 status];
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v16;
          __int16 v116 = 2082;
          uint64_t v117 = v17;
          __int16 v118 = 2082;
          int v119 = v18;
          __int16 v120 = 1024;
          int v121 = 1222;
          __int16 v122 = 1024;
          LODWORD(v123) = v19;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear fixed buffer : 0x%04x", buf, 0x28u);
        }
      }
      NSErrorUserInfoKey v113 = v6;
      id v3 = [v2 sendCommandWithClass:128 instruction:4 p1:0 p2:0 data:0 expectedLength:0 toOS:0 error:&v113];
      uint64_t v4 = v113;

      if (!v3)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v20 = NFLogGetLogger();
        if (v20)
        {
          id v21 = (void (*)(uint64_t, const char *, ...))v20;
          id v22 = object_getClass(v2);
          BOOL v23 = class_isMetaClass(v22);
          uint64_t v102 = object_getClassName(v2);
          uint64_t v105 = sel_getName("clearFixedAndCyclicLogging:");
          uint64_t v24 = 45;
          if (v23) {
            uint64_t v24 = 43;
          }
          v21(3, "%c[%{public}s %{public}s]:%i Failed to clear : %{public}@", v24, v102, v105, 1237, v4);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v25 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          id v26 = object_getClass(v2);
          if (class_isMetaClass(v26)) {
            int v27 = 43;
          }
          else {
            int v27 = 45;
          }
          long long v28 = object_getClassName(v2);
          long long v29 = sel_getName("clearFixedAndCyclicLogging:");
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v27;
          __int16 v116 = 2082;
          uint64_t v117 = v28;
          __int16 v118 = 2082;
          int v119 = v29;
          __int16 v120 = 1024;
          int v121 = 1237;
          __int16 v122 = 2114;
          id v123 = v4;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear : %{public}@", buf, 0x2Cu);
        }
      }
      if ([v3 status] != 36864)
      {
        unsigned int v30 = [v3 status];
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v31 = NFLogGetLogger();
        uint64_t v32 = (void (*)(uint64_t, const char *, ...))v31;
        if (v30 == 27267)
        {
          if (v31)
          {
            uint64_t v33 = object_getClass(v2);
            BOOL v34 = class_isMetaClass(v33);
            BOOL v35 = object_getClassName(v2);
            __int16 v106 = sel_getName("clearFixedAndCyclicLogging:");
            uint64_t v36 = 45;
            if (v34) {
              uint64_t v36 = 43;
            }
            v32(6, "%c[%{public}s %{public}s]:%i No cyclic buffer", v36, v35, v106, 1241);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v37 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            int v38 = object_getClass(v2);
            if (class_isMetaClass(v38)) {
              int v39 = 43;
            }
            else {
              int v39 = 45;
            }
            int v40 = object_getClassName(v2);
            id v41 = sel_getName("clearFixedAndCyclicLogging:");
            *(_DWORD *)int buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v39;
            __int16 v116 = 2082;
            uint64_t v117 = v40;
            __int16 v118 = 2082;
            int v119 = v41;
            __int16 v120 = 1024;
            int v121 = 1241;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No cyclic buffer", buf, 0x22u);
          }

          uint64_t v4 = 0;
        }
        else
        {
          if (v31)
          {
            unsigned int v89 = object_getClass(v2);
            BOOL v90 = class_isMetaClass(v89);
            id v91 = object_getClassName(v2);
            uint64_t v92 = sel_getName("clearFixedAndCyclicLogging:");
            uint64_t v111 = [v3 status];
            uint64_t v93 = 45;
            if (v90) {
              uint64_t v93 = 43;
            }
            v32(3, "%c[%{public}s %{public}s]:%i Failed to clear cyclic buffer : 0x%04x", v93, v91, v92, 1244, v111);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v94 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            uint64_t v95 = object_getClass(v2);
            if (class_isMetaClass(v95)) {
              int v96 = 43;
            }
            else {
              int v96 = 45;
            }
            id v97 = object_getClassName(v2);
            long long v98 = sel_getName("clearFixedAndCyclicLogging:");
            unsigned int v99 = [v3 status];
            *(_DWORD *)int buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v96;
            __int16 v116 = 2082;
            uint64_t v117 = v97;
            __int16 v118 = 2082;
            int v119 = v98;
            __int16 v120 = 1024;
            int v121 = 1244;
            __int16 v122 = 1024;
            LODWORD(v123) = v99;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to clear cyclic buffer : 0x%04x", buf, 0x28u);
          }
        }
      }
      uint64_t v74 = 0;
      goto LABEL_89;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v79 = NFLogGetLogger();
    if (v79)
    {
      id v80 = (void (*)(uint64_t, const char *, ...))v79;
      uint64_t v81 = object_getClass(v2);
      BOOL v82 = class_isMetaClass(v81);
      BOOL v104 = object_getClassName(v2);
      int v108 = sel_getName("clearFixedAndCyclicLogging:");
      uint64_t v83 = 45;
      if (v82) {
        uint64_t v83 = 43;
      }
      v80(3, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", v83, v104, v108, 1218, v6);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v84 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      int v85 = object_getClass(v2);
      if (class_isMetaClass(v85)) {
        int v86 = 43;
      }
      else {
        int v86 = 45;
      }
      id v87 = object_getClassName(v2);
      unsigned int v88 = sel_getName("clearFixedAndCyclicLogging:");
      *(_DWORD *)int buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v86;
      __int16 v116 = 2082;
      uint64_t v117 = v87;
      __int16 v118 = 2082;
      int v119 = v88;
      __int16 v120 = 1024;
      int v121 = 1218;
      __int16 v122 = 2114;
      id v123 = v6;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query : %{public}@", buf, 0x2Cu);
    }

    if (v6)
    {
      int v52 = v6;
      goto LABEL_75;
    }
    id v75 = objc_alloc((Class)NSError);
    uint64_t v76 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v113 = NSLocalizedDescriptionKey;
    BOOL v77 = +[NSString stringWithUTF8String:"Commmand Error"];
    *(void *)int buf = v77;
    BOOL v78 = &v113;
LABEL_88:
    BOOL v100 = +[NSDictionary dictionaryWithObjects:buf forKeys:v78 count:1];
    uint64_t v74 = (NSString *)[v75 initWithDomain:v76 code:16 userInfo:v100];

    id v3 = 0;
    uint64_t v4 = 0;
    goto LABEL_89;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v42 = NFLogGetLogger();
  if (v42)
  {
    uint64_t v43 = (void (*)(uint64_t, const char *, ...))v42;
    int v44 = object_getClass(v2);
    BOOL v45 = class_isMetaClass(v44);
    long long v103 = object_getClassName(v2);
    unsigned int v107 = sel_getName("clearFixedAndCyclicLogging:");
    uint64_t v46 = 45;
    if (v45) {
      uint64_t v46 = 43;
    }
    v43(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v46, v103, v107, 1196, v4);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v47 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    uint64_t v48 = object_getClass(v2);
    if (class_isMetaClass(v48)) {
      int v49 = 43;
    }
    else {
      int v49 = 45;
    }
    uint64_t v50 = object_getClassName(v2);
    id v51 = sel_getName("clearFixedAndCyclicLogging:");
    *(_DWORD *)int buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v49;
    __int16 v116 = 2082;
    uint64_t v117 = v50;
    __int16 v118 = 2082;
    int v119 = v51;
    __int16 v120 = 1024;
    int v121 = 1196;
    __int16 v122 = 2114;
    id v123 = v4;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
  }

  if (!v4)
  {
    id v75 = objc_alloc((Class)NSError);
    uint64_t v76 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v114 = NSLocalizedDescriptionKey;
    BOOL v77 = +[NSString stringWithUTF8String:"Commmand Error"];
    *(void *)int buf = v77;
    BOOL v78 = &v114;
    goto LABEL_88;
  }
  int v52 = v4;
LABEL_75:
  uint64_t v4 = v52;
  id v3 = 0;
  uint64_t v74 = v52;
LABEL_89:

LABEL_90:
}

id sub_1000AD490(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = [a1 handle];
    uint64_t v4 = [v3 driver];
    id v5 = (void *)sub_10002C020(v4, (uint64_t)[v3 identifier], a2);

    if (v5)
    {
      id v6 = [objc_alloc((Class)NSData) initWithBytes:*v5 length:v5[1]];
      NFDataRelease();
      if (v6)
      {
LABEL_6:

        goto LABEL_7;
      }
      id v7 = objc_alloc((Class)NSError);
      uint64_t v8 = +[NSString stringWithUTF8String:"nfcd"];
      v14[0] = NSLocalizedDescriptionKey;
      id v9 = +[NSString stringWithUTF8String:"Unexpected Result"];
      v15[0] = v9;
      v15[1] = &off_10031AED8;
      v14[1] = @"Line";
      v14[2] = @"Method";
      id v10 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getOSUpdateLog:")];
      v15[2] = v10;
      v14[3] = NSDebugDescriptionErrorKey;
      id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getOSUpdateLog:"), 686];
      v15[3] = v11;
      id v12 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];
      *a2 = [v7 initWithDomain:v8 code:13 userInfo:v12];
    }
    id v6 = 0;
    goto LABEL_6;
  }
  id v6 = 0;
LABEL_7:

  return v6;
}

id sub_1000AD6C4(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = [a1 handle];
    uint64_t v4 = [v3 driver];
    id v5 = sub_10002C360(v4, (uint64_t)[v3 identifier], 0, a2);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_1000AD750(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = [a1 handle];
    uint64_t v4 = [v3 driver];
    id v5 = sub_10002C360(v4, (uint64_t)[v3 identifier], 1, a2);

    if (v5 && [v5 count]) {
      id v6 = v5;
    }
    else {
      id v6 = 0;
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

NSObject *sub_1000AD800(void *a1)
{
  if (!a1)
  {
    id v22 = 0;
    goto LABEL_61;
  }
  uint64_t v1 = a1;
  id v2 = [a1 handle];
  id v3 = [v2 info];
  if (![v3 seType])
  {

LABEL_50:
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v51 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v1);
      Name = sel_getName("resetACLogs");
      uint64_t v55 = 45;
      if (isMetaClass) {
        uint64_t v55 = 43;
      }
      v51(6, "%c[%{public}s %{public}s]:%i No reseting: slamAPDUs is nil", v55, ClassName, Name, 738);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v48 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v56 = object_getClass(v1);
      if (class_isMetaClass(v56)) {
        int v57 = 43;
      }
      else {
        int v57 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v112 = v57;
      __int16 v113 = 2082;
      NSErrorUserInfoKey v114 = object_getClassName(v1);
      __int16 v115 = 2082;
      __int16 v116 = sel_getName("resetACLogs");
      __int16 v117 = 1024;
      int v118 = 738;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No reseting: slamAPDUs is nil", buf, 0x22u);
    }
    int v49 = 0;
    goto LABEL_60;
  }
  uint64_t v4 = [v1 handle];
  id v5 = [v4 info];
  if ([v5 seType] == (id)4)
  {
    BOOL v6 = 0;
  }
  else
  {
    id v7 = [v1 handle];
    uint64_t v8 = [v7 info];
    if ([v8 seType] == (id)5)
    {
      BOOL v6 = 0;
    }
    else
    {
      id v9 = [v1 handle];
      id v10 = [v9 info];
      BOOL v6 = [v10 seType] != (id)7;
    }
  }

  if (!v6) {
    goto LABEL_50;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v11 = NFLogGetLogger();
  if (v11)
  {
    id v12 = (void (*)(uint64_t, const char *, ...))v11;
    uint64_t v13 = object_getClass(v1);
    BOOL v14 = class_isMetaClass(v13);
    int v15 = object_getClassName(v1);
    BOOL v100 = sel_getName("resetACLogs");
    uint64_t v16 = 45;
    if (v14) {
      uint64_t v16 = 43;
    }
    v12(6, "%c[%{public}s %{public}s]:%i Acknowledging logs..", v16, v15, v100, 742);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v17 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = object_getClass(v1);
    if (class_isMetaClass(v18)) {
      int v19 = 43;
    }
    else {
      int v19 = 45;
    }
    *(_DWORD *)int buf = 67109890;
    int v112 = v19;
    __int16 v113 = 2082;
    NSErrorUserInfoKey v114 = object_getClassName(v1);
    __int16 v115 = 2082;
    __int16 v116 = sel_getName("resetACLogs");
    __int16 v117 = 1024;
    int v118 = 742;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Acknowledging logs..", buf, 0x22u);
  }

  id v20 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283806 length:8];
  id v110 = 0;
  id v21 = [v1 selectByName:v20 error:&v110];
  id v22 = v110;

  if (v21)
  {
    if ([v21 status] == 36864)
    {
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      id v23 = [&off_100322790 countByEnumeratingWithState:&v106 objects:v123 count:16];
      if (v23)
      {
        id v24 = v23;
        id v25 = 0;
        uint64_t v26 = *(void *)v107;
        BOOL v104 = v1;
        do
        {
          int v27 = 0;
          long long v28 = v25;
          long long v29 = v21;
          unsigned int v30 = v22;
          do
          {
            if (*(void *)v107 != v26) {
              objc_enumerationMutation(&off_100322790);
            }
            id v25 = +[NSData NF_dataWithHexString:*(void *)(*((void *)&v106 + 1) + 8 * (void)v27)];

            uint64_t v105 = v30;
            id v21 = [v1 sendCommandWithClass:128 instruction:202 p1:0 p2:254 data:v25 expectedLength:0 toOS:0 error:&v105];
            id v22 = v105;

            if (!v21 || [v21 status] != 36864)
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v31 = NFLogGetLogger();
              if (v31)
              {
                uint64_t v32 = (void (*)(uint64_t, const char *, ...))v31;
                uint64_t v33 = v1;
                BOOL v34 = v22;
                BOOL v35 = object_getClass(v33);
                if (class_isMetaClass(v35)) {
                  uint64_t v36 = 43;
                }
                else {
                  uint64_t v36 = 45;
                }
                uint64_t v37 = object_getClassName(v33);
                int v38 = sel_getName("resetACLogs");
                if (v21) {
                  id v39 = [v21 status];
                }
                else {
                  id v39 = 0;
                }
                long long v98 = v37;
                id v22 = v34;
                v32(3, "%c[%{public}s %{public}s]:%i Failed to reset : %{public}@ (status = 0x%02X)", v36, v98, v38, 764, v34, v39);
                uint64_t v1 = v104;
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              int v40 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                id v41 = v1;
                uint64_t v42 = v22;
                uint64_t v43 = object_getClass(v41);
                if (class_isMetaClass(v43)) {
                  int v44 = 43;
                }
                else {
                  int v44 = 45;
                }
                BOOL v45 = object_getClassName(v41);
                uint64_t v46 = sel_getName("resetACLogs");
                if (v21) {
                  unsigned int v47 = [v21 status];
                }
                else {
                  unsigned int v47 = 0;
                }
                *(_DWORD *)int buf = 67110402;
                int v112 = v44;
                __int16 v113 = 2082;
                NSErrorUserInfoKey v114 = v45;
                __int16 v115 = 2082;
                __int16 v116 = v46;
                __int16 v117 = 1024;
                int v118 = 764;
                __int16 v119 = 2114;
                id v22 = v42;
                __int16 v120 = v42;
                __int16 v121 = 1024;
                unsigned int v122 = v47;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to reset : %{public}@ (status = 0x%02X)", buf, 0x32u);
                uint64_t v1 = v104;
              }
            }
            int v27 = (char *)v27 + 1;
            long long v28 = v25;
            long long v29 = v21;
            unsigned int v30 = v22;
          }
          while (v24 != v27);
          id v24 = [&off_100322790 countByEnumeratingWithState:&v106 objects:v123 count:16];
        }
        while (v24);
      }
      uint64_t v48 = v22;

      int v49 = v48;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v74 = NFLogGetLogger();
      id v75 = v22;
      if (v74)
      {
        uint64_t v76 = (void (*)(uint64_t, const char *, ...))v74;
        BOOL v77 = object_getClass(v1);
        BOOL v78 = class_isMetaClass(v77);
        uint64_t v79 = object_getClassName(v1);
        id v80 = sel_getName("resetACLogs");
        uint64_t v103 = [v21 status];
        uint64_t v81 = 45;
        if (v78) {
          uint64_t v81 = 43;
        }
        v76(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v81, v79, v80, 749, v103);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v82 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        uint64_t v83 = object_getClass(v1);
        if (class_isMetaClass(v83)) {
          int v84 = 43;
        }
        else {
          int v84 = 45;
        }
        int v85 = object_getClassName(v1);
        int v86 = sel_getName("resetACLogs");
        unsigned int v87 = [v21 status];
        *(_DWORD *)int buf = 67110146;
        int v112 = v84;
        __int16 v113 = 2082;
        NSErrorUserInfoKey v114 = v85;
        __int16 v115 = 2082;
        __int16 v116 = v86;
        __int16 v117 = 1024;
        int v118 = 749;
        __int16 v119 = 1024;
        LODWORD(v120) = v87;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      unsigned int v88 = [v21 status];
      id v89 = objc_alloc((Class)NSError);
      BOOL v90 = +[NSString stringWithUTF8String:"nfcd"];
      if (v88 == 26277)
      {
        v126[0] = NSLocalizedDescriptionKey;
        id v91 = +[NSString stringWithUTF8String:"Restricted Mode"];
        v127[0] = v91;
        v127[1] = &off_10031AF08;
        v126[1] = @"Line";
        v126[2] = @"Method";
        id v92 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("resetACLogs")];
        v127[2] = v92;
        v126[3] = NSDebugDescriptionErrorKey;
        id v93 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("resetACLogs"), 750];
        v127[3] = v93;
        id v94 = +[NSDictionary dictionaryWithObjects:v127 forKeys:v126 count:4];
        uint64_t v95 = v89;
        int v96 = v90;
        uint64_t v97 = 24;
      }
      else
      {
        v124[0] = NSLocalizedDescriptionKey;
        id v91 = +[NSString stringWithUTF8String:"Commmand Error"];
        v125[0] = v91;
        v125[1] = &off_10031AF08;
        v124[1] = @"Line";
        v124[2] = @"Method";
        id v92 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("resetACLogs")];
        v125[2] = v92;
        v124[3] = NSDebugDescriptionErrorKey;
        id v93 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("resetACLogs"), 750];
        v125[3] = v93;
        id v94 = +[NSDictionary dictionaryWithObjects:v125 forKeys:v124 count:4];
        uint64_t v95 = v89;
        int v96 = v90;
        uint64_t v97 = 16;
      }
      int v49 = [v95 initWithDomain:v96 code:v97 userInfo:v94];

      uint64_t v48 = v75;
    }
    goto LABEL_60;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v59 = NFLogGetLogger();
  if (v59)
  {
    uint64_t v60 = (void (*)(uint64_t, const char *, ...))v59;
    uint64_t v61 = object_getClass(v1);
    BOOL v62 = class_isMetaClass(v61);
    unsigned int v99 = object_getClassName(v1);
    uint64_t v102 = sel_getName("resetACLogs");
    uint64_t v63 = 45;
    if (v62) {
      uint64_t v63 = 43;
    }
    v60(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v63, v99, v102, 746, v22);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v64 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
    unsigned int v65 = object_getClass(v1);
    if (class_isMetaClass(v65)) {
      int v66 = 43;
    }
    else {
      int v66 = 45;
    }
    id v67 = object_getClassName(v1);
    BOOL v68 = sel_getName("resetACLogs");
    *(_DWORD *)int buf = 67110146;
    int v112 = v66;
    __int16 v113 = 2082;
    NSErrorUserInfoKey v114 = v67;
    __int16 v115 = 2082;
    __int16 v116 = v68;
    __int16 v117 = 1024;
    int v118 = 746;
    __int16 v119 = 2114;
    __int16 v120 = v22;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
  }

  if (!v22)
  {
    id v69 = objc_alloc((Class)NSError);
    uint64_t v48 = +[NSString stringWithUTF8String:"nfcd"];
    v128[0] = NSLocalizedDescriptionKey;
    int v70 = +[NSString stringWithUTF8String:"Commmand Error"];
    v129[0] = v70;
    v129[1] = &off_10031AEF0;
    v128[1] = @"Line";
    v128[2] = @"Method";
    id v71 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("resetACLogs")];
    v129[2] = v71;
    v128[3] = NSDebugDescriptionErrorKey;
    id v72 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("resetACLogs"), 747];
    v129[3] = v72;
    uint64_t v73 = +[NSDictionary dictionaryWithObjects:v129 forKeys:v128 count:4];
    int v49 = [v69 initWithDomain:v48 code:16 userInfo:v73];

LABEL_60:
    id v22 = v49;
  }
LABEL_61:

  return v22;
}

id sub_1000AE4D0(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 handle];
    id v2 = [v1 driver];
    [v1 identifier];
    char v3 = sub_10002C82C(v2);

    if (v3)
    {
      id v4 = 0;
    }
    else
    {
      id v5 = objc_alloc((Class)NSError);
      BOOL v6 = +[NSString stringWithUTF8String:"nfcd"];
      v12[0] = NSLocalizedDescriptionKey;
      id v7 = +[NSString stringWithUTF8String:"Stack Error"];
      v13[0] = v7;
      v13[1] = &off_10031AF20;
      v12[1] = @"Line";
      v12[2] = @"Method";
      id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getPresenceOfAttackLog:")];
      _DWORD v13[2] = v8;
      void v12[3] = NSDebugDescriptionErrorKey;
      id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getPresenceOfAttackLog:"), 780];
      void v13[3] = v9;
      id v10 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:4];
      id v4 = [v5 initWithDomain:v6 code:15 userInfo:v10];
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id sub_1000AE6E0(void *a1, _DWORD *a2, int a3)
{
  if (a1)
  {
    id v6 = (id)objc_opt_new();
    *a2 = 0;
    id v7 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283806 length:8];
    id v293 = 0;
    id v8 = [a1 selectByName:v7 error:&v293];
    id v9 = v293;

    if (v8)
    {
      if ([v8 status] == 36864)
      {
        int v280 = a3;
        v285 = v8;
        id v10 = +[NSData NF_dataWithHexString:@"DF2600FEB000"];
        while (1)
        {
          id v292 = v9;
          uint64_t v11 = [a1 sendCommandWithClass:128 instruction:202 p1:0 p2:254 data:v10 expectedLength:0 toOS:0 error:&v292];
          id v12 = v292;

          if (v12)
          {

            goto LABEL_38;
          }
          if (!v11) {
            break;
          }
          if ([v11 status] == 36864) {
            goto LABEL_58;
          }
          if ([v11 status] != 25360 && objc_msgSend(v11, "status") != 37008)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t Logger = NFLogGetLogger();
            if (Logger)
            {
              id v71 = (void (*)(uint64_t, const char *, ...))Logger;
              Class Class = object_getClass(a1);
              BOOL isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName(a1);
              Name = sel_getName("getAppletMigrationErrorCount:reset:");
              uint64_t v268 = [v11 status];
              uint64_t v75 = 45;
              if (isMetaClass) {
                uint64_t v75 = 43;
              }
              v71(3, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", v75, ClassName, Name, 832, v268);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v76 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
            {
              BOOL v77 = object_getClass(a1);
              if (class_isMetaClass(v77)) {
                int v78 = 43;
              }
              else {
                int v78 = 45;
              }
              uint64_t v79 = object_getClassName(a1);
              id v80 = sel_getName("getAppletMigrationErrorCount:reset:");
              unsigned int v81 = [v11 status];
              *(_DWORD *)int buf = 67110146;
              int v295 = v78;
              __int16 v296 = 2082;
              v297 = v79;
              __int16 v298 = 2082;
              NSErrorUserInfoKey v299 = v80;
              __int16 v300 = 1024;
              int v301 = 832;
              __int16 v302 = 1024;
              *(_DWORD *)id v303 = v81;
              _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", buf, 0x28u);
            }

LABEL_58:
            BOOL v82 = [v11 data];
            [v6 appendData:v82];

LABEL_60:
            uint64_t v83 = objc_opt_new();
            +[NFTLV TLVsWithData:v6];
            long long v288 = 0u;
            long long v289 = 0u;
            long long v290 = 0u;
            long long v291 = 0u;
            id v84 = (id)objc_claimAutoreleasedReturnValue();
            id v85 = [v84 countByEnumeratingWithState:&v288 objects:v320 count:16];
            if (v85)
            {
              id v86 = v85;
              unsigned int v87 = v83;
              uint64_t v88 = *(void *)v289;
              while (2)
              {
                for (unint64_t i = 0; i != v86; unint64_t i = (char *)i + 1)
                {
                  if (*(void *)v289 != v88) {
                    objc_enumerationMutation(v84);
                  }
                  BOOL v90 = *(void **)(*((void *)&v288 + 1) + 8 * i);
                  if ([v90 tag] == 254)
                  {
                    id v91 = [v90 childWithTag:57126];
                    id v92 = v91;
                    if (v91)
                    {
                      uint64_t v83 = [v91 value];
                    }
                    else
                    {
                      uint64_t v83 = v87;
                    }

                    goto LABEL_73;
                  }
                }
                id v86 = [v84 countByEnumeratingWithState:&v288 objects:v320 count:16];
                if (v86) {
                  continue;
                }
                break;
              }
              uint64_t v83 = v87;
            }
LABEL_73:

            NSErrorUserInfoKey v284 = v83;
            if ((unint64_t)[v83 length] <= 9)
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v93 = NFLogGetLogger();
              if (v93)
              {
                id v94 = (void (*)(uint64_t, const char *, ...))v93;
                uint64_t v95 = object_getClass(a1);
                BOOL v96 = class_isMetaClass(v95);
                uint64_t v97 = object_getClassName(a1);
                long long v98 = sel_getName("getAppletMigrationErrorCount:reset:");
                id v269 = [v83 length];
                uint64_t v99 = 45;
                if (v96) {
                  uint64_t v99 = 43;
                }
                v94(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, data length: %d. Minimun length should be: %d", v99, v97, v98, 860, v269, 10);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              BOOL v100 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
              {
                uint64_t v101 = object_getClass(a1);
                if (class_isMetaClass(v101)) {
                  int v102 = 43;
                }
                else {
                  int v102 = 45;
                }
                uint64_t v103 = object_getClassName(a1);
                BOOL v104 = sel_getName("getAppletMigrationErrorCount:reset:");
                unsigned int v105 = [v83 length];
                *(_DWORD *)int buf = 67110402;
                int v295 = v102;
                __int16 v296 = 2082;
                v297 = v103;
                __int16 v298 = 2082;
                NSErrorUserInfoKey v299 = v104;
                __int16 v300 = 1024;
                int v301 = 860;
                __int16 v302 = 1024;
                *(_DWORD *)id v303 = v105;
                *(_WORD *)&v303[4] = 1024;
                *(_DWORD *)&v303[6] = 10;
                _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, data length: %d. Minimun length should be: %d", buf, 0x2Eu);
              }

              id v106 = objc_alloc((Class)NSError);
              long long v107 = +[NSString stringWithUTF8String:"nfcd"];
              v318[0] = NSLocalizedDescriptionKey;
              long long v108 = +[NSString stringWithUTF8String:"Unexpected Result"];
              v319[0] = v108;
              v319[1] = &off_10031AF80;
              v318[1] = @"Line";
              v318[2] = @"Method";
              id v109 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
              v319[2] = v109;
              v318[3] = NSDebugDescriptionErrorKey;
              id v110 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 861];
              v319[3] = v110;
              uint64_t v111 = v319;
              int v112 = v318;
              goto LABEL_108;
            }
            id v113 = v83;
            uint64_t v114 = __rev16(*((unsigned __int16 *)[v113 bytes] + 4));
            if (v114 == 65200)
            {
              id v115 = objc_alloc((Class)NSData);
              id v116 = v113;
              id v117 = [v115 initWithBytes:((char *)[v116 bytes]) + 9 length:((char *)[v116 length]) - 9];
              int v118 = +[NFTLV TLVsWithData:v117];

              id v278 = v117;
              id v279 = v118;
              if (![v118 count])
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v153 = NFLogGetLogger();
                id v8 = v285;
                if (v153)
                {
                  id v154 = (void (*)(uint64_t, const char *, ...))v153;
                  id v155 = object_getClass(a1);
                  BOOL v156 = class_isMetaClass(v155);
                  uint64_t v157 = object_getClassName(a1);
                  id v262 = sel_getName("getAppletMigrationErrorCount:reset:");
                  uint64_t v158 = 45;
                  if (v156) {
                    uint64_t v158 = 43;
                  }
                  v154(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, could not find the second partialTag: 0xB0", v158, v157, v262, 882);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                id v159 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
                {
                  id v160 = object_getClass(a1);
                  if (class_isMetaClass(v160)) {
                    int v161 = 43;
                  }
                  else {
                    int v161 = 45;
                  }
                  BOOL v162 = object_getClassName(a1);
                  id v163 = sel_getName("getAppletMigrationErrorCount:reset:");
                  *(_DWORD *)int buf = 67109890;
                  int v295 = v161;
                  __int16 v296 = 2082;
                  v297 = v162;
                  __int16 v298 = 2082;
                  NSErrorUserInfoKey v299 = v163;
                  __int16 v300 = 1024;
                  int v301 = 882;
                  _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, could not find the second partialTag: 0xB0", buf, 0x22u);
                }

                id v164 = objc_alloc((Class)NSError);
                int v165 = +[NSString stringWithUTF8String:"nfcd"];
                v314[0] = NSLocalizedDescriptionKey;
                int v166 = +[NSString stringWithUTF8String:"Unexpected Result"];
                v315[0] = v166;
                v315[1] = &off_10031AFB0;
                v314[1] = @"Line";
                v314[2] = @"Method";
                id v167 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
                v315[2] = v167;
                v314[3] = NSDebugDescriptionErrorKey;
                id v168 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 883];
                v315[3] = v168;
                id v169 = +[NSDictionary dictionaryWithObjects:v315 forKeys:v314 count:4];
                id v170 = [v164 initWithDomain:v165 code:13 userInfo:v169];

                id v24 = v170;
                id v117 = v278;
                id v84 = v279;
                goto LABEL_132;
              }
              __int16 v119 = [v118 objectAtIndexedSubscript:0];
              v277 = v119;
              if ([v119 tag] == 176)
              {
                __int16 v120 = [v119 value];
                if ((unint64_t)[v120 length] < 6)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v121 = NFLogGetLogger();
                  if (v121)
                  {
                    unsigned int v122 = (void (*)(uint64_t, const char *, ...))v121;
                    id v123 = object_getClass(a1);
                    BOOL v124 = class_isMetaClass(v123);
                    id v125 = object_getClassName(a1);
                    id v126 = sel_getName("getAppletMigrationErrorCount:reset:");
                    id v270 = [v120 length];
                    uint64_t v127 = 45;
                    if (v124) {
                      uint64_t v127 = 43;
                    }
                    v122(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, migrationLog.length (%lu) < AppletMigrationLogMinLength (6)", v127, v125, v126, 898, v270);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  CFStringRef v128 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                  {
                    id v129 = object_getClass(a1);
                    if (class_isMetaClass(v129)) {
                      int v130 = 43;
                    }
                    else {
                      int v130 = 45;
                    }
                    __int16 v131 = object_getClassName(a1);
                    NSErrorUserInfoKey v132 = sel_getName("getAppletMigrationErrorCount:reset:");
                    id v133 = [v120 length];
                    *(_DWORD *)int buf = 67110146;
                    int v295 = v130;
                    __int16 v296 = 2082;
                    v297 = v131;
                    __int16 v298 = 2082;
                    NSErrorUserInfoKey v299 = v132;
                    __int16 v300 = 1024;
                    int v301 = 898;
                    __int16 v302 = 2048;
                    *(void *)id v303 = v133;
                    _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, migrationLog.length (%lu) < AppletMigrationLogMinLength (6)", buf, 0x2Cu);
                  }

                  id v134 = objc_alloc((Class)NSError);
                  NSErrorUserInfoKey v135 = +[NSString stringWithUTF8String:"nfcd"];
                  v310[0] = NSLocalizedDescriptionKey;
                  id v136 = +[NSString stringWithUTF8String:"Unexpected Result"];
                  v311[0] = v136;
                  v311[1] = &off_10031AFE0;
                  v310[1] = @"Line";
                  v310[2] = @"Method";
                  id v137 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
                  v311[2] = v137;
                  v310[3] = NSDebugDescriptionErrorKey;
                  id v138 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 899];
                  v311[3] = v138;
                  __int16 v139 = +[NSDictionary dictionaryWithObjects:v311 forKeys:v310 count:4];
                  id v140 = [v134 initWithDomain:v135 code:13 userInfo:v139];

                  id v24 = v140;
                  goto LABEL_129;
                }
                id v192 = v120;
                SEL v193 = (unsigned __int16 *)[v192 bytes];
                NSErrorUserInfoKey v276 = v192;
                SEL v194 = (char *)[v192 length];
                unsigned int v195 = v193[1];
                unsigned int v196 = v193[2];
                unsigned int v197 = __rev16(v196);
                if (v197 == 65445)
                {
                  id v274 = v194;
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v210 = NFLogGetLogger();
                  if (v210)
                  {
                    unsigned int v211 = (void (*)(uint64_t, const char *, ...))v210;
                    uint64_t v212 = object_getClass(a1);
                    BOOL v213 = class_isMetaClass(v212);
                    NSErrorUserInfoKey v272 = object_getClassName(a1);
                    int v264 = sel_getName("getAppletMigrationErrorCount:reset:");
                    uint64_t v214 = 45;
                    if (v213) {
                      uint64_t v214 = 43;
                    }
                    v211(6, "%c[%{public}s %{public}s]:%i There is a buffer overflow without the host acknowledging a readout !", v214, v272, v264, 917);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  BOOL v215 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
                  {
                    NSErrorUserInfoKey v216 = object_getClass(a1);
                    if (class_isMetaClass(v216)) {
                      int v217 = 43;
                    }
                    else {
                      int v217 = 45;
                    }
                    int v273 = v217;
                    unsigned int v218 = object_getClassName(a1);
                    CFStringRef v219 = sel_getName("getAppletMigrationErrorCount:reset:");
                    *(_DWORD *)int buf = 67109890;
                    int v295 = v273;
                    __int16 v296 = 2082;
                    v297 = v218;
                    __int16 v298 = 2082;
                    NSErrorUserInfoKey v299 = v219;
                    __int16 v300 = 1024;
                    int v301 = 917;
                    _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i There is a buffer overflow without the host acknowledging a readout !", buf, 0x22u);
                  }

                  id v117 = v278;
                  SEL v194 = v274;
                }
                else if (v197 == 65370)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v198 = NFLogGetLogger();
                  if (v198)
                  {
                    id v199 = (void (*)(uint64_t, const char *, ...))v198;
                    id v200 = object_getClass(a1);
                    BOOL v201 = class_isMetaClass(v200);
                    char v202 = object_getClassName(a1);
                    __int16 v263 = sel_getName("getAppletMigrationErrorCount:reset:");
                    uint64_t v203 = 45;
                    if (v201) {
                      uint64_t v203 = 43;
                    }
                    v199(6, "%c[%{public}s %{public}s]:%i There is no new entry in the log since the host acknowledged the last readout of the log.", v203, v202, v263, 914);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v204 = NFSharedLogGetLogger();
                  id v8 = v285;
                  if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
                  {
                    NSErrorUserInfoKey v205 = object_getClass(a1);
                    if (class_isMetaClass(v205)) {
                      int v206 = 43;
                    }
                    else {
                      int v206 = 45;
                    }
                    BOOL v207 = object_getClassName(a1);
                    __int16 v208 = sel_getName("getAppletMigrationErrorCount:reset:");
                    *(_DWORD *)int buf = 67109890;
                    int v295 = v206;
                    __int16 v296 = 2082;
                    v297 = v207;
                    __int16 v298 = 2082;
                    NSErrorUserInfoKey v299 = v208;
                    __int16 v300 = 1024;
                    int v301 = 914;
                    v209 = "%c[%{public}s %{public}s]:%i There is no new entry in the log since the host acknowledged the"
                           " last readout of the log.";
                    goto LABEL_169;
                  }
                  goto LABEL_170;
                }
                if (v195 == v196)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v220 = NFLogGetLogger();
                  if (v220)
                  {
                    __int16 v221 = (void (*)(uint64_t, const char *, ...))v220;
                    id v222 = object_getClass(a1);
                    BOOL v223 = class_isMetaClass(v222);
                    id v224 = object_getClassName(a1);
                    id v265 = sel_getName("getAppletMigrationErrorCount:reset:");
                    uint64_t v225 = 45;
                    if (v223) {
                      uint64_t v225 = 43;
                    }
                    v221(6, "%c[%{public}s %{public}s]:%i Applet Migration Error counter is 0", v225, v224, v265, 925);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v204 = NFSharedLogGetLogger();
                  id v8 = v285;
                  if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
                  {
                    CFStringRef v226 = object_getClass(a1);
                    if (class_isMetaClass(v226)) {
                      int v227 = 43;
                    }
                    else {
                      int v227 = 45;
                    }
                    id v228 = object_getClassName(a1);
                    id v229 = sel_getName("getAppletMigrationErrorCount:reset:");
                    *(_DWORD *)int buf = 67109890;
                    int v295 = v227;
                    __int16 v296 = 2082;
                    v297 = v228;
                    __int16 v298 = 2082;
                    NSErrorUserInfoKey v299 = v229;
                    __int16 v300 = 1024;
                    int v301 = 925;
                    v209 = "%c[%{public}s %{public}s]:%i Applet Migration Error counter is 0";
LABEL_169:
                    _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEFAULT, v209, buf, 0x22u);
                  }
LABEL_170:

                  id v24 = 0;
                  id v84 = v279;
LABEL_131:

LABEL_132:
LABEL_133:

                  id v6 = v24;
                  goto LABEL_134;
                }
                unint64_t v230 = __rev16(v195) - v197;
                if ((int)v230 >= 9 && (unint64_t)(v194 - 6) >= v230)
                {
                  int v231 = v230 - 11;
                  if (v230 >= 0xB)
                  {
                    __int16 v249 = 0;
                    int v232 = 0;
                    id v250 = (char *)(v193 + 3);
                    id v8 = v285;
                    id v117 = v278;
                    id v84 = v279;
                    int v233 = v280;
                    do
                    {
                      NSErrorUserInfoKey v251 = &v250[v249];
                      if (!*v251) {
                        break;
                      }
                      v232 += bswap32(*(unsigned __int16 *)(v251 + 9)) >> 16;
                      v249 += *v251 + 1;
                    }
                    while (v231 >= v249);
                  }
                  else
                  {
                    int v232 = 0;
                    id v8 = v285;
                    id v117 = v278;
                    id v84 = v279;
                    int v233 = v280;
                  }
                  *a2 = v232;
                  if (v233)
                  {
                    uint64_t v252 = +[NSData NF_dataWithHexString:@"DF2D00FEB000"];

                    id v287 = 0;
                    id v253 = [a1 sendCommandWithClass:128 instruction:202 p1:0 p2:254 data:v252 expectedLength:0 toOS:0 error:&v287];
                    id v254 = v287;
                    id v10 = (void *)v252;
                  }
                  else
                  {
                    id v254 = 0;
                  }
                  id v24 = v254;

                  goto LABEL_131;
                }
                id v275 = v194;
                id v281 = objc_alloc((Class)NSError);
                char v234 = +[NSString stringWithUTF8String:"nfcd"];
                v308[0] = NSLocalizedDescriptionKey;
                uint64_t v235 = +[NSString stringWithUTF8String:"Unexpected Result"];
                v309[0] = v235;
                v309[1] = &off_10031AFF8;
                v308[1] = @"Line";
                v308[2] = @"Method";
                id v236 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
                v309[2] = v236;
                v308[3] = NSDebugDescriptionErrorKey;
                id v237 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 933];
                v309[3] = v237;
                id v238 = +[NSDictionary dictionaryWithObjects:v309 forKeys:v308 count:4];
                id v282 = [v281 initWithDomain:v234 code:13 userInfo:v238];

                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v239 = NFLogGetLogger();
                if (v239)
                {
                  NSErrorUserInfoKey v240 = (void (*)(uint64_t, const char *, ...))v239;
                  id v241 = object_getClass(a1);
                  BOOL v242 = class_isMetaClass(v241);
                  id v258 = object_getClassName(a1);
                  id v266 = sel_getName("getAppletMigrationErrorCount:reset:");
                  uint64_t v243 = 43;
                  if (!v242) {
                    uint64_t v243 = 45;
                  }
                  v240(3, "%c[%{public}s %{public}s]:%i Error in Applet Migration Error Log data: dataLength=%d, it should big then AppletMigrationLogDataEntryErrorCounterOffset=%d, less or equal to: logContentBytes=%ld - AppletMigrationLogDataOffset=%d", v243, v258, v266, 934, v230, 9, v275, 6);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                NSErrorUserInfoKey v244 = NFSharedLogGetLogger();
                id v8 = v285;
                if (os_log_type_enabled(v244, OS_LOG_TYPE_ERROR))
                {
                  id v245 = object_getClass(a1);
                  if (class_isMetaClass(v245)) {
                    int v246 = 43;
                  }
                  else {
                    int v246 = 45;
                  }
                  NSErrorUserInfoKey v247 = object_getClassName(a1);
                  NSErrorUserInfoKey v248 = sel_getName("getAppletMigrationErrorCount:reset:");
                  *(_DWORD *)int buf = 67110914;
                  int v295 = v246;
                  __int16 v296 = 2082;
                  v297 = v247;
                  __int16 v298 = 2082;
                  NSErrorUserInfoKey v299 = v248;
                  __int16 v300 = 1024;
                  int v301 = 934;
                  __int16 v302 = 1024;
                  *(_DWORD *)id v303 = v230;
                  *(_WORD *)&v303[4] = 1024;
                  *(_DWORD *)&v303[6] = 9;
                  __int16 v304 = 2048;
                  long long v305 = v275;
                  __int16 v306 = 1024;
                  int v307 = 6;
                  _os_log_impl((void *)&_mh_execute_header, v244, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error in Applet Migration Error Log data: dataLength=%d, it should big then AppletMigrationLogDataEntryErrorCounterOffset=%d, less or equal to: logContentBytes=%ld - AppletMigrationLogDataOffset=%d", buf, 0x3Eu);
                }

                id v24 = v282;
              }
              else
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v171 = NFLogGetLogger();
                if (v171)
                {
                  id v172 = (void (*)(uint64_t, const char *, ...))v171;
                  id v173 = object_getClass(a1);
                  BOOL v174 = class_isMetaClass(v173);
                  id v175 = object_getClassName(a1);
                  id v176 = sel_getName("getAppletMigrationErrorCount:reset:");
                  id v271 = [v119 tag];
                  uint64_t v177 = 45;
                  if (v174) {
                    uint64_t v177 = 43;
                  }
                  v172(3, "%c[%{public}s %{public}s]:%i Invalid migration log data, the second partialTag should be 0xB0, but got: 0x%x", v177, v175, v176, 892, v271);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                id v178 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
                {
                  id v179 = object_getClass(a1);
                  if (class_isMetaClass(v179)) {
                    int v180 = 43;
                  }
                  else {
                    int v180 = 45;
                  }
                  id v181 = object_getClassName(a1);
                  id v182 = sel_getName("getAppletMigrationErrorCount:reset:");
                  unsigned int v183 = [v119 tag];
                  *(_DWORD *)int buf = 67110146;
                  int v295 = v180;
                  __int16 v296 = 2082;
                  v297 = v181;
                  __int16 v298 = 2082;
                  NSErrorUserInfoKey v299 = v182;
                  __int16 v300 = 1024;
                  int v301 = 892;
                  __int16 v302 = 1024;
                  *(_DWORD *)id v303 = v183;
                  _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data, the second partialTag should be 0xB0, but got: 0x%x", buf, 0x28u);
                }

                id v184 = objc_alloc((Class)NSError);
                int v185 = +[NSString stringWithUTF8String:"nfcd"];
                v312[0] = NSLocalizedDescriptionKey;
                id v186 = +[NSString stringWithUTF8String:"Unexpected Result"];
                v313[0] = v186;
                v313[1] = &off_10031AFC8;
                v312[1] = @"Line";
                v312[2] = @"Method";
                id v187 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
                v313[2] = v187;
                v312[3] = NSDebugDescriptionErrorKey;
                id v188 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 893];
                v313[3] = v188;
                uint64_t v189 = +[NSDictionary dictionaryWithObjects:v313 forKeys:v312 count:4];
                id v190 = [v184 initWithDomain:v185 code:13 userInfo:v189];

                id v24 = v190;
LABEL_129:
                id v8 = v285;
              }
              id v117 = v278;
              id v84 = v279;
              goto LABEL_131;
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v141 = NFLogGetLogger();
            if (v141)
            {
              int v142 = (void (*)(uint64_t, const char *, ...))v141;
              __int16 v143 = object_getClass(a1);
              BOOL v144 = class_isMetaClass(v143);
              id v257 = object_getClassName(a1);
              id v261 = sel_getName("getAppletMigrationErrorCount:reset:");
              uint64_t v145 = 45;
              if (v144) {
                uint64_t v145 = 43;
              }
              v142(3, "%c[%{public}s %{public}s]:%i Invalid migration log data: first partialTag should be: 0xFEB0, but got: 0x%x", v145, v257, v261, 871, v114);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint32_t v146 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
            {
              id v147 = object_getClass(a1);
              if (class_isMetaClass(v147)) {
                int v148 = 43;
              }
              else {
                int v148 = 45;
              }
              uint64_t v149 = object_getClassName(a1);
              unsigned int v150 = sel_getName("getAppletMigrationErrorCount:reset:");
              *(_DWORD *)int buf = 67110146;
              int v295 = v148;
              __int16 v296 = 2082;
              v297 = v149;
              __int16 v298 = 2082;
              NSErrorUserInfoKey v299 = v150;
              __int16 v300 = 1024;
              int v301 = 871;
              __int16 v302 = 1024;
              *(_DWORD *)id v303 = v114;
              _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid migration log data: first partialTag should be: 0xFEB0, but got: 0x%x", buf, 0x28u);
            }

            id v106 = objc_alloc((Class)NSError);
            long long v107 = +[NSString stringWithUTF8String:"nfcd"];
            v316[0] = NSLocalizedDescriptionKey;
            long long v108 = +[NSString stringWithUTF8String:"Unexpected Result"];
            v317[0] = v108;
            v317[1] = &off_10031AF98;
            v316[1] = @"Line";
            v316[2] = @"Method";
            id v109 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
            v317[2] = v109;
            v316[3] = NSDebugDescriptionErrorKey;
            id v110 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 872];
            v317[3] = v110;
            uint64_t v111 = v317;
            int v112 = v316;
LABEL_108:
            id v151 = +[NSDictionary dictionaryWithObjects:v111 forKeys:v112 count:4];
            id v152 = [v106 initWithDomain:v107 code:13 userInfo:v151];

            id v24 = v152;
            id v8 = v285;
            goto LABEL_133;
          }
          uint64_t v13 = [v11 response];
          [v6 appendData:v13];

          id v9 = 0;
        }
        id v54 = objc_alloc((Class)NSError);
        uint64_t v55 = +[NSString stringWithUTF8String:"nfcd"];
        v321[0] = NSLocalizedDescriptionKey;
        uint64_t v56 = +[NSString stringWithUTF8String:"Unexpected Result"];
        v322[0] = v56;
        v322[1] = &off_10031AF68;
        v321[1] = @"Line";
        v321[2] = @"Method";
        id v57 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
        v322[2] = v57;
        v321[3] = NSDebugDescriptionErrorKey;
        id v58 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 823];
        v322[3] = v58;
        uint64_t v59 = +[NSDictionary dictionaryWithObjects:v322 forKeys:v321 count:4];
        id v12 = [v54 initWithDomain:v55 code:13 userInfo:v59];

        if (!v12)
        {
          id v6 = 0;
          goto LABEL_60;
        }
LABEL_38:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v60 = NFLogGetLogger();
        id v8 = v285;
        if (v60)
        {
          uint64_t v61 = (void (*)(uint64_t, const char *, ...))v60;
          BOOL v62 = object_getClass(a1);
          BOOL v63 = class_isMetaClass(v62);
          NSErrorUserInfoKey v256 = object_getClassName(a1);
          NSErrorUserInfoKey v260 = sel_getName("getAppletMigrationErrorCount:reset:");
          uint64_t v64 = 45;
          if (v63) {
            uint64_t v64 = 43;
          }
          v61(3, "%c[%{public}s %{public}s]:%i Data responce error: %@", v64, v256, v260, 839, v12);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        unsigned int v65 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          int v66 = object_getClass(a1);
          if (class_isMetaClass(v66)) {
            int v67 = 43;
          }
          else {
            int v67 = 45;
          }
          BOOL v68 = object_getClassName(a1);
          id v69 = sel_getName("getAppletMigrationErrorCount:reset:");
          *(_DWORD *)int buf = 67110146;
          int v295 = v67;
          __int16 v296 = 2082;
          v297 = v68;
          __int16 v298 = 2082;
          NSErrorUserInfoKey v299 = v69;
          __int16 v300 = 1024;
          int v301 = 839;
          __int16 v302 = 2112;
          *(void *)id v303 = v12;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Data responce error: %@", buf, 0x2Cu);
        }

        id v6 = v12;
        id v24 = v6;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v25 = NFLogGetLogger();
        if (v25)
        {
          uint64_t v26 = (void (*)(uint64_t, const char *, ...))v25;
          int v27 = object_getClass(a1);
          BOOL v28 = class_isMetaClass(v27);
          long long v29 = object_getClassName(a1);
          unsigned int v30 = sel_getName("getAppletMigrationErrorCount:reset:");
          uint64_t v267 = [v8 status];
          uint64_t v31 = 45;
          if (v28) {
            uint64_t v31 = 43;
          }
          v26(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v31, v29, v30, 799, v267);
        }
        SEL sel = (SEL)v6;
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v32 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          uint64_t v33 = object_getClass(a1);
          if (class_isMetaClass(v33)) {
            int v34 = 43;
          }
          else {
            int v34 = 45;
          }
          BOOL v35 = object_getClassName(a1);
          uint64_t v36 = sel_getName("getAppletMigrationErrorCount:reset:");
          unsigned int v37 = [v8 status];
          *(_DWORD *)int buf = 67110146;
          int v295 = v34;
          __int16 v296 = 2082;
          v297 = v35;
          __int16 v298 = 2082;
          NSErrorUserInfoKey v299 = v36;
          __int16 v300 = 1024;
          int v301 = 799;
          __int16 v302 = 1024;
          *(_DWORD *)id v303 = v37;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
        }

        int v38 = v8;
        unsigned int v39 = [v8 status];
        id v40 = objc_alloc((Class)NSError);
        id v41 = +[NSString stringWithUTF8String:"nfcd"];
        if (v39 == 26277)
        {
          v325[0] = NSLocalizedDescriptionKey;
          uint64_t v42 = +[NSString stringWithUTF8String:"Restricted Mode"];
          v326[0] = v42;
          v326[1] = &off_10031AF50;
          v325[1] = @"Line";
          v325[2] = @"Method";
          id v43 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
          v326[2] = v43;
          v325[3] = NSDebugDescriptionErrorKey;
          id v44 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 800];
          v326[3] = v44;
          BOOL v45 = +[NSDictionary dictionaryWithObjects:v326 forKeys:v325 count:4];
          uint64_t v46 = v40;
          unsigned int v47 = v41;
          uint64_t v48 = 24;
        }
        else
        {
          v323[0] = NSLocalizedDescriptionKey;
          uint64_t v42 = +[NSString stringWithUTF8String:"Commmand Error"];
          v324[0] = v42;
          v324[1] = &off_10031AF50;
          v323[1] = @"Line";
          v323[2] = @"Method";
          id v43 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
          v324[2] = v43;
          v323[3] = NSDebugDescriptionErrorKey;
          id v44 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 800];
          v324[3] = v44;
          BOOL v45 = +[NSDictionary dictionaryWithObjects:v324 forKeys:v323 count:4];
          uint64_t v46 = v40;
          unsigned int v47 = v41;
          uint64_t v48 = 16;
        }
        id v24 = [v46 initWithDomain:v47 code:v48 userInfo:v45];

        id v10 = (void *)sel;
        id v8 = v38;
        id v6 = v9;
      }
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v14 = NFLogGetLogger();
      if (v14)
      {
        int v15 = (void (*)(uint64_t, const char *, ...))v14;
        uint64_t v16 = object_getClass(a1);
        BOOL v17 = class_isMetaClass(v16);
        id v255 = object_getClassName(a1);
        __int16 v259 = sel_getName("getAppletMigrationErrorCount:reset:");
        uint64_t v18 = 45;
        if (v17) {
          uint64_t v18 = 43;
        }
        v15(3, "%c[%{public}s %{public}s]:%i Failed to select ISD: %{public}@", v18, v255, v259, 796, v9);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = object_getClass(a1);
        if (class_isMetaClass(v20)) {
          int v21 = 43;
        }
        else {
          int v21 = 45;
        }
        id v22 = object_getClassName(a1);
        id v23 = sel_getName("getAppletMigrationErrorCount:reset:");
        *(_DWORD *)int buf = 67110146;
        int v295 = v21;
        __int16 v296 = 2082;
        v297 = v22;
        __int16 v298 = 2082;
        NSErrorUserInfoKey v299 = v23;
        __int16 v300 = 1024;
        int v301 = 796;
        __int16 v302 = 2114;
        *(void *)id v303 = v9;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select ISD: %{public}@", buf, 0x2Cu);
      }

      if (v9)
      {
        id v24 = v9;
        id v10 = v6;
        id v6 = v24;
      }
      else
      {
        id v49 = objc_alloc((Class)NSError);
        id v10 = +[NSString stringWithUTF8String:"nfcd"];
        v327[0] = NSLocalizedDescriptionKey;
        uint64_t v50 = +[NSString stringWithUTF8String:"Commmand Error"];
        v328[0] = v50;
        v328[1] = &off_10031AF38;
        v327[1] = @"Line";
        v327[2] = @"Method";
        id v51 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationErrorCount:reset:")];
        v328[2] = v51;
        v327[3] = NSDebugDescriptionErrorKey;
        id v52 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationErrorCount:reset:"), 797];
        v328[3] = v52;
        BOOL v53 = +[NSDictionary dictionaryWithObjects:v328 forKeys:v327 count:4];
        id v24 = [v49 initWithDomain:v10 code:16 userInfo:v53];
      }
    }
LABEL_134:
  }
  else
  {
    id v24 = 0;
  }

  return v24;
}

id sub_1000B0908(void *a1, void *a2)
{
  if (a1)
  {
    if (qword_1003473B8)
    {
      id v4 = 0;
      id v5 = 0;
LABEL_4:
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v7 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("getAndResetLPEMCounter:");
        uint64_t v12 = 45;
        if (isMetaClass) {
          uint64_t v12 = 43;
        }
        v7(6, "%c[%{public}s %{public}s]:%i LPEM counter = %ld", v12, ClassName, Name, 1032, qword_1003473B8);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = object_getClass(a1);
        if (class_isMetaClass(v14)) {
          int v15 = 43;
        }
        else {
          int v15 = 45;
        }
        uint64_t v16 = object_getClassName(a1);
        BOOL v17 = sel_getName("getAndResetLPEMCounter:");
        *(_DWORD *)int buf = 67110146;
        int v100 = v15;
        __int16 v101 = 2082;
        int v102 = v16;
        __int16 v103 = 2082;
        BOOL v104 = v17;
        __int16 v105 = 1024;
        int v106 = 1032;
        __int16 v107 = 2048;
        uint64_t v108 = qword_1003473B8;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i LPEM counter = %ld", buf, 0x2Cu);
      }

      id v18 = 0;
      if (a2) {
        *a2 = qword_1003473B8;
      }
      goto LABEL_15;
    }
    id v94 = 0;
    int v19 = [a1 selectCRSWithError:&v94];
    id v20 = v94;
    if (v20)
    {
      int v21 = v20;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v22 = NFLogGetLogger();
      if (v22)
      {
        id v23 = (void (*)(uint64_t, const char *, ...))v22;
        id v24 = object_getClass(a1);
        BOOL v25 = class_isMetaClass(v24);
        uint64_t v26 = object_getClassName(a1);
        id v89 = sel_getName("getAndResetLPEMCounter:");
        uint64_t v27 = 45;
        if (v25) {
          uint64_t v27 = 43;
        }
        v23(3, "%c[%{public}s %{public}s]:%i Failed to select CRS", v27, v26, v89, 997);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        long long v29 = object_getClass(a1);
        if (class_isMetaClass(v29)) {
          int v30 = 43;
        }
        else {
          int v30 = 45;
        }
        uint64_t v31 = object_getClassName(a1);
        uint64_t v32 = sel_getName("getAndResetLPEMCounter:");
        *(_DWORD *)int buf = 67109890;
        int v100 = v30;
        __int16 v101 = 2082;
        int v102 = v31;
        __int16 v103 = 2082;
        BOOL v104 = v32;
        __int16 v105 = 1024;
        int v106 = 997;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS", buf, 0x22u);
      }

      id v5 = v21;
      id v18 = v5;
      goto LABEL_27;
    }
    id v93 = 0;
    id v4 = [a1 sendCommandWithClass:128 instruction:243 p1:3 p2:2 data:0 error:&v93];
    id v5 = v93;

    if (!v4)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v56 = NFLogGetLogger();
      if (v56)
      {
        id v57 = (void (*)(uint64_t, const char *, ...))v56;
        id v58 = object_getClass(a1);
        BOOL v59 = class_isMetaClass(v58);
        uint64_t v60 = object_getClassName(a1);
        BOOL v90 = sel_getName("getAndResetLPEMCounter:");
        uint64_t v61 = 45;
        if (v59) {
          uint64_t v61 = 43;
        }
        v57(3, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter", v61, v60, v90, 1009);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v62 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        BOOL v63 = object_getClass(a1);
        if (class_isMetaClass(v63)) {
          int v64 = 43;
        }
        else {
          int v64 = 45;
        }
        unsigned int v65 = object_getClassName(a1);
        int v66 = sel_getName("getAndResetLPEMCounter:");
        *(_DWORD *)int buf = 67109890;
        int v100 = v64;
        __int16 v101 = 2082;
        int v102 = v65;
        __int16 v103 = 2082;
        BOOL v104 = v66;
        __int16 v105 = 1024;
        int v106 = 1009;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter", buf, 0x22u);
      }

      id v67 = objc_alloc((Class)NSError);
      BOOL v68 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v111 = NSLocalizedDescriptionKey;
      id v69 = +[NSString stringWithUTF8String:"Unknown Error"];
      int v112 = v69;
      int v70 = +[NSDictionary dictionaryWithObjects:&v112 forKeys:&v111 count:1];
      id v18 = [v67 initWithDomain:v68 code:6 userInfo:v70];

      int v19 = 0;
      goto LABEL_27;
    }
    if ([v4 status] == 36864)
    {
      int v34 = [v4 response];
      id v35 = [v34 length];

      if ((unint64_t)v35 > 1)
      {
        if (a2)
        {
          id v85 = [v4 response];
          unsigned int v86 = *(unsigned __int16 *)[v85 bytes];

          if (v86)
          {
            qword_1003473B8 = __rev16(v86);
            CFStringRef v95 = @"totalLPEMCounter";
            unsigned int v87 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
            BOOL v96 = v87;
            uint64_t v88 = +[NSDictionary dictionaryWithObjects:&v96 forKeys:&v95 count:1];
            +[NFGeneralStatisticsCALogger updateAnalyticsGeneralTransactionStatistics:v88];
          }
        }
        goto LABEL_4;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v36 = NFLogGetLogger();
      if (v36)
      {
        unsigned int v37 = (void (*)(uint64_t, const char *, ...))v36;
        int v38 = object_getClass(a1);
        BOOL v39 = class_isMetaClass(v38);
        id v40 = object_getClassName(a1);
        id v41 = sel_getName("getAndResetLPEMCounter:");
        uint64_t v42 = [v4 response];
        id v91 = [v42 length];
        uint64_t v43 = 45;
        if (v39) {
          uint64_t v43 = 43;
        }
        v37(3, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, invalid length %lu", v43, v40, v41, 1017, v91);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v44 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        BOOL v45 = object_getClass(a1);
        if (class_isMetaClass(v45)) {
          int v46 = 43;
        }
        else {
          int v46 = 45;
        }
        unsigned int v47 = object_getClassName(a1);
        uint64_t v48 = sel_getName("getAndResetLPEMCounter:");
        id v49 = [v4 response];
        id v50 = [v49 length];
        *(_DWORD *)int buf = 67110146;
        int v100 = v46;
        __int16 v101 = 2082;
        int v102 = v47;
        __int16 v103 = 2082;
        BOOL v104 = v48;
        __int16 v105 = 1024;
        int v106 = 1017;
        __int16 v107 = 2048;
        uint64_t v108 = (uint64_t)v50;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, invalid length %lu", buf, 0x2Cu);
      }
      id v51 = objc_alloc((Class)NSError);
      id v52 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v97 = NSLocalizedDescriptionKey;
      BOOL v53 = +[NSString stringWithUTF8String:"Unexpected Result"];
      long long v98 = v53;
      id v54 = &v98;
      uint64_t v55 = &v97;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v71 = NFLogGetLogger();
      if (v71)
      {
        id v72 = (void (*)(uint64_t, const char *, ...))v71;
        uint64_t v73 = object_getClass(a1);
        BOOL v74 = class_isMetaClass(v73);
        uint64_t v75 = object_getClassName(a1);
        uint64_t v76 = sel_getName("getAndResetLPEMCounter:");
        uint64_t v92 = [v4 status];
        uint64_t v77 = 45;
        if (v74) {
          uint64_t v77 = 43;
        }
        v72(3, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, SW = 0x%x", v77, v75, v76, 1013, v92);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v78 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        uint64_t v79 = object_getClass(a1);
        if (class_isMetaClass(v79)) {
          int v80 = 43;
        }
        else {
          int v80 = 45;
        }
        unsigned int v81 = object_getClassName(a1);
        BOOL v82 = sel_getName("getAndResetLPEMCounter:");
        unsigned int v83 = [v4 status];
        *(_DWORD *)int buf = 67110146;
        int v100 = v80;
        __int16 v101 = 2082;
        int v102 = v81;
        __int16 v103 = 2082;
        BOOL v104 = v82;
        __int16 v105 = 1024;
        int v106 = 1013;
        __int16 v107 = 1024;
        LODWORD(v10_Block_object_dispose(&STACK[0x2B0], 8) = v83;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query LPEM counter, SW = 0x%x", buf, 0x28u);
      }

      id v51 = objc_alloc((Class)NSError);
      id v52 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v109 = NSLocalizedDescriptionKey;
      BOOL v53 = +[NSString stringWithUTF8String:"Unexpected Result"];
      id v110 = v53;
      id v54 = &v110;
      uint64_t v55 = &v109;
    }
    id v84 = +[NSDictionary dictionaryWithObjects:v54 forKeys:v55 count:1];
    id v18 = [v51 initWithDomain:v52 code:13 userInfo:v84];

LABEL_15:
    int v19 = v4;
LABEL_27:

    goto LABEL_28;
  }
  id v18 = 0;
LABEL_28:

  return v18;
}

id sub_1000B12C8(void *a1, void *a2)
{
  if (a1)
  {
    id v123 = objc_opt_new();
    id v3 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283806 length:8];
    id v133 = 0;
    id v4 = [a1 selectByName:v3 error:&v133];
    id v5 = v133;

    if (v4)
    {
      uint64_t v121 = v4;
      if ([v4 status] == 36864)
      {
        uint64_t v122 = +[NSData NF_dataWithHexString:@"08AA0400"];
        while (1)
        {
          id v132 = v5;
          id v6 = [a1 sendCommandWithClass:128 instruction:202 p1:0 p2:254 data:v122 expectedLength:0 toOS:0 error:&v132];
          id v7 = v132;

          if (v7) {
            break;
          }
          if (!v6)
          {
            id v49 = objc_alloc((Class)NSError);
            id v50 = +[NSString stringWithUTF8String:"nfcd"];
            v138[0] = NSLocalizedDescriptionKey;
            id v51 = +[NSString stringWithUTF8String:"Unexpected Result"];
            v139[0] = v51;
            v139[1] = &off_10031B058;
            v138[1] = @"Line";
            v138[2] = @"Method";
            id v52 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationListAndState:")];
            v139[2] = v52;
            v138[3] = NSDebugDescriptionErrorKey;
            id v53 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationListAndState:"), 1282];
            v139[3] = v53;
            id v54 = +[NSDictionary dictionaryWithObjects:v139 forKeys:v138 count:4];
            id v7 = [v49 initWithDomain:v50 code:13 userInfo:v54];

            if (!v7)
            {
              int v19 = 0;
              goto LABEL_84;
            }
LABEL_38:
            id v20 = v7;
            id v4 = v121;
            int v19 = (void *)v122;
            id v5 = v20;
            goto LABEL_88;
          }
          if ([v6 status] == 36864) {
            goto LABEL_49;
          }
          if ([v6 status] != 25360 && objc_msgSend(v6, "status") != 37008)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t Logger = NFLogGetLogger();
            if (Logger)
            {
              uint64_t v56 = (void (*)(uint64_t, const char *, ...))Logger;
              Class Class = object_getClass(a1);
              BOOL isMetaClass = class_isMetaClass(Class);
              ClassName = object_getClassName(a1);
              Name = sel_getName("getAppletMigrationListAndState:");
              uint64_t v111 = [v6 status];
              uint64_t v61 = 45;
              if (isMetaClass) {
                uint64_t v61 = 43;
              }
              v56(3, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", v61, ClassName, Name, 1291, v111);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            BOOL v62 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              BOOL v63 = object_getClass(a1);
              if (class_isMetaClass(v63)) {
                int v64 = 43;
              }
              else {
                int v64 = 45;
              }
              unsigned int v65 = object_getClassName(a1);
              int v66 = sel_getName("getAppletMigrationListAndState:");
              unsigned int v67 = [v6 status];
              *(_DWORD *)int buf = 67110146;
              int v147 = v64;
              __int16 v148 = 2082;
              uint64_t v149 = v65;
              __int16 v150 = 2082;
              id v151 = v66;
              __int16 v152 = 1024;
              int v153 = 1291;
              __int16 v154 = 1024;
              LODWORD(v155) = v67;
              _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to query, status word is 0x%x", buf, 0x28u);
            }

LABEL_49:
            BOOL v68 = [v6 data];
            int v19 = v123;
            [v123 appendData:v68];

            if (v123)
            {
              id v4 = v121;
              if ((unint64_t)[v123 length] > 2)
              {
                id v69 = objc_opt_new();
                int v70 = +[NFTLV TLVWithData:v123];
                uint64_t v71 = v70;
                if (v70 && [v70 tag] == 225)
                {
                  uint64_t v114 = v71;
                  id v72 = [v71 value];
                  uint64_t v73 = +[NFTLV TLVWithData:v72];

                  if (v73)
                  {
                    if ([v73 tag] == 79)
                    {
                      [v73 value];
                      BOOL v74 = v113 = v73;
                      id v75 = [v74 length];

                      if (v75)
                      {
                        uint64_t v76 = [v73 value];
                        uint64_t v77 = +[NFTLV TLVWithData:v76];

                        long long v130 = 0u;
                        long long v131 = 0u;
                        long long v128 = 0u;
                        long long v129 = 0u;
                        int v112 = v77;
                        id obj = [v77 children];
                        id v78 = [obj countByEnumeratingWithState:&v128 objects:v135 count:16];
                        if (v78)
                        {
                          id v79 = v78;
                          uint64_t v80 = *(void *)v129;
                          uint64_t v115 = *(void *)v129;
                          id v116 = v69;
                          do
                          {
                            unsigned int v81 = 0;
                            id v117 = v79;
                            do
                            {
                              if (*(void *)v129 != v80) {
                                objc_enumerationMutation(obj);
                              }
                              BOOL v82 = *(void **)(*((void *)&v128 + 1) + 8 * (void)v81);
                              if ([v82 tag] == 226)
                              {
                                unsigned int v83 = [v82 value];
                                id v84 = +[NFTLV TLVWithData:v83];

                                long long v126 = 0u;
                                long long v127 = 0u;
                                long long v124 = 0u;
                                long long v125 = 0u;
                                __int16 v120 = v84;
                                id v85 = [v84 children];
                                id v86 = [v85 countByEnumeratingWithState:&v124 objects:v134 count:16];
                                if (v86)
                                {
                                  id v87 = v86;
                                  uint64_t v88 = 0;
                                  id v89 = 0;
                                  uint64_t v90 = *(void *)v125;
                                  do
                                  {
                                    for (unint64_t i = 0; i != v87; unint64_t i = (char *)i + 1)
                                    {
                                      if (*(void *)v125 != v90) {
                                        objc_enumerationMutation(v85);
                                      }
                                      uint64_t v92 = *(void **)(*((void *)&v124 + 1) + 8 * i);
                                      if (v92)
                                      {
                                        if ([*(id *)(*((void *)&v124 + 1) + 8 * i) tag] == 79)
                                        {
                                          id v93 = [v92 value];
                                          uint64_t v94 = [v93 NF_asHexString];

                                          uint64_t v88 = (void *)v94;
                                        }
                                        if ([v92 tag] == 178)
                                        {
                                          CFStringRef v95 = [v92 value];
                                          uint64_t v96 = [v95 NF_asHexString];

                                          id v89 = (void *)v96;
                                        }
                                      }
                                    }
                                    id v87 = [v85 countByEnumeratingWithState:&v124 objects:v134 count:16];
                                  }
                                  while (v87);
                                }
                                else
                                {
                                  uint64_t v88 = 0;
                                  id v89 = 0;
                                }

                                NSErrorUserInfoKey v97 = +[NSString stringWithFormat:@"%@-%@,", v89, v88];
                                id v69 = v116;
                                id v98 = [v116 stringByAppendingString:v97];

                                id v4 = v121;
                                uint64_t v80 = v115;
                                id v79 = v117;
                              }
                              unsigned int v81 = (char *)v81 + 1;
                            }
                            while (v81 != v79);
                            id v79 = [obj countByEnumeratingWithState:&v128 objects:v135 count:16];
                          }
                          while (v79);
                        }

                        int v19 = v123;
                        uint64_t v73 = v113;
                      }
                    }
                  }

                  uint64_t v71 = v114;
                }
                if ([v69 length]) {
                  [v69 deleteCharactersInRange:[v69 length] - 1, 1];
                }
                else {
                  id v106 = [v69 stringByAppendingString:&stru_100309C40];
                }
                *a2 = [v69 mutableCopy];

                id v20 = 0;
                id v5 = (id)v122;
                goto LABEL_88;
              }
LABEL_85:
              id v99 = objc_alloc((Class)NSError);
              int v100 = +[NSString stringWithUTF8String:"nfcd"];
              v136[0] = NSLocalizedDescriptionKey;
              __int16 v101 = +[NSString stringWithUTF8String:"Unexpected Result"];
              v137[0] = v101;
              v137[1] = &off_10031B070;
              v136[1] = @"Line";
              v136[2] = @"Method";
              id v102 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationListAndState:")];
              v137[2] = v102;
              v136[3] = NSDebugDescriptionErrorKey;
              id v103 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationListAndState:"), 1303];
              v137[3] = v103;
              BOOL v104 = +[NSDictionary dictionaryWithObjects:v137 forKeys:v136 count:4];
              id v105 = [v99 initWithDomain:v100 code:13 userInfo:v104];

              id v20 = v105;
              int v19 = (void *)v122;
              id v5 = v20;
              goto LABEL_88;
            }
LABEL_84:
            id v4 = v121;
            goto LABEL_85;
          }
          id v8 = [v6 response];
          [v123 appendData:v8];

          id v5 = 0;
        }

        goto LABEL_38;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v21 = NFLogGetLogger();
      if (v21)
      {
        uint64_t v22 = (void (*)(uint64_t, const char *, ...))v21;
        id v23 = object_getClass(a1);
        BOOL v24 = class_isMetaClass(v23);
        BOOL v25 = object_getClassName(a1);
        uint64_t v26 = sel_getName("getAppletMigrationListAndState:");
        uint64_t v110 = [v4 status];
        uint64_t v27 = 45;
        if (v24) {
          uint64_t v27 = 43;
        }
        v22(3, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", v27, v25, v26, 1263, v110);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      BOOL v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        long long v29 = object_getClass(a1);
        if (class_isMetaClass(v29)) {
          int v30 = 43;
        }
        else {
          int v30 = 45;
        }
        uint64_t v31 = object_getClassName(a1);
        uint64_t v32 = sel_getName("getAppletMigrationListAndState:");
        unsigned int v33 = [v4 status];
        *(_DWORD *)int buf = 67110146;
        int v147 = v30;
        __int16 v148 = 2082;
        uint64_t v149 = v31;
        __int16 v150 = 2082;
        id v151 = v32;
        __int16 v152 = 1024;
        int v153 = 1263;
        __int16 v154 = 1024;
        LODWORD(v155) = v33;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select: 0x%04x", buf, 0x28u);
      }

      unsigned int v34 = [v4 status];
      id v35 = objc_alloc((Class)NSError);
      uint64_t v36 = +[NSString stringWithUTF8String:"nfcd"];
      if (v34 == 26277)
      {
        v142[0] = NSLocalizedDescriptionKey;
        unsigned int v37 = +[NSString stringWithUTF8String:"Restricted Mode"];
        v143[0] = v37;
        v143[1] = &off_10031B040;
        v142[1] = @"Line";
        v142[2] = @"Method";
        id v38 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationListAndState:")];
        v143[2] = v38;
        v142[3] = NSDebugDescriptionErrorKey;
        id v39 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationListAndState:"), 1264];
        v143[3] = v39;
        id v40 = +[NSDictionary dictionaryWithObjects:v143 forKeys:v142 count:4];
        id v41 = v35;
        uint64_t v42 = v36;
        uint64_t v43 = 24;
      }
      else
      {
        v140[0] = NSLocalizedDescriptionKey;
        unsigned int v37 = +[NSString stringWithUTF8String:"Commmand Error"];
        v141[0] = v37;
        v141[1] = &off_10031B040;
        v140[1] = @"Line";
        v140[2] = @"Method";
        id v38 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationListAndState:")];
        v141[2] = v38;
        v140[3] = NSDebugDescriptionErrorKey;
        id v39 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationListAndState:"), 1264];
        v141[3] = v39;
        id v40 = +[NSDictionary dictionaryWithObjects:v141 forKeys:v140 count:4];
        id v41 = v35;
        uint64_t v42 = v36;
        uint64_t v43 = 16;
      }
      id v20 = [v41 initWithDomain:v42 code:v43 userInfo:v40];

      int v19 = v123;
      id v4 = v121;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v9 = NFLogGetLogger();
      if (v9)
      {
        id v10 = (void (*)(uint64_t, const char *, ...))v9;
        uint64_t v11 = object_getClass(a1);
        BOOL v12 = class_isMetaClass(v11);
        uint64_t v108 = object_getClassName(a1);
        NSErrorUserInfoKey v109 = sel_getName("getAppletMigrationListAndState:");
        uint64_t v13 = 45;
        if (v12) {
          uint64_t v13 = 43;
        }
        v10(3, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", v13, v108, v109, 1260, v5);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v15 = object_getClass(a1);
        if (class_isMetaClass(v15)) {
          int v16 = 43;
        }
        else {
          int v16 = 45;
        }
        BOOL v17 = object_getClassName(a1);
        id v18 = sel_getName("getAppletMigrationListAndState:");
        *(_DWORD *)int buf = 67110146;
        int v147 = v16;
        __int16 v148 = 2082;
        uint64_t v149 = v17;
        __int16 v150 = 2082;
        id v151 = v18;
        __int16 v152 = 1024;
        int v153 = 1260;
        __int16 v154 = 2114;
        id v155 = v5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select : %{public}@", buf, 0x2Cu);
      }

      if (v5)
      {
        id v5 = v5;
        int v19 = v123;
        id v20 = v5;
      }
      else
      {
        id v44 = objc_alloc((Class)NSError);
        int v19 = +[NSString stringWithUTF8String:"nfcd"];
        v144[0] = NSLocalizedDescriptionKey;
        BOOL v45 = +[NSString stringWithUTF8String:"Commmand Error"];
        v145[0] = v45;
        v145[1] = &off_10031B028;
        v144[1] = @"Line";
        v144[2] = @"Method";
        id v46 = [objc_alloc((Class)NSString) initWithFormat:@"%s", sel_getName("getAppletMigrationListAndState:")];
        v145[2] = v46;
        v144[3] = NSDebugDescriptionErrorKey;
        id v47 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", sel_getName("getAppletMigrationListAndState:"), 1261];
        v145[3] = v47;
        uint64_t v48 = +[NSDictionary dictionaryWithObjects:v145 forKeys:v144 count:4];
        id v20 = [v44 initWithDomain:v19 code:16 userInfo:v48];

        id v5 = v123;
      }
    }
LABEL_88:
  }
  else
  {
    id v20 = 0;
  }

  return v20;
}

void sub_1000B2640(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1000B268C(uint64_t a1)
{
  id v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.reader.burnoutTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v2, &v4);
  os_activity_scope_leave(&v4);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleReaderBurnoutProtectionTimer];
}

void sub_1000B2704(uint64_t a1)
{
  id v2 = _os_activity_create((void *)&_mh_execute_header, "com.apple.nfcd.reader.burnoutDebounceTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v2, &v5);
  os_activity_scope_leave(&v5);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_activity_scope_state_s v4 = WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[60] = 0;
    [WeakRetained _handleReaderBurnoutProtectionDebounceTimer];
  }
}

void sub_1000B2788(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    [WeakRetained thermalStateChanged:a2];
    id WeakRetained = v4;
  }
}

uint64_t sub_1000B471C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283858 length:7];
  id v4 = [v3 NF_asHexString];

  id v5 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028385F length:7];
  id v6 = [v5 NF_asHexString];

  id v7 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283866 length:9];
  id v8 = [v7 NF_asHexString];

  if (([v2 hasPrefix:v4] & 1) != 0
    || ([v2 hasPrefix:v6] & 1) != 0)
  {
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = (uint64_t)[v2 hasPrefix:v8];
  }

  return v9;
}

void sub_1000B4830(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v7 = self;
  id v8 = +[NSDate now];
  uint64_t v9 = [v6 objectForKeyedSubscript:@"EventType"];
  if (v9)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = [v6 objectForKeyedSubscript:@"appletIdentifier"];
      if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        if (sub_1000B471C((uint64_t)NFUnifiedAccessTransactionCALogger, v10))
        {
          BOOL v12 = a3 == 6 || (a3 & 0xFFFFFFFE) == 4;
          BOOL v72 = v12;
          if ([v9 isEqualToString:@"ActivityTimeout"])
          {
            uint64_t v73 = 65278;
          }
          else
          {
            uint64_t v73 = (a3 << 8);
            uint64_t v42 = [v6 objectForKeyedSubscript:@"ptaTransactionMode"];

            if (v42)
            {
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t Logger = NFLogGetLogger();
              if (Logger)
              {
                int v70 = (void (*)(uint64_t, const char *, ...))Logger;
                Class Class = object_getClass(v7);
                BOOL isMetaClass = class_isMetaClass(Class);
                ClassName = object_getClassName(v7);
                Name = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
                BOOL v45 = [v6 objectForKeyedSubscript:@"ptaTransactionMode"];
                uint64_t v46 = 45;
                if (isMetaClass) {
                  uint64_t v46 = 43;
                }
                v70(6, "%c[%{public}s %{public}s]:%i transactionMode = %{public}@, transactionType = 0x%0X", v46, ClassName, Name, 153, v45, a3);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              id v47 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v48 = object_getClass(v7);
                if (class_isMetaClass(v48)) {
                  int v49 = 43;
                }
                else {
                  int v49 = 45;
                }
                int v71 = v49;
                id v69 = object_getClassName(v7);
                id v50 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
                id v51 = [v6 objectForKeyedSubscript:@"ptaTransactionMode"];
                *(_DWORD *)int buf = 67110402;
                int v78 = v71;
                __int16 v79 = 2082;
                uint64_t v80 = v69;
                __int16 v81 = 2082;
                BOOL v82 = v50;
                __int16 v83 = 1024;
                int v84 = 153;
                __int16 v85 = 2114;
                id v86 = v51;
                __int16 v87 = 1024;
                int v88 = a3;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i transactionMode = %{public}@, transactionType = 0x%0X", buf, 0x32u);
              }
              id v52 = [v6 objectForKeyedSubscript:@"ptaTransactionMode"];
              uint64_t v73 = [v52 charValue] | (unint64_t)v73;
            }
          }
          if ([v9 isEqualToString:@"EndEvent"])
          {
            id v53 = [v6 objectForKeyedSubscript:@"result"];

            if (v53)
            {
              id v54 = [v6 objectForKeyedSubscript:@"result"];
              a4 = (int)[v54 intValue];
            }
          }
          uint64_t v55 = [v6 objectForKeyedSubscript:@"HomeKitManufacturer"];
          objc_opt_class();
          isKindOfClass Class = objc_opt_isKindOfClass();

          if (isKindOfClass)
          {
            id v23 = [v6 objectForKeyedSubscript:@"HomeKitManufacturer"];
          }
          else
          {
            id v23 = @"Unknown";
          }
          id v57 = [v6 objectForKeyedSubscript:@"HomeKitModel"];
          objc_opt_class();
          char v58 = objc_opt_isKindOfClass();

          if (v58)
          {
            uint64_t v21 = [v6 objectForKeyedSubscript:@"HomeKitModel"];
          }
          else
          {
            uint64_t v21 = @"Unknown";
          }
          BOOL v59 = [v6 objectForKeyedSubscript:@"keyType"];
          objc_opt_class();
          char v60 = objc_opt_isKindOfClass();

          if (v60)
          {
            uint64_t v22 = [v6 objectForKeyedSubscript:@"keyType"];
          }
          else
          {
            uint64_t v22 = &off_10031B0A0;
          }
          v75[0] = @"endEventEndTime";
          v75[1] = @"primaryAID";
          v76[0] = v8;
          v76[1] = v10;
          v75[2] = @"transactionType";
          BOOL v74 = +[NSNumber numberWithInteger:v73];
          void v76[2] = v74;
          v75[3] = @"errorCode";
          uint64_t v61 = +[NSNumber numberWithInteger:a4];
          v76[3] = v61;
          v75[4] = @"eventIsAStepUpEvent";
          BOOL v62 = +[NSNumber numberWithBool:v72];
          v76[4] = v62;
          v76[5] = v23;
          v75[5] = @"manufacturer";
          v75[6] = @"modelInfo";
          v75[7] = @"keyType";
          v76[6] = v21;
          v76[7] = v22;
          int v30 = +[NSDictionary dictionaryWithObjects:v76 forKeys:v75 count:8];

          sub_1000B516C((uint64_t)NFUnifiedAccessTransactionCALogger, v30, 0);
          goto LABEL_35;
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v34 = NFLogGetLogger();
        if (v34)
        {
          id v35 = (void (*)(uint64_t, const char *, ...))v34;
          uint64_t v36 = object_getClass(v7);
          BOOL v37 = class_isMetaClass(v36);
          id v38 = object_getClassName(v7);
          unsigned int v65 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
          uint64_t v39 = 45;
          if (v37) {
            uint64_t v39 = 43;
          }
          v35(6, "%c[%{public}s %{public}s]:%i No valid Unified Access Identifiers", v39, v38, v65, 189);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v30 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
LABEL_34:
          uint64_t v21 = @"Unknown";
          uint64_t v22 = &off_10031B0A0;
          id v23 = @"Unknown";
LABEL_35:

          goto LABEL_36;
        }
        id v40 = object_getClass(v7);
        if (class_isMetaClass(v40)) {
          int v41 = 43;
        }
        else {
          int v41 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        int v78 = v41;
        __int16 v79 = 2082;
        uint64_t v80 = object_getClassName(v7);
        __int16 v81 = 2082;
        BOOL v82 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
        __int16 v83 = 1024;
        int v84 = 189;
        unsigned int v33 = "%c[%{public}s %{public}s]:%i No valid Unified Access Identifiers";
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v24 = NFLogGetLogger();
        if (v24)
        {
          BOOL v25 = (void (*)(uint64_t, const char *, ...))v24;
          uint64_t v26 = object_getClass(v7);
          BOOL v27 = class_isMetaClass(v26);
          BOOL v28 = object_getClassName(v7);
          int v64 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
          uint64_t v29 = 45;
          if (v27) {
            uint64_t v29 = 43;
          }
          v25(6, "%c[%{public}s %{public}s]:%i No valid Identifier", v29, v28, v64, 138);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v30 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_34;
        }
        uint64_t v31 = object_getClass(v7);
        if (class_isMetaClass(v31)) {
          int v32 = 43;
        }
        else {
          int v32 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        int v78 = v32;
        __int16 v79 = 2082;
        uint64_t v80 = object_getClassName(v7);
        __int16 v81 = 2082;
        BOOL v82 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
        __int16 v83 = 1024;
        int v84 = 138;
        unsigned int v33 = "%c[%{public}s %{public}s]:%i No valid Identifier";
      }
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v33, buf, 0x22u);
      goto LABEL_34;
    }
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v13 = NFLogGetLogger();
  if (v13)
  {
    uint64_t v14 = (void (*)(uint64_t, const char *, ...))v13;
    int v15 = object_getClass(v7);
    BOOL v16 = class_isMetaClass(v15);
    BOOL v17 = object_getClassName(v7);
    BOOL v63 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
    uint64_t v18 = 45;
    if (v16) {
      uint64_t v18 = 43;
    }
    v14(6, "%c[%{public}s %{public}s]:%i No event from ATL, HCI didn't contain a relevant message", v18, v17, v63, 132);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = object_getClass(v7);
    if (class_isMetaClass(v19)) {
      int v20 = 43;
    }
    else {
      int v20 = 45;
    }
    *(_DWORD *)int buf = 67109890;
    int v78 = v20;
    __int16 v79 = 2082;
    uint64_t v80 = object_getClassName(v7);
    __int16 v81 = 2082;
    BOOL v82 = sel_getName("checkForUnifiedAccessTransaction:transactionType:errorCode:");
    __int16 v83 = 1024;
    int v84 = 132;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i No event from ATL, HCI didn't contain a relevant message", buf, 0x22u);
  }
  uint64_t v21 = @"Unknown";
  uint64_t v22 = &off_10031B0A0;
  id v23 = @"Unknown";
LABEL_36:
}

void sub_1000B516C(uint64_t a1, void *a2, int a3)
{
  id v119 = a2;
  self;
  if (!a3)
  {
    uint64_t v21 = +[NSUUID UUID];
    uint64_t v22 = [v21 UUIDString];

    uint64_t v23 = [v119 objectForKeyedSubscript:@"endEventEndTime"];
    if (v23
      && (uint64_t v24 = (void *)v23,
          [v119 objectForKeyedSubscript:@"endEventEndTime"],
          BOOL v25 = objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          char v26 = objc_opt_isKindOfClass(),
          v25,
          v24,
          (v26 & 1) != 0))
    {
      int v15 = [v119 objectForKeyedSubscript:@"endEventEndTime"];
      uint64_t v27 = [v119 objectForKeyedSubscript:@"primaryAID"];
      if (v27)
      {
        BOOL v28 = (void *)v27;
        uint64_t v29 = [v119 objectForKeyedSubscript:@"primaryAID"];
        objc_opt_class();
        isKindOfClass Class = objc_opt_isKindOfClass();

        if (isKindOfClass)
        {
          uint64_t v31 = [v119 objectForKeyedSubscript:@"primaryAID"];
          uint64_t v32 = [v119 objectForKeyedSubscript:@"transactionType"];
          if (v32)
          {
            unsigned int v33 = (void *)v32;
            uint64_t v34 = [v119 objectForKeyedSubscript:@"transactionType"];
            objc_opt_class();
            char v35 = objc_opt_isKindOfClass();

            if (v35)
            {
              BOOL v17 = [v119 objectForKeyedSubscript:@"transactionType"];
              uint64_t v36 = [v119 objectForKeyedSubscript:@"errorCode"];
              if (v36
                && (BOOL v37 = (void *)v36,
                    [v119 objectForKeyedSubscript:@"errorCode"],
                    id v38 = objc_claimAutoreleasedReturnValue(),
                    objc_opt_class(),
                    char v39 = objc_opt_isKindOfClass(),
                    v38,
                    v37,
                    (v39 & 1) != 0))
              {
                uint64_t v18 = [v119 objectForKeyedSubscript:@"errorCode"];
                uint64_t v40 = [v119 objectForKeyedSubscript:@"eventIsAStepUpEvent"];
                if (v40)
                {
                  int v41 = (void *)v40;
                  id v113 = v18;
                  uint64_t v42 = v31;
                  uint64_t v43 = [v119 objectForKeyedSubscript:@"eventIsAStepUpEvent"];
                  objc_opt_class();
                  char v44 = objc_opt_isKindOfClass();

                  if (v44)
                  {
                    BOOL v45 = [v119 objectForKeyedSubscript:@"eventIsAStepUpEvent"];
                    unsigned int v46 = [v45 BOOLValue];

                    int v47 = 1;
                  }
                  else
                  {
                    int v47 = 0;
                    unsigned int v46 = 0;
                  }
                  uint64_t v31 = v42;
                  uint64_t v18 = v113;
                }
                else
                {
                  int v47 = 0;
                  unsigned int v46 = 0;
                }
              }
              else
              {
                int v47 = 0;
                unsigned int v46 = 0;
                uint64_t v18 = &off_10031B0B8;
              }
              goto LABEL_23;
            }
          }
LABEL_22:
          int v47 = 0;
          unsigned int v46 = 0;
          BOOL v17 = &off_10031B0B8;
          uint64_t v18 = &off_10031B0B8;
LABEL_23:
          uint64_t v48 = [v119 objectForKeyedSubscript:@"manufacturer"];
          objc_opt_class();
          char v49 = objc_opt_isKindOfClass();

          if (v49)
          {
            CFStringRef v116 = [v119 objectForKeyedSubscript:@"manufacturer"];
          }
          else
          {
            CFStringRef v116 = @"Unknown";
          }
          id v50 = [v119 objectForKeyedSubscript:@"modelInfo"];
          objc_opt_class();
          char v51 = objc_opt_isKindOfClass();

          if (v51)
          {
            CFStringRef v117 = [v119 objectForKeyedSubscript:@"modelInfo"];
          }
          else
          {
            CFStringRef v117 = @"Unknown";
          }
          BOOL v16 = (__CFString *)v116;
          id v52 = [v119 objectForKeyedSubscript:@"keyType"];
          objc_opt_class();
          char v53 = objc_opt_isKindOfClass();

          int v118 = &off_10031B0B8;
          if (v53)
          {
            int v118 = [v119 objectForKeyedSubscript:@"keyType"];
          }
          if (v47)
          {
            if (qword_1003473C0)
            {
              [v15 timeIntervalSinceDate:];
              double v55 = v54;
            }
            else
            {
              double v55 = 0.0;
            }
            if (qword_1003473C8) {
              unsigned int v56 = v46;
            }
            else {
              unsigned int v56 = 0;
            }
            if (v56 == 1)
            {
              [(id)qword_1003473C8 timeIntervalSinceDate:qword_1003473C0];
              unint64_t v58 = (unint64_t)((v55 - v57) * 1000.0);
            }
            else
            {
              unint64_t v58 = 0;
            }
            BOOL v59 = objc_opt_new();
            [v59 setObject:v22 forKeyedSubscript:@"transactionUUID"];
            [v59 setObject:v17 forKeyedSubscript:@"transactionType"];
            [v59 setObject:v31 forKeyedSubscript:@"primaryAID"];
            [v59 setObject:v18 forKeyedSubscript:@"errorCode"];
            [v59 setObject:v116 forKeyedSubscript:@"manufacturer"];
            [v59 setObject:v117 forKeyedSubscript:@"modelInfo"];
            [v59 setObject:v118 forKeyedSubscript:@"keyType"];
            if (qword_1003473C0 || [v18 integerValue] != (id)5)
            {
              char v60 = +[NSNumber numberWithUnsignedInteger:(unint64_t)(v55 * 1000.0)];
              [v59 setObject:v60 forKeyedSubscript:@"totalDurationMsec"];

              uint64_t v61 = +[NSNumber numberWithUnsignedInteger:v58];
              [v59 setObject:v61 forKeyedSubscript:@"stepUpDurationMsec"];

              BOOL v62 = +[NFCALogger sharedCALogger];
              [v62 postCAEventFor:@"com.apple.sts.unifiedAccessTransactionEvent" eventInput:v59];

              unsigned __int16 v63 = (unsigned __int16)[v17 integerValue];
              id v64 = [v18 integerValue];
              self;
              BOOL v65 = v63 != 1;
              BOOL v66 = v64 != (id)64;
              BOOL v67 = (v63 & 0xFE00) == 0x400 || (v63 & 0xFF00) == 1536;
              int v68 = v67;
              BOOL v69 = v67 || v63 != 1;
              if (v67) {
                BOOL v66 = 1;
              }
              if (v66) {
                int v70 = &off_10031B0B8;
              }
              else {
                int v70 = &off_10031B0D0;
              }
              if ((v68 & (v64 == 0)) != 0) {
                int v71 = &off_10031B0D0;
              }
              else {
                int v71 = v70;
              }
              CFStringRef v120 = @"totalStepUpTxAttempted";
              CFStringRef v121 = @"totalSuccessfulStepUpTx";
              if (v68) {
                BOOL v72 = &off_10031B0D0;
              }
              else {
                BOOL v72 = &off_10031B0B8;
              }
              if (v68) {
                uint64_t v73 = v71;
              }
              else {
                uint64_t v73 = &off_10031B0B8;
              }
              long long v127 = v72;
              long long v128 = v73;
              if (v69) {
                BOOL v74 = &off_10031B0B8;
              }
              else {
                BOOL v74 = &off_10031B0D0;
              }
              if (v69) {
                id v75 = &off_10031B0B8;
              }
              else {
                id v75 = v71;
              }
              CFStringRef v122 = @"totalExpeditedFastTxAttempted";
              CFStringRef v123 = @"totalSuccessfulExpeditedFastTx";
              int v76 = v68 ^ 1;
              long long v129 = v74;
              long long v130 = v75;
              BOOL v77 = (v65 & v76) == 0;
              if ((v65 & v76) != 0) {
                int v78 = &off_10031B0D0;
              }
              else {
                int v78 = &off_10031B0B8;
              }
              CFStringRef v124 = @"totalExpeditedStandardTxAttempted";
              CFStringRef v125 = @"totalSuccessfulExpeditedStandardTx";
              if (v77) {
                __int16 v79 = &off_10031B0B8;
              }
              else {
                __int16 v79 = v71;
              }
              long long v131 = v78;
              id v132 = v79;
              uint64_t v80 = +[NSDictionary dictionaryWithObjects:&v127 forKeys:&v120 count:6];
              __int16 v81 = +[NFCALogger sharedCALogger];
              [v81 postCAEventFor:@"com.apple.sts.dailyUnifiedAccessStatistics" eventInput:v80];

              int v112 = v17;
              unsigned __int16 v82 = (unsigned __int16)[v17 integerValue];
              unsigned __int8 v110 = [v118 integerValue];
              uint64_t v114 = v18;
              id v83 = [v18 integerValue];
              uint64_t v111 = v31;
              id v84 = v31;
              self;
              BOOL v85 = v82 != 1;
              BOOL v86 = (v82 & 0xFE00) == 0x400 || (v82 & 0xFF00) == 1536;
              int v87 = v86;
              BOOL v88 = v86 || v82 != 1;
              BOOL v115 = v88;
              if (v86 || v83 != (id)64) {
                uint64_t v90 = &off_10031B0B8;
              }
              else {
                uint64_t v90 = &off_10031B0D0;
              }
              if ((v87 & (v83 == 0)) != 0) {
                id v91 = &off_10031B0D0;
              }
              else {
                id v91 = v90;
              }
              id v92 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283866 length:9];
              id v93 = [v92 NF_asHexString];
              unsigned int v94 = [v84 hasPrefix:v93];

              if (v87) {
                CFStringRef v95 = &off_10031B0D0;
              }
              else {
                CFStringRef v95 = &off_10031B0B8;
              }
              int v96 = v87 ^ 1;
              if (v87) {
                NSErrorUserInfoKey v97 = v91;
              }
              else {
                NSErrorUserInfoKey v97 = &off_10031B0B8;
              }
              if (v115) {
                id v98 = &off_10031B0B8;
              }
              else {
                id v98 = &off_10031B0D0;
              }
              if (v115) {
                id v99 = &off_10031B0B8;
              }
              else {
                id v99 = v91;
              }
              char v100 = v85 & v96;
              if ((v85 & v96) != 0) {
                __int16 v101 = &off_10031B0D0;
              }
              else {
                __int16 v101 = &off_10031B0B8;
              }
              if (v94)
              {
                CFStringRef v120 = @"aliroStepUpTxAttempted";
                CFStringRef v121 = @"aliroSuccessfulStepUpTx";
                long long v127 = v95;
                long long v128 = v97;
                CFStringRef v122 = @"aliroFastTxAttempted";
                CFStringRef v123 = @"aliroSuccessfulFastTx";
                long long v129 = v98;
                long long v130 = v99;
                CFStringRef v124 = @"aliroStandardTxAttempted";
                CFStringRef v125 = @"aliroSuccessfulStandardTx";
                if (v100) {
                  id v102 = v91;
                }
                else {
                  id v102 = &off_10031B0B8;
                }
                long long v131 = v101;
                id v132 = v102;
                CFStringRef v126 = @"aliroAuxiliaryReaderKeyTxAttempted";
                if ((v110 & 2) != 0) {
                  id v103 = &off_10031B0D0;
                }
                else {
                  id v103 = &off_10031B0B8;
                }
                id v133 = v103;
                uint64_t v104 = 7;
              }
              else
              {
                CFStringRef v120 = @"uaStepUpTxAttempted";
                CFStringRef v121 = @"uaSuccessfulStepUpTx";
                long long v127 = v95;
                long long v128 = v97;
                CFStringRef v122 = @"uaFastTxAttempted";
                CFStringRef v123 = @"uaSuccessfulFastTx";
                long long v129 = v98;
                long long v130 = v99;
                CFStringRef v124 = @"uaStandardTxAttempted";
                CFStringRef v125 = @"uaSuccessfulStandardTx";
                if (v100) {
                  id v105 = v91;
                }
                else {
                  id v105 = &off_10031B0B8;
                }
                long long v131 = v101;
                id v132 = v105;
                uint64_t v104 = 6;
              }
              id v106 = +[NSDictionary dictionaryWithObjects:&v127 forKeys:&v120 count:v104];
              __int16 v107 = +[NFCALogger sharedCALogger];
              [v107 postCAEventFor:@"com.apple.sts.dailyHomeHydraTransactionStatistics" eventInput:v106];

              uint64_t v31 = v111;
              BOOL v17 = v112;
              uint64_t v18 = v114;
              BOOL v16 = (__CFString *)v116;
            }
          }
          uint64_t v108 = (void *)qword_1003473C0;
          qword_1003473C0 = 0;

          NSErrorUserInfoKey v109 = (void *)qword_1003473C8;
          qword_1003473C8 = 0;

          int v20 = (__CFString *)v117;
          int v19 = v118;
          goto LABEL_127;
        }
      }
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v31 = 0;
    goto LABEL_22;
  }
  uint64_t v4 = [v119 objectForKeyedSubscript:@"startEventStartTime"];
  if (v4)
  {
    id v5 = (void *)v4;
    id v6 = [v119 objectForKeyedSubscript:@"startEventStartTime"];
    objc_opt_class();
    char v7 = objc_opt_isKindOfClass();

    if (v7)
    {
      uint64_t v8 = [v119 objectForKeyedSubscript:@"startEventStartTime"];
      uint64_t v9 = (void *)qword_1003473C0;
      qword_1003473C0 = v8;
    }
  }
  uint64_t v10 = [v119 objectForKeyedSubscript:@"stepUpEventStartTime"];
  if (!v10
    || (uint64_t v11 = (void *)v10,
        [v119 objectForKeyedSubscript:@"stepUpEventStartTime"],
        BOOL v12 = objc_claimAutoreleasedReturnValue(),
        objc_opt_class(),
        char v13 = objc_opt_isKindOfClass(),
        v12,
        v11,
        (v13 & 1) == 0))
  {
    BOOL v16 = @"Unknown";
    BOOL v17 = &off_10031B0B8;
    uint64_t v18 = &off_10031B0B8;
    int v19 = &off_10031B0B8;
    int v20 = @"Unknown";
    goto LABEL_128;
  }
  uint64_t v14 = [v119 objectForKeyedSubscript:@"stepUpEventStartTime"];
  int v15 = (void *)qword_1003473C8;
  BOOL v16 = @"Unknown";
  qword_1003473C8 = v14;
  BOOL v17 = &off_10031B0B8;
  uint64_t v18 = &off_10031B0B8;
  int v19 = &off_10031B0B8;
  int v20 = @"Unknown";
LABEL_127:

LABEL_128:
}

uint64_t sub_1000B5C98(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = [v4 objectForKeyedSubscript:@"appletIdentifier"];
  char v7 = [v5 objectForKeyedSubscript:@"readerIdentifier"];
  unint64_t v58 = [v7 uppercaseString];

  id v8 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283866 length:9];
  uint64_t v9 = [v8 NF_asHexString];
  unsigned int v10 = [v6 hasPrefix:v9];

  if (v10)
  {
    uint64_t v11 = [v4 objectForKeyedSubscript:@"ECP2Info"];
    objc_opt_class();
    isKindOfClass Class = objc_opt_isKindOfClass();

    double v55 = v4;
    unsigned int v56 = v6;
    id v57 = v5;
    if (isKindOfClass)
    {
      char v13 = [v4 objectForKeyedSubscript:@"ECP2Info"];
      uint64_t v14 = v13;
      if (v13)
      {
        int v15 = [v13 objectForKeyedSubscript:@"TCIs"];
      }
      else
      {
        int v15 = 0;
      }
      BOOL v17 = [v14 objectForKeyedSubscript:@"associatedReaderIdentifiers"];
      objc_opt_class();
      char v18 = objc_opt_isKindOfClass();

      if (v18)
      {
        [v14 objectForKeyedSubscript:@"associatedReaderIdentifiers"];
        long long v67 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        id v19 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v16 = (uint64_t)[v19 countByEnumeratingWithState:&v67 objects:v73 count:16];
        if (v16)
        {
          double v54 = v15;
          uint64_t v20 = *(void *)v68;
          while (2)
          {
            for (uint64_t i = 0; i != v16; ++i)
            {
              if (*(void *)v68 != v20) {
                objc_enumerationMutation(v19);
              }
              uint64_t v22 = *(void **)(*((void *)&v67 + 1) + 8 * i);
              if (v22)
              {
                uint64_t v23 = [v22 objectForKeyedSubscript:@"readerIdentifier"];
                uint64_t v24 = [v23 NF_asHexString];

                if (v24)
                {
                  BOOL v25 = [v24 uppercaseString];
                  unsigned __int8 v26 = [v58 hasPrefix:v25];

                  if (v26)
                  {
                    uint64_t v16 = 2;
                    int v27 = 1;
                    goto LABEL_22;
                  }
                }
              }
            }
            uint64_t v16 = (uint64_t)[v19 countByEnumeratingWithState:&v67 objects:v73 count:16];
            if (v16) {
              continue;
            }
            break;
          }
          int v27 = 0;
LABEL_22:
          int v15 = v54;
        }
        else
        {
          int v27 = 0;
        }
      }
      else
      {
        int v27 = 0;
        uint64_t v16 = 0;
      }

      BOOL v53 = v27 != 0;
    }
    else
    {
      int v15 = 0;
      BOOL v53 = 0;
      uint64_t v16 = 0;
    }
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v28 = v15;
    id v29 = [v28 countByEnumeratingWithState:&v63 objects:v72 count:16];
    if (v29)
    {
      id v30 = v29;
      uint64_t v31 = *(void *)v64;
      do
      {
        for (unsigned int j = 0; j != v30; unsigned int j = (char *)j + 1)
        {
          if (*(void *)v64 != v31) {
            objc_enumerationMutation(v28);
          }
          unsigned int v33 = *(void **)(*((void *)&v63 + 1) + 8 * (void)j);
          id v34 = [objc_alloc((Class)NSData) initWithBytes:&unk_10028386F length:3];
          LODWORD(v33) = [v33 isEqual:v34];

          if (v33) {
            int v35 = 0x10000;
          }
          else {
            int v35 = 0x20000;
          }
          uint64_t v16 = v35 | v16;
        }
        id v30 = [v28 countByEnumeratingWithState:&v63 objects:v72 count:16];
      }
      while (v30);
    }

    id v4 = v55;
    uint64_t v36 = [v55 objectForKeyedSubscript:@"readerIdentifier"];
    objc_opt_class();
    char v37 = objc_opt_isKindOfClass();

    if (v37)
    {
      id v38 = [v55 objectForKeyedSubscript:@"readerIdentifier"];
      id v39 = [v38 uppercaseString];

      uint64_t v16 = v16 | [v58 hasPrefix:v39];
    }
    else
    {
      id v6 = v56;
      id v5 = v57;
      if (v53) {
        goto LABEL_56;
      }
      uint64_t v40 = [v55 objectForKeyedSubscript:@"associatedReaders"];
      objc_opt_class();
      char v41 = objc_opt_isKindOfClass();

      if ((v41 & 1) == 0) {
        goto LABEL_56;
      }
      [v55 objectForKeyedSubscript:@"associatedReaders"];
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      id v39 = (id)objc_claimAutoreleasedReturnValue();
      id v42 = [v39 countByEnumeratingWithState:&v59 objects:v71 count:16];
      if (v42)
      {
        id v43 = v42;
        uint64_t v44 = *(void *)v60;
        BOOL v45 = v58;
        while (2)
        {
          for (k = 0; k != v43; k = (char *)k + 1)
          {
            if (*(void *)v60 != v44) {
              objc_enumerationMutation(v39);
            }
            int v47 = *(void **)(*((void *)&v59 + 1) + 8 * (void)k);
            if (v47)
            {
              uint64_t v48 = [v47 objectForKeyedSubscript:@"readerIdentifier"];
              char v49 = [v48 NF_asHexString];

              if (v49)
              {
                id v50 = [v49 uppercaseString];
                unsigned int v51 = [v45 hasPrefix:v50];

                if (v51)
                {
                  uint64_t v16 = v16 | 2;

                  goto LABEL_53;
                }

                BOOL v45 = v58;
              }
            }
          }
          id v43 = [v39 countByEnumeratingWithState:&v59 objects:v71 count:16];
          if (v43) {
            continue;
          }
          break;
        }
LABEL_53:
        id v4 = v55;
      }
    }
    id v6 = v56;
    id v5 = v57;

LABEL_56:
    goto LABEL_57;
  }
  uint64_t v16 = 0;
LABEL_57:

  return v16;
}

void sub_1000B6280(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NFCALogger sharedCALogger];
  [v3 postCAEventFor:@"com.apple.sts.dailyUnifiedAccessDeviceStatistics" eventInput:v2];
}

void sub_1000B62F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NFCALogger sharedCALogger];
  [v3 postCAEventFor:@"com.apple.sts.dailyHomeHydraDeviceStatistics" eventInput:v2];
}

void sub_1000B6368(uint64_t a1, void *a2)
{
  id v5 = a2;
  self;
  id v2 = v5;
  if (v5)
  {
    id v3 = [v5 objectForKeyedSubscript:@"appletIdentifier"];
    if (v3)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if (sub_1000B471C((uint64_t)NFUnifiedAccessTransactionCALogger, v3))
        {
          id v4 = [v5 objectForKeyedSubscript:@"EventType"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0
            && [v4 isEqualToString:@"ActivityTimeout"])
          {
            sub_1000B4830((uint64_t)NFUnifiedAccessTransactionCALogger, v5, 65278, 5);
          }
        }
      }
    }

    id v2 = v5;
  }
}

id sub_1000B6908(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[18];
  if (v3)
  {
    (*(void (**)(void))(v3 + 16))(v2[18]);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 144);
    *(void *)(v4 + 144) = 0;

    id v2 = *(void **)(a1 + 32);
  }

  return [v2 endSession:&stru_100303B40];
}

void sub_1000B6A54(uint64_t a1)
{
  if (a1)
  {
    __int16 v10 = 3840;
    char v9 = 32;
    __int16 v8 = -256;
    __int16 v7 = -256;
    id v2 = objc_opt_new();
    char v6 = 4;
    [v2 appendBytes:&v6 length:1];
    char v6 = 6;
    [v2 appendBytes:&v6 length:1];
    uint64_t v3 = +[NSData NF_dataWithHexString:@"E104"];
    [v2 appendData:v3];
    __int16 v5 = bswap32(*(unsigned __int16 *)(a1 + 30)) >> 16;
    [v2 appendBytes:&v5 length:2];
    char v6 = 0;
    [v2 appendBytes:&v6 length:1];
    char v6 = *(unsigned char *)(a1 + 29) - 1;
    [v2 appendBytes:&v6 length:1];
    uint64_t v4 = objc_opt_new();
    [v4 appendBytes:&v10 length:2];
    [v4 appendBytes:&v9 length:1];
    [v4 appendBytes:&v8 length:2];
    [v4 appendBytes:&v7 length:2];
    [v4 appendData:v2];
    [*(id *)(a1 + 16) setObject:v4 forKey:@"E103"];
  }
}

void sub_1000B7A24(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      __int16 v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("setNdefData:");
      uint64_t v8 = 45;
      if (isMetaClass) {
        uint64_t v8 = 43;
      }
      v5(6, "%c[%{public}s %{public}s]:%i %{public}@", v8, ClassName, Name, 354, v3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    char v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = object_getClass((id)a1);
      if (class_isMetaClass(v10)) {
        int v11 = 43;
      }
      else {
        int v11 = 45;
      }
      *(_DWORD *)int buf = 67110146;
      int v28 = v11;
      __int16 v29 = 2082;
      id v30 = object_getClassName((id)a1);
      __int16 v31 = 2082;
      uint64_t v32 = sel_getName("setNdefData:");
      __int16 v33 = 1024;
      int v34 = 354;
      __int16 v35 = 2114;
      id v36 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    if ((unint64_t)[v3 length] <= 0x2000)
    {
      if (v3)
      {
        buf[0] = (unsigned __int16)[v3 length] >> 8;
        buf[1] = [v3 length];
        id v23 = [objc_alloc((Class)NSMutableData) initWithBytes:buf length:2];
        [v23 appendData:v3];
        [*(id *)(a1 + 16) setObject:v23 forKey:@"E104"];
        *(_WORD *)(a1 + 32) = (unsigned __int16)[v3 length];
      }
      else
      {
        [*(id *)(a1 + 16) removeObjectForKey:@"E104"];
      }
      sub_1000B6A54(a1);
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v12 = NFLogGetLogger();
      if (v12)
      {
        char v13 = (void (*)(uint64_t, const char *, ...))v12;
        uint64_t v14 = object_getClass((id)a1);
        BOOL v15 = class_isMetaClass(v14);
        uint64_t v16 = object_getClassName((id)a1);
        unsigned __int8 v26 = sel_getName("setNdefData:");
        uint64_t v17 = 45;
        if (v15) {
          uint64_t v17 = 43;
        }
        v13(3, "%c[%{public}s %{public}s]:%i Invalid tag size", v17, v16, v26, 357);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      char v18 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = object_getClass((id)a1);
        if (class_isMetaClass(v19)) {
          int v20 = 43;
        }
        else {
          int v20 = 45;
        }
        uint64_t v21 = object_getClassName((id)a1);
        uint64_t v22 = sel_getName("setNdefData:");
        *(_DWORD *)int buf = 67109890;
        int v28 = v20;
        __int16 v29 = 2082;
        id v30 = v21;
        __int16 v31 = 2082;
        uint64_t v32 = v22;
        __int16 v33 = 1024;
        int v34 = 357;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid tag size", buf, 0x22u);
      }
    }
  }
}

_WORD *sub_1000B7D78(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = [a1[2] objectForKey:@"E104"];
    id v3 = v2;
    if (v1[16])
    {
      uint64_t v4 = [v2 subdataWithRange:2];
    }
    else
    {
      uint64_t v4 = objc_opt_new();
    }
    uint64_t v1 = (_WORD *)v4;
  }

  return v1;
}

NFTCCChecker *sub_1000B7E3C()
{
  unsigned __int8 v0 = self;
  if (sub_1000B889C() && sub_1000B896C())
  {
    uint64_t v1 = [NFTCCChecker alloc];
    id v2 = (__CFString **)sub_1000B896C();
    if (!v2)
    {
      uint64_t v17 = +[NSAssertionHandler currentHandler];
      char v18 = +[NSString stringWithUTF8String:"CFStringRef getkTCCServiceContactlessAccess(void)"];
      [v17 handleFailureInFunction:v18 file:@"NFTCCChecker.m" lineNumber:21 description:@"%s", dlerror()];

      __break(1u);
    }
    id v3 = *v2;
    if (v1)
    {
      *(void *)int v20 = v1;
      *(void *)&v20[8] = NFTCCChecker;
      uint64_t v4 = (NFTCCChecker *)[v20 init];
      uint64_t v1 = v4;
      if (v4)
      {
        v4->_tccService = v3;
        uint64_t v5 = dispatch_get_global_queue(25, 0);
        workQueue = v1->_workQueue;
        v1->_workQueue = (OS_dispatch_queue *)v5;
      }
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v8 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v0);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v0);
      Name = sel_getName("defaultServiceChecker");
      uint64_t v12 = 45;
      if (isMetaClass) {
        uint64_t v12 = 43;
      }
      v8(3, "%c[%{public}s %{public}s]:%i Service not available", v12, ClassName, Name, 37);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    char v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = object_getClass(v0);
      if (class_isMetaClass(v14)) {
        int v15 = 43;
      }
      else {
        int v15 = 45;
      }
      *(_DWORD *)int v20 = 67109890;
      *(_DWORD *)&v20[4] = v15;
      *(_WORD *)&v20[8] = 2082;
      *(void *)&v20[10] = object_getClassName(v0);
      __int16 v21 = 2082;
      uint64_t v22 = sel_getName("defaultServiceChecker");
      __int16 v23 = 1024;
      int v24 = 37;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Service not available", v20, 0x22u);
    }

    uint64_t v1 = 0;
  }

  return v1;
}

void sub_1000B80BC(uint64_t a1, char a2, long long *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a1)
  {
    char v9 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B8180;
    block[3] = &unk_100303B68;
    void block[4] = a1;
    id v12 = v7;
    char v15 = a2;
    long long v10 = a3[1];
    long long v13 = *a3;
    long long v14 = v10;
    dispatch_async(v9, block);
  }
}

uint64_t sub_1000B8180(uint64_t a1)
{
  id v2 = NFSharedSignpostLog();
  if (os_signpost_enabled(v2))
  {
    *(_WORD *)int buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "validateWithUserPrompt", (const char *)&unk_100286819, buf, 2u);
  }

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v5 = *(unsigned __int8 *)(a1 + 80);
  long long v53 = *(_OWORD *)(a1 + 48);
  long long v54 = *(_OWORD *)(a1 + 64);
  if (v4)
  {
    if (NFIsInternalBuild())
    {
      char v6 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.stockholm"];
      if ([v6 BOOLForKey:@"skipTCC"])
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          uint64_t v8 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass((id)v4);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName((id)v4);
          Name = sel_getName("_validateWithUserPrompt:auditToken:");
          uint64_t v12 = 45;
          if (isMetaClass) {
            uint64_t v12 = 43;
          }
          v8(6, "%c[%{public}s %{public}s]:%i Skipping TCC check", v12, ClassName, Name, 62);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        long long v13 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          long long v14 = object_getClass((id)v4);
          if (class_isMetaClass(v14)) {
            int v15 = 43;
          }
          else {
            int v15 = 45;
          }
          uint64_t v16 = object_getClassName((id)v4);
          uint64_t v17 = sel_getName("_validateWithUserPrompt:auditToken:");
          *(_DWORD *)int buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v16;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v17;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = 62;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Skipping TCC check", buf, 0x22u);
        }

        uint64_t v4 = 1;
        goto LABEL_51;
      }
    }
    if (!sub_1000B889C()
      || !sub_1000B8BD0()
      || !sub_1000B889C()
      || !sub_1000B8D10()
      || !sub_1000B889C()
      || !sub_1000B8E50()
      || !sub_1000B889C()
      || !sub_1000B8F90())
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v34 = NFLogGetLogger();
      if (v34)
      {
        __int16 v35 = (void (*)(uint64_t, const char *, ...))v34;
        id v36 = object_getClass((id)v4);
        BOOL v37 = class_isMetaClass(v36);
        id v38 = object_getClassName((id)v4);
        id v52 = sel_getName("_validateWithUserPrompt:auditToken:");
        uint64_t v39 = 45;
        if (v37) {
          uint64_t v39 = 43;
        }
        v35(3, "%c[%{public}s %{public}s]:%i Missing library; default to false", v39, v38, v52, 71);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      char v6 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      uint64_t v40 = object_getClass((id)v4);
      if (class_isMetaClass(v40)) {
        int v41 = 43;
      }
      else {
        int v41 = 45;
      }
      id v42 = object_getClassName((id)v4);
      id v43 = sel_getName("_validateWithUserPrompt:auditToken:");
      *(_DWORD *)int buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v41;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v42;
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v43;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = 71;
      __int16 v33 = "%c[%{public}s %{public}s]:%i Missing library; default to false";
LABEL_49:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v33, buf, 0x22u);
LABEL_50:
      uint64_t v4 = 2;
LABEL_51:

      return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
    }
    uint64_t v18 = *(void *)(v4 + 16);
    id v19 = (uint64_t (*)(uint64_t, unsigned char *, void))sub_1000B8BD0();
    if (!v19)
    {
      uint64_t v48 = +[NSAssertionHandler currentHandler];
      char v49 = +[NSString stringWithUTF8String:"TCCAccessPreflightResult NFTCCAccessPreflightWithAuditToken(CFStringRef, audit_token_t, CFDictionaryRef)"];
      [v48 handleFailureInFunction:v49 file:@"NFTCCChecker.m" lineNumber:17 description:@"%s", dlerror()];
      goto LABEL_66;
    }
    *(_OWORD *)int buf = v53;
    *(_OWORD *)&buf[16] = v54;
    int v20 = v19(v18, buf, 0);
    switch(v20)
    {
      case 0:
        uint64_t v4 = 1;
        return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
      case 2:
        if (!v5)
        {
          uint64_t v4 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
        }
        break;
      case 1:
        uint64_t v21 = *(void *)(v4 + 16);
        uint64_t v22 = (unsigned int (*)(uint64_t))sub_1000B8E50();
        if (v22)
        {
          if (v22(v21) != 1)
          {
            uint64_t v4 = 2;
            return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v23 = NFLogGetLogger();
          if (v23)
          {
            int v24 = (void (*)(uint64_t, const char *, ...))v23;
            BOOL v25 = object_getClass((id)v4);
            BOOL v26 = class_isMetaClass(v25);
            int v27 = object_getClassName((id)v4);
            unsigned int v51 = sel_getName("_validateWithUserPrompt:auditToken:");
            uint64_t v28 = 45;
            if (v26) {
              uint64_t v28 = 43;
            }
            v24(4, "%c[%{public}s %{public}s]:%i System restriction is in place", v28, v27, v51, 83);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          char v6 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            goto LABEL_50;
          }
          __int16 v29 = object_getClass((id)v4);
          if (class_isMetaClass(v29)) {
            int v30 = 43;
          }
          else {
            int v30 = 45;
          }
          __int16 v31 = object_getClassName((id)v4);
          uint64_t v32 = sel_getName("_validateWithUserPrompt:auditToken:");
          *(_DWORD *)int buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v30;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v31;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v32;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = 83;
          __int16 v33 = "%c[%{public}s %{public}s]:%i System restriction is in place";
          goto LABEL_49;
        }
        uint64_t v48 = +[NSAssertionHandler currentHandler];
        char v49 = +[NSString stringWithUTF8String:"Boolean NFTCCAccessRestricted(CFStringRef)"];
        [v48 handleFailureInFunction:v49 file:@"NFTCCChecker.m" lineNumber:19 description:@"%s", dlerror()];
LABEL_66:

        __break(1u);
        break;
    }
    BOOL v45 = (uint64_t *)sub_1000B8F90();
    if (v45)
    {
      uint64_t v55 = *v45;
      unsigned int v56 = &__kCFBooleanTrue;
      char v6 = +[NSDictionary dictionaryWithObjects:&v56 forKeys:&v55 count:1];
      uint64_t v46 = *(void *)(v4 + 16);
      int v47 = (unsigned int (*)(uint64_t, unsigned char *, NSObject *))sub_1000B8D10();
      if (v47)
      {
        *(_OWORD *)int buf = v53;
        *(_OWORD *)&buf[16] = v54;
        if (v47(v46, buf, v6)) {
          uint64_t v4 = 1;
        }
        else {
          uint64_t v4 = 2;
        }
        goto LABEL_51;
      }
      uint64_t v48 = +[NSAssertionHandler currentHandler];
      char v49 = +[NSString stringWithUTF8String:"Boolean NFTCCAccessCheckAuditToken(CFStringRef, audit_token_t, CFDictionaryRef)"];
      [v48 handleFailureInFunction:v49 file:@"NFTCCChecker.m" lineNumber:18 description:@"%s", dlerror()];
    }
    else
    {
      uint64_t v48 = +[NSAssertionHandler currentHandler];
      char v49 = +[NSString stringWithUTF8String:"CFStringRef getkTCCAccessCheckOptionPrompt(void)"];
      [v48 handleFailureInFunction:v49 file:@"NFTCCChecker.m" lineNumber:20 description:@"%s", dlerror()];
    }
    goto LABEL_66;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, v4);
}

uint64_t sub_1000B889C()
{
  if (!qword_1003473D0) {
    qword_1003473D0 = _sl_dlopen();
  }
  return qword_1003473D0;
}

uint64_t sub_1000B896C()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1003473D8;
  uint64_t v6 = qword_1003473D8;
  if (!qword_1003473D8)
  {
    uint64_t v1 = sub_1000B8B20();
    v4[3] = (uint64_t)dlsym(v1, "kTCCServiceContactlessAccess");
    qword_1003473D8 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B8A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8A5C()
{
  uint64_t result = _sl_dlopen();
  qword_1003473D0 = result;
  return result;
}

void *sub_1000B8AD0(uint64_t a1)
{
  id v2 = sub_1000B8B20();
  uint64_t result = dlsym(v2, "kTCCServiceContactlessAccess");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1003473D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_1000B8B20()
{
  uint64_t v0 = sub_1000B889C();
  if (v0) {
    return (void *)v0;
  }
  uint64_t v1 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *TCCLibrary(void)"];
  [v1 handleFailureInFunction:v3 file:@"NFTCCChecker.m" lineNumber:16 description:@"%s"];

  __break(1u);
  free(v4);
  return v1;
}

uint64_t sub_1000B8BD0()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1003473E0;
  uint64_t v6 = qword_1003473E0;
  if (!qword_1003473E0)
  {
    uint64_t v1 = sub_1000B8B20();
    v4[3] = (uint64_t)dlsym(v1, "TCCAccessPreflightWithAuditToken");
    qword_1003473E0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B8CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000B8CC0(uint64_t a1)
{
  id v2 = sub_1000B8B20();
  uint64_t result = dlsym(v2, "TCCAccessPreflightWithAuditToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1003473E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000B8D10()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1003473E8;
  uint64_t v6 = qword_1003473E8;
  if (!qword_1003473E8)
  {
    uint64_t v1 = sub_1000B8B20();
    v4[3] = (uint64_t)dlsym(v1, "TCCAccessCheckAuditToken");
    qword_1003473E8 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B8DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000B8E00(uint64_t a1)
{
  id v2 = sub_1000B8B20();
  uint64_t result = dlsym(v2, "TCCAccessCheckAuditToken");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1003473E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000B8E50()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1003473F0;
  uint64_t v6 = qword_1003473F0;
  if (!qword_1003473F0)
  {
    uint64_t v1 = sub_1000B8B20();
    v4[3] = (uint64_t)dlsym(v1, "TCCAccessRestricted");
    qword_1003473F0 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B8F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000B8F40(uint64_t a1)
{
  id v2 = sub_1000B8B20();
  uint64_t result = dlsym(v2, "TCCAccessRestricted");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1003473F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000B8F90()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = qword_1003473F8;
  uint64_t v6 = qword_1003473F8;
  if (!qword_1003473F8)
  {
    uint64_t v1 = sub_1000B8B20();
    v4[3] = (uint64_t)dlsym(v1, "kTCCAccessCheckOptionPrompt");
    qword_1003473F8 = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1000B9068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1000B9080(uint64_t a1)
{
  id v2 = sub_1000B8B20();
  uint64_t result = dlsym(v2, "kTCCAccessCheckOptionPrompt");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1003473F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t start()
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    uintptr_t v2 = dword_100283880[i];
    signal(dword_100283880[i], (void (__cdecl *)(int))1);
    dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v2, 0, 0);
    uint64_t v4 = &qword_100347400[i];
    uint64_t v5 = (void *)v4[1];
    v4[1] = (uint64_t)v3;

    dispatch_set_context((dispatch_object_t)v4[1], (void *)v2);
    dispatch_source_set_event_handler_f((dispatch_source_t)v4[1], (dispatch_function_t)sub_1000B93CC);
    dispatch_resume((dispatch_object_t)v4[1]);
  }
  +[NSError _setFileNameLocalizationEnabled:0];
  NFSetThreadPriority();
  id v6 = objc_alloc_init((Class)NFMemoryObserver);
  [v6 start];
  id v7 = +[_NFHardwareManager sharedHardwareManager];
  uint64_t v8 = +[NFSecureXPCEventPublisherManager sharedManager];
  char v9 = [v7 xpcEventNotificationQueue];
  [v8 startPublisherWithXPCQueue:0 eventSendQueue:v9];

  if (NFProductIsPhone())
  {
    long long v10 = [NFWalletPresentationService alloc];
    int v11 = [v8 wallet];
    uint64_t v12 = sub_1000540F0(v10, v11);
    long long v13 = (void *)qword_100347400[0];
    qword_100347400[0] = (uint64_t)v12;

    sub_10005416C((void *)qword_100347400[0]);
    sub_10012B2A8((uint64_t)v7, (void *)qword_100347400[0]);
  }
  [v7 start];
  long long v14 = +[_NFACHardwareManager sharedHardwareManager];
  [v14 start];

  do
  {
    CFRunLoopGetCurrent();
    int v16 = CFRunLoopRunSpecific();
  }
  while ((v16 - 3) < 0xFFFFFFFE);
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(6, "%s:%i Exiting", "main", 182);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v18 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136446466;
    uint64_t v21 = "main";
    __int16 v22 = 1024;
    int v23 = 182;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Exiting", buf, 0x12u);
  }

  return 0;
}

void sub_1000B93CC(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger) {
    Logger(5, "%s:%i Received signal: %lu", "signalHandler", 100, a1);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  dispatch_source_t v3 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136446722;
    long long v10 = "signalHandler";
    __int16 v11 = 1024;
    int v12 = 100;
    __int16 v13 = 2048;
    uint64_t v14 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Received signal: %lu", buf, 0x1Cu);
  }

  uint64_t v4 = +[_NFHardwareManager sharedHardwareManager];
  [v4 stop];

  sub_1000549D8((void *)qword_100347400);
  uint64_t v5 = +[NFSecureXPCEventPublisherManager sharedManager];
  [v5 invalidate];

  Main = CFRunLoopGetMain();
  CFRunLoopStop(Main);
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7) {
    v7(4, "%s:%i Forcing exit in 500ms", "signalHandler", 112);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136446466;
    long long v10 = "signalHandler";
    __int16 v11 = 1024;
    int v12 = 112;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Forcing exit in 500ms", buf, 0x12u);
  }

  usleep(0x7A120u);
  _exit(0);
}

id *sub_1000B9C04(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)NFTouchSensorMonitor;
    uint64_t v8 = (id *)[super init];
    a1 = v8;
    if (v8)
    {
      objc_storeWeak(v8 + 2, v7);
      id v9 = [objc_alloc((Class)HIDEventSystemClient) initWithType:1];
      id v10 = a1[3];
      a1[3] = v9;

      [a1[3] setDispatchQueue:v6];
      objc_storeStrong(a1 + 5, a2);
      objc_initWeak(&location, a1);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_100007BD8;
      v18[3] = &unk_100303BA8;
      objc_copyWeak(&v19, &location);
      __int16 v11 = objc_retainBlock(v18);
      id v12 = a1[4];
      a1[4] = v11;

      [a1[3] setEventHandler:a1[4]];
      [a1[3] setMatching:&off_100322CE0];
      id v13 = a1[3];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100007D24;
      v15[3] = &unk_100303BD0;
      objc_copyWeak(v17, &location);
      v17[1] = "initWithQueue:delegate:";
      id v16 = v6;
      [v13 setServiceNotificationHandler:v15];

      objc_destroyWeak(v17);
      objc_destroyWeak(&v19);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_1000B9DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B9E7C(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    if (!*((unsigned char *)v1 + 9))
    {
      id v2 = *((id *)v1 + 3);
      [v2 activate];

      *((unsigned char *)v1 + 9) = 1;
      [*((id *)v1 + 3) services];
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      id v4 = [v3 countByEnumeratingWithState:&v24 objects:v38 count:16];
      if (v4)
      {
        uint64_t v5 = *(void *)v25;
        while (2)
        {
          for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v25 != v5) {
              objc_enumerationMutation(v3);
            }
            id v7 = sub_10000570C(*(void **)(*((void *)&v24 + 1) + 8 * i));
            if (v7)
            {
              *((unsigned char *)v1 + _Block_object_dispose(&STACK[0x2B0], 8) = 1;
              BOOL v8 = sub_10000409C(v1, v7);
              id v9 = *((void *)v1 + 5);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_1000BA1DC;
              block[3] = &unk_100301BC8;
              void block[4] = v1;
              BOOL v23 = v8;
              dispatch_async(v9, block);

              goto LABEL_13;
            }
          }
          id v4 = [v3 countByEnumeratingWithState:&v24 objects:v38 count:16];
          if (v4) {
            continue;
          }
          break;
        }
      }
LABEL_13:

      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        Class Class = object_getClass(v1);
        if (class_isMetaClass(Class)) {
          uint64_t v12 = 43;
        }
        else {
          uint64_t v12 = 45;
        }
        ClassName = object_getClassName(v1);
        Name = sel_getName("start");
        if (*((unsigned char *)v1 + 8)) {
          CFStringRef v15 = &stru_100309C40;
        }
        else {
          CFStringRef v15 = @"has not ";
        }
        Logger(6, "%c[%{public}s %{public}s]:%i Touch service %{public}@started", v12, ClassName, Name, 132, v15);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = object_getClass(v1);
        if (class_isMetaClass(v17)) {
          int v18 = 43;
        }
        else {
          int v18 = 45;
        }
        id v19 = object_getClassName(v1);
        int v20 = sel_getName("start");
        if (*((unsigned char *)v1 + 8)) {
          CFStringRef v21 = &stru_100309C40;
        }
        else {
          CFStringRef v21 = @"has not ";
        }
        *(_DWORD *)int buf = 67110146;
        int v29 = v18;
        __int16 v30 = 2082;
        __int16 v31 = v19;
        __int16 v32 = 2082;
        __int16 v33 = v20;
        __int16 v34 = 1024;
        int v35 = 132;
        __int16 v36 = 2114;
        CFStringRef v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Touch service %{public}@started", buf, 0x2Cu);
      }
    }
    objc_sync_exit(v1);
  }
}

void sub_1000BA19C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000BA1DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained touchSystemReady:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000BA23C(void *a1)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    id v1 = obj[3];
    [v1 cancel];

    *((unsigned char *)obj + 9) = 0;
    objc_sync_exit(obj);
  }
}

void sub_1000BA2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_1000BA58C(void *a1, void *a2)
{
  uint64_t v4 = objc_opt_new();
  uint64_t v5 = (void *)v4;
  if (!a2)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("inputTags:");
      uint64_t v18 = 45;
      if (isMetaClass) {
        uint64_t v18 = 43;
      }
      v14(3, "%c[%{public}s %{public}s]:%i Expecting error", v18, ClassName, Name, 186);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = object_getClass(a1);
      if (class_isMetaClass(v20)) {
        int v21 = 43;
      }
      else {
        int v21 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v41 = v21;
      __int16 v42 = 2082;
      id v43 = object_getClassName(a1);
      __int16 v44 = 2082;
      BOOL v45 = sel_getName("inputTags:");
      __int16 v46 = 1024;
      int v47 = 186;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
    }

    goto LABEL_30;
  }
  if (!v4)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v22 = NFLogGetLogger();
    if (v22)
    {
      BOOL v23 = (void (*)(uint64_t, const char *, ...))v22;
      long long v24 = object_getClass(a1);
      BOOL v25 = class_isMetaClass(v24);
      long long v26 = object_getClassName(a1);
      CFStringRef v37 = sel_getName("inputTags:");
      uint64_t v27 = 45;
      if (v25) {
        uint64_t v27 = 43;
      }
      v23(3, "%c[%{public}s %{public}s]:%i Could not create array", v27, v26, v37, 191);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v28 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      int v29 = object_getClass(a1);
      if (class_isMetaClass(v29)) {
        int v30 = 43;
      }
      else {
        int v30 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v41 = v30;
      __int16 v42 = 2082;
      id v43 = object_getClassName(a1);
      __int16 v44 = 2082;
      BOOL v45 = sel_getName("inputTags:");
      __int16 v46 = 1024;
      int v47 = 191;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create array", buf, 0x22u);
    }

    id v31 = objc_alloc((Class)NSError);
    __int16 v32 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    __int16 v33 = +[NSString stringWithUTF8String:"No resources"];
    uint64_t v39 = v33;
    __int16 v34 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    *a2 = [v31 initWithDomain:v32 code:34 userInfo:v34];

LABEL_30:
    id v12 = 0;
    goto LABEL_31;
  }
  id v6 = +[NFTLV TLVWithTag:24352 value:a1[1]];
  [v5 addObject:v6];

  id v7 = +[NFTLV TLVWithTag:81 value:a1[2]];
  [v5 addObject:v7];

  BOOL v8 = +[NFTLV TLVWithTag:82 value:a1[3]];
  [v5 addObject:v8];

  if (a1[4])
  {
    id v9 = +[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 83);
    [v5 addObject:v9];
  }
  if (a1[5])
  {
    id v10 = +[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 85);
    [v5 addObject:v10];
  }
  if (a1[6])
  {
    __int16 v11 = +[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 87);
    [v5 addObject:v11];
  }
  id v12 = v5;
LABEL_31:

  return v12;
}

id *sub_1000BAAF4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = self;
  if (!a4)
  {
    id v12 = (void *)v9;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v14 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v12);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v12);
      Name = sel_getName("signInputTableWithChallenge:data:error:");
      uint64_t v18 = 45;
      if (isMetaClass) {
        uint64_t v18 = 43;
      }
      v14(3, "%c[%{public}s %{public}s]:%i Expecting error", v18, ClassName, Name, 346);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = object_getClass(v12);
      if (class_isMetaClass(v20)) {
        int v21 = 43;
      }
      else {
        int v21 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v26 = v21;
      __int16 v27 = 2082;
      uint64_t v28 = object_getClassName(v12);
      __int16 v29 = 2082;
      int v30 = sel_getName("signInputTableWithChallenge:data:error:");
      __int16 v31 = 1024;
      int v32 = 346;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
    }

    goto LABEL_18;
  }
  if (!v7)
  {
    sub_100140F40(@"Could not create NFTrustSignInputTable, challenge is nil");
    p_isa = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_19;
  }
  if ([v7 length] != (id)8)
  {
    id v22 = [objc_alloc((Class)NSString) initWithFormat:@"Could not create NFTrustSignInputTable, challenge must be 8 bytes long (got %lu bytes)", [v7 length]];
    sub_100140F40(v22);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

LABEL_18:
    p_isa = 0;
    goto LABEL_19;
  }
  id v10 = [NFTrustSignInputTable alloc];
  p_isa = (id *)&v10->super.isa;
  if (v10)
  {
    objc_storeStrong((id *)&v10->_challenge, a2);
    objc_storeStrong(p_isa + 2, a3);
  }
LABEL_19:

  return p_isa;
}

void *sub_1000BAD78(void *a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t v4 = objc_opt_new();
    uint64_t v5 = (void *)v4;
    if (a2)
    {
      if (v4)
      {
        id v6 = +[NFTLV TLVWithTag:144 unsignedChar:0];
        [v5 addObject:v6];

        id v7 = +[NFTLV TLVWithTag:145 value:v2[1]];
        [v5 addObject:v7];

        if (v2[2])
        {
          id v8 = +[NFTLV TLVWithTag:value:](NFTLV, "TLVWithTag:value:", 148);
          [v5 addObject:v8];
        }
        uint64_t v2 = v5;
        goto LABEL_28;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v19 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(v2);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(v2);
        Name = sel_getName("inputTags:");
        uint64_t v23 = 45;
        if (isMetaClass) {
          uint64_t v23 = 43;
        }
        v19(3, "%c[%{public}s %{public}s]:%i Could not create array", v23, ClassName, Name, 381);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      long long v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        BOOL v25 = object_getClass(v2);
        if (class_isMetaClass(v25)) {
          int v26 = 43;
        }
        else {
          int v26 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        int v37 = v26;
        __int16 v38 = 2082;
        uint64_t v39 = object_getClassName(v2);
        __int16 v40 = 2082;
        int v41 = sel_getName("inputTags:");
        __int16 v42 = 1024;
        int v43 = 381;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create array", buf, 0x22u);
      }

      id v27 = objc_alloc((Class)NSError);
      uint64_t v28 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
      __int16 v29 = +[NSString stringWithUTF8String:"No resources"];
      int v35 = v29;
      int v30 = +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
      *a2 = [v27 initWithDomain:v28 code:34 userInfo:v30];
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v9 = NFLogGetLogger();
      if (v9)
      {
        id v10 = (void (*)(uint64_t, const char *, ...))v9;
        __int16 v11 = object_getClass(v2);
        BOOL v12 = class_isMetaClass(v11);
        id v13 = object_getClassName(v2);
        int v32 = sel_getName("inputTags:");
        uint64_t v14 = 45;
        if (v12) {
          uint64_t v14 = 43;
        }
        v10(3, "%c[%{public}s %{public}s]:%i Expecting error", v14, v13, v32, 376);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      CFStringRef v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v16 = object_getClass(v2);
        if (class_isMetaClass(v16)) {
          int v17 = 43;
        }
        else {
          int v17 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        int v37 = v17;
        __int16 v38 = 2082;
        uint64_t v39 = object_getClassName(v2);
        __int16 v40 = 2082;
        int v41 = sel_getName("inputTags:");
        __int16 v42 = 1024;
        int v43 = 376;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
      }
    }
    uint64_t v2 = 0;
LABEL_28:
  }

  return v2;
}

id sub_1000BB188(void *a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v4 = sub_1000BAD78(a1, a2);
      if (!*a2)
      {
        uint64_t v5 = +[NFTLV TLVWithTag:32525 children:v4];
        id v6 = v5;
        if (v5)
        {
          id v7 = [v5 asData];
        }
        else
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t Logger = NFLogGetLogger();
          if (Logger)
          {
            int v17 = (void (*)(uint64_t, const char *, ...))Logger;
            Class Class = object_getClass(a1);
            BOOL isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(a1);
            Name = sel_getName("getValue:");
            uint64_t v21 = 45;
            if (isMetaClass) {
              uint64_t v21 = 43;
            }
            v17(3, "%c[%{public}s %{public}s]:%i Could not create an Operation Dictionary TLV", v21, ClassName, Name, 412);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v22 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = object_getClass(a1);
            if (class_isMetaClass(v23)) {
              int v24 = 43;
            }
            else {
              int v24 = 45;
            }
            *(_DWORD *)int buf = 67109890;
            int v35 = v24;
            __int16 v36 = 2082;
            int v37 = object_getClassName(a1);
            __int16 v38 = 2082;
            uint64_t v39 = sel_getName("getValue:");
            __int16 v40 = 1024;
            int v41 = 412;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create an Operation Dictionary TLV", buf, 0x22u);
          }

          id v25 = objc_alloc((Class)NSError);
          int v26 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
          id v27 = +[NSString stringWithUTF8String:"No resources"];
          __int16 v33 = v27;
          uint64_t v28 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
          *a2 = [v25 initWithDomain:v26 code:34 userInfo:v28];

          id v7 = 0;
        }

        goto LABEL_27;
      }
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v8 = NFLogGetLogger();
      if (v8)
      {
        uint64_t v9 = (void (*)(uint64_t, const char *, ...))v8;
        id v10 = object_getClass(a1);
        BOOL v11 = class_isMetaClass(v10);
        BOOL v12 = object_getClassName(a1);
        int v30 = sel_getName("getValue:");
        uint64_t v13 = 45;
        if (v11) {
          uint64_t v13 = 43;
        }
        v9(3, "%c[%{public}s %{public}s]:%i Expecting error", v13, v12, v30, 399);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v4 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = object_getClass(a1);
        if (class_isMetaClass(v14)) {
          int v15 = 43;
        }
        else {
          int v15 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        int v35 = v15;
        __int16 v36 = 2082;
        int v37 = object_getClassName(a1);
        __int16 v38 = 2082;
        uint64_t v39 = sel_getName("getValue:");
        __int16 v40 = 1024;
        int v41 = 399;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
      }
    }
    id v7 = 0;
LABEL_27:

    goto LABEL_28;
  }
  id v7 = 0;
LABEL_28:

  return v7;
}

id *sub_1000BB5A0(id *a1, void *a2, void *a3, unsigned int a4, void *a5)
{
  id v9 = a3;
  if (a1)
  {
    id v10 = sub_1000BAD78(a2, a5);
    BOOL v11 = +[NFTLV TLVsWithData:v9];
    BOOL v12 = v11;
    if (!a5)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        uint64_t v28 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass(a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName(a1);
        Name = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
        uint64_t v32 = 45;
        if (isMetaClass) {
          uint64_t v32 = 43;
        }
        v28(3, "%c[%{public}s %{public}s]:%i Expecting error", v32, ClassName, Name, 445);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      __int16 v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        NSErrorUserInfoKey v34 = object_getClass(a1);
        if (class_isMetaClass(v34)) {
          int v35 = 43;
        }
        else {
          int v35 = 45;
        }
        __int16 v36 = object_getClassName(a1);
        int v37 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
        *(_DWORD *)int buf = 67109890;
        int v95 = v35;
        __int16 v96 = 2082;
        NSErrorUserInfoKey v97 = v36;
        __int16 v98 = 2082;
        id v99 = v37;
        __int16 v100 = 1024;
        int v101 = 445;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Expecting error", buf, 0x22u);
      }

      a1 = 0;
      goto LABEL_65;
    }
    if (v11)
    {
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      id v13 = v11;
      id v14 = [v13 countByEnumeratingWithState:&v87 objects:v93 count:16];
      if (v14)
      {
        id v15 = v14;
        unsigned int v79 = a4;
        id obj = v13;
        __int16 v81 = a5;
        unsigned __int16 v82 = v10;
        id v83 = v9;
        id v84 = v12;
        id v16 = 0;
        uint64_t v17 = *(void *)v88;
        uint64_t v18 = a1 + 3;
        id v19 = a1;
        int v20 = a1 + 2;
        uint64_t v80 = v19;
        uint64_t v21 = v19 + 1;
        while (2)
        {
          for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
          {
            uint64_t v23 = v16;
            if (*(void *)v88 != v17) {
              objc_enumerationMutation(obj);
            }
            int v24 = *(void **)(*((void *)&v87 + 1) + 8 * i);
            id v16 = v24;

            unsigned int v25 = [v16 tag];
            int v26 = v18;
            if (v25 != 24375)
            {
              int v26 = v21;
              if (v25 != 151)
              {
                int v26 = v20;
                if (v25 != 150)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v39 = NFLogGetLogger();
                  BOOL v12 = v84;
                  if (v39)
                  {
                    __int16 v40 = (void (*)(uint64_t, const char *, ...))v39;
                    int v41 = object_getClass(v80);
                    BOOL v42 = class_isMetaClass(v41);
                    int v43 = object_getClassName(v80);
                    BOOL v77 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
                    uint64_t v44 = 45;
                    if (v42) {
                      uint64_t v44 = 43;
                    }
                    v40(3, "%c[%{public}s %{public}s]:%i Sign returned an unexpected tag", v44, v43, v77, 468);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  BOOL v45 = NFSharedLogGetLogger();
                  id v9 = v83;
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                  {
                    __int16 v46 = object_getClass(v80);
                    if (class_isMetaClass(v46)) {
                      int v47 = 43;
                    }
                    else {
                      int v47 = 45;
                    }
                    uint64_t v48 = object_getClassName(v80);
                    char v49 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
                    *(_DWORD *)int buf = 67109890;
                    int v95 = v47;
                    __int16 v96 = 2082;
                    NSErrorUserInfoKey v97 = v48;
                    __int16 v98 = 2082;
                    id v99 = v49;
                    __int16 v100 = 1024;
                    int v101 = 468;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Sign returned an unexpected tag", buf, 0x22u);
                  }

                  id v50 = [objc_alloc((Class)NSString) initWithFormat:@"Could not sign, unexpected tag %u returned from SE", [v16 tag]];
                  sub_100140860(v50);
                  *__int16 v81 = (id)objc_claimAutoreleasedReturnValue();

                  a1 = 0;
                  id v10 = v82;
                  goto LABEL_65;
                }
              }
            }
            objc_storeStrong(v26, v24);
          }
          id v15 = [obj countByEnumeratingWithState:&v87 objects:v93 count:16];
          if (v15) {
            continue;
          }
          break;
        }

        id v9 = v83;
        BOOL v12 = v84;
        a1 = v80;
        a5 = v81;
        id v13 = obj;
        a4 = v79;
      }

      if (a1[3])
      {
        if (a4)
        {
          if (a1[1])
          {
            [v10 addObject:];
          }
          else if (a4 <= 7)
          {
            if (((1 << a4) & 0x22) != 0)
            {
              uint64_t v51 = 1;
            }
            else if (((1 << a4) & 0x44) != 0)
            {
              uint64_t v51 = 2;
            }
            else
            {
              if (((1 << a4) & 0x90) == 0) {
                goto LABEL_50;
              }
              uint64_t v51 = 4;
            }
            id v52 = +[NFTLV TLVWithTag:151 unsignedChar:v51];
            [v10 addObject:v52];
          }
        }
LABEL_50:
        if (a1[2]) {
          [v10 addObject:];
        }
        long long v53 = +[NFTLV TLVWithTag:32525 children:v10];
        long long v54 = v53;
        if (v53)
        {
          uint64_t v55 = [v53 asMutableData];
          unsigned int v56 = a1;
          a1 = (id *)v55;
          id v57 = [v56[3] asData];
          [a1 appendData:v57];
        }
        else
        {
          unint64_t v58 = a5;
          BOOL v85 = v12;
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v59 = NFLogGetLogger();
          if (v59)
          {
            long long v60 = (void (*)(uint64_t, const char *, ...))v59;
            long long v61 = object_getClass(a1);
            BOOL v62 = class_isMetaClass(v61);
            long long v63 = v10;
            long long v64 = object_getClassName(a1);
            int v78 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
            uint64_t v65 = 45;
            if (v62) {
              uint64_t v65 = 43;
            }
            id v75 = v64;
            id v10 = v63;
            v60(3, "%c[%{public}s %{public}s]:%i Could not Operation Dictionary DGI", v65, v75, v78, 508);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          long long v66 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            long long v67 = object_getClass(a1);
            if (class_isMetaClass(v67)) {
              int v68 = 43;
            }
            else {
              int v68 = 45;
            }
            long long v69 = object_getClassName(a1);
            long long v70 = sel_getName("signOutputTableWithInputTable:data:localValidation:error:");
            *(_DWORD *)int buf = 67109890;
            int v95 = v68;
            __int16 v96 = 2082;
            NSErrorUserInfoKey v97 = v69;
            __int16 v98 = 2082;
            id v99 = v70;
            __int16 v100 = 1024;
            int v101 = 508;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not Operation Dictionary DGI", buf, 0x22u);
          }

          id v71 = objc_alloc((Class)NSError);
          id v57 = +[NSString stringWithUTF8String:"nfcd"];
          NSErrorUserInfoKey v91 = NSLocalizedDescriptionKey;
          BOOL v72 = +[NSString stringWithUTF8String:"No resources"];
          id v92 = v72;
          uint64_t v73 = +[NSDictionary dictionaryWithObjects:&v92 forKeys:&v91 count:1];
          void *v58 = [v71 initWithDomain:v57 code:34 userInfo:v73];

          a1 = 0;
          BOOL v12 = v85;
        }

        goto LABEL_65;
      }
      __int16 v38 = @"Could not sign missing tag 0x5F37 from SE response";
    }
    else
    {
      __int16 v38 = @"Error in SE response";
    }
    sub_100140860(v38);
    a1 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_65:
  }

  return a1;
}

id sub_1000BBDA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, id *a6)
{
  id v37 = 0;
  uint64_t v8 = [a1 sendCommandWithClass:128 instruction:a2 p1:a3 p2:a4 data:a5 error:&v37];
  id v9 = v37;
  id v10 = v8;
  *a6 = v10;
  if (v9)
  {
    id v11 = v9;
LABEL_3:
    id v12 = v11;
    goto LABEL_26;
  }
  if (v10)
  {
    unsigned int v13 = [v10 status];
    if (v13 == 36864)
    {
      id v12 = 0;
      goto LABEL_26;
    }
    if (v13 == 26881)
    {
      sub_100140964();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_3;
    }
    id v29 = objc_alloc((Class)NSError);
    uint64_t v30 = [*a6 status];
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    unsigned int v31 = [*a6 status];
    uint64_t v32 = 0;
    __int16 v33 = "Unknown Error";
    while ((unsigned __int16)word_100303E80[v32] != v31)
    {
      v32 += 8;
      if (v32 == 192) {
        goto LABEL_24;
      }
    }
    __int16 v33 = *(const char **)&word_100303E80[v32 + 4];
LABEL_24:
    int v26 = +[NSString stringWithUTF8String:v33];
    uint64_t v39 = v26;
    NSErrorUserInfoKey v34 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
    id v12 = [v29 initWithDomain:@"GP" code:v30 userInfo:v34];
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v15 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("sendTrustCommand:p1:p2:data:rapdu:");
      uint64_t v19 = 45;
      if (isMetaClass) {
        uint64_t v19 = 43;
      }
      v15(3, "%c[%{public}s %{public}s]:%i Failed to send trust command, expecting rapdu", v19, ClassName, Name, 557);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = object_getClass(a1);
      if (class_isMetaClass(v21)) {
        int v22 = 43;
      }
      else {
        int v22 = 45;
      }
      uint64_t v23 = object_getClassName(a1);
      int v24 = sel_getName("sendTrustCommand:p1:p2:data:rapdu:");
      *(_DWORD *)int buf = 67109890;
      int v43 = v22;
      __int16 v44 = 2082;
      BOOL v45 = v23;
      __int16 v46 = 2082;
      int v47 = v24;
      __int16 v48 = 1024;
      int v49 = 557;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to send trust command, expecting rapdu", buf, 0x22u);
    }

    id v25 = objc_alloc((Class)NSError);
    int v26 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
    id v27 = +[NSString stringWithUTF8String:"Commmand Error"];
    int v41 = v27;
    uint64_t v28 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
    id v12 = [v25 initWithDomain:v26 code:16 userInfo:v28];
  }
LABEL_26:

  return v12;
}

id sub_1000BC134(id a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v41 = 0;
      uint64_t v5 = sub_100099A20(a1, [v3 unsignedShortValue], (uint64_t)&v41);
      id v6 = v41;
      if (v6)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          uint64_t v8 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("deleteKeyInSlot:");
          uint64_t v11 = 45;
          if (isMetaClass) {
            uint64_t v11 = 43;
          }
          v8(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v11, ClassName, Name, 585, v6);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        id v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          unsigned int v13 = object_getClass(a1);
          if (class_isMetaClass(v13)) {
            int v14 = 43;
          }
          else {
            int v14 = 45;
          }
          id v15 = object_getClassName(a1);
          id v16 = sel_getName("deleteKeyInSlot:");
          *(_DWORD *)int buf = 67110146;
          int v45 = v14;
          __int16 v46 = 2082;
          int v47 = v15;
          __int16 v48 = 2082;
          int v49 = v16;
          __int16 v50 = 1024;
          int v51 = 585;
          __int16 v52 = 2114;
          id v53 = v6;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
        }

        a1 = v6;
      }
      else if ([v5 status] == 36864 || objc_msgSend(v5, "status") == 27272)
      {
        a1 = 0;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v17 = NFLogGetLogger();
        if (v17)
        {
          uint64_t v18 = (void (*)(uint64_t, const char *, ...))v17;
          uint64_t v19 = object_getClass(a1);
          BOOL v20 = class_isMetaClass(v19);
          uint64_t v21 = object_getClassName(a1);
          int v22 = sel_getName("deleteKeyInSlot:");
          uint64_t v40 = [v5 status];
          uint64_t v23 = 45;
          if (v20) {
            uint64_t v23 = 43;
          }
          v18(3, "%c[%{public}s %{public}s]:%i Error status on delete 0x%X", v23, v21, v22, 589, v40);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          id v25 = object_getClass(a1);
          if (class_isMetaClass(v25)) {
            int v26 = 43;
          }
          else {
            int v26 = 45;
          }
          id v27 = object_getClassName(a1);
          uint64_t v28 = sel_getName("deleteKeyInSlot:");
          unsigned int v29 = [v5 status];
          *(_DWORD *)int buf = 67110146;
          int v45 = v26;
          __int16 v46 = 2082;
          int v47 = v27;
          __int16 v48 = 2082;
          int v49 = v28;
          __int16 v50 = 1024;
          int v51 = 589;
          __int16 v52 = 1024;
          LODWORD(v53) = v29;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error status on delete 0x%X", buf, 0x28u);
        }

        id v30 = objc_alloc((Class)NSError);
        uint64_t v31 = [v5 status];
        NSErrorUserInfoKey v42 = NSLocalizedDescriptionKey;
        unsigned int v32 = [v5 status];
        uint64_t v33 = 0;
        NSErrorUserInfoKey v34 = "Unknown Error";
        while ((unsigned __int16)word_100303E80[v33] != v32)
        {
          v33 += 8;
          if (v33 == 192) {
            goto LABEL_32;
          }
        }
        NSErrorUserInfoKey v34 = *(const char **)&word_100303E80[v33 + 4];
LABEL_32:
        int v35 = +[NSString stringWithUTF8String:v34];
        int v43 = v35;
        __int16 v36 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
        a1 = [v30 initWithDomain:@"GP" code:v31 userInfo:v36];
      }
    }
    else
    {
      sub_100140F40(@"slot is nil");
      a1 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  return a1;
}

id sub_1000BC598(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if (v3)
    {
      unsigned int v5 = [v3 unsignedShortValue];
      char v46 = 1;
      id v6 = [objc_alloc((Class)NSData) initWithBytes:&v46 length:1];
      __int16 v45 = __rev16(v5);
      id v7 = [objc_alloc((Class)NSData) initWithBytes:&v45 length:2];
      v44[0] = [v6 DERItem];
      v44[1] = v8;
      v44[2] = [v7 DERItem];
      v44[3] = v9;
      id v43 = 0;
      int v10 = sub_1000BC980((unint64_t)v44, 2u, (uint64_t)&unk_1002838A0, &v43);
      id v11 = v43;
      id v12 = v11;
      if (v10 || !v11)
      {
        a1 = sub_100140860(@"Error while encoding GetKeyInputData");
        id v37 = 0;
        id v26 = 0;
      }
      else
      {
        id v42 = 0;
        id v13 = v11;
        id v14 = objc_alloc((Class)NSData);
        char v48 = 1;
        id v15 = [v14 initWithBytes:&v48 length:1];
        id v16 = objc_alloc((Class)NSData);
        __int16 v47 = 272;
        id v17 = [v16 initWithBytes:&v47 length:2];
        *(void *)int buf = [v15 DERItem];
        *(void *)__int16 v50 = v18;
        *(void *)&v50[8] = [v17 DERItem];
        *(void *)&v50[16] = v19;
        id v20 = [v13 DERItem];
        uint64_t v22 = v21;

        *(void *)&v50[24] = v20;
        *(void *)&v50[32] = v22;
        LODWORD(v13) = sub_1000BC980((unint64_t)buf, 3u, (uint64_t)&unk_1002838D0, &v42);

        id v23 = v42;
        int v24 = v23;
        if (v13 || !v23)
        {
          a1 = sub_100140860(@"Error while encoding GetKeyInputCommandData");
          id v37 = 0;
          id v26 = 0;
        }
        else
        {
          id v41 = 0;
          id v25 = sub_1000BBDA4(a1, 160, 128, 0, (uint64_t)v23, &v41);
          id v26 = v41;
          if (v25)
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t Logger = NFLogGetLogger();
            if (Logger)
            {
              uint64_t v28 = (void (*)(uint64_t, const char *, ...))Logger;
              Class Class = object_getClass(a1);
              BOOL isMetaClass = class_isMetaClass(Class);
              SEL sel = object_getClassName(a1);
              Name = sel_getName("getKeyInSlot:");
              uint64_t v31 = 45;
              if (isMetaClass) {
                uint64_t v31 = 43;
              }
              v28(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v31, sel, Name, 638, v25);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            unsigned int v32 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              uint64_t v33 = object_getClass(a1);
              if (class_isMetaClass(v33)) {
                int v34 = 43;
              }
              else {
                int v34 = 45;
              }
              ClassName = object_getClassName(a1);
              __int16 v36 = sel_getName("getKeyInSlot:");
              *(_DWORD *)int buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = v34;
              *(_WORD *)__int16 v50 = 2082;
              *(void *)&v50[2] = ClassName;
              *(_WORD *)&v50[10] = 2082;
              *(void *)&v50[12] = v36;
              *(_WORD *)&v50[20] = 1024;
              *(_DWORD *)&v50[22] = 638;
              *(_WORD *)&v50[26] = 2114;
              *(void *)&v50[28] = v25;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
            }
          }
          id v37 = v25;
          a1 = v37;
        }
      }
    }
    else
    {
      a1 = sub_100140F40(@"slot is nil");
    }
  }

  return a1;
}

uint64_t sub_1000BC980(unint64_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  unint64_t v11 = DERLengthOfEncodedSequence(0x2000000000000010, a1, a2, a3);
  id v8 = [objc_alloc((Class)NSMutableData) initWithLength:v11];
  uint64_t v9 = DEREncodeSequence(0x2000000000000010, a1, a2, a3, (unint64_t)[v8 mutableBytes], &v11);
  if (!v9) {
    *a4 = v8;
  }

  return v9;
}

NSObject *sub_1000BCA40(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v133 = v7;
  id v134 = v8;
  if (a1)
  {
    if (v8)
    {
      if (v7)
      {
        long long v127 = a4;
        id v130 = a1;
        uint64_t v9 = [v8 subjectIdentifier];
        id v10 = v9;
        unint64_t v11 = self;
        if (v10)
        {
          if ([v10 length] && (unint64_t)objc_msgSend(v10, "length") < 0x41)
          {
            *(void *)int buf = v11;
            *(void *)__int16 v154 = &OBJC_METACLASS___NFTrustCreateKeyInputTable;
            long long v61 = [(uint8_t *)(objc_super *)buf new];
            id v132 = (id *)v61;
            if (!v61)
            {
              id v132 = 0;
LABEL_31:

              if (!v132)
              {
                id v26 = sub_100140860(@"Could not create key input table");
LABEL_139:

                goto LABEL_140;
              }
              int v35 = [v134 discretionaryData];

              if (v35)
              {
                uint64_t v36 = [v134 discretionaryData];
                id v37 = v132[4];
                v132[4] = (id)v36;
              }
              NSErrorUserInfoKey v38 = [v134 localValidations];

              if (v38)
              {
                *(void *)int buf = 0;
                *(void *)__int16 v154 = buf;
                *(void *)&v154[8] = 0x3032000000;
                *(void *)&v154[16] = sub_10000B838;
                *(void *)&v154[24] = sub_1000BDAEC;
                *(void *)&v154[32] = objc_opt_new();
                uint64_t v39 = [v134 localValidations];
                v138[0] = _NSConcreteStackBlock;
                v138[1] = 3221225472;
                v138[2] = sub_1000BDAF4;
                v138[3] = &unk_100303E60;
                void v138[4] = buf;
                [v39 enumerateObjectsUsingBlock:v138];

                objc_storeStrong(v132 + 5, *(id *)(*(void *)v154 + 40));
                _Block_object_dispose(buf, 8);
              }
              uint64_t v40 = [v134 counterLimit];

              if (v40)
              {
                id v41 = objc_opt_new();
                *(_DWORD *)int buf = 0;
                id v42 = [v134 counterLimit];
                unsigned int v43 = [v42 unsignedIntValue];

                *(_DWORD *)int buf = v43;
                [v41 appendBytes:&buf[3] length:1];
                [v41 appendBytes:&buf[2] length:1];
                [v41 appendBytes:&buf[1] length:1];
                [v41 appendBytes:buf length:1];
                id v44 = v132[6];
                v132[6] = v41;
              }
              id v137 = 0;
              __int16 v45 = sub_1000BA58C(v132, &v137);
              if (v137)
              {
                long long v129 = 0;
              }
              else
              {
                char v46 = +[NFTLV TLVWithTag:32551 children:v45];
                long long v129 = [v46 asData];
              }
              __int16 v47 = v137;
              if (v47)
              {
                id v26 = v47;
                id v128 = 0;
LABEL_138:

                goto LABEL_139;
              }
              id v136 = 0;
              id v26 = sub_1000BBDA4(a1, 193, 0, (uint64_t)[v133 unsignedCharValue], (uint64_t)v129, &v136);
              id v128 = v136;
              if (v26)
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (Logger)
                {
                  Class Class = object_getClass(a1);
                  if (class_isMetaClass(Class)) {
                    uint64_t v50 = 43;
                  }
                  else {
                    uint64_t v50 = 45;
                  }
                  ClassName = object_getClassName(a1);
                  Name = sel_getName("createKeyInSlot:request:response:");
                  Logger(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v50, ClassName, Name, 712, v26);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                id v53 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                {
                  long long v54 = object_getClass(a1);
                  if (class_isMetaClass(v54)) {
                    int v55 = 43;
                  }
                  else {
                    int v55 = 45;
                  }
                  unsigned int v56 = object_getClassName(a1);
                  id v57 = sel_getName("createKeyInSlot:request:response:");
                  *(_DWORD *)int buf = 67110146;
                  *(_DWORD *)&uint8_t buf[4] = v55;
                  *(_WORD *)__int16 v154 = 2082;
                  *(void *)&v154[2] = v56;
                  *(_WORD *)&v154[10] = 2082;
                  *(void *)&v154[12] = v57;
                  *(_WORD *)&v154[20] = 1024;
                  *(_DWORD *)&v154[22] = 712;
                  *(_WORD *)&v154[26] = 2114;
                  *(void *)&v154[28] = v26;
                  _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
                }

                unint64_t v58 = [v26 domain];
                if ([v58 isEqualToString:@"GP"])
                {
                  BOOL v59 = [v26 code] == (id)27268;

                  if (v59)
                  {
                    sub_100140C34(@"create key with counter");
                    id v26 = v60 = v26;
LABEL_137:

                    goto LABEL_138;
                  }
                }
                else
                {
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                BOOL v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v77)
                {
                  int v78 = object_getClass(a1);
                  if (class_isMetaClass(v78)) {
                    uint64_t v79 = 43;
                  }
                  else {
                    uint64_t v79 = 45;
                  }
                  uint64_t v80 = object_getClassName(a1);
                  __int16 v81 = sel_getName("createKeyInSlot:request:response:");
                  v77(3, "%c[%{public}s %{public}s]:%i Failed to create Key in SE", v79, v80, v81, 721);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                long long v60 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_137;
                }
                unsigned __int16 v82 = object_getClass(a1);
                if (class_isMetaClass(v82)) {
                  int v83 = 43;
                }
                else {
                  int v83 = 45;
                }
                id v84 = object_getClassName(a1);
                BOOL v85 = sel_getName("createKeyInSlot:request:response:");
                *(_DWORD *)int buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v83;
                *(_WORD *)__int16 v154 = 2082;
                *(void *)&v154[2] = v84;
                *(_WORD *)&v154[10] = 2082;
                *(void *)&v154[12] = v85;
                *(_WORD *)&v154[20] = 1024;
                *(_DWORD *)&v154[22] = 721;
                BOOL v86 = "%c[%{public}s %{public}s]:%i Failed to create Key in SE";
LABEL_136:
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, v86, buf, 0x22u);
                goto LABEL_137;
              }
              CFStringRef v126 = (id *)objc_opt_new();
              [v128 response];
              id v135 = 0;
              id v125 = (id)objc_claimAutoreleasedReturnValue();
              if (!v126)
              {
                int v76 = 0;
LABEL_114:

                id v26 = v135;
                void *v127 = v76;

                if (!v26) {
                  goto LABEL_138;
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                __int16 v100 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v100)
                {
                  int v101 = object_getClass(v130);
                  if (class_isMetaClass(v101)) {
                    uint64_t v102 = 43;
                  }
                  else {
                    uint64_t v102 = 45;
                  }
                  id v103 = object_getClassName(v130);
                  uint64_t v104 = sel_getName("createKeyInSlot:request:response:");
                  v100(3, "%c[%{public}s %{public}s]:%i Key was created in SE but an error was detected in response, delete key ...", v102, v103, v104, 730);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                id v105 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                {
                  id v106 = object_getClass(v130);
                  if (class_isMetaClass(v106)) {
                    int v107 = 43;
                  }
                  else {
                    int v107 = 45;
                  }
                  uint64_t v108 = object_getClassName(v130);
                  NSErrorUserInfoKey v109 = sel_getName("createKeyInSlot:request:response:");
                  *(_DWORD *)int buf = 67109890;
                  *(_DWORD *)&uint8_t buf[4] = v107;
                  *(_WORD *)__int16 v154 = 2082;
                  *(void *)&v154[2] = v108;
                  *(_WORD *)&v154[10] = 2082;
                  *(void *)&v154[12] = v109;
                  *(_WORD *)&v154[20] = 1024;
                  *(_DWORD *)&v154[22] = 730;
                  _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Key was created in SE but an error was detected in response, delete key ...", buf, 0x22u);
                }

                unsigned __int8 v110 = sub_1000BC134(v130, v133);

                if (!v110) {
                  goto LABEL_138;
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v111 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v111)
                {
                  int v112 = object_getClass(v130);
                  if (class_isMetaClass(v112)) {
                    uint64_t v113 = 43;
                  }
                  else {
                    uint64_t v113 = 45;
                  }
                  uint64_t v114 = object_getClassName(v130);
                  BOOL v115 = sel_getName("createKeyInSlot:request:response:");
                  v111(3, "%c[%{public}s %{public}s]:%i Could not delete badly created key", v113, v114, v115, 733);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                long long v60 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_137;
                }
                CFStringRef v116 = object_getClass(v130);
                if (class_isMetaClass(v116)) {
                  int v117 = 43;
                }
                else {
                  int v117 = 45;
                }
                int v118 = object_getClassName(v130);
                id v119 = sel_getName("createKeyInSlot:request:response:");
                *(_DWORD *)int buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v117;
                *(_WORD *)__int16 v154 = 2082;
                *(void *)&v154[2] = v118;
                *(_WORD *)&v154[10] = 2082;
                *(void *)&v154[12] = v119;
                *(_WORD *)&v154[20] = 1024;
                *(_DWORD *)&v154[22] = 733;
                BOOL v86 = "%c[%{public}s %{public}s]:%i Could not delete badly created key";
                goto LABEL_136;
              }
              CFStringRef v123 = sub_1000BA58C(v132, &v135);
              long long v66 = +[NFTLV TLVsWithData:v125];
              CFStringRef v124 = v66;
              if (v66)
              {
                long long v141 = 0u;
                long long v142 = 0u;
                long long v139 = 0u;
                long long v140 = 0u;
                id obj = v66;
                id v67 = [obj countByEnumeratingWithState:&v139 objects:buf count:16];
                if (v67)
                {
                  id v68 = 0;
                  uint64_t v69 = *(void *)v140;
                  while (2)
                  {
                    long long v70 = 0;
                    id v71 = v68;
                    do
                    {
                      if (*(void *)v140 != v69) {
                        objc_enumerationMutation(obj);
                      }
                      BOOL v72 = *(void **)(*((void *)&v139 + 1) + 8 * (void)v70);
                      id v68 = v72;

                      int v73 = [v68 tag];
                      if (v73 <= 88)
                      {
                        BOOL v74 = v126 + 1;
                        if (v73 != 65)
                        {
                          BOOL v74 = v126 + 2;
                          if (v73 != 67)
                          {
LABEL_96:
                            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                            long long v88 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                            if (v88)
                            {
                              long long v89 = object_getClass(v126);
                              if (class_isMetaClass(v89)) {
                                uint64_t v90 = 43;
                              }
                              else {
                                uint64_t v90 = 45;
                              }
                              NSErrorUserInfoKey v91 = object_getClassName(v126);
                              id v92 = sel_getName("keyAttestionWith:responseData:error:");
                              v88(3, "%c[%{public}s %{public}s]:%i Could not create key, unexpected tag %u returned from SE", v90, v91, v92, 277, [v68 tag]);
                            }
                            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                            id v93 = NFSharedLogGetLogger();
                            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
                            {
                              unsigned int v94 = object_getClass(v126);
                              if (class_isMetaClass(v94)) {
                                int v95 = 43;
                              }
                              else {
                                int v95 = 45;
                              }
                              __int16 v96 = object_getClassName(v126);
                              NSErrorUserInfoKey v97 = sel_getName("keyAttestionWith:responseData:error:");
                              unsigned int v98 = [v68 tag];
                              *(_DWORD *)__int16 v143 = 67110146;
                              int v144 = v95;
                              __int16 v145 = 2082;
                              uint32_t v146 = v96;
                              __int16 v147 = 2082;
                              __int16 v148 = v97;
                              __int16 v149 = 1024;
                              int v150 = 277;
                              __int16 v151 = 1024;
                              unsigned int v152 = v98;
                              _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Could not create key, unexpected tag %u returned from SE", v143, 0x28u);
                            }

                            id v99 = [objc_alloc((Class)NSString) initWithFormat:@"Could not create key, unexpected tag %u returned from SE", [v68 tag]];
                            sub_100140860(v99);
                            id v135 = (id)objc_claimAutoreleasedReturnValue();

                            int v76 = 0;
                            goto LABEL_113;
                          }
                        }
                      }
                      else
                      {
                        BOOL v74 = v126 + 4;
                        if (v73 != 89)
                        {
                          BOOL v74 = v126 + 5;
                          if (v73 != 24375)
                          {
                            BOOL v74 = v126 + 3;
                            if (v73 != 32585) {
                              goto LABEL_96;
                            }
                          }
                        }
                      }
                      objc_storeStrong(v74, v72);
                      long long v70 = (char *)v70 + 1;
                      id v71 = v68;
                    }
                    while (v67 != v70);
                    id v67 = [obj countByEnumeratingWithState:&v139 objects:buf count:16];
                    if (v67) {
                      continue;
                    }
                    break;
                  }
                }
                if (v126[1])
                {
                  if (v126[2])
                  {
                    if (v126[3])
                    {
                      if (v126[4])
                      {
                        if (v126[5])
                        {
                          [v123 insertObject:atIndex:];
                          [v123 insertObject:v126[2] atIndex:1];
                          [v123 insertObject:v126[3] atIndex:1];
                          [v123 insertObject:v126[4] atIndex:1];
                          [v123 insertObject:v126[5] atIndex:1];
                          id v75 = +[NFTLV TLVWithTag:32545 children:v123];
                          int v76 = [v75 asData];

LABEL_113:
                          goto LABEL_114;
                        }
                        sub_100140860(@"Could not create key, missing keyAttestationSignature from SE response");
                        id v87 = (id)objc_claimAutoreleasedReturnValue();
                      }
                      else
                      {
                        sub_100140860(@"Could not create key, missing keyDeviceNonce from SE response");
                        id v87 = (id)objc_claimAutoreleasedReturnValue();
                      }
                    }
                    else
                    {
                      sub_100140860(@"Could not create key, missing keyPublicKey from SE response");
                      id v87 = (id)objc_claimAutoreleasedReturnValue();
                    }
                  }
                  else
                  {
                    sub_100140860(@"Could not create key, missing keyPlatformIdentifier from SE response");
                    id v87 = (id)objc_claimAutoreleasedReturnValue();
                  }
                }
                else
                {
                  sub_100140860(@"Could not create key, missing keyVersion from SE response");
                  id v87 = (id)objc_claimAutoreleasedReturnValue();
                }
              }
              else
              {
                sub_100140860(@"Error in SE response");
                id v87 = (id)objc_claimAutoreleasedReturnValue();
              }
              int v76 = 0;
              id v135 = v87;
              goto LABEL_113;
            }
            objc_storeStrong((id *)v61 + 1, v9);
            LOWORD(v139) = 256;
            id v62 = [objc_alloc((Class)NSData) initWithBytes:&v139 length:2];
            id v63 = v132[2];
            v132[2] = v62;

            id v64 = objc_alloc((Class)NSData);
            *(_WORD *)__int16 v143 = 257;
            id v65 = [v64 initWithBytes:v143 length:2];
            uint64_t v19 = v132[3];
            v132[3] = v65;
LABEL_30:

            goto LABEL_31;
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v12 = NFLogGetLogger();
          if (v12)
          {
            id v13 = (void (*)(uint64_t, const char *, ...))v12;
            id v14 = object_getClass(v11);
            BOOL isMetaClass = class_isMetaClass(v14);
            id v16 = object_getClassName(v11);
            id v17 = sel_getName("createKeyInputTableWithSubjectIdentifier:");
            id v122 = [v10 length];
            uint64_t v18 = 45;
            if (isMetaClass) {
              uint64_t v18 = 43;
            }
            v13(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier length is not ]0, 0x40] (%lu)", v18, v16, v17, 168, v122);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v19 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
LABEL_29:
            id v132 = 0;
            goto LABEL_30;
          }
          id v20 = object_getClass(v11);
          if (class_isMetaClass(v20)) {
            int v21 = 43;
          }
          else {
            int v21 = 45;
          }
          *(_DWORD *)int buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v21;
          *(_WORD *)__int16 v154 = 2082;
          *(void *)&v154[2] = object_getClassName(v11);
          *(_WORD *)&v154[10] = 2082;
          *(void *)&v154[12] = sel_getName("createKeyInputTableWithSubjectIdentifier:");
          *(_WORD *)&v154[20] = 1024;
          *(_DWORD *)&v154[22] = 168;
          *(_WORD *)&v154[26] = 2048;
          *(void *)&v154[28] = [v10 length];
          uint64_t v22 = "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier length is no"
                "t ]0, 0x40] (%lu)";
          id v23 = v19;
          uint32_t v24 = 44;
        }
        else
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v27 = NFLogGetLogger();
          if (v27)
          {
            uint64_t v28 = (void (*)(uint64_t, const char *, ...))v27;
            unsigned int v29 = object_getClass(v11);
            BOOL v30 = class_isMetaClass(v29);
            uint64_t v31 = object_getClassName(v11);
            CFStringRef v121 = sel_getName("createKeyInputTableWithSubjectIdentifier:");
            uint64_t v32 = 45;
            if (v30) {
              uint64_t v32 = 43;
            }
            v28(3, "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier is nil", v32, v31, v121, 163);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v19 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
            goto LABEL_29;
          }
          uint64_t v33 = object_getClass(v11);
          if (class_isMetaClass(v33)) {
            int v34 = 43;
          }
          else {
            int v34 = 45;
          }
          *(_DWORD *)int buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v34;
          *(_WORD *)__int16 v154 = 2082;
          *(void *)&v154[2] = object_getClassName(v11);
          *(_WORD *)&v154[10] = 2082;
          *(void *)&v154[12] = sel_getName("createKeyInputTableWithSubjectIdentifier:");
          *(_WORD *)&v154[20] = 1024;
          *(_DWORD *)&v154[22] = 163;
          uint64_t v22 = "%c[%{public}s %{public}s]:%i Could not create NFTrustCreateKeyInputTable, subjectIdentifier is nil";
          id v23 = v19;
          uint32_t v24 = 34;
        }
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
        goto LABEL_29;
      }
      uint64_t v25 = sub_100140F40(@"slot is nil");
    }
    else
    {
      uint64_t v25 = sub_100140F40(@"Could not performCreateKey, with nil request");
    }
    id v26 = v25;
    goto LABEL_140;
  }
  id v26 = 0;
LABEL_140:

  return v26;
}

void sub_1000BDACC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1000BDAEC(uint64_t a1)
{
}

void sub_1000BDAF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = 0;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000BDBD0;
  v4[3] = &unk_100303E38;
  v4[4] = &v5;
  [v3 enumerateObjectsUsingBlock:v4];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) appendBytes:v6 + 3 length:1];
  _Block_object_dispose(&v5, 8);
}

void sub_1000BDBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BDBD0(uint64_t a1, void *a2)
{
  id result = [a2 primitiveLocalValidation];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= result;
  return result;
}

id sub_1000BDC0C(id a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (!a1) {
    goto LABEL_39;
  }
  if (!v8)
  {
    id v15 = @"Could not performSignWithKey with nil request";
LABEL_8:
    sub_100140F40(v15);
    a1 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_39;
  }
  if (!v7)
  {
    id v15 = @"slot is nil";
    goto LABEL_8;
  }
  id v10 = [v8 challenge];
  unint64_t v11 = [v9 data];
  id v58 = 0;
  uint64_t v12 = sub_1000BAAF4((uint64_t)NFTrustSignInputTable, v10, v11, &v58);
  id v13 = v58;

  if (v13)
  {
    a1 = v13;
    id v14 = 0;
  }
  else
  {
    id v57 = 0;
    id v16 = sub_1000BB188(v12, &v57);
    id v17 = v57;
    if (v17)
    {
      a1 = v17;
      id v14 = 0;
    }
    else
    {
      id v56 = 0;
      uint64_t v18 = sub_1000BBDA4(a1, 195, 0, (uint64_t)[v7 unsignedCharValue], (uint64_t)v16, &v56);
      id v14 = v56;
      long long v54 = v16;
      if (v18)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          id v20 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("signWithKeyInSlot:request:response:");
          uint64_t v23 = 45;
          if (isMetaClass) {
            uint64_t v23 = 43;
          }
          v20(3, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", v23, ClassName, Name, 774, v18);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint32_t v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = object_getClass(a1);
          if (class_isMetaClass(v25)) {
            int v26 = 43;
          }
          else {
            int v26 = 45;
          }
          uint64_t v27 = object_getClassName(a1);
          uint64_t v28 = sel_getName("signWithKeyInSlot:request:response:");
          *(_DWORD *)int buf = 67110146;
          int v60 = v26;
          __int16 v61 = 2082;
          id v62 = v27;
          __int16 v63 = 2082;
          id v64 = v28;
          __int16 v65 = 1024;
          int v66 = 774;
          __int16 v67 = 2114;
          id v68 = v18;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error while sending TrustCommand : %{public}@", buf, 0x2Cu);
        }

        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v29 = NFLogGetLogger();
        if (v29)
        {
          BOOL v30 = (void (*)(uint64_t, const char *, ...))v29;
          uint64_t v31 = object_getClass(a1);
          BOOL v32 = class_isMetaClass(v31);
          int v49 = object_getClassName(a1);
          int v51 = sel_getName("signWithKeyInSlot:request:response:");
          uint64_t v33 = 45;
          if (v32) {
            uint64_t v33 = 43;
          }
          v30(3, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE : %{public}@", v33, v49, v51, 778, v18);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v34 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          int v35 = object_getClass(a1);
          if (class_isMetaClass(v35)) {
            int v36 = 43;
          }
          else {
            int v36 = 45;
          }
          id v37 = object_getClassName(a1);
          NSErrorUserInfoKey v38 = sel_getName("signWithKeyInSlot:request:response:");
          *(_DWORD *)int buf = 67110146;
          int v60 = v36;
          __int16 v61 = 2082;
          id v62 = v37;
          __int16 v63 = 2082;
          id v64 = v38;
          __int16 v65 = 1024;
          int v66 = 778;
          __int16 v67 = 2114;
          id v68 = v18;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE : %{public}@", buf, 0x2Cu);
        }

        a1 = v18;
      }
      else
      {
        uint64_t v39 = objc_opt_new();
        [v14 response];
        id v55 = 0;
        SEL sel = (char *)objc_claimAutoreleasedReturnValue();
        uint64_t v40 = sub_1000BB5A0((id *)v39, v12, sel, 0, &v55);
        a1 = v55;
        __int16 v52 = (void *)v39;
        if (v39) {
          id v41 = *(void **)(v39 + 16);
        }
        else {
          id v41 = 0;
        }
        id v42 = v41;
        unsigned int v43 = [v42 value];
        +[NFTrustSignResponse signResponseWithRawData:v40 counterValueData:v43];
        id v44 = (void *)v40;
        id v45 = (id)objc_claimAutoreleasedReturnValue();

        *a4 = v45;
        if (a1) {
          id v46 = a1;
        }
      }
      id v16 = v54;
    }
  }
LABEL_39:

  return a1;
}

id sub_1000BE114(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, void *a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  if (!a1)
  {
    id v33 = 0;
    goto LABEL_21;
  }
  if (!v17)
  {
    int v36 = @"Could not signWithKeyInSlot, signRequest is nil";
LABEL_20:
    sub_100140F40(v36);
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_21;
  }
  if (!v16)
  {
    int v36 = @"Could not signWithKeyInSlot, AID is nil";
    goto LABEL_20;
  }
  if (!v15)
  {
    int v36 = @"Could not signWithKeyInSlot, slot is nil";
    goto LABEL_20;
  }
  id v414 = a1;
  id v439 = 0;
  id v20 = [a1 selectCRSWithError:&v439];
  id v21 = v439;
  if (v21)
  {
    uint64_t v22 = v21;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint32_t v24 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(v414);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(v414);
      Name = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v27 = 45;
      if (isMetaClass) {
        uint64_t v27 = 43;
      }
      v24(3, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", v27, ClassName, Name, 821, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v28 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = object_getClass(v414);
      if (class_isMetaClass(v29)) {
        int v30 = 43;
      }
      else {
        int v30 = 45;
      }
      uint64_t v31 = object_getClassName(v414);
      BOOL v32 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67110146;
      int v473 = v30;
      __int16 v474 = 2082;
      v475 = v31;
      __int16 v476 = 2082;
      v477 = v32;
      __int16 v478 = 1024;
      int v479 = 821;
      __int16 v480 = 2114;
      id v481 = v22;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS: %{public}@", buf, 0x2Cu);
    }

    id v33 = v22;
    int v34 = v20;
    int v35 = v33;
    goto LABEL_16;
  }
  if (!v20)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v55 = NFLogGetLogger();
    if (v55)
    {
      id v56 = (void (*)(uint64_t, const char *, ...))v55;
      id v57 = object_getClass(a1);
      BOOL v58 = class_isMetaClass(v57);
      BOOL v59 = object_getClassName(a1);
      v368 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v60 = 45;
      if (v58) {
        uint64_t v60 = 43;
      }
      v56(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", v60, v59, v368, 826);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v61 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      id v62 = object_getClass(v414);
      if (class_isMetaClass(v62)) {
        int v63 = 43;
      }
      else {
        int v63 = 45;
      }
      id v64 = object_getClassName(v414);
      __int16 v65 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67109890;
      int v473 = v63;
      __int16 v474 = 2082;
      v475 = v64;
      __int16 v476 = 2082;
      v477 = v65;
      __int16 v478 = 1024;
      int v479 = 826;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting RAPDU", buf, 0x22u);
    }

    id v66 = objc_alloc((Class)NSError);
    int v35 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v470 = NSLocalizedDescriptionKey;
    int v34 = +[NSString stringWithUTF8String:"Commmand Error"];
    v471 = v34;
    __int16 v67 = +[NSDictionary dictionaryWithObjects:&v471 forKeys:&v470 count:1];
    id v33 = [v66 initWithDomain:v35 code:16 userInfo:v67];

    goto LABEL_16;
  }
  if ([v20 status] != 36864)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v68 = NFLogGetLogger();
    if (v68)
    {
      uint64_t v69 = (void (*)(uint64_t, const char *, ...))v68;
      long long v70 = object_getClass(a1);
      BOOL v71 = class_isMetaClass(v70);
      BOOL v72 = object_getClassName(a1);
      v369 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v73 = 45;
      if (v71) {
        uint64_t v73 = 43;
      }
      v69(3, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting0x9000", v73, v72, v369, 831);
    }
    v413 = v20;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    BOOL v74 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      id v75 = object_getClass(v414);
      if (class_isMetaClass(v75)) {
        int v76 = 43;
      }
      else {
        int v76 = 45;
      }
      BOOL v77 = object_getClassName(v414);
      int v78 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67109890;
      int v473 = v76;
      __int16 v474 = 2082;
      v475 = v77;
      __int16 v476 = 2082;
      v477 = v78;
      __int16 v478 = 1024;
      int v479 = 831;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to select CRS, expecting0x9000", buf, 0x22u);
    }

    id v79 = objc_alloc((Class)NSError);
    int v34 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v468 = NSLocalizedDescriptionKey;
    uint64_t v80 = +[NSString stringWithUTF8String:"Commmand Error"];
    v469 = v80;
    __int16 v81 = +[NSDictionary dictionaryWithObjects:&v469 forKeys:&v468 count:1];
    id v33 = [v79 initWithDomain:v34 code:16 userInfo:v81];

    int v35 = v413;
    goto LABEL_16;
  }
  v411 = v18;
  NSErrorUserInfoKey v38 = +[NSData NF_dataWithHexString:v16];
  uint64_t v39 = +[NFTLV TLVWithTag:79 value:v38];

  if (!v39)
  {
    sub_100140860(@"Could not create AID TLV");
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    id v54 = 0;
    id v18 = v411;
    goto LABEL_322;
  }
  v410 = v39;
  v412 = v20;
  uint64_t v40 = [v17 challenge];
  id v41 = [v17 data];
  id v438 = 0;
  id v42 = sub_1000BAAF4((uint64_t)NFTrustSignInputTable, v40, v41, &v438);
  id v43 = v438;

  if (v43)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v44 = NFLogGetLogger();
    if (v44)
    {
      id v45 = (void (*)(uint64_t, const char *, ...))v44;
      id v46 = object_getClass(v414);
      BOOL v47 = class_isMetaClass(v46);
      v362 = object_getClassName(v414);
      v367 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v48 = 45;
      if (v47) {
        uint64_t v48 = 43;
      }
      v45(3, "%c[%{public}s %{public}s]:%i %{public}@", v48, v362, v367, 846, v43);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v49 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      uint64_t v50 = object_getClass(v414);
      if (class_isMetaClass(v50)) {
        int v51 = 43;
      }
      else {
        int v51 = 45;
      }
      __int16 v52 = object_getClassName(v414);
      id v53 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67110146;
      int v473 = v51;
      __int16 v474 = 2082;
      v475 = v52;
      __int16 v476 = 2082;
      v477 = v53;
      __int16 v478 = 1024;
      int v479 = 846;
      __int16 v480 = 2114;
      id v481 = v43;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
    }

    id v54 = v43;
    id v33 = v54;
    id v18 = v411;
    goto LABEL_321;
  }
  id v437 = 0;
  unsigned __int16 v82 = sub_1000BB188(v42, &v437);
  id v83 = v437;
  if (v83)
  {
    id v54 = v83;
    id v33 = v54;
    id v18 = v411;
    goto LABEL_320;
  }
  v409 = v42;
  id v84 = objc_alloc((Class)NSArray);
  BOOL v85 = +[NFTLV TLVWithTag:unsignedChar:](NFTLV, "TLVWithTag:unsignedChar:", 196, [v15 unsignedCharValue]);
  v408 = v82;
  BOOL v86 = +[NFTLV TLVWithData:v82];
  id v87 = [v84 initWithObjects:v85, v86];
  uint64_t v88 = +[NFTLV TLVWithTag:239 children:v87];

  v407 = (void *)v88;
  if (!v88)
  {
    sub_100140860(@"Could not create opaque Data TLV");
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    id v54 = 0;
    id v18 = v411;
    unsigned __int16 v82 = v408;
    id v42 = v409;
    goto LABEL_319;
  }
  id v89 = [objc_alloc((Class)NSArray) initWithObjects:v410, v88, nil];
  uint64_t v90 = +[NFTLV TLVWithTag:228 children:v89];

  v406 = v90;
  if (!v90)
  {
    sub_100140860(@"Could not create E4 TLV");
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    id v54 = 0;
    id v18 = v411;
    unsigned __int16 v82 = v408;
    id v42 = v409;
    goto LABEL_318;
  }
  v405 = [v90 asMutableData];
  id v18 = v411;
  if (v411)
  {
    id v436 = 0;
    uint64_t v91 = sub_1001D812C((uint64_t)NFECommercePaymentRequestEncoder, v411, 0, &v436);
    id v401 = v436;
    if (!v91)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v121 = NFLogGetLogger();
      if (v121)
      {
        id v122 = (void (*)(uint64_t, const char *, ...))v121;
        CFStringRef v123 = object_getClass(v414);
        BOOL v124 = class_isMetaClass(v123);
        id v125 = object_getClassName(v414);
        v370 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
        uint64_t v126 = 45;
        if (v124) {
          uint64_t v126 = 43;
        }
        v122(3, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", v126, v125, v370, 881);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      long long v127 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      {
        id v128 = object_getClass(v414);
        if (class_isMetaClass(v128)) {
          int v129 = 43;
        }
        else {
          int v129 = 45;
        }
        id v130 = object_getClassName(v414);
        long long v131 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
        *(_DWORD *)int buf = 67109890;
        int v473 = v129;
        __int16 v474 = 2082;
        v475 = v130;
        __int16 v476 = 2082;
        v477 = v131;
        __int16 v478 = 1024;
        int v479 = 881;
        _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to create TLV from input.", buf, 0x22u);
      }

      if (v401)
      {
        id v54 = v401;
        id v132 = 0;
        id v33 = v54;
      }
      else
      {
        sub_100140860(@"Could not create ECommerce TLV");
        id v33 = (id)objc_claimAutoreleasedReturnValue();
        id v132 = 0;
        id v54 = 0;
      }
      unsigned __int16 v82 = v408;
      id v42 = v409;
      goto LABEL_317;
    }
    id v92 = +[NFTLV TLVWithTag:230 value:v91];
    v403 = (void *)v91;
    if (!v92)
    {
      sub_100140860(@"Could not create E6 TLV");
      id v33 = (id)objc_claimAutoreleasedReturnValue();
      unsigned __int16 v82 = v408;
      id v42 = v409;
      id v54 = v401;
      id v132 = v403;
      goto LABEL_317;
    }
    id v93 = v92;
    unsigned int v94 = [v92 asData];
    [v405 appendData:v94];
  }
  else
  {
    id v93 = 0;
    id v401 = 0;
  }
  id v95 = v405;
  v404 = v93;
  if (!v19) {
    goto LABEL_159;
  }
  id v435 = 0;
  unsigned int v96 = sub_10021F7F0((uint64_t)NFSSEWrapper, &v435);
  id v97 = v435;
  v398 = v97;
  v400 = v95;
  if (!v97 || v96)
  {
    unsigned int v397 = v96;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v133 = NFLogGetLogger();
    if (v133)
    {
      id v134 = (void (*)(uint64_t, const char *, ...))v133;
      id v135 = object_getClass(v414);
      BOOL v136 = class_isMetaClass(v135);
      id v137 = object_getClassName(v414);
      v371 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v138 = 45;
      if (v136) {
        uint64_t v138 = 43;
      }
      v134(3, "%c[%{public}s %{public}s]:%i Failed to get host challenge", v138, v137, v371, 903);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    long long v139 = NFSharedLogGetLogger();
    id v18 = v411;
    if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
    {
      long long v140 = object_getClass(v414);
      if (class_isMetaClass(v140)) {
        int v141 = 43;
      }
      else {
        int v141 = 45;
      }
      long long v142 = object_getClassName(v414);
      __int16 v143 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67109890;
      int v473 = v141;
      __int16 v474 = 2082;
      v475 = v142;
      __int16 v476 = 2082;
      v477 = v143;
      __int16 v478 = 1024;
      int v479 = 903;
      _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get host challenge", buf, 0x22u);
    }

    id v144 = objc_alloc((Class)NSError);
    __int16 v145 = +[NSString stringWithUTF8String:"nfcd"];
    if (v397)
    {
      NSErrorUserInfoKey v464 = NSLocalizedDescriptionKey;
      if (v397 >= 0x47) {
        int v146 = 71;
      }
      else {
        int v146 = v397;
      }
      __int16 v147 = +[NSString stringWithUTF8String:off_100303BF0[v146]];
      v465 = v147;
      __int16 v148 = +[NSDictionary dictionaryWithObjects:&v465 forKeys:&v464 count:1];
      __int16 v149 = v144;
      int v150 = v145;
      uint64_t v151 = v397;
    }
    else
    {
      NSErrorUserInfoKey v466 = NSLocalizedDescriptionKey;
      __int16 v147 = +[NSString stringWithUTF8String:"Unknown Error"];
      v467 = v147;
      __int16 v148 = +[NSDictionary dictionaryWithObjects:&v467 forKeys:&v466 count:1];
      __int16 v149 = v144;
      int v150 = v145;
      uint64_t v151 = 6;
    }
    id v33 = [v149 initWithDomain:v150 code:v151 userInfo:v148];

    goto LABEL_135;
  }
  id v434 = 0;
  unsigned int v98 = sub_1000C5684(v414, v97, &v434);
  id v396 = v434;
  unsigned int v388 = v98;
  if (v98)
  {
    id v386 = v17;
    id v390 = v15;
    id v393 = v16;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v99 = NFLogGetLogger();
    if (v99)
    {
      __int16 v100 = (void (*)(uint64_t, const char *, ...))v99;
      int v101 = object_getClass(v414);
      BOOL v102 = class_isMetaClass(v101);
      id v103 = object_getClassName(v414);
      v383 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      id v382 = objc_alloc((Class)NSError);
      uint64_t v104 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v462 = NSLocalizedDescriptionKey;
      if (v98 >= 0x47) {
        int v105 = 71;
      }
      else {
        int v105 = v98;
      }
      id v106 = +[NSString stringWithUTF8String:off_100303BF0[v105]];
      v463 = v106;
      int v107 = +[NSDictionary dictionaryWithObjects:&v463 forKeys:&v462 count:1];
      id v108 = [v382 initWithDomain:v104 code:v98 userInfo:v107];
      uint64_t v109 = 45;
      if (v102) {
        uint64_t v109 = 43;
      }
      v100(3, "%c[%{public}s %{public}s]:%i Failed to authenticate to CRS %{public}@", v109, v103, v383, 914, v108);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    unsigned __int8 v110 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      uint64_t v111 = object_getClass(v414);
      if (class_isMetaClass(v111)) {
        int v112 = 43;
      }
      else {
        int v112 = 45;
      }
      int v384 = v112;
      v415 = object_getClassName(v414);
      SEL sel = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      id v113 = objc_alloc((Class)NSError);
      uint64_t v114 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v115 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v460 = NSLocalizedDescriptionKey;
      if (v388 >= 0x47) {
        uint64_t v116 = 71;
      }
      else {
        uint64_t v116 = v388;
      }
      int v117 = +[NSString stringWithUTF8String:off_100303BF0[v116]];
      v461 = v117;
      int v118 = +[NSDictionary dictionaryWithObjects:&v461 forKeys:&v460 count:1];
      uint64_t v119 = v388;
      id v120 = [v113 initWithDomain:v114 code:v388 userInfo:v118];
      *(_DWORD *)int buf = 67110146;
      int v473 = v384;
      __int16 v474 = 2082;
      v475 = v415;
      __int16 v476 = 2082;
      v477 = sel;
      __int16 v478 = 1024;
      int v479 = 914;
      __int16 v480 = 2114;
      id v481 = v120;
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to authenticate to CRS %{public}@", buf, 0x2Cu);
    }
    else
    {
      NSErrorUserInfoKey v115 = NSLocalizedDescriptionKey;
      uint64_t v119 = v388;
      if (v388 >= 0x47) {
        uint64_t v116 = 71;
      }
      else {
        uint64_t v116 = v388;
      }
    }

    id v169 = objc_alloc((Class)NSError);
    int v166 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v458 = v115;
    id v167 = +[NSString stringWithUTF8String:off_100303BF0[v116]];
    v459 = v167;
    id v168 = +[NSDictionary dictionaryWithObjects:&v459 forKeys:&v458 count:1];
    id v33 = [v169 initWithDomain:v166 code:v119 userInfo:v168];
    id v18 = v411;
    id v15 = v390;
    id v16 = v393;
    id v17 = v386;
LABEL_134:

LABEL_135:
LABEL_136:
    unsigned __int16 v82 = v408;
    id v42 = v409;
    id v54 = v401;
    id v132 = v404;
    goto LABEL_316;
  }
  if ((unint64_t)[v396 length] <= 0xF)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v152 = NFLogGetLogger();
    if (v152)
    {
      int v153 = (void (*)(uint64_t, const char *, ...))v152;
      __int16 v154 = object_getClass(v414);
      BOOL v155 = class_isMetaClass(v154);
      BOOL v156 = object_getClassName(v414);
      uint64_t v157 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      id v380 = [v396 length];
      uint64_t v158 = 45;
      if (v155) {
        uint64_t v158 = 43;
      }
      v153(3, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", v158, v156, v157, 919, v380);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v159 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
    {
      id v160 = object_getClass(v414);
      if (class_isMetaClass(v160)) {
        int v161 = 43;
      }
      else {
        int v161 = 45;
      }
      BOOL v162 = object_getClassName(v414);
      id v163 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      id v164 = [v396 length];
      *(_DWORD *)int buf = 67110146;
      int v473 = v161;
      __int16 v474 = 2082;
      v475 = v162;
      __int16 v476 = 2082;
      v477 = v163;
      __int16 v478 = 1024;
      int v479 = 919;
      __int16 v480 = 2048;
      id v481 = v164;
      _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Initialize auth response too small: %lu", buf, 0x2Cu);
    }

    id v165 = objc_alloc((Class)NSError);
    int v166 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v456 = NSLocalizedDescriptionKey;
    id v167 = +[NSString stringWithUTF8String:"Commmand Error"];
    v457 = v167;
    id v168 = +[NSDictionary dictionaryWithObjects:&v457 forKeys:&v456 count:1];
    id v33 = [v165 initWithDomain:v166 code:16 userInfo:v168];
    id v18 = v411;
    goto LABEL_134;
  }
  uint64_t v170 = [v396 subdataWithRange:0, 8];
  [v396 subdataWithRange:NSMakeRange(8, 8)];
  v394 = v391 = (void *)v170;
  if (!v170 || !v394)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v178 = NFLogGetLogger();
    if (v178)
    {
      id v179 = (void (*)(uint64_t, const char *, ...))v178;
      int v180 = object_getClass(v414);
      BOOL v181 = class_isMetaClass(v180);
      id v182 = object_getClassName(v414);
      v372 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v183 = 45;
      if (v181) {
        uint64_t v183 = 43;
      }
      v179(3, "%c[%{public}s %{public}s]:%i Failed to get cardChallenge and cardCryptogram from CRS", v183, v182, v372, 927);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v184 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
    {
      int v185 = object_getClass(v414);
      if (class_isMetaClass(v185)) {
        int v186 = 43;
      }
      else {
        int v186 = 45;
      }
      id v187 = object_getClassName(v414);
      id v188 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67109890;
      int v473 = v186;
      __int16 v474 = 2082;
      v475 = v187;
      __int16 v476 = 2082;
      v477 = v188;
      __int16 v478 = 1024;
      int v479 = 927;
      _os_log_impl((void *)&_mh_execute_header, v184, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to get cardChallenge and cardCryptogram from CRS", buf, 0x22u);
    }

    id v189 = objc_alloc((Class)NSError);
    uint64_t v190 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v454 = NSLocalizedDescriptionKey;
    id v191 = +[NSString stringWithUTF8String:"Commmand Error"];
    v455 = v191;
    id v192 = +[NSDictionary dictionaryWithObjects:&v455 forKeys:&v454 count:1];
    SEL v193 = v189;
    uint64_t v177 = (void *)v190;
    uint64_t v194 = v190;
    uint64_t v195 = 16;
    goto LABEL_155;
  }
  uint64_t v171 = sub_1002200C0((uint64_t)NFSSEWrapper, v19);
  BOOL v172 = v171 == 2;
  BOOL v387 = v171 == 4;
  if (v171 == 4) {
    BOOL v172 = 1;
  }
  char v385 = v172;
  if (v171 == 2) {
    goto LABEL_143;
  }
  uint64_t v173 = v171;
  if (v171 == 4) {
    goto LABEL_143;
  }
  BOOL v387 = v171 == 3;
  if (v171 == 1 || v171 == 3) {
    goto LABEL_143;
  }
  if (v171 != 5)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v349 = NFLogGetLogger();
    if (v349)
    {
      v350 = (void (*)(uint64_t, const char *, ...))v349;
      v351 = object_getClass(v414);
      BOOL v352 = class_isMetaClass(v351);
      v365 = object_getClassName(v414);
      v379 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v353 = 45;
      if (v352) {
        uint64_t v353 = 43;
      }
      v350(3, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", v353, v365, v379, 945, v173);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v354 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v354, OS_LOG_TYPE_ERROR))
    {
      v355 = object_getClass(v414);
      if (class_isMetaClass(v355)) {
        int v356 = 43;
      }
      else {
        int v356 = 45;
      }
      v357 = object_getClassName(v414);
      v358 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67110146;
      int v473 = v356;
      __int16 v474 = 2082;
      v475 = v357;
      __int16 v476 = 2082;
      v477 = v358;
      __int16 v478 = 1024;
      int v479 = 945;
      __int16 v480 = 1024;
      LODWORD(v481) = v173;
      _os_log_impl((void *)&_mh_execute_header, v354, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown transaction type: %d", buf, 0x28u);
    }

    id v359 = objc_alloc((Class)NSError);
    uint64_t v360 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v452 = NSLocalizedDescriptionKey;
    id v191 = +[NSString stringWithUTF8String:"Unexpected Result"];
    v453 = v191;
    id v192 = +[NSDictionary dictionaryWithObjects:&v453 forKeys:&v452 count:1];
    SEL v193 = v359;
    uint64_t v177 = (void *)v360;
    uint64_t v194 = v360;
    uint64_t v195 = 13;
LABEL_155:
    id v33 = [v193 initWithDomain:v194 code:v195 userInfo:v192];

    goto LABEL_157;
  }
  BOOL v387 = 1;
LABEL_143:
  id v174 = objc_alloc((Class)NSMutableData);
  int v432 = 849024;
  unsigned __int8 v433 = [v400 length];
  id v175 = [v174 initWithBytes:&v432 length:5];
  [v175 appendData:v400];
  char v431 = 0;
  int v389 = 1;
  [v175 appendBytes:&v431 length:1];
  id v176 = [v414 serialNumberAsData];
  uint64_t v177 = v175;
  sub_100220920((uint64_t)NFSSEWrapper, 3, v175, a7, v19, v176, v385, v387, v398, v391, v394, 0, 0, 0, 0);
  id v33 = (id)objc_claimAutoreleasedReturnValue();

  if (v33)
  {
    v400 = v33;
    goto LABEL_158;
  }
  sub_100140860(@"Failed to get signed data");
  id v33 = (id)objc_claimAutoreleasedReturnValue();
  v400 = 0;
LABEL_157:
  int v389 = 0;
LABEL_158:

  id v95 = v400;
  if (!v389)
  {
    id v18 = v411;
    goto LABEL_136;
  }
LABEL_159:
  id v196 = v95;
  unsigned int v399 = *((unsigned __int8 *)[v196 bytes] + 3);
  id v430 = v401;
  v400 = v196;
  unsigned int v197 = [v414 transceiveData:v196 toOS:0 error:&v430];
  id v198 = v430;

  id v199 = +[NFResponseAPDU responseWithData:v197];

  if (v198)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v200 = NFLogGetLogger();
    if (v200)
    {
      BOOL v201 = (void (*)(uint64_t, const char *, ...))v200;
      char v202 = object_getClass(v414);
      BOOL v203 = class_isMetaClass(v202);
      uint64_t v204 = object_getClassName(v414);
      v373 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v205 = 45;
      if (v203) {
        uint64_t v205 = 43;
      }
      v201(3, "%c[%{public}s %{public}s]:%i Failed to execute opaque data", v205, v204, v373, 982);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v206 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
    {
      BOOL v207 = object_getClass(v414);
      if (class_isMetaClass(v207)) {
        int v208 = 43;
      }
      else {
        int v208 = 45;
      }
      v209 = object_getClassName(v414);
      uint64_t v210 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67109890;
      int v473 = v208;
      __int16 v474 = 2082;
      v475 = v209;
      __int16 v476 = 2082;
      v477 = v210;
      __int16 v478 = 1024;
      int v479 = 982;
      _os_log_impl((void *)&_mh_execute_header, v206, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute opaque data", buf, 0x22u);
    }

    id v54 = v198;
    v412 = v199;
    id v33 = v54;
    id v18 = v411;
    goto LABEL_315;
  }
  id v392 = v15;
  id v395 = v16;
  if (!v199)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v220 = NFLogGetLogger();
    if (v220)
    {
      __int16 v221 = (void (*)(uint64_t, const char *, ...))v220;
      id v222 = object_getClass(v414);
      BOOL v223 = class_isMetaClass(v222);
      id v224 = object_getClassName(v414);
      v374 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v225 = 45;
      if (v223) {
        uint64_t v225 = 43;
      }
      v221(3, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, expecting RAPDU", v225, v224, v374, 987);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    CFStringRef v226 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
    {
      int v227 = object_getClass(v414);
      if (class_isMetaClass(v227)) {
        int v228 = 43;
      }
      else {
        int v228 = 45;
      }
      id v229 = object_getClassName(v414);
      unint64_t v230 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67109890;
      int v473 = v228;
      __int16 v474 = 2082;
      v475 = v229;
      __int16 v476 = 2082;
      v477 = v230;
      __int16 v478 = 1024;
      int v479 = 987;
      _os_log_impl((void *)&_mh_execute_header, v226, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to execute opaque data, expecting RAPDU", buf, 0x22u);
    }

    id v231 = objc_alloc((Class)NSError);
    int v232 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v450 = NSLocalizedDescriptionKey;
    int v233 = +[NSString stringWithUTF8String:"Unexpected Result"];
    v451 = v233;
    char v234 = +[NSDictionary dictionaryWithObjects:&v451 forKeys:&v450 count:1];
    uint64_t v235 = v231;
    id v236 = v232;
    uint64_t v237 = 13;
    goto LABEL_194;
  }
  unsigned int v211 = v199;
  if ([v199 status] == 36864)
  {
    v412 = v199;
    goto LABEL_173;
  }
  id v238 = objc_opt_new();
  if (([v199 status] & 0xFF00) != 0x6100)
  {
    id v277 = objc_alloc((Class)NSError);
    uint64_t v278 = [v199 status];
    NSErrorUserInfoKey v448 = NSLocalizedDescriptionKey;
    unsigned int v279 = [v199 status];
    uint64_t v280 = 0;
    id v281 = "Unknown Error";
    while ((unsigned __int16)word_100303E80[v280] != v279)
    {
      v280 += 8;
      if (v280 == 192) {
        goto LABEL_248;
      }
    }
    id v281 = *(const char **)&word_100303E80[v280 + 4];
LABEL_248:
    __int16 v300 = +[NSString stringWithUTF8String:v281];
    v449 = v300;
    int v301 = +[NSDictionary dictionaryWithObjects:&v449 forKeys:&v448 count:1];
    id v33 = [v277 initWithDomain:@"GP" code:v278 userInfo:v301];

    goto LABEL_249;
  }
  if (([v199 status] & 0xFF00) == 0x6100)
  {
    while (1)
    {
      uint64_t v239 = v211;
      NSErrorUserInfoKey v240 = [v211 response];
      [v238 appendData:v240];

      unsigned __int8 v241 = [v211 status];
      id v429 = 0;
      unsigned int v211 = [v414 sendCommandWithClass:128 instruction:192 p1:0 p2:0 data:0 expectedLength:v241 toOS:0 error:&v429];
      id v242 = v429;

      if (v242) {
        break;
      }
      if (!v211)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v334 = NFLogGetLogger();
        if (v334)
        {
          v335 = (void (*)(uint64_t, const char *, ...))v334;
          v336 = object_getClass(v414);
          BOOL v337 = class_isMetaClass(v336);
          v338 = object_getClassName(v414);
          v378 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
          uint64_t v339 = 45;
          if (v337) {
            uint64_t v339 = 43;
          }
          v335(3, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS, expecting RAPDU", v339, v338, v378, 1020);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        v340 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v340, OS_LOG_TYPE_ERROR))
        {
          v341 = object_getClass(v414);
          if (class_isMetaClass(v341)) {
            int v342 = 43;
          }
          else {
            int v342 = 45;
          }
          v343 = object_getClassName(v414);
          v344 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
          *(_DWORD *)int buf = 67109890;
          int v473 = v342;
          __int16 v474 = 2082;
          v475 = v343;
          __int16 v476 = 2082;
          v477 = v344;
          __int16 v478 = 1024;
          int v479 = 1020;
          _os_log_impl((void *)&_mh_execute_header, v340, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS, expecting RAPDU", buf, 0x22u);
        }

        id v345 = objc_alloc((Class)NSError);
        v346 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v446 = NSLocalizedDescriptionKey;
        v347 = +[NSString stringWithUTF8String:"Unexpected Result"];
        v447 = v347;
        v348 = +[NSDictionary dictionaryWithObjects:&v447 forKeys:&v446 count:1];
        id v33 = [v345 initWithDomain:v346 code:13 userInfo:v348];

        unsigned int v211 = 0;
LABEL_249:
        id v54 = 0;
LABEL_250:

        v412 = v211;
        goto LABEL_314;
      }
      if ([v211 status] == 36864)
      {
        uint64_t v243 = [v211 response];
        [v238 appendData:v243];

        id v244 = objc_alloc((Class)NSData);
        __int16 v428 = 144;
        id v245 = [v244 initWithBytes:&v428 length:2];
        [v238 appendData:v245];
      }
      if (([v211 status] & 0xFF00) != 0x6100) {
        goto LABEL_202;
      }
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v324 = NFLogGetLogger();
    if (v324)
    {
      v325 = (void (*)(uint64_t, const char *, ...))v324;
      NSErrorUserInfoKey v326 = object_getClass(v414);
      BOOL v327 = class_isMetaClass(v326);
      v364 = object_getClassName(v414);
      v377 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v328 = 45;
      if (v327) {
        uint64_t v328 = 43;
      }
      v325(3, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS : %{public}@", v328, v364, v377, 1015, v242);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    v329 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v329, OS_LOG_TYPE_ERROR))
    {
      NSErrorUserInfoKey v330 = object_getClass(v414);
      if (class_isMetaClass(v330)) {
        int v331 = 43;
      }
      else {
        int v331 = 45;
      }
      v332 = object_getClassName(v414);
      v333 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67110146;
      int v473 = v331;
      __int16 v474 = 2082;
      v475 = v332;
      __int16 v476 = 2082;
      v477 = v333;
      __int16 v478 = 1024;
      int v479 = 1015;
      __int16 v480 = 2114;
      id v481 = v242;
      _os_log_impl((void *)&_mh_execute_header, v329, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to retrieve more data from CRS : %{public}@", buf, 0x2Cu);
    }

    id v33 = v242;
    id v54 = v33;
    goto LABEL_250;
  }
LABEL_202:
  uint64_t v246 = +[NFResponseAPDU responseWithData:v238];

  v412 = (void *)v246;
  if (!v246)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v247 = NFLogGetLogger();
    if (v247)
    {
      NSErrorUserInfoKey v248 = (void (*)(uint64_t, const char *, ...))v247;
      __int16 v249 = object_getClass(v414);
      BOOL v250 = class_isMetaClass(v249);
      NSErrorUserInfoKey v251 = object_getClassName(v414);
      v375 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v252 = 45;
      if (v250) {
        uint64_t v252 = 43;
      }
      v248(3, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE, expecting RAPDU", v252, v251, v375, 1040);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v253 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v253, OS_LOG_TYPE_ERROR))
    {
      id v254 = object_getClass(v414);
      if (class_isMetaClass(v254)) {
        int v255 = 43;
      }
      else {
        int v255 = 45;
      }
      NSErrorUserInfoKey v256 = object_getClassName(v414);
      id v257 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      *(_DWORD *)int buf = 67109890;
      int v473 = v255;
      __int16 v474 = 2082;
      v475 = v256;
      __int16 v476 = 2082;
      v477 = v257;
      __int16 v478 = 1024;
      int v479 = 1040;
      _os_log_impl((void *)&_mh_execute_header, v253, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign with Key in SE, expecting RAPDU", buf, 0x22u);
    }

    id v258 = objc_alloc((Class)NSError);
    int v232 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v444 = NSLocalizedDescriptionKey;
    int v233 = +[NSString stringWithUTF8String:"Commmand Error"];
    v445 = v233;
    char v234 = +[NSDictionary dictionaryWithObjects:&v445 forKeys:&v444 count:1];
    uint64_t v235 = v258;
    id v236 = v232;
    uint64_t v237 = 16;
LABEL_194:
    id v33 = [v235 initWithDomain:v236 code:v237 userInfo:v234];

    v412 = 0;
    goto LABEL_246;
  }
LABEL_173:
  if ([v412 status] != 36864)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v259 = NFLogGetLogger();
    if (v259)
    {
      NSErrorUserInfoKey v260 = (void (*)(uint64_t, const char *, ...))v259;
      id v261 = object_getClass(v414);
      BOOL v262 = class_isMetaClass(v261);
      __int16 v263 = object_getClassName(v414);
      int v264 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      uint64_t v381 = [v412 status];
      uint64_t v265 = 45;
      if (v262) {
        uint64_t v265 = 43;
      }
      v260(3, "%c[%{public}s %{public}s]:%i Failed to sign through CRS, Expecting 0x9000 got : 0x%04X", v265, v263, v264, 1045, v381);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v266 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v266, OS_LOG_TYPE_ERROR))
    {
      uint64_t v267 = object_getClass(v414);
      if (class_isMetaClass(v267)) {
        int v268 = 43;
      }
      else {
        int v268 = 45;
      }
      id v269 = object_getClassName(v414);
      id v270 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
      unsigned int v271 = [v412 status];
      *(_DWORD *)int buf = 67110146;
      int v473 = v268;
      __int16 v474 = 2082;
      v475 = v269;
      __int16 v476 = 2082;
      v477 = v270;
      __int16 v478 = 1024;
      int v479 = 1045;
      __int16 v480 = 1024;
      LODWORD(v481) = v271;
      _os_log_impl((void *)&_mh_execute_header, v266, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to sign through CRS, Expecting 0x9000 got : 0x%04X", buf, 0x28u);
    }

    id v272 = objc_alloc((Class)NSError);
    uint64_t v273 = [v412 status];
    NSErrorUserInfoKey v442 = NSLocalizedDescriptionKey;
    unsigned int v274 = [v412 status];
    uint64_t v275 = 0;
    NSErrorUserInfoKey v276 = "Unknown Error";
    while ((unsigned __int16)word_100303E80[v275] != v274)
    {
      v275 += 8;
      if (v275 == 192) {
        goto LABEL_245;
      }
    }
    NSErrorUserInfoKey v276 = *(const char **)&word_100303E80[v275 + 4];
LABEL_245:
    __int16 v298 = +[NSString stringWithUTF8String:v276];
    v443 = v298;
    NSErrorUserInfoKey v299 = +[NSDictionary dictionaryWithObjects:&v443 forKeys:&v442 count:1];
    id v33 = [v272 initWithDomain:@"GP" code:v273 userInfo:v299];

LABEL_246:
    id v54 = 0;
    goto LABEL_314;
  }
  uint64_t v212 = [v412 response];
  BOOL v213 = +[NFTLV TLVsWithData:v212];

  long long v426 = 0u;
  long long v427 = 0u;
  long long v424 = 0u;
  long long v425 = 0u;
  id v214 = v213;
  id v215 = [v214 countByEnumeratingWithState:&v424 objects:v441 count:16];
  if (!v215) {
    goto LABEL_182;
  }
  id v216 = v215;
  uint64_t v217 = *(void *)v425;
  while (2)
  {
    for (uint64_t i = 0; i != v216; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v425 != v217) {
        objc_enumerationMutation(v214);
      }
      CFStringRef v219 = *(void **)(*((void *)&v424 + 1) + 8 * i);
      if ([v219 tag] == 234)
      {
        uint64_t v282 = objc_opt_new();
        id v283 = [v219 value];
        id v423 = 0;
        NSErrorUserInfoKey v284 = sub_1000BB5A0((id *)v282, v409, v283, v399, &v423);
        id v285 = v423;
        if (v282) {
          id v286 = *(void **)(v282 + 16);
        }
        else {
          id v286 = 0;
        }
        id v287 = [v286 value];
        v402 = +[NFTrustSignResponse signResponseWithRawData:v284 counterValueData:v287];

        if (v285)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v288 = NFLogGetLogger();
          if (v288)
          {
            long long v289 = (void (*)(uint64_t, const char *, ...))v288;
            long long v290 = object_getClass(v414);
            BOOL v291 = class_isMetaClass(v290);
            v363 = object_getClassName(v414);
            v376 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
            uint64_t v292 = 45;
            if (v291) {
              uint64_t v292 = 43;
            }
            v289(3, "%c[%{public}s %{public}s]:%i Error in Opaque Data response : %{public}@", v292, v363, v376, 1071, v285);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          id v293 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
          {
            uint64_t v294 = object_getClass(v414);
            if (class_isMetaClass(v294)) {
              int v295 = 43;
            }
            else {
              int v295 = 45;
            }
            __int16 v296 = object_getClassName(v414);
            v297 = sel_getName("signWithKeyInSlot:AID:signRequest:paymentRequest:authorization:uid:response:");
            *(_DWORD *)int buf = 67110146;
            int v473 = v295;
            __int16 v474 = 2082;
            v475 = v296;
            __int16 v476 = 2082;
            v477 = v297;
            __int16 v478 = 1024;
            int v479 = 1071;
            __int16 v480 = 2114;
            id v481 = v285;
            _os_log_impl((void *)&_mh_execute_header, v293, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Error in Opaque Data response : %{public}@", buf, 0x2Cu);
          }

          id v33 = v285;
          id v54 = v33;
          goto LABEL_313;
        }
        if (!v402) {
          goto LABEL_183;
        }
        long long v421 = 0u;
        long long v422 = 0u;
        long long v419 = 0u;
        long long v420 = 0u;
        id v302 = v214;
        id v303 = (NFECommercePaymentResponse *)[v302 countByEnumeratingWithState:&v419 objects:v440 count:16];
        __int16 v304 = 0;
        if (v303)
        {
          SEL sela = *(SEL *)v420;
          do
          {
            for (unsigned int j = 0; j != v303; unsigned int j = (NFECommercePaymentResponse *)((char *)j + 1))
            {
              if (*(SEL *)v420 != sela) {
                objc_enumerationMutation(v302);
              }
              __int16 v306 = *(void **)(*((void *)&v419 + 1) + 8 * (void)j);
              if ([v306 tag] == 235)
              {
                id v307 = v306;

                __int16 v304 = v307;
              }
            }
            id v303 = (NFECommercePaymentResponse *)[v302 countByEnumeratingWithState:&v419 objects:v440 count:16];
          }
          while (v303);

          if (!v304)
          {
            id v303 = 0;
            goto LABEL_310;
          }
          int v308 = [v304 childWithTag:225];
          if (!v308)
          {
            sub_100140860(@"Expecting getOnlineDPANResponse");
            id v33 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_311;
          }
          id v302 = v308;
          uint64_t v309 = [v308 childWithTag:130];
          if (!v309)
          {
            sub_100140860(@"Expecting transactionID in getOnlineDPANResponse");
            id v33 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_311;
          }
          v310 = (void *)v309;
          __int16 v311 = objc_opt_new();
          v312 = [v310 asData];
          id v313 = [v312 NF_asHexString];
          [v311 setValue:v313 forKey:@"transactionIdentifier"];

          id v314 = [v304 value];
          [v311 setValue:v314 forKey:@"transactionData"];

          selb = (char *)v311;
          id v303 = [[NFECommercePaymentResponse alloc] initWithDictionary:v311];
          __int16 v315 = objc_opt_new();
          id v316 = [v414 rsaCertificate];

          if (v316)
          {
            id v317 = [v414 rsaCertificate];
            [v315 setObject:v317 forKeyedSubscript:@"RSA"];
          }
          v318 = [v414 eccCertificate];

          if (v318)
          {
            v319 = [v414 eccCertificate];
            [v315 setObject:v319 forKeyedSubscript:@"ECDSA"];
          }
          v320 = [v414 eckaCertificate];

          if (v320)
          {
            unsigned int v321 = [v414 eckaCertificate];
            [v315 setObject:v321 forKeyedSubscript:@"ECKA"];
          }
          NSErrorUserInfoKey v322 = [v414 eccCertificate];

          if (v322)
          {
            v323 = [v414 eccCertificate];
            [v315 setObject:v323 forKeyedSubscript:@"ECC"];
          }
          [(NFECommercePaymentResponse *)v303 setCerts:v315];
        }
LABEL_310:
        *a8 = +[NFTrustPaymentSignResponse paymentSignResponseWithSignResponse:v402 paymentResponse:v303];

        id v33 = 0;
LABEL_311:

        goto LABEL_312;
      }
    }
    id v216 = [v214 countByEnumeratingWithState:&v424 objects:v441 count:16];
    if (v216) {
      continue;
    }
    break;
  }
LABEL_182:

LABEL_183:
  sub_100140860(@"Could create NFTrustSignResponse");
  id v33 = (id)objc_claimAutoreleasedReturnValue();
LABEL_312:
  id v54 = 0;
LABEL_313:

LABEL_314:
  id v18 = v411;
  id v15 = v392;
  id v16 = v395;
LABEL_315:
  unsigned __int16 v82 = v408;
  id v42 = v409;
  id v132 = v404;
LABEL_316:

LABEL_317:
LABEL_318:

LABEL_319:
LABEL_320:

LABEL_321:
  id v20 = v412;
  uint64_t v39 = v410;
LABEL_322:

  int v34 = v20;
  int v35 = v54;
LABEL_16:

LABEL_21:

  return v33;
}

id *sub_1000C1418(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  self;
  uint64_t v7 = objc_opt_new();
  id v8 = (id *)v7;
  if (v7)
  {
    objc_storeStrong((id *)(v7 + 8), a3);
    objc_storeStrong(v8 + 2, a2);
  }

  return v8;
}

id sub_1000C1AB4(void *a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  id v172 = a1;
  if (a1)
  {
    id v5 = objc_opt_new();
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
      uint64_t v10 = 45;
      if (isMetaClass) {
        uint64_t v10 = 43;
      }
      v7(6, "%c[%{public}s %{public}s]:%i OS=%d", v10, ClassName, Name, 214, a3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    unint64_t v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = object_getClass(a1);
      if (class_isMetaClass(v12)) {
        int v13 = 43;
      }
      else {
        int v13 = 45;
      }
      *(_DWORD *)int buf = 67110146;
      int v240 = v13;
      __int16 v241 = 2082;
      id v242 = object_getClassName(a1);
      __int16 v243 = 2082;
      id v244 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
      __int16 v245 = 1024;
      int v246 = 214;
      __int16 v247 = 1024;
      unsigned int v248 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i OS=%d", buf, 0x28u);
    }

    if (!v4)
    {
      id v14 = +[NFTLV TLVWithTag:79 value:0];
      id v4 = [v14 asData];
    }
    id v15 = 0;
    for (char i = 0; ; char i = 1)
    {
      id v17 = [a1 sendCommandWithClass:128 instruction:242 p1:64 p2:i & 1 data:v4 expectedLength:0 toOS:a3 error:0];

      if (!v17) {
        break;
      }
      if ([v17 status] != 25360)
      {
        id v164 = v17;
        if ([v17 status] == 36864)
        {
          id v33 = [v17 response];
          [v5 appendData:v33];

          id v166 = (id)objc_opt_new();
          long long v189 = 0u;
          long long v190 = 0u;
          long long v191 = 0u;
          long long v192 = 0u;
          uint32_t v24 = +[NFTLV TLVsWithData:v5 requireDefiniteEncoding:1];
          id v169 = [v24 countByEnumeratingWithState:&v189 objects:v222 count:16];
          if (!v169) {
            goto LABEL_166;
          }
          uint64_t v167 = *(void *)v190;
          id v168 = v24;
          while (1)
          {
            uint64_t v34 = 0;
            do
            {
              if (*(void *)v190 != v167) {
                objc_enumerationMutation(v24);
              }
              uint64_t v170 = v34;
              id v35 = *(id *)(*((void *)&v189 + 1) + 8 * v34);
              int v180 = v35;
              if ([v35 tag] != 97)
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v129 = NFLogGetLogger();
                if (v129)
                {
                  id v130 = (void (*)(uint64_t, const char *, ...))v129;
                  long long v131 = object_getClass(v172);
                  BOOL v132 = class_isMetaClass(v131);
                  uint64_t v133 = object_getClassName(v172);
                  id v134 = sel_getName("crs_applicationsFromTLV:os:");
                  id v162 = [v180 tag];
                  uint64_t v135 = 45;
                  if (v132) {
                    uint64_t v135 = 43;
                  }
                  v130(3, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", v135, v133, v134, 58, v162);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                int v36 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                {
                  BOOL v136 = object_getClass(v172);
                  if (class_isMetaClass(v136)) {
                    int v137 = 43;
                  }
                  else {
                    int v137 = 45;
                  }
                  uint64_t v138 = object_getClassName(v172);
                  long long v139 = sel_getName("crs_applicationsFromTLV:os:");
                  unsigned int v140 = [v180 tag];
                  *(_DWORD *)int buf = 67110146;
                  int v240 = v137;
                  __int16 v241 = 2082;
                  id v242 = v138;
                  __int16 v243 = 2082;
                  id v244 = v139;
                  id v35 = v180;
                  __int16 v245 = 1024;
                  int v246 = 58;
                  __int16 v247 = 1024;
                  unsigned int v248 = v140;
                  _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected tag: 0x%x", buf, 0x28u);
                  int v141 = 0;
                  uint32_t v24 = v168;
                }
                else
                {
                  int v141 = 0;
                  uint32_t v24 = v168;
                  id v35 = v180;
                }
                goto LABEL_150;
              }
              uint64_t v171 = objc_opt_new();
              int v36 = objc_opt_new();
              id v37 = [objc_alloc((Class)NSNumber) initWithInteger:a3];
              [v36 setObject:v37 forKeyedSubscript:@"seOS"];

              long long v220 = 0u;
              long long v221 = 0u;
              long long v218 = 0u;
              long long v219 = 0u;
              NSErrorUserInfoKey v38 = [v35 children];
              id v176 = [(NFApplet *)v38 countByEnumeratingWithState:&v218 objects:buf count:16];
              if (!v176)
              {
                id v128 = v38;
LABEL_147:
                uint32_t v24 = v168;

                goto LABEL_149;
              }
              char v173 = 0;
              uint64_t v174 = *(void *)v219;
              id v175 = v38;
              do
              {
                uint64_t v39 = 0;
                do
                {
                  if (*(void *)v219 != v174)
                  {
                    uint64_t v40 = v39;
                    objc_enumerationMutation(v38);
                    uint64_t v39 = v40;
                  }
                  uint64_t v177 = v39;
                  id v41 = *(void **)(*((void *)&v218 + 1) + 8 * v39);
                  int v42 = [v41 tag];
                  if (v42 <= 161)
                  {
                    switch(v42)
                    {
                      case 128:
                        id v43 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v41 valueAsUnsignedLong]);
                        uint64_t v44 = v36;
                        id v45 = v43;
                        CFStringRef v46 = @"updateCounter";
                        goto LABEL_119;
                      case 129:
                        id v43 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v41 valueAsUnsignedLong]);
                        uint64_t v44 = v36;
                        id v45 = v43;
                        CFStringRef v46 = @"priority";
                        goto LABEL_119;
                      case 130:
                      case 131:
                      case 133:
                      case 134:
                        goto LABEL_132;
                      case 132:
                        id v43 = [v41 value];
                        uint64_t v44 = v36;
                        id v45 = v43;
                        CFStringRef v46 = @"moduleIdentifier";
                        goto LABEL_119;
                      case 135:
                        id v43 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v41 valueAsUnsignedLong]);
                        uint64_t v44 = v36;
                        id v45 = v43;
                        CFStringRef v46 = @"family";
                        goto LABEL_119;
                      default:
                        if (v42 == 79)
                        {
                          if (v173)
                          {
                            id v113 = [[NFApplet alloc] initWithDictionary:v36];
                            [v171 addObject:v113];

                            id v35 = v180;
                            [v36 removeAllObjects];
                          }
                          uint64_t v114 = [v41 value];
                          [v36 setObject:v114 forKeyedSubscript:@"identifier"];

                          [v36 setObject:@"embedded" forKeyedSubscript:@"seid"];
                          char v173 = 1;
                        }
                        else if (v42 == 147)
                        {
                          long long v199 = 0u;
                          long long v200 = 0u;
                          long long v197 = 0u;
                          long long v198 = 0u;
                          int v49 = [v41 value];
                          uint64_t v50 = +[NFTLV TLVsWithData:v49];

                          id obj = v50;
                          id v51 = [v50 countByEnumeratingWithState:&v197 objects:v224 count:16];
                          if (v51)
                          {
                            id v52 = v51;
                            uint64_t v53 = *(void *)v198;
                            uint64_t v178 = *(void *)v198;
                            do
                            {
                              id v54 = 0;
                              id v181 = v52;
                              do
                              {
                                if (*(void *)v198 != v53) {
                                  objc_enumerationMutation(obj);
                                }
                                uint64_t v55 = *(void **)(*((void *)&v197 + 1) + 8 * (void)v54);
                                if ([v55 tag] == 160)
                                {
                                  id v187 = v54;
                                  id v56 = [v55 children];
                                  id v57 = [v56 firstObject];

                                  long long v195 = 0u;
                                  long long v196 = 0u;
                                  long long v193 = 0u;
                                  long long v194 = 0u;
                                  id v185 = v57;
                                  BOOL v58 = [v57 children];
                                  id v59 = [v58 countByEnumeratingWithState:&v193 objects:v223 count:16];
                                  if (v59)
                                  {
                                    id v60 = v59;
                                    uint64_t v61 = *(void *)v194;
                                    do
                                    {
                                      for (unsigned int j = 0; j != v60; unsigned int j = (char *)j + 1)
                                      {
                                        if (*(void *)v194 != v61) {
                                          objc_enumerationMutation(v58);
                                        }
                                        int v63 = *(void **)(*((void *)&v193 + 1) + 8 * (void)j);
                                        if ([v63 tag] == 128)
                                        {
                                          id v64 = [v63 value];
                                          id v65 = [v64 length];

                                          if (v65 == (id)2)
                                          {
                                            id v66 = [v63 value];
                                            [v36 setObject:v66 forKeyedSubscript:@"typeFSystemCode"];
                                          }
                                        }
                                      }
                                      id v60 = [v58 countByEnumeratingWithState:&v193 objects:v223 count:16];
                                    }
                                    while (v60);
                                  }

                                  uint64_t v53 = v178;
                                  id v35 = v180;
                                  id v52 = v181;
                                  id v54 = v187;
                                }
                                id v54 = (char *)v54 + 1;
                              }
                              while (v54 != v52);
                              id v52 = [obj countByEnumeratingWithState:&v197 objects:v224 count:16];
                            }
                            while (v52);
                          }
                        }
                        break;
                    }
                    goto LABEL_132;
                  }
                  switch(v42)
                  {
                    case 162:
                      BOOL v47 = [v41 childWithTag:79];
                      id v43 = v47;
                      if (v47)
                      {
                        uint64_t v48 = [v47 value];
                        [v36 setObject:v48 forKeyedSubscript:@"groupHead"];

                        id v35 = v180;
                      }
                      goto LABEL_120;
                    case 163:
                      id v95 = objc_opt_new();
                      long long v213 = 0u;
                      long long v214 = 0u;
                      long long v215 = 0u;
                      long long v216 = 0u;
                      unsigned int v96 = [v41 childrenWithTag:79];
                      id v97 = [v96 countByEnumeratingWithState:&v213 objects:v228 count:16];
                      if (v97)
                      {
                        id v98 = v97;
                        uint64_t v99 = *(void *)v214;
                        do
                        {
                          for (k = 0; k != v98; k = (char *)k + 1)
                          {
                            if (*(void *)v214 != v99) {
                              objc_enumerationMutation(v96);
                            }
                            int v101 = [*(id *)(*((void *)&v213 + 1) + 8 * (void)k) value];
                            BOOL v102 = [v101 NF_asHexString];
                            [v95 addObject:v102];
                          }
                          id v98 = [v96 countByEnumeratingWithState:&v213 objects:v228 count:16];
                        }
                        while (v98);
                      }

                      id v103 = v36;
                      uint64_t v104 = v95;
                      CFStringRef v105 = @"groupMembers";
                      goto LABEL_114;
                    case 164:
                      id v95 = objc_opt_new();
                      long long v209 = 0u;
                      long long v210 = 0u;
                      long long v211 = 0u;
                      long long v212 = 0u;
                      id v106 = [v41 childrenWithTag:79];
                      id v107 = [v106 countByEnumeratingWithState:&v209 objects:v227 count:16];
                      if (v107)
                      {
                        id v108 = v107;
                        uint64_t v109 = *(void *)v210;
                        do
                        {
                          for (m = 0; m != v108; m = (char *)m + 1)
                          {
                            if (*(void *)v210 != v109) {
                              objc_enumerationMutation(v106);
                            }
                            uint64_t v111 = [*(id *)(*((void *)&v209 + 1) + 8 * (void)m) value];
                            int v112 = [v111 NF_asHexString];
                            [v95 addObject:v112];
                          }
                          id v108 = [v106 countByEnumeratingWithState:&v209 objects:v227 count:16];
                        }
                        while (v108);
                      }

                      id v103 = v36;
                      uint64_t v104 = v95;
                      CFStringRef v105 = @"referencedApps";
LABEL_114:
                      [v103 setObject:v104 forKeyedSubscript:v105];

                      goto LABEL_131;
                    case 165:
                      goto LABEL_132;
                    case 166:
                      uint64_t v73 = [v41 value];
                      [v36 setObject:v73 forKeyedSubscript:@"discretionary"];

                      id v179 = objc_opt_new();
                      long long v205 = 0u;
                      long long v206 = 0u;
                      long long v207 = 0u;
                      long long v208 = 0u;
                      id v186 = [v41 children];
                      id v74 = [v186 countByEnumeratingWithState:&v205 objects:v226 count:16];
                      if (!v74) {
                        goto LABEL_93;
                      }
                      id v75 = v74;
                      uint64_t v76 = *(void *)v206;
                      uint64_t v182 = *(void *)v206;
                      break;
                    default:
                      if (v42 == 196)
                      {
                        id v43 = [v41 value];
                        uint64_t v44 = v36;
                        id v45 = v43;
                        CFStringRef v46 = @"packageIdentifier";
LABEL_119:
                        [v44 setObject:v45 forKeyedSubscript:v46];
LABEL_120:

                        goto LABEL_132;
                      }
                      if (v42 != 40816) {
                        goto LABEL_132;
                      }
                      __int16 v217 = 0;
                      __int16 v67 = [v41 value];
                      id v68 = [v67 length];

                      if (v68 == (id)2)
                      {
                        uint64_t v69 = [v41 value];
                        [v69 getBytes:&v217 + 1 range:0];

                        long long v70 = +[NSNumber numberWithUnsignedChar:HIBYTE(v217)];
                        [v36 setObject:v70 forKeyedSubscript:@"lifecycleState"];

                        BOOL v71 = [v41 value];
                        [v71 getBytes:&v217 range:1];

                        BOOL v72 = +[NSNumber numberWithUnsignedChar:v217];
                        [v36 setObject:v72 forKeyedSubscript:@"activationState"];
                      }
                      else
                      {
                        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                        uint64_t v115 = NFLogGetLogger();
                        if (v115)
                        {
                          uint64_t v116 = (void (*)(uint64_t, const char *, ...))v115;
                          int v117 = object_getClass(v172);
                          BOOL v118 = class_isMetaClass(v117);
                          uint64_t v119 = object_getClassName(v172);
                          id v120 = sel_getName("crs_applicationsFromTLV:os:");
                          uint64_t v121 = [v41 value];
                          uint64_t v122 = 45;
                          if (v118) {
                            uint64_t v122 = 43;
                          }
                          v116(3, "%c[%{public}s %{public}s]:%i Invalid value: %{public}@", v122, v119, v120, 97, v121);
                        }
                        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                        BOOL v72 = NFSharedLogGetLogger();
                        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                        {
                          CFStringRef v123 = object_getClass(v172);
                          if (class_isMetaClass(v123)) {
                            int v124 = 43;
                          }
                          else {
                            int v124 = 45;
                          }
                          id v125 = object_getClassName(v172);
                          uint64_t v126 = sel_getName("crs_applicationsFromTLV:os:");
                          long long v127 = [v41 value];
                          *(_DWORD *)id v229 = 67110146;
                          int v230 = v124;
                          __int16 v231 = 2082;
                          int v232 = v125;
                          __int16 v233 = 2082;
                          char v234 = v126;
                          __int16 v235 = 1024;
                          int v236 = 97;
                          __int16 v237 = 2114;
                          id v238 = v127;
                          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid value: %{public}@", v229, 0x2Cu);
                        }
                      }

                      goto LABEL_131;
                  }
                  do
                  {
                    BOOL v77 = 0;
                    id obja = v75;
                    do
                    {
                      if (*(void *)v206 != v76) {
                        objc_enumerationMutation(v186);
                      }
                      int v78 = *(void **)(*((void *)&v205 + 1) + 8 * (void)v77);
                      if ([v78 tag] == 254)
                      {
                        long long v203 = 0u;
                        long long v204 = 0u;
                        long long v201 = 0u;
                        long long v202 = 0u;
                        id v79 = [v78 children];
                        id v80 = [v79 countByEnumeratingWithState:&v201 objects:v225 count:16];
                        if (v80)
                        {
                          id v81 = v80;
                          id v188 = v77;
                          uint64_t v82 = *(void *)v202;
                          do
                          {
                            for (n = 0; n != v81; n = (char *)n + 1)
                            {
                              if (*(void *)v202 != v82) {
                                objc_enumerationMutation(v79);
                              }
                              id v84 = *(void **)(*((void *)&v201 + 1) + 8 * (void)n);
                              if ([v84 tag] == 57152)
                              {
                                BOOL v85 = [v84 value];
                                id v86 = [v85 length];

                                if (v86 == (id)2)
                                {
                                  v229[0] = 0;
                                  id v87 = [v84 value];
                                  [v87 getBytes:v229 range:1];

                                  uint64_t v88 = +[NSNumber numberWithInt:v229[0] & 1];
                                  [v36 setObject:v88 forKeyedSubscript:@"authTransientSupport"];

                                  id v89 = +[NSNumber numberWithInt:(v229[0] >> 1) & 1];
                                  [v36 setObject:v89 forKeyedSubscript:@"terminateAppSupport"];

                                  uint64_t v90 = +[NSNumber numberWithInt:(v229[0] >> 2) & 1];
                                  [v36 setObject:v90 forKeyedSubscript:@"containerInstance"];

                                  uint64_t v91 = +[NSNumber numberWithInt:(v229[0] >> 3) & 1];
                                  [v36 setObject:v91 forKeyedSubscript:@"proxyInstance"];

                                  id v92 = +[NSNumber numberWithInt:(v229[0] >> 4) & 3];
                                  [v36 setObject:v92 forKeyedSubscript:@"groupActivationStyle"];

                                  id v93 = +[NSNumber numberWithInt:(v229[0] >> 6) & 1];
                                  [v36 setObject:v93 forKeyedSubscript:@"authTransientConfigurable"];
                                }
                              }
                            }
                            id v81 = [v79 countByEnumeratingWithState:&v201 objects:v225 count:16];
                          }
                          while (v81);
                          uint64_t v76 = v182;
                          id v75 = obja;
                          BOOL v77 = v188;
                        }
                      }
                      else
                      {
                        if ([v78 tag] != 221) {
                          goto LABEL_91;
                        }
                        id v79 = [v78 value];
                        unsigned int v94 = [v79 NF_asHexString];
                        [v179 addObject:v94];
                      }
LABEL_91:
                      BOOL v77 = (char *)v77 + 1;
                    }
                    while (v77 != v75);
                    id v75 = [v186 countByEnumeratingWithState:&v205 objects:v226 count:16];
                  }
                  while (v75);
LABEL_93:

                  if ([v179 count]) {
                    [v36 setObject:v179 forKeyedSubscript:@"multiSEApplicationGroup"];
                  }

LABEL_131:
                  id v35 = v180;
LABEL_132:
                  uint64_t v39 = v177 + 1;
                  NSErrorUserInfoKey v38 = v175;
                }
                while ((id)(v177 + 1) != v176);
                id v176 = [(NFApplet *)v175 countByEnumeratingWithState:&v218 objects:buf count:16];
              }
              while (v176);

              if (v173)
              {
                id v128 = [[NFApplet alloc] initWithDictionary:v36];
                [v171 addObject:v128];
                goto LABEL_147;
              }
              uint32_t v24 = v168;
LABEL_149:
              int v141 = v171;
LABEL_150:

              if (v141) {
                [v166 addObjectsFromArray:v141];
              }

              uint64_t v34 = v170 + 1;
            }
            while ((id)(v170 + 1) != v169);
            id v169 = [v24 countByEnumeratingWithState:&v189 objects:v222 count:16];
            if (!v169)
            {
LABEL_166:

              goto LABEL_167;
            }
          }
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v142 = NFLogGetLogger();
        if (v142)
        {
          __int16 v143 = (void (*)(uint64_t, const char *, ...))v142;
          id v144 = object_getClass(a1);
          BOOL v145 = class_isMetaClass(v144);
          int v146 = object_getClassName(a1);
          __int16 v147 = v5;
          __int16 v148 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
          uint64_t v163 = [v164 status];
          int v161 = v148;
          id v5 = v147;
          uint64_t v149 = 45;
          if (v145) {
            uint64_t v149 = 43;
          }
          v143(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x for OS %d", v149, v146, v161, 230, v163, a3);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint32_t v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          int v150 = v24;
          uint64_t v151 = object_getClass(a1);
          if (class_isMetaClass(v151)) {
            int v152 = 43;
          }
          else {
            int v152 = 45;
          }
          int v153 = object_getClassName(a1);
          __int16 v154 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
          unsigned int v155 = [v164 status];
          *(_DWORD *)int buf = 67110402;
          int v240 = v152;
          __int16 v241 = 2082;
          id v242 = v153;
          uint32_t v24 = v150;
          __int16 v243 = 2082;
          id v244 = v154;
          __int16 v245 = 1024;
          int v246 = 230;
          __int16 v247 = 1024;
          unsigned int v248 = v155;
          __int16 v249 = 1024;
          int v250 = a3;
          int v30 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x for OS %d";
          uint64_t v31 = v150;
          uint32_t v32 = 46;
          goto LABEL_164;
        }
        goto LABEL_165;
      }
      id v18 = [v17 response];
      [v5 appendData:v18];

      id v15 = v17;
    }
    id v164 = 0;
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v19 = NFLogGetLogger();
    if (v19)
    {
      id v20 = (void (*)(uint64_t, const char *, ...))v19;
      id v21 = object_getClass(a1);
      BOOL v22 = class_isMetaClass(v21);
      uint64_t v158 = object_getClassName(a1);
      id v160 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
      uint64_t v23 = 45;
      if (v22) {
        uint64_t v23 = 43;
      }
      v20(3, "%c[%{public}s %{public}s]:%i Command failed for OS %d", v23, v158, v160, 222, a3);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint32_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = v24;
      int v26 = object_getClass(a1);
      if (class_isMetaClass(v26)) {
        int v27 = 43;
      }
      else {
        int v27 = 45;
      }
      uint64_t v28 = object_getClassName(a1);
      uint64_t v29 = sel_getName("crs_getApplicationsWithSearchCriteria:os:");
      *(_DWORD *)int buf = 67110146;
      int v240 = v27;
      __int16 v241 = 2082;
      id v242 = v28;
      uint32_t v24 = v25;
      __int16 v243 = 2082;
      id v244 = v29;
      __int16 v245 = 1024;
      int v246 = 222;
      __int16 v247 = 1024;
      unsigned int v248 = a3;
      int v30 = "%c[%{public}s %{public}s]:%i Command failed for OS %d";
      uint64_t v31 = v25;
      uint32_t v32 = 40;
LABEL_164:
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
    }
LABEL_165:
    id v166 = 0;
    goto LABEL_166;
  }
  id v166 = 0;
LABEL_167:

  return v166;
}

uint64_t sub_1000C2FF0(void *a1)
{
  if (!a1) {
    return 0;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_deactivateAll");
    uint64_t v7 = 45;
    if (isMetaClass) {
      uint64_t v7 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i ", v7, ClassName, Name, 249);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = object_getClass(a1);
    if (class_isMetaClass(v9)) {
      int v10 = 43;
    }
    else {
      int v10 = 45;
    }
    *(_DWORD *)int buf = 67109890;
    int v45 = v10;
    __int16 v46 = 2082;
    BOOL v47 = object_getClassName(a1);
    __int16 v48 = 2082;
    int v49 = sel_getName("crs_deactivateAll");
    __int16 v50 = 1024;
    int v51 = 249;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  id v11 = [objc_alloc((Class)NSData) initWithBytes:&unk_100283918 length:2];
  uint64_t v12 = [a1 sendCommandWithClass:128 instruction:240 p1:1 p2:0 data:v11 error:0];

  if (!v12)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v14 = NFLogGetLogger();
    if (v14)
    {
      id v15 = (void (*)(uint64_t, const char *, ...))v14;
      id v16 = object_getClass(a1);
      BOOL v17 = class_isMetaClass(v16);
      id v18 = object_getClassName(a1);
      int v42 = sel_getName("crs_deactivateAll");
      uint64_t v19 = 45;
      if (v17) {
        uint64_t v19 = 43;
      }
      v15(3, "%c[%{public}s %{public}s]:%i Command failed", v19, v18, v42, 259);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v20 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    id v21 = object_getClass(a1);
    if (class_isMetaClass(v21)) {
      int v22 = 43;
    }
    else {
      int v22 = 45;
    }
    uint64_t v23 = object_getClassName(a1);
    uint32_t v24 = sel_getName("crs_deactivateAll");
    *(_DWORD *)int buf = 67109890;
    int v45 = v22;
    __int16 v46 = 2082;
    BOOL v47 = v23;
    __int16 v48 = 2082;
    int v49 = v24;
    __int16 v50 = 1024;
    int v51 = 259;
    uint64_t v25 = "%c[%{public}s %{public}s]:%i Command failed";
    int v26 = v20;
    uint32_t v27 = 34;
    goto LABEL_32;
  }
  if ([v12 status] != 36864)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v28 = NFLogGetLogger();
    if (v28)
    {
      uint64_t v29 = (void (*)(uint64_t, const char *, ...))v28;
      int v30 = object_getClass(a1);
      BOOL v31 = class_isMetaClass(v30);
      uint32_t v32 = object_getClassName(a1);
      id v33 = sel_getName("crs_deactivateAll");
      uint64_t v43 = [v12 status];
      uint64_t v34 = 45;
      if (v31) {
        uint64_t v34 = 43;
      }
      v29(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v34, v32, v33, 264, v43);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v20 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_33;
    }
    id v35 = object_getClass(a1);
    if (class_isMetaClass(v35)) {
      int v36 = 43;
    }
    else {
      int v36 = 45;
    }
    id v37 = object_getClassName(a1);
    NSErrorUserInfoKey v38 = sel_getName("crs_deactivateAll");
    unsigned int v39 = [v12 status];
    *(_DWORD *)int buf = 67110146;
    int v45 = v36;
    __int16 v46 = 2082;
    BOOL v47 = v37;
    __int16 v48 = 2082;
    int v49 = v38;
    __int16 v50 = 1024;
    int v51 = 264;
    __int16 v52 = 1024;
    unsigned int v53 = v39;
    uint64_t v25 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
    int v26 = v20;
    uint32_t v27 = 40;
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
LABEL_33:

    uint64_t v13 = 0;
    goto LABEL_34;
  }
  uint64_t v13 = 1;
LABEL_34:

  return v13;
}

uint64_t sub_1000C3440(void *a1, void *a2, unsigned int a3, uint64_t a4)
{
  id v6 = a2;
  uint64_t v7 = v6;
  if (!a1)
  {
LABEL_15:
    uint64_t v24 = 0;
    goto LABEL_115;
  }
  if (![v6 count])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v16 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("crs_setApplications:isSelectable:groupActivationStyle:");
      uint64_t v20 = 45;
      if (isMetaClass) {
        uint64_t v20 = 43;
      }
      v16(3, "%c[%{public}s %{public}s]:%i Empty applets", v20, ClassName, Name, 370);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v22 = object_getClass(a1);
      if (class_isMetaClass(v22)) {
        int v23 = 43;
      }
      else {
        int v23 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v154 = v23;
      __int16 v155 = 2082;
      BOOL v156 = object_getClassName(a1);
      __int16 v157 = 2082;
      uint64_t v158 = sel_getName("crs_setApplications:isSelectable:groupActivationStyle:");
      __int16 v159 = 1024;
      int v160 = 370;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Empty applets", buf, 0x22u);
    }

    goto LABEL_15;
  }
  id v135 = v7;
  id v8 = [a1 handle];
  uint64_t v9 = [v8 info];
  id v10 = [v9 seType];

  if (v10 == (id)2)
  {
    id v11 = [a1 handle];
    uint64_t v12 = [v11 info];
    uint64_t v13 = [v12 sequenceCounter];
    BOOL v14 = (unint64_t)[v13 unsignedIntegerValue] < 0x321;
  }
  else
  {
    BOOL v14 = 0;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v25 = NFLogGetLogger();
  id v136 = a1;
  if (v25)
  {
    int v26 = (void (*)(uint64_t, const char *, ...))v25;
    uint32_t v27 = object_getClass(a1);
    BOOL v28 = class_isMetaClass(v27);
    uint64_t v29 = object_getClassName(a1);
    int v30 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    +[NFApplet aidListForPrinting:v135];
    v32 = BOOL v31 = v7;
    long long v127 = v30;
    a1 = v136;
    uint64_t v33 = 45;
    if (v28) {
      uint64_t v33 = 43;
    }
    v26(6, "%c[%{public}s %{public}s]:%i AIDs=%{public}@ isSelectable=%d groupType=%d custom=%d", v33, v29, v127, 275, v32, a3, a4, v14);

    uint64_t v7 = v31;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v34 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    id v35 = object_getClass(a1);
    if (class_isMetaClass(v35)) {
      int v36 = 43;
    }
    else {
      int v36 = 45;
    }
    id v37 = object_getClassName(a1);
    NSErrorUserInfoKey v38 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    unsigned int v39 = +[NFApplet aidListForPrinting:v135];
    *(_DWORD *)int buf = 67110914;
    int v154 = v36;
    __int16 v155 = 2082;
    BOOL v156 = v37;
    __int16 v157 = 2082;
    uint64_t v158 = v38;
    __int16 v159 = 1024;
    int v160 = 275;
    __int16 v161 = 2114;
    id v162 = v39;
    __int16 v163 = 1024;
    unsigned int v164 = a3;
    __int16 v165 = 1024;
    int v166 = a4;
    __int16 v167 = 1024;
    BOOL v168 = v14;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i AIDs=%{public}@ isSelectable=%d groupType=%d custom=%d", buf, 0x3Eu);

    a1 = v136;
  }

  if (!v14) {
    goto LABEL_33;
  }
  if (!a3)
  {
    if (a4 < 3)
    {
      char v40 = 8 * a4;
      unsigned int v41 = 8751360;
      goto LABEL_32;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v103 = NFLogGetLogger();
    if (v103)
    {
      uint64_t v104 = (void (*)(uint64_t, const char *, ...))v103;
      CFStringRef v105 = object_getClass(a1);
      BOOL v106 = class_isMetaClass(v105);
      id v107 = object_getClassName(a1);
      id v130 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      uint64_t v108 = 45;
      if (v106) {
        uint64_t v108 = 43;
      }
      v104(3, "%c[%{public}s %{public}s]:%i Invalid activation style: %d", v108, v107, v130, 308, a4);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v98 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
    {
LABEL_99:

      uint64_t v24 = 0;
      goto LABEL_114;
    }
    uint64_t v109 = object_getClass(a1);
    if (class_isMetaClass(v109)) {
      int v110 = 43;
    }
    else {
      int v110 = 45;
    }
    uint64_t v111 = object_getClassName(a1);
    int v112 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    *(_DWORD *)int buf = 67110146;
    int v154 = v110;
    __int16 v155 = 2082;
    BOOL v156 = v111;
    __int16 v157 = 2082;
    uint64_t v158 = v112;
    __int16 v159 = 1024;
    int v160 = 308;
    __int16 v161 = 1024;
    LODWORD(v162) = a4;
LABEL_98:
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid activation style: %d", buf, 0x28u);
    goto LABEL_99;
  }
  if (a4 >= 3)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v93 = NFLogGetLogger();
    if (v93)
    {
      unsigned int v94 = (void (*)(uint64_t, const char *, ...))v93;
      id v95 = object_getClass(a1);
      BOOL v96 = class_isMetaClass(v95);
      id v125 = object_getClassName(a1);
      uint64_t v129 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      uint64_t v97 = 45;
      if (v96) {
        uint64_t v97 = 43;
      }
      v94(3, "%c[%{public}s %{public}s]:%i Invalid activation style: %d", v97, v125, v129, 293, a4);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v98 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR)) {
      goto LABEL_99;
    }
    uint64_t v99 = object_getClass(a1);
    if (class_isMetaClass(v99)) {
      int v100 = 43;
    }
    else {
      int v100 = 45;
    }
    int v101 = object_getClassName(a1);
    BOOL v102 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
    *(_DWORD *)int buf = 67110146;
    int v154 = v100;
    __int16 v155 = 2082;
    BOOL v156 = v101;
    __int16 v157 = 2082;
    uint64_t v158 = v102;
    __int16 v159 = 1024;
    int v160 = 293;
    __int16 v161 = 1024;
    LODWORD(v162) = a4;
    goto LABEL_98;
  }
  char v40 = 8 * a4;
  unsigned int v41 = 8882945;
LABEL_32:
  a3 = v41 >> v40;
LABEL_33:
  id v134 = v7;
  int v42 = objc_opt_new();
  long long v139 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  id obj = v135;
  id v43 = [obj countByEnumeratingWithState:&v139 objects:buf count:16];
  if (!v43)
  {
    int v45 = 0;
    goto LABEL_47;
  }
  id v44 = v43;
  int v45 = 0;
  uint64_t v46 = *(void *)v140;
  while (2)
  {
    for (char i = 0; i != v44; char i = (char *)i + 1)
    {
      if (*(void *)v140 != v46) {
        objc_enumerationMutation(obj);
      }
      __int16 v48 = [*(id *)(*((void *)&v139 + 1) + 8 * i) identifierAsData];
      int v49 = +[NFTLV TLVWithTag:79 value:v48];

      __int16 v50 = [v49 asData];
      if ([v42 length])
      {
        int v51 = (char *)[v42 length];
        if (&v51[(void)[v50 length]] >= (char *)0x100)
        {
          __int16 v52 = [v136 sendCommandWithClass:128 instruction:240 p1:1 p2:a3 data:v42 error:0];

          if (v52)
          {
            if ([v52 status] == 36864)
            {
              uint64_t v53 = objc_opt_new();

              int v45 = v52;
              int v42 = (void *)v53;
              goto LABEL_43;
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v81 = NFLogGetLogger();
            if (v81)
            {
              uint64_t v82 = (void (*)(uint64_t, const char *, ...))v81;
              id v83 = object_getClass(v136);
              BOOL v84 = class_isMetaClass(v83);
              BOOL v85 = object_getClassName(v136);
              id v86 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
              uint64_t v133 = [v52 status];
              uint64_t v87 = 45;
              if (v84) {
                uint64_t v87 = 43;
              }
              v82(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v87, v85, v86, 336, v133);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v73 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
LABEL_79:

              v143[0] = 0;
              uint64_t v7 = v134;
              goto LABEL_113;
            }
            uint64_t v88 = object_getClass(v136);
            if (class_isMetaClass(v88)) {
              int v89 = 43;
            }
            else {
              int v89 = 45;
            }
            uint64_t v90 = object_getClassName(v136);
            uint64_t v91 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
            unsigned int v92 = [v52 status];
            *(_DWORD *)__int16 v143 = 67110146;
            int v144 = v89;
            __int16 v145 = 2082;
            int v146 = v90;
            __int16 v147 = 2082;
            __int16 v148 = v91;
            __int16 v149 = 1024;
            int v150 = 336;
            __int16 v151 = 1024;
            unsigned int v152 = v92;
            int v78 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
            id v79 = v73;
            uint32_t v80 = 40;
          }
          else
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v67 = NFLogGetLogger();
            if (v67)
            {
              id v68 = (void (*)(uint64_t, const char *, ...))v67;
              uint64_t v69 = object_getClass(v136);
              BOOL v70 = class_isMetaClass(v69);
              BOOL v71 = object_getClassName(v136);
              id v128 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
              uint64_t v72 = 45;
              if (v70) {
                uint64_t v72 = 43;
              }
              v68(3, "%c[%{public}s %{public}s]:%i Command failed", v72, v71, v128, 332);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v73 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
              goto LABEL_79;
            }
            id v74 = object_getClass(v136);
            if (class_isMetaClass(v74)) {
              int v75 = 43;
            }
            else {
              int v75 = 45;
            }
            uint64_t v76 = object_getClassName(v136);
            BOOL v77 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
            *(_DWORD *)__int16 v143 = 67109890;
            int v144 = v75;
            __int16 v145 = 2082;
            int v146 = v76;
            __int16 v147 = 2082;
            __int16 v148 = v77;
            __int16 v149 = 1024;
            int v150 = 332;
            int v78 = "%c[%{public}s %{public}s]:%i Command failed";
            id v79 = v73;
            uint32_t v80 = 34;
          }
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, v78, v143, v80);
          goto LABEL_79;
        }
      }
LABEL_43:
      [v42 appendData:v50];
    }
    id v44 = [obj countByEnumeratingWithState:&v139 objects:buf count:16];
    if (v44) {
      continue;
    }
    break;
  }
LABEL_47:

  if (![v42 length])
  {
    __int16 v52 = v45;
    uint64_t v7 = v134;
    goto LABEL_101;
  }
  __int16 v52 = [v136 sendCommandWithClass:128 instruction:240 p1:1 p2:a3 data:v42 error:0];

  uint64_t v7 = v134;
  if (v52)
  {
    if ([v52 status] != 36864)
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v54 = NFLogGetLogger();
      if (v54)
      {
        uint64_t v55 = (void (*)(uint64_t, const char *, ...))v54;
        id v56 = object_getClass(v136);
        BOOL v57 = class_isMetaClass(v56);
        BOOL v58 = object_getClassName(v136);
        id v59 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
        uint64_t v132 = [v52 status];
        uint64_t v60 = 45;
        if (v57) {
          uint64_t v60 = 43;
        }
        v55(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v60, v58, v59, 358, v132);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v61 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        id v62 = object_getClass(v136);
        if (class_isMetaClass(v62)) {
          int v63 = 43;
        }
        else {
          int v63 = 45;
        }
        id v64 = object_getClassName(v136);
        id v65 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
        unsigned int v66 = [v52 status];
        *(_DWORD *)__int16 v143 = 67110146;
        int v144 = v63;
        __int16 v145 = 2082;
        int v146 = v64;
        __int16 v147 = 2082;
        __int16 v148 = v65;
        __int16 v149 = 1024;
        int v150 = 358;
        __int16 v151 = 1024;
        unsigned int v152 = v66;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v143, 0x28u);
      }

      goto LABEL_112;
    }
LABEL_101:
    v143[0] = 1;
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v113 = NFLogGetLogger();
    if (v113)
    {
      uint64_t v114 = (void (*)(uint64_t, const char *, ...))v113;
      uint64_t v115 = object_getClass(v136);
      BOOL v116 = class_isMetaClass(v115);
      int v117 = object_getClassName(v136);
      long long v131 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      uint64_t v118 = 45;
      if (v116) {
        uint64_t v118 = 43;
      }
      v114(3, "%c[%{public}s %{public}s]:%i Command failed", v118, v117, v131, 354);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v119 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      id v120 = object_getClass(v136);
      if (class_isMetaClass(v120)) {
        int v121 = 43;
      }
      else {
        int v121 = 45;
      }
      uint64_t v122 = object_getClassName(v136);
      CFStringRef v123 = sel_getName("_crs_setApplications:isSelectable:groupActivationStyle:");
      *(_DWORD *)__int16 v143 = 67109890;
      int v144 = v121;
      __int16 v145 = 2082;
      int v146 = v122;
      __int16 v147 = 2082;
      __int16 v148 = v123;
      __int16 v149 = 1024;
      int v150 = 354;
      _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", v143, 0x22u);
    }

    __int16 v52 = 0;
LABEL_112:
    v143[0] = 0;
  }
LABEL_113:

  uint64_t v24 = v143[0];
LABEL_114:

LABEL_115:
  return v24;
}

uint64_t sub_1000C41C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v5 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("crs_markApplicationForDelete:");
      id v10 = [v3 identifier];
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v5(5, "%c[%{public}s %{public}s]:%i AID=%{public}@", v11, ClassName, Name, 381, v10);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = object_getClass((id)a1);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      id v15 = object_getClassName((id)a1);
      id v16 = sel_getName("crs_markApplicationForDelete:");
      BOOL v17 = [v3 identifier];
      *(_DWORD *)int buf = 67110146;
      int v54 = v14;
      __int16 v55 = 2082;
      id v56 = v15;
      __int16 v57 = 2082;
      BOOL v58 = v16;
      __int16 v59 = 1024;
      int v60 = 381;
      __int16 v61 = 2114;
      id v62 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i AID=%{public}@", buf, 0x2Cu);
    }
    id v18 = [(id)a1 delegate];
    [v18 markApplicationForDelete:v3];

    uint64_t v19 = [v3 identifierAsData];
    uint64_t v20 = +[NFTLV TLVWithTag:79 value:v19];

    id v21 = [v20 asData];
    int v22 = [(id)a1 sendCommandWithClass:128 instruction:246 p1:0 p2:0 data:v21 error:0];

    if (v22)
    {
      if ([v22 status] == 36864
        || [v22 status] == 27266
        && ([v3 identifierAsData],
            id v37 = objc_claimAutoreleasedReturnValue(),
            v37,
            !v37))
      {
        a1 = 1;
LABEL_36:

        goto LABEL_37;
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v38 = NFLogGetLogger();
      if (v38)
      {
        unsigned int v39 = (void (*)(uint64_t, const char *, ...))v38;
        char v40 = object_getClass((id)a1);
        BOOL v41 = class_isMetaClass(v40);
        int v42 = object_getClassName((id)a1);
        id v43 = sel_getName("crs_markApplicationForDelete:");
        uint64_t v52 = [v22 status];
        uint64_t v44 = 45;
        if (v41) {
          uint64_t v44 = 43;
        }
        v39(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v44, v42, v43, 407, v52);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v29 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
LABEL_35:

        a1 = 0;
        goto LABEL_36;
      }
      int v45 = object_getClass((id)a1);
      if (class_isMetaClass(v45)) {
        int v46 = 43;
      }
      else {
        int v46 = 45;
      }
      BOOL v47 = object_getClassName((id)a1);
      __int16 v48 = sel_getName("crs_markApplicationForDelete:");
      unsigned int v49 = [v22 status];
      *(_DWORD *)int buf = 67110146;
      int v54 = v46;
      __int16 v55 = 2082;
      id v56 = v47;
      __int16 v57 = 2082;
      BOOL v58 = v48;
      __int16 v59 = 1024;
      int v60 = 407;
      __int16 v61 = 1024;
      LODWORD(v62) = v49;
      uint64_t v34 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
      id v35 = v29;
      uint32_t v36 = 40;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v23 = NFLogGetLogger();
      if (v23)
      {
        uint64_t v24 = (void (*)(uint64_t, const char *, ...))v23;
        uint64_t v25 = object_getClass((id)a1);
        BOOL v26 = class_isMetaClass(v25);
        uint32_t v27 = object_getClassName((id)a1);
        int v51 = sel_getName("crs_markApplicationForDelete:");
        uint64_t v28 = 45;
        if (v26) {
          uint64_t v28 = 43;
        }
        v24(3, "%c[%{public}s %{public}s]:%i Command failed", v28, v27, v51, 396);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v29 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      int v30 = object_getClass((id)a1);
      if (class_isMetaClass(v30)) {
        int v31 = 43;
      }
      else {
        int v31 = 45;
      }
      uint32_t v32 = object_getClassName((id)a1);
      uint64_t v33 = sel_getName("crs_markApplicationForDelete:");
      *(_DWORD *)int buf = 67109890;
      int v54 = v31;
      __int16 v55 = 2082;
      id v56 = v32;
      __int16 v57 = 2082;
      BOOL v58 = v33;
      __int16 v59 = 1024;
      int v60 = 396;
      uint64_t v34 = "%c[%{public}s %{public}s]:%i Command failed";
      id v35 = v29;
      uint32_t v36 = 34;
    }
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, v34, buf, v36);
    goto LABEL_35;
  }
LABEL_37:

  return a1;
}

uint64_t sub_1000C46D0(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v6 = a3;
  id v7 = a2;
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v9 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
    uint64_t v13 = 45;
    if (isMetaClass) {
      uint64_t v13 = 43;
    }
    v9(5, "%c[%{public}s %{public}s]:%i ", v13, ClassName, Name, 420);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = object_getClass(a1);
    if (class_isMetaClass(v15)) {
      int v16 = 43;
    }
    else {
      int v16 = 45;
    }
    *(_DWORD *)int buf = 67109890;
    int v52 = v16;
    __int16 v53 = 2082;
    int v54 = object_getClassName(a1);
    __int16 v55 = 2082;
    id v56 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
    __int16 v57 = 1024;
    int v58 = 420;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  BOOL v17 = [a1 delegate];
  [v17 markApplicationForDelete:0];

  id v18 = [v7 mutableCopy];
  [v18 appendData:v6];

  id v50 = 0;
  uint64_t v19 = [a1 sendCommandWithClass:128 instruction:226 p1:176 p2:0 data:v18 error:&v50];
  id v20 = v50;
  if (v19)
  {
    if ([v19 status] == 36864)
    {
      uint64_t v21 = 0;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v33 = NFLogGetLogger();
      if (v33)
      {
        uint64_t v34 = (void (*)(uint64_t, const char *, ...))v33;
        id v35 = object_getClass(a1);
        BOOL v36 = class_isMetaClass(v35);
        id v37 = object_getClassName(a1);
        uint64_t v38 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
        uint64_t v49 = [v19 status];
        uint64_t v39 = 45;
        if (v36) {
          uint64_t v39 = 43;
        }
        v34(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v39, v37, v38, 446, v49);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      char v40 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        BOOL v41 = object_getClass(a1);
        if (class_isMetaClass(v41)) {
          int v42 = 43;
        }
        else {
          int v42 = 45;
        }
        id v43 = object_getClassName(a1);
        uint64_t v44 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
        unsigned int v45 = [v19 status];
        *(_DWORD *)int buf = 67110146;
        int v52 = v42;
        __int16 v53 = 2082;
        int v54 = v43;
        __int16 v55 = 2082;
        id v56 = v44;
        __int16 v57 = 1024;
        int v58 = 446;
        __int16 v59 = 1024;
        unsigned int v60 = v45;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      uint64_t v21 = 8;
      if ([v19 status] != 27010)
      {
        if ([v19 status] == 27013) {
          uint64_t v21 = 8;
        }
        else {
          uint64_t v21 = 6;
        }
      }
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v22 = NFLogGetLogger();
    if (v22)
    {
      uint64_t v23 = (void (*)(uint64_t, const char *, ...))v22;
      uint64_t v24 = object_getClass(a1);
      BOOL v25 = class_isMetaClass(v24);
      BOOL v26 = object_getClassName(a1);
      __int16 v48 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
      uint64_t v27 = 45;
      if (v25) {
        uint64_t v27 = 43;
      }
      v23(3, "%c[%{public}s %{public}s]:%i Command failed", v27, v26, v48, 438);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v28 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = object_getClass(a1);
      if (class_isMetaClass(v29)) {
        int v30 = 43;
      }
      else {
        int v30 = 45;
      }
      int v31 = object_getClassName(a1);
      uint32_t v32 = sel_getName("crs_setEntangledAuthorizationRandom:mac:");
      *(_DWORD *)int buf = 67109890;
      int v52 = v30;
      __int16 v53 = 2082;
      int v54 = v31;
      __int16 v55 = 2082;
      id v56 = v32;
      __int16 v57 = 1024;
      int v58 = 438;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if ([v20 code]) {
      uint64_t v21 = (uint64_t)[v20 code];
    }
    else {
      uint64_t v21 = 16;
    }
  }

  return v21;
}

uint64_t sub_1000C4BCC(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v6 = a3;
  id v7 = a2;
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v9 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_setAuthorizationRandom:mac:");
    uint64_t v13 = 45;
    if (isMetaClass) {
      uint64_t v13 = 43;
    }
    v9(5, "%c[%{public}s %{public}s]:%i ", v13, ClassName, Name, 460);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = object_getClass(a1);
    if (class_isMetaClass(v15)) {
      int v16 = 43;
    }
    else {
      int v16 = 45;
    }
    *(_DWORD *)int buf = 67109890;
    int v54 = v16;
    __int16 v55 = 2082;
    id v56 = object_getClassName(a1);
    __int16 v57 = 2082;
    int v58 = sel_getName("crs_setAuthorizationRandom:mac:");
    __int16 v59 = 1024;
    int v60 = 460;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  BOOL v17 = [a1 delegate];
  [v17 markApplicationForDelete:0];

  id v18 = +[NFTLV TLVWithTag:216 value:v7];

  uint64_t v19 = [v18 asData];
  id v20 = [v19 mutableCopy];

  [v20 appendData:v6];
  id v52 = 0;
  uint64_t v21 = [a1 sendCommandWithClass:128 instruction:226 p1:176 p2:0 data:v20 error:&v52];
  id v22 = v52;
  if (v21)
  {
    if ([v21 status] == 36864)
    {
      uint64_t v23 = 0;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v35 = NFLogGetLogger();
      if (v35)
      {
        BOOL v36 = (void (*)(uint64_t, const char *, ...))v35;
        id v37 = object_getClass(a1);
        BOOL v38 = class_isMetaClass(v37);
        uint64_t v39 = object_getClassName(a1);
        char v40 = sel_getName("crs_setAuthorizationRandom:mac:");
        uint64_t v51 = [v21 status];
        uint64_t v41 = 45;
        if (v38) {
          uint64_t v41 = 43;
        }
        v36(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v41, v39, v40, 487, v51);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v42 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        id v43 = object_getClass(a1);
        if (class_isMetaClass(v43)) {
          int v44 = 43;
        }
        else {
          int v44 = 45;
        }
        unsigned int v45 = object_getClassName(a1);
        int v46 = sel_getName("crs_setAuthorizationRandom:mac:");
        unsigned int v47 = [v21 status];
        *(_DWORD *)int buf = 67110146;
        int v54 = v44;
        __int16 v55 = 2082;
        id v56 = v45;
        __int16 v57 = 2082;
        int v58 = v46;
        __int16 v59 = 1024;
        int v60 = 487;
        __int16 v61 = 1024;
        unsigned int v62 = v47;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      uint64_t v23 = 8;
      if ([v21 status] != 27010)
      {
        if ([v21 status] == 27013) {
          uint64_t v23 = 8;
        }
        else {
          uint64_t v23 = 6;
        }
      }
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFLogGetLogger();
    if (v24)
    {
      BOOL v25 = (void (*)(uint64_t, const char *, ...))v24;
      BOOL v26 = object_getClass(a1);
      BOOL v27 = class_isMetaClass(v26);
      uint64_t v28 = object_getClassName(a1);
      id v50 = sel_getName("crs_setAuthorizationRandom:mac:");
      uint64_t v29 = 45;
      if (v27) {
        uint64_t v29 = 43;
      }
      v25(3, "%c[%{public}s %{public}s]:%i Command failed", v29, v28, v50, 479);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v30 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      int v31 = object_getClass(a1);
      if (class_isMetaClass(v31)) {
        int v32 = 43;
      }
      else {
        int v32 = 45;
      }
      uint64_t v33 = object_getClassName(a1);
      uint64_t v34 = sel_getName("crs_setAuthorizationRandom:mac:");
      *(_DWORD *)int buf = 67109890;
      int v54 = v32;
      __int16 v55 = 2082;
      id v56 = v33;
      __int16 v57 = 2082;
      int v58 = v34;
      __int16 v59 = 1024;
      int v60 = 479;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if ([v22 code]) {
      uint64_t v23 = (uint64_t)[v22 code];
    }
    else {
      uint64_t v23 = 16;
    }
  }

  return v23;
}

uint64_t sub_1000C5100(void *a1, unsigned int a2, void *a3, void *a4)
{
  if (!a1) {
    return 0;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v8 = a4;
  id v9 = a3;
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    uint64_t v11 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
    uint64_t v14 = 45;
    if (isMetaClass) {
      uint64_t v14 = 43;
    }
    v11(6, "%c[%{public}s %{public}s]:%i t=%d", v14, ClassName, Name, 501, a2);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = object_getClass(a1);
    if (class_isMetaClass(v16)) {
      int v17 = 43;
    }
    else {
      int v17 = 45;
    }
    *(_DWORD *)int buf = 67110146;
    int v57 = v17;
    __int16 v58 = 2082;
    __int16 v59 = object_getClassName(a1);
    __int16 v60 = 2082;
    __int16 v61 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
    __int16 v62 = 1024;
    int v63 = 501;
    __int16 v64 = 1024;
    unsigned int v65 = a2;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i t=%d", buf, 0x28u);
  }

  __int16 v55 = __rev16(a2);
  id v18 = [objc_alloc((Class)NSMutableData) initWithBytes:&v55 length:2];
  [v18 appendData:v9];

  uint64_t v19 = +[NFTLV TLVWithTag:210 value:v18];
  id v20 = [v19 asData];
  id v21 = [v20 mutableCopy];

  [v21 appendData:v8];
  id v54 = 0;
  id v22 = [a1 sendCommandWithClass:128 instruction:226 p1:176 p2:0 data:v21 error:&v54];
  id v23 = v54;
  if (v22)
  {
    if ([v22 status] == 36864)
    {
      uint64_t v24 = 0;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v36 = NFLogGetLogger();
      if (v36)
      {
        id v37 = (void (*)(uint64_t, const char *, ...))v36;
        BOOL v38 = object_getClass(a1);
        BOOL v39 = class_isMetaClass(v38);
        char v40 = object_getClassName(a1);
        uint64_t v41 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
        uint64_t v53 = [v22 status];
        uint64_t v42 = 45;
        if (v39) {
          uint64_t v42 = 43;
        }
        v37(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v42, v40, v41, 530, v53);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v43 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        int v44 = object_getClass(a1);
        if (class_isMetaClass(v44)) {
          int v45 = 43;
        }
        else {
          int v45 = 45;
        }
        int v46 = object_getClassName(a1);
        unsigned int v47 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
        unsigned int v48 = [v22 status];
        *(_DWORD *)int buf = 67110146;
        int v57 = v45;
        __int16 v58 = 2082;
        __int16 v59 = v46;
        __int16 v60 = 2082;
        __int16 v61 = v47;
        __int16 v62 = 1024;
        int v63 = 530;
        __int16 v64 = 1024;
        unsigned int v65 = v48;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      if ([v22 status] == 27010)
      {
        uint64_t v24 = 8;
      }
      else
      {
        uint64_t v24 = 8;
        if ([v22 status] != 27013)
        {
          if ([v22 status] == 26754) {
            uint64_t v24 = 8;
          }
          else {
            uint64_t v24 = 6;
          }
        }
      }
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v25 = NFLogGetLogger();
    if (v25)
    {
      BOOL v26 = (void (*)(uint64_t, const char *, ...))v25;
      BOOL v27 = object_getClass(a1);
      BOOL v28 = class_isMetaClass(v27);
      uint64_t v29 = object_getClassName(a1);
      id v52 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
      uint64_t v30 = 45;
      if (v28) {
        uint64_t v30 = 43;
      }
      v26(3, "%c[%{public}s %{public}s]:%i Command failed", v30, v29, v52, 522);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v31 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      int v32 = object_getClass(a1);
      if (class_isMetaClass(v32)) {
        int v33 = 43;
      }
      else {
        int v33 = 45;
      }
      uint64_t v34 = object_getClassName(a1);
      uint64_t v35 = sel_getName("crs_setAuthorizationTimeout:challenge:mac:");
      *(_DWORD *)int buf = 67109890;
      int v57 = v33;
      __int16 v58 = 2082;
      __int16 v59 = v34;
      __int16 v60 = 2082;
      __int16 v61 = v35;
      __int16 v62 = 1024;
      int v63 = 522;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if ([v23 code]) {
      uint64_t v24 = (uint64_t)[v23 code];
    }
    else {
      uint64_t v24 = 16;
    }
  }

  return v24;
}

uint64_t sub_1000C5684(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v6 = a2;
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v8 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_authenticate:response:");
    uint64_t v12 = 45;
    if (isMetaClass) {
      uint64_t v12 = 43;
    }
    v8(6, "%c[%{public}s %{public}s]:%i ", v12, ClassName, Name, 544);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v13 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = object_getClass(a1);
    if (class_isMetaClass(v14)) {
      int v15 = 43;
    }
    else {
      int v15 = 45;
    }
    *(_DWORD *)int buf = 67109890;
    int v49 = v15;
    __int16 v50 = 2082;
    uint64_t v51 = object_getClassName(a1);
    __int16 v52 = 2082;
    uint64_t v53 = sel_getName("crs_authenticate:response:");
    __int16 v54 = 1024;
    int v55 = 544;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  id v47 = 0;
  int v16 = [a1 sendCommandWithClass:128 instruction:248 p1:0 p2:0 data:v6 error:&v47];

  id v17 = v47;
  if (v16)
  {
    +[NFExceptionsCALogger postAnalyticsCRSAuthInitEventWithStatus:](NFExceptionsCALogger, "postAnalyticsCRSAuthInitEventWithStatus:", [v16 status]);
    if ([v16 status] == 36864) {
      sub_100222D30((uint64_t)NFDailyStatisticsCALogger, @"totalAuthEvents");
    }
    if ([v16 status] == 36864)
    {
      if (a3)
      {
        [v16 response];
        uint64_t v18 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v18 = 0;
      }
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v30 = NFLogGetLogger();
      if (v30)
      {
        int v31 = (void (*)(uint64_t, const char *, ...))v30;
        int v32 = object_getClass(a1);
        BOOL v33 = class_isMetaClass(v32);
        uint64_t v34 = object_getClassName(a1);
        uint64_t v35 = sel_getName("crs_authenticate:response:");
        uint64_t v46 = [v16 status];
        uint64_t v36 = 45;
        if (v33) {
          uint64_t v36 = 43;
        }
        v31(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v36, v34, v35, 570, v46);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v37 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        BOOL v38 = object_getClass(a1);
        if (class_isMetaClass(v38)) {
          int v39 = 43;
        }
        else {
          int v39 = 45;
        }
        char v40 = object_getClassName(a1);
        uint64_t v41 = sel_getName("crs_authenticate:response:");
        unsigned int v42 = [v16 status];
        *(_DWORD *)int buf = 67110146;
        int v49 = v39;
        __int16 v50 = 2082;
        uint64_t v51 = v40;
        __int16 v52 = 2082;
        uint64_t v53 = v41;
        __int16 v54 = 1024;
        int v55 = 570;
        __int16 v56 = 1024;
        unsigned int v57 = v42;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
      }

      uint64_t v18 = 8;
      if ([v16 status] != 27010)
      {
        if ([v16 status] == 27013) {
          uint64_t v18 = 8;
        }
        else {
          uint64_t v18 = 6;
        }
      }
    }
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v19 = NFLogGetLogger();
    if (v19)
    {
      id v20 = (void (*)(uint64_t, const char *, ...))v19;
      id v21 = object_getClass(a1);
      BOOL v22 = class_isMetaClass(v21);
      id v23 = object_getClassName(a1);
      int v45 = sel_getName("crs_authenticate:response:");
      uint64_t v24 = 45;
      if (v22) {
        uint64_t v24 = 43;
      }
      v20(3, "%c[%{public}s %{public}s]:%i Command failed", v24, v23, v45, 554);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      BOOL v26 = object_getClass(a1);
      if (class_isMetaClass(v26)) {
        int v27 = 43;
      }
      else {
        int v27 = 45;
      }
      BOOL v28 = object_getClassName(a1);
      uint64_t v29 = sel_getName("crs_authenticate:response:");
      *(_DWORD *)int buf = 67109890;
      int v49 = v27;
      __int16 v50 = 2082;
      uint64_t v51 = v28;
      __int16 v52 = 2082;
      uint64_t v53 = v29;
      __int16 v54 = 1024;
      int v55 = 554;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if ([v17 code]) {
      uint64_t v18 = (uint64_t)[v17 code];
    }
    else {
      uint64_t v18 = 16;
    }
  }

  return v18;
}

uint64_t sub_1000C5B9C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v10 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass((id)a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName((id)a1);
      Name = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      uint64_t v14 = 45;
      if (isMetaClass) {
        uint64_t v14 = 43;
      }
      v10(6, "%c[%{public}s %{public}s]:%i ", v14, ClassName, Name, 585);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = object_getClass((id)a1);
      if (class_isMetaClass(v16)) {
        int v17 = 43;
      }
      else {
        int v17 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v90 = v17;
      __int16 v91 = 2082;
      unsigned int v92 = object_getClassName((id)a1);
      __int16 v93 = 2082;
      unsigned int v94 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      __int16 v95 = 1024;
      int v96 = 585;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    uint64_t v18 = objc_opt_new();
    if (v8)
    {
      if ((unint64_t)[v8 length] < 5 || (unint64_t)objc_msgSend(v8, "length") > 0x10)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v22 = NFLogGetLogger();
        if (v22)
        {
          id v23 = (void (*)(uint64_t, const char *, ...))v22;
          uint64_t v24 = object_getClass((id)a1);
          BOOL v25 = class_isMetaClass(v24);
          BOOL v26 = object_getClassName((id)a1);
          uint64_t v81 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          uint64_t v27 = 45;
          if (v25) {
            uint64_t v27 = 43;
          }
          v23(3, "%c[%{public}s %{public}s]:%i Invalid parameters to CRS authorization with local validation command", v27, v26, v81, 599);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v28 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = object_getClass((id)a1);
          if (class_isMetaClass(v29)) {
            int v30 = 43;
          }
          else {
            int v30 = 45;
          }
          int v31 = object_getClassName((id)a1);
          int v32 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          *(_DWORD *)int buf = 67109890;
          int v90 = v30;
          __int16 v91 = 2082;
          unsigned int v92 = v31;
          __int16 v93 = 2082;
          unsigned int v94 = v32;
          __int16 v95 = 1024;
          int v96 = 599;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameters to CRS authorization with local validation command", buf, 0x22u);
        }

        BOOL v33 = 0;
        id v34 = 0;
        goto LABEL_25;
      }
      uint64_t v19 = +[NFTLV TLVWithTag:79 value:v8];
      id v20 = [v19 asData];
      [v18 appendData:v20];

      uint64_t v21 = 13;
    }
    else
    {
      uint64_t v21 = 2;
    }
    [v18 appendData:v7];
    id v88 = 0;
    BOOL v33 = [(id)a1 sendCommandWithClass:128 instruction:244 p1:v21 p2:a2 data:v18 error:&v88];
    id v34 = v88;
    if (v33)
    {
      char v35 = a2 - 1;
      if (a2 - 1) < 7 && ((0x77u >> v35))
      {
        +[NFExceptionsCALogger postAnalyticsCRSAuthWithStatus:withMethod:](NFExceptionsCALogger, "postAnalyticsCRSAuthWithStatus:withMethod:", [v33 status], dword_10028391C[v35]);
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v36 = NFLogGetLogger();
        if (v36)
        {
          id v37 = (void (*)(uint64_t, const char *, ...))v36;
          BOOL v38 = object_getClass((id)a1);
          BOOL v39 = class_isMetaClass(v38);
          char v40 = v18;
          id v41 = v34;
          id v42 = v7;
          id v43 = object_getClassName((id)a1);
          uint64_t v82 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          uint64_t v44 = 45;
          if (v39) {
            uint64_t v44 = 43;
          }
          id v79 = v43;
          id v7 = v42;
          id v34 = v41;
          uint64_t v18 = v40;
          v37(3, "%c[%{public}s %{public}s]:%i Unexpected location validation method", v44, v79, v82, 629);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        int v45 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          uint64_t v46 = object_getClass((id)a1);
          id v47 = v18;
          id v48 = v34;
          id v49 = v7;
          if (class_isMetaClass(v46)) {
            int v50 = 43;
          }
          else {
            int v50 = 45;
          }
          uint64_t v51 = object_getClassName((id)a1);
          __int16 v52 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          *(_DWORD *)int buf = 67109890;
          int v90 = v50;
          id v7 = v49;
          id v34 = v48;
          uint64_t v18 = v47;
          __int16 v91 = 2082;
          unsigned int v92 = v51;
          __int16 v93 = 2082;
          unsigned int v94 = v52;
          __int16 v95 = 1024;
          int v96 = 629;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unexpected location validation method", buf, 0x22u);
        }
      }
      if ([v33 status] == 36864)
      {
        a1 = 0;
      }
      else if ([v33 status] == 27011)
      {
        a1 = 1;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v64 = NFLogGetLogger();
        if (v64)
        {
          unsigned int v65 = (void (*)(uint64_t, const char *, ...))v64;
          unsigned int v66 = object_getClass((id)a1);
          BOOL v87 = class_isMetaClass(v66);
          id v86 = object_getClassName((id)a1);
          uint64_t v67 = v18;
          id v68 = v34;
          id v69 = v7;
          BOOL v70 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          uint64_t v85 = [v33 status];
          BOOL v84 = v70;
          id v7 = v69;
          id v34 = v68;
          uint64_t v18 = v67;
          uint64_t v71 = 45;
          if (v87) {
            uint64_t v71 = 43;
          }
          v65(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v71, v86, v84, 646, v85);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v72 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        {
          uint64_t v73 = object_getClass((id)a1);
          if (class_isMetaClass(v73)) {
            int v74 = 43;
          }
          else {
            int v74 = 45;
          }
          int v75 = object_getClassName((id)a1);
          uint64_t v76 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
          unsigned int v77 = [v33 status];
          *(_DWORD *)int buf = 67110146;
          int v90 = v74;
          __int16 v91 = 2082;
          unsigned int v92 = v75;
          __int16 v93 = 2082;
          unsigned int v94 = v76;
          __int16 v95 = 1024;
          int v96 = 646;
          __int16 v97 = 1024;
          unsigned int v98 = v77;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
        }

        a1 = 8;
        if ([v33 status] != 27010)
        {
          if ([v33 status] == 27013) {
            a1 = 8;
          }
          else {
            a1 = 6;
          }
        }
      }
      goto LABEL_69;
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v53 = NFLogGetLogger();
    if (v53)
    {
      __int16 v54 = (void (*)(uint64_t, const char *, ...))v53;
      int v55 = object_getClass((id)a1);
      BOOL v56 = class_isMetaClass(v55);
      unsigned int v57 = object_getClassName((id)a1);
      id v83 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      uint64_t v58 = 45;
      if (v56) {
        uint64_t v58 = 43;
      }
      v54(3, "%c[%{public}s %{public}s]:%i Command failed", v58, v57, v83, 609);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v59 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      __int16 v60 = object_getClass((id)a1);
      if (class_isMetaClass(v60)) {
        int v61 = 43;
      }
      else {
        int v61 = 45;
      }
      __int16 v62 = object_getClassName((id)a1);
      int v63 = sel_getName("crs_authorizeWithLocalValidation:cryptogram:targetAID:");
      *(_DWORD *)int buf = 67109890;
      int v90 = v61;
      __int16 v91 = 2082;
      unsigned int v92 = v62;
      __int16 v93 = 2082;
      unsigned int v94 = v63;
      __int16 v95 = 1024;
      int v96 = 609;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
    }

    if ([v34 code])
    {
      a1 = (uint64_t)[v34 code];
      BOOL v33 = 0;
      goto LABEL_69;
    }
    BOOL v33 = 0;
LABEL_25:
    a1 = 16;
LABEL_69:
  }
  return a1;
}

NFECommercePaymentResponse *sub_1000C63FC(NFECommercePaymentResponse *a1, void *a2)
{
  id v3 = a2;
  __int16 v60 = a1;
  if (a1)
  {
    id v4 = +[NFTLV TLVsWithData:v3];
    id v5 = v4;
    if (v3 && [v4 count])
    {
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      id v6 = v5;
      id v7 = [v6 countByEnumeratingWithState:&v61 objects:v67 count:16];
      if (v7)
      {
        id v8 = v7;
        unsigned int v57 = v5;
        id v58 = v3;
        id v9 = 0;
        uint64_t v10 = *(void *)v62;
        id v59 = v6;
        do
        {
          for (char i = 0; i != v8; char i = (char *)i + 1)
          {
            if (*(void *)v62 != v10) {
              objc_enumerationMutation(v6);
            }
            uint64_t v12 = *(void **)(*((void *)&v61 + 1) + 8 * i);
            unsigned int v13 = [v12 tag];
            if (v13 != 40726)
            {
              if (v13 == 225)
              {
                uint64_t v14 = [v12 childWithTag:130];
                int v15 = [v14 value];
                uint64_t v16 = [v15 NF_asHexString];

                id v9 = v16;
              }
              else
              {
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t Logger = NFLogGetLogger();
                if (Logger)
                {
                  uint64_t v18 = (void (*)(uint64_t, const char *, ...))Logger;
                  Class Class = object_getClass(v60);
                  BOOL isMetaClass = class_isMetaClass(Class);
                  ClassName = object_getClassName(v60);
                  Name = sel_getName("crs_decodeResponseTLV:");
                  id v56 = [v12 tag];
                  __int16 v52 = ClassName;
                  uint64_t v23 = 45;
                  if (isMetaClass) {
                    uint64_t v23 = 43;
                  }
                  id v6 = v59;
                  v18(4, "%c[%{public}s %{public}s]:%i Unknown tag: 0x%x", v23, v52, Name, 765, v56);
                }
                dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                uint64_t v14 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v24 = object_getClass(v60);
                  if (class_isMetaClass(v24)) {
                    int v25 = 43;
                  }
                  else {
                    int v25 = 45;
                  }
                  BOOL v26 = object_getClassName(v60);
                  uint64_t v27 = sel_getName("crs_decodeResponseTLV:");
                  unsigned int v28 = [v12 tag];
                  *(_DWORD *)int buf = 67110146;
                  int v69 = v25;
                  __int16 v70 = 2082;
                  uint64_t v71 = v26;
                  __int16 v72 = 2082;
                  uint64_t v73 = v27;
                  id v6 = v59;
                  __int16 v74 = 1024;
                  int v75 = 765;
                  __int16 v76 = 1024;
                  LODWORD(v77) = v28;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Unknown tag: 0x%x", buf, 0x28u);
                }
              }
            }
          }
          id v8 = [v6 countByEnumeratingWithState:&v61 objects:v67 count:16];
        }
        while (v8);

        id v5 = v57;
        id v3 = v58;
        if (v9)
        {
          uint64_t v29 = [NFECommercePaymentResponse alloc];
          v65[0] = @"transactionIdentifier";
          v65[1] = @"transactionData";
          v66[0] = v9;
          v66[1] = v58;
          int v30 = +[NSDictionary dictionaryWithObjects:v66 forKeys:v65 count:2];
          a1 = [(NFECommercePaymentResponse *)v29 initWithDictionary:v30];

LABEL_47:
          goto LABEL_48;
        }
      }
      else
      {
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v41 = NFLogGetLogger();
      if (v41)
      {
        id v42 = (void (*)(uint64_t, const char *, ...))v41;
        id v43 = object_getClass(v60);
        BOOL v44 = class_isMetaClass(v43);
        int v45 = object_getClassName(v60);
        int v55 = sel_getName("crs_decodeResponseTLV:");
        uint64_t v46 = 45;
        if (v44) {
          uint64_t v46 = 43;
        }
        v42(3, "%c[%{public}s %{public}s]:%i Missing transaction ID", v46, v45, v55, 771);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v9 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_46:
        a1 = 0;
        goto LABEL_47;
      }
      id v47 = object_getClass(v60);
      if (class_isMetaClass(v47)) {
        int v48 = 43;
      }
      else {
        int v48 = 45;
      }
      id v49 = object_getClassName(v60);
      int v50 = sel_getName("crs_decodeResponseTLV:");
      *(_DWORD *)int buf = 67109890;
      int v69 = v48;
      __int16 v70 = 2082;
      uint64_t v71 = v49;
      __int16 v72 = 2082;
      uint64_t v73 = v50;
      __int16 v74 = 1024;
      int v75 = 771;
      BOOL v38 = "%c[%{public}s %{public}s]:%i Missing transaction ID";
      BOOL v39 = v9;
      uint32_t v40 = 34;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v31 = NFLogGetLogger();
      if (v31)
      {
        int v32 = (void (*)(uint64_t, const char *, ...))v31;
        BOOL v33 = object_getClass(v60);
        BOOL v34 = class_isMetaClass(v33);
        uint64_t v53 = object_getClassName(v60);
        __int16 v54 = sel_getName("crs_decodeResponseTLV:");
        uint64_t v35 = 45;
        if (v34) {
          uint64_t v35 = 43;
        }
        v32(3, "%c[%{public}s %{public}s]:%i Missing/invalid value: %{public}@", v35, v53, v54, 747, v3);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      id v9 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_46;
      }
      uint64_t v36 = object_getClass(v60);
      if (class_isMetaClass(v36)) {
        int v37 = 43;
      }
      else {
        int v37 = 45;
      }
      *(_DWORD *)int buf = 67110146;
      int v69 = v37;
      __int16 v70 = 2082;
      uint64_t v71 = object_getClassName(v60);
      __int16 v72 = 2082;
      uint64_t v73 = sel_getName("crs_decodeResponseTLV:");
      __int16 v74 = 1024;
      int v75 = 747;
      __int16 v76 = 2114;
      id v77 = v3;
      BOOL v38 = "%c[%{public}s %{public}s]:%i Missing/invalid value: %{public}@";
      BOOL v39 = v9;
      uint32_t v40 = 44;
    }
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, v38, buf, v40);
    goto LABEL_46;
  }
LABEL_48:

  return a1;
}

uint64_t sub_1000C69E4(NFECommercePaymentResponse *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    if (!a6)
    {
      int v75 = +[NSAssertionHandler currentHandler];
      [v75 handleFailureInMethod:"crs_authorizeForECommerce:cryptogram:encryptedPIN:request:response:", a1, @"NFSecureElementWrapper+ContactlessRegistry.m", 785, @"Invalid parameter not satisfying: %@", @"theResponse != nil" object file lineNumber description];
    }
    if ((a2 - 5) > 2 || v12 && [v12 length] == (id)16)
    {
      uint64_t v14 = sub_1001D812C((uint64_t)NFECommercePaymentRequestEncoder, v13, v12, 0);
      if (v14)
      {
        if ([v11 length] == (id)8)
        {
          id v15 = [v14 mutableCopy];
          [v15 appendData:v11];
          id v85 = v15;
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t Logger = NFLogGetLogger();
          if (Logger)
          {
            int v17 = (void (*)(uint64_t, const char *, ...))Logger;
            Class Class = object_getClass(a1);
            BOOL isMetaClass = class_isMetaClass(Class);
            ClassName = object_getClassName(a1);
            Name = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
            uint64_t v21 = 45;
            if (isMetaClass) {
              uint64_t v21 = 43;
            }
            v17(6, "%c[%{public}s %{public}s]:%i ", v21, ClassName, Name, 661);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v22 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = object_getClass(a1);
            uint64_t v24 = v14;
            if (class_isMetaClass(v23)) {
              int v25 = 43;
            }
            else {
              int v25 = 45;
            }
            *(_DWORD *)int buf = 67109890;
            int v90 = v25;
            uint64_t v14 = v24;
            __int16 v91 = 2082;
            unsigned int v92 = object_getClassName(a1);
            __int16 v93 = 2082;
            unsigned int v94 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
            __int16 v95 = 1024;
            int v96 = 661;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
          }

          id v88 = 0;
          int v83 = a2;
          BOOL v26 = [(NFECommercePaymentResponse *)a1 sendCommandWithClass:128 instruction:244 p1:4 p2:a2 data:v85 error:&v88];
          id v27 = v88;
          if (v26)
          {
            if ([v26 status] == 36864)
            {
              id v28 = [v26 response];
              unsigned int sel = [v26 status];
              uint64_t v29 = 0;
            }
            else
            {
              uint32_t v80 = v14;
              uint64_t v81 = a6;
              id v82 = v11;
              id v86 = objc_opt_new();
              while (([v26 status] & 0xFF00) == 0x6100)
              {
                id v42 = [v26 response];
                [v86 appendData:v42];

                unsigned __int8 v43 = [v26 status];
                id v87 = v27;
                BOOL v44 = [(NFECommercePaymentResponse *)a1 sendCommandWithClass:128 instruction:192 p1:0 p2:0 data:0 expectedLength:v43 toOS:0 error:&v87];
                id v45 = v87;

                if (!v44)
                {
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  uint64_t v60 = NFLogGetLogger();
                  if (v60)
                  {
                    long long v61 = (void (*)(uint64_t, const char *, ...))v60;
                    long long v62 = object_getClass(a1);
                    BOOL v63 = class_isMetaClass(v62);
                    long long v64 = object_getClassName(a1);
                    int v78 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                    uint64_t v65 = 45;
                    if (v63) {
                      uint64_t v65 = 43;
                    }
                    v61(3, "%c[%{public}s %{public}s]:%i Command failed", v65, v64, v78, 698);
                  }
                  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
                  unsigned int v66 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v67 = object_getClass(a1);
                    if (class_isMetaClass(v67)) {
                      int v68 = 43;
                    }
                    else {
                      int v68 = 45;
                    }
                    int v69 = object_getClassName(a1);
                    __int16 v70 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                    *(_DWORD *)int buf = 67109890;
                    int v90 = v68;
                    __int16 v91 = 2082;
                    unsigned int v92 = v69;
                    __int16 v93 = 2082;
                    unsigned int v94 = v70;
                    __int16 v95 = 1024;
                    int v96 = 698;
                    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
                  }

                  uint64_t v14 = v80;
                  unsigned int sel = 0;
                  id v28 = 0;
                  BOOL v44 = 0;
                  if ([v45 code]) {
                    uint64_t v29 = (uint64_t)[v45 code];
                  }
                  else {
                    uint64_t v29 = 16;
                  }
                  goto LABEL_66;
                }
                id v27 = v45;
                BOOL v26 = v44;
                if ([v44 status] == 36864)
                {
                  uint64_t v46 = [v44 response];
                  [v86 appendData:v46];

                  id v28 = v86;
                  unsigned int sel = [v44 status];
                  uint64_t v29 = 0;
                  goto LABEL_66;
                }
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              uint64_t v47 = NFLogGetLogger();
              if (v47)
              {
                int v48 = (void (*)(uint64_t, const char *, ...))v47;
                id v49 = object_getClass(a1);
                BOOL v50 = class_isMetaClass(v49);
                uint64_t v51 = object_getClassName(a1);
                __int16 v52 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                uint64_t v79 = [v26 status];
                uint64_t v53 = 45;
                if (v50) {
                  uint64_t v53 = 43;
                }
                v48(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v53, v51, v52, 711, v79);
              }
              dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
              __int16 v54 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
              {
                int v55 = object_getClass(a1);
                if (class_isMetaClass(v55)) {
                  int v56 = 43;
                }
                else {
                  int v56 = 45;
                }
                unsigned int v57 = object_getClassName(a1);
                id v58 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
                unsigned int v59 = [v26 status];
                *(_DWORD *)int buf = 67110146;
                int v90 = v56;
                __int16 v91 = 2082;
                unsigned int v92 = v57;
                __int16 v93 = 2082;
                unsigned int v94 = v58;
                __int16 v95 = 1024;
                int v96 = 711;
                __int16 v97 = 1024;
                unsigned int v98 = v59;
                _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
              }

              uint64_t v14 = v80;
              unsigned int sel = [v26 status];
              if ([v26 status] == 27010
                || [v26 status] == 27013)
              {
                id v28 = 0;
                uint64_t v29 = 8;
              }
              else if ([v26 status] == 27265)
              {
                id v28 = 0;
                uint64_t v29 = 14;
              }
              else if ([v26 status] == 27012)
              {
                id v28 = 0;
                uint64_t v29 = 23;
              }
              else if ([v26 status] == 27264)
              {
                id v28 = 0;
                uint64_t v29 = 10;
              }
              else
              {
                uint64_t v29 = 9;
                if ([v26 status] == 27272)
                {
                  id v28 = 0;
                }
                else
                {
                  id v28 = 0;
                  if ([v26 status] == 27015) {
                    uint64_t v29 = 9;
                  }
                  else {
                    uint64_t v29 = 6;
                  }
                }
              }
              id v45 = v27;
              BOOL v44 = v26;
LABEL_66:

              id v27 = v45;
              BOOL v26 = v44;
              a6 = v81;
              id v11 = v82;
            }
          }
          else
          {
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v30 = NFLogGetLogger();
            if (v30)
            {
              uint64_t v31 = (void (*)(uint64_t, const char *, ...))v30;
              int v32 = object_getClass(a1);
              BOOL v33 = class_isMetaClass(v32);
              BOOL v34 = object_getClassName(a1);
              id v77 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
              uint64_t v35 = 45;
              if (v33) {
                uint64_t v35 = 43;
              }
              v31(3, "%c[%{public}s %{public}s]:%i Command failed", v35, v34, v77, 671);
            }
            dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
            uint64_t v36 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              int v37 = object_getClass(a1);
              BOOL v38 = v14;
              if (class_isMetaClass(v37)) {
                int v39 = 43;
              }
              else {
                int v39 = 45;
              }
              uint32_t v40 = object_getClassName(a1);
              uint64_t v41 = sel_getName("crs_authorizeForECommerce:input:output:swStatus:");
              *(_DWORD *)int buf = 67109890;
              int v90 = v39;
              uint64_t v14 = v38;
              __int16 v91 = 2082;
              unsigned int v92 = v40;
              __int16 v93 = 2082;
              unsigned int v94 = v41;
              __int16 v95 = 1024;
              int v96 = 671;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
            }

            if ([v27 code])
            {
              uint64_t v29 = (uint64_t)[v27 code];
              unsigned int sel = 0;
              id v28 = 0;
              BOOL v26 = 0;
            }
            else
            {
              unsigned int sel = 0;
              id v28 = 0;
              BOOL v26 = 0;
              uint64_t v29 = 16;
            }
          }

          id v71 = v28;
          if (!v29)
          {
            uint64_t v73 = sub_1000C63FC(a1, v71);
            if (v73)
            {
              sub_1000C73B0(a1, v83, v13, v72, sel);
              uint64_t v29 = 0;
              *a6 = v73;
            }
            else
            {
              uint64_t v29 = 23;
            }
          }
        }
        else
        {
          uint64_t v29 = 10;
        }
      }
      else
      {
        uint64_t v29 = 22;
      }
    }
    else
    {
      uint64_t v29 = 10;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }

  return v29;
}

void sub_1000C73B0(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  if (a1)
  {
    id v9 = objc_opt_new();
    uint64_t v10 = +[NSNumber numberWithUnsignedInt:a5];
    [v9 setObject:v10 forKeyedSubscript:@"status"];

    switch(a2)
    {
      case 1:
        id v11 = &off_10031B178;
        goto LABEL_19;
      case 2:
        id v11 = &off_10031B190;
        goto LABEL_19;
      case 3:
        id v11 = &off_10031B1A8;
        goto LABEL_19;
      case 5:
        id v11 = &off_10031B1C0;
        goto LABEL_19;
      case 6:
        id v11 = &off_10031B1D8;
        goto LABEL_19;
      case 7:
        id v11 = &off_10031B1F0;
LABEL_19:
        [v9 setObject:v11 forKeyedSubscript:@"method"];
        break;
      default:
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t Logger = NFLogGetLogger();
        if (Logger)
        {
          id v13 = (void (*)(uint64_t, const char *, ...))Logger;
          Class Class = object_getClass(a1);
          BOOL isMetaClass = class_isMetaClass(Class);
          ClassName = object_getClassName(a1);
          Name = sel_getName("crs_postCACRSAuthECommerce:request:response:status:");
          uint64_t v17 = 45;
          if (isMetaClass) {
            uint64_t v17 = 43;
          }
          v13(3, "%c[%{public}s %{public}s]:%i Invalid auth type", v17, ClassName, Name, 840);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v18 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = object_getClass(a1);
          if (class_isMetaClass(v19)) {
            int v20 = 43;
          }
          else {
            int v20 = 45;
          }
          *(_DWORD *)int buf = 67109890;
          int v36 = v20;
          __int16 v37 = 2082;
          BOOL v38 = object_getClassName(a1);
          __int16 v39 = 2082;
          uint32_t v40 = sel_getName("crs_postCACRSAuthECommerce:request:response:status:");
          __int16 v41 = 1024;
          int v42 = 840;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid auth type", buf, 0x22u);
        }

        break;
    }
    uint64_t v21 = [v8 appletIdentifier];
    uint64_t v22 = +[NSData NF_dataWithHexString:v21];
    [v9 setObject:v22 forKeyedSubscript:@"aid"];

    uint64_t v23 = [v8 merchantData];
    [v9 setObject:v23 forKeyedSubscript:@"merchantID"];

    uint64_t v24 = [v8 currencyCode];
    int v25 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", +[NFCurrency getFractionDigitsFromCurrencyStringCode:v24]);
    [v9 setObject:v25 forKeyedSubscript:@"fractionDigits"];

    BOOL v26 = [v8 transactionAmount];
    [v9 setObject:v26 forKeyedSubscript:@"transactionTotal"];

    id v27 = [v8 countryCode];
    uint64_t v28 = sub_1001D6D04((uint64_t)NFECommercePaymentRequestEncoder, v27);

    if (v28)
    {
      uint64_t v29 = +[NSNumber numberWithUnsignedInteger:v28];
      [v9 setObject:v29 forKeyedSubscript:@"countryCode"];
    }
    uint64_t v30 = [v8 currencyCode];
    uint64_t v31 = sub_1001D972C((uint64_t)NFECommercePaymentRequestEncoder, v30);

    if (v31 != -1)
    {
      int v32 = +[NSNumber numberWithInteger:v31];
      [v9 setObject:v32 forKeyedSubscript:@"currencyCode"];
    }
    BOOL v33 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", [v8 merchantCapabilities]);
    [v9 setObject:v33 forKeyedSubscript:@"merchantCapabilities"];

    +[NFExceptionsCALogger postAnalyticsCRSAuthECommerceWithParameters:v9];
  }
}

void sub_1000C7830(void *a1)
{
  if (!a1) {
    return;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(a1);
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(a1);
    Name = sel_getName("crs_deauthorize");
    uint64_t v7 = 45;
    if (isMetaClass) {
      uint64_t v7 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i ", v7, ClassName, Name, 869);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  id v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = object_getClass(a1);
    if (class_isMetaClass(v9)) {
      int v10 = 43;
    }
    else {
      int v10 = 45;
    }
    *(_DWORD *)int buf = 67109890;
    int v43 = v10;
    __int16 v44 = 2082;
    id v45 = object_getClassName(a1);
    __int16 v46 = 2082;
    uint64_t v47 = sel_getName("crs_deauthorize");
    __int16 v48 = 1024;
    int v49 = 869;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
  }

  id v11 = [a1 sendCommandWithClass:128 instruction:244 p1:1 p2:129 data:0 error:0];
  id v12 = v11;
  if (!v11)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v29 = NFLogGetLogger();
    if (v29)
    {
      uint64_t v30 = (void (*)(uint64_t, const char *, ...))v29;
      uint64_t v31 = object_getClass(a1);
      BOOL v32 = class_isMetaClass(v31);
      BOOL v33 = object_getClassName(a1);
      uint32_t v40 = sel_getName("crs_deauthorize");
      uint64_t v34 = 45;
      if (v32) {
        uint64_t v34 = 43;
      }
      v30(3, "%c[%{public}s %{public}s]:%i Command failed", v34, v33, v40, 878);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v20 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_32;
    }
    uint64_t v35 = object_getClass(a1);
    if (class_isMetaClass(v35)) {
      int v36 = 43;
    }
    else {
      int v36 = 45;
    }
    __int16 v37 = object_getClassName(a1);
    BOOL v38 = sel_getName("crs_deauthorize");
    *(_DWORD *)int buf = 67109890;
    int v43 = v36;
    __int16 v44 = 2082;
    id v45 = v37;
    __int16 v46 = 2082;
    uint64_t v47 = v38;
    __int16 v48 = 1024;
    int v49 = 878;
    BOOL v26 = "%c[%{public}s %{public}s]:%i Command failed";
    id v27 = v20;
    uint32_t v28 = 34;
    goto LABEL_31;
  }
  if ([v11 status] != 36864)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v13 = NFLogGetLogger();
    if (v13)
    {
      uint64_t v14 = (void (*)(uint64_t, const char *, ...))v13;
      id v15 = object_getClass(a1);
      BOOL v16 = class_isMetaClass(v15);
      uint64_t v17 = object_getClassName(a1);
      uint64_t v18 = sel_getName("crs_deauthorize");
      uint64_t v41 = [v12 status];
      uint64_t v19 = 45;
      if (v16) {
        uint64_t v19 = 43;
      }
      v14(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v19, v17, v18, 881, v41);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v20 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_32;
    }
    uint64_t v21 = object_getClass(a1);
    if (class_isMetaClass(v21)) {
      int v22 = 43;
    }
    else {
      int v22 = 45;
    }
    uint64_t v23 = object_getClassName(a1);
    uint64_t v24 = sel_getName("crs_deauthorize");
    unsigned int v25 = [v12 status];
    *(_DWORD *)int buf = 67110146;
    int v43 = v22;
    __int16 v44 = 2082;
    id v45 = v23;
    __int16 v46 = 2082;
    uint64_t v47 = v24;
    __int16 v48 = 1024;
    int v49 = 881;
    __int16 v50 = 1024;
    unsigned int v51 = v25;
    BOOL v26 = "%c[%{public}s %{public}s]:%i Returned error: 0x%04x";
    id v27 = v20;
    uint32_t v28 = 40;
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, v26, buf, v28);
LABEL_32:
  }
  +[NFExceptionsCALogger postAnalyticsCRSDeAuthWithStatus:](NFExceptionsCALogger, "postAnalyticsCRSDeAuthWithStatus:", [v12 status]);
  if ([v12 status] == 36864) {
    sub_100222D30((uint64_t)NFDailyStatisticsCALogger, @"totalDeAuth");
  }
}

uint64_t sub_1000C7C84(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    if ([v7 count])
    {
      id v89 = v7;
      id v9 = v7;
      id v90 = v8;
      id v91 = v8;
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t Logger = NFLogGetLogger();
      if (Logger)
      {
        id v11 = (void (*)(uint64_t, const char *, ...))Logger;
        Class Class = object_getClass((id)a1);
        BOOL isMetaClass = class_isMetaClass(Class);
        ClassName = object_getClassName((id)a1);
        Name = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
        BOOL v16 = +[NFApplet aidListForPrinting:v9];
        uint64_t v17 = 45;
        if (isMetaClass) {
          uint64_t v17 = 43;
        }
        v11(6, "%c[%{public}s %{public}s]:%i enable=%d applets=%{public}@", v17, ClassName, Name, 893, a2, v16);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v18 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = object_getClass((id)a1);
        if (class_isMetaClass(v19)) {
          int v20 = 43;
        }
        else {
          int v20 = 45;
        }
        uint64_t v21 = object_getClassName((id)a1);
        int v22 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
        uint64_t v23 = +[NFApplet aidListForPrinting:v9];
        *(_DWORD *)int buf = 67110402;
        int v108 = v20;
        __int16 v109 = 2082;
        int v110 = v21;
        __int16 v111 = 2082;
        int v112 = v22;
        __int16 v113 = 1024;
        int v114 = 893;
        __int16 v115 = 1024;
        int v116 = a2;
        __int16 v117 = 2114;
        uint64_t v118 = v23;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i enable=%d applets=%{public}@", buf, 0x32u);
      }
      uint64_t v24 = objc_opt_new();
      long long v93 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      id v25 = v9;
      id v26 = [v25 countByEnumeratingWithState:&v93 objects:buf count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v94;
        do
        {
          for (char i = 0; i != v27; char i = (char *)i + 1)
          {
            if (*(void *)v94 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v30 = [*(id *)(*((void *)&v93 + 1) + 8 * i) identifierAsData];
            uint64_t v31 = +[NFTLV TLVWithTag:79 value:v30];

            BOOL v32 = [v31 asData];
            [v24 appendData:v32];
          }
          id v27 = [v25 countByEnumeratingWithState:&v93 objects:buf count:16];
        }
        while (v27);
      }

      BOOL v33 = v91;
      if (v91) {
        [v24 appendData:v91];
      }
      id v92 = 0;
      uint64_t v34 = [(id)a1 sendCommandWithClass:128 instruction:244 p1:6 p2:a2 data:v24 error:&v92];
      id v35 = v92;
      if (v34)
      {
        if ([v34 status] == 27013)
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v36 = NFLogGetLogger();
          if (v36)
          {
            __int16 v37 = (void (*)(uint64_t, const char *, ...))v36;
            BOOL v38 = object_getClass((id)a1);
            BOOL v39 = class_isMetaClass(v38);
            uint32_t v40 = object_getClassName((id)a1);
            uint64_t v41 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            uint64_t v87 = [v34 status];
            int v83 = v41;
            BOOL v33 = v91;
            uint64_t v42 = 45;
            if (v39) {
              uint64_t v42 = 43;
            }
            v37(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v42, v40, v83, 919, v87);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          int v43 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            __int16 v44 = object_getClass((id)a1);
            if (class_isMetaClass(v44)) {
              int v45 = 43;
            }
            else {
              int v45 = 45;
            }
            __int16 v46 = object_getClassName((id)a1);
            uint64_t v47 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            unsigned int v48 = [v34 status];
            *(_DWORD *)__int16 v97 = 67110146;
            int v98 = v45;
            __int16 v99 = 2082;
            int v100 = v46;
            __int16 v101 = 2082;
            BOOL v102 = v47;
            __int16 v103 = 1024;
            int v104 = 919;
            __int16 v105 = 1024;
            unsigned int v106 = v48;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v97, 0x28u);
          }

          a1 = 8;
        }
        else if ([v34 status] == 36864)
        {
          a1 = 0;
        }
        else
        {
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          uint64_t v69 = NFLogGetLogger();
          if (v69)
          {
            __int16 v70 = (void (*)(uint64_t, const char *, ...))v69;
            id v71 = object_getClass((id)a1);
            BOOL v72 = class_isMetaClass(v71);
            uint64_t v73 = object_getClassName((id)a1);
            __int16 v74 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            uint64_t v88 = [v34 status];
            id v86 = v74;
            BOOL v33 = v91;
            uint64_t v75 = 45;
            if (v72) {
              uint64_t v75 = 43;
            }
            v70(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v75, v73, v86, 924, v88);
          }
          dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
          __int16 v76 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            id v77 = object_getClass((id)a1);
            if (class_isMetaClass(v77)) {
              int v78 = 43;
            }
            else {
              int v78 = 45;
            }
            uint64_t v79 = object_getClassName((id)a1);
            uint32_t v80 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
            unsigned int v81 = [v34 status];
            *(_DWORD *)__int16 v97 = 67110146;
            int v98 = v78;
            __int16 v99 = 2082;
            int v100 = v79;
            __int16 v101 = 2082;
            BOOL v102 = v80;
            __int16 v103 = 1024;
            int v104 = 924;
            __int16 v105 = 1024;
            unsigned int v106 = v81;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v97, 0x28u);
          }

          a1 = 6;
        }
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v58 = NFLogGetLogger();
        if (v58)
        {
          unsigned int v59 = (void (*)(uint64_t, const char *, ...))v58;
          uint64_t v60 = object_getClass((id)a1);
          BOOL v61 = class_isMetaClass(v60);
          long long v62 = object_getClassName((id)a1);
          id v85 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
          uint64_t v63 = 45;
          if (v61) {
            uint64_t v63 = 43;
          }
          v59(3, "%c[%{public}s %{public}s]:%i Command failed", v63, v62, v85, 915);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        long long v64 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          uint64_t v65 = object_getClass((id)a1);
          if (class_isMetaClass(v65)) {
            int v66 = 43;
          }
          else {
            int v66 = 45;
          }
          uint64_t v67 = object_getClassName((id)a1);
          int v68 = sel_getName("_crs_enableTransientAuth:applets:cryptogram:");
          *(_DWORD *)__int16 v97 = 67109890;
          int v98 = v66;
          __int16 v99 = 2082;
          int v100 = v67;
          __int16 v101 = 2082;
          BOOL v102 = v68;
          __int16 v103 = 1024;
          int v104 = 915;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", v97, 0x22u);
        }

        if ([v35 code]) {
          a1 = (uint64_t)[v35 code];
        }
        else {
          a1 = 16;
        }
      }
      id v7 = v89;

      id v8 = v90;
    }
    else
    {
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      uint64_t v49 = NFLogGetLogger();
      if (v49)
      {
        __int16 v50 = (void (*)(uint64_t, const char *, ...))v49;
        unsigned int v51 = object_getClass((id)a1);
        BOOL v52 = class_isMetaClass(v51);
        uint64_t v53 = object_getClassName((id)a1);
        BOOL v84 = sel_getName("crs_enableTransientAuth:applets:cryptogram:");
        uint64_t v54 = 45;
        if (v52) {
          uint64_t v54 = 43;
        }
        v50(3, "%c[%{public}s %{public}s]:%i Empty AID array", v54, v53, v84, 934);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v55 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        int v56 = object_getClass((id)a1);
        if (class_isMetaClass(v56)) {
          int v57 = 43;
        }
        else {
          int v57 = 45;
        }
        *(_DWORD *)int buf = 67109890;
        int v108 = v57;
        __int16 v109 = 2082;
        int v110 = object_getClassName((id)a1);
        __int16 v111 = 2082;
        int v112 = sel_getName("crs_enableTransientAuth:applets:cryptogram:");
        __int16 v113 = 1024;
        int v114 = 934;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Empty AID array", buf, 0x22u);
      }

      a1 = 10;
    }
  }

  return a1;
}

id sub_1000C855C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v7 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(a1);
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(a1);
      Name = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
      uint64_t v11 = 45;
      if (isMetaClass) {
        uint64_t v11 = 43;
      }
      v7(6, "%c[%{public}s %{public}s]:%i ", v11, ClassName, Name, 943);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    id v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = object_getClass(a1);
      if (class_isMetaClass(v13)) {
        int v14 = 43;
      }
      else {
        int v14 = 45;
      }
      *(_DWORD *)int buf = 67109890;
      int v100 = v14;
      __int16 v101 = 2082;
      BOOL v102 = object_getClassName(a1);
      __int16 v103 = 2082;
      int v104 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
      __int16 v105 = 1024;
      int v106 = 943;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i ", buf, 0x22u);
    }

    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v15 = NFLogGetLogger();
    BOOL v16 = (void (*)(uint64_t, const char *, ...))v15;
    if (v5 && a3)
    {
      if (v15)
      {
        uint64_t v17 = object_getClass(a1);
        BOOL v18 = class_isMetaClass(v17);
        uint64_t v87 = object_getClassName(a1);
        id v89 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        uint64_t v19 = 45;
        if (v18) {
          uint64_t v19 = 43;
        }
        v16(6, "%c[%{public}s %{public}s]:%i Data to sign : %{public}@", v19, v87, v89, 953, v5);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = object_getClass(a1);
        if (class_isMetaClass(v21)) {
          int v22 = 43;
        }
        else {
          int v22 = 45;
        }
        uint64_t v23 = object_getClassName(a1);
        uint64_t v24 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        *(_DWORD *)int buf = 67110146;
        int v100 = v22;
        __int16 v101 = 2082;
        BOOL v102 = v23;
        __int16 v103 = 2082;
        int v104 = v24;
        __int16 v105 = 1024;
        int v106 = 953;
        __int16 v107 = 2114;
        id v108 = v5;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i Data to sign : %{public}@", buf, 0x2Cu);
      }

      *a3 = 0;
      id v94 = 0;
      id v25 = [a1 sendCommandWithClass:128 instruction:248 p1:0 p2:0 data:v5 error:&v94];
      id v26 = v94;
      if (v26 || !v25)
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v61 = NFLogGetLogger();
        if (v61)
        {
          long long v62 = (void (*)(uint64_t, const char *, ...))v61;
          uint64_t v63 = object_getClass(a1);
          BOOL v64 = class_isMetaClass(v63);
          uint64_t v65 = object_getClassName(a1);
          id v91 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
          uint64_t v66 = 45;
          if (v64) {
            uint64_t v66 = 43;
          }
          v62(3, "%c[%{public}s %{public}s]:%i Command failed", v66, v65, v91, 963);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v67 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          int v68 = object_getClass(a1);
          if (class_isMetaClass(v68)) {
            int v69 = 43;
          }
          else {
            int v69 = 45;
          }
          __int16 v70 = object_getClassName(a1);
          id v71 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
          *(_DWORD *)int buf = 67109890;
          int v100 = v69;
          __int16 v101 = 2082;
          BOOL v102 = v70;
          __int16 v103 = 2082;
          int v104 = v71;
          __int16 v105 = 1024;
          int v106 = 963;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Command failed", buf, 0x22u);
        }

        goto LABEL_69;
      }
      if ([v25 status] == 36864)
      {
        uint64_t v27 = [v25 response];
        if (v27)
        {
          uint64_t v28 = (void *)v27;
          uint64_t v29 = [v25 response];
          id v30 = [v29 length];

          if ((unint64_t)v30 > 0x50)
          {
            [v25 response];
            id v26 = 0;
            *a3 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_69;
          }
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v31 = NFLogGetLogger();
        if (v31)
        {
          BOOL v32 = (void (*)(uint64_t, const char *, ...))v31;
          BOOL v33 = object_getClass(a1);
          BOOL v34 = class_isMetaClass(v33);
          id v35 = object_getClassName(a1);
          uint64_t v36 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
          __int16 v37 = [v25 response];
          id v92 = [v37 length];
          uint64_t v38 = 45;
          if (v34) {
            uint64_t v38 = 43;
          }
          v32(3, "%c[%{public}s %{public}s]:%i Invalid response length : %lu", v38, v35, v36, 972, v92);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        BOOL v39 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          uint32_t v40 = object_getClass(a1);
          if (class_isMetaClass(v40)) {
            int v41 = 43;
          }
          else {
            int v41 = 45;
          }
          uint64_t v42 = object_getClassName(a1);
          int v43 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
          __int16 v44 = [v25 response];
          id v45 = [v44 length];
          *(_DWORD *)int buf = 67110146;
          int v100 = v41;
          __int16 v101 = 2082;
          BOOL v102 = v42;
          __int16 v103 = 2082;
          int v104 = v43;
          __int16 v105 = 1024;
          int v106 = 972;
          __int16 v107 = 2048;
          id v108 = v45;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid response length : %lu", buf, 0x2Cu);
        }
        id v46 = objc_alloc((Class)NSError);
        uint64_t v47 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v95 = NSLocalizedDescriptionKey;
        unsigned int v48 = +[NSString stringWithUTF8String:"Commmand Error"];
        long long v96 = v48;
        uint64_t v49 = &v96;
        __int16 v50 = &v95;
      }
      else
      {
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v72 = NFLogGetLogger();
        if (v72)
        {
          uint64_t v73 = (void (*)(uint64_t, const char *, ...))v72;
          __int16 v74 = object_getClass(a1);
          BOOL v75 = class_isMetaClass(v74);
          __int16 v76 = object_getClassName(a1);
          id v77 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
          uint64_t v93 = [v25 status];
          uint64_t v78 = 45;
          if (v75) {
            uint64_t v78 = 43;
          }
          v73(3, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", v78, v76, v77, 967, v93);
        }
        dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
        uint64_t v79 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          uint32_t v80 = object_getClass(a1);
          if (class_isMetaClass(v80)) {
            int v81 = 43;
          }
          else {
            int v81 = 45;
          }
          id v82 = object_getClassName(a1);
          int v83 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
          unsigned int v84 = [v25 status];
          *(_DWORD *)int buf = 67110146;
          int v100 = v81;
          __int16 v101 = 2082;
          BOOL v102 = v82;
          __int16 v103 = 2082;
          int v104 = v83;
          __int16 v105 = 1024;
          int v106 = 967;
          __int16 v107 = 1024;
          LODWORD(v10_Block_object_dispose(&STACK[0x2B0], 8) = v84;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Returned error: 0x%04x", buf, 0x28u);
        }

        id v46 = objc_alloc((Class)NSError);
        uint64_t v47 = +[NSString stringWithUTF8String:"nfcd"];
        NSErrorUserInfoKey v97 = NSLocalizedDescriptionKey;
        unsigned int v48 = +[NSString stringWithUTF8String:"Commmand Error"];
        int v98 = v48;
        uint64_t v49 = &v98;
        __int16 v50 = &v97;
      }
      id v85 = +[NSDictionary dictionaryWithObjects:v49 forKeys:v50 count:1];
      id v26 = [v46 initWithDomain:v47 code:16 userInfo:v85];
    }
    else
    {
      if (v15)
      {
        unsigned int v51 = object_getClass(a1);
        BOOL v52 = class_isMetaClass(v51);
        uint64_t v53 = object_getClassName(a1);
        id v90 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        uint64_t v54 = 45;
        if (v52) {
          uint64_t v54 = 43;
        }
        v16(3, "%c[%{public}s %{public}s]:%i Invalid parameters", v54, v53, v90, 949);
      }
      dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
      int v55 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        int v56 = object_getClass(a1);
        if (class_isMetaClass(v56)) {
          int v57 = 43;
        }
        else {
          int v57 = 45;
        }
        uint64_t v58 = object_getClassName(a1);
        unsigned int v59 = sel_getName("crs_authorizedInternalAuthenticate:signedData:");
        *(_DWORD *)int buf = 67109890;
        int v100 = v57;
        __int16 v101 = 2082;
        BOOL v102 = v58;
        __int16 v103 = 2082;
        int v104 = v59;
        __int16 v105 = 1024;
        int v106 = 949;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Invalid parameters", buf, 0x22u);
      }

      id v60 = objc_alloc((Class)NSError);
      id v25 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v109 = NSLocalizedDescriptionKey;
      uint64_t v47 = +[NSString stringWithUTF8String:"Invalid Parameter"];
      int v110 = v47;
      unsigned int v48 = +[NSDictionary dictionaryWithObjects:&v110 forKeys:&v109 count:1];
      id v26 = [v60 initWithDomain:v25 code:10 userInfo:v48];
    }

LABEL_69:
    goto LABEL_70;
  }
  id v26 = 0;
LABEL_70:

  return v26;
}

void sub_1000CEF5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D02A8(uint64_t a1)
{
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t Logger = NFLogGetLogger();
    if (Logger)
    {
      id v3 = (void (*)(uint64_t, const char *, ...))Logger;
      Class Class = object_getClass(*(id *)(a1 + 32));
      BOOL isMetaClass = class_isMetaClass(Class);
      ClassName = object_getClassName(*(id *)(a1 + 32));
      Name = sel_getName(*(SEL *)(a1 + 48));
      id v8 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v9 = 45;
      if (isMetaClass) {
        uint64_t v9 = 43;
      }
      v3(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v9, ClassName, Name, 871, v8);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    int v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v11)) {
        int v12 = 43;
      }
      else {
        int v12 = 45;
      }
      uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
      int v14 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v15 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)int buf = 67110146;
      int v26 = v12;
      __int16 v27 = 2082;
      uint64_t v28 = v13;
      __int16 v29 = 2082;
      id v30 = v14;
      __int16 v31 = 1024;
      int v32 = 871;
      __int16 v33 = 2114;
      BOOL v34 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v16 = *(void *)(a1 + 40);
    if (v16)
    {
      id v17 = objc_alloc((Class)NSError);
      BOOL v18 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:"Session not active"];
      uint64_t v24 = v19;
      int v20 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      id v21 = [v17 initWithDomain:v18 code:54 userInfo:v20];
      (*(void (**)(uint64_t, void, void, id))(v16 + 16))(v16, 0, 0, v21);
    }
  }
  else
  {
    id v22 = [*(id *)(a1 + 32) preloadApplets];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000D06D0(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 56));
    id v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 882, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
    int v14 = sel_getName(*(SEL *)(a1 + 56));
    uint64_t v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)int buf = 67110146;
    int v39 = v12;
    __int16 v40 = 2082;
    int v41 = v13;
    __int16 v42 = 2082;
    int v43 = v14;
    __int16 v44 = 1024;
    int v45 = 882;
    __int16 v46 = 2114;
    uint64_t v47 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 32) didStart]
    && ([*(id *)(a1 + 32) isSuspended] & 1) == 0
    && ![*(id *)(a1 + 32) didEnd])
  {
    if ([*(id *)(a1 + 40) isEqualToApplet:*(void *)(*(void *)(a1 + 32) + 168)])
    {
      int v32 = 0;
    }
    else
    {
      int v32 = [*(id *)(a1 + 32) setActiveApplet:*(void *)(a1 + 40)];
    }
    [*(id *)(a1 + 32) startDefaultMode];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_24;
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v16 = NFLogGetLogger();
  if (v16)
  {
    id v17 = (void (*)(uint64_t, const char *, ...))v16;
    BOOL v18 = object_getClass(*(id *)(a1 + 32));
    BOOL v19 = class_isMetaClass(v18);
    int v20 = object_getClassName(*(id *)(a1 + 32));
    id v21 = sel_getName(*(SEL *)(a1 + 56));
    id v22 = [*(id *)(a1 + 32) sessionUID];
    uint64_t v23 = 45;
    if (v19) {
      uint64_t v23 = 43;
    }
    v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 885, v22);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t v24 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    id v25 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v25)) {
      int v26 = 43;
    }
    else {
      int v26 = 45;
    }
    __int16 v27 = object_getClassName(*(id *)(a1 + 32));
    uint64_t v28 = sel_getName(*(SEL *)(a1 + 56));
    __int16 v29 = [*(id *)(a1 + 32) sessionUID];
    *(_DWORD *)int buf = 67110146;
    int v39 = v26;
    __int16 v40 = 2082;
    int v41 = v27;
    __int16 v42 = 2082;
    int v43 = v28;
    __int16 v44 = 1024;
    int v45 = 885;
    __int16 v46 = 2114;
    uint64_t v47 = v29;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
  }
  uint64_t v30 = *(void *)(a1 + 48);
  if (v30)
  {
    id v31 = objc_alloc((Class)NSError);
    int v32 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
    __int16 v33 = +[NSString stringWithUTF8String:"Session not active"];
    __int16 v37 = v33;
    BOOL v34 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
    id v35 = [v31 initWithDomain:v32 code:54 userInfo:v34];
    (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v35);

LABEL_24:
  }
}

void sub_1000D0BF0(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    id v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 899, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
    int v14 = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)int buf = 67110146;
    int v59 = v12;
    __int16 v60 = 2082;
    uint64_t v61 = v13;
    __int16 v62 = 2082;
    uint64_t v63 = v14;
    __int16 v64 = 1024;
    int v65 = 899;
    __int16 v66 = 2114;
    uint64_t v67 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      id v17 = (void (*)(uint64_t, const char *, ...))v16;
      BOOL v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      int v20 = object_getClassName(*(id *)(a1 + 32));
      id v21 = sel_getName(*(SEL *)(a1 + 48));
      id v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 901, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v28 = sel_getName(*(SEL *)(a1 + 48));
      __int16 v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)int buf = 67110146;
      int v59 = v26;
      __int16 v60 = 2082;
      uint64_t v61 = v27;
      __int16 v62 = 2082;
      uint64_t v63 = v28;
      __int16 v64 = 1024;
      int v65 = 901;
      __int16 v66 = 2114;
      uint64_t v67 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 40);
    if (v30)
    {
      id v31 = objc_alloc((Class)NSError);
      int v32 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v56 = NSLocalizedDescriptionKey;
      __int16 v33 = +[NSString stringWithUTF8String:"Session not active"];
      int v57 = v33;
      BOOL v34 = +[NSDictionary dictionaryWithObjects:&v57 forKeys:&v56 count:1];
      id v35 = [v31 initWithDomain:v32 code:54 userInfo:v34];
      (*(void (**)(uint64_t, id))(v30 + 16))(v30, v35);
    }
  }
  else if ([*(id *)(a1 + 32) _configureEmulationType:2])
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v36 = NFLogGetLogger();
    if (v36)
    {
      __int16 v37 = (void (*)(uint64_t, const char *, ...))v36;
      uint64_t v38 = object_getClass(*(id *)(a1 + 32));
      BOOL v39 = class_isMetaClass(v38);
      __int16 v40 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v53 = sel_getName(*(SEL *)(a1 + 48));
      uint64_t v41 = 45;
      if (v39) {
        uint64_t v41 = 43;
      }
      v37(3, "%c[%{public}s %{public}s]:%i Failed to start card emulation", v41, v40, v53, 905);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    __int16 v42 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      int v43 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v43)) {
        int v44 = 43;
      }
      else {
        int v44 = 45;
      }
      int v45 = object_getClassName(*(id *)(a1 + 32));
      __int16 v46 = sel_getName(*(SEL *)(a1 + 48));
      *(_DWORD *)int buf = 67109890;
      int v59 = v44;
      __int16 v60 = 2082;
      uint64_t v61 = v45;
      __int16 v62 = 2082;
      uint64_t v63 = v46;
      __int16 v64 = 1024;
      int v65 = 905;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Failed to start card emulation", buf, 0x22u);
    }

    uint64_t v47 = *(void *)(a1 + 40);
    id v48 = objc_alloc((Class)NSError);
    uint64_t v49 = +[NSString stringWithUTF8String:"nfcd"];
    NSErrorUserInfoKey v54 = NSLocalizedDescriptionKey;
    __int16 v50 = +[NSString stringWithUTF8String:"Stack Error"];
    int v55 = v50;
    unsigned int v51 = +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
    id v52 = [v48 initWithDomain:v49 code:15 userInfo:v51];
    (*(void (**)(uint64_t, id))(v47 + 16))(v47, v52);

    [*(id *)(a1 + 32) startDefaultMode];
  }
}

void sub_1000D12B0(uint64_t a1)
{
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  uint64_t Logger = NFLogGetLogger();
  if (Logger)
  {
    id v3 = (void (*)(uint64_t, const char *, ...))Logger;
    Class Class = object_getClass(*(id *)(a1 + 32));
    BOOL isMetaClass = class_isMetaClass(Class);
    ClassName = object_getClassName(*(id *)(a1 + 32));
    Name = sel_getName(*(SEL *)(a1 + 48));
    id v8 = [*(id *)(a1 + 32) clientName];
    uint64_t v9 = 45;
    if (isMetaClass) {
      uint64_t v9 = 43;
    }
    v3(6, "%c[%{public}s %{public}s]:%i %{public}@", v9, ClassName, Name, 919, v8);
  }
  dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
  int v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = object_getClass(*(id *)(a1 + 32));
    if (class_isMetaClass(v11)) {
      int v12 = 43;
    }
    else {
      int v12 = 45;
    }
    uint64_t v13 = object_getClassName(*(id *)(a1 + 32));
    int v14 = sel_getName(*(SEL *)(a1 + 48));
    uint64_t v15 = [*(id *)(a1 + 32) clientName];
    *(_DWORD *)int buf = 67110146;
    int v39 = v12;
    __int16 v40 = 2082;
    uint64_t v41 = v13;
    __int16 v42 = 2082;
    int v43 = v14;
    __int16 v44 = 1024;
    int v45 = 919;
    __int16 v46 = 2114;
    uint64_t v47 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%c[%{public}s %{public}s]:%i %{public}@", buf, 0x2Cu);
  }
  if (![*(id *)(a1 + 32) didStart]
    || ([*(id *)(a1 + 32) isSuspended] & 1) != 0
    || [*(id *)(a1 + 32) didEnd])
  {
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v16 = NFLogGetLogger();
    if (v16)
    {
      id v17 = (void (*)(uint64_t, const char *, ...))v16;
      BOOL v18 = object_getClass(*(id *)(a1 + 32));
      BOOL v19 = class_isMetaClass(v18);
      int v20 = object_getClassName(*(id *)(a1 + 32));
      id v21 = sel_getName(*(SEL *)(a1 + 48));
      id v22 = [*(id *)(a1 + 32) sessionUID];
      uint64_t v23 = 45;
      if (v19) {
        uint64_t v23 = 43;
      }
      v17(3, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", v23, v20, v21, 921, v22);
    }
    dispatch_get_specific(kNFLOG_DISPATCH_SPECIFIC_KEY);
    uint64_t v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      id v25 = object_getClass(*(id *)(a1 + 32));
      if (class_isMetaClass(v25)) {
        int v26 = 43;
      }
      else {
        int v26 = 45;
      }
      __int16 v27 = object_getClassName(*(id *)(a1 + 32));
      uint64_t v28 = sel_getName(*(SEL *)(a1 + 48));
      __int16 v29 = [*(id *)(a1 + 32) sessionUID];
      *(_DWORD *)int buf = 67110146;
      int v39 = v26;
      __int16 v40 = 2082;
      uint64_t v41 = v27;
      __int16 v42 = 2082;
      int v43 = v28;
      __int16 v44 = 1024;
      int v45 = 921;
      __int16 v46 = 2114;
      uint64_t v47 = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%c[%{public}s %{public}s]:%i Session %{public}@ is not active", buf, 0x2Cu);
    }
    uint64_t v30 = *(void *)(a1 + 40);
    if (v30)
    {
      id v31 = objc_alloc((Class)NSError);
      int v32 = +[NSString stringWithUTF8String:"nfcd"];
      NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
      __int16 v33 = +[NSString stringWithUTF8String:"Session not active"];
      __int16 v37 = v33;
      BOOL v34 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      id v35 = [v31 initWithDomain:v32 code:54 userInfo:v34];
      (*(void (**)(uint64_t, id))(v30 + 16))(v30, v35);
    }
  }
  else
  {
    [*(id *)(a1 + 32) startDefaultMode];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}