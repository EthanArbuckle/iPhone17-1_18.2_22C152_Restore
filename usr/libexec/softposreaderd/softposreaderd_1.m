double sub_1000A9064@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W5>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t);
  uint64_t inited;
  uint64_t v17;
  NSString *v18;
  NSString *v19;
  objc_class *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  long long v29;
  long long v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD v34[5];
  uint64_t v35;
  uint64_t v36;

  v33 = a3;
  v32 = a4;
  v6 = type metadata accessor for URL();
  v7 = *(void *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v31 - v13;
  URL.appendingPathComponent(_:)();
  URL.appendingPathExtension(_:)();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v11, v6);
  sub_100003EB0(&qword_1001DCF88);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0);
  *(void *)(inited + 64) = v17;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v18 = NSFileProtectionKey;
  v19 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v20 = (objc_class *)sub_10010534C(inited);
  v21 = v36;
  sub_1000D846C((uint64_t)v14, 5000, v20, a1, a2);
  if (v21)
  {
    v15(v14, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    v36 = a1;
    v22 = v33;
    v23 = v32;
    swift_bridgeObjectRelease();
    v24 = URL.path(percentEncoded:)(0);
    v25 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v36), v36))
        {
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x1000A9338);
        }
        v25 = HIDWORD(v36) - (int)v36;
LABEL_7:
        sub_1000A87C0((id)v24._countAndFlagsBits, (unint64_t)v24._object, v22, v25, 0, (uint64_t *)v34);
        v15(v14, v6);
        swift_bridgeObjectRelease();
        v29 = v34[3];
        *(_OWORD *)(v23 + 32) = v34[2];
        *(_OWORD *)(v23 + 48) = v29;
        *(_OWORD *)(v23 + 64) = v34[4];
        *(void *)(v23 + 80) = v35;
        result = *(double *)v34;
        v30 = v34[1];
        *(_OWORD *)v23 = v34[0];
        *(_OWORD *)(v23 + 16) = v30;
        break;
      case 2uLL:
        v27 = *(void *)(v36 + 16);
        v26 = *(void *)(v36 + 24);
        v25 = v26 - v27;
        if (!__OFSUB__(v26, v27)) {
          goto LABEL_7;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_7;
      default:
        v25 = BYTE6(a2);
        goto LABEL_7;
    }
  }
  return result;
}

void sub_1000A9348(uint64_t a1)
{
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DCE10);
  sub_1000AA7A8(a1);
  v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    uint64_t v6 = *(void *)(a1 + 72);
    unint64_t v7 = *(void *)(a1 + 80);
    swift_bridgeObjectRetain();
    v27[0] = sub_100005EB8(v6, v7, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000AA7EC(a1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "delete SLAM script %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000AA7EC(a1);
  }

  sub_1000AA830(a1, (uint64_t)v27);
  sub_1000AA830((uint64_t)v27, (uint64_t)v28);
  if (v29 <= 2u)
  {
    uint64_t v9 = v28[0];
    unint64_t v8 = v28[1];
    swift_bridgeObjectRetain();
    v10 = self;
    id v11 = [v10 defaultManager];
    NSString v12 = String._bridgeToObjectiveC()();
    unsigned int v13 = [v11 fileExistsAtPath:v12];

    if (v13)
    {
      id v14 = [v10 defaultManager];
      NSString v15 = String._bridgeToObjectiveC()();
      id v26 = 0;
      unsigned int v16 = [v14 removeItemAtPath:v15 error:&v26];

      if (v16)
      {
        id v17 = v26;
        swift_bridgeObjectRelease();
        return;
      }
      id v21 = v26;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      v18 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        id v26 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        swift_bridgeObjectRetain();
        sub_100005EB8(v9, v8, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v23 + 12) = 2080;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v24 = String.init<A>(describing:)();
        sub_100005EB8(v24, v25, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v22, "failed to delete %s: %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        return;
      }
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v18, v19))
      {

        swift_bridgeObjectRelease_n();
        return;
      }
      v20 = (uint8_t *)swift_slowAlloc();
      id v26 = (id)swift_slowAlloc();
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      sub_100005EB8(v9, v8, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "file at %s does not exist", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

unsigned char *sub_1000A98F8(unsigned char *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*result == 1)
  {
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003E78(v9, (uint64_t)qword_1001DCE10);
    v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      NSString v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "invalid SLAM, delete already saved SLAM if necessary", v12, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t v41 = a2[1];
    uint64_t v39 = a2[3];
    uint64_t v40 = a2[2];
    uint64_t v37 = a2[5];
    uint64_t v38 = a2[4];
    uint64_t v35 = a2[7];
    uint64_t v36 = a2[6];
    uint64_t v33 = a2[9];
    uint64_t v34 = a2[8];
    uint64_t v32 = a2[10];
    uint64_t v42 = *a2;
    swift_beginAccess();
    uint64_t v43 = *(void *)a3;
    uint64_t v44 = *(void *)(a3 + 8);
    uint64_t v45 = *(void *)(a3 + 16);
    uint64_t v46 = *(void *)(a3 + 24);
    uint64_t v47 = *(void *)(a3 + 32);
    long long v48 = *(_OWORD *)(a3 + 40);
    uint64_t v49 = *(void *)(a3 + 56);
    uint64_t v50 = *(void *)(a3 + 64);
    uint64_t v51 = *(void *)(a3 + 72);
    uint64_t v52 = *(void *)(a3 + 80);
    swift_beginAccess();
    uint64_t v53 = *(void *)a4;
    uint64_t v54 = *(void *)(a4 + 8);
    uint64_t v55 = *(void *)(a4 + 16);
    uint64_t v56 = *(void *)(a4 + 24);
    uint64_t v57 = *(void *)(a4 + 32);
    long long v58 = *(_OWORD *)(a4 + 40);
    uint64_t v59 = *(void *)(a4 + 56);
    uint64_t v60 = *(void *)(a4 + 64);
    uint64_t v61 = *(void *)(a4 + 72);
    uint64_t v62 = *(void *)(a4 + 80);
    swift_beginAccess();
    uint64_t v63 = *(void *)a5;
    uint64_t v64 = *(void *)(a5 + 8);
    uint64_t v65 = *(void *)(a5 + 16);
    uint64_t v66 = *(void *)(a5 + 24);
    uint64_t v67 = *(void *)(a5 + 32);
    long long v68 = *(_OWORD *)(a5 + 40);
    uint64_t v69 = *(void *)(a5 + 56);
    uint64_t v70 = *(void *)(a5 + 64);
    uint64_t v71 = *(void *)(a5 + 72);
    uint64_t v72 = *(void *)(a5 + 80);
    sub_1000AA760(v42, v41, v40, v39, v38, v37, v36, v35, v34, v33, v32);
    sub_1000AA760(v43, v44, v45, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, v50, v51, v52);
    sub_1000AA760(v53, v54, v55, v56, v57, v58, *((uint64_t *)&v58 + 1), v59, v60, v61, v62);
    sub_1000AA760(v63, v64, v65, v66, v67, v68, *((uint64_t *)&v68 + 1), v69, v70, v71, v72);
    if (v32)
    {
      sub_1000AA760(v42, v41, v40, v39, v38, v37, v36, v35, v34, v33, v32);
      unsigned int v13 = sub_10015AD80(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      if (v15 >= v14 >> 1) {
        unsigned int v13 = sub_10015AD80((void *)(v14 > 1), v15 + 1, 1, v13);
      }
      v13[2] = v15 + 1;
      unsigned int v16 = &v13[11 * v15];
      v16[4] = v42;
      v16[5] = v41;
      v16[6] = v40;
      v16[7] = v39;
      *((unsigned char *)v16 + 64) = v38;
      v16[9] = v37;
      v16[10] = v36;
      v16[11] = v35;
      *((unsigned char *)v16 + 96) = v34 & 1;
      *((unsigned char *)v16 + 97) = BYTE1(v34);
      v16[13] = v33;
      v16[14] = v32;
    }
    else
    {
      unsigned int v13 = _swiftEmptyArrayStorage;
    }
    if (v52)
    {
      sub_10005E40C(v43, v44, v45, v46, v47);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v13 = sub_10015AD80(0, v13[2] + 1, 1, v13);
      }
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1) {
        unsigned int v13 = sub_10015AD80((void *)(v17 > 1), v18 + 1, 1, v13);
      }
      v13[2] = v18 + 1;
      os_log_type_t v19 = &v13[11 * v18];
      v19[4] = v43;
      v19[5] = v44;
      v19[6] = v45;
      v19[7] = v46;
      *((unsigned char *)v19 + 64) = v47;
      *(_OWORD *)(v19 + 9) = v48;
      v19[11] = v49;
      *((unsigned char *)v19 + 96) = v50 & 1;
      *((unsigned char *)v19 + 97) = BYTE1(v50);
      v19[13] = v51;
      v19[14] = v52;
    }
    if (v62)
    {
      sub_10005E40C(v53, v54, v55, v56, v57);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v13 = sub_10015AD80(0, v13[2] + 1, 1, v13);
      }
      unint64_t v21 = v13[2];
      unint64_t v20 = v13[3];
      if (v21 >= v20 >> 1) {
        unsigned int v13 = sub_10015AD80((void *)(v20 > 1), v21 + 1, 1, v13);
      }
      v13[2] = v21 + 1;
      os_log_type_t v22 = &v13[11 * v21];
      v22[4] = v53;
      v22[5] = v54;
      v22[6] = v55;
      v22[7] = v56;
      *((unsigned char *)v22 + 64) = v57;
      *(_OWORD *)(v22 + 9) = v58;
      v22[11] = v59;
      *((unsigned char *)v22 + 96) = v60 & 1;
      *((unsigned char *)v22 + 97) = BYTE1(v60);
      v22[13] = v61;
      v22[14] = v62;
    }
    if (v72)
    {
      sub_10005E40C(v63, v64, v65, v66, v67);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned int v13 = sub_10015AD80(0, v13[2] + 1, 1, v13);
      }
      unint64_t v24 = v13[2];
      unint64_t v23 = v13[3];
      if (v24 >= v23 >> 1) {
        unsigned int v13 = sub_10015AD80((void *)(v23 > 1), v24 + 1, 1, v13);
      }
      v13[2] = v24 + 1;
      unint64_t v25 = &v13[11 * v24];
      v25[4] = v63;
      v25[5] = v64;
      v25[6] = v65;
      v25[7] = v66;
      *((unsigned char *)v25 + 64) = v67;
      *(_OWORD *)(v25 + 9) = v68;
      v25[11] = v69;
      *((unsigned char *)v25 + 96) = v70 & 1;
      *((unsigned char *)v25 + 97) = BYTE1(v70);
      v25[13] = v71;
      v25[14] = v72;
    }
    sub_100003EB0(&qword_1001DCF58);
    swift_arrayDestroy();
    uint64_t v26 = v13[2];
    if (v26)
    {
      v27 = v13 + 4;
      do
      {
        long long v28 = *((_OWORD *)v27 + 1);
        v73[0] = *(_OWORD *)v27;
        v73[1] = v28;
        long long v29 = *((_OWORD *)v27 + 2);
        long long v30 = *((_OWORD *)v27 + 3);
        long long v31 = *((_OWORD *)v27 + 4);
        uint64_t v74 = v27[10];
        v73[3] = v30;
        v73[4] = v31;
        v73[2] = v29;
        sub_1000AA7A8((uint64_t)v73);
        sub_1000A9348((uint64_t)v73);
        sub_1000AA7EC((uint64_t)v73);
        v27 += 11;
        --v26;
      }
      while (v26);
    }
    return (unsigned char *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000AA0DC(uint64_t a1)
{
  uint64_t v72 = a1;
  uint64_t v64 = type metadata accessor for OSSignpostError();
  uint64_t v68 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v1);
  uint64_t v67 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v69 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v74 = (char *)&v62 - v10;
  __chkstk_darwin(v9, v11);
  unsigned int v13 = (char *)&v62 - v12;
  if (qword_1001D9170 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for OSSignposter();
  uint64_t v15 = sub_100003E78(v14, (uint64_t)qword_1001DCE28);
  static OSSignpostID.exclusive.getter();
  uint64_t v66 = v15;
  unsigned int v16 = OSSignposter.logHandle.getter();
  os_signpost_type_t v17 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    unint64_t v19 = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    unint64_t v20 = v74;
    v18(v74, v13, v3);
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v22, "config-install-postProcessing", "begin clean up after install", v21, 2u);
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v20, v3);
  }
  else
  {

    unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    unint64_t v19 = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    unint64_t v20 = v74;
  }
  uint64_t v63 = v18;
  unint64_t v62 = v19;
  v18(v20, v13, v3);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v73 = OSSignpostIntervalState.init(id:isOpen:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v71 = v3;
  uint64_t v70 = v4 + 8;
  uint64_t v65 = v23;
  v23(v13, v3);
  uint64_t v24 = *(void *)(v72 + 16);
  if (v24)
  {
    uint64_t v25 = swift_bridgeObjectRetain() + 56;
    uint64_t v26 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v31 = *(void *)(v25 + 56);
      if (v31)
      {
        uint64_t v32 = *(void *)(v25 - 24);
        uint64_t v33 = *(void *)(v25 - 16);
        uint64_t v35 = *(void *)(v25 - 8);
        uint64_t v34 = *(void *)v25;
        long long v78 = *(_OWORD *)(v25 + 16);
        unint64_t v37 = *(void *)(v25 + 40);
        uint64_t v36 = *(void *)(v25 + 48);
        uint64_t v75 = *(void *)(v25 + 32);
        uint64_t v76 = v34;
        unsigned __int8 v38 = *(unsigned char *)(v25 + 8);
        sub_10005E40C(v32, v33, v35, v34, v38);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v79 = v36;
        unint64_t v77 = v37;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v26 = sub_10015AD80(0, v26[2] + 1, 1, v26);
        }
        unint64_t v41 = v26[2];
        unint64_t v40 = v26[3];
        if (v41 >= v40 >> 1) {
          uint64_t v26 = sub_10015AD80((void *)(v40 > 1), v41 + 1, 1, v26);
        }
        uint64_t v28 = v76;
        char v27 = v77;
        unint64_t v29 = v77 >> 8;
        v26[2] = v41 + 1;
        long long v30 = &v26[11 * v41];
        v30[4] = v32;
        v30[5] = v33;
        v30[6] = v35;
        v30[7] = v28;
        *((unsigned char *)v30 + 64) = v38;
        *(_OWORD *)(v30 + 9) = v78;
        v30[11] = v75;
        *((unsigned char *)v30 + 96) = v27 & 1;
        *((unsigned char *)v30 + 97) = v29;
        v30[13] = v79;
        v30[14] = v31;
      }
      v25 += 88;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = _swiftEmptyArrayStorage;
  }
  uint64_t v42 = v26[2];
  uint64_t v43 = v69;
  uint64_t v44 = v74;
  uint64_t v45 = v68;
  uint64_t v46 = v67;
  if (v42)
  {
    swift_bridgeObjectRetain();
    uint64_t v47 = 4;
    do
    {
      long long v48 = *(_OWORD *)&v26[v47 + 2];
      v80[0] = *(_OWORD *)&v26[v47];
      v80[1] = v48;
      long long v49 = *(_OWORD *)&v26[v47 + 4];
      long long v50 = *(_OWORD *)&v26[v47 + 6];
      long long v51 = *(_OWORD *)&v26[v47 + 8];
      uint64_t v81 = v26[v47 + 10];
      v80[3] = v50;
      v80[4] = v51;
      v80[2] = v49;
      sub_1000AA7A8((uint64_t)v80);
      sub_1000A9348((uint64_t)v80);
      sub_1000AA7EC((uint64_t)v80);
      v47 += 11;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v52 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v53 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v54 = v64;
    int v55 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v46, v64);
    uint64_t v56 = v71;
    if (v55 == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v57 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v54);
      uint64_t v57 = "end clean up after install";
    }
    v63(v44, v43, v56);
    long long v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v58 = 0;
    os_signpost_id_t v59 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v52, v53, v59, "config-install-postProcessing", v57, v58, 2u);
    swift_slowDealloc();

    uint64_t v60 = v65;
    v65(v43, v56);
    v60(v44, v56);
  }
  else
  {

    v65(v43, v71);
  }
  return swift_release();
}

uint64_t sub_1000AA760(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    sub_10005E40C(result, a2, a3, a4, a5);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000AA7A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AA7EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AA830(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1000AA88C(os_unfair_lock_s *a1)
{
  sub_10009F0E4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void ***)(v1 + 56));
}

uint64_t sub_1000AA8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s14InstallPackageVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AA918()
{
  unint64_t result = qword_1001DF8A0;
  if (!qword_1001DF8A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001DF8A0);
  }
  return result;
}

uint64_t sub_1000AA958(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AA9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s14InstallPackageVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AAA04()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AAA3C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    sub_10005E4C0(result, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000AAA84(unint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *(void *)a2;
    *(void *)unint64_t v4 = *(void *)a2;
    unint64_t v4 = v31 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return v4;
  }
  if (*(void *)(a2 + 80))
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    unsigned __int8 v11 = *(unsigned char *)(a2 + 32);
    sub_10005E40C(*(void *)a2, v8, v9, v10, v11);
    *(void *)unint64_t v4 = v7;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = v9;
    *(void *)(v4 + 24) = v10;
    *(unsigned char *)(v4 + 32) = v11;
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(v4 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(v4 + 64) = *(_WORD *)(a2 + 64);
    uint64_t v12 = *(void *)(a2 + 80);
    *(void *)(v4 + 72) = *(void *)(a2 + 72);
    *(void *)(v4 + 80) = v12;
    swift_bridgeObjectRetain();
    if (*(void *)(a2 + 168)) {
      goto LABEL_4;
    }
  }
  else
  {
    long long v32 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v32;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    long long v33 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v33;
    if (*(void *)(a2 + 168))
    {
LABEL_4:
      uint64_t v13 = *(void *)(a2 + 88);
      uint64_t v14 = *(void *)(a2 + 96);
      uint64_t v15 = *(void *)(a2 + 104);
      uint64_t v16 = *(void *)(a2 + 112);
      unsigned __int8 v17 = *(unsigned char *)(a2 + 120);
      sub_10005E40C(v13, v14, v15, v16, v17);
      *(void *)(v4 + 88) = v13;
      *(void *)(v4 + 96) = v14;
      *(void *)(v4 + 104) = v15;
      *(void *)(v4 + 112) = v16;
      *(unsigned char *)(v4 + 120) = v17;
      *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(v4 + 144) = *(void *)(a2 + 144);
      *(_WORD *)(v4 + 152) = *(_WORD *)(a2 + 152);
      uint64_t v18 = *(void *)(a2 + 168);
      *(void *)(v4 + 160) = *(void *)(a2 + 160);
      *(void *)(v4 + 168) = v18;
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 256)) {
        goto LABEL_5;
      }
LABEL_10:
      long long v36 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(v4 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(v4 + 224) = v36;
      *(_OWORD *)(v4 + 240) = *(_OWORD *)(a2 + 240);
      *(void *)(v4 + 256) = *(void *)(a2 + 256);
      long long v37 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(v4 + 192) = v37;
      if (*(void *)(a2 + 344)) {
        goto LABEL_6;
      }
LABEL_11:
      long long v38 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(v4 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(v4 + 312) = v38;
      *(_OWORD *)(v4 + 328) = *(_OWORD *)(a2 + 328);
      *(void *)(v4 + 344) = *(void *)(a2 + 344);
      long long v39 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(v4 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(v4 + 280) = v39;
      goto LABEL_12;
    }
  }
  long long v34 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 136) = v34;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(v4 + 168) = *(void *)(a2 + 168);
  long long v35 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v4 + 104) = v35;
  if (!*(void *)(a2 + 256)) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v19 = *(void *)(a2 + 176);
  uint64_t v20 = *(void *)(a2 + 184);
  uint64_t v21 = *(void *)(a2 + 192);
  uint64_t v22 = *(void *)(a2 + 200);
  unsigned __int8 v23 = *(unsigned char *)(a2 + 208);
  sub_10005E40C(v19, v20, v21, v22, v23);
  *(void *)(v4 + 176) = v19;
  *(void *)(v4 + 184) = v20;
  *(void *)(v4 + 192) = v21;
  *(void *)(v4 + 200) = v22;
  *(unsigned char *)(v4 + 208) = v23;
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(v4 + 232) = *(void *)(a2 + 232);
  *(_WORD *)(v4 + 240) = *(_WORD *)(a2 + 240);
  uint64_t v24 = *(void *)(a2 + 256);
  *(void *)(v4 + 248) = *(void *)(a2 + 248);
  *(void *)(v4 + 256) = v24;
  swift_bridgeObjectRetain();
  if (!*(void *)(a2 + 344)) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v25 = *(void *)(a2 + 264);
  uint64_t v26 = *(void *)(a2 + 272);
  uint64_t v27 = *(void *)(a2 + 280);
  uint64_t v28 = *(void *)(a2 + 288);
  unsigned __int8 v29 = *(unsigned char *)(a2 + 296);
  sub_10005E40C(v25, v26, v27, v28, v29);
  *(void *)(v4 + 264) = v25;
  *(void *)(v4 + 272) = v26;
  *(void *)(v4 + 280) = v27;
  *(void *)(v4 + 288) = v28;
  *(unsigned char *)(v4 + 296) = v29;
  *(_OWORD *)(v4 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(v4 + 320) = *(void *)(a2 + 320);
  *(_WORD *)(v4 + 328) = *(_WORD *)(a2 + 328);
  uint64_t v30 = *(void *)(a2 + 344);
  *(void *)(v4 + 336) = *(void *)(a2 + 336);
  *(void *)(v4 + 344) = v30;
  swift_bridgeObjectRetain();
LABEL_12:
  uint64_t v40 = a3[8];
  uint64_t v41 = v4 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
  v45(v41, v42, v43);
  v45(v4 + a3[9], a2 + a3[9], v43);
  uint64_t v46 = a3[10];
  uint64_t v47 = (void *)(v4 + v46);
  long long v48 = (const void *)(a2 + v46);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(a2 + v46, 1, v43))
  {
    uint64_t v49 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    v45((uint64_t)v47, (uint64_t)v48, v43);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v47, 0, 1, v43);
  }
  uint64_t v50 = a3[11];
  uint64_t v51 = v4 + v50;
  uint64_t v52 = a2 + v50;
  if (*(void *)v52 == 1)
  {
    long long v53 = *(_OWORD *)(v52 + 16);
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    *(_OWORD *)(v51 + 16) = v53;
  }
  else
  {
    uint64_t v55 = *(void *)(v52 + 8);
    uint64_t v54 = *(void *)(v52 + 16);
    *(void *)uint64_t v51 = *(void *)v52;
    *(void *)(v51 + 8) = v55;
    uint64_t v56 = *(void *)(v52 + 24);
    *(void *)(v51 + 16) = v54;
    *(void *)(v51 + 24) = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v57 = a3[12];
  uint64_t v58 = v4 + v57;
  uint64_t v59 = a2 + v57;
  if (*(void *)v59 == 1)
  {
    long long v60 = *(_OWORD *)(v59 + 16);
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    *(_OWORD *)(v58 + 16) = v60;
  }
  else
  {
    uint64_t v62 = *(void *)(v59 + 8);
    uint64_t v61 = *(void *)(v59 + 16);
    *(void *)uint64_t v58 = *(void *)v59;
    *(void *)(v58 + 8) = v62;
    uint64_t v63 = *(void *)(v59 + 24);
    *(void *)(v58 + 16) = v61;
    *(void *)(v58 + 24) = v63;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000AAF00(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 80))
  {
    sub_10005E4C0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 168))
  {
    sub_10005E4C0(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 256))
  {
    sub_10005E4C0(*(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)(a1 + 200), *(unsigned char *)(a1 + 208));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 344))
  {
    sub_10005E4C0(*(void *)(a1 + 264), *(void *)(a1 + 272), *(void *)(a1 + 280), *(void *)(a1 + 288), *(unsigned char *)(a1 + 296));
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(a1 + a2[9], v5);
  uint64_t v8 = a1 + a2[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  if (*(void *)(a1 + a2[11]) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + a2[12]);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000AB0F4(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(a2 + 80))
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    unsigned __int8 v10 = *(unsigned char *)(a2 + 32);
    sub_10005E40C(*(void *)a2, v7, v8, v9, v10);
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v9;
    *(unsigned char *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    uint64_t v11 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v11;
    swift_bridgeObjectRetain();
    if (*(void *)(a2 + 168)) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v30 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v30;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    long long v31 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v31;
    if (*(void *)(a2 + 168))
    {
LABEL_3:
      uint64_t v12 = *(void *)(a2 + 88);
      uint64_t v13 = *(void *)(a2 + 96);
      uint64_t v14 = *(void *)(a2 + 104);
      uint64_t v15 = *(void *)(a2 + 112);
      unsigned __int8 v16 = *(unsigned char *)(a2 + 120);
      sub_10005E40C(v12, v13, v14, v15, v16);
      *(void *)(a1 + 88) = v12;
      *(void *)(a1 + 96) = v13;
      *(void *)(a1 + 104) = v14;
      *(void *)(a1 + 112) = v15;
      *(unsigned char *)(a1 + 120) = v16;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      uint64_t v17 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v17;
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 256)) {
        goto LABEL_4;
      }
LABEL_8:
      long long v34 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 224) = v34;
      *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      long long v35 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v35;
      if (*(void *)(a2 + 344)) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  long long v32 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v32;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v33 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v33;
  if (!*(void *)(a2 + 256)) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v18 = *(void *)(a2 + 176);
  uint64_t v19 = *(void *)(a2 + 184);
  uint64_t v20 = *(void *)(a2 + 192);
  uint64_t v21 = *(void *)(a2 + 200);
  unsigned __int8 v22 = *(unsigned char *)(a2 + 208);
  sub_10005E40C(v18, v19, v20, v21, v22);
  *(void *)(a1 + 176) = v18;
  *(void *)(a1 + 184) = v19;
  *(void *)(a1 + 192) = v20;
  *(void *)(a1 + 200) = v21;
  *(unsigned char *)(a1 + 208) = v22;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  uint64_t v23 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v23;
  swift_bridgeObjectRetain();
  if (*(void *)(a2 + 344))
  {
LABEL_5:
    uint64_t v24 = *(void *)(a2 + 264);
    uint64_t v25 = *(void *)(a2 + 272);
    uint64_t v26 = *(void *)(a2 + 280);
    uint64_t v27 = *(void *)(a2 + 288);
    unsigned __int8 v28 = *(unsigned char *)(a2 + 296);
    sub_10005E40C(v24, v25, v26, v27, v28);
    *(void *)(a1 + 264) = v24;
    *(void *)(a1 + 272) = v25;
    *(void *)(a1 + 280) = v26;
    *(void *)(a1 + 288) = v27;
    *(unsigned char *)(a1 + 296) = v28;
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
    uint64_t v29 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = v29;
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
LABEL_9:
  long long v36 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v36;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  long long v37 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v37;
LABEL_10:
  uint64_t v38 = a3[8];
  long long v39 = (void *)(a1 + v38);
  uint64_t v40 = (const void *)(a2 + v38);
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(void (**)(void *, const void *, uint64_t))(v42 + 16);
  v43(v39, v40, v41);
  v43((void *)(a1 + a3[9]), (const void *)(a2 + a3[9]), v41);
  uint64_t v44 = a3[10];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (const void *)(a2 + v44);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(a2 + v44, 1, v41))
  {
    uint64_t v47 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    v43(v45, v46, v41);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v45, 0, 1, v41);
  }
  uint64_t v48 = a3[11];
  uint64_t v49 = a1 + v48;
  uint64_t v50 = a2 + v48;
  if (*(void *)v50 == 1)
  {
    long long v51 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
    *(_OWORD *)(v49 + 16) = v51;
  }
  else
  {
    uint64_t v53 = *(void *)(v50 + 8);
    uint64_t v52 = *(void *)(v50 + 16);
    *(void *)uint64_t v49 = *(void *)v50;
    *(void *)(v49 + 8) = v53;
    uint64_t v54 = *(void *)(v50 + 24);
    *(void *)(v49 + 16) = v52;
    *(void *)(v49 + 24) = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v55 = a3[12];
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  if (*(void *)v57 == 1)
  {
    long long v58 = *(_OWORD *)(v57 + 16);
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    *(_OWORD *)(v56 + 16) = v58;
  }
  else
  {
    uint64_t v60 = *(void *)(v57 + 8);
    uint64_t v59 = *(void *)(v57 + 16);
    *(void *)uint64_t v56 = *(void *)v57;
    *(void *)(v56 + 8) = v60;
    uint64_t v61 = *(void *)(v57 + 24);
    *(void *)(v56 + 16) = v59;
    *(void *)(v56 + 24) = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000AB520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      unsigned __int8 v11 = *(unsigned char *)(a2 + 32);
      sub_10005E40C(*(void *)a2, v8, v9, v10, v11);
      uint64_t v12 = *(void *)a1;
      uint64_t v13 = *(void *)(a1 + 8);
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v10;
      unsigned __int8 v16 = *(unsigned char *)(a1 + 32);
      *(unsigned char *)(a1 + 32) = v11;
      sub_10005E4C0(v12, v13, v14, v15, v16);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v17 = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 56) = v17;
      *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000ABE50(a1);
      long long v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v24;
      long long v26 = *(_OWORD *)(a2 + 48);
      long long v25 = *(_OWORD *)(a2 + 64);
      long long v27 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 48) = v26;
      *(_OWORD *)(a1 + 64) = v25;
      *(_OWORD *)(a1 + 32) = v27;
    }
  }
  else if (v6)
  {
    uint64_t v18 = *(void *)a2;
    uint64_t v19 = *(void *)(a2 + 8);
    uint64_t v20 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)(a2 + 24);
    unsigned __int8 v22 = *(unsigned char *)(a2 + 32);
    sub_10005E40C(*(void *)a2, v19, v20, v21, v22);
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v19;
    *(void *)(a1 + 16) = v20;
    *(void *)(a1 + 24) = v21;
    *(unsigned char *)(a1 + 32) = v22;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    uint64_t v23 = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(void *)(a1 + 56) = v23;
    *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v28;
    long long v29 = *(_OWORD *)(a2 + 32);
    long long v30 = *(_OWORD *)(a2 + 48);
    long long v31 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v30;
    *(_OWORD *)(a1 + 64) = v31;
    *(_OWORD *)(a1 + 32) = v29;
  }
  long long v32 = (_OWORD *)(a1 + 88);
  long long v33 = (_OWORD *)(a2 + 88);
  uint64_t v34 = *(void *)(a2 + 168);
  if (*(void *)(a1 + 168))
  {
    if (v34)
    {
      uint64_t v35 = *(void *)(a2 + 88);
      uint64_t v36 = *(void *)(a2 + 96);
      uint64_t v37 = *(void *)(a2 + 104);
      uint64_t v38 = *(void *)(a2 + 112);
      unsigned __int8 v39 = *(unsigned char *)(a2 + 120);
      sub_10005E40C(v35, v36, v37, v38, v39);
      uint64_t v40 = *(void *)(a1 + 88);
      uint64_t v41 = *(void *)(a1 + 96);
      uint64_t v42 = *(void *)(a1 + 104);
      uint64_t v43 = *(void *)(a1 + 112);
      *(void *)(a1 + 88) = v35;
      *(void *)(a1 + 96) = v36;
      *(void *)(a1 + 104) = v37;
      *(void *)(a1 + 112) = v38;
      unsigned __int8 v44 = *(unsigned char *)(a1 + 120);
      *(unsigned char *)(a1 + 120) = v39;
      sub_10005E4C0(v40, v41, v42, v43, v44);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      uint64_t v45 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 144) = v45;
      *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000ABE50(a1 + 88);
      long long v52 = *(_OWORD *)(a2 + 104);
      *long long v32 = *v33;
      *(_OWORD *)(a1 + 104) = v52;
      long long v54 = *(_OWORD *)(a2 + 136);
      long long v53 = *(_OWORD *)(a2 + 152);
      long long v55 = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v54;
      *(_OWORD *)(a1 + 152) = v53;
      *(_OWORD *)(a1 + 120) = v55;
    }
  }
  else if (v34)
  {
    uint64_t v46 = *(void *)(a2 + 88);
    uint64_t v47 = *(void *)(a2 + 96);
    uint64_t v48 = *(void *)(a2 + 104);
    uint64_t v49 = *(void *)(a2 + 112);
    unsigned __int8 v50 = *(unsigned char *)(a2 + 120);
    sub_10005E40C(v46, v47, v48, v49, v50);
    *(void *)(a1 + 88) = v46;
    *(void *)(a1 + 96) = v47;
    *(void *)(a1 + 104) = v48;
    *(void *)(a1 + 112) = v49;
    *(unsigned char *)(a1 + 120) = v50;
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    uint64_t v51 = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(void *)(a1 + 144) = v51;
    *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v56 = *(_OWORD *)(a2 + 104);
    *long long v32 = *v33;
    *(_OWORD *)(a1 + 104) = v56;
    long long v57 = *(_OWORD *)(a2 + 120);
    long long v58 = *(_OWORD *)(a2 + 136);
    long long v59 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v58;
    *(_OWORD *)(a1 + 152) = v59;
    *(_OWORD *)(a1 + 120) = v57;
  }
  uint64_t v60 = (_OWORD *)(a1 + 176);
  uint64_t v61 = (_OWORD *)(a2 + 176);
  uint64_t v62 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256))
  {
    if (v62)
    {
      uint64_t v63 = *(void *)(a2 + 176);
      uint64_t v64 = *(void *)(a2 + 184);
      uint64_t v65 = *(void *)(a2 + 192);
      uint64_t v66 = *(void *)(a2 + 200);
      unsigned __int8 v67 = *(unsigned char *)(a2 + 208);
      sub_10005E40C(v63, v64, v65, v66, v67);
      uint64_t v68 = *(void *)(a1 + 176);
      uint64_t v69 = *(void *)(a1 + 184);
      uint64_t v70 = *(void *)(a1 + 192);
      uint64_t v71 = *(void *)(a1 + 200);
      *(void *)(a1 + 176) = v63;
      *(void *)(a1 + 184) = v64;
      *(void *)(a1 + 192) = v65;
      *(void *)(a1 + 200) = v66;
      unsigned __int8 v72 = *(unsigned char *)(a1 + 208);
      *(unsigned char *)(a1 + 208) = v67;
      sub_10005E4C0(v68, v69, v70, v71, v72);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      uint64_t v73 = *(void *)(a2 + 232);
      *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
      *(void *)(a1 + 232) = v73;
      *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000ABE50(a1 + 176);
      long long v80 = *(_OWORD *)(a2 + 192);
      *uint64_t v60 = *v61;
      *(_OWORD *)(a1 + 192) = v80;
      long long v82 = *(_OWORD *)(a2 + 224);
      long long v81 = *(_OWORD *)(a2 + 240);
      long long v83 = *(_OWORD *)(a2 + 208);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(_OWORD *)(a1 + 224) = v82;
      *(_OWORD *)(a1 + 240) = v81;
      *(_OWORD *)(a1 + 208) = v83;
    }
  }
  else if (v62)
  {
    uint64_t v74 = *(void *)(a2 + 176);
    uint64_t v75 = *(void *)(a2 + 184);
    uint64_t v76 = *(void *)(a2 + 192);
    uint64_t v77 = *(void *)(a2 + 200);
    unsigned __int8 v78 = *(unsigned char *)(a2 + 208);
    sub_10005E40C(v74, v75, v76, v77, v78);
    *(void *)(a1 + 176) = v74;
    *(void *)(a1 + 184) = v75;
    *(void *)(a1 + 192) = v76;
    *(void *)(a1 + 200) = v77;
    *(unsigned char *)(a1 + 208) = v78;
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    uint64_t v79 = *(void *)(a2 + 232);
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    *(void *)(a1 + 232) = v79;
    *(unsigned char *)(a1 + 241) = *(unsigned char *)(a2 + 241);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v84 = *(_OWORD *)(a2 + 192);
    *uint64_t v60 = *v61;
    *(_OWORD *)(a1 + 192) = v84;
    long long v85 = *(_OWORD *)(a2 + 208);
    long long v86 = *(_OWORD *)(a2 + 224);
    long long v87 = *(_OWORD *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(_OWORD *)(a1 + 224) = v86;
    *(_OWORD *)(a1 + 240) = v87;
    *(_OWORD *)(a1 + 208) = v85;
  }
  v88 = (_OWORD *)(a1 + 264);
  v89 = (_OWORD *)(a2 + 264);
  uint64_t v90 = *(void *)(a2 + 344);
  if (*(void *)(a1 + 344))
  {
    if (v90)
    {
      uint64_t v91 = *(void *)(a2 + 264);
      uint64_t v92 = *(void *)(a2 + 272);
      uint64_t v93 = *(void *)(a2 + 280);
      uint64_t v94 = *(void *)(a2 + 288);
      unsigned __int8 v95 = *(unsigned char *)(a2 + 296);
      sub_10005E40C(v91, v92, v93, v94, v95);
      uint64_t v96 = *(void *)(a1 + 264);
      uint64_t v97 = *(void *)(a1 + 272);
      uint64_t v98 = *(void *)(a1 + 280);
      uint64_t v99 = *(void *)(a1 + 288);
      *(void *)(a1 + 264) = v91;
      *(void *)(a1 + 272) = v92;
      *(void *)(a1 + 280) = v93;
      *(void *)(a1 + 288) = v94;
      unsigned __int8 v100 = *(unsigned char *)(a1 + 296);
      *(unsigned char *)(a1 + 296) = v95;
      sub_10005E4C0(v96, v97, v98, v99, v100);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      uint64_t v101 = *(void *)(a2 + 320);
      *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
      *(void *)(a1 + 320) = v101;
      *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000ABE50(a1 + 264);
      long long v108 = *(_OWORD *)(a2 + 280);
      _OWORD *v88 = *v89;
      *(_OWORD *)(a1 + 280) = v108;
      long long v110 = *(_OWORD *)(a2 + 312);
      long long v109 = *(_OWORD *)(a2 + 328);
      long long v111 = *(_OWORD *)(a2 + 296);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(_OWORD *)(a1 + 312) = v110;
      *(_OWORD *)(a1 + 328) = v109;
      *(_OWORD *)(a1 + 296) = v111;
    }
  }
  else if (v90)
  {
    uint64_t v102 = *(void *)(a2 + 264);
    uint64_t v103 = *(void *)(a2 + 272);
    uint64_t v104 = *(void *)(a2 + 280);
    uint64_t v105 = *(void *)(a2 + 288);
    unsigned __int8 v106 = *(unsigned char *)(a2 + 296);
    sub_10005E40C(v102, v103, v104, v105, v106);
    *(void *)(a1 + 264) = v102;
    *(void *)(a1 + 272) = v103;
    *(void *)(a1 + 280) = v104;
    *(void *)(a1 + 288) = v105;
    *(unsigned char *)(a1 + 296) = v106;
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    uint64_t v107 = *(void *)(a2 + 320);
    *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
    *(void *)(a1 + 320) = v107;
    *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v112 = *(_OWORD *)(a2 + 280);
    _OWORD *v88 = *v89;
    *(_OWORD *)(a1 + 280) = v112;
    long long v113 = *(_OWORD *)(a2 + 296);
    long long v114 = *(_OWORD *)(a2 + 312);
    long long v115 = *(_OWORD *)(a2 + 328);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(_OWORD *)(a1 + 312) = v114;
    *(_OWORD *)(a1 + 328) = v115;
    *(_OWORD *)(a1 + 296) = v113;
  }
  uint64_t v116 = *(int *)(a3 + 32);
  uint64_t v117 = a1 + v116;
  uint64_t v118 = a2 + v116;
  uint64_t v119 = type metadata accessor for UUID();
  uint64_t v120 = a3;
  uint64_t v121 = *(void *)(v119 - 8);
  v122 = *(void (**)(uint64_t, uint64_t, uint64_t))(v121 + 24);
  v122(v117, v118, v119);
  v122(a1 + *(int *)(v120 + 36), a2 + *(int *)(v120 + 36), v119);
  uint64_t v143 = v120;
  uint64_t v123 = *(int *)(v120 + 40);
  v124 = (const void *)(a2 + v123);
  v125 = *(uint64_t (**)(void))(v121 + 48);
  v142 = (void *)(a1 + v123);
  LODWORD(v120) = v125();
  int v126 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v125)(v124, 1, v119);
  if (v120)
  {
    if (v126)
    {
      size_t v127 = *(void *)(*(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8) + 64);
      v128 = v142;
LABEL_34:
      memcpy(v128, v124, v127);
      goto LABEL_37;
    }
    (*(void (**)(void *, const void *, uint64_t))(v121 + 16))(v142, v124, v119);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v121 + 56))(v142, 0, 1, v119);
  }
  else
  {
    if (v126)
    {
      (*(void (**)(void *, uint64_t))(v121 + 8))(v142, v119);
      size_t v127 = *(void *)(*(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8) + 64);
      v128 = v142;
      goto LABEL_34;
    }
    v122((uint64_t)v142, (uint64_t)v124, v119);
  }
LABEL_37:
  uint64_t v129 = *(int *)(v143 + 44);
  uint64_t v130 = a1 + v129;
  uint64_t v131 = a2 + v129;
  uint64_t v132 = *(void *)(a2 + v129);
  if (*(void *)(a1 + v129) == 1)
  {
    if (v132 == 1)
    {
      long long v133 = *(_OWORD *)(v131 + 16);
      *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
      *(_OWORD *)(v130 + 16) = v133;
    }
    else
    {
      *(void *)uint64_t v130 = v132;
      *(void *)(v130 + 8) = *(void *)(v131 + 8);
      *(void *)(v130 + 16) = *(void *)(v131 + 16);
      *(void *)(v130 + 24) = *(void *)(v131 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v132 == 1)
  {
    sub_1000ABEA4(a1 + v129);
    long long v134 = *(_OWORD *)(v131 + 16);
    *(_OWORD *)uint64_t v130 = *(_OWORD *)v131;
    *(_OWORD *)(v130 + 16) = v134;
  }
  else
  {
    *(void *)uint64_t v130 = v132;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v130 + 8) = *(void *)(v131 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v130 + 16) = *(void *)(v131 + 16);
    *(void *)(v130 + 24) = *(void *)(v131 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v135 = *(int *)(v143 + 48);
  uint64_t v136 = a1 + v135;
  uint64_t v137 = a2 + v135;
  uint64_t v138 = *(void *)(a2 + v135);
  if (*(void *)(a1 + v135) == 1)
  {
    if (v138 == 1)
    {
      long long v139 = *(_OWORD *)(v137 + 16);
      *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
      *(_OWORD *)(v136 + 16) = v139;
    }
    else
    {
      *(void *)uint64_t v136 = v138;
      *(void *)(v136 + 8) = *(void *)(v137 + 8);
      *(void *)(v136 + 16) = *(void *)(v137 + 16);
      *(void *)(v136 + 24) = *(void *)(v137 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v138 == 1)
  {
    sub_1000ABEA4(a1 + v135);
    long long v140 = *(_OWORD *)(v137 + 16);
    *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
    *(_OWORD *)(v136 + 16) = v140;
  }
  else
  {
    *(void *)uint64_t v136 = v138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v136 + 8) = *(void *)(v137 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v136 + 16) = *(void *)(v137 + 16);
    *(void *)(v136 + 24) = *(void *)(v137 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1000ABE50(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000ABEA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000ABEF8(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  long long v9 = *(_OWORD *)(a2 + 240);
  long long v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v9;
  *(_OWORD *)(a1 + 208) = v10;
  long long v11 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v11;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  long long v12 = *(_OWORD *)(a2 + 280);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v12;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(void *, const void *, uint64_t))(v17 + 32);
  v18(v14, v15, v16);
  v18((void *)(a1 + a3[9]), (const void *)(a2 + a3[9]), v16);
  uint64_t v19 = a3[10];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(a2 + v19, 1, v16))
  {
    uint64_t v22 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v18(v20, v21, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
  }
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  long long v25 = (_OWORD *)(a1 + v23);
  long long v26 = (_OWORD *)(a2 + v23);
  long long v27 = v26[1];
  *long long v25 = *v26;
  v25[1] = v27;
  long long v28 = (_OWORD *)(a1 + v24);
  long long v29 = (_OWORD *)(a2 + v24);
  long long v30 = v29[1];
  *long long v28 = *v29;
  v28[1] = v30;
  return a1;
}

uint64_t sub_1000AC118(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(a1 + 80))
  {
    if (*(void *)(a2 + 80))
    {
      char v6 = *(unsigned char *)(a2 + 32);
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      long long v11 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v11;
      unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
      *(unsigned char *)(a1 + 32) = v6;
      sub_10005E4C0(v7, v8, v9, v10, v12);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      uint64_t v13 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v13;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1000ABE50(a1);
  }
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
LABEL_6:
  if (*(void *)(a1 + 168))
  {
    if (*(void *)(a2 + 168))
    {
      char v16 = *(unsigned char *)(a2 + 120);
      uint64_t v17 = *(void *)(a1 + 88);
      uint64_t v18 = *(void *)(a1 + 96);
      uint64_t v19 = *(void *)(a1 + 104);
      uint64_t v20 = *(void *)(a1 + 112);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      unsigned __int8 v21 = *(unsigned char *)(a1 + 120);
      *(unsigned char *)(a1 + 120) = v16;
      sub_10005E4C0(v17, v18, v19, v20, v21);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      uint64_t v22 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v22;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1000ABE50(a1 + 88);
  }
  long long v23 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v23;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v24 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v24;
LABEL_11:
  if (*(void *)(a1 + 256))
  {
    if (*(void *)(a2 + 256))
    {
      char v25 = *(unsigned char *)(a2 + 208);
      uint64_t v26 = *(void *)(a1 + 176);
      uint64_t v27 = *(void *)(a1 + 184);
      uint64_t v28 = *(void *)(a1 + 192);
      uint64_t v29 = *(void *)(a1 + 200);
      long long v30 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v30;
      unsigned __int8 v31 = *(unsigned char *)(a1 + 208);
      *(unsigned char *)(a1 + 208) = v25;
      sub_10005E4C0(v26, v27, v28, v29, v31);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      uint64_t v32 = *(void *)(a2 + 256);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(void *)(a1 + 256) = v32;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1000ABE50(a1 + 176);
  }
  long long v33 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v33;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  long long v34 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v34;
LABEL_16:
  uint64_t v35 = (_OWORD *)(a1 + 264);
  uint64_t v36 = (_OWORD *)(a2 + 264);
  if (*(void *)(a1 + 344))
  {
    if (*(void *)(a2 + 344))
    {
      char v37 = *(unsigned char *)(a2 + 296);
      uint64_t v38 = *(void *)(a1 + 264);
      uint64_t v39 = *(void *)(a1 + 272);
      uint64_t v40 = *(void *)(a1 + 280);
      uint64_t v41 = *(void *)(a1 + 288);
      long long v42 = *(_OWORD *)(a2 + 280);
      *uint64_t v35 = *v36;
      *(_OWORD *)(a1 + 280) = v42;
      unsigned __int8 v43 = *(unsigned char *)(a1 + 296);
      *(unsigned char *)(a1 + 296) = v37;
      sub_10005E4C0(v38, v39, v40, v41, v43);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
      uint64_t v44 = *(void *)(a2 + 344);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = v44;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    sub_1000ABE50(a1 + 264);
  }
  long long v45 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v45;
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  long long v46 = *(_OWORD *)(a2 + 280);
  *uint64_t v35 = *v36;
  *(_OWORD *)(a1 + 280) = v46;
LABEL_21:
  uint64_t v47 = a3[8];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v50 - 8);
  long long v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 40);
  v52(v48, v49, v50);
  v52(a1 + a3[9], a2 + a3[9], v50);
  unsigned __int8 v72 = a3;
  uint64_t v53 = a3[10];
  long long v54 = (const void *)(a2 + v53);
  long long v55 = *(uint64_t (**)(void))(v51 + 48);
  uint64_t v71 = (void *)(a1 + v53);
  int v56 = v55();
  int v57 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v55)(v54, 1, v50);
  if (v56)
  {
    if (v57)
    {
      size_t v58 = *(void *)(*(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8) + 64);
      long long v59 = v71;
LABEL_26:
      memcpy(v59, v54, v58);
      goto LABEL_29;
    }
    (*(void (**)(void *, const void *, uint64_t))(v51 + 32))(v71, v54, v50);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v71, 0, 1, v50);
  }
  else
  {
    if (v57)
    {
      (*(void (**)(void *, uint64_t))(v51 + 8))(v71, v50);
      size_t v58 = *(void *)(*(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8) + 64);
      long long v59 = v71;
      goto LABEL_26;
    }
    v52((uint64_t)v71, (uint64_t)v54, v50);
  }
LABEL_29:
  uint64_t v60 = v72[11];
  uint64_t v61 = a1 + v60;
  uint64_t v62 = a2 + v60;
  if (*(void *)(a1 + v60) == 1)
  {
LABEL_32:
    long long v63 = *(_OWORD *)(v62 + 16);
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
    *(_OWORD *)(v61 + 16) = v63;
    goto LABEL_34;
  }
  if (*(void *)v62 == 1)
  {
    sub_1000ABEA4(v61);
    goto LABEL_32;
  }
  *(void *)uint64_t v61 = *(void *)v62;
  swift_bridgeObjectRelease();
  *(void *)(v61 + 8) = *(void *)(v62 + 8);
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)(v62 + 24);
  *(void *)(v61 + 16) = *(void *)(v62 + 16);
  *(void *)(v61 + 24) = v64;
  swift_bridgeObjectRelease();
LABEL_34:
  uint64_t v65 = v72[12];
  uint64_t v66 = (void *)(a1 + v65);
  unsigned __int8 v67 = (void *)(a2 + v65);
  if (*(void *)(a1 + v65) != 1)
  {
    if (*v67 != 1)
    {
      *uint64_t v66 = *v67;
      swift_bridgeObjectRelease();
      v66[1] = v67[1];
      swift_bridgeObjectRelease();
      uint64_t v69 = v67[3];
      v66[2] = v67[2];
      v66[3] = v69;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000ABEA4((uint64_t)v66);
  }
  long long v68 = *((_OWORD *)v67 + 1);
  *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
  *((_OWORD *)v66 + 1) = v68;
  return a1;
}

uint64_t sub_1000AC61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AC630);
}

uint64_t sub_1000AC630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 80);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = a1 + *(int *)(a3 + 32);
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
      long long v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = a1 + *(int *)(a3 + 40);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t sub_1000AC76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AC780);
}

uint64_t sub_1000AC780(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 80) = a2;
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000AC8B0()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100068BD4();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t destroy for KCSCertWithChainResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for KCSCertWithChainResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KCSCertWithChainResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KCSCertWithChainResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KCSCertWithChainResponse()
{
  return &type metadata for KCSCertWithChainResponse;
}

unint64_t sub_1000ACB10()
{
  unint64_t result = qword_1001DD048;
  if (!qword_1001DD048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD048);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KCSCertWithChainResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KCSCertWithChainResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000ACCC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSCertWithChainResponse.CodingKeys()
{
  return &type metadata for KCSCertWithChainResponse.CodingKeys;
}

unint64_t sub_1000ACCFC()
{
  unint64_t result = qword_1001DD058;
  if (!qword_1001DD058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD058);
  }
  return result;
}

unint64_t sub_1000ACD54()
{
  unint64_t result = qword_1001DD060;
  if (!qword_1001DD060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD060);
  }
  return result;
}

unint64_t sub_1000ACDAC()
{
  unint64_t result = qword_1001DD068;
  if (!qword_1001DD068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD068);
  }
  return result;
}

uint64_t sub_1000ACE00(uint64_t a1)
{
  return sub_1000A7F00(a1);
}

uint64_t sub_1000ACE18(uint64_t *a1)
{
  return sub_1000A8200(a1);
}

void sub_1000ACE30(void *a1@<X8>)
{
  v30[0] = 0;
  id v2 = (id)DeviceIdentityCopyCertificateProperties();
  id v33 = 0;
  if (!v2)
  {
    uint64_t v11 = qword_1001D9178;
    id v12 = v30[0];
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001DD070);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_beginAccess();
      sub_100003EB0(&qword_1001DD088);
      uint64_t v17 = Optional.debugDescription.getter();
      sub_100005EB8(v17, v18, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to copy UCRT device identifiers from certificate: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    goto LABEL_40;
  }
  int v3 = v2;
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = 0;

  *(void *)&long long v31 = 1768254825;
  *((void *)&v31 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_10000C46C((uint64_t)v30), (v7 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_10000E2D4((uint64_t)v30);
  if (*((void *)&v32 + 1))
  {
    int v8 = swift_dynamicCast();
    if (v8) {
      uint64_t v9 = v28;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v8) {
      uint64_t v10 = v29;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    sub_100008970((uint64_t)&v31);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  *(void *)&long long v31 = 1684628845;
  *((void *)&v31 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v21 = sub_10000C46C((uint64_t)v30), (v22 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v21, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_10000E2D4((uint64_t)v30);
  if (*((void *)&v32 + 1))
  {
    int v23 = swift_dynamicCast();
    if (v23) {
      uint64_t v19 = v28;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v23) {
      uint64_t v20 = v29;
    }
    else {
      uint64_t v20 = 0;
    }
  }
  else
  {
    sub_100008970((uint64_t)&v31);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v24 = sub_10000C46C((uint64_t)v30), (v25 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v24, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000E2D4((uint64_t)v30);
  if (!*((void *)&v32 + 1))
  {
    sub_100008970((uint64_t)&v31);
    goto LABEL_39;
  }
  if (!swift_dynamicCast())
  {
LABEL_39:

LABEL_40:
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    goto LABEL_41;
  }
  uint64_t v26 = 1684628851;
  unint64_t v27 = 0xE400000000000000;

LABEL_41:
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v19;
  a1[3] = v20;
  a1[4] = v26;
  a1[5] = v27;
}

uint64_t sub_1000AD2A0()
{
  v19[0] = 0;
  id v0 = (id)DeviceIdentityCopyCertificateProperties();
  id v22 = 0;
  if (v0)
  {
    unint64_t v1 = v0;
    uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v3 = 0;

    *(void *)&long long v20 = 925905201;
    *((void *)&v20 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v2 + 16) && (unint64_t v4 = sub_10000C46C((uint64_t)v19), (v5 & 1) != 0))
    {
      sub_100006570(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v20);
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
    }
    sub_10000E2D4((uint64_t)v19);
    if (*((void *)&v21 + 1))
    {
      if (swift_dynamicCast()) {
        uint64_t v6 = v18;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      sub_100008970((uint64_t)&v20);
      uint64_t v6 = 0;
    }
    AnyHashable.init<A>(_:)();
    if (*(void *)(v2 + 16) && (unint64_t v15 = sub_10000C46C((uint64_t)v19), (v16 & 1) != 0))
    {
      sub_100006570(*(void *)(v2 + 56) + 32 * v15, (uint64_t)&v20);
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_10000E2D4((uint64_t)v19);
    if (*((void *)&v21 + 1)) {
      swift_dynamicCast();
    }
    else {
      sub_100008970((uint64_t)&v20);
    }
  }
  else
  {
    uint64_t v7 = qword_1001D9178;
    id v8 = 0;
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003E78(v9, (uint64_t)qword_1001DD070);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v20 = swift_slowAlloc();
      *(_DWORD *)id v12 = 136315138;
      swift_beginAccess();
      sub_100003EB0(&qword_1001DD088);
      uint64_t v13 = Optional.debugDescription.getter();
      sub_100005EB8(v13, v14, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to copy hardware properties from certificate: %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  return v6;
}

void sub_1000AD688(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45[0] = 0;
  id v7 = (id)DeviceIdentityCopyCertificateProperties();
  id v8 = v45[0];
  id v48 = v45[0];
  if (v7)
  {
    uint64_t v9 = v7;
    uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = v8;

    *(void *)&long long v46 = 808465457;
    *((void *)&v46 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v10 + 16) && (unint64_t v12 = sub_10000C46C((uint64_t)v45), (v13 & 1) != 0))
    {
      sub_100006570(*(void *)(v10 + 56) + 32 * v12, (uint64_t)&v46);
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
    }
    sub_10000E2D4((uint64_t)v45);
    if (*((void *)&v47 + 1))
    {
      int v14 = swift_dynamicCast();
      if (v14) {
        uint64_t v15 = v43;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v14) {
        unint64_t v16 = v44;
      }
      else {
        unint64_t v16 = 0;
      }
    }
    else
    {
      sub_100008970((uint64_t)&v46);
      uint64_t v15 = 0;
      unint64_t v16 = 0;
    }
    *(void *)&long long v46 = 875574321;
    *((void *)&v46 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v10 + 16) && (unint64_t v29 = sub_10000C46C((uint64_t)v45), (v30 & 1) != 0))
    {
      sub_100006570(*(void *)(v10 + 56) + 32 * v29, (uint64_t)&v46);
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
    }
    sub_10000E2D4((uint64_t)v45);
    if (*((void *)&v47 + 1))
    {
      int v31 = swift_dynamicCast();
      if (v31) {
        uint64_t v25 = v43;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v31) {
        unint64_t v26 = v44;
      }
      else {
        unint64_t v26 = 0;
      }
    }
    else
    {
      sub_100008970((uint64_t)&v46);
      uint64_t v25 = 0;
      unint64_t v26 = 0;
    }
    *(void *)&long long v46 = 892351537;
    *((void *)&v46 + 1) = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v10 + 16) && (unint64_t v32 = sub_10000C46C((uint64_t)v45), (v33 & 1) != 0))
    {
      sub_100006570(*(void *)(v10 + 56) + 32 * v32, (uint64_t)&v46);
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
    }
    sub_10000E2D4((uint64_t)v45);
    if (*((void *)&v47 + 1))
    {
      int v34 = swift_dynamicCast();
      if (v34) {
        uint64_t v27 = v43;
      }
      else {
        uint64_t v27 = 0;
      }
      if (v34) {
        unint64_t v28 = v44;
      }
      else {
        unint64_t v28 = 0;
      }
    }
    else
    {
      sub_100008970((uint64_t)&v46);
      uint64_t v27 = 0;
      unint64_t v28 = 0;
    }
    uint64_t v43 = 909128753;
    unint64_t v44 = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v10 + 16) && (unint64_t v35 = sub_10000C46C((uint64_t)v45), (v36 & 1) != 0))
    {
      sub_100006570(*(void *)(v10 + 56) + 32 * v35, (uint64_t)&v46);
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_10000E2D4((uint64_t)v45);
    if (*((void *)&v47 + 1))
    {
      int v37 = swift_dynamicCast();
      if (v37) {
        uint64_t v38 = v43;
      }
      else {
        uint64_t v38 = 0;
      }

      char v39 = v37 ^ 1;
      goto LABEL_55;
    }
    sub_100008970((uint64_t)&v46);

LABEL_54:
    uint64_t v38 = 0;
    char v39 = 1;
LABEL_55:
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + 24) = v26;
    *(void *)(a1 + 32) = v27;
    *(void *)(a1 + 40) = v28;
    *(void *)(a1 + 48) = v38;
    *(unsigned char *)(a1 + 56) = v39;
    return;
  }
  uint64_t v17 = qword_1001D9178;
  id v18 = v45[0];
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_100003E78(v2, (uint64_t)qword_1001DD070);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v19, v2);
  os_log_t v20 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v20, v21))
  {
LABEL_18:

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    goto LABEL_54;
  }
  os_log_t v42 = v20;
  id v22 = (uint8_t *)swift_slowAlloc();
  uint64_t v41 = (void *)swift_slowAlloc();
  *(_DWORD *)id v22 = 138412290;
  swift_beginAccess();
  id v23 = v48;
  if (v48)
  {
    *(void *)&long long v46 = v48;
    id v24 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v41 = v23;
    os_log_t v20 = v42;
    _os_log_impl((void *)&_mh_execute_header, v42, v21, "Failed to copy device OS version information from certificate: %@", v22, 0xCu);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_1000ADC60()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD070);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD070);
  if (qword_1001D9268 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1058);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000ADD28(void *a1@<X8>)
{
  v30[0] = 0;
  id v2 = (id)DeviceIdentityCopyCertificateProperties();
  id v33 = 0;
  if (!v2)
  {
    uint64_t v11 = qword_1001D9178;
    id v12 = v30[0];
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001DD070);
    int v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v31 = swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 136315138;
      swift_beginAccess();
      sub_100003EB0(&qword_1001DD088);
      uint64_t v17 = Optional.debugDescription.getter();
      sub_100005EB8(v17, v18, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to copy device identifiers from certificate: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    goto LABEL_40;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = 0;

  *(void *)&long long v31 = 909193265;
  *((void *)&v31 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_10000C46C((uint64_t)v30), (v7 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_10000E2D4((uint64_t)v30);
  if (*((void *)&v32 + 1))
  {
    int v8 = swift_dynamicCast();
    if (v8) {
      uint64_t v9 = v28;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v8) {
      uint64_t v10 = v29;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    sub_100008970((uint64_t)&v31);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  *(void *)&long long v31 = 942747697;
  *((void *)&v31 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v21 = sub_10000C46C((uint64_t)v30), (v22 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v21, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_10000E2D4((uint64_t)v30);
  if (*((void *)&v32 + 1))
  {
    int v23 = swift_dynamicCast();
    if (v23) {
      uint64_t v19 = v28;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v23) {
      uint64_t v20 = v29;
    }
    else {
      uint64_t v20 = 0;
    }
  }
  else
  {
    sub_100008970((uint64_t)&v31);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v24 = sub_10000C46C((uint64_t)v30), (v25 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v24, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000E2D4((uint64_t)v30);
  if (!*((void *)&v32 + 1))
  {
    sub_100008970((uint64_t)&v31);
    goto LABEL_39;
  }
  if (!swift_dynamicCast())
  {
LABEL_39:

LABEL_40:
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    goto LABEL_41;
  }
  uint64_t v26 = 858861617;
  unint64_t v27 = 0xE400000000000000;

LABEL_41:
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v19;
  a1[3] = v20;
  a1[4] = v26;
  a1[5] = v27;
}

void sub_1000AE19C(uint64_t a1@<X8>)
{
  v30[0] = 0;
  id v2 = (id)DeviceIdentityCopyCertificateProperties();
  id v33 = 0;
  if (!v2)
  {
    uint64_t v11 = qword_1001D9178;
    id v12 = v30[0];
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001DD070);
    int v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v31 = swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 136315138;
      swift_beginAccess();
      sub_100003EB0(&qword_1001DD088);
      uint64_t v17 = Optional.debugDescription.getter();
      sub_100005EB8(v17, v18, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to copy key usage properties from certificate: %s", v16, 0xCu);
      char v10 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v9 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {

      uint64_t v9 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      char v10 = 1;
    }
    char v24 = 1;
    goto LABEL_38;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = 0;

  *(void *)&long long v31 = 808464945;
  *((void *)&v31 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_10000C46C((uint64_t)v30), (v7 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_10000E2D4((uint64_t)v30);
  if (*((void *)&v32 + 1))
  {
    int v8 = swift_dynamicCast();
    if (v8) {
      uint64_t v9 = v29;
    }
    else {
      uint64_t v9 = 0;
    }
    char v10 = v8 ^ 1;
  }
  else
  {
    sub_100008970((uint64_t)&v31);
    uint64_t v9 = 0;
    char v10 = 1;
  }
  *(void *)&long long v31 = 842019377;
  *((void *)&v31 + 1) = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v21 = sub_10000C46C((uint64_t)v30), (v22 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v21, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_10000E2D4((uint64_t)v30);
  if (*((void *)&v32 + 1))
  {
    int v23 = swift_dynamicCast();
    if (v23) {
      uint64_t v19 = v29;
    }
    else {
      uint64_t v19 = 0;
    }
    char v24 = v23 ^ 1;
  }
  else
  {
    sub_100008970((uint64_t)&v31);
    uint64_t v19 = 0;
    char v24 = 1;
  }
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v25 = sub_10000C46C((uint64_t)v30), (v26 & 1) != 0))
  {
    sub_100006570(*(void *)(v4 + 56) + 32 * v25, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000E2D4((uint64_t)v30);
  if (!*((void *)&v32 + 1))
  {
    sub_100008970((uint64_t)&v31);

    uint64_t v20 = 0;
LABEL_38:
    char v28 = 1;
    goto LABEL_39;
  }
  int v27 = swift_dynamicCast();
  if (v27) {
    uint64_t v20 = 858796593;
  }
  else {
    uint64_t v20 = 0;
  }

  char v28 = v27 ^ 1;
LABEL_39:
  *(void *)a1 = v9;
  *(unsigned char *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v19;
  *(unsigned char *)(a1 + 24) = v24;
  *(void *)(a1 + 32) = v20;
  *(unsigned char *)(a1 + 40) = v28;
}

uint64_t sub_1000AE64C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD090);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD090);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000AE714()
{
  char v1 = sub_1000F457C();
  if (!v0)
  {
    if (v1)
    {
      if (qword_1001D9180 != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      sub_100003E78(v2, (uint64_t)qword_1001DD090);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_12;
      }
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      unint64_t v6 = "Valid pairing found.";
    }
    else
    {
      if (qword_1001D9180 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100003E78(v7, (uint64_t)qword_1001DD090);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v3, v4)) {
        goto LABEL_12;
      }
      id v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v5 = 0;
      unint64_t v6 = "Not paired, need to delete-all!";
    }
    _os_log_impl((void *)&_mh_execute_header, v3, v4, v6, v5, 2u);
    swift_slowDealloc();
LABEL_12:
  }
}

uint64_t sub_1000AE888()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureService()
{
  return self;
}

void sub_1000AE8E4()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  unint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)v20 - v8;
  if (qword_1001D9180 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DD090);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SecureService.restoreSEPairing()", v13, 2u);
    swift_slowDealloc();
  }

  static DispatchTime.now()();
  + infix(_:_:)();
  int v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v6, v1);
  char v15 = sub_10004B274();
  if (v0)
  {
    v14(v9, v1);
  }
  else
  {
    char v16 = v15;
    v14(v9, v1);
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to validate SE Pairing.", v19, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_1000AEB5C()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  unint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint8_t *sub_1000AECC4()
{
  return sub_1000AECF0((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F61E8);
}

uint8_t *sub_1000AECF0(void (*a1)(void *__return_ptr, void, void, void, void, void))
{
  void (*v15)(void *__return_ptr, void, void, void, void, void);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _WORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  Swift::String v32;
  __int16 v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  Swift::String v52;
  os_log_t v53;
  void v54[2];
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  void v61[5];
  uint8_t *v62;
  unint64_t v63;
  unsigned __int16 v64;
  uint64_t v65;

  uint64_t v3 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v3 - 8, v4);
  int v57 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D90D0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  BOOL v7 = sub_100003E78(v6, (uint64_t)qword_1001DCA18);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  long long v59 = v7;
  if (v10)
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v1 = v11 + 4;
    uint64_t v60 = sub_100005EB8(0xD000000000000012, 0x8000000100198AE0, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    int v14 = (uint8_t *)swift_slowAlloc();
    int v56 = swift_slowAlloc();
    uint64_t v65 = v56;
    long long v55 = v14;
    *(_DWORD *)int v14 = 136315138;
    v54[1] = v14 + 4;
    char v15 = a1;
    char v16 = sub_10006C13C(0xDA0uLL, 0, 0xC000000000000000, 0);
    os_log_type_t v18 = v17;
    uint64_t v19 = Data.hexString()();
    uint64_t v20 = v16;
    a1 = v15;
    sub_100006628(v20, v18);
    uint64_t v60 = sub_100005EB8(v19._countAndFlagsBits, (unint64_t)v19._object, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v1 = v55;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "C-APDU (GET VERSION): %s", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  a1(v61, 3488, 0, 0xC000000000000000, 0, 0);
  unint64_t v21 = v61[0];
  char v22 = v61[1];
  int v23 = v61[3];
  char v24 = v61[4];
  sub_100038DA0((uint64_t)v61, (uint64_t)&v62);
  unint64_t v25 = v63;
  if (v63 >> 60 != 15)
  {
    uint64_t v1 = v62;
    LODWORD(v56) = v64;
    sub_1000065D0(v21, v22);
    sub_1000065D0(v23, v24);
    sub_1000065D0(v21, v22);
    sub_1000065D0(v23, v24);
    uint64_t v29 = Logger.logObject.getter();
    char v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      long long v55 = v1;
      long long v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      *(_DWORD *)long long v31 = 136315138;
      long long v32 = Data.hexString()();
      uint64_t v60 = sub_100005EB8(v32._countAndFlagsBits, (unint64_t)v32._object, &v65);
      uint64_t v1 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C6D84(v61, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v61, (void (*)(void, void, void, void, void))sub_100038E90);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "R-APDU: %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C6D84(v61, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v61, (void (*)(void, void, void, void, void))sub_100038E90);
    }

    id v33 = v56;
    if (v56 == 36864)
    {
      type metadata accessor for TLV();
      int v34 = v58;
      unint64_t v35 = static TLV.decode(from:)((uint64_t)v1, v25);
      if (v34)
      {
        static String.Encoding.ascii.getter();
        uint64_t v1 = (uint8_t *)String.init(data:encoding:)();
        int v37 = v36;
        swift_errorRelease();
      }
      else
      {
        char v39 = (uint64_t)v35;
        uint64_t v65 = (uint64_t)v35;
        TLVTag.payAppletVersionString.unsafeMutableAddressor();
        sub_100003EB0((uint64_t *)&unk_1001DF8B0);
        sub_100038F5C((unint64_t *)&qword_1001DA550, (uint64_t *)&unk_1001DF8B0);
        uint64_t v40 = Collection<>.first(tag:)();
        if (v40)
        {
          uint64_t v1 = (uint8_t *)(*(uint64_t (**)(uint64_t))(*(void *)v40 + 296))(v40);
          int v37 = v41;
          swift_release();
        }
        else
        {
          uint64_t v1 = 0;
          int v37 = 0;
        }
        uint64_t v65 = v39;
        TLVTag.availableKernelsMap.unsafeMutableAddressor();
        unint64_t v44 = Collection<>.first(tag:)();
        long long v45 = swift_bridgeObjectRelease();
        if (v44)
        {
          long long v46 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 144))(v45);
          id v48 = v47;
          swift_release();
          sub_1000065D0(v46, v48);
          sub_1000065D0(v46, v48);
          uint64_t v49 = Logger.logObject.getter();
          uint64_t v50 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v49, v50))
          {
            long long v59 = v49;
            uint64_t v51 = (uint8_t *)swift_slowAlloc();
            size_t v58 = swift_slowAlloc();
            uint64_t v65 = v58;
            *(_DWORD *)uint64_t v51 = 136446210;
            int v57 = (char *)(v51 + 4);
            long long v52 = Data.hexString()();
            uint64_t v60 = sub_100005EB8(v52._countAndFlagsBits, (unint64_t)v52._object, &v65);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100006628(v46, v48);
            sub_100006628(v46, v48);
            uint64_t v53 = v59;
            _os_log_impl((void *)&_mh_execute_header, v59, v50, "Available kernels map: %{public}s", v51, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_100006628(v46, v48);
          }
          else
          {
            sub_100006628(v46, v48);
            sub_100006628(v46, v48);
            sub_100006628(v46, v48);
          }
        }
      }
      if (v37)
      {
        sub_1000C6D84(v61, (void (*)(void, void, void, void, void))sub_100038E90);
        return v1;
      }
      sub_100038E08();
      swift_allocError();
      *os_log_t v42 = 1;
    }
    else
    {
      sub_100038E08();
      swift_allocError();
      *uint64_t v38 = v33;
    }
    swift_willThrow();
    sub_1000C6D84(v61, (void (*)(void, void, void, void, void))sub_100038E90);
    return v1;
  }
  char v26 = Logger.logObject.getter();
  int v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v1 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "applet is not responsive, no version", v1, 2u);
    swift_slowDealloc();
  }

  sub_100038E08();
  swift_allocError();
  *char v28 = 0;
  swift_willThrow();
  return v1;
}

uint64_t sub_1000AF634()
{
  return sub_1000AF660((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F61E8);
}

uint64_t sub_1000AF660(void (*a1)(void *__return_ptr, void, void, void, void, void))
{
  if (qword_1001D90D0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003E78(v3, (uint64_t)qword_1001DCA18);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "retrieveGlobalID()", v6, 2u);
    swift_slowDealloc();
  }

  BOOL v7 = (uint64_t *)TLVTag.globalConfigID.unsafeMutableAddressor();
  uint64_t result = sub_1000B38C8(*v7, a1);
  if (!v1)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
    swift_release();
    return v9;
  }
  return result;
}

uint64_t sub_1000AF7B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AF7DC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10002B928);
}

uint64_t sub_1000AF7DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = a4(a2);
  uint64_t v9 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v10 = sub_10000C4B0(v7, v8), (v11 & 1) != 0))
  {
    id v12 = *(id *)(*(void *)(v9 + 56) + 8 * v10);
    swift_bridgeObjectRelease();
    self;
    if (swift_dynamicCastObjCClass()) {
      static Int._conditionallyBridgeFromObjectiveC(_:result:)();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = a4(a2);
  uint64_t v15 = v14;
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = *a1;
  *a1 = 0x8000000000000000;
  sub_100106008((uint64_t)isa, v13, v15, isUniquelyReferenced_nonNull_native);
  *a1 = v19;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AF93C(uint64_t *a1, char a2)
{
  unint64_t v4 = sub_100057EEC(a2);
  uint64_t v6 = *a1;
  if (!*(void *)(*a1 + 16) || (unint64_t v7 = sub_10000C4B0(v4, v5), (v8 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    unint64_t v10 = sub_100057EEC(a2);
    uint64_t v12 = v13;
    goto LABEL_7;
  }
  id v9 = *(id *)(*(void *)(v6 + 56) + 8 * v7);
  swift_bridgeObjectRelease();
  self;
  if (!swift_dynamicCastObjCClass())
  {

    goto LABEL_6;
  }
  static String._conditionallyBridgeFromObjectiveC(_:result:)();

  unint64_t v10 = sub_100057EEC(a2);
  uint64_t v12 = v11;
LABEL_7:
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *a1;
  *a1 = 0x8000000000000000;
  sub_100106008((uint64_t)v14, v10, v12, isUniquelyReferenced_nonNull_native);
  *a1 = v17;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AFAFC@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint8_t *a11, uint64_t a12, unint64_t a13, uint64_t a14, char a15, unsigned __int8 a16, void *a17)
{
  uint64_t v285 = a4;
  unint64_t v295 = a8;
  v296 = (uint8_t *)a7;
  int v281 = a6;
  unint64_t v292 = a5;
  LODWORD(v299) = a3;
  unint64_t v297 = a1;
  unint64_t v298 = a2;
  v283 = a17;
  uint64_t v289 = a12;
  v293 = (uint8_t *)a10;
  uint64_t v280 = a15 & 1;
  uint64_t v19 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v19 - 8, v20);
  v291 = (char *)&v267 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Locale();
  uint64_t v275 = *(void *)(v22 - 8);
  uint64_t v276 = v22;
  __chkstk_darwin(v22, v23);
  v274 = (char *)&v267 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v25 - 8, v26);
  uint64_t v282 = (uint64_t)&v267 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v286 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v286 - 8);
  __chkstk_darwin(v286, v29);
  v278 = (char *)&v267 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v279 = a16;
  uint64_t v287 = v28;
  uint64_t v288 = a14;
  v273 = a9;
  unint64_t v290 = a13;
  v294 = a11;
  uint64_t v277 = v17;
  if (a16 == 2)
  {
    if (qword_1001D9090 != -1) {
LABEL_80:
    }
      swift_once();
    uint64_t v31 = type metadata accessor for Logger();
    sub_100003E78(v31, (uint64_t)qword_1001DC090);
    long long v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v32, v33)) {
      goto LABEL_22;
    }
    int v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Sending START TRANSACTION with mode preProcessOnly", v34, 2u);
  }
  else
  {
    if (qword_1001D9090 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    os_log_t v271 = (os_log_t)sub_100003E78(v35, (uint64_t)qword_1001DC090);
    id v272 = v284;
    uint64_t v36 = v285;
    unint64_t v37 = v292;
    sub_1000065D0(v285, v292);
    unint64_t v39 = v295;
    uint64_t v38 = (uint64_t)v296;
    sub_1000065D0((uint64_t)v296, v295);
    uint64_t v40 = (uint8_t *)v294;
    sub_1000065D0((uint64_t)v293, (unint64_t)v294);
    uint64_t v41 = v289;
    unint64_t v42 = v290;
    sub_1000065D0(v289, v290);
    swift_bridgeObjectRetain();
    id v272 = v272;
    sub_1000065D0(v36, v37);
    uint64_t v43 = v38;
    uint64_t v44 = (uint64_t)v293;
    unint64_t v45 = v39;
    unint64_t v46 = v42;
    uint64_t v47 = v41;
    sub_1000065D0(v43, v45);
    sub_1000065D0(v44, (unint64_t)v40);
    sub_1000065D0(v41, v46);
    swift_bridgeObjectRetain();
    id v48 = Logger.logObject.getter();
    int v49 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v48, (os_log_type_t)v49))
    {
      unint64_t v77 = v292;
      sub_100006628(v36, v292);
      sub_100006628(v36, v77);
      unint64_t v79 = v295;
      uint64_t v78 = (uint64_t)v296;
      sub_100006628((uint64_t)v296, v295);
      sub_100006628(v78, v79);
      long long v80 = (uint8_t *)v294;
      sub_100006628(v44, (unint64_t)v294);
      sub_100006628(v44, (unint64_t)v80);
      sub_100006628(v47, v46);
      sub_100006628(v47, v46);

      id v81 = v272;
      swift_bridgeObjectRelease_n();
      goto LABEL_23;
    }
    int v270 = v49;
    os_log_t v271 = v48;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v269 = swift_slowAlloc();
    uint64_t v302 = v269;
    *(_DWORD *)uint64_t v50 = 136317442;
    uint64_t v51 = NSDecimal.description.getter();
    v312 = (void *)sub_100005EB8(v51, v52, &v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2080;
    unint64_t v53 = v292;
    Swift::String v54 = Data.hexString()();
    v312 = (void *)sub_100005EB8(v54._countAndFlagsBits, (unint64_t)v54._object, &v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v36, v53);
    sub_100006628(v36, v53);
    *(_WORD *)(v50 + 22) = 2080;
    uint64_t v55 = SPRTransactionType.description.getter();
    v312 = (void *)sub_100005EB8(v55, v56, &v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 32) = 2080;
    unint64_t v58 = v295;
    uint64_t v57 = (uint64_t)v296;
    Swift::String v59 = Data.hexString()();
    v312 = (void *)sub_100005EB8(v59._countAndFlagsBits, (unint64_t)v59._object, &v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v57, v58);
    sub_100006628(v57, v58);
    *(_WORD *)(v50 + 42) = 2080;
    static String.Encoding.ascii.getter();
    uint64_t v60 = (uint8_t *)v294;
    uint64_t countAndFlagsBits = String.init(data:encoding:)();
    uint64_t v63 = v44;
    if (!object)
    {
      Swift::String v64 = Data.hexString()();
      object = v64._object;
      uint64_t countAndFlagsBits = v64._countAndFlagsBits;
    }
    uint64_t v65 = v289;
    unint64_t v66 = v290;
    v312 = (void *)sub_100005EB8(countAndFlagsBits, (unint64_t)object, &v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v63, (unint64_t)v60);
    sub_100006628(v63, (unint64_t)v60);
    *(_WORD *)(v50 + 52) = 2080;
    Swift::String v67 = Data.hexString()();
    v312 = (void *)sub_100005EB8(v67._countAndFlagsBits, (unint64_t)v67._object, &v302);
    v291 = (char *)&v313;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v65, v66);
    sub_100006628(v65, v66);
    *(_WORD *)(v50 + 62) = 2080;
    uint64_t v68 = v288;
    if (v288)
    {
      uint64_t v268 = v50;
      int64_t v69 = *(void *)(v288 + 16);
      uint64_t v70 = _swiftEmptyArrayStorage;
      if (v69)
      {
        v312 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_10014B9C4(0, v69, 0);
        uint64_t v70 = v312;
        uint64_t v71 = (unint64_t *)(v68 + 40);
        do
        {
          uint64_t v72 = *(v71 - 1);
          unint64_t v73 = *v71;
          sub_1000065D0(v72, *v71);
          Swift::String v74 = Data.hexString()();
          sub_100006628(v72, v73);
          v312 = v70;
          unint64_t v76 = v70[2];
          unint64_t v75 = v70[3];
          if (v76 >= v75 >> 1)
          {
            sub_10014B9C4(v75 > 1, v76 + 1, 1);
            uint64_t v70 = v312;
          }
          v71 += 2;
          v70[2] = v76 + 1;
          *(Swift::String *)&v70[2 * v76 + 4] = v74;
          --v69;
        }
        while (v69);
        swift_bridgeObjectRelease();
      }
      char v82 = v279;
      v312 = v70;
      sub_100003EB0((uint64_t *)&unk_1001DA570);
      sub_100038F5C((unint64_t *)&qword_1001DD3B0, (uint64_t *)&unk_1001DA570);
      uint64_t v83 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v85 = v84;
      swift_bridgeObjectRelease();
      uint64_t v50 = v268;
    }
    else
    {
      unint64_t v85 = 0xE300000000000000;
      uint64_t v83 = 7104878;
      char v82 = v279;
    }
    v312 = (void *)sub_100005EB8(v83, v85, &v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 72) = 256;
    LOBYTE(v312) = v280;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v50 + 75) = 256;
    LOBYTE(v312) = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v50 + 78) = 2080;
    id v86 = v272;
    id v87 = [v272 description];
    uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v90 = v89;

    v312 = (void *)sub_100005EB8(v88, v90, &v302);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    long long v32 = v271;
    _os_log_impl((void *)&_mh_execute_header, v271, (os_log_type_t)v270, "Sending START TRANSACTION with amount: %s, currencyCode: %s, transactionType: %s, merchantCategoryCode: %s, interfaceDeviceSerial: %s, transactionIdHalf: %s, preferredSchemes: %s, resetTrackError: %hhu, mode: %hhu, using session: %s", (uint8_t *)v50, 0x58u);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  swift_slowDealloc();
LABEL_22:

LABEL_23:
  unint64_t v91 = v299;
  LODWORD(v291) = WORD1(v299);
  int v92 = v297;
  uint64_t v93 = v298;
  unint64_t v94 = HIWORD(v298);
  unint64_t v95 = HIDWORD(v298);
  unint64_t v96 = v298 >> 16;
  unint64_t v97 = HIWORD(v297);
  unint64_t v98 = HIDWORD(v297);
  id v99 = objc_allocWithZone((Class)NSDecimalNumber);
  LODWORD(v302) = v92;
  WORD2(v302) = v98;
  HIWORD(v302) = v97;
  __int16 v303 = v93;
  __int16 v304 = v96;
  __int16 v305 = v95;
  __int16 v306 = v94;
  __int16 v307 = v91;
  __int16 v308 = (__int16)v291;
  id v100 = [v99 initWithDecimal:&v302];
  id v101 = [v100 integerValue];

  uint64_t v102 = sub_100062D30((uint64_t)v101);
  unint64_t v104 = v103;
  uint64_t v105 = sub_100063000(v102, v103);
  unint64_t v107 = v106;
  sub_100006628(v102, v104);
  uint64_t v108 = 0;
  switch(v107 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v105), v105))
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        swift_once();
        goto LABEL_50;
      }
      uint64_t v108 = HIDWORD(v105) - (int)v105;
LABEL_28:
      long long v111 = (uint64_t *)TLVTag.TAG_9F02_LENGTH.unsafeMutableAddressor();
      if (*v111 < v108)
      {
        sub_10002A544(4000, 0xD00000000000001DLL, (void *)0x8000000100198A90, 0);
        swift_willThrow();
        uint64_t v112 = v105;
        unint64_t v113 = v107;
        return sub_100006628(v112, v113);
      }
      long long v114 = v111;
      uint64_t v319 = v105;
      unint64_t v320 = v107;
      sub_1000065D0(v105, v107);
      break;
    case 2uLL:
      uint64_t v110 = *(void *)(v105 + 16);
      uint64_t v109 = *(void *)(v105 + 24);
      uint64_t v108 = v109 - v110;
      if (!__OFSUB__(v109, v110)) {
        goto LABEL_28;
      }
      goto LABEL_82;
    case 3uLL:
      goto LABEL_28;
    default:
      uint64_t v108 = BYTE6(v107);
      goto LABEL_28;
  }
  while (2)
  {
    switch(v320 >> 62)
    {
      case 1uLL:
        LODWORD(v115) = HIDWORD(v319) - v319;
        if (!__OFSUB__(HIDWORD(v319), v319))
        {
          uint64_t v115 = (int)v115;
          goto LABEL_32;
        }
        __break(1u);
        goto LABEL_79;
      case 2uLL:
        uint64_t v117 = *(void *)(v319 + 16);
        uint64_t v118 = *(void *)(v319 + 24);
        BOOL v119 = __OFSUB__(v118, v117);
        uint64_t v115 = v118 - v117;
        if (!v119) {
          goto LABEL_32;
        }
LABEL_79:
        __break(1u);
        goto LABEL_80;
      case 3uLL:
        if (*v114 <= 0) {
          goto LABEL_41;
        }
        goto LABEL_33;
      default:
        uint64_t v115 = BYTE6(v320);
LABEL_32:
        if (v115 < *v114)
        {
LABEL_33:
          uint64_t v116 = sub_100003EB0((uint64_t *)&unk_1001DA5B0);
          uint64_t v309 = v116;
          uint64_t v310 = sub_100038F5C((unint64_t *)&qword_1001DD3A0, (uint64_t *)&unk_1001DA5B0);
          LOBYTE(v302) = 0;
          LOBYTE(v312) = *(unsigned char *)sub_100006788(&v302, v116);
          Data._Representation.replaceSubrange(_:with:count:)();
          sub_100006520((uint64_t)&v302);
          continue;
        }
LABEL_41:
        sub_100006788(v283, v283[3]);
        uint64_t v120 = v282;
        sub_1000238E4(v282);
        uint64_t v121 = v286;
        uint64_t v122 = v287;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v287 + 48))(v120, 1, v286) == 1)
        {
          sub_10005F4F8(v120, &qword_1001D9AE8);
          sub_10002A544(4054, 0xD00000000000001ELL, (void *)0x8000000100197AA0, 0);
          swift_willThrow();
          uint64_t v123 = v105;
          unint64_t v124 = v107;
          goto LABEL_43;
        }
        unint64_t v298 = v105;
        unint64_t v299 = v107;
        v125 = v278;
        (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v278, v120, v121);
        int v126 = (char *)[objc_allocWithZone((Class)NSDateFormatter) init];
        size_t v127 = v274;
        Locale.init(identifier:)();
        uint64_t v128 = v121;
        Class isa = Locale._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v275 + 8))(v127, v276);
        [v126 setLocale:isa];

        NSString v130 = String._bridgeToObjectiveC()();
        [v126 setDateFormat:v130];

        Class v131 = Date._bridgeToObjectiveC()().super.isa;
        id v132 = [v126 stringFromDate:v131];

        unint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v135 = v134;

        uint64_t v317 = sub_100114E24(v133, v135);
        unint64_t v318 = v136;
        uint64_t v137 = v277;
        sub_1000C6038(&v317);
        if (v137)
        {
          (*(void (**)(char *, uint64_t))(v122 + 8))(v125, v128);
          sub_100006628(v298, v299);
          sub_100006628(v317, v318);

          goto LABEL_47;
        }
        NSString v138 = String._bridgeToObjectiveC()();
        [v126 setDateFormat:v138];

        Class v139 = Date._bridgeToObjectiveC()().super.isa;
        id v140 = [v126 stringFromDate:v139];

        unint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v143 = v142;

        uint64_t v315 = sub_100114E24(v141, v143);
        unint64_t v316 = v144;
        sub_1000C6038(&v315);
        v291 = v126;
        v283 = 0;
        unint64_t v297 = sub_100003EB0((uint64_t *)&unk_1001DA5A0);
        uint64_t v146 = swift_allocObject();
        *(_OWORD *)(v146 + 16) = xmmword_10018BB20;
        type metadata accessor for TLV();
        uint64_t v147 = *(void *)TLVTag.authorizedAmount.unsafeMutableAddressor();
        uint64_t v148 = v319;
        uint64_t v149 = v320;
        uint64_t v150 = (uint64_t)v296;
        sub_1000065D0(v319, v320);
        *(void *)(v146 + 32) = TLV.__allocating_init(tag:value:)(v147, v148, v149);
        uint64_t v151 = *(void *)TLVTag.otherAmount.unsafeMutableAddressor();
        v152 = TLVTag.TAG_9F03_DEFAULT.unsafeMutableAddressor();
        uint64_t v153 = *v152;
        unint64_t v154 = v152[1];
        sub_1000065D0(*v152, v154);
        *(void *)(v146 + 40) = TLV.__allocating_init(tag:value:)(v151, v153, v154);
        uint64_t v155 = *(void *)TLVTag.transactionType.unsafeMutableAddressor();
        sub_100003EB0(&qword_1001D8778);
        uint64_t v156 = swift_allocObject();
        *(_OWORD *)(v156 + 16) = xmmword_100186100;
        *(unsigned char *)(v156 + 32) = v281;
        uint64_t v157 = sub_10012CB58(v156);
        uint64_t v159 = v158;
        swift_bridgeObjectRelease();
        *(void *)(v146 + 48) = TLV.__allocating_init(tag:value:)(v155, v157, v159);
        uint64_t v160 = *(void *)TLVTag.transactionDate.unsafeMutableAddressor();
        uint64_t v161 = v317;
        unint64_t v162 = v318;
        sub_1000065D0(v317, v318);
        uint64_t v163 = sub_100063000(v161, v162);
        uint64_t v165 = v164;
        sub_100006628(v161, v162);
        *(void *)(v146 + 56) = TLV.__allocating_init(tag:value:)(v160, v163, v165);
        uint64_t v166 = *(void *)TLVTag.transactionTime.unsafeMutableAddressor();
        uint64_t v167 = v315;
        unint64_t v168 = v316;
        sub_1000065D0(v315, v316);
        uint64_t v169 = sub_100063000(v167, v168);
        uint64_t v171 = v170;
        sub_100006628(v167, v168);
        *(void *)(v146 + 64) = TLV.__allocating_init(tag:value:)(v166, v169, v171);
        uint64_t v172 = *(void *)TLVTag.transactionCurrencyCode.unsafeMutableAddressor();
        uint64_t v173 = v285;
        uint64_t v174 = v292;
        sub_1000065D0(v285, v292);
        *(void *)(v146 + 72) = TLV.__allocating_init(tag:value:)(v172, v173, v174);
        uint64_t v175 = *(void *)TLVTag.merchantCategoryCode.unsafeMutableAddressor();
        unint64_t v91 = v295;
        sub_1000065D0(v150, v295);
        *(void *)(v146 + 80) = TLV.__allocating_init(tag:value:)(v175, v150, v91);
        uint64_t v176 = *(void *)TLVTag.interfaceDeviceSerialNumber.unsafeMutableAddressor();
        uint64_t v178 = (uint64_t)v293;
        v177 = (uint8_t *)v294;
        sub_1000065D0((uint64_t)v293, (unint64_t)v294);
        *(void *)(v146 + 88) = TLV.__allocating_init(tag:value:)(v176, v178, (uint64_t)v177);
        uint64_t v179 = *(void *)TLVTag.readerMetadata.unsafeMutableAddressor();
        uint64_t v180 = swift_allocObject();
        *(_OWORD *)(v180 + 16) = xmmword_100189F80;
        uint64_t v181 = *(void *)TLVTag.readerMetadataTransactionID.unsafeMutableAddressor();
        uint64_t v105 = v289;
        uint64_t v93 = v290;
        sub_1000065D0(v289, v290);
        *(void *)(v180 + 32) = TLV.__allocating_init(tag:value:)(v181, v105, v93);
        uint64_t v302 = v180;
        specialized Array._endMutation()();
        *(void *)(v146 + 96) = TLV.__allocating_init(tag:children:)(v179, v302);
        uint64_t v302 = v146;
        specialized Array._endMutation()();
        unint64_t v301 = v302;
        if (qword_1001D9090 != -1) {
          goto LABEL_83;
        }
LABEL_50:
        uint64_t v182 = type metadata accessor for Logger();
        uint64_t v183 = sub_100003E78(v182, (uint64_t)qword_1001DC090);
        uint64_t v184 = (uint64_t)v296;
        sub_1000065D0((uint64_t)v296, v91);
        sub_1000065D0(v105, v93);
        sub_1000065D0(v184, v91);
        sub_1000065D0(v105, v93);
        unint64_t v297 = v183;
        v185 = (uint8_t *)Logger.logObject.getter();
        os_log_type_t v186 = static os_log_type_t.default.getter();
        int v187 = v186;
        v294 = v185;
        BOOL v188 = os_log_type_enabled((os_log_t)v185, v186);
        uint64_t v189 = v288;
        uint64_t v190 = v184;
        if (v188)
        {
          uint64_t v191 = swift_slowAlloc();
          v293 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v314 = v293;
          *(_DWORD *)uint64_t v191 = 136447234;
          swift_beginAccess();
          uint64_t v192 = v319;
          unint64_t v193 = v320;
          sub_1000065D0(v319, v320);
          Swift::String v194 = Data.hexString()();
          LODWORD(v292) = v187;
          sub_100006628(v192, v193);
          v312 = (void *)sub_100005EB8(v194._countAndFlagsBits, (unint64_t)v194._object, (uint64_t *)&v314);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v191 + 12) = 2082;
          swift_beginAccess();
          uint64_t v195 = v317;
          unint64_t v196 = v318;
          sub_1000065D0(v317, v318);
          Swift::String v197 = Data.hexString()();
          sub_100006628(v195, v196);
          uint64_t v311 = sub_100005EB8(v197._countAndFlagsBits, (unint64_t)v197._object, (uint64_t *)&v314);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v191 + 22) = 2082;
          uint64_t v285 = v191 + 24;
          swift_beginAccess();
          uint64_t v198 = v315;
          unint64_t v199 = v316;
          sub_1000065D0(v315, v316);
          Swift::String v200 = Data.hexString()();
          sub_100006628(v198, v199);
          uint64_t v300 = sub_100005EB8(v200._countAndFlagsBits, (unint64_t)v200._object, (uint64_t *)&v314);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v191 + 32) = 2082;
          uint64_t v201 = v289;
          unint64_t v202 = v290;
          Swift::String v203 = Data.hexString()();
          uint64_t v300 = sub_100005EB8(v203._countAndFlagsBits, (unint64_t)v203._object, (uint64_t *)&v314);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100006628(v201, v202);
          sub_100006628(v201, v202);
          *(_WORD *)(v191 + 42) = 2082;
          unint64_t v204 = v295;
          Swift::String v205 = Data.hexString()();
          uint64_t v300 = sub_100005EB8(v205._countAndFlagsBits, (unint64_t)v205._object, (uint64_t *)&v314);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v189 = v288;
          swift_bridgeObjectRelease();
          sub_100006628(v190, v204);
          sub_100006628(v190, v204);
          v206 = (uint8_t *)v294;
          _os_log_impl((void *)&_mh_execute_header, v294, (os_log_type_t)v292, "Start Transaction Tags: amount: %{public}s, date: %{public}s, time: %{public}s, transactionIdHalf: %{public}s, MCC: %{public}s,", (uint8_t *)v191, 0x34u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100006628(v105, v93);
          sub_100006628(v105, v93);
          sub_100006628(v184, v91);
          sub_100006628(v184, v91);
        }
        if (v189)
        {
          uint64_t v207 = *(void *)(v189 + 16);
          v208 = _swiftEmptyArrayStorage;
          if (v207)
          {
            *(void *)&long long v314 = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)();
            v209 = (unint64_t *)(v189 + 40);
            do
            {
              uint64_t v210 = *(v209 - 1);
              uint64_t v211 = *v209;
              sub_1000065D0(v210, *v209);
              v212 = (uint64_t *)TLVTag.overrideAID.unsafeMutableAddressor();
              TLV.__allocating_init(tag:value:)(*v212, v210, v211);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              v209 += 2;
              --v207;
            }
            while (v207);
            v208 = (void *)v314;
          }
          uint64_t v213 = *(void *)TLVTag.preferredSchemes.unsafeMutableAddressor();
          swift_bridgeObjectRetain();
          TLV.__allocating_init(tag:children:)(v213, (uint64_t)v208);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v301 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v301 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_bridgeObjectRetain();
          v214 = Logger.logObject.getter();
          os_log_type_t v215 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v214, v215))
          {
            v216 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v314 = swift_slowAlloc();
            *(_DWORD *)v216 = 136446210;
            v296 = v216 + 4;
            swift_bridgeObjectRetain();
            uint64_t v217 = Array.description.getter();
            unint64_t v219 = v218;
            swift_bridgeObjectRelease();
            uint64_t v300 = sub_100005EB8(v217, v219, (uint64_t *)&v314);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v214, v215, "OverrideAID (TLV): %{public}s", v216, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        unint64_t v220 = v301;
        long long v314 = xmmword_100189A30;
        if (v301 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v221 = _CocoaArrayWrapper.endIndex.getter();
          if (!v221) {
            goto LABEL_85;
          }
LABEL_65:
          if (v221 < 1)
          {
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
          }
          uint64_t v222 = 0;
          do
          {
            if ((v220 & 0xC000000000000001) != 0)
            {
              uint64_t v223 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              uint64_t v223 = *(void *)(v220 + 8 * v222 + 32);
              swift_retain();
            }
            ++v222;
            uint64_t v224 = (*(uint64_t (**)(void))(*(void *)v223 + 168))();
            unint64_t v226 = v225;
            Data.append(_:)();
            sub_100006628(v224, v226);
            swift_release();
          }
          while (v221 != v222);
          swift_bridgeObjectRelease_n();
          unint64_t v227 = *((void *)&v314 + 1);
          uint64_t v228 = v314;
          swift_bridgeObjectRelease();
          switch(v227 >> 62)
          {
            case 1uLL:
              unsigned __int16 v229 = WORD2(v228) - v228;
              if (!__OFSUB__(HIDWORD(v228), v228)) {
                goto LABEL_77;
              }
              __break(1u);
LABEL_76:
              uint64_t v231 = *(void *)(v228 + 16);
              uint64_t v230 = *(void *)(v228 + 24);
              unsigned __int16 v229 = v230 - v231;
              if (__OFSUB__(v230, v231)) {
                goto LABEL_115;
              }
LABEL_77:
              sub_1000065D0(v228, v227);
              break;
            case 2uLL:
              goto LABEL_76;
            case 3uLL:
              goto LABEL_86;
            default:
              sub_100006628(v228, v227);
              unsigned __int16 v229 = BYTE6(v227);
              break;
          }
        }
        else
        {
          uint64_t v221 = *(void *)((v301 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v221) {
            goto LABEL_65;
          }
LABEL_85:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v228 = 0;
          unint64_t v227 = 0xC000000000000000;
LABEL_86:
          sub_100006628(v228, v227);
          unsigned __int16 v229 = 0;
        }
        sub_1000065D0(v228, v227);
        sub_1000065D0(v228, v227);
        v232 = Logger.logObject.getter();
        os_log_type_t v233 = static os_log_type_t.default.getter();
        int v234 = v233;
        BOOL v235 = os_log_type_enabled(v232, v233);
        unint64_t v297 = v227;
        if (v235)
        {
          LODWORD(v296) = v234;
          v236 = (uint8_t *)swift_slowAlloc();
          unint64_t v295 = swift_slowAlloc();
          *(void *)&long long v314 = v295;
          *(_DWORD *)v236 = 136315138;
          v293 = v236 + 4;
          v294 = v236;
          unint64_t v237 = (((unint64_t)v279 << 24) | (v280 << 16)) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)v229 << 32) | 0xA0;
          uint64_t v238 = sub_10006C13C(v237, v228, v297, 0);
          unint64_t v240 = v239;
          Swift::String v241 = Data.hexString()();
          sub_100006628(v238, v240);
          uint64_t v300 = sub_100005EB8(v241._countAndFlagsBits, (unint64_t)v241._object, (uint64_t *)&v314);
          unint64_t v227 = v297;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v242 = v237;
          swift_bridgeObjectRelease();
          sub_100006628(v228, v227);
          sub_100006628(v228, v227);
          _os_log_impl((void *)&_mh_execute_header, v232, (os_log_type_t)v296, "C-APDU (START TRANSACTION): %s", (uint8_t *)v294, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100006628(v228, v227);
          sub_100006628(v228, v227);

          unint64_t v242 = (((unint64_t)v279 << 24) | (v280 << 16)) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)v229 << 32) | 0xA0;
        }
        uint64_t v243 = v287;
        v244 = v291;
        unint64_t v245 = sub_10006C13C(v242, v228, v227, 0);
        int v247 = v245;
        unsigned __int8 v248 = BYTE6(v246);
        switch(v246 >> 62)
        {
          case 1uLL:
            unint64_t v250 = HIDWORD(v245);
            sub_100006628(v245, v246);
            LODWORD(v249) = v250 - v247;
            if (__OFSUB__(v250, v247)) {
              goto LABEL_113;
            }
            uint64_t v249 = (int)v249;
LABEL_94:
            unint64_t v251 = v297;
            break;
          case 2uLL:
            uint64_t v253 = *(void *)(v245 + 16);
            uint64_t v252 = *(void *)(v245 + 24);
            sub_100006628(v245, v246);
            uint64_t v249 = v252 - v253;
            if (__OFSUB__(v252, v253)) {
              goto LABEL_114;
            }
            unint64_t v251 = v297;
            uint64_t v243 = v287;
            break;
          case 3uLL:
            sub_100006628(v245, v246);
            unint64_t v251 = v297;
            goto LABEL_100;
          default:
            sub_100006628(v245, v246);
            uint64_t v249 = v248;
            goto LABEL_94;
        }
        if (v249 >= 129)
        {
          v254 = (void *)0x8000000100198A70;
          uint64_t v255 = 0xD00000000000001ELL;
          goto LABEL_102;
        }
LABEL_100:
        sub_1000F4FB4(v242, v228, v251, 0, 0, (uint64_t)v321);
        sub_100038DA0((uint64_t)v321, (uint64_t)&v322);
        unint64_t v256 = v323;
        if (v323 >> 60 != 15)
        {
          uint64_t v258 = v228;
          switch(v324)
          {
            case 0x6330u:
              uint64_t v265 = 0xD00000000000003BLL;
              v266 = (void *)0x80000001001957E0;
              break;
            case 0x6C00u:
              v266 = (void *)0x8000000100198A50;
              uint64_t v265 = 0xD00000000000001ELL;
              break;
            case 0x9000u:
              uint64_t v260 = v325;
              uint64_t v259 = v326;
              unint64_t v261 = v251;
              v262 = v244;
              uint64_t v263 = v322;
              sub_100006628(v298, v299);
              sub_100006628(v258, v261);
              sub_100006628(v258, v261);

              (*(void (**)(char *, uint64_t))(v243 + 8))(v278, v286);
              sub_100006628(v315, v316);
              sub_100006628(v317, v318);
              uint64_t result = sub_100006628(v319, v320);
              v264 = v273;
              void *v273 = v263;
              v264[1] = v256;
              *((_WORD *)v264 + 8) = -28672;
              v264[3] = v260;
              v264[4] = v259;
              return result;
            default:
              uint64_t v265 = 0;
              v266 = 0;
              break;
          }
          sub_10002A544(4015, v265, v266, 0);
          swift_willThrow();

          sub_1000C6D84(v321, (void (*)(void, void, void, void, void))sub_100038E90);
          sub_100006628(v228, v251);
          uint64_t v257 = v228;
          goto LABEL_111;
        }
        uint64_t v255 = 0xD000000000000010;
        v254 = (void *)0x8000000100198A30;
LABEL_102:
        sub_10002A544(4015, v255, v254, 0);
        swift_willThrow();

        sub_100006628(v228, v251);
        uint64_t v257 = v228;
LABEL_111:
        sub_100006628(v257, v251);
        sub_100006628(v298, v299);
        (*(void (**)(char *, uint64_t))(v243 + 8))(v278, v286);
        sub_100006628(v315, v316);
        uint64_t v123 = v317;
        unint64_t v124 = v318;
LABEL_43:
        sub_100006628(v123, v124);
LABEL_47:
        uint64_t v112 = v319;
        unint64_t v113 = v320;
        return sub_100006628(v112, v113);
    }
  }
}

NSObject *sub_1000B1954(unint64_t a1, unsigned __int8 a2, unsigned __int8 a3)
{
  if (qword_1001D9090 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001DC090);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v9 = TLVTag.description.getter(a1);
    sub_100005EB8(v9, v10, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 15) = 256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "getTagList(%s, p1: %hhu, p2: %hhu)", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = TLVTag.dataRepresentation.getter(a1);
  uint64_t v13 = v11;
  unint64_t v14 = v12;
  switch(v12 >> 62)
  {
    case 1uLL:
      unsigned __int16 v15 = WORD2(v11) - v11;
      if (__OFSUB__(HIDWORD(v11), v11))
      {
        __break(1u);
        goto LABEL_10;
      }
      break;
    case 2uLL:
LABEL_10:
      uint64_t v17 = *(void *)(v11 + 16);
      uint64_t v16 = *(void *)(v11 + 24);
      unsigned __int16 v15 = v16 - v17;
      if (__OFSUB__(v16, v17))
      {
        __break(1u);
        goto LABEL_13;
      }
      break;
    case 3uLL:
LABEL_13:
      sub_100006628(v11, v12);
      unsigned __int16 v15 = 0;
      break;
    default:
      sub_100006628(v11, v12);
      unsigned __int16 v15 = BYTE6(v14);
      break;
  }
  sub_1000065D0(v13, v14);
  sub_1000065D0(v13, v14);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    unint64_t v56 = ((unint64_t)a2 << 16) & 0xFFFF000000FFFFFFLL | (a3 << 24) | ((unint64_t)v15 << 32) | 0x41A0;
    uint64_t v21 = sub_10006BD14(v56, v13, v14, 0);
    unint64_t v23 = v22;
    Swift::String v24 = Data.hexString()();
    sub_100006628(v21, v23);
    sub_100005EB8(v24._countAndFlagsBits, (unint64_t)v24._object, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v13, v14);
    sub_100006628(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "C-APDU (GET TAG LIST): %{public}s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v25 = v56;
  }
  else
  {
    sub_100006628(v13, v14);
    sub_100006628(v13, v14);

    unint64_t v25 = ((unint64_t)a2 << 16) & 0xFFFF000000FFFFFFLL | (a3 << 24) | ((unint64_t)v15 << 32) | 0x41A0;
  }
  sub_1000F4FB4(v25, v13, v14, 0, 1, (uint64_t)v57);
  uint64_t v27 = v57[0];
  uint64_t v26 = v57[1];
  uint64_t v28 = v57[3];
  unint64_t v29 = v57[4];
  sub_100038DA0((uint64_t)v57, (uint64_t)v58);
  if (*((void *)&v58[0] + 1) >> 60 == 15)
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v30, "no response from getTagList", v31, 2u);
      swift_slowDealloc();
    }

    sub_100038E08();
    swift_allocError();
    *long long v32 = 0;
    swift_willThrow();
    goto LABEL_29;
  }
  long long v60 = v58[0];
  long long v61 = v58[1];
  uint64_t v62 = v59;
  sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_1000C6DC0);
  sub_1000065D0(v27, (unint64_t)v26);
  sub_1000065D0(v28, v29);
  sub_1000065D0(v27, (unint64_t)v26);
  sub_1000065D0(v28, v29);
  sub_1000065D0(v27, (unint64_t)v26);
  sub_1000065D0(v28, v29);
  os_log_type_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    buf = (uint8_t *)v29;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    uint64_t v36 = Data.description.getter();
    uint64_t v54 = v28;
    sub_100005EB8(v36, v37, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
    *(_WORD *)(v35 + 12) = 2082;
    __int16 v38 = v61;
    sub_100003EB0((uint64_t *)&unk_1001DD3C0);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_100186100;
    *(void *)(v39 + 56) = &type metadata for UInt16;
    *(void *)(v39 + 64) = &protocol witness table for UInt16;
    *(_WORD *)(v39 + 32) = v38;
    uint64_t v40 = String.init(format:_:)();
    sub_100005EB8(v40, v41, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v28 = v54;
    swift_bridgeObjectRelease();
    sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "R-APDU: %s, sw: %{public}s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v29 = (unint64_t)buf;
    swift_slowDealloc();
  }
  else
  {
    sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_100006628(v27, (unint64_t)v26);
    sub_100006628(v28, v29);
    sub_1000C6A48((uint64_t *)&v60);
  }

  __int16 v42 = v61;
  if ((unsigned __int16)v61 == 36864)
  {
    uint64_t v63 = *(void *)TLVTag.transactionResultData.unsafeMutableAddressor();
    sub_1000388E0();
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v45 = 0;
        unint64_t v46 = "Received DF81FE Transaction Result Data aka generalCardData";
LABEL_36:
        _os_log_impl((void *)&_mh_execute_header, v43, v44, v46, v45, 2u);
        swift_slowDealloc();

        uint64_t v48 = v13;
LABEL_37:
        sub_100006628(v48, v14);
LABEL_40:
        uint64_t v26 = v60;
        sub_1000065D0(v60, *((unint64_t *)&v60 + 1));
        sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
        return v26;
      }
    }
    else
    {
      uint64_t v63 = *(void *)TLVTag.trxCipherAndKeyBlobs.unsafeMutableAddressor();
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          unint64_t v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v45 = 0;
          unint64_t v46 = "Received DF81FF Transaction Cipher and Key Blob";
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v63 = *(void *)TLVTag.analyticsData.unsafeMutableAddressor();
        if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        {
          sub_1000065D0(v27, (unint64_t)v26);
          sub_1000065D0(v28, v29);
          sub_1000065D0(v27, (unint64_t)v26);
          sub_1000065D0(v28, v29);
          uint64_t v43 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v43, v50))
          {
            uint64_t v51 = (uint8_t *)swift_slowAlloc();
            uint64_t v63 = swift_slowAlloc();
            *(_DWORD *)uint64_t v51 = 136315138;
            Swift::String v52 = Data.hexString()();
            sub_100005EB8(v52._countAndFlagsBits, (unint64_t)v52._object, &v63);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
            sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
            _os_log_impl((void *)&_mh_execute_header, v43, v50, "Received Tag List: %s", v51, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v48 = v13;
            goto LABEL_37;
          }
          sub_100006628(v13, v14);
          sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
          sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
LABEL_39:

          goto LABEL_40;
        }
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          unint64_t v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v45 = 0;
          unint64_t v46 = "Received DF81FD Analytics Data";
          goto LABEL_36;
        }
      }
    }
    sub_100006628(v13, v14);
    goto LABEL_39;
  }
  sub_100038E08();
  swift_allocError();
  *uint64_t v47 = v42;
  swift_willThrow();
  sub_1000C6D84(v57, (void (*)(void, void, void, void, void))sub_100038E90);
LABEL_29:
  sub_100006628(v13, v14);
  return v26;
}

uint64_t sub_1000B2528()
{
  if (qword_1001D9090 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DC090);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v0 = swift_slowAlloc();
    *(_WORD *)uint64_t v0 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "GET PAYMENT APPLICATION TYPE", (uint8_t *)v0, 2u);
    swift_slowDealloc();
  }

  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v0 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v0 = 136315138;
    uint64_t v6 = sub_10006C13C(0x7A0uLL, 0, 0xC000000000000000, 0);
    unint64_t v8 = v7;
    Swift::String v9 = Data.hexString()();
    sub_100006628(v6, v8);
    sub_100005EB8(v9._countAndFlagsBits, (unint64_t)v9._object, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "C-APDU (GET PAYMENT APP TYPE): %s", (uint8_t *)v0, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000F4FB4(0x7A0uLL, 0, 0xC000000000000000, 0, 0, (uint64_t)v31);
  uint64_t v11 = v31[0];
  unint64_t v10 = v31[1];
  uint64_t v12 = v31[3];
  unint64_t v13 = v31[4];
  sub_100038DA0((uint64_t)v31, (uint64_t)&v32);
  unint64_t v14 = v33;
  if (v33 >> 60 == 15)
  {
    unsigned __int16 v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "no response for getPaymentAppType", v17, 2u);
      swift_slowDealloc();
    }

    sub_100038E08();
    swift_allocError();
    _WORD *v18 = 0;
    swift_willThrow();
  }
  else
  {
    uint64_t v0 = v32;
    int v30 = v34;
    sub_1000065D0(v11, v10);
    sub_1000065D0(v12, v13);
    sub_1000065D0(v11, v10);
    sub_1000065D0(v12, v13);
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      Swift::String v22 = Data.hexString()();
      sub_100005EB8(v22._countAndFlagsBits, (unint64_t)v22._object, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C6D84(v31, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v31, (void (*)(void, void, void, void, void))sub_100038E90);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "R-APDU: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C6D84(v31, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v31, (void (*)(void, void, void, void, void))sub_100038E90);
    }

    if (v30 == 36864)
    {
      switch(v14 >> 62)
      {
        case 1uLL:
          LODWORD(v23) = HIDWORD(v0) - v0;
          if (__OFSUB__(HIDWORD(v0), v0))
          {
            __break(1u);
LABEL_27:
            __break(1u);
            JUMPOUT(0x1000B2B08);
          }
          uint64_t v23 = (int)v23;
LABEL_21:
          if (v23 == 2)
          {
            sub_1000065D0(v0, v14);
            sub_1000C6D84(v31, (void (*)(void, void, void, void, void))sub_100038E90);
            return v0;
          }
LABEL_23:
          sub_100038E08();
          swift_allocError();
          *uint64_t v28 = 1;
          break;
        case 2uLL:
          uint64_t v26 = *(void *)(v0 + 16);
          uint64_t v25 = *(void *)(v0 + 24);
          BOOL v27 = __OFSUB__(v25, v26);
          uint64_t v23 = v25 - v26;
          if (!v27) {
            goto LABEL_21;
          }
          goto LABEL_27;
        case 3uLL:
          goto LABEL_23;
        default:
          uint64_t v23 = BYTE6(v14);
          goto LABEL_21;
      }
    }
    else
    {
      sub_100038E08();
      swift_allocError();
      *Swift::String v24 = v30;
    }
    swift_willThrow();
    sub_1000C6D84(v31, (void (*)(void, void, void, void, void))sub_100038E90);
  }
  return v0;
}

void sub_1000B2B18()
{
  if (qword_1001D9090 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DC090);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136315138;
    uint64_t v6 = v2;
    id v7 = [v2 description];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    v40[0] = sub_100005EB8(v8, v10, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "clearTransaction() session: %s)", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    uint64_t v14 = sub_10006C13C(0x3A0uLL, 0, 0xC000000000000000, 0);
    unint64_t v16 = v15;
    Swift::String v17 = Data.hexString()();
    sub_100006628(v14, v16);
    v40[0] = sub_100005EB8(v17._countAndFlagsBits, (unint64_t)v17._object, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "C-APDU (CLEAR TRX): %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000F4FB4(0x3A0uLL, 0, 0xC000000000000000, 0, 0, (uint64_t)v40);
  uint64_t v18 = v40[0];
  unint64_t v19 = v40[1];
  uint64_t v20 = v40[3];
  unint64_t v21 = v40[4];
  sub_100038DA0((uint64_t)v40, (uint64_t)v41);
  if ((unint64_t)v41[1] >> 60 == 15)
  {
    Swift::String v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      Swift::String v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error on CLEAR TRANSACTION command", v24, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    int v25 = v42;
    sub_1000065D0(v18, v19);
    sub_1000065D0(v20, v21);
    sub_1000065D0(v18, v19);
    sub_1000065D0(v20, v21);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      int v38 = v25;
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      Swift::String v29 = Data.hexString()();
      sub_100005EB8(v29._countAndFlagsBits, (unint64_t)v29._object, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C6D84(v40, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v40, (void (*)(void, void, void, void, void))sub_100038E90);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "R-APDU: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      int v25 = v38;
      swift_slowDealloc();
    }
    else
    {
      sub_1000C6D84(v40, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v40, (void (*)(void, void, void, void, void))sub_100038E90);
    }

    if (v25 == 36864)
    {
      int v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "clear transaction success", v32, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      sub_1000065D0(v18, v19);
      sub_1000065D0(v20, v21);
      int v30 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v33))
      {
        unsigned __int16 v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = (void *)swift_slowAlloc();
        *(_DWORD *)unsigned __int16 v34 = 138412290;
        sub_100038E08();
        swift_allocError();
        *uint64_t v36 = v25;
        uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v39 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v35 = v37;
        sub_1000C6D84(v40, (void (*)(void, void, void, void, void))sub_100038E90);
        _os_log_impl((void *)&_mh_execute_header, v30, v33, "Error (%@) on CLEAR TRANSACTION command", v34, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1000C6D84(v40, (void (*)(void, void, void, void, void))sub_100038E90);
      }
    }

    sub_1000C6D84(v40, (void (*)(void, void, void, void, void))sub_100038E90);
  }
}

uint64_t sub_1000B3298(uint64_t a1)
{
  return sub_1000B32F0(a1, (void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F4FB4);
}

uint64_t sub_1000B32C4(uint64_t a1)
{
  return sub_1000B32F0(a1, (void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F61E8);
}

uint64_t sub_1000B32F0(uint64_t a1, void (*a2)(void *__return_ptr, void, void, void, void, void))
{
  void (*v31)(void *__return_ptr, void, void, void, void, void);
  uint64_t v32;
  int v33;
  void v34[5];
  uint64_t v35;
  unint64_t v36;
  unsigned __int16 v37;
  uint64_t v38;

  if (qword_1001D91B8 != -1) {
    swift_once();
  }
  uint64_t v4 = 2160721920;
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001DD958);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    int v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    sub_100003EB0((uint64_t *)&unk_1001DD3C0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100186100;
    *(void *)(v9 + 56) = &type metadata for UInt;
    *(void *)(v9 + 64) = &protocol witness table for UInt;
    *(void *)(v9 + 32) = a1;
    uint64_t v10 = String.init(format:_:)();
    os_log_type_t v31 = a2;
    sub_100005EB8(v10, v11, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    unint64_t v12 = bswap32((unsigned __int16)a1 | 0x80CA0000);
    uint64_t v13 = sub_10006BD14(v12, 0, 0xC000000000000000, 0);
    uint64_t v4 = v14;
    Swift::String v15 = Data.hexString()();
    uint64_t v16 = v13;
    a2 = v31;
    sub_100006628(v16, v4);
    sub_100005EB8(v15._countAndFlagsBits, (unint64_t)v15._object, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CAPDU (GET DATA for tag %s): %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v12 = bswap32((unsigned __int16)a1 | 0x80CA0000);
  }
  a2(v34, v12, 0, 0xC000000000000000, 0, 1);
  uint64_t v18 = v34[0];
  unint64_t v17 = v34[1];
  uint64_t v19 = v34[3];
  unint64_t v20 = v34[4];
  sub_100038DA0((uint64_t)v34, (uint64_t)&v35);
  unint64_t v21 = v36;
  if (v36 >> 60 == 15)
  {
    Swift::String v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v4 = swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error from transceive", (uint8_t *)v4, 2u);
      swift_slowDealloc();
    }

    sub_100038E08();
    swift_allocError();
    *Swift::String v24 = 0;
    swift_willThrow();
  }
  else
  {
    uint64_t v4 = v35;
    os_log_type_t v33 = v37;
    sub_1000065D0(v18, v17);
    sub_1000065D0(v19, v20);
    sub_1000065D0(v18, v17);
    sub_1000065D0(v19, v20);
    int v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v32 = v4;
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      int v38 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v27 = 136315138;
      Swift::String v28 = Data.hexString()();
      sub_100005EB8(v28._countAndFlagsBits, (unint64_t)v28._object, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C6D84(v34, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v34, (void (*)(void, void, void, void, void))sub_100038E90);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "RAPDU: %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v32;
      swift_slowDealloc();
    }
    else
    {
      sub_1000C6D84(v34, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v34, (void (*)(void, void, void, void, void))sub_100038E90);
    }

    if (v33 == 36864)
    {
      sub_1000065D0(v4, v21);
    }
    else
    {
      sub_100038E08();
      swift_allocError();
      *Swift::String v29 = v33;
      swift_willThrow();
    }
    sub_1000C6D84(v34, (void (*)(void, void, void, void, void))sub_100038E90);
  }
  return v4;
}

uint64_t sub_1000B389C(uint64_t a1)
{
  return sub_1000B38C8(a1, (void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F61E8);
}

uint64_t sub_1000B38C8(uint64_t a1, void (*a2)(void *__return_ptr, void, void, void, void, void))
{
  uint64_t v4 = sub_1000B32F0(a1, a2);
  if (!v3)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    type metadata accessor for TLV();
    sub_1000065D0(v6, v7);
    TLV.__allocating_init(dataRepresentation:)(v6, v7);
    uint64_t v2 = v8;
    sub_100006628(v6, v7);
  }
  return v2;
}

BOOL sub_1000B3B3C(uint64_t a1, unint64_t a2)
{
  return sub_1000B3B54(a1, a2, (void (*)(void *__return_ptr, unint64_t, uint64_t, unint64_t, void, void))sub_1000F61E8);
}

BOOL sub_1000B3B54(uint64_t a1, unint64_t a2, void (*a3)(void *__return_ptr, unint64_t, uint64_t, unint64_t, void, void))
{
  if (qword_1001D90D0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001DCA18);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v43[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    v42[0] = sub_100005EB8(a1, a2, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "activateProfile(profileID: %s)", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = Data.init(hexString:)();
  if (v10 >> 60 == 15)
  {
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "could not convert hex string to profile ID (Data)", v13, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    unint64_t v15 = v10;
    uint64_t v16 = v9;
    switch(v10 >> 62)
    {
      case 1uLL:
        unsigned __int16 v17 = WORD2(v9) - v9;
        if (!__OFSUB__(HIDWORD(v9), v9)) {
          goto LABEL_16;
        }
        __break(1u);
        goto LABEL_15;
      case 2uLL:
LABEL_15:
        uint64_t v19 = *(void *)(v9 + 16);
        uint64_t v18 = *(void *)(v9 + 24);
        unsigned __int16 v17 = v18 - v19;
        if (__OFSUB__(v18, v19))
        {
          __break(1u);
          JUMPOUT(0x1000B4298);
        }
LABEL_16:
        sub_1000065D0(v9, v10);
        break;
      case 3uLL:
        sub_10000BF70(v9, v10);
        unsigned __int16 v17 = 0;
        break;
      default:
        sub_10000BF70(v9, v10);
        unsigned __int16 v17 = BYTE6(v15);
        break;
    }
    sub_1000065D0(v16, v15);
    sub_1000065D0(v16, v15);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      Swift::String v22 = (uint8_t *)swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)Swift::String v22 = 136315138;
      unint64_t v23 = ((unint64_t)v17 << 32) | 0xB180;
      uint64_t v24 = sub_10006C13C(v23, v16, v15, 0);
      unint64_t v26 = v25;
      Swift::String v27 = Data.hexString()();
      sub_100006628(v24, v26);
      v42[0] = sub_100005EB8(v27._countAndFlagsBits, (unint64_t)v27._object, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000BF70(v16, v15);
      sub_10000BF70(v16, v15);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "C-APDU (activate profile): %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10000BF70(v16, v15);
      sub_10000BF70(v16, v15);

      unint64_t v23 = ((unint64_t)v17 << 32) | 0xB180;
    }
    a3(v42, v23, v16, v15, 0, 0);
    uint64_t v28 = v42[0];
    unint64_t v29 = v42[1];
    uint64_t v30 = v42[3];
    unint64_t v31 = v42[4];
    sub_100038DA0((uint64_t)v42, (uint64_t)v43);
    if ((unint64_t)v43[1] >> 60 == 15)
    {
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        unsigned __int16 v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned __int16 v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "activate failed", v34, 2u);
        swift_slowDealloc();

        sub_10000BF70(v16, v15);
        sub_10000BF70(v16, v15);
      }
      else
      {
        sub_10000BF70(v16, v15);
        sub_10000BF70(v16, v15);
      }
      return 0;
    }
    else
    {
      int v35 = v44;
      sub_1000065D0(v28, v29);
      sub_1000065D0(v30, v31);
      sub_1000065D0(v28, v29);
      sub_1000065D0(v30, v31);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        int v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)int v38 = 136315138;
        Swift::String v39 = Data.hexString()();
        sub_100005EB8(v39._countAndFlagsBits, (unint64_t)v39._object, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000C6D84(v42, (void (*)(void, void, void, void, void))sub_100038E90);
        sub_1000C6D84(v42, (void (*)(void, void, void, void, void))sub_100038E90);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "R-APDU: %s", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_10000BF70(v16, v15);
        sub_10000BF70(v16, v15);
      }
      else
      {
        sub_1000C6D84(v42, (void (*)(void, void, void, void, void))sub_100038E90);
        sub_1000C6D84(v42, (void (*)(void, void, void, void, void))sub_100038E90);

        sub_10000BF70(v16, v15);
        sub_10000BF70(v16, v15);
      }
      sub_1000C6D84(v42, (void (*)(void, void, void, void, void))sub_100038E90);
      return v35 == 36864;
    }
  }
}

uint64_t sub_1000B42A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD1E0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD1E0);
  if (qword_1001D9238 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FC8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000B4370()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DD1F8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD1F8);
  if (qword_1001D9000 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D28);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000B46B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v174 = a8;
  uint64_t v175 = a7;
  id v168 = a6;
  uint64_t v177 = a2;
  uint64_t v176 = a9;
  uint64_t v172 = (char *)type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v172, v14);
  uint64_t v167 = (char *)&v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v166, v16);
  *(void *)&long long v165 = (char *)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = (uint64_t *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v18 = *(v164 - 1);
  __chkstk_darwin(v164, v19);
  uint64_t v163 = (uint64_t)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v21 - 8, v22);
  uint64_t v162 = (uint64_t)&v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = OBJC_IVAR____TtC9SPREngine13ReadOperation_lockedState;
  sub_100003EB0(&qword_1001DD338);
  uint64_t v25 = swift_allocObject();
  *(_DWORD *)(v25 + 20) = 0;
  *(_WORD *)(v25 + 16) = 0;
  uint64_t v155 = v24;
  *(void *)&v9[v24] = v25;
  v9[OBJC_IVAR____TtC9SPREngine13ReadOperation__isFinished] = 0;
  uint64_t v26 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
  Swift::String v27 = v9;
  uint64_t v28 = sub_10002A544(4998, 0, 0, 0);
  uint64_t v157 = v26;
  uint64_t v158 = v9;
  *(void *)&v9[v26] = v28;
  uint64_t v156 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse] = _swiftEmptyArrayStorage;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming] = 0;
  unint64_t v29 = (unint64_t *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult];
  unint64_t v30 = sub_100004D6C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v159 = v29;
  *unint64_t v29 = v30;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart] = 1;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestartByApplet] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackTransactionStarted] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackFlowEnabled] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent] = 0;
  v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_lastTransactionOutcomeReceived] = 0;
  *(_WORD *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus] = 256;
  uint64_t v150 = OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession] = a1;
  uint64_t v147 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig] = v177;
  uint64_t v148 = OBJC_IVAR____TtC9SPREngine13ReadOperation_callback;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_callback] = a3;
  uint64_t v170 = a4;
  unint64_t v154 = &v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor];
  sub_100009300(a4, (uint64_t)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor]);
  uint64_t v152 = OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics;
  uint64_t v31 = a5;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] = a5;
  uint64_t v146 = OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue;
  id v32 = v168;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue] = v168;
  uint64_t v153 = &v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData];
  sub_100009300(v175, (uint64_t)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData]);
  uint64_t v151 = &v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureElement];
  sub_100009300(v174, (uint64_t)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureElement]);
  uint64_t v149 = &v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureTimeKeeper];
  sub_100009300((uint64_t)v176, (uint64_t)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureTimeKeeper]);
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount] = 0;
  uint64_t v161 = (uint8_t *)sub_100006680(0, (unint64_t *)&qword_1001DD340);
  id v173 = a1;
  swift_retain();
  uint64_t v169 = a3;
  swift_retain();
  uint64_t v171 = v31;
  swift_retain();
  id v168 = v32;
  static DispatchQoS.userInteractive.getter();
  (*(void (**)(uint64_t, void, uint64_t *))(v18 + 104))(v163, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v164);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000C6F64((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_100038F5C((unint64_t *)&qword_1001DA500, (uint64_t *)&unk_1001DD350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v33 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v34 = OBJC_IVAR____TtC9SPREngine13ReadOperation_queue;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue] = v33;
  uint64_t v182 = BitString.init(data:unusedBits:);
  uint64_t v183 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  uint64_t v35 = v177;
  aBlock[2] = sub_1000048D8;
  uint64_t v181 = &unk_1001C90B0;
  _Block_copy(aBlock);
  p_os_unfair_lock_opaque = _swiftEmptyArrayStorage;
  sub_1000C6F64((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v36 = DispatchWorkItem.init(flags:block:)();
  uint64_t v37 = OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem;
  uint64_t v172 = v27;
  *(void *)&v27[OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem] = v36;
  if (*(void *)(v35 + 16) == 1)
  {

LABEL_3:
    Operation = (objc_class *)type metadata accessor for ReadOperation();
    v178.receiver = v172;
    v178.super_class = Operation;
    [super init];

    swift_release();
    swift_release();
    swift_release();

    sub_100006520((uint64_t)v176);
    sub_100006520(v174);
    sub_100006520(v175);
    sub_100006520(v170);
    return;
  }
  uint64_t v167 = (char *)v37;
  sub_100003EB0((uint64_t *)&unk_1001DA520);
  uint64_t v39 = swift_allocObject();
  long long v165 = xmmword_100186100;
  *(_OWORD *)(v39 + 16) = xmmword_100186100;
  if (qword_1001D9348 != -1) {
    swift_once();
  }
  uint64_t v40 = *((void *)&xmmword_1001E1180 + 1);
  *(void *)(v39 + 32) = xmmword_1001E1180;
  *(void *)(v39 + 40) = v40;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  aBlock[0] = 0;
  unsigned int v42 = [v173 selectApplets:isa error:aBlock];

  if (!v42)
  {
    id v59 = aBlock[0];
    long long v60 = (os_unfair_lock_s *)_convertNSErrorToError(_:)();

    swift_willThrow();
    aBlock[0] = v60;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    sub_100006680(0, (unint64_t *)&qword_1001DA530);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_24:
      swift_errorRelease();
      if (qword_1001D9188 != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      sub_100003E78(v76, (uint64_t)qword_1001DD1E0);
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        unint64_t v79 = (uint8_t *)swift_slowAlloc();
        long long v80 = (void *)swift_slowAlloc();
        uint64_t v166 = v34;
        aBlock[0] = v80;
        *(_DWORD *)unint64_t v79 = 136315138;
        *(void *)&long long v165 = v79 + 4;
        p_os_unfair_lock_opaque = &v60->_os_unfair_lock_opaque;
        swift_errorRetain();
        uint64_t v81 = String.init<A>(describing:)();
        p_os_unfair_lock_opaque = (void *)sub_100005EB8(v81, v82, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Error from selectApplets: %s", v79, 0xCu);
        swift_arrayDestroy();
        uint64_t v34 = v166;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v84 = v157;
      uint64_t v83 = v158;
      uint64_t v85 = v170;
      sub_10002A544(4037, 0, 0, 0);
      swift_willThrow();

      swift_release();
      swift_release();
      swift_release();

      swift_errorRelease();
      sub_100006520((uint64_t)v176);
      sub_100006520(v174);
      sub_100006520(v175);
      sub_100006520(v85);
      goto LABEL_57;
    }
    uint64_t v61 = v34;
    id v62 = p_os_unfair_lock_opaque;
    id v63 = [p_os_unfair_lock_opaque domain];
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;

    if (v64 == String.init(cString:)() && v66 == v67)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v34 = v61;
    }
    else
    {
      char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = v61;
      if ((v68 & 1) == 0)
      {
LABEL_23:

        goto LABEL_24;
      }
    }
    unint64_t v69 = (unint64_t)[v62 code];
    if ((v69 & 0x8000000000000000) != 0 || HIDWORD(v69))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_66;
    }
    if (v69 == 64)
    {
      swift_errorRelease();
      if (qword_1001D9188 != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      sub_100003E78(v70, (uint64_t)qword_1001DD1E0);
      uint64_t v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      BOOL v73 = os_log_type_enabled(v71, v72);
      Swift::String v74 = v176;
      if (v73)
      {
        unint64_t v75 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v75 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Cannot select pay applet. Reader temporarily unavailable. May be from prohibit timer.", v75, 2u);
        swift_slowDealloc();
      }

      sub_10002A544(4036, 0, 0, 0);
      swift_willThrow();

      swift_release();
      swift_release();
      swift_release();

      sub_100006520((uint64_t)v74);
      sub_100006520(v174);
      sub_100006520(v175);
      sub_100006520(v170);
      swift_errorRelease();
LABEL_55:
      uint64_t v83 = v158;
LABEL_56:
      uint64_t v84 = v157;
LABEL_57:
      uint64_t v121 = v172;

      swift_release();
      swift_release();
      swift_release();

      swift_release();
      sub_100006520((uint64_t)v154);
      swift_release();

      sub_100006520((uint64_t)v153);
      sub_100006520((uint64_t)v151);
      sub_100006520((uint64_t)v149);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      type metadata accessor for ReadOperation();
      swift_deallocPartialClassInstance();
      return;
    }
    goto LABEL_23;
  }
  uint64_t v166 = v34;
  id v43 = aBlock[0];
  unsigned __int16 v44 = v160;
  unint64_t v45 = sub_1000AECF0((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F4FB4);
  uint64_t v47 = v44;
  if (v44)
  {
LABEL_35:
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v90 = type metadata accessor for Logger();
    sub_100003E78(v90, (uint64_t)qword_1001DD1E0);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v93 = 136315138;
      p_os_unfair_lock_opaque = v47;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v94 = String.init<A>(describing:)();
      p_os_unfair_lock_opaque = (void *)sub_100005EB8(v94, v95, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Error on getAppletVersion: %s", v93, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v83 = v158;
    uint64_t v96 = v170;
    uint64_t v34 = v166;
    sub_10002A544(4041, 0, 0, 0);
    swift_willThrow();

    swift_release();
    swift_release();
    swift_release();

    swift_errorRelease();
    sub_100006520((uint64_t)v176);
    sub_100006520(v174);
    sub_100006520(v175);
    sub_100006520(v96);
    goto LABEL_56;
  }
  uint64_t v48 = (uint64_t)v45;
  unint64_t v49 = v46;
  uint64_t v163 = sub_100003EB0((uint64_t *)&unk_1001DD390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v165;
  *(unsigned char *)(inited + 32) = 5;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 40) = v48;
  *(void *)(inited + 48) = v49;
  swift_bridgeObjectRetain();
  unint64_t v51 = sub_1001052FC(inited);
  uint64_t v164 = &v139;
  __chkstk_darwin(v51, v52);
  uint64_t v54 = (uint64_t *)&v53[4];
  uint64_t v55 = v53 + 8;
  os_unfair_lock_lock(v53 + 8);
  sub_10005A488(v54);
  os_unfair_lock_unlock(v55);
  swift_bridgeObjectRelease();
  unint64_t v56 = sub_1000C640C(v48, v49);
  swift_bridgeObjectRelease();
  LOBYTE(v55) = sub_1000C6950((uint64_t)v56);
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
  {
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    sub_100003E78(v86, (uint64_t)qword_1001DD1E0);
    id v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      unint64_t v89 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "applet version not acceptable", v89, 2u);
      swift_slowDealloc();
    }

    uint64_t v47 = (void *)sub_10002A544(4041, 0, 0, 0);
    swift_willThrow();
    goto LABEL_35;
  }
  uint64_t v57 = sub_1000AF660((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F4FB4);
  uint64_t v34 = v166;
  uint64_t v97 = v57;
  unint64_t v98 = v58;
  uint64_t v164 = 0;
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v99 = type metadata accessor for Logger();
  uint64_t v100 = sub_100003E78(v99, (uint64_t)qword_1001DD1E0);
  swift_bridgeObjectRetain_n();
  uint64_t v162 = v100;
  id v101 = Logger.logObject.getter();
  os_log_type_t v102 = static os_log_type_t.default.getter();
  BOOL v103 = os_log_type_enabled(v101, v102);
  uint64_t v104 = v177;
  if (v103)
  {
    uint64_t v105 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v105 = 136446210;
    uint64_t v161 = v105 + 4;
    swift_bridgeObjectRetain();
    p_os_unfair_lock_opaque = (void *)sub_100005EB8(v97, v98, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "GlobalId: %{public}s", v105, 0xCu);
    swift_arrayDestroy();
    uint64_t v34 = v166;
    swift_slowDealloc();
    uint64_t v104 = v177;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v106 = swift_initStackObject();
  *(_OWORD *)(v106 + 16) = v165;
  *(unsigned char *)(v106 + 32) = 6;
  *(void *)(v106 + 64) = &type metadata for String;
  *(void *)(v106 + 40) = v97;
  *(void *)(v106 + 48) = v98;
  unint64_t v107 = sub_1001052FC(v106);
  __chkstk_darwin(v107, v108);
  uint64_t v110 = (uint64_t *)&v109[4];
  long long v60 = v109 + 8;
  os_unfair_lock_lock(v109 + 8);
  long long v111 = v164;
  sub_1000C7240(v110);
  if (!v111)
  {
    os_unfair_lock_unlock(v60);
    swift_bridgeObjectRelease();
    unint64_t v112 = *(void *)(v104 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID + 8);
    id v113 = v173;
    if (v112)
    {
      uint64_t v114 = *(void *)(v104 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
      swift_bridgeObjectRetain();
      if (sub_1000B3B54(v114, v112, (void (*)(void *__return_ptr, unint64_t, uint64_t, unint64_t, void, void))sub_1000F4FB4))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v117 = 136446210;
          *(void *)&long long v165 = v117 + 4;
          swift_bridgeObjectRetain();
          p_os_unfair_lock_opaque = (void *)sub_100005EB8(v114, v112, (uint64_t *)aBlock);
          uint64_t v104 = v177;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "ProfileId activated: %{public}s", v117, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        int v122 = *(unsigned __int8 *)(v104 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF);
        sub_100006788((void *)(v171 + 16), *(void *)(v171 + 40));
        uint64_t v164 = 0;
        if (v122 == 1)
        {
          sub_1000430BC(42, v114, v112);
          swift_bridgeObjectRelease();
          uint64_t v181 = &type metadata for Bool;
          LOBYTE(aBlock[0]) = 1;
          swift_beginAccess();
          sub_1001058E0((uint64_t)aBlock, 0x4641537369, 0xE500000000000000);
          swift_endAccess();
        }
        else
        {
          sub_1000430BC(41, v114, v112);
          swift_bridgeObjectRelease();
        }
        LODWORD(v163) = *(_DWORD *)(v104 + 48);
        unint64_t v123 = *(void *)(v104 + 64);
        *(void *)&long long v165 = *(void *)(v104 + 56);
        uint64_t v124 = *(void *)(v104 + 80);
        unint64_t v140 = *(void *)(v104 + 88);
        unint64_t v125 = v140;
        unint64_t v141 = v123;
        uint64_t v126 = *(void *)(v104 + 96);
        size_t v127 = *(uint8_t **)(v104 + 104);
        uint64_t v128 = *(void *)(v104 + 152);
        unint64_t v129 = *(void *)(v104 + 160);
        uint64_t v130 = *(void *)(v104 + 144);
        unint64_t v131 = *(void *)(v104 + 40);
        unint64_t v142 = *(void *)(v104 + 32);
        unint64_t v143 = v131;
        LODWORD(v160) = *(unsigned __int8 *)(v104 + 72);
        sub_1000065D0(v165, v123);
        sub_1000065D0(v124, v125);
        sub_1000065D0(v126, (unint64_t)v127);
        sub_1000065D0(v128, v129);
        swift_bridgeObjectRetain();
        uint64_t v144 = v130;
        unint64_t v145 = v129;
        uint64_t v161 = v127;
        uint64_t v162 = v126;
        uint64_t v138 = v126;
        int v132 = v163;
        unint64_t v133 = v164;
        unint64_t v134 = v141;
        uint64_t v163 = v124;
        uint64_t v135 = v124;
        unint64_t v136 = v140;
        id v137 = v173;
        sub_1000AFAFC(v142, v143, v132, v165, v141, (int)v160, v135, v140, v184, v138, v127, v128, v129, v130, 1, 2u, v176);
        uint64_t v160 = v133;
        if (!v133)
        {
          swift_bridgeObjectRelease();

          sub_100006628(v128, v145);
          sub_100006628(v162, (unint64_t)v161);
          sub_100006628(v163, v136);
          sub_100006628(v165, v134);
          sub_1000C6A48(v184);
          *(_WORD *)(v171 + 172) = v185;
          goto LABEL_3;
        }
        swift_bridgeObjectRelease();
        sub_100006628(v128, v145);
        sub_100006628(v162, (unint64_t)v161);
        sub_100006628(v163, v136);
        sub_100006628(v165, v134);
        swift_release();
        swift_release();
        swift_release();

        sub_100006520((uint64_t)v176);
        sub_100006520(v174);
        sub_100006520(v175);
        sub_100006520(v170);

        uint64_t v84 = v157;
        uint64_t v83 = v158;
        uint64_t v34 = v166;
        goto LABEL_57;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "activateProfile Error", v120, 2u);
      id v113 = v173;
      swift_slowDealloc();
    }

    sub_10002A544(4039, 0, 0, 0);
    swift_willThrow();

    swift_release();
    swift_release();
    swift_release();

    sub_100006520((uint64_t)v176);
    sub_100006520(v174);
    sub_100006520(v175);
    sub_100006520(v170);
    goto LABEL_55;
  }
LABEL_66:
  os_unfair_lock_unlock(v60);
  __break(1u);
}

id sub_1000B6364()
{
  uint64_t v1 = v0;
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DD1E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ReadOperation deinit", v5, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for ReadOperation();
  return [super dealloc];
}

uint64_t sub_1000B65C4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Operation = (objc_class *)type metadata accessor for ReadOperation();
  v18.receiver = v0;
  v18.super_class = Operation;
  [super cancel];
  v16[0] = *(void *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v0;
  aBlock[4] = sub_1000C70C0;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001C9470;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v0;
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_1000C6F64((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

uint64_t sub_1000B689C(uint64_t a1)
{
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DD1E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ReadOperation cancel()", v5, 2u);
    swift_slowDealloc();
  }

  sub_1000C7320(2, *(void *)(*(void *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 16));
  sub_1000B6AE8();
  uint64_t v6 = sub_100006788((void *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData), *(void *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_managedData + 24));
  __chkstk_darwin(v6, v7);
  sub_100003EB0(&qword_1001DD3F0);
  OS_dispatch_queue.sync<A>(execute:)();
  if (!v11) {
    return sub_10005F4F8((uint64_t)v10, &qword_1001DD3F0);
  }
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    sub_1000C755C(v9);
    return swift_errorRelease();
  }
  return result;
}

id sub_1000B6AE8()
{
  uint64_t v1 = v0;
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DD1E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ReadOperation internalCancel()", v5, 2u);
    swift_slowDealloc();
  }

  unsigned int v6 = [v0 isExecuting];
  uint64_t v7 = Logger.logObject.getter();
  if (v6)
  {
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ReadOperation isExecuting", v9, 2u);
      swift_slowDealloc();
    }

    if (v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] == 1)
    {
      return sub_1000B7038(0);
    }
    else
    {
      return sub_1000B6D48();
    }
  }
  else
  {
    int v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, (os_log_type_t)v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v11, "completeOperation()", v12, 2u);
      swift_slowDealloc();
    }

    [v1 setExecuting:0];
    return [v1 setFinished:1];
  }
}

id sub_1000B6D48()
{
  uint64_t v1 = v0;
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DD1E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ReadOperation closeVAS()", v5, 2u);
    swift_slowDealloc();
  }

  unsigned int v6 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  id v16 = 0;
  if ([v6 stopVASPolling:&v16])
  {
    id v7 = v16;
  }
  else
  {
    id v8 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = (uint8_t *)swift_slowAlloc();
      id v16 = (id)swift_slowAlloc();
      *(_DWORD *)int v11 = 136315138;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t v15 = sub_100005EB8(v12, v13, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "stopVASPolling error: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  id result = [v1 isCancelled:v15];
  if (result) {
    return sub_1000B7038(0);
  }
  return result;
}

id sub_1000B7038(char a1)
{
  uint64_t v2 = v1;
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DD1E0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "ReadOperation closePayment()", v7, 2u);
    swift_slowDealloc();
  }

  if (v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] == 1)
  {
    id v8 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
    id v20 = 0;
    if ([v8 stop:&v20])
    {
      id v9 = v20;
      if ((a1 & 1) == 0) {
        goto LABEL_14;
      }
      return sub_1000B73C8();
    }
    id v10 = v20;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    int v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v11, v12))
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      if (a1) {
        return sub_1000B73C8();
      }
      goto LABEL_14;
    }
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    id v20 = (id)swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    uint64_t v14 = String.init<A>(describing:)();
    sub_100005EB8(v14, v15, (uint64_t *)&v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stop Reader Mode Error from NFSecureElementReaderSession stop(): %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  if (a1) {
    return sub_1000B73C8();
  }
LABEL_14:
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "completeOperation()", v19, 2u);
    swift_slowDealloc();
  }

  [v2 setExecuting:0];
  return [v2 setFinished:1];
}

id sub_1000B73C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v7);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v21 = sub_100003E78(v10, (uint64_t)qword_1001DD1E0);
  int v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "clearTransactionAndCompleteOperation()", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  aBlock[4] = sub_1000C7060;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001C93A8;
  unint64_t v15 = _Block_copy(aBlock);
  id v16 = v1;
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_1000C6F64((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v22);
  swift_release();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "completeOperation()", v19, 2u);
    swift_slowDealloc();
  }

  [v16 setExecuting:0];
  return [v16 setFinished:1];
}

uint64_t sub_1000B77E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v49 = *(void *)(v2 - 8);
  uint64_t v50 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v52 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v45 - v16;
  if (qword_1001D9190 != -1) {
    swift_once();
  }
  uint64_t v48 = v5;
  uint64_t v18 = type metadata accessor for OSSignposter();
  uint64_t v19 = sub_100003E78(v18, (uint64_t)qword_1001DD1F8);
  static OSSignpostID.exclusive.getter();
  uint64_t v51 = v19;
  id v20 = OSSignposter.logHandle.getter();
  os_signpost_type_t v21 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v22(v14, v17, v6);
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = a1;
    uint64_t v24 = v7;
    uint64_t v25 = v6;
    uint64_t v26 = v23;
    *(_WORD *)uint64_t v23 = 0;
    os_signpost_id_t v27 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v21, v27, "reader-clear_transaction_for_payment", "begin clear transaction for payment", v26, 2u);
    uint64_t v6 = v25;
    uint64_t v7 = v24;
    a1 = v47;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  else
  {

    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  }
  v22(v14, v17, v6);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  unint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v28 = v7 + 8;
  unint64_t v30 = v17;
  uint64_t v31 = v29;
  v29(v30, v6);
  id v32 = *(id *)(a1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
  sub_1000B2B18();

  uint64_t v33 = OSSignposter.logHandle.getter();
  uint64_t v34 = v52;
  OSSignpostIntervalState.signpostID.getter();
  LODWORD(v51) = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    unint64_t v45 = v31;
    unint64_t v46 = v22;
    uint64_t v47 = v28;
    swift_retain();
    uint64_t v35 = v48;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v37 = v49;
    uint64_t v36 = v50;
    if ((*(unsigned int (**)(char *, uint64_t))(v49 + 88))(v35, v50) == enum case for OSSignpostError.doubleEnd(_:))
    {
      int v38 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
      int v38 = "end clear transaction for payment";
    }
    v46(v14, v34, v6);
    uint64_t v40 = v34;
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    os_signpost_id_t v42 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, (os_signpost_type_t)v51, v42, "reader-clear_transaction_for_payment", v38, v41, 2u);
    swift_slowDealloc();

    id v43 = v40;
    unsigned __int16 v44 = v45;
    v45(v43, v6);
    swift_release();
    return v44(v14, v6);
  }
  else
  {

    v31(v34, v6);
    return swift_release();
  }
}

id sub_1000B7C94()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v117 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11, v12);
  uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  [v13 setDelegate:v1];
  [v13 setSessionDelegate:v1];
  if (([v1 isCancelled] & 1) == 0)
  {
    uint64_t v124 = v2;
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v121 = v7;
    int v122 = v10;
    uint64_t v123 = v3;
    id v118 = v13;
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v119 = sub_100003E78(v22, (uint64_t)qword_1001DD1E0);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "ReadOperation start()", v25, 2u);
      swift_slowDealloc();
    }

    uint64_t v26 = sub_10002A544(4998, 0, 0, 0);
    os_signpost_id_t v27 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
    uint64_t v117 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
    *(void *)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v26;

    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v28;
    unint64_t v30 = *(uint64_t **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig];
    uint64_t v120 = v30;
    uint64_t v31 = 15;
    if (!v30[2]) {
      uint64_t v31 = 14;
    }
    *(double *)(v28 + 16) = (double)v30[v31];
    uint64_t v32 = OBJC_IVAR____TtC9SPREngine13ReadOperation_timeoutWorkItem;
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    uint64_t v33 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v33;
    *(void *)(v34 + 24) = v29;
    aBlock[4] = sub_1000C70B8;
    aBlock[5] = v34;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    id aBlock[3] = &unk_1001C9420;
    _Block_copy(aBlock);
    size_t v127 = _swiftEmptyArrayStorage;
    sub_1000C6F64((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    unint64_t v125 = v1;
    swift_retain();
    swift_retain();
    sub_100003EB0((uint64_t *)&unk_1001DA510);
    sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
    uint64_t v35 = v125;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v36 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(void *)&v35[v32] = v36;
    swift_release();
    uint64_t v37 = v121;
    static DispatchTime.now()();
    swift_beginAccess();
    int v38 = v122;
    + infix(_:_:)();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v123 + 8);
    uint64_t v40 = v37;
    uint64_t v41 = v124;
    v39(v40, v124);
    swift_retain();
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    v39(v38, v41);
    os_signpost_id_t v42 = v120;
    if (!v120[2])
    {
      sub_1000B919C(0);
      return (id)swift_release();
    }
    uint64_t v124 = v29;
    if ([v35 isCancelled])
    {
      id v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        unint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "ReadOperation cancelled before startVASPolling", v45, 2u);
        swift_slowDealloc();
      }

      unint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "completeOperation()", v48, 2u);
        swift_slowDealloc();
      }

      [v35 setExecuting:0];
      [v35 setFinished:1];
      return (id)swift_release();
    }
    uint64_t v49 = sub_1000C6A90();
    unint64_t v51 = v50;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    size_t v127 = 0;
    unsigned int v53 = [v118 startVASPolling:isa error:&v127];

    if (v53)
    {
      uint64_t v54 = v127;
      [v35 setExecuting:1];
      uint64_t v55 = *(void *)&v35[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24];
      uint64_t v56 = *(void *)&v35[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32];
      sub_100006788(&v35[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor], v55);
      if (qword_1001D91E0 != -1) {
        swift_once();
      }
      uint64_t v57 = byte_1001E0FB8;
      sub_100003EB0(&qword_1001D8A20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100186100;
      strcpy((char *)(inited + 32), "transactionId");
      *(_WORD *)(inited + 46) = -4864;
      uint64_t v59 = v42[17];
      *(void *)(inited + 48) = v42[16];
      *(void *)(inited + 56) = v59;
      swift_bridgeObjectRetain();
      unint64_t v60 = sub_100004C48(inited);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v56 + 8))(11, v57, v60, v55, v56);
      swift_bridgeObjectRelease();
      if ([v35 isCancelled])
      {
        uint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v61, v62))
        {
          id v63 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v63 = 0;
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "ReadOperation cancelled after startVASPolling before onUpdate ready", v63, 2u);
          swift_slowDealloc();
        }

        sub_1000B6AE8();
        uint64_t v64 = v49;
      }
      else
      {
        sub_1000C7320(0, v42[2]);
        BOOL v73 = v35;
        Swift::String v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        BOOL v76 = os_log_type_enabled(v74, v75);
        uint64_t v123 = v49;
        if (v76)
        {
          unint64_t v77 = (uint8_t *)swift_slowAlloc();
          size_t v127 = (void *)swift_slowAlloc();
          *(_DWORD *)unint64_t v77 = 136315138;
          uint64_t v78 = SPRReaderMode.description.getter();
          id v126 = (id)sub_100005EB8(v78, v79, (uint64_t *)&v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "VAS-type polling started --- --- --->  Tap a %s card", v77, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        if (qword_1001D9190 != -1) {
          swift_once();
        }
        uint64_t v106 = type metadata accessor for OSSignposter();
        sub_100003E78(v106, (uint64_t)qword_1001DD1F8);
        uint64_t v107 = sub_1000452F0("reader-vas_polling", 18, 2, 0xD000000000000011, 0x8000000100198E60, (unint64_t)"reader-preprocessing", 20, 2, 0xD000000000000011, 0x8000000100198DF0);
        LOBYTE(v127) = 1;
        __chkstk_darwin(v107, v108);
        uint64_t v110 = (uint64_t)&v109[4];
        long long v111 = v109 + 8;
        os_unfair_lock_lock(v109 + 8);
        sub_100057DB4(v110);
        os_unfair_lock_unlock(v111);
        if ([v73 isCancelled])
        {
          unint64_t v112 = Logger.logObject.getter();
          os_log_type_t v113 = static os_log_type_t.default.getter();
          BOOL v114 = os_log_type_enabled(v112, v113);
          uint64_t v115 = v123;
          if (v114)
          {
            os_log_type_t v116 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v116 = 0;
            _os_log_impl((void *)&_mh_execute_header, v112, v113, "ReadOperation cancelled at end of start()", v116, 2u);
            swift_slowDealloc();
          }

          sub_1000B6AE8();
          uint64_t v64 = v115;
        }
        else
        {
          uint64_t v64 = v123;
        }
      }
      unint64_t v105 = v51;
LABEL_63:
      sub_100006628(v64, v105);
      return (id)swift_release();
    }
    uint64_t v123 = v49;
    int v122 = (char *)v51;
    uint64_t v65 = v127;
    uint64_t v66 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    size_t v127 = v66;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    sub_100006680(0, (unint64_t *)&qword_1001DA530);
    if (!swift_dynamicCast())
    {
LABEL_48:
      swift_errorRelease();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v93, v94))
      {
        unint64_t v95 = (uint8_t *)swift_slowAlloc();
        size_t v127 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v95 = 136315138;
        id v126 = v66;
        swift_errorRetain();
        uint64_t v96 = String.init<A>(describing:)();
        id v126 = (id)sub_100005EB8(v96, v97, (uint64_t *)&v127);
        uint64_t v35 = v125;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Error from startVASPolling: %s", v95, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      unint64_t v98 = (unint64_t)v122;
      uint64_t v99 = v117;
      uint64_t v100 = sub_10002A544(4015, 0, 0, 0);
      id v101 = *(void **)&v35[v99];
      *(void *)&v35[v99] = v100;

      os_log_type_t v102 = Logger.logObject.getter();
      os_log_type_t v103 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v102, v103))
      {
        uint64_t v104 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v104 = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "completeOperation()", v104, 2u);
        swift_slowDealloc();
      }

      [v35 setExecuting:0];
      [v35 setFinished:1];
      swift_errorRelease();
      uint64_t v64 = v123;
      unint64_t v105 = v98;
      goto LABEL_63;
    }
    id v67 = v126;
    id v68 = [v126 domain];
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v70;

    if (v69 == String.init(cString:)() && v71 == v72)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0)
      {
LABEL_47:

        goto LABEL_48;
      }
    }
    unint64_t v81 = (unint64_t)[v67 code];
    if ((v81 & 0x8000000000000000) != 0 || HIDWORD(v81))
    {
      id result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v81 == 47)
    {
      swift_errorRelease();
      unint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Reader temporarily unavailable when trying to start VAS-type polling", v84, 2u);
        swift_slowDealloc();
      }

      uint64_t v85 = sub_10002A544(4036, 0, 0, 0);
      uint64_t v86 = *(void **)&v35[v117];
      *(void *)&v35[v117] = v85;

      sub_100006788((void *)(*(void *)&v35[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 16), *(void *)(*(void *)&v35[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 40));
      sub_100042F68((uint64_t)&off_1001C5798);
      id v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.info.getter();
      BOOL v89 = os_log_type_enabled(v87, v88);
      unint64_t v90 = (unint64_t)v122;
      uint64_t v91 = v123;
      if (v89)
      {
        os_log_type_t v92 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "completeOperation()", v92, 2u);
        swift_slowDealloc();
      }

      [v35 setExecuting:0];
      [v35 setFinished:1];
      sub_100006628(v91, v90);

      swift_errorRelease();
      return (id)swift_release();
    }
    goto LABEL_47;
  }
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100003E78(v14, (uint64_t)qword_1001DD1E0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "ReadOperation cancelled before start", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "completeOperation()", v20, 2u);
    swift_slowDealloc();
  }

  [v1 setExecuting:0];

  return [v1 setFinished:1];
}

void sub_1000B8F28()
{
  swift_beginAccess();
  Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (([Strong isCancelled] & 1) == 0
      && ([v1 isFinished] & 1) == 0
      && [v1 isExecuting])
    {
      if (qword_1001D9188 != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      sub_100003E78(v2, (uint64_t)qword_1001DD1E0);
      swift_retain();
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 134217984;
        swift_beginAccess();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Polling TIMED OUT after %f elapsed", v5, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      uint64_t v6 = sub_10002A544(4005, 0, 0, 0);
      uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
      *(void *)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v6;

      uint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics];
      if (*(uint64_t *)&v1[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount] < 1) {
        *(unsigned char *)(v8 + 126) = 1;
      }
      else {
        *(unsigned char *)(v8 + 125) = 1;
      }
      [v1 cancel];
    }
  }
}

id sub_1000B919C(char a1)
{
  uint64_t v4 = OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount;
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = v2;
    char v3 = a1;
    *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount] = v7;
    if (qword_1001D9188 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DD1E0);
  uint64_t v9 = v1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134217984;
    uint64_t v113 = *(void *)&v1[v4];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "startPayment() paymentStartedCount= %ld", v12, 0xCu);
    swift_slowDealloc();
  }
  else
  {
  }
  if ([v9 isCancelled])
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ReadOperation cancelled before startPayment", v15, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "completeOperation()", v18, 2u);
      swift_slowDealloc();
    }

    [v9 setExecuting:0];
    return [v9 setFinished:1];
  }
  uint64_t v20 = *(void *)&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig];
  int v21 = *(_DWORD *)(v20 + 32);
  __int16 v22 = *(_WORD *)(v20 + 36);
  __int16 v23 = *(_WORD *)(v20 + 40);
  __int16 v24 = *(_WORD *)(v20 + 44);
  __int16 v25 = *(_WORD *)(v20 + 48);
  LOWORD(v109) = *(_WORD *)(v20 + 42);
  unint64_t v110 = *(unsigned __int16 *)(v20 + 46);
  if (v3)
  {
    uint64_t v26 = &v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult];
    __int16 v27 = *(_WORD *)(v20 + 50);
    __int16 v28 = *(_WORD *)(v20 + 38);
    swift_beginAccess();
    *(void *)uint64_t v26 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v120 = &type metadata for Bool;
    LOBYTE(v113) = 1;
    swift_beginAccess();
    sub_1001058E0((uint64_t)&v113, 0x626C6C6146726F66, 0xEB000000006B6361);
    type metadata accessor for Decimal(0);
    uint64_t v120 = v29;
    LODWORD(v113) = v21;
    WORD2(v113) = v22;
    HIWORD(v113) = v28;
    __int16 v114 = v23;
    __int16 v115 = v109;
    __int16 v116 = v24;
    __int16 v117 = v110;
    __int16 v118 = v25;
    __int16 v119 = v27;
    sub_1001058E0((uint64_t)&v113, 0x6B6361626C6C6166, 0xEE00746E756F6D41);
    swift_endAccess();
    NSDecimal.init(integerLiteral:)(v30, 0);
    unsigned __int8 v107 = 0;
    unint64_t v104 = HIDWORD(v31);
    unint64_t v105 = HIDWORD(v32);
    *(unsigned char *)(*(void *)&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 128) = 1;
    unsigned __int16 v106 = v33;
    unsigned int v103 = HIWORD(v33);
    unint64_t v100 = HIWORD(v31);
    unsigned __int16 v101 = v32;
    unsigned int v102 = v31;
    unint64_t v109 = v32 >> 16;
    unint64_t v110 = HIWORD(v32);
  }
  else
  {
    unsigned __int8 v107 = 1;
    unsigned __int16 v106 = *(_WORD *)(v20 + 48);
    LOWORD(v104) = *(_WORD *)(v20 + 36);
    LOWORD(v105) = *(_WORD *)(v20 + 44);
    unsigned __int16 v101 = *(_WORD *)(v20 + 40);
    unsigned int v102 = *(_DWORD *)(v20 + 32);
    LOWORD(v103) = *(_WORD *)(v20 + 50);
    unint64_t v100 = *(unsigned __int16 *)(v20 + 38);
  }
  uint64_t v34 = *(void **)&v9[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  uint64_t v35 = *(void *)(v20 + 56);
  unint64_t v36 = *(void *)(v20 + 64);
  uint64_t v38 = *(void *)(v20 + 80);
  unint64_t v37 = *(void *)(v20 + 88);
  uint64_t v39 = v9;
  uint64_t v40 = *(void *)(v20 + 96);
  uint64_t v41 = *(uint8_t **)(v20 + 104);
  uint64_t v43 = *(void *)(v20 + 152);
  unint64_t v42 = *(void *)(v20 + 160);
  uint64_t v44 = *(void *)(v20 + 144);
  uint64_t v108 = v39;
  unint64_t v97 = &v39[OBJC_IVAR____TtC9SPREngine13ReadOperation_secureTimeKeeper];
  int v99 = *(unsigned __int8 *)(v20 + 72);
  id v98 = v34;
  sub_1000065D0(v35, v36);
  sub_1000065D0(v38, v37);
  sub_1000065D0(v40, (unint64_t)v41);
  sub_1000065D0(v43, v42);
  swift_bridgeObjectRetain();
  sub_1000AFAFC(v102 | ((unint64_t)(unsigned __int16)v104 << 32) | (v100 << 48), v101 | ((unint64_t)(unsigned __int16)v109 << 16) | ((unint64_t)(unsigned __int16)v105 << 32) | (v110 << 48), v106 | ((unsigned __int16)v103 << 16), v35, v36, v99, v38, v37, &v113, v40, v41, v43, v42, v44, 1, v107, v97);
  swift_bridgeObjectRelease();
  sub_100006628(v43, v42);
  sub_100006628(v40, (unint64_t)v41);
  sub_100006628(v38, v37);
  sub_100006628(v35, v36);

  uint64_t v45 = *(void *)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics];
  sub_1000C6A48(&v113);
  *(_WORD *)(v45 + 172) = v118;
  if ([v108 isCancelled])
  {
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "ReadOperation cancelled after Start CAPDU before start polling", v48, 2u);
      swift_slowDealloc();
    }

    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      unint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "completeOperation()", v51, 2u);
      swift_slowDealloc();
    }

    [v108 setExecuting:0];
    return [v108 setFinished:1];
  }
  *(_WORD *)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus] = 256;
  v112[0] = 0;
  if (![v98 start:v112])
  {
    id v58 = v112[0];
    uint64_t v59 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v112[0] = v59;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    sub_100006680(0, (unint64_t *)&qword_1001DA530);
    if (!swift_dynamicCast())
    {
LABEL_57:
      swift_errorRelease();
      swift_errorRetain();
      swift_errorRetain();
      id v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        BOOL v89 = (uint8_t *)swift_slowAlloc();
        v112[0] = (id)swift_slowAlloc();
        *(_DWORD *)BOOL v89 = 136315138;
        swift_errorRetain();
        uint64_t v90 = String.init<A>(describing:)();
        sub_100005EB8(v90, v91, (uint64_t *)v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Error from NFSecureElementReaderSession.start(): %s", v89, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v92 = sub_10002A544(4015, 0, 0, 0);
      uint64_t v93 = *(void **)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
      *(void *)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v92;

      os_log_type_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v96 = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "completeOperation()", v96, 2u);
        swift_slowDealloc();
      }

      [v108 setExecuting:0];
      [v108 setFinished:1];
      return (id)swift_errorRelease();
    }
    id v60 = [v111 domain];
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v62;

    if (v61 == String.init(cString:)() && v56 == v63)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v77 & 1) == 0)
      {
LABEL_56:

        goto LABEL_57;
      }
    }
    unint64_t v78 = (unint64_t)[v111 code];
    if ((v78 & 0x8000000000000000) != 0 || HIDWORD(v78))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_66;
    }
    if (v78 == 47)
    {
      swift_errorRelease();
      unint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v79, v80))
      {
        unint64_t v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Reader temporarily unavailable when trying to start EMV-type polling", v81, 2u);
        swift_slowDealloc();
      }

      uint64_t v82 = sub_10002A544(4036, 0, 0, 0);
      os_log_type_t v83 = *(void **)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
      *(void *)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v82;

      sub_100006788((void *)(v45 + 16), *(void *)(v45 + 40));
      sub_100042F68((uint64_t)&off_1001C5748);
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v86 = 0;
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "completeOperation()", v86, 2u);
        swift_slowDealloc();
      }

      [v108 setExecuting:0];
      [v108 setFinished:1];

      return (id)swift_errorRelease();
    }
    goto LABEL_56;
  }
  id v52 = v112[0];
  [v108 setExecuting:1];
  v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted] = 1;
  unsigned int v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Called start ETSI SE reader mode (for EMV-type polling) for payment.", v55, 2u);
    swift_slowDealloc();
  }

  uint64_t v56 = *(char **)(v20 + 16);
  if ((unint64_t)(v56 - 2) < 2)
  {
    if (qword_1001D9190 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for OSSignposter();
    sub_100003E78(v57, (uint64_t)qword_1001DD1F8);
    sub_100044AEC("reader-vas_ese_reader_mode_switch", 33, 2, (uint64_t)v98, 0xD000000000000020, 0x8000000100198DA0);
    goto LABEL_43;
  }
  if (v56 != (char *)1)
  {
    if (!v56)
    {
      uint64_t v64 = *(void *)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24];
      uint64_t v65 = *(void *)&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32];
      sub_100006788(&v108[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor], v64);
      if (qword_1001D91E0 != -1) {
        swift_once();
      }
      uint64_t v66 = byte_1001E0FB8;
      sub_100003EB0(&qword_1001D8A20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100186100;
      strcpy((char *)(inited + 32), "transactionId");
      *(_WORD *)(inited + 46) = -4864;
      uint64_t v68 = *(void *)(v20 + 136);
      *(void *)(inited + 48) = *(void *)(v20 + 128);
      *(void *)(inited + 56) = v68;
      swift_bridgeObjectRetain();
      unint64_t v69 = sub_100004C48(inited);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v65 + 8))(11, v66, v69, v64, v65);
      swift_bridgeObjectRelease();
      sub_1000C7320(0, 0);
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "EMV-type polling started --- --- --->  Tap a payment card", v72, 2u);
        swift_slowDealloc();
      }

      if (qword_1001D9190 != -1) {
        swift_once();
      }
      uint64_t v73 = type metadata accessor for OSSignposter();
      sub_100003E78(v73, (uint64_t)qword_1001DD1F8);
      sub_100044E30("reader-preprocessing", 20, 2, (uint64_t)v98, 0xD000000000000011, 0x8000000100198DF0);
      goto LABEL_43;
    }
LABEL_66:
    type metadata accessor for SPRReaderMode(0);
    v112[0] = v56;
    id result = (id)_diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return result;
  }
LABEL_43:
  id result = [v108 isCancelled];
  if (result)
  {
    Swift::String v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      BOOL v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "ReadOperation is cancelled after startPayment()", v76, 2u);
      swift_slowDealloc();
    }

    return sub_1000B7038(0);
  }
  return result;
}

uint64_t sub_1000BA434()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  BOOL v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  os_log_type_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001DD1E0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "handleSessionReachedTimeLimit()", v15, 2u);
    swift_slowDealloc();
  }

  static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v1;
  aBlock[4] = sub_1000C703C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001C9358;
  os_log_type_t v17 = _Block_copy(aBlock);
  id v18 = v1;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release();
}

uint64_t sub_1000BA758(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  if (static NSObject.== infix(_:_:)())
  {
    if (qword_1001D9188 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  sub_100003E78(v15, (uint64_t)qword_1001DD1E0);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = v10;
    uint64_t v19 = v5;
    uint64_t v20 = v18;
    *(_DWORD *)id v18 = 67109120;
    LODWORD(aBlock[0]) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "didReceiveThermalIndication %{BOOL}d", v20, 8u);
    uint64_t v5 = v19;
    uint64_t v10 = v26;
    swift_slowDealloc();
  }

  static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v3;
  *(unsigned char *)(v21 + 24) = a2 & 1;
  aBlock[4] = sub_1000C7010;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001C9308;
  __int16 v22 = _Block_copy(aBlock);
  id v23 = v3;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

void sub_1000BAB2C(char a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003E78(v3, (uint64_t)qword_1001DD1E0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "reader will stop", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = sub_10002A544(4036, 0, 0, 0);
    uint64_t v8 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
    *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v7;

    sub_100006788((void *)(*(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 16), *(void *)(*(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 40));
    sub_100042F68((uint64_t)&off_1001C57C0);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "completeOperation()", v11, 2u);
      swift_slowDealloc();
    }

    [v2 setExecuting:0];
    [v2 setFinished:1];
  }
  else
  {
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001DD1E0);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "reader can be enabled", v15, 2u);
      swift_slowDealloc();
    }

    sub_100006788((void *)(*(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 16), *(void *)(*(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics] + 40));
    sub_100042F68((uint64_t)&off_1001C57E8);
  }
}

uint64_t sub_1000BADF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  if (static NSObject.== infix(_:_:)())
  {
    if (qword_1001D9188 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001DD1E0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "secureElementReaderSessionDidEndUnexpectedly()", v15, 2u);
    swift_slowDealloc();
  }

  static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v1;
  aBlock[4] = sub_1000C71D4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001C92B8;
  os_log_type_t v17 = _Block_copy(aBlock);
  id v18 = v1;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release();
}

id sub_1000BB174()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002A544(4024, 0, 0, 0);
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
  *(void *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v2;

  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24];
  uint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32];
  sub_100006788(&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor], v4);
  if (qword_1001D91E0 != -1) {
    swift_once();
  }
  uint64_t v6 = byte_1001E0FB8;
  sub_100003EB0(&qword_1001D8A20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  strcpy((char *)(inited + 32), "transactionId");
  *(_WORD *)(inited + 46) = -4864;
  uint64_t v8 = *(uint64_t **)&v0[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig];
  uint64_t v9 = v8[17];
  *(void *)(inited + 48) = v8[16];
  *(void *)(inited + 56) = v9;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_100004C48(inited);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 8))(13, v6, v10, v4, v5);
  swift_bridgeObjectRelease();
  sub_1000C7320(3, v8[2]);
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003E78(v11, (uint64_t)qword_1001DD1E0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "completeOperation()", v14, 2u);
    swift_slowDealloc();
  }

  [v1 setExecuting:0];
  return [v1 setFinished:1];
}

uint64_t sub_1000BB3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  if (static NSObject.== infix(_:_:)())
  {
    if (qword_1001D9188 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  sub_100003E78(v15, (uint64_t)qword_1001DD1E0);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    __int16 v24 = v9;
    *(_WORD *)id v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ReadOperation didDetect (NFTag)", v18, 2u);
    uint64_t v9 = v24;
    swift_slowDealloc();
  }

  static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v3;
  *(void *)(v19 + 24) = a2;
  aBlock[4] = sub_1000C6FB0;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001C9268;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v3;
  swift_bridgeObjectRetain();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

void sub_1000BB7B0(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v169 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v169 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v180 = (uint64_t)&v169 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  os_log_t v181 = (os_log_t)((char *)&v169 - v20);
  if ([v2 isCancelled])
  {
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100003E78(v21, (uint64_t)qword_1001DD1E0);
    os_log_t v181 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v181, v22)) {
      goto LABEL_12;
    }
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    __int16 v24 = "ReadOperation isCancelled ignore didDetect";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v181, v22, v24, v23, 2u);
    swift_slowDealloc();
LABEL_12:
    os_log_t v26 = v181;

    return;
  }
  if (v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerModeForPaymentStarted])
  {
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100003E78(v25, (uint64_t)qword_1001DD1E0);
    os_log_t v181 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v181, v22)) {
      goto LABEL_12;
    }
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    __int16 v24 = "readerModeForPaymentStarted ignore didDetect";
    goto LABEL_11;
  }
  uint64_t v179 = *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig];
  if (!*(void *)(v179 + 16)) {
    goto LABEL_42;
  }
  id v173 = v8;
  uint64_t v174 = v10;
  uint64_t v175 = v9;
  uint64_t v176 = v5;
  uint64_t v177 = v4;
  sub_1000C7320(1, 1);
  uint64_t v27 = *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 24];
  uint64_t v28 = *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor + 32];
  sub_100006788(&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor], v27);
  if (qword_1001D91E0 != -1) {
    swift_once();
  }
  uint64_t v171 = v13;
  uint64_t v178 = v15;
  uint64_t v172 = v14;
  uint64_t v29 = byte_1001E0FB8;
  sub_100003EB0(&qword_1001D8A20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  strcpy((char *)(inited + 32), "transactionId");
  *(_WORD *)(inited + 46) = -4864;
  uint64_t v31 = *(void *)(v179 + 136);
  *(void *)(inited + 48) = *(void *)(v179 + 128);
  *(void *)(inited + 56) = v31;
  swift_bridgeObjectRetain();
  unint64_t v32 = sub_100004C48(inited);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v28 + 8))(12, v29, v32, v27, v28);
  uint64_t v33 = swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics];
  uint64_t v35 = *(void *)(v34 + 56);
  unint64_t v36 = (os_unfair_lock_s *)(v35 + 32);
  unint64_t v37 = (uint64_t *)(v35 + 16);
  LOBYTE(aBlock) = 1;
  __chkstk_darwin(v33, v38);
  os_unfair_lock_lock(v36);
  sub_100057D9C(v37);
  os_unfair_lock_unlock(v36);
  uint64_t v41 = 1;
  unint64_t v42 = *(os_unfair_lock_s **)(v34 + 56);
  uint64_t v43 = v42 + 8;
  uint64_t v44 = (uint64_t)&v42[4];
  uint64_t v45 = &byte_1001C5830;
  do
  {
    char v46 = *v45++;
    LOBYTE(aBlock) = v46;
    __chkstk_darwin(v39, v40);
    os_unfair_lock_lock(v43);
    sub_100057DB4(v44);
    os_unfair_lock_unlock(v43);
    --v41;
  }
  while (v41);
  if (qword_1001D9190 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for OSSignposter();
  sub_100003E78(v47, (uint64_t)qword_1001DD1F8);
  sub_1000452F0("reader-vas_read", 15, 2, 0x6176206E69676562, 0xEE00646165722073, (unint64_t)"reader-vas_polling", 18, 2, 0x2073617620646E65uLL, 0xEF676E696C6C6F70);
  uint64_t v48 = v178;
  uint64_t v49 = *(void *)(v179 + 16);
  if ((unint64_t)(v49 - 2) < 2)
  {
    sub_1000BD420(a1);
    if (qword_1001D9190 != -1) {
      swift_once();
    }
    uint64_t v50 = sub_100003E78(v47, (uint64_t)qword_1001DD1F8);
    uint64_t v51 = *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
    sub_100044E30("reader-vas_read", 15, 2, v51, 0x2073617620646E65, 0xEC00000064616572);
    if ([v2 isCancelled])
    {
      if (qword_1001D9188 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_100003E78(v52, (uint64_t)qword_1001DD1E0);
      unsigned int v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
LABEL_36:
      os_log_type_t v56 = v54;
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v56, "ReadOperation isCancelled return from didDetect", v57, 2u);
        swift_slowDealloc();
      }

      return;
    }
    sub_1000B6D48();
    uint64_t v58 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
    uint64_t v59 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
    _s3__C4CodeOMa_5(0);
    uint64_t v61 = v60;
    uint64_t aBlock = 4020;
    uint64_t v62 = sub_1000C6F64(&qword_1001D9990, _s3__C4CodeOMa_5);
    id v63 = v59;
    LOBYTE(v59) = static _ErrorCodeProtocol.~= infix(_:_:)();

    if (v59)
    {

LABEL_50:
      if (qword_1001D9188 != -1) {
        swift_once();
      }
      uint64_t v78 = type metadata accessor for Logger();
      sub_100003E78(v78, (uint64_t)qword_1001DD1E0);
      unint64_t v79 = v2;
      os_log_type_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.default.getter();
      int v82 = v81;
      if (os_log_type_enabled(v80, v81))
      {
        LODWORD(v179) = v82;
        os_log_type_t v83 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v83 = 136315138;
        uint64_t v182 = *(void **)&v2[v58];
        uint64_t aBlock = v84;
        type metadata accessor for ReadError(0);
        sub_1000C6F64(&qword_1001DD420, type metadata accessor for ReadError);
        uint64_t v85 = Error.localizedDescription.getter();
        uint64_t v182 = (void *)sub_100005EB8(v85, v86, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v179, "Restart for %s", v83, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v87 = v172;
      uint64_t v172 = *(void *)&v79[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue];
      uint64_t v88 = v180;
      static DispatchTime.now()();
      os_log_t v89 = v181;
      + infix(_:_:)();
      uint64_t v179 = *(void *)(v48 + 8);
      ((void (*)(uint64_t, uint64_t))v179)(v88, v87);
      uint64_t v90 = swift_allocObject();
      swift_unknownObjectWeakInit();
      int v187 = sub_1000C6F48;
      uint64_t v188 = v90;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v184 = 1107296256;
      __int16 v185 = sub_1000048D8;
      os_log_type_t v186 = &unk_1001C91F0;
      unint64_t v91 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v92 = v171;
      static DispatchQoS.unspecified.getter();
      uint64_t v182 = _swiftEmptyArrayStorage;
      sub_1000C6F64((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100003EB0((uint64_t *)&unk_1001DA510);
      sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
      uint64_t v93 = v87;
      os_log_type_t v94 = v173;
      uint64_t v95 = v177;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v91);
      (*(void (**)(char *, uint64_t))(v176 + 8))(v94, v95);
      (*(void (**)(char *, uint64_t))(v174 + 8))(v92, v175);
      os_log_t v96 = v89;
LABEL_67:
      ((void (*)(os_log_t, uint64_t))v179)(v96, v93);
      swift_release();
      swift_release();
      return;
    }
    uint64_t aBlock = 4042;
    id v74 = v63;
    uint64_t v170 = v62;
    char v75 = static _ErrorCodeProtocol.~= infix(_:_:)();

    if (v75) {
      goto LABEL_50;
    }
    uint64_t v176 = v61;
    uint64_t v180 = v51;
    uint64_t v177 = v58;
    uint64_t v178 = v50;
    uint64_t v108 = *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics];
    uint64_t v109 = *(void *)(v108 + 56);
    unint64_t v110 = (os_unfair_lock_s *)(v109 + 32);
    id v111 = (uint64_t *)(v109 + 16);
    LOBYTE(aBlock) = 6;
    __chkstk_darwin(v76, v77);
    os_unfair_lock_lock(v110);
    sub_100057D9C(v111);
    os_unfair_lock_unlock(v110);
    uint64_t v114 = 1;
    __int16 v115 = *(os_unfair_lock_s **)(v108 + 56);
    __int16 v116 = v115 + 8;
    uint64_t v117 = (uint64_t)&v115[4];
    __int16 v118 = &byte_1001C5880;
    do
    {
      char v119 = *v118++;
      LOBYTE(aBlock) = v119;
      __chkstk_darwin(v112, v113);
      os_unfair_lock_lock(v116);
      sub_100057DB4(v117);
      os_unfair_lock_unlock(v116);
      --v114;
    }
    while (v114);
    os_log_t v181 = (os_log_t)OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
    if (v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound]) {
      int v120 = 1;
    }
    else {
      int v120 = v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK];
    }
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v132 = type metadata accessor for Logger();
    uint64_t v133 = sub_100003E78(v132, (uint64_t)qword_1001DD1E0);
    unint64_t v134 = v2;
    uint64_t v175 = v133;
    uint64_t v135 = Logger.logObject.getter();
    os_log_type_t v136 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v135, v136))
    {
      uint64_t v137 = swift_slowAlloc();
      *(_DWORD *)uint64_t v137 = 67109632;
      LODWORD(aBlock) = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v137 + 8) = 1024;
      LODWORD(aBlock) = *((unsigned __int8 *)&v181->isa + (void)v2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v137 + 14) = 1024;
      LODWORD(aBlock) = *((unsigned __int8 *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v135, v136, "vasReadSuccess: %{BOOL}d, vasDataFound: %{BOOL}d, vasURLOK: %{BOOL}d", (uint8_t *)v137, 0x14u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v135 = v134;
    }

    *(unsigned char *)(v108 + 122) = v120;
    if (*((unsigned char *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty) == 1)
    {
      if (*((unsigned char *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming))
      {
        *(Class *)((char *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse) = (Class)_swiftEmptyArrayStorage;
        swift_bridgeObjectRelease();
        sub_1000B919C(0);
        sub_100006788((void *)(v108 + 16), *(void *)(v108 + 40));
        sub_100042F68((uint64_t)&off_1001C58D8);
      }
      else
      {
        [*(id *)((char *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue) cancelAllOperations];
        unint64_t v141 = (void *)sub_10002A544(4027, 0, 0, 0);
        uint64_t v142 = sub_100044E30("reader-total_transaction", 24, 2, v180, 0xD000000000000015, 0x8000000100198D80);
        LOBYTE(aBlock) = 3;
        __chkstk_darwin(v142, v143);
        unint64_t v145 = (uint64_t *)&v144[4];
        uint64_t v146 = v144 + 8;
        os_unfair_lock_lock(v144 + 8);
        sub_100057D9C(v145);
        os_unfair_lock_unlock(v146);
        *(unsigned char *)(v108 + 122) = 0;
        uint64_t aBlock = (uint64_t)v141;
        type metadata accessor for ReadError(0);
        sub_1000C6F64((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
        *(void *)(v108 + 136) = _BridgedStoredNSError.errorCode.getter();
        sub_100006788((void *)(v108 + 16), *(void *)(v108 + 40));
        sub_100042F68((uint64_t)&off_1001C58B0);
        id v147 = v141;
        sub_1000C755C((uint64_t)v147);
      }
      return;
    }
    if (v120)
    {
      sub_100006788((void *)(v108 + 16), *(void *)(v108 + 40));
      sub_100042F68((uint64_t)&off_1001C5928);
      if (*(void *)(v179 + 16) != 2)
      {
        if (*((unsigned char *)&v181->isa + (void)v2) == 1)
        {
LABEL_88:
          uint64_t v138 = Logger.logObject.getter();
          os_log_type_t v139 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v138, v139))
          {
            unint64_t v140 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v140 = 0;
            _os_log_impl((void *)&_mh_execute_header, v138, v139, "completeOperation()", v140, 2u);
            swift_slowDealloc();
          }

          [v134 setExecuting:0];
          [v134 setFinished:1];
          return;
        }
        if (*((unsigned char *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK) != 1) {
          return;
        }
      }
      if ((*((unsigned char *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) == 0) {
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v148 = v177;
      uint64_t aBlock = *(void *)&v2[v177];
      type metadata accessor for ReadError(0);
      sub_1000C6F64((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
      *(void *)(v108 + 136) = _BridgedStoredNSError.errorCode.getter();
      sub_100006788((void *)(v108 + 16), *(void *)(v108 + 40));
      sub_100042F68((uint64_t)&off_1001C5900);
      uint64_t v149 = *(void **)&v2[v148];
      uint64_t aBlock = 4030;
      id v150 = v149;
      char v151 = static _ErrorCodeProtocol.~= infix(_:_:)();

      uint64_t v152 = v180;
      if ((v151 & 1) == 0)
      {
        uint64_t aBlock = 4021;
        id v153 = v150;
        char v154 = static _ErrorCodeProtocol.~= infix(_:_:)();

        if (v154)
        {
          if (*((unsigned char *)&v134->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming)) {
            goto LABEL_96;
          }
          uint64_t v157 = v134;
          uint64_t v161 = Logger.logObject.getter();
          os_log_type_t v162 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v161, v162))
          {
            uint64_t v163 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v163 = 0;
            _os_log_impl((void *)&_mh_execute_header, v161, v162, "vasDataNotFound and no paymentDataForthcoming", v163, 2u);
            swift_slowDealloc();
          }

          LOBYTE(aBlock) = 3;
          __chkstk_darwin(v164, v165);
          uint64_t v167 = (uint64_t *)&v166[4];
          uint64_t v160 = v166 + 8;
          os_unfair_lock_lock(v166 + 8);
          sub_100057D9C(v167);
        }
        else
        {
          uint64_t v157 = v134;
          LOBYTE(aBlock) = 3;
          __chkstk_darwin(v155, v156);
          uint64_t v159 = (uint64_t *)&v158[4];
          uint64_t v160 = v158 + 8;
          os_unfair_lock_lock(v158 + 8);
          sub_100057D9C(v159);
        }
        os_unfair_lock_unlock(v160);
        sub_100044E30("reader-total_transaction", 24, 2, v152, 0xD000000000000015, 0x8000000100198D80);
        [*(id *)((char *)&v157->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_operationQueue) cancelAllOperations];
        id v168 = *(id *)&v2[v148];
        sub_1000C755C((uint64_t)v168);

        return;
      }
    }
LABEL_96:
    sub_1000B919C(0);
    return;
  }
  if (v49 != 1)
  {
    if (v49)
    {
      type metadata accessor for SPRReaderMode(0);
      uint64_t aBlock = v49;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return;
    }
LABEL_42:
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    sub_100003E78(v64, (uint64_t)qword_1001DD1E0);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      id v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "SPRReaderMode is .payment, VAS-type polling for NFTag detection should not be active", v67, 2u);
      swift_slowDealloc();
    }

    uint64_t v68 = sub_10002A544(4017, 0, 0, 0);
    unint64_t v69 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
    *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError] = v68;

    return;
  }
  sub_1000BD420(a1);
  if (qword_1001D9190 != -1) {
    swift_once();
  }
  sub_100003E78(v47, (uint64_t)qword_1001DD1F8);
  sub_100044E30("reader-vas_read", 15, 2, *(void *)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession], 0x2073617620646E65, 0xEC00000064616572);
  if ([v2 isCancelled])
  {
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100003E78(v55, (uint64_t)qword_1001DD1E0);
    unsigned int v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    goto LABEL_36;
  }
  sub_1000B6D48();
  uint64_t v70 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
  os_log_type_t v71 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
  _s3__C4CodeOMa_5(0);
  uint64_t aBlock = 4020;
  sub_1000C6F64(&qword_1001D9990, _s3__C4CodeOMa_5);
  id v72 = v71;
  char v73 = static _ErrorCodeProtocol.~= infix(_:_:)();

  if (v73)
  {

LABEL_57:
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v99 = type metadata accessor for Logger();
    sub_100003E78(v99, (uint64_t)qword_1001DD1E0);
    unint64_t v100 = v2;
    unsigned __int16 v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.default.getter();
    int v103 = v102;
    if (os_log_type_enabled(v101, v102))
    {
      LODWORD(v179) = v103;
      unint64_t v104 = (uint8_t *)swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(_DWORD *)unint64_t v104 = 136315138;
      uint64_t v182 = *(void **)&v2[v70];
      uint64_t aBlock = v105;
      type metadata accessor for ReadError(0);
      sub_1000C6F64(&qword_1001DD420, type metadata accessor for ReadError);
      uint64_t v106 = Error.localizedDescription.getter();
      uint64_t v182 = (void *)sub_100005EB8(v106, v107, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v179, "Restart for %s", v104, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v170 = *(void *)&v100[OBJC_IVAR____TtC9SPREngine13ReadOperation_queue];
    uint64_t v121 = v180;
    static DispatchTime.now()();
    os_log_t v122 = v181;
    + infix(_:_:)();
    uint64_t v179 = *(void *)(v48 + 8);
    uint64_t v93 = v172;
    ((void (*)(uint64_t, uint64_t))v179)(v121, v172);
    uint64_t v123 = swift_allocObject();
    swift_unknownObjectWeakInit();
    int v187 = sub_1000C6F48;
    uint64_t v188 = v123;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v184 = 1107296256;
    __int16 v185 = sub_1000048D8;
    os_log_type_t v186 = &unk_1001C9218;
    uint64_t v124 = _Block_copy(&aBlock);
    swift_retain();
    unint64_t v125 = v171;
    static DispatchQoS.unspecified.getter();
    uint64_t v182 = _swiftEmptyArrayStorage;
    sub_1000C6F64((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100003EB0((uint64_t *)&unk_1001DA510);
    sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
    id v126 = v173;
    uint64_t v127 = v177;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v124);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v126, v127);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v125, v175);
    os_log_t v96 = v122;
    goto LABEL_67;
  }
  uint64_t aBlock = 4042;
  id v97 = v72;
  char v98 = static _ErrorCodeProtocol.~= infix(_:_:)();

  if (v98) {
    goto LABEL_57;
  }
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v128 = type metadata accessor for Logger();
  sub_100003E78(v128, (uint64_t)qword_1001DD1E0);
  unint64_t v129 = Logger.logObject.getter();
  os_log_type_t v130 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v129, v130))
  {
    unint64_t v131 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v131 = 0;
    _os_log_impl((void *)&_mh_execute_header, v129, v130, "completeOperation()", v131, 2u);
    swift_slowDealloc();
  }

  [v2 setExecuting:0];
  [v2 setFinished:1];
}

void sub_1000BD3C4()
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong start];
  }
}

void sub_1000BD420(unint64_t a1)
{
  uint64_t v2 = (uint8_t *)(a1 >> 62);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v3)
  {
    if (qword_1001D9188 == -1)
    {
LABEL_10:
      uint64_t v9 = type metadata accessor for Logger();
      sub_100003E78(v9, (uint64_t)qword_1001DD1E0);
      swift_bridgeObjectRetain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 134217984;
        if (v2)
        {
          swift_bridgeObjectRetain();
          uint64_t v13 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v13 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        id v119 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "tags.count is %ld, not > 0", v12, 0xCu);
        swift_slowDealloc();

        return;
      }

LABEL_89:
      swift_bridgeObjectRelease_n();
      return;
    }
LABEL_84:
    swift_once();
    goto LABEL_10;
  }
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DD1E0);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    if (v2)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v119 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Number of NFTag detected from VAS-type polling: %ld", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000BE7E8(v14);
  swift_bridgeObjectRelease();
  id v119 = v15;
  sub_100003EB0((uint64_t *)&unk_1001DA570);
  sub_100038F5C((unint64_t *)&qword_1001DD3B0, (uint64_t *)&unk_1001DA570);
  uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    id v119 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v2 = v21 + 4;
    swift_bridgeObjectRetain();
    id v117 = (id)sub_100005EB8(v16, v18, (uint64_t *)&v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s... Attempt connect to tag #0 ...", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  os_log_type_t v22 = *(void **)&v113[OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession];
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_23;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_84;
  }
  id v23 = *(id *)(a1 + 32);
LABEL_23:
  __int16 v24 = v23;
  id v119 = 0;
  unsigned int v25 = [v22 connectTag:v23 error:&v119];

  id v26 = v119;
  if (!v25)
  {
    id v35 = v119;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      id v119 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v39 = String.init<A>(describing:)();
      id v117 = (id)sub_100005EB8(v39, v40, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "connect(_ tag: NFTag) Error: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return;
  }
  uint64_t v27 = v113;
  id v28 = v26;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = v22;
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v32 = 134217984;
    unint64_t v33 = (*(void **)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig))[3];
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = (void *)_CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v34 = *(void **)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v119 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Connected to tag #0. Preparing %ld VAS requests.", v32, 0xCu);
    swift_slowDealloc();
    os_log_type_t v22 = v31;
  }
  else
  {

    uint64_t v29 = v27;
  }

  uint64_t v41 = (void *)(*(void **)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig))[2];
  uint64_t v42 = 0;
  switch((unint64_t)v41)
  {
    case 0uLL:
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Payment mode is invalid here", v45, 2u);
        swift_slowDealloc();
      }

      uint64_t v46 = sub_10002A544(4017, 0, 0, 0);
      uint64_t v47 = *(Class *)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
      *(Class *)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v46;

      return;
    case 1uLL:
      uint64_t v42 = 2;
      goto LABEL_40;
    case 2uLL:
      uint64_t v42 = 1;
      goto LABEL_40;
    case 3uLL:
LABEL_40:
      id v48 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:v42];
      unint64_t v49 = swift_bridgeObjectRetain();
      unint64_t v50 = (unint64_t)sub_1000C5EB8(v49, v48);
      swift_bridgeObjectRelease();

      sub_100006680(0, &qword_1001DD3F8);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v119 = 0;
      uint64_t v114 = v22;
      id v52 = [v22 performVAS:isa error:&v119];

      id v53 = v119;
      if (!v52)
      {
        id v65 = v119;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v66 = sub_10002A544(4029, 0, 0, 0);
        id v67 = *(Class *)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        uint64_t v112 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
        *(Class *)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v66;

        swift_errorRetain();
        swift_errorRetain();
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = (uint8_t *)swift_slowAlloc();
          id v119 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315138;
          swift_errorRetain();
          sub_100003EB0((uint64_t *)&unk_1001DD380);
          uint64_t v71 = String.init<A>(describing:)();
          id v117 = (id)sub_100005EB8(v71, v72, (uint64_t *)&v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "performVAS Error: %s", v70, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        char v73 = (void *)_convertErrorToNSError(_:)();
        id v74 = [v73 domain];
        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v77 = v76;

        if (v75 == String.init(cString:)() && v77 == v78)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v79 & 1) == 0) {
            goto LABEL_62;
          }
        }
        if ([v73 code] == (id)29)
        {
          uint64_t v80 = sub_10002A544(4042, 0, 0, 0);
          os_log_type_t v81 = *(Class *)((char *)&v27->isa + v112);
          *(Class *)((char *)&v27->isa + v112) = (Class)v80;

          int v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v84 = 0;
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "readError set: vasTagError", v84, 2u);
            swift_slowDealloc();
          }
        }
        if ([v73 code] == (id)65)
        {
          uint64_t v85 = sub_10002A544(4030, 0, 0, 0);
          unint64_t v86 = *(Class *)((char *)&v27->isa + v112);
          *(Class *)((char *)&v27->isa + v112) = (Class)v85;

          uint64_t v87 = Logger.logObject.getter();
          os_log_type_t v88 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v87, v88))
          {
            os_log_t v89 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_t v89 = 0;
            _os_log_impl((void *)&_mh_execute_header, v87, v88, "readError set: vasSelectOSE", v89, 2u);
            swift_slowDealloc();

            swift_errorRelease();
            goto LABEL_73;
          }
          swift_errorRelease();

LABEL_72:
LABEL_73:
          unint64_t v54 = (unint64_t)_swiftEmptyArrayStorage;
          if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
            goto LABEL_42;
          }
          goto LABEL_74;
        }
LABEL_62:
        swift_errorRelease();
        goto LABEL_72;
      }
      sub_100006680(0, (unint64_t *)&unk_1001DD400);
      unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v55 = v53;

      if (!(v54 >> 62))
      {
LABEL_42:
        id v56 = *(id *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_43;
      }
LABEL_74:
      swift_bridgeObjectRetain();
      id v56 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_43:
      if (!(v50 >> 62))
      {
        id v57 = *(id *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v56 == v57) {
          goto LABEL_45;
        }
        goto LABEL_86;
      }
      swift_bridgeObjectRetain();
      id v57 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v56 != v57)
      {
LABEL_86:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v109, v110))
        {
          uint64_t v111 = swift_slowAlloc();
          *(_DWORD *)uint64_t v111 = 134218240;
          swift_bridgeObjectRelease();
          id v119 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v111 + 12) = 2048;
          swift_bridgeObjectRelease();
          id v119 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "responses.count: %ld, vasRequests.count: %ld, Error: Number of VAS Responses not equal to Requests", (uint8_t *)v111, 0x16u);
          swift_slowDealloc();

          return;
        }

        swift_bridgeObjectRelease_n();
        goto LABEL_89;
      }
LABEL_45:
      swift_bridgeObjectRelease();
      id v119 = 0;
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, " --- VAS Responses ---", v60, 2u);
        swift_slowDealloc();
      }

      __chkstk_darwin(v61, v62);
      unint64_t v63 = swift_bridgeObjectRetain();
      uint64_t v64 = (objc_class *)sub_1000C6C28(v63, (void (*)(unint64_t, id))sub_1000C6F00);
      swift_bridgeObjectRelease();
      if (*((unsigned char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound) == 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        int v106 = *((unsigned __int8 *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
        swift_bridgeObjectRelease();
        if (v106 != 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v90 = v114;
          if (v119 == v56)
          {
            uint64_t v107 = sub_10002A544(4021, 0, 0, 0);
            uint64_t v108 = *(Class *)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
            *(Class *)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v107;
          }
          goto LABEL_63;
        }
      }
      *(Class *)((char *)&v27->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse) = v64;
      swift_bridgeObjectRelease();
      uint64_t v90 = v114;
LABEL_63:
      unint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "disconnectTag()", v93, 2u);
        swift_slowDealloc();
      }

      id v117 = 0;
      if ([v90 disconnectTag:&v117])
      {
        id v94 = v117;
      }
      else
      {
        __int16 v115 = v48;
        id v95 = v117;
        os_log_t v96 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        id v117 = v96;
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        sub_100006680(0, (unint64_t *)&qword_1001DA530);
        swift_dynamicCast();
        id v97 = v116;
        char v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v98, v99))
        {
          unint64_t v100 = (uint8_t *)swift_slowAlloc();
          uint64_t v118 = swift_slowAlloc();
          *(_DWORD *)unint64_t v100 = 136315138;
          id v101 = v97;
          id v102 = [v101 description];
          uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v105 = v104;

          sub_100005EB8(v103, v105, &v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v98, v99, "disconnectTag Error: %s", v100, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        swift_errorRelease();
      }
      return;
    default:
      type metadata accessor for SPRReaderMode(0);
      id v119 = v41;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000BE7D8);
  }
}

void *sub_1000BE7E8(unint64_t a1)
{
  sub_10014B9C4(0, 0, 0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v20 = a1 & 0xC000000000000001;
      unint64_t v18 = a1;
      while (v20)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_14;
        }
        v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        v8._uint64_t countAndFlagsBits = 8250;
        v8._object = (void *)0xE200000000000000;
        String.append(_:)(v8);
        id v9 = [v5 description];
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        v13._uint64_t countAndFlagsBits = v10;
        v13._object = v12;
        String.append(_:)(v13);

        swift_bridgeObjectRelease();
        unint64_t v15 = _swiftEmptyArrayStorage[2];
        unint64_t v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1) {
          sub_10014B9C4(v14 > 1, v15 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v15 + 1;
        uint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
        v16[4] = 0x2067617420534156;
        v16[5] = 0xE900000000000023;
        ++v3;
        a1 = v18;
        if (v6 == v2) {
          goto LABEL_16;
        }
      }
      if (v3 < *(void *)(v19 + 16)) {
        break;
      }
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_16;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_7;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000BEA00@<X0>(void **a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  os_log_t v96 = a3;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  unint64_t v91 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  Swift::String v13 = (char *)&v86 - v12;
  __chkstk_darwin(v11, v14);
  id v97 = (uint8_t *)&v86 - v15;
  uint64_t v16 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  id v94 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  os_log_type_t v22 = (char *)&v86 - v21;
  id v23 = *a1;
  id v24 = [objc_allocWithZone((Class)NFVASRequest) init];
  NSString v25 = [v23 merchantId];
  if (!v25)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v99 = v6;
  [v24 setMerchantId:v25];

  [v24 setTerminalCap:a2];
  id v26 = [v23 vasTerminalProtocol];
  [v24 setTerminalProtocol:v26];

  Class isa = (Class)[v23 vasFilter];
  if (isa)
  {
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v13;
    os_log_type_t v30 = a2;
    id v31 = v24;
    unint64_t v33 = v32;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v34 = v33;
    id v24 = v31;
    a2 = v30;
    Swift::String v13 = v29;
    sub_100006628(v28, v34);
  }
  [v24 setFilter:isa];

  id v35 = [v23 vasUrl];
  char v98 = v13;
  if (v35)
  {
    unint64_t v36 = a2;
    os_log_type_t v37 = v97;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = v99;
    (*(void (**)(char *, uint8_t *, uint64_t))(v99 + 32))(v22, v37, v5);
    uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56);
    v93(v22, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v22, 1, v5) == 1)
    {
      id v35 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v39);
      id v35 = v40;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v5);
    }
    a2 = v36;
    Swift::String v13 = v98;
  }
  else
  {
    uint64_t v38 = v99;
    uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
    v93(v22, 1, 1, v5);
  }
  uint64_t v95 = v5;
  [v24 setSignupUrl:v35];

  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v42 = sub_100003E78(v41, (uint64_t)qword_1001DD1E0);
  id v43 = v23;
  id v44 = a2;
  id v45 = v43;
  id v46 = v44;
  uint64_t v90 = v42;
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    int v87 = v48;
    unint64_t v86 = v47;
    id v92 = v24;
    uint64_t v49 = swift_slowAlloc();
    unint64_t v50 = (void *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    uint64_t v101 = v89;
    *(_DWORD *)uint64_t v49 = 136315906;
    id v51 = [v45 merchantId];
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v53 = a2;
    unint64_t v55 = v54;

    uint64_t v100 = sub_100005EB8(v52, v55, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2112;
    uint64_t v100 = (uint64_t)v46;
    id v56 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v88 = v50;
    *unint64_t v50 = v53;

    *(_WORD *)(v49 + 22) = 2080;
    id v57 = [v45 vasTerminalProtocol];
    uint64_t v58 = SPRVASTerminalProtocol.description.getter();
    unint64_t v60 = v59;

    uint64_t v100 = sub_100005EB8(v58, v60, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 32) = 2080;
    id v61 = [v45 vasFilter];
    if (v61)
    {
      uint64_t v62 = v61;
      uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v65 = v64;
    }
    else
    {
      uint64_t v63 = 0;
      unint64_t v65 = 0xC000000000000000;
    }
    uint64_t v66 = v86;
    uint64_t v67 = Data.description.getter();
    unint64_t v69 = v68;
    sub_100006628(v63, v65);
    uint64_t v100 = sub_100005EB8(v67, v69, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v87, "In NFVASRequest setting merchantId: %s, terminalCap: %@, terminalProtocol: %s, filter: %s", (uint8_t *)v49, 0x2Au);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Swift::String v13 = v98;
    uint64_t v38 = v99;
    id v24 = v92;
  }
  else
  {
  }
  id v70 = [v45 vasUrl];
  uint64_t v71 = v95;
  if (!v70)
  {
    uint64_t v75 = (uint64_t)v94;
    v93(v94, 1, 1, v95);
    goto LABEL_24;
  }
  unint64_t v72 = v70;
  char v73 = v97;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v74 = *(void (**)(char *, uint8_t *, uint64_t))(v38 + 32);
  uint64_t v75 = (uint64_t)v94;
  v74(v94, v73, v71);
  v93((char *)v75, 0, 1, v71);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v75, 1, v71) == 1)
  {
LABEL_24:
    uint64_t result = sub_10005F4F8(v75, (uint64_t *)&unk_1001DD410);
    goto LABEL_25;
  }
  v74(v13, (uint8_t *)v75, v71);
  uint64_t v76 = v91;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v91, v13, v71);
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v77, v78))
  {
    char v79 = v76;
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    uint64_t v101 = swift_slowAlloc();
    id v97 = v80;
    *(_DWORD *)uint64_t v80 = 136315138;
    id v92 = v24;
    sub_1000C6F64((unint64_t *)&qword_1001DCC78, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v100 = sub_100005EB8(v81, v82, &v101);
    id v24 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v83 = *(void (**)(char *, uint64_t))(v38 + 8);
    v83(v79, v71);
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "signupUrl: %s", v97, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t result = ((uint64_t (*)(char *, uint64_t))v83)(v98, v71);
  }
  else
  {

    uint64_t v85 = *(void (**)(char *, uint64_t))(v38 + 8);
    v85(v76, v71);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v85)(v13, v71);
  }
LABEL_25:
  *os_log_t v96 = v24;
  return result;
}

id sub_1000BF438(uint64_t a1, id a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, void *a7)
{
  id v11 = [a2 mobileCapabilities];
  if (v11)
  {
    uint64_t v12 = v11;
    if (([v11 unsignedCharValue] & 0xC) == 4) {
      a3[OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty] = 1;
    }
    unsigned int v13 = [v12 unsignedCharValue];

    if ((~v13 & 0x30) == 0) {
      a3[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming] = 1;
    }
  }
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100003E78(v14, (uint64_t)qword_1001DD1E0);
  id v15 = a2;
  uint64_t v16 = a3;
  id v17 = v15;
  uint64_t v18 = v16;
  id v19 = v17;
  uint64_t v20 = v18;
  id v21 = v19;
  os_log_type_t v22 = v20;
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  NSString v25 = (void **)(&GlobalState + 16);
  id v26 = (void **)(&GlobalState + 16);
  p_ivar_lyt = (void **)(&GlobalState + 16);
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v172 = v24;
    id v173 = a6;
    uint64_t v28 = 7104878;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134219778;
    *(void *)&long long v177 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2080;
    id v30 = [v21 request];
    if (v30
      && (id v31 = v30, v32 = [v30 merchantId], v31, v32))
    {
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;
    }
    else
    {
      unint64_t v34 = 0xE300000000000000;
    }
    *(void *)&long long v177 = sub_100005EB8(v28, v34, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2080;
    sub_100003EB0((uint64_t *)&unk_1001DD3C0);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_100186100;
    id v36 = [v21 statusCode];
    if (v36)
    {
      os_log_type_t v37 = v36;
      id v38 = [v36 unsignedLongLongValue];

      uint64_t v178 = &type metadata for UInt64;
      uint64_t v179 = &protocol witness table for UInt64;
      *(void *)&long long v177 = v38;
      sub_10001F1F0(&v177, v35 + 32);
    }
    else
    {
      *(void *)(v35 + 56) = &type metadata for Int;
      *(void *)(v35 + 64) = &protocol witness table for Int;
      *(void *)(v35 + 32) = 0;
    }
    uint64_t v39 = String.init(format:_:)();
    *(void *)&long long v177 = sub_100005EB8(v39, v40, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 32) = 2080;
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_100186100;
    id v42 = [v21 mobileCapabilities];
    if (v42)
    {
      id v43 = v42;
      id v44 = [v42 unsignedLongLongValue];

      uint64_t v178 = &type metadata for UInt64;
      uint64_t v179 = &protocol witness table for UInt64;
      *(void *)&long long v177 = v44;
      sub_10001F1F0(&v177, v41 + 32);
    }
    else
    {
      *(void *)(v41 + 56) = &type metadata for Int;
      *(void *)(v41 + 64) = &protocol witness table for Int;
      *(void *)(v41 + 32) = 0;
    }
    uint64_t v45 = String.init(format:_:)();
    *(void *)&long long v177 = sub_100005EB8(v45, v46, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 42) = 1024;
    int v47 = v22[OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty];

    LODWORD(v177) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v29 + 48) = 1024;
    int v48 = v22[OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming];

    LODWORD(v177) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v29 + 54) = 2080;
    id v49 = [v21 vasData];
    if (v49)
    {
      unint64_t v50 = v49;
      uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      Swift::String v54 = Data.hexString()();
      uint64_t countAndFlagsBits = v54._countAndFlagsBits;
      object = v54._object;
      sub_100006628(v51, v53);
    }
    else
    {
      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
    *(void *)&long long v177 = countAndFlagsBits;
    *((void *)&v177 + 1) = object;
    uint64_t v57 = String.init<A>(_:)();
    *(void *)&long long v177 = sub_100005EB8(v57, v58, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 64) = 2080;
    p_ivar_lyt = &GlobalState.ivar_lyt;
    id v59 = [v21 token];
    if (v59)
    {
      unint64_t v60 = v59;
      uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v63 = v62;

      Swift::String v64 = Data.hexString()();
      uint64_t v65 = v64._countAndFlagsBits;
      uint64_t v66 = v64._object;
      sub_100006628(v61, v63);
    }
    else
    {
      uint64_t v65 = 0;
      uint64_t v66 = (void *)0xE000000000000000;
    }
    *(void *)&long long v177 = v65;
    *((void *)&v177 + 1) = v66;
    uint64_t v67 = String.init<A>(_:)();
    *(void *)&long long v177 = sub_100005EB8(v67, v68, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v172, "VAS response #%ld: (for merchantId: %s) -> statusCode: %s, mobileCapabilities: %s, skipLoyalty: %{BOOL}d, paymentDataForthcoming: %{BOOL}d, vasData: %s, mobileToken: %s", (uint8_t *)v29, 0x4Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v26 = &GlobalState.ivar_lyt;
    a6 = v173;
    NSString v25 = &GlobalState.ivar_lyt;
  }
  else
  {
  }
  id v69 = [v21 (SEL)v25[397]];
  sub_100006680(0, &qword_1001DB7E0);
  id v70 = v69;
  v71.super.super.Class isa = NSNumber.init(integerLiteral:)(25223).super.super.isa;
  Class isa = v71.super.super.isa;
  if (v70)
  {
    id v73 = v70;
    id v74 = isa;
    char v75 = static NSObject.== infix(_:_:)();

    if (v75)
    {

      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        os_log_type_t v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "VasDataNotActivated", v78, 2u);
        swift_slowDealloc();
      }

      *a4 = 1;
      uint64_t v79 = 25223;
      goto LABEL_85;
    }
    id v83 = v73;
    Class v84 = NSNumber.init(integerLiteral:)(27012).super.super.isa;
    id v85 = v83;
    unint64_t v86 = v84;
    LOBYTE(v84) = static NSObject.== infix(_:_:)();

    if (v84)
    {

      int v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "VasUserIntervention", v89, 2u);
        swift_slowDealloc();
      }

      *a5 = 1;
      uint64_t v79 = 27012;
      goto LABEL_85;
    }
    id v90 = v85;
    Class v91 = NSNumber.init(integerLiteral:)(36864).super.super.isa;
    id v92 = v90;
    uint64_t v93 = v91;
    LOBYTE(v91) = static NSObject.== infix(_:_:)();

    if (v91)
    {

      id v94 = [v21 request];
      id v95 = [v94 terminalProtocol];

      if (v95)
      {
        id v96 = SPRVASTerminalProtocolProtocolFull;
        id v97 = v95;
        char v98 = static NSObject.== infix(_:_:)();

        if (v98)
        {

          id v99 = [v21 (SEL)v26[430]];
          if (v99)
          {
            uint64_t v100 = v99;
            uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v103 = v102;

            sub_100006628(v101, v103);
            id v104 = [v21 (SEL)v26[430]];
            if (v104)
            {
              unint64_t v105 = v104;
              uint64_t v106 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v108 = v107;

              switch(v108 >> 62)
              {
                case 1uLL:
                  sub_100006628(v106, v108);
                  LODWORD(v109) = HIDWORD(v106) - v106;
                  if (__OFSUB__(HIDWORD(v106), v106)) {
                    goto LABEL_99;
                  }
                  uint64_t v109 = (int)v109;
LABEL_76:
                  if (!v109) {
                    goto LABEL_79;
                  }
                  break;
                case 2uLL:
                  uint64_t v154 = *(void *)(v106 + 16);
                  uint64_t v153 = *(void *)(v106 + 24);
                  sub_100006628(v106, v108);
                  uint64_t v109 = v153 - v154;
                  if (!__OFSUB__(v153, v154)) {
                    goto LABEL_76;
                  }
                  goto LABEL_100;
                case 3uLL:
                  sub_100006628(v106, v108);
                  goto LABEL_79;
                default:
                  sub_100006628(v106, v108);
                  uint64_t v109 = BYTE6(v108);
                  goto LABEL_76;
              }
            }
          }
          else
          {
LABEL_79:
            *a6 = 1;
            uint64_t v155 = Logger.logObject.getter();
            os_log_type_t v156 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v155, v156))
            {
              uint64_t v157 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v157 = 0;
              _os_log_impl((void *)&_mh_execute_header, v155, v156, "foundVasDataInvalid", v157, 2u);
              swift_slowDealloc();
            }
          }
          uint64_t v128 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
          goto LABEL_83;
        }
        id v124 = SPRVASTerminalProtocolSignUpOnly;
        id v125 = v97;
        id v126 = v124;
        char v127 = static NSObject.== infix(_:_:)();

        if (v127)
        {
          uint64_t v128 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK;
LABEL_83:
          v22[v128] = 1;
LABEL_84:
          uint64_t v79 = 36864;
          goto LABEL_85;
        }
      }
      unint64_t v129 = Logger.logObject.getter();
      os_log_type_t v130 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v129, v130))
      {
        unint64_t v131 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v131 = 0;
        _os_log_impl((void *)&_mh_execute_header, v129, v130, "Invalid VASTerminalProtocol", v131, 2u);
        swift_slowDealloc();
      }

      goto LABEL_84;
    }
    id v110 = v92;
    Class v111 = NSNumber.init(integerLiteral:)(27267).super.super.isa;
    id v112 = v110;
    uint64_t v113 = v111;
    LOBYTE(v111) = static NSObject.== infix(_:_:)();

    if (v111)
    {

      uint64_t v114 = Logger.logObject.getter();
      os_log_type_t v115 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v114, v115))
      {
        __int16 v116 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)__int16 v116 = 0;
        _os_log_impl((void *)&_mh_execute_header, v114, v115, "VasDataNotFound", v116, 2u);
        swift_slowDealloc();
      }

      if (__OFADD__(*a7, 1))
      {
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        JUMPOUT(0x1000C05E0);
      }
      ++*a7;
      uint64_t v79 = 27267;
      goto LABEL_85;
    }
    id v117 = v112;
    Class v118 = NSNumber.init(integerLiteral:)(27392).super.super.isa;
    id v119 = v117;
    int v120 = v118;
    LOBYTE(v118) = static NSObject.== infix(_:_:)();

    if (v118)
    {

      uint64_t v121 = Logger.logObject.getter();
      os_log_type_t v122 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v121, v122))
      {
        uint64_t v123 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v123 = 0;
        _os_log_impl((void *)&_mh_execute_header, v121, v122, "VasWrongParameters - Wrong P1, P2", v123, 2u);
        swift_slowDealloc();
      }

      uint64_t v79 = 27392;
      goto LABEL_85;
    }
    id v132 = v119;
    Class v133 = NSNumber.init(integerLiteral:)(26368).super.super.isa;
    id v134 = v132;
    uint64_t v135 = v133;
    LOBYTE(v133) = static NSObject.== infix(_:_:)();

    if (v133)
    {

      os_log_type_t v136 = Logger.logObject.getter();
      os_log_type_t v137 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v136, v137))
      {
        uint64_t v138 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v138 = 0;
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "VasWrongLCField - Wrong length of command data field", v138, 2u);
        swift_slowDealloc();
      }

      uint64_t v79 = 26368;
      goto LABEL_85;
    }
    id v139 = v134;
    Class v140 = NSNumber.init(integerLiteral:)(27264).super.super.isa;
    id v141 = v139;
    uint64_t v142 = v140;
    LOBYTE(v140) = static NSObject.== infix(_:_:)();

    if (v140)
    {

      uint64_t v143 = Logger.logObject.getter();
      os_log_type_t v144 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v143, v144))
      {
        unint64_t v145 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v145 = 0;
        _os_log_impl((void *)&_mh_execute_header, v143, v144, "VasIncorrectData - Incorrect data in the command field", v145, 2u);
        swift_slowDealloc();
      }

      uint64_t v79 = 27264;
      goto LABEL_85;
    }
    Class v146 = NSNumber.init(integerLiteral:)(25408).super.super.isa;
    id v147 = v141;
    uint64_t v148 = v146;
    char v149 = static NSObject.== infix(_:_:)();

    if (v149)
    {
      id v150 = Logger.logObject.getter();
      os_log_type_t v151 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v150, v151))
      {
        uint64_t v152 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v152 = 0;
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "VasUnsupportedApplicationVersion", v152, 2u);
        swift_slowDealloc();
      }

      uint64_t v79 = 25408;
      goto LABEL_85;
    }
  }
  else
  {
  }
  uint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v80, v81))
  {
    unint64_t v82 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v82 = 0;
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Unknown VAS Response Status Code", v82, 2u);
    swift_slowDealloc();
  }

  uint64_t v79 = 0;
LABEL_85:
  id v158 = [v21 (SEL)v26[430]];
  if (v158)
  {
    uint64_t v159 = v158;
    uint64_t v160 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v162 = v161;
  }
  else
  {
    uint64_t v160 = 0;
    unint64_t v162 = 0xF000000000000000;
  }
  id v163 = [v21 p_ivar_lyt[427]];
  if (v163)
  {
    uint64_t v164 = v163;
    uint64_t v165 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v167 = v166;
  }
  else
  {
    uint64_t v165 = 0;
    unint64_t v167 = 0xF000000000000000;
  }
  if (v162 >> 60 == 15)
  {
    Class v168 = 0;
  }
  else
  {
    Class v168 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000BF70(v160, v162);
  }
  if (v167 >> 60 == 15)
  {
    Class v169 = 0;
  }
  else
  {
    Class v169 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000BF70(v165, v167);
  }
  id v170 = [objc_allocWithZone((Class)SPRVASResponse) initWithStatus:v79 vasData:v168 mobileToken:v169];

  return v170;
}

uint64_t sub_1000C05F0(uint64_t a1, uint64_t a2)
{
  return sub_1000C0BDC(a1, a2, (uint64_t)&unk_1001C9188, (uint64_t)sub_1000C6ED8, (uint64_t)&unk_1001C91A0);
}

void sub_1000C0630(uint64_t a1)
{
  uint64_t v2 = v1;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_10000C46C((uint64_t)v32), (v5 & 1) != 0))
  {
    sub_100006570(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v33);
  }
  else
  {
    long long v33 = 0u;
    long long v34 = 0u;
  }
  sub_10000E2D4((uint64_t)v32);
  if (*((void *)&v34 + 1))
  {
    uint64_t v6 = swift_dynamicCast();
    if (v6)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        swift_bridgeObjectRelease();
        *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA) = 1;
        if (qword_1001D9188 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_100003E78(v8, (uint64_t)qword_1001DD1E0);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v9, v10)) {
          goto LABEL_20;
        }
        id v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v11 = 0;
        uint64_t v12 = "(Reader Mode) didStart polling A";
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
        swift_slowDealloc();
LABEL_20:

        goto LABEL_21;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v6 = swift_bridgeObjectRelease();
      if (v13)
      {
        *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB) = 1;
        if (qword_1001D9188 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_100003E78(v14, (uint64_t)qword_1001DD1E0);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v9, v10)) {
          goto LABEL_20;
        }
        id v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v11 = 0;
        uint64_t v12 = "(Reader Mode) didStart polling B";
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v6 = sub_10005F4F8((uint64_t)&v33, &qword_1001DD3F0);
  }
LABEL_21:
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA) == 1
    && *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB) == 1)
  {
    uint64_t v15 = OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestartByApplet;
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestartByApplet) == 1)
    {
      uint64_t v16 = OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent) & 1) == 0)
      {
        id v17 = sub_1000C7320(5, 0);
        v32[0] = 20;
        __chkstk_darwin(v17, v18);
        uint64_t v20 = (uint64_t *)&v19[4];
        id v21 = v19 + 8;
        os_unfair_lock_lock(v19 + 8);
        sub_1000C6EA0(v20);
        os_unfair_lock_unlock(v21);
        *(unsigned char *)(v2 + v15) = 0;
        *(unsigned char *)(v2 + v16) = 1;
      }
    }
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart) == 1)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart) = 0;
      v32[0] = 0;
      __chkstk_darwin(v6, v7);
      uint64_t v23 = (uint64_t)&v22[4];
      os_log_type_t v24 = v22 + 8;
      os_unfair_lock_lock(v22 + 8);
      sub_100057DB4(v23);
      os_unfair_lock_unlock(v24);
      if (qword_1001D9190 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for OSSignposter();
      sub_100003E78(v25, (uint64_t)qword_1001DD1F8);
      uint64_t v26 = *(void *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
      sub_100044AEC("reader-ese_reader_mode_polling", 30, 2, v26, 0xD000000000000015, 0x8000000100198CC0);
      if (*(void *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount) == 1
        && (*(void *)(*(void *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 16) & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        uint64_t v27 = sub_100044E30("reader-vas_ese_reader_mode_switch", 33, 2, v26, 0xD00000000000001ELL, 0x8000000100198D10);
        v32[0] = 2;
        __chkstk_darwin(v27, v28);
        id v30 = (uint64_t *)&v29[4];
        id v31 = v29 + 8;
        os_unfair_lock_lock(v29 + 8);
        sub_100057D9C(v30);
        os_unfair_lock_unlock(v31);
      }
    }
  }
}

uint64_t sub_1000C0BB4(uint64_t a1, uint64_t a2)
{
  return sub_1000C0BDC(a1, a2, (uint64_t)&unk_1001C9138, (uint64_t)sub_1000C6E78, (uint64_t)&unk_1001C9150);
}

uint64_t sub_1000C0BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  uint64_t result = static NSObject.== infix(_:_:)();
  if (result)
  {
    static DispatchQoS.userInitiated.getter();
    static DispatchWorkItemFlags.enforceQoS.getter();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v5;
    *(void *)(v18 + 24) = a2;
    aBlock[4] = v21;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    id aBlock[3] = v22;
    id v19 = _Block_copy(aBlock);
    id v20 = v5;
    swift_bridgeObjectRetain();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C0E5C(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  a5(v9, v8);

  return swift_bridgeObjectRelease();
}

void sub_1000C0EFC(uint64_t a1)
{
  uint64_t v2 = v1;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_10000C46C((uint64_t)v13), (v5 & 1) != 0))
  {
    sub_100006570(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v14);
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
  }
  sub_10000E2D4((uint64_t)v13);
  if (!*((void *)&v15 + 1))
  {
    sub_10005F4F8((uint64_t)&v14, &qword_1001DD3F0);
    return;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    swift_bridgeObjectRelease();
    *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveA) = 0;
    if (qword_1001D9188 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003E78(v6, (uint64_t)qword_1001DD1E0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_20;
    }
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    id v10 = "(Reader Mode) didEnd polling A";
    goto LABEL_19;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0) {
    return;
  }
  *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingActiveB) = 0;
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001DD1E0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    id v10 = "(Reader Mode) didEnd polling B";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
    swift_slowDealloc();
  }
LABEL_20:
}

void sub_1000C11C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v206 = a5;
  uint64_t v205 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  long long v14 = (char *)&v195 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v204 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (uint64_t (*)(void))((char *)&v195 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_100006680(0, (unint64_t *)&qword_1001DA580);
  os_log_t v207 = v6;
  uint64_t v20 = *(uint64_t *)((char *)&v6->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
  *(void *)&long long v203 = a1;
  if ((static NSObject.== infix(_:_:)() & 1) == 0)
  {
    __break(1u);
LABEL_117:
    Swift::UInt8 v187 = Data.toUInt8()();
    sub_10000BF70(v19, a3);
    if (v187 == 17 || v187 == 255 || v187 == 19)
    {
      sub_100003EB0((uint64_t *)&unk_1001DD390);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v203;
      *(unsigned char *)(inited + 32) = 24;
      *(void *)(inited + 64) = &type metadata for UInt8;
      *(unsigned char *)(inited + 40) = v187;
      unint64_t v189 = sub_1001052FC(inited);
      Swift::String v194 = (uint64_t *)__chkstk_darwin(v189, v190);
      uint64_t v192 = (uint64_t *)&v191[4];
      unint64_t v193 = v191 + 8;
      os_unfair_lock_lock(v191 + 8);
      sub_1000C7240(v192);
      os_unfair_lock_unlock(v193);
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
LABEL_114:
    unint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v53, v54))
    {
LABEL_71:
      swift_release();

      return;
    }
    unint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v55 = 0;
    id v56 = "Could not get or unexpected polling type in HCI event";
    goto LABEL_68;
  }
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 != a2 >> 32) {
        goto LABEL_4;
      }
      goto LABEL_9;
    case 2uLL:
      if (*(void *)(a2 + 16) == *(void *)(a2 + 24)) {
        goto LABEL_9;
      }
      goto LABEL_4;
    case 3uLL:
      goto LABEL_9;
    default:
      if ((a3 & 0xFF000000000000) == 0)
      {
LABEL_9:
        if (qword_1001D9188 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_100003E78(v29, (uint64_t)qword_1001DD1E0);
        os_log_t v207 = (os_log_t)Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v207, v30))
        {
          id v31 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)id v31 = 136315138;
          uint64_t v209 = sub_100005EB8(0xD000000000000029, 0x8000000100198C90, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v207, v30, "%s receivedData isEmpty", v31, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          os_log_t v32 = v207;
        }
        return;
      }
LABEL_4:
      unint64_t v202 = v18;
      uint64_t v199 = v15;
      uint64_t v200 = v11;
      if (qword_1001D9188 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      uint64_t v22 = sub_100003E78(v21, (uint64_t)qword_1001DD1E0);
      sub_1000065D0(a2, a3);
      sub_1000065D0(a2, a3);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      BOOL v25 = os_log_type_enabled(v23, v24);
      uint64_t v201 = v10;
      uint64_t v198 = v14;
      uint64_t v197 = v20;
      if (v25)
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315138;
        Swift::String v27 = Data.hexString()();
        uint64_t v209 = sub_100005EB8(v27._countAndFlagsBits, (unint64_t)v27._object, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100006628(a2, a3);
        sub_100006628(a2, a3);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "readerSession:receivedData: %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        os_log_t v28 = v207;
        swift_slowDealloc();
      }
      else
      {
        sub_100006628(a2, a3);
        sub_100006628(a2, a3);

        os_log_t v28 = v207;
      }
      unint64_t v33 = v206;
      uint64_t v34 = v205;
      char v35 = sub_1000AEB5C();
      id v36 = v202;
      if ((v35 & 1) == 0)
      {
        swift_bridgeObjectRetain_n();
        os_log_type_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v39 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v209 = sub_100005EB8(v34, v33, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "receivedData from unrecognized applet: %s", v39, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return;
      }
      type metadata accessor for TLV();
      sub_1000065D0(a2, a3);
      TLV.__allocating_init(dataRepresentation:)(a2, a3);
      uint64_t v41 = v40;
      uint64_t v42 = *(void *)(v40 + 16);
      aBlock[0] = *(void *)TLVTag.eventStatus.unsafeMutableAddressor();
      uint64_t v209 = v42;
      sub_1000388E0();
      char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
      if ((v43 & 1) == 0)
      {
        aBlock[0] = *(void *)TLVTag.eventOutOpsUird.unsafeMutableAddressor();
        uint64_t v209 = v42;
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v57 = (*(uint64_t (**)(void))(*(void *)v41 + 128))();
          if (v57 == 30)
          {
            id v96 = *(uint64_t (**)(void))(*(void *)v41 + 144);
            uint64_t v97 = v96();
            unint64_t v99 = v98;
            uint64_t v100 = Data._Representation.subscript.getter();
            unint64_t v102 = v101;
            sub_100006628(v97, v99);
            uint64_t v103 = sub_1000E328C(v100, v102);
            uint64_t v104 = sub_100006628(v100, v102);
            if ((v103 & 0x100) == 0)
            {
              uint64_t v104 = sub_1000C56A8(v103);
              *((unsigned char *)&v28->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_lastTransactionOutcomeReceived) = v103;
            }
            uint64_t v105 = ((uint64_t (*)(uint64_t))v96)(v104);
            uint64_t v107 = v105;
            unint64_t v108 = v106;
            switch(v106 >> 62)
            {
              case 1uLL:
                uint64_t v109 = (int)v105;
                uint64_t v110 = v105 >> 32;
                goto LABEL_84;
              case 2uLL:
                uint64_t v109 = *(void *)(v105 + 16);
                uint64_t v110 = *(void *)(v105 + 24);
                goto LABEL_84;
              case 3uLL:
                goto LABEL_121;
              default:
                uint64_t v109 = 0;
                uint64_t v110 = BYTE6(v106);
LABEL_84:
                if (v110 < 8 || v110 < v109)
                {
LABEL_121:
                  __break(1u);
                  JUMPOUT(0x1000C2C38);
                }
                uint64_t v134 = Data._Representation.subscript.getter();
                unint64_t v136 = v135;
                sub_100006628(v107, v108);
                uint64_t v137 = sub_100115410(v134, v136);
                unint64_t v139 = v138;
                uint64_t v140 = sub_1000E370C(v137, v138);
                if ((v141 & 1) == 0)
                {
                  uint64_t v142 = v140;
                  sub_1000C7320(v140, 0);
                  if (v142 == 10)
                  {
                    uint64_t v143 = sub_10002A544(4046, 0, 0, 0);
                    os_log_type_t v144 = *(Class *)((char *)&v28->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
                    *(Class *)((char *)&v28->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v143;
                  }
                }
                sub_100006628(v137, v139);
                break;
            }
          }
          else
          {
            if (v57 != 8)
            {
              unint64_t v53 = Logger.logObject.getter();
              os_log_type_t v54 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v53, v54)) {
                goto LABEL_71;
              }
              unint64_t v55 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v55 = 0;
              id v56 = "HCI event: OUT_OPS_UIRD unrecognized length";
              goto LABEL_68;
            }
            unint64_t v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v58, v59))
            {
              unint64_t v60 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v60 = 0;
              _os_log_impl((void *)&_mh_execute_header, v58, v59, "HCI event: OUT_OPS_UIRD: OPS only", v60, 2u);
              swift_slowDealloc();
            }

            uint64_t v61 = (*(uint64_t (**)(void))(*(void *)v41 + 144))();
            unint64_t v63 = v62;
            uint64_t v64 = sub_1000E328C(v61, v62);
            sub_100006628(v61, v63);
            if ((v64 & 0x100) == 0)
            {
              sub_1000C56A8(v64);
              swift_release();
              *((unsigned char *)&v28->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_lastTransactionOutcomeReceived) = v64;
              return;
            }
          }
        }
        else
        {
          aBlock[0] = *(void *)TLVTag.eventTrackError.unsafeMutableAddressor();
          uint64_t v209 = v42;
          if (dispatch thunk of static Equatable.== infix(_:_:)())
          {
            uint64_t v65 = Logger.logObject.getter();
            os_log_type_t v66 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v65, v66))
            {
              uint64_t v67 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v67 = 0;
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "HCI event: Track Error Buffer", v67, 2u);
              swift_slowDealloc();
            }

            uint64_t v68 = (*(uint64_t (**)(void))(*(void *)v41 + 144))();
            unint64_t v70 = v69;
            NSNumber v71 = sub_1000E3B9C(v68, v69);
            sub_100006628(v68, v70);
            if (v71[2])
            {
              uint64_t v205 = v22;
              uint64_t v72 = sub_1000E3FC4((uint64_t)v71);
              if (v72)
              {
                id v73 = *(Class *)((char *)&v28->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
                *(Class *)((char *)&v28->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v72;
              }
              int64_t v74 = v71[2];
              if (v74)
              {
                uint64_t v196 = v41;
                aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
                sub_10014B9C4(0, v74, 0);
                char v75 = (void *)aBlock[0];
                uint64_t v76 = v71 + 5;
                do
                {
                  uint64_t v77 = *(v76 - 1);
                  unint64_t v78 = *v76;
                  sub_1000065D0(v77, *v76);
                  Swift::String v79 = Data.hexString()();
                  sub_100006628(v77, v78);
                  aBlock[0] = (uint64_t)v75;
                  unint64_t v81 = v75[2];
                  unint64_t v80 = v75[3];
                  if (v81 >= v80 >> 1)
                  {
                    sub_10014B9C4(v80 > 1, v81 + 1, 1);
                    char v75 = (void *)aBlock[0];
                  }
                  v76 += 2;
                  v75[2] = v81 + 1;
                  *(Swift::String *)&v75[2 * v81 + 4] = v79;
                  --v74;
                }
                while (v74);
                swift_bridgeObjectRelease();
                os_log_t v115 = v207;
                id v36 = v202;
              }
              else
              {
                swift_bridgeObjectRelease();
                char v75 = _swiftEmptyArrayStorage;
                os_log_t v115 = v28;
              }
              aBlock[0] = (uint64_t)v75;
              sub_100003EB0((uint64_t *)&unk_1001DA570);
              sub_100038F5C((unint64_t *)&qword_1001DD3B0, (uint64_t *)&unk_1001DA570);
              uint64_t v116 = BidirectionalCollection<>.joined(separator:)();
              Class v118 = v117;
              uint64_t v119 = swift_bridgeObjectRelease();
              LOBYTE(aBlock[0]) = 19;
              __chkstk_darwin(v119, v120);
              *(&v195 - 4) = (uint64_t)aBlock;
              *(&v195 - 3) = v116;
              os_log_type_t v122 = (uint64_t *)&v121[4];
              uint64_t v123 = v121 + 8;
              Swift::String v194 = v118;
              os_unfair_lock_lock(v121 + 8);
              sub_1000C6E10(v122);
              os_unfair_lock_unlock(v123);
              swift_bridgeObjectRelease();
              os_log_t v28 = v115;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            id v124 = (char *)v28 + OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus;
            if ((*((unsigned char *)&v28->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus + 1) & 1) != 0
              || (*v124 & 0xFE) != 6)
            {
              unint64_t v129 = v28;
              unint64_t v53 = Logger.logObject.getter();
              os_log_type_t v130 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v53, v130))
              {
                swift_release();

                return;
              }
              unint64_t v131 = (uint8_t *)swift_slowAlloc();
              aBlock[0] = swift_slowAlloc();
              *(_DWORD *)unint64_t v131 = 136315138;
              if (v124[1])
              {
                unint64_t v132 = 0xE300000000000000;
                uint64_t v133 = 4271950;
              }
              else
              {
                uint64_t v133 = SPRPayAppletStatus.description.getter();
                unint64_t v132 = v145;
              }
              uint64_t v209 = sub_100005EB8(v133, v132, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v53, v130, "no post-processing for applet status \"\n%s", v131, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              goto LABEL_70;
            }
            static DispatchQoS.userInitiated.getter();
            id v125 = v198;
            static DispatchWorkItemFlags.enforceQoS.getter();
            uint64_t v126 = swift_allocObject();
            *(void *)(v126 + 16) = v28;
            aBlock[4] = (uint64_t)sub_1000C6E6C;
            aBlock[5] = v126;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)sub_1000048D8;
            id aBlock[3] = (uint64_t)&unk_1001C9100;
            char v127 = _Block_copy(aBlock);
            uint64_t v128 = v28;
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            _Block_release(v127);
            swift_release();
            (*(void (**)(char *, uint64_t))(v200 + 8))(v125, v201);
            (*(void (**)(uint64_t (*)(void), uint64_t))(v204 + 8))(v36, v199);
          }
          else
          {
            aBlock[0] = *(void *)TLVTag.eventSelectPPSEResponse.unsafeMutableAddressor();
            uint64_t v209 = v42;
            if (dispatch thunk of static Equatable.== infix(_:_:)())
            {
              uint64_t v89 = Logger.logObject.getter();
              os_log_type_t v90 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v89, v90))
              {
                Class v91 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)Class v91 = 0;
                _os_log_impl((void *)&_mh_execute_header, v89, v90, "HCI event: Select PPSE Response", v91, 2u);
                swift_slowDealloc();
              }

              uint64_t v92 = (*(uint64_t (**)(void))(*(void *)v41 + 144))();
              unint64_t v94 = v93;
              id v95 = sub_1000E2D60(v92, v93);
              sub_100006628(v92, v94);
              sub_100059234((uint64_t)v95);
              swift_bridgeObjectRelease();
            }
          }
        }
LABEL_90:
        swift_release();
        return;
      }
      os_log_t v44 = v28;
      uint64_t v45 = *(uint64_t (**)(void))(*(void *)v41 + 128);
      uint64_t v46 = v45();
      if (v46 == 1) {
        goto LABEL_28;
      }
      if (v46 == 22)
      {
        uint64_t v82 = (*(uint64_t (**)(void))(*(void *)v41 + 144))();
        unint64_t v84 = v83;
        uint64_t v85 = sub_1000E370C(v82, v83);
        char v87 = v86;
        sub_100006628(v82, v84);
        if ((v87 & 1) == 0)
        {
          sub_1000C7320(v85, 0);
          if (v85 == 10)
          {
            uint64_t v88 = sub_10002A544(4046, 0, 0, 0);
            unint64_t v53 = *(NSObject **)((char *)&v44->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
            *(Class *)((char *)&v44->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = (Class)v88;
            goto LABEL_71;
          }
        }
        goto LABEL_90;
      }
      if (v46 != 3)
      {
        unint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v53, v54)) {
          goto LABEL_71;
        }
        unint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v55 = 0;
        id v56 = "HCI event: Status: Unrecognized length";
LABEL_68:
        Class v111 = v53;
        os_log_type_t v112 = v54;
        uint64_t v113 = v55;
        uint32_t v114 = 2;
LABEL_69:
        _os_log_impl((void *)&_mh_execute_header, v111, v112, v56, v113, v114);
LABEL_70:
        swift_slowDealloc();
        goto LABEL_71;
      }
LABEL_28:
      int v47 = *(uint64_t (**)(void))(*(void *)v41 + 144);
      uint64_t v206 = *(void *)v41 + 144;
      uint64_t v48 = v47();
      unint64_t v50 = v49;
      __int16 v51 = sub_1000D8294(v48, v49);
      sub_100006628(v48, v50);
      if ((v51 & 0x100) != 0)
      {
        unint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v53, v54)) {
          goto LABEL_71;
        }
        unint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v55 = 0;
        id v56 = "Could not get status byte from HCI event: Status";
        goto LABEL_68;
      }
      unint64_t v52 = (char *)v44 + OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus;
      *unint64_t v52 = v51;
      v52[1] = 0;
      switch((char)v51)
      {
        case 6:
          unint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v53, v54)) {
            goto LABEL_71;
          }
          unint64_t v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v55 = 0;
          id v56 = "HCI event: Status: Transaction Complete <--- --- ---";
          goto LABEL_68;
        case 7:
          unint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v53, v54)) {
            goto LABEL_71;
          }
          unint64_t v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v55 = 0;
          id v56 = "HCI event: Status: Transaction Error <--- --- ---";
          goto LABEL_68;
        case 21:
          uint64_t v148 = Logger.logObject.getter();
          os_log_type_t v149 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v148, v149))
          {
            id v150 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v150 = 0;
            _os_log_impl((void *)&_mh_execute_header, v148, v149, "HCI event: Status: Remove Card", v150, 2u);
            swift_slowDealloc();
          }
          swift_release();

          *((unsigned char *)&v44->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestartByApplet) = 1;
          *((unsigned char *)&v44->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent) = 0;
          break;
        case 29:
          unint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v53, v54)) {
            goto LABEL_71;
          }
          unint64_t v55 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v55 = 0;
          id v56 = "HCI event: Status: Multiple Card";
          goto LABEL_68;
        case 30:
          uint64_t v205 = v22;
          os_log_type_t v151 = Logger.logObject.getter();
          os_log_type_t v152 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v151, v152))
          {
            uint64_t v153 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v153 = 0;
            _os_log_impl((void *)&_mh_execute_header, v151, v152, "HCI event: Status: Target Discovered", v153, 2u);
            swift_slowDealloc();
          }
          unint64_t v202 = v47;
          uint64_t v196 = v41;

          id v154 = sub_1000C7320(1, 0);
          uint64_t v155 = *(uint64_t *)((char *)&v44->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
          uint64_t v156 = *(void *)(v155 + 56);
          uint64_t v157 = (os_unfair_lock_s *)(v156 + 32);
          id v158 = (uint64_t *)(v156 + 16);
          LOBYTE(aBlock[0]) = 0;
          __chkstk_darwin(v154, v159);
          Swift::String v194 = aBlock;
          os_unfair_lock_lock(v157);
          sub_100057D9C(v158);
          os_unfair_lock_unlock(v157);
          uint64_t v162 = 2;
          uint64_t v204 = v155;
          id v163 = *(os_unfair_lock_s **)(v155 + 56);
          uint64_t v164 = v163 + 8;
          uint64_t v165 = (uint64_t)&v163[4];
          unint64_t v166 = &byte_1001C5970;
          do
          {
            char v167 = *v166++;
            LOBYTE(aBlock[0]) = v167;
            __chkstk_darwin(v160, v161);
            Swift::String v194 = aBlock;
            os_unfair_lock_lock(v164);
            sub_100057DB4(v165);
            os_unfair_lock_unlock(v164);
            --v162;
          }
          while (v162);
          if (qword_1001D9190 != -1) {
            swift_once();
          }
          uint64_t v168 = type metadata accessor for OSSignposter();
          sub_100003E78(v168, (uint64_t)qword_1001DD1F8);
          Swift::String v194 = (uint64_t *)v203;
          sub_100045BEC((uint64_t)&off_1001C59A0, 0xD000000000000012, 0x8000000100198C10, "reader-ese_reader_mode_polling", 30, 2, 0xD000000000000013, 0x8000000100198C50);
          os_log_t v169 = v207;
          if (*((unsigned char *)&v207->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackTransactionStarted))
          {
            uint64_t v170 = sub_100044E30("reader-between_payment_reads", 28, 2, v197, 0xD00000000000001FLL, 0x8000000100198C70);
            LOBYTE(aBlock[0]) = 14;
            __chkstk_darwin(v170, v171);
            Swift::String v194 = aBlock;
            id v173 = (uint64_t *)&v172[4];
            uint64_t v174 = v172 + 8;
            os_unfair_lock_lock(v172 + 8);
            sub_100057D9C(v173);
            os_unfair_lock_unlock(v174);
          }
          uint64_t v175 = *(uint64_t *)((char *)&v169[3].isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor);
          uint64_t v176 = *(uint64_t *)((char *)&v169[4].isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor);
          sub_100006788((Class *)((char *)&v169->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_auditor), v175);
          if (qword_1001D91E0 != -1) {
            swift_once();
          }
          uint64_t v177 = byte_1001E0FB8;
          sub_100003EB0(&qword_1001D8A20);
          uint64_t v178 = swift_initStackObject();
          long long v203 = xmmword_100186100;
          *(_OWORD *)(v178 + 16) = xmmword_100186100;
          strcpy((char *)(v178 + 32), "transactionId");
          *(_WORD *)(v178 + 46) = -4864;
          uint64_t v179 = *(uint64_t *)((char *)&v169->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig);
          uint64_t v180 = *(void *)(v179 + 136);
          *(void *)(v178 + 48) = *(void *)(v179 + 128);
          *(void *)(v178 + 56) = v180;
          swift_bridgeObjectRetain();
          unint64_t v181 = sub_100004C48(v178);
          (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v176 + 8))(12, v177, v181, v175, v176);
          uint64_t v182 = swift_bridgeObjectRelease();
          if (((uint64_t (*)(uint64_t))v45)(v182) != 3) {
            goto LABEL_90;
          }
          uint64_t v183 = v202();
          unint64_t v185 = v184;
          uint64_t v19 = Data.at(index:)(2, v183, v184);
          a3 = v186;
          sub_100006628(v183, v185);
          if (a3 >> 60 == 15) {
            goto LABEL_114;
          }
          goto LABEL_117;
        default:
          unint64_t v53 = Logger.logObject.getter();
          os_log_type_t v146 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v53, v146)) {
            goto LABEL_71;
          }
          id v147 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v147 = 16777472;
          LOBYTE(aBlock[0]) = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v56 = "HCI event: Unknown Status: %hhu";
          Class v111 = v53;
          os_log_type_t v112 = v146;
          uint64_t v113 = v147;
          uint32_t v114 = 5;
          goto LABEL_69;
      }
      return;
  }
}

unsigned char *sub_1000C2CBC(unsigned char *result)
{
  if (result[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus + 1])
  {
    __break(1u);
  }
  else
  {
    sub_1000C2DD0(result[OBJC_IVAR____TtC9SPREngine13ReadOperation_currentPayAppletStatus]);
    return sub_1000C5438(v1, v2);
  }
  return result;
}

void sub_1000C2DD0(char a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
  unint64_t v3 = *(os_unfair_lock_s **)(v2 + 56);
  unint64_t v4 = v3 + 8;
  char v5 = (uint64_t *)&v3[4];
  LOBYTE(v199) = 4;
  os_unfair_lock_lock(v3 + 8);
  sub_100057D9C(v5);
  os_unfair_lock_unlock(v4);
  uint64_t v8 = 1;
  uint64_t v195 = (unsigned char *)v2;
  id v9 = *(os_unfair_lock_s **)(v2 + 56);
  uint64_t v10 = v9 + 8;
  uint64_t v11 = (uint64_t)&v9[4];
  uint64_t v12 = &byte_1001C5B90;
  do
  {
    char v13 = *v12++;
    LOBYTE(v199) = v13;
    __chkstk_darwin(v6, v7);
    os_unfair_lock_lock(v10);
    sub_100057DB4(v11);
    os_unfair_lock_unlock(v10);
    --v8;
  }
  while (v8);
  if (qword_1001D9190 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for OSSignposter();
  sub_100003E78(v14, (uint64_t)qword_1001DD1F8);
  uint64_t v15 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession);
  sub_1000452F0("reader-postProcessing", 21, 2, 0xD000000000000026, 0x8000000100198BC0, (unint64_t)"reader-payment_read", 19, 2, 0xD000000000000010, 0x8000000100198BF0);
  type metadata accessor for SPRPayAppletStatus(0);
  *((void *)&v200 + 1) = v16;
  LOBYTE(v199) = a1;
  uint64_t v197 = v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult;
  swift_beginAccess();
  sub_1001058E0((uint64_t)&v199, 0xD000000000000014, 0x8000000100193EE0);
  swift_endAccess();
  if (a1 == 6)
  {
    uint64_t v17 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent;
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent) & 1) == 0
      && (*(unsigned char *)(*(void *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 72) == 32
       || *(unsigned char *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_lastTransactionOutcomeReceived) == 48))
    {
      id v18 = sub_1000C7320(9, 0);
      *(unsigned char *)(v1 + v17) = 1;
      LOBYTE(v199) = 5;
      __chkstk_darwin(v18, v19);
      uint64_t v21 = (uint64_t *)&v20[4];
      uint64_t v22 = v20 + 8;
      os_unfair_lock_lock(v20 + 8);
      sub_100057D9C(v21);
      os_unfair_lock_unlock(v22);
      sub_100044E30("reader-payment_read_success", 27, 2, (uint64_t)v15, 0xD00000000000001CLL, 0x8000000100198B00);
    }
  }
  id v23 = v15;
  os_log_type_t v24 = (unint64_t *)TLVTag.transactionResultData.unsafeMutableAddressor();
  uint64_t v196 = v1;
  BOOL v25 = sub_1000B1954(*v24, 0, 0);
  unint64_t v27 = v26;

  *((void *)&v200 + 1) = &type metadata for Data;
  *(void *)&long long v199 = v25;
  *((void *)&v199 + 1) = v27;
  swift_beginAccess();
  unint64_t v28 = v27 >> 62;
  sub_1000065D0((uint64_t)v25, v27);
  sub_1001058E0((uint64_t)&v199, 0xD000000000000015, 0x8000000100193EA0);
  swift_endAccess();
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100003E78(v29, (uint64_t)qword_1001DD1E0);
  sub_1000065D0((uint64_t)v25, v27);
  sub_1000065D0((uint64_t)v25, v27);
  os_log_type_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  id v193 = v23;
  if (os_log_type_enabled(v30, v31))
  {
    os_log_t v32 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v199 = swift_slowAlloc();
    *(_DWORD *)os_log_t v32 = 136315138;
    Swift::String v33 = Data.hexString()();
    sub_100005EB8(v33._countAndFlagsBits, (unint64_t)v33._object, (uint64_t *)&v199);
    LODWORD(v28) = v27 >> 62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628((uint64_t)v25, v27);
    sub_100006628((uint64_t)v25, v27);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "DF81FE: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006628((uint64_t)v25, v27);
    sub_100006628((uint64_t)v25, v27);
  }

  sub_100003EB0((uint64_t *)&unk_1001DD390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = 26;
  int64_t v35 = 0;
  switch((int)v28)
  {
    case 1:
      LODWORD(v35) = HIDWORD(v25) - v25;
      if (__OFSUB__(HIDWORD(v25), v25))
      {
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      int64_t v35 = (int)v35;
LABEL_20:
      *(void *)(inited + 64) = &type metadata for Int;
      *(void *)(inited + 40) = v35;
      unint64_t v39 = sub_1001052FC(inited);
      __chkstk_darwin(v39, v40);
      uint64_t v41 = (uint64_t)v25;
      char v43 = (uint64_t *)&v42[4];
      os_log_t v44 = v42 + 8;
      os_unfair_lock_lock(v42 + 8);
      sub_1000C7240(v43);
      os_unfair_lock_unlock(v44);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v191 = v41;
      uint64_t v45 = sub_1000E47E8(v41, v27, v197, v195);
      uint64_t v47 = v46;
      __int16 v49 = v48;
      swift_endAccess();
      uint64_t v50 = v196;
      sub_1000C56A8(v45);
      sub_1000595FC(v45);
      if (a1 == 7 && (v45 & 0x10000) == 0 && (v45 & 0xFF00) == 0x700)
      {
        __int16 v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          unint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Error Indication: L2: MAGSTRIPE NOT SUPPORTED", v53, 2u);
          swift_slowDealloc();
        }

        uint64_t v54 = sub_10002A544(4035, 0, 0, 0);
        unint64_t v55 = *(void **)(v196 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        *(void *)(v196 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = v54;
      }
      id v56 = &off_1001DD000;
      if (v47)
      {
        unint64_t v192 = v27;
        __int16 v57 = v49;
        uint64_t v58 = *(void *)(v196 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig);
        uint64_t v59 = OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs;
        if (*(void *)(*(void *)(v58 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs) + 16))
        {
          *((void *)&v200 + 1) = &type metadata for Bool;
          LOBYTE(v199) = 1;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          sub_1001058E0((uint64_t)&v199, 0xD000000000000012, 0x8000000100193F00);
          swift_endAccess();
          unint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v60, v61))
          {
            unint64_t v62 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v62 = 0;
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "isPINBypassEnabled true", v62, 2u);
            swift_slowDealloc();
          }

          uint64_t v63 = *(void *)(v58 + v59);
          uint64_t v64 = *(void *)(v63 + 16);
          if (v64)
          {
            swift_bridgeObjectRetain();
            uint64_t v65 = (void **)(v63 + 40);
            while (1)
            {
              uint64_t v67 = (uint64_t)*(v65 - 1);
              os_log_type_t v66 = *v65;
              swift_bridgeObjectRetain();
              v68._uint64_t countAndFlagsBits = v67;
              v68._object = v66;
              LOBYTE(v67) = String.hasPrefix(_:)(v68);
              swift_bridgeObjectRelease();
              if (v67) {
                break;
              }
              v65 += 2;
              if (!--v64)
              {
                swift_bridgeObjectRelease();
                uint64_t v50 = v196;
                goto LABEL_39;
              }
            }
            swift_bridgeObjectRelease();
            *((void *)&v200 + 1) = &type metadata for Bool;
            LOBYTE(v199) = 1;
            swift_beginAccess();
            sub_1001058E0((uint64_t)&v199, 0xD000000000000012, 0x8000000100193F20);
            swift_endAccess();
            unint64_t v69 = Logger.logObject.getter();
            os_log_type_t v70 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v69, v70))
            {
              NSNumber v71 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)NSNumber v71 = 0;
              _os_log_impl((void *)&_mh_execute_header, v69, v70, "isPINBypassAllowed true", v71, 2u);
              swift_slowDealloc();
            }

            uint64_t v50 = v196;
            v195[124] = 1;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
        }
LABEL_39:
        uint64_t v72 = *(void *)(v58 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs);
        uint64_t v73 = *(void *)(v72 + 16);
        if (v73)
        {
          swift_bridgeObjectRetain();
          int64_t v74 = (void **)(v72 + 40);
          while (1)
          {
            uint64_t v76 = (uint64_t)*(v74 - 1);
            char v75 = *v74;
            swift_bridgeObjectRetain();
            v77._uint64_t countAndFlagsBits = v76;
            v77._object = v75;
            LOBYTE(v76) = String.hasPrefix(_:)(v77);
            swift_bridgeObjectRelease();
            if (v76) {
              break;
            }
            v74 += 2;
            if (!--v73)
            {
              swift_bridgeObjectRelease();
              goto LABEL_44;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v56 = &off_1001DD000;
          *(unsigned char *)(v50 + OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackFlowEnabled) = 1;
          unint64_t v78 = Logger.logObject.getter();
          os_log_type_t v79 = static os_log_type_t.default.getter();
          __int16 v49 = v57;
          if (os_log_type_enabled(v78, v79))
          {
            unint64_t v80 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v80 = 0;
            _os_log_impl((void *)&_mh_execute_header, v78, v79, "fallbackFlowEnabled true", v80, 2u);
            id v56 = &off_1001DD000;
            swift_slowDealloc();
          }

          unint64_t v27 = v192;
        }
        else
        {
LABEL_44:
          swift_bridgeObjectRelease();
          __int16 v49 = v57;
          unint64_t v27 = v192;
          id v56 = &off_1001DD000;
        }
      }
      int v81 = *((unsigned __int8 *)v56[94] + v50);
      swift_bridgeObjectRelease();
      if (v81 != 1) {
        goto LABEL_52;
      }
      if (v49)
      {
        uint64_t v82 = OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackTransactionStarted;
        if ((*(unsigned char *)(v50 + OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackTransactionStarted) & 1) == 0)
        {
          uint64_t v123 = Logger.logObject.getter();
          os_log_type_t v124 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v123, v124))
          {
            id v125 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v125 = 0;
            _os_log_impl((void *)&_mh_execute_header, v123, v124, "switchInterfaceIndication and no fallbackTransactionStarted yet: proceed with fallbackTransaction", v125, 2u);
            swift_slowDealloc();

            sub_100006628(v191, v27);
          }
          else
          {
            sub_100006628(v191, v27);
          }
          *(unsigned char *)(v50 + v82) = 1;
          return;
        }
      }
      if ((v49 & 0x100) != 0)
      {
        unint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v84, v85))
        {
          char v86 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v86 = 0;
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "forFallback: true", v86, 2u);
          swift_slowDealloc();
        }

        *((void *)&v200 + 1) = &type metadata for Bool;
        LOBYTE(v199) = 1;
        swift_beginAccess();
        sub_1001058E0((uint64_t)&v199, 0x626C6C6146726F66, 0xEB000000006B6361);
        swift_endAccess();
        sub_100006628(v191, v27);
        v195[128] = 1;
        unint64_t v83 = v193;
      }
      else
      {
LABEL_52:
        sub_100006628(v191, v27);
        unint64_t v83 = v193;
      }
      id v87 = v83;
      uint64_t v88 = sub_1000B2528();
      unint64_t v90 = v89;

      sub_100003EB0((uint64_t *)&unk_1001DD390);
      uint64_t v91 = swift_initStackObject();
      *(_OWORD *)(v91 + 16) = xmmword_100186100;
      *(unsigned char *)(v91 + 32) = 9;
      __int16 v92 = Data.toUInt16(endianness:)(1, v88, v90);
      *(void *)(v91 + 64) = &type metadata for UInt16;
      *(_WORD *)(v91 + 40) = v92;
      unint64_t v93 = sub_1001052FC(v91);
      __chkstk_darwin(v93, v94);
      id v96 = (uint64_t *)&v95[4];
      uint64_t v97 = v95 + 8;
      os_unfair_lock_lock(v95 + 8);
      sub_1000C7240(v96);
      os_unfair_lock_unlock(v97);
      swift_bridgeObjectRelease();
      char v98 = Data.subscript.getter();
      uint64_t v99 = SPRPaymentApplicationType.description.getter();
      *((void *)&v200 + 1) = &type metadata for String;
      *(void *)&long long v199 = v99;
      *((void *)&v199 + 1) = v100;
      swift_beginAccess();
      sub_1001058E0((uint64_t)&v199, 0x7954707041796170, 0xEA00000000006570);
      swift_endAccess();
      if (a1 == 7 && !v98)
      {
        uint64_t v101 = sub_10002A544(4006, 0, 0, 0);
        unint64_t v102 = *(void **)(v196 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        *(void *)(v196 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError) = v101;
      }
      sub_100006628(v88, v90);
      id v103 = v87;
      uint64_t v104 = (unint64_t *)TLVTag.trxCipherAndKeyBlobs.unsafeMutableAddressor();
      uint64_t v105 = sub_1000B1954(*v104, 0, 0);
      unint64_t v107 = v106;

      type metadata accessor for TLV();
      id v108 = static TLV.decode(from:)((uint64_t)v105, v107);
      *(void *)&long long v199 = v108;
      TLVTag.cipherBlob.unsafeMutableAddressor();
      sub_100003EB0((uint64_t *)&unk_1001DF8B0);
      sub_100038F5C((unint64_t *)&qword_1001DA550, (uint64_t *)&unk_1001DF8B0);
      uint64_t v109 = Collection<>.first(tag:)();
      if (v109)
      {
        uint64_t v110 = v109;
        Class v111 = TLVTag.blobDefinition.unsafeMutableAddressor();
        uint64_t v112 = (*(uint64_t (**)(void))(*(void *)v110 + 200))(*v111);
        if (v112)
        {
          uint64_t v113 = v112;
          uint64_t v114 = (*(uint64_t (**)(void))(*(void *)v112 + 168))();
          *((void *)&v200 + 1) = &type metadata for Data;
          *(void *)&long long v199 = v114;
          *((void *)&v199 + 1) = v115;
          swift_beginAccess();
          sub_1001058E0((uint64_t)&v199, 0x6568706943787274, 0xED0000626F6C4272);
          swift_endAccess();
          sub_100003EB0((uint64_t *)&unk_1001DD390);
          uint64_t v116 = swift_initStackObject();
          *(_OWORD *)(v116 + 16) = xmmword_100186100;
          *(unsigned char *)(v116 + 32) = 25;
          id v117 = TLVTag.cipheredData.unsafeMutableAddressor();
          uint64_t v118 = (*(uint64_t (**)(void))(*(void *)v113 + 200))(*v117);
          id v194 = v108;
          if (v118)
          {
            uint64_t v190 = v116;
            uint64_t v119 = (*(uint64_t (**)(uint64_t))(*(void *)v118 + 168))(v118);
            unint64_t v121 = v120;
            swift_release();
            switch(v121 >> 62)
            {
              case 1uLL:
                sub_100006628(v119, v121);
                LODWORD(v122) = HIDWORD(v119) - v119;
                if (__OFSUB__(HIDWORD(v119), v119)) {
                  goto LABEL_110;
                }
                uint64_t v122 = (int)v122;
LABEL_76:
                uint64_t v126 = v190;
                *(void *)(v190 + 64) = &type metadata for Int;
                *(void *)(v190 + 40) = v122;
                break;
              case 2uLL:
                uint64_t v128 = *(void *)(v119 + 16);
                uint64_t v127 = *(void *)(v119 + 24);
                sub_100006628(v119, v121);
                uint64_t v122 = v127 - v128;
                if (!__OFSUB__(v127, v128)) {
                  goto LABEL_76;
                }
                goto LABEL_111;
              case 3uLL:
                sub_100006628(v119, v121);
                uint64_t v122 = 0;
                goto LABEL_76;
              default:
                sub_100006628(v119, v121);
                uint64_t v122 = BYTE6(v121);
                goto LABEL_76;
            }
          }
          else
          {
            *(_OWORD *)(v116 + 40) = 0u;
            *(_OWORD *)(v116 + 56) = 0u;
            uint64_t v126 = v116;
          }
          unint64_t v129 = sub_1001052FC(v126);
          __chkstk_darwin(v129, v130);
          unint64_t v132 = (uint64_t *)&v131[4];
          uint64_t v133 = v131 + 8;
          os_unfair_lock_lock(v131 + 8);
          sub_1000C7240(v132);
          os_unfair_lock_unlock(v133);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          id v108 = v194;
        }
        else
        {
          swift_release();
        }
      }
      *(void *)&long long v199 = v108;
      TLVTag.keyBlob.unsafeMutableAddressor();
      uint64_t v134 = Collection<>.first(tag:)();
      swift_bridgeObjectRelease();
      uint64_t v135 = v196;
      if (v134)
      {
        unint64_t v136 = TLVTag.blobDefinition.unsafeMutableAddressor();
        uint64_t v137 = (*(uint64_t (**)(void))(*(void *)v134 + 200))(*v136);
        if (v137)
        {
          uint64_t v138 = (*(uint64_t (**)(void))(*(void *)v137 + 168))();
          *((void *)&v200 + 1) = &type metadata for Data;
          *(void *)&long long v199 = v138;
          *((void *)&v199 + 1) = v139;
          swift_beginAccess();
          sub_1001058E0((uint64_t)&v199, 0x6C4279654B787274, 0xEA0000000000626FLL);
          swift_endAccess();
          swift_release();
        }
        swift_release();
      }
      sub_100006628((uint64_t)v105, v107);
      id v140 = v103;
      char v141 = (unint64_t *)TLVTag.analyticsData.unsafeMutableAddressor();
      uint64_t v142 = sub_1000B1954(*v141, 0, 0);
      unint64_t v144 = v143;

      sub_1000C5854((uint64_t)v142, v144);
      sub_100006628((uint64_t)v142, v144);
      uint64_t v145 = qword_1001D9370;
      id v146 = v140;
      if (v145 != -1) {
        swift_once();
      }
      uint64_t v147 = qword_1001E11D0;
      unint64_t v148 = *(void *)algn_1001E11D8;
      sub_1000065D0(qword_1001E11D0, *(unint64_t *)algn_1001E11D8);
      uint64_t v149 = sub_100142F28(0, v147, v148);
      unint64_t v151 = v150;
      sub_100006628(v147, v148);

      *((void *)&v200 + 1) = &type metadata for Data;
      *(void *)&long long v199 = v149;
      *((void *)&v199 + 1) = v151;
      swift_beginAccess();
      sub_1000065D0(v149, v151);
      sub_1001058E0((uint64_t)&v199, 0xD00000000000001CLL, 0x8000000100193D90);
      swift_endAccess();
      sub_100006628(v149, v151);
      id v152 = [*(*(id *)(*sub_100006788((void *)(v196 + OBJC_IVAR____TtC9SPREngine13ReadOperation_secureElement), *(void *)(v196 + OBJC_IVAR____TtC9SPREngine13ReadOperation_secureElement + 24))+ 24) ecdsaCertificate];
      if (!v152)
      {
LABEL_112:
        __break(1u);
        JUMPOUT(0x1000C5418);
      }
      uint64_t v153 = v152;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v154 = Data.init(hexString:)();
      if (v155 >> 60 == 15)
      {
        long long v199 = 0u;
        long long v200 = 0u;
      }
      else
      {
        *((void *)&v200 + 1) = &type metadata for Data;
        *(void *)&long long v199 = v154;
        *((void *)&v199 + 1) = v155;
      }
      swift_beginAccess();
      sub_1001058E0((uint64_t)&v199, 0xD000000000000010, 0x8000000100193DE0);
      swift_endAccess();
      uint64_t v156 = qword_1001D9090;
      id v157 = v146;
      if (v156 != -1) {
        swift_once();
      }
      uint64_t v158 = type metadata accessor for Logger();
      sub_100003E78(v158, (uint64_t)qword_1001DC090);
      uint64_t v159 = Logger.logObject.getter();
      os_log_type_t v160 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v159, v160))
      {
        uint64_t v161 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v161 = 0;
        _os_log_impl((void *)&_mh_execute_header, v159, v160, "getKEKHashes()", v161, 2u);
        swift_slowDealloc();
      }

      uint64_t v162 = (uint64_t *)TLVTag.transactionAndPINKEKHashes.unsafeMutableAddressor();
      uint64_t v163 = sub_1000B32F0(*v162, (void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F4FB4);
      unint64_t v165 = v164;

      if (qword_1001D9188 != -1) {
        swift_once();
      }
      sub_100003E78(v158, (uint64_t)qword_1001DD1E0);
      sub_1000065D0(v163, v165);
      sub_1000065D0(v163, v165);
      unint64_t v166 = Logger.logObject.getter();
      os_log_type_t v167 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v166, v167))
      {
        uint64_t v168 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v199 = swift_slowAlloc();
        *(_DWORD *)uint64_t v168 = 136446210;
        Swift::String v169 = Data.hexString()();
        sub_100005EB8(v169._countAndFlagsBits, (unint64_t)v169._object, (uint64_t *)&v199);
        uint64_t v135 = v196;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100006628(v163, v165);
        sub_100006628(v163, v165);
        _os_log_impl((void *)&_mh_execute_header, v166, v167, "KEK Hashes: %{public}s", v168, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100006628(v163, v165);
        sub_100006628(v163, v165);
      }

      type metadata accessor for TLV();
      sub_1000065D0(v163, v165);
      TLV.__allocating_init(dataRepresentation:)(v163, v165);
      uint64_t v171 = v170;
      os_log_type_t v172 = TLVTag.transactionKEKHash.unsafeMutableAddressor();
      id v173 = *(uint64_t (**)(void))(*(void *)v171 + 200);
      uint64_t v174 = v173(*v172);
      if (v174)
      {
        uint64_t v175 = v173;
        uint64_t v176 = (*(uint64_t (**)(uint64_t))(*(void *)v174 + 152))(v174);
        uint64_t v178 = v177;
        swift_release();
        *((void *)&v200 + 1) = &type metadata for String;
        *(void *)&long long v199 = v176;
        *((void *)&v199 + 1) = v178;
        id v173 = v175;
      }
      else
      {
        long long v199 = 0u;
        long long v200 = 0u;
      }
      swift_beginAccess();
      sub_1001058E0((uint64_t)&v199, 0x61486B654B787274, 0xEA00000000006873);
      swift_endAccess();
      uint64_t v179 = TLVTag.pinKEKHash.unsafeMutableAddressor();
      uint64_t v180 = v173(*v179);
      if (v180)
      {
        uint64_t v181 = (*(uint64_t (**)(uint64_t))(*(void *)v180 + 152))(v180);
        uint64_t v183 = v182;
        swift_release();
        *((void *)&v200 + 1) = &type metadata for String;
        *(void *)&long long v199 = v181;
        *((void *)&v199 + 1) = v183;
        swift_beginAccess();
        sub_1001058E0((uint64_t)&v199, 0x61486B654B6E6970, 0xEA00000000006873);
        *((void *)&v200 + 1) = &type metadata for Bool;
        LOBYTE(v199) = 1;
        sub_1001058E0((uint64_t)&v199, 0x7075536E69507369, 0xEE00646574726F70);
        swift_endAccess();
      }
      sub_100006628(v163, v165);
      swift_release();
      uint64_t v184 = *(void *)(v135 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig);
      uint64_t v185 = *(void *)(v184 + 128);
      uint64_t v186 = *(void *)(v184 + 136);
      *((void *)&v200 + 1) = &type metadata for String;
      *(void *)&long long v199 = v185;
      *((void *)&v199 + 1) = v186;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1001058E0((uint64_t)&v199, 0x746361736E617274, 0xED000064496E6F69);
      swift_endAccess();
      if (a1 == 7)
      {
        uint64_t v187 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
        type metadata accessor for ReadError(0);
        sub_1000C6F64((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
        _BridgedStoredNSError.code.getter();
        if ((void)v199 == 4998)
        {
          uint64_t v188 = sub_10002A544(4999, 0, 0, 0);
          unint64_t v189 = *(void **)(v135 + v187);
          *(void *)(v135 + v187) = v188;
        }
      }
      return;
    case 2:
      Class isa = v25[2].isa;
      Class v36 = v25[3].isa;
      BOOL v38 = __OFSUB__(v36, isa);
      int64_t v35 = v36 - isa;
      if (!v38) {
        goto LABEL_20;
      }
      goto LABEL_109;
    case 3:
      goto LABEL_20;
    default:
      int64_t v35 = BYTE6(v27);
      goto LABEL_20;
  }
}

id sub_1000C5438(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_fallbackTransactionStarted) == 1
    && *(void *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentStartedCount) == 1)
  {
    uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_analytics);
    uint64_t v4 = *(void *)(v3 + 56);
    char v5 = (os_unfair_lock_s *)(v4 + 32);
    uint64_t v6 = (uint64_t *)(v4 + 16);
    __chkstk_darwin(a1, a2);
    os_unfair_lock_lock(v5);
    sub_100057D9C(v6);
    os_unfair_lock_unlock(v5);
    uint64_t v9 = 1;
    uint64_t v10 = *(os_unfair_lock_s **)(v3 + 56);
    uint64_t v11 = v10 + 8;
    uint64_t v12 = (uint64_t)&v10[4];
    char v13 = &byte_1001C5BE0;
    do
    {
      ++v13;
      __chkstk_darwin(v7, v8);
      os_unfair_lock_lock(v11);
      sub_100057A40(v12);
      os_unfair_lock_unlock(v11);
      --v9;
    }
    while (v9);
    if (qword_1001D9190 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for OSSignposter();
    sub_100003E78(v14, (uint64_t)qword_1001DD1F8);
    sub_1000452F0("reader-between_payment_reads", 28, 2, 0xD000000000000026, 0x8000000100198B40, (unint64_t)"reader-postProcessing", 21, 2, 0xD000000000000028, 0x8000000100198B90);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_pollingRestart) = 1;
    *(unsigned char *)(v2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_cardTearSent) = 0;
    return sub_1000B919C(1);
  }
  else
  {
    return sub_1000B7038(1);
  }
}

uint64_t sub_1000C56A8(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readCompleteSuccessSent) & 1) == 0
    && result == 16)
  {
    id v3 = sub_1000C7320(9, 0);
    *(unsigned char *)(v1 + v2) = 1;
    __chkstk_darwin(v3, v4);
    uint64_t v6 = (uint64_t *)&v5[4];
    uint64_t v7 = v5 + 8;
    os_unfair_lock_lock(v5 + 8);
    sub_1000578C8(v6);
    os_unfair_lock_unlock(v7);
    if (qword_1001D9190 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for OSSignposter();
    sub_100003E78(v8, (uint64_t)qword_1001DD1F8);
    return sub_100044E30("reader-payment_read_success", 27, 2, *(void *)(v1 + OBJC_IVAR____TtC9SPREngine13ReadOperation_nfSeReaderSession), 0xD00000000000001CLL, 0x8000000100198B00);
  }
  return result;
}

unint64_t sub_1000C5808(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

void sub_1000C5854(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  type metadata accessor for TLV();
  static TLV.decode(from:)(a1, a2);
  unint64_t v7 = *(void *)TLVTag.thirdPartyData.unsafeMutableAddressor();
  sub_100003EB0((uint64_t *)&unk_1001DF8B0);
  sub_100038F5C((unint64_t *)&qword_1001DA550, (uint64_t *)&unk_1001DF8B0);
  uint64_t v8 = Collection<>.first(tag:)();
  uint64_t v9 = &off_1001DD000;
  if (!v8)
  {
    TLVTag.cardInterfaceCapabilities.unsafeMutableAddressor();
    uint64_t v18 = Collection<>.first(tag:)();
    if (v18)
    {
      unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 152))(v18);
      uint64_t v3 = v19;
      swift_release();
      if (qword_1001D9188 == -1) {
        goto LABEL_5;
      }
      goto LABEL_21;
    }
    goto LABEL_9;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 152))(v8);
  uint64_t v12 = v11;
  swift_release();
  char v13 = &off_1001DD000;
  sub_100003EB0((uint64_t *)&unk_1001DD390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = 12;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 48) = v12;
  unint64_t v7 = sub_1001052FC(inited);
  __chkstk_darwin(v7, v15);
  uint64_t v17 = (uint64_t *)&v16[4];
  uint64_t v3 = v16 + 8;
  os_unfair_lock_lock(v16 + 8);
  sub_1000C7240(v17);
  while (1)
  {
    os_unfair_lock_unlock(v3);
    swift_bridgeObjectRelease();
    uint64_t v9 = v13;
LABEL_9:
    TLVTag.interacCardTransactionInformation.unsafeMutableAddressor();
    uint64_t v28 = Collection<>.first(tag:)();
    uint64_t v29 = swift_bridgeObjectRelease();
    if (!v28) {
      break;
    }
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 144))(v29);
    unint64_t v32 = v31;
    swift_release();
    uint64_t v33 = *(uint64_t *)((char *)v9[75] + v4);
    uint64_t v34 = 0;
    switch(v32 >> 62)
    {
      case 1uLL:
        uint64_t v34 = (int)v30;
        break;
      case 2uLL:
        uint64_t v34 = *(void *)(v30 + 16);
        break;
      default:
        break;
    }
    if (!__OFADD__(v34, *(void *)TLVTag.OFFSET_BYTE_2.unsafeMutableAddressor()))
    {
      Data.subscript.getter();
      sub_10002C874();
      Swift::Bool v35 = UnsignedInteger.readBit(_:)(0);
      sub_100006628(v30, v32);
      *(unsigned char *)(v33 + 133) = v35;
      break;
    }
    __break(1u);
LABEL_21:
    swift_once();
LABEL_5:
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003E78(v20, (uint64_t)qword_1001DD1E0);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "thirdPartyData absent, get formFactor from cardInterfaceCapabilities", v23, 2u);
      swift_slowDealloc();
    }

    char v13 = v9;
    sub_100003EB0((uint64_t *)&unk_1001DD390);
    uint64_t v24 = swift_initStackObject();
    *(_OWORD *)(v24 + 16) = xmmword_100186100;
    *(unsigned char *)(v24 + 32) = 12;
    *(void *)(v24 + 64) = &type metadata for String;
    *(void *)(v24 + 40) = v7;
    *(void *)(v24 + 48) = v3;
    unint64_t v7 = sub_1001052FC(v24);
    __chkstk_darwin(v7, v25);
    unint64_t v27 = (uint64_t *)&v26[4];
    uint64_t v3 = v26 + 8;
    os_unfair_lock_lock(v26 + 8);
    sub_1000C7240(v27);
  }
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_100003E78(v36, (uint64_t)qword_1001DD1E0);
  os_log_type_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, v38))
  {
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "ReadOperation.processPayAppletAnalytics() ended", v39, 2u);
    swift_slowDealloc();
  }
}

uint64_t type metadata accessor for ReadOperation()
{
  return self;
}

uint64_t sub_1000C5E88(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1000AF7DC(a1, *a2, a3, (uint64_t (*)(uint64_t))sub_100057EEC);
}

void *sub_1000C5EB8(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v5) {
      break;
    }
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = 0;
    while (v5 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      uint64_t v10 = v8;
      sub_1000BEA00(&v10, a2, &v11);

      if (v2) {
        return (void *)swift_release();
      }
      ++v7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v5 == v7) {
        return v12;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000C6020(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C6030()
{
  return swift_release();
}

uint64_t *sub_1000C6038(uint64_t *result)
{
  uint64_t v1 = *result;
  unint64_t v2 = result[1];
  uint64_t v3 = result;
  switch(v2 >> 62)
  {
    case 1uLL:
      BOOL v5 = __OFSUB__(HIDWORD(v1), v1);
      int v6 = HIDWORD(v1) - v1;
      if (v5) {
        goto LABEL_62;
      }
      uint64_t v4 = v6;
LABEL_6:
      if (v4 < 0) {
        goto LABEL_61;
      }
LABEL_7:
      if (!v4) {
        return result;
      }
      uint64_t v10 = 0;
      break;
    case 2uLL:
      uint64_t v9 = v1 + 16;
      uint64_t v7 = *(void *)(v1 + 16);
      uint64_t v8 = *(void *)(v9 + 8);
      uint64_t v4 = v8 - v7;
      if (!__OFSUB__(v8, v7)) {
        goto LABEL_6;
      }
      goto LABEL_63;
    case 3uLL:
      return result;
    default:
      uint64_t v4 = BYTE6(v2);
      goto LABEL_7;
  }
  while (2)
  {
    if (v4 == v10)
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
    }
    uint64_t v11 = v10 + 1;
    uint64_t v13 = *v3;
    unint64_t v12 = v3[1];
    unint64_t v14 = v12 >> 62;
    switch(v12 >> 62)
    {
      case 1uLL:
        if (v10 >= v13 >> 32 || v10 < (int)v13) {
          goto LABEL_50;
        }
        uint64_t v17 = __DataStorage._bytes.getter();
        if (!v17) {
          goto LABEL_65;
        }
        uint64_t v18 = v17;
        uint64_t v19 = __DataStorage._offset.getter();
        uint64_t v20 = v10 - v19;
        if (!__OFSUB__(v10, v19)) {
          goto LABEL_25;
        }
        goto LABEL_52;
      case 2uLL:
        if (v10 < *(void *)(v13 + 16)) {
          goto LABEL_51;
        }
        if (v10 >= *(void *)(v13 + 24)) {
          goto LABEL_53;
        }
        uint64_t v21 = __DataStorage._bytes.getter();
        if (!v21) {
          goto LABEL_66;
        }
        uint64_t v18 = v21;
        uint64_t v22 = __DataStorage._offset.getter();
        uint64_t v20 = v10 - v22;
        if (__OFSUB__(v10, v22)) {
          goto LABEL_54;
        }
LABEL_25:
        int v15 = *(unsigned __int8 *)(v18 + v20);
LABEL_26:
        if ((v15 - 58) > 0xFFFFFFF5)
        {
          if (v14)
          {
            if (v14 == 1)
            {
              if (v10 >= v13 >> 32 || v10 < (int)v13) {
                goto LABEL_55;
              }
              uint64_t v23 = __DataStorage._bytes.getter();
              if (!v23) {
                goto LABEL_67;
              }
              uint64_t v24 = v23;
              uint64_t v25 = __DataStorage._offset.getter();
              uint64_t v26 = v10 - v25;
              if (__OFSUB__(v10, v25)) {
                goto LABEL_58;
              }
            }
            else
            {
              if (v10 < *(void *)(v13 + 16)) {
                goto LABEL_57;
              }
              if (v10 >= *(void *)(v13 + 24)) {
                goto LABEL_59;
              }
              uint64_t v28 = __DataStorage._bytes.getter();
              if (!v28) {
                goto LABEL_68;
              }
              uint64_t v24 = v28;
              uint64_t v29 = __DataStorage._offset.getter();
              uint64_t v26 = v10 - v29;
              if (__OFSUB__(v10, v29)) {
                goto LABEL_60;
              }
            }
            int v27 = *(unsigned __int8 *)(v24 + v26);
          }
          else
          {
            if (v10 >= (unint64_t)BYTE6(v12)) {
              goto LABEL_56;
            }
            uint64_t v30 = v13;
            __int16 v31 = v12;
            char v32 = BYTE2(v12);
            char v33 = BYTE3(v12);
            char v34 = BYTE4(v12);
            char v35 = BYTE5(v12);
            int v27 = *((unsigned __int8 *)&v30 + v10);
          }
          if (((v27 - 48) & 0xFFFFFF00) != 0) {
            goto LABEL_48;
          }
          uint64_t result = (uint64_t *)Data._Representation.subscript.setter();
          ++v10;
          if (v4 == v11) {
            return result;
          }
          continue;
        }
        sub_10002A544(4000, 0xD000000000000021, (void *)0x8000000100198AB0, 0);
        return (uint64_t *)swift_willThrow();
      case 3uLL:
        goto LABEL_64;
      default:
        if (v10 >= (unint64_t)BYTE6(v12)) {
          goto LABEL_49;
        }
        LOWORD(v30) = *v3;
        BYTE2(v30) = BYTE2(v13);
        BYTE3(v30) = BYTE3(v13);
        BYTE4(v30) = BYTE4(v13);
        BYTE5(v30) = BYTE5(v13);
        BYTE6(v30) = BYTE6(v13);
        HIBYTE(v30) = HIBYTE(v13);
        __int16 v31 = v12;
        char v32 = BYTE2(v12);
        char v33 = BYTE3(v12);
        char v34 = BYTE4(v12);
        char v35 = BYTE5(v12);
        int v15 = *((unsigned __int8 *)&v30 + v10);
        goto LABEL_26;
    }
  }
}

char *sub_1000C640C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DBEB8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  strcpy((char *)v46, "\\d+\\.\\d+\\.\\d+");
  HIWORD(v46[1]) = -4864;
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  unint64_t v41 = sub_10000A87C();
  unint64_t v9 = StringProtocol.range<A>(of:options:range:locale:)();
  uint64_t v11 = v10;
  char v13 = v12;
  sub_10005F4F8((uint64_t)v7, &qword_1001DBEB8);
  swift_bridgeObjectRelease();
  if (v13) {
    return (char *)_swiftEmptyArrayStorage;
  }
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100003E78(v14, (uint64_t)qword_1001DD1E0);
  swift_bridgeObjectRetain_n();
  int v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v45 = v11;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v47 = v43;
    *(_DWORD *)uint64_t v17 = 136446210;
    v42[1] = v17 + 4;
    swift_bridgeObjectRetain();
    sub_1000C5808(v9, a1, a2);
    unint64_t v44 = v9;
    swift_bridgeObjectRelease();
    uint64_t v18 = static String._fromSubstring(_:)();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    v46[0] = sub_100005EB8(v18, v20, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "applet version: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v22 = String.subscript.getter();
  unint64_t v24 = v23;
  uint64_t v47 = 46;
  uint64_t v48 = 0xE100000000000000;
  __chkstk_darwin(v22, v23);
  uint64_t v40 = &v47;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_10009394C(0x7FFFFFFFFFFFFFFFLL, 1, sub_100095158, (uint64_t)&v42[-4], v22, v24);
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    int v27 = (unint64_t *)(v25 + 56);
    uint64_t v21 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      unint64_t v29 = *(v27 - 3);
      unint64_t v28 = *(v27 - 2);
      if (!((v28 ^ v29) >> 14)) {
        break;
      }
      unint64_t v31 = *(v27 - 1);
      unint64_t v30 = *v27;
      if ((*v27 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v33 = (uint64_t)sub_10009412C(v29, v28, v31, v30, 10);
        char v36 = v35;
        swift_bridgeObjectRelease();
        if (v36) {
          break;
        }
      }
      else
      {
        if ((v30 & 0x2000000000000000) != 0)
        {
          uint64_t v47 = *(v27 - 1);
          uint64_t v48 = v30 & 0xFFFFFFFFFFFFFFLL;
          char v32 = &v47;
        }
        else if ((v31 & 0x1000000000000000) != 0)
        {
          char v32 = (uint64_t *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          char v32 = (uint64_t *)_StringObject.sharedUTF8.getter();
        }
        uint64_t v33 = sub_1000949E0((uint64_t)v32, v29, v28, v31, v30, 10);
        LOBYTE(v46[0]) = v34 & 1;
        if (v34) {
          break;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_18;
      }
LABEL_22:
      unint64_t v38 = *((void *)v21 + 2);
      unint64_t v37 = *((void *)v21 + 3);
      if (v38 >= v37 >> 1) {
        uint64_t v21 = sub_10015A464((char *)(v37 > 1), v38 + 1, 1, v21);
      }
      *((void *)v21 + 2) = v38 + 1;
      *(void *)&v21[8 * v38 + 32] = v33;
      v27 += 4;
      if (!--v26) {
        goto LABEL_28;
      }
    }
    uint64_t v33 = 0;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_22;
    }
LABEL_18:
    uint64_t v21 = sub_10015A464(0, *((void *)v21 + 2) + 1, 1, v21);
    goto LABEL_22;
  }
  uint64_t v21 = (char *)_swiftEmptyArrayStorage;
LABEL_28:
  swift_bridgeObjectRelease();
  return v21;
}

BOOL sub_1000C6950(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 3) {
    return *(void *)(a1 + 32) > 2;
  }
  if (qword_1001D9188 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DD1E0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "applet version array bad length", v5, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t *sub_1000C6A48(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  sub_100006628(*a1, a1[1]);
  sub_100006628(v2, v3);
  return a1;
}

uint64_t sub_1000C6A90()
{
  switch(*(void *)(*(void *)(v0 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readerConfig) + 16))
  {
    case 0:
      return sub_10012CB58((uint64_t)&off_1001C5770);
    case 1:
      sub_100003EB0(&qword_1001D8778);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_100189E90;
      *(_DWORD *)(v2 + 32) = 362;
      char v3 = 2;
      goto LABEL_8;
    case 2:
      sub_100003EB0(&qword_1001D8778);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_100189E90;
      *(_DWORD *)(v2 + 32) = 362;
      char v3 = 1;
LABEL_8:
      *(unsigned char *)(v2 + 36) = v3;
      break;
    case 3:
      sub_100003EB0(&qword_1001D8778);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_100189E90;
      *(_DWORD *)(v2 + 32) = 362;
      *(unsigned char *)(v2 + 36) = 0;
      break;
    default:
      type metadata accessor for SPRReaderMode(0);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1000C6C18);
  }
  uint64_t v4 = sub_10012CB58(v2);
  swift_bridgeObjectRelease();
  return v4;
}

void *sub_1000C6C28(unint64_t a1, void (*a2)(unint64_t, id))
{
  specialized ContiguousArray.reserveCapacity(_:)();
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_12;
        }
        a2(v4, v5);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v4;
        if (v7 == v3) {
          goto LABEL_14;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_14;
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_1000C6D84(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1000C6DC0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2 >> 60 != 15)
  {
    sub_1000065D0(result, a2);
    return sub_1000065D0(a4, a5);
  }
  return result;
}

uint64_t sub_1000C6E10(uint64_t *a1)
{
  return sub_1000AF93C(a1, **(unsigned char **)(v1 + 16));
}

uint64_t sub_1000C6E34()
{
  return _swift_deallocObject(v0, 24, 7);
}

unsigned char *sub_1000C6E6C()
{
  return sub_1000C2CBC(*(unsigned char **)(v0 + 16));
}

void sub_1000C6E78()
{
  sub_1000C0EFC(*(void *)(v0 + 24));
}

uint64_t sub_1000C6EA0(uint64_t *a1)
{
  return sub_1000AF7DC(a1, **(unsigned __int8 **)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(uint64_t))sub_100057EEC);
}

void sub_1000C6ED8()
{
  sub_1000C0630(*(void *)(v0 + 24));
}

id sub_1000C6F00(uint64_t a1, void *a2)
{
  return sub_1000BF438(a1, a2, *(unsigned char **)(v2 + 16), *(unsigned char **)(v2 + 24), *(unsigned char **)(v2 + 32), *(unsigned char **)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_1000C6F10()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000C6F48()
{
}

uint64_t sub_1000C6F64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000C6FB0()
{
  sub_1000BB7B0(*(void *)(v0 + 24));
}

uint64_t sub_1000C6FD8()
{
  return _swift_deallocObject(v0, 25, 7);
}

void sub_1000C7010()
{
  sub_1000BAB2C(*(unsigned char *)(v0 + 24));
}

id sub_1000C703C()
{
  return sub_1000BB174();
}

uint64_t sub_1000C7060()
{
  return sub_1000B77E0(*(void *)(v0 + 16));
}

uint64_t sub_1000C7068()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C7078()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000C70B8()
{
}

uint64_t sub_1000C70C0()
{
  return sub_1000B689C(*(void *)(v0 + 16));
}

uint64_t storeEnumTagSinglePayload for ReadOperation.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C7194);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReadOperation.State()
{
  return &type metadata for ReadOperation.State;
}

uint64_t sub_1000C7240(uint64_t *a1)
{
  return sub_10005A488(a1);
}

uint64_t sub_1000C7258()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD430);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD430);
  if (qword_1001D9238 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FC8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1000C7320(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1001D9198 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DD430);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = SPRReadEvent.description.getter();
    sub_100005EB8(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v12 = SPRReaderMode.description.getter();
    sub_100005EB8(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "onUpdate(event: .%s, mode: .%s)", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id result = *(id *)(v3 + 16);
  if (result) {
    return [result onUpdateWithEvent:a1 mode:a2];
  }
  return result;
}

uint64_t sub_1000C755C(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1001D9198 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DD430);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 136315138;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    uint64_t v8 = String.init<A>(describing:)();
    sub_100005EB8(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "onFailure(error: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return (*(uint64_t (**)(void, uint64_t))(v2 + 24))(0, a1);
}

uint64_t sub_1000C7810()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReadDelegateRelay()
{
  return self;
}

void *sub_1000C7874(uint64_t a1, void *a2)
{
  uint64_t v26 = *(void *)(a1 + 16);
  if (!v26) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v25 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = _swiftEmptyArrayStorage;
  unint64_t v24 = a2;
  while (1)
  {
    uint64_t v5 = (void *)*a2;
    uint64_t v6 = *(void *)(*a2 + 16);
    if (!v6) {
      goto LABEL_4;
    }
    unint64_t v7 = (uint64_t *)(v25 + 40 * v3);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    BOOL v10 = v5[4] == *v7 && v5[5] == v9;
    long long v27 = *(_OWORD *)(v7 + 3);
    uint64_t v28 = v7[2];
    if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v11 = 0;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_12;
      }
LABEL_27:
      uint64_t v5 = sub_1001341CC(v5);
      goto LABEL_12;
    }
    unint64_t v19 = v5 + 7;
    uint64_t v20 = 1;
    do
    {
      if (v6 == v20)
      {
        a2 = v24;
        goto LABEL_4;
      }
      unint64_t v11 = v20;
      if (*(v19 - 1) == v8 && *v19 == v9) {
        break;
      }
      ++v20;
      v19 += 2;
    }
    while ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_27;
    }
LABEL_12:
    unint64_t v12 = v5[2];
    if (v11 >= v12) {
      break;
    }
    unint64_t v13 = v12 - 1;
    uint64_t v14 = v12 - 1 - v11;
    if (v14 < 0) {
      goto LABEL_32;
    }
    memmove(&v5[2 * v11 + 4], &v5[2 * v11 + 6], 16 * v14);
    v5[2] = v13;
    a2 = v24;
    *unint64_t v24 = v5;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = sub_10015AEAC(0, v4[2] + 1, 1, v4);
    }
    unint64_t v16 = v4[2];
    unint64_t v15 = v4[3];
    long long v17 = v27;
    if (v16 >= v15 >> 1)
    {
      unint64_t v22 = sub_10015AEAC((void *)(v15 > 1), v16 + 1, 1, v4);
      long long v17 = v27;
      uint64_t v4 = v22;
    }
    v4[2] = v16 + 1;
    uint64_t v18 = &v4[5 * v16];
    v18[4] = v8;
    v18[5] = v9;
    v18[6] = v28;
    *(_OWORD *)(v18 + 7) = v17;
LABEL_4:
    if (++v3 == v26)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  __break(1u);
LABEL_32:
  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C7B2C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD508);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD508);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_1000C7BF4()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1000CC188(v0);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

uint64_t sub_1000C7CA8()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x6C61626F6C67202CLL;
  v4._object = (void *)0xEC000000203A6449;
  String.append(_:)(v4);
  uint64_t v5 = v0[2];
  uint64_t v6 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x2043482D544B202CLL;
  v8._object = (void *)0xED0000203A70616DLL;
  String.append(_:)(v8);
  type metadata accessor for KernelTokenHostConfigurationMapping();
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0x49656C69666F7270;
}

void sub_1000C7DE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v4 = v1[6];
  sub_100006788(v2, v3);
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  uint64_t v7 = sub_100003EB0(&qword_1001DD6B8);
  sub_1000CC79C(&qword_1001DD6D0, (void (*)(void))sub_1000CC80C);
  sub_1000D52CC(v5, v6, v3, v7, v4);
  swift_beginAccess();
  v1[9] = v17;
  swift_bridgeObjectRelease();
  if (qword_1001D91A0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DD508);
  swift_retain_n();
  Swift::String v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_retain();
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = sub_1000CC188(v12);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_release();
    swift_bridgeObjectRelease();
    sub_100005EB8(0xD000000000000011, 0x8000000100197B30, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "PayAppletProfileCache: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

void sub_1000C8184()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  uint64_t v3 = v0[5];
  uint64_t v4 = v1[6];
  sub_100006788(v2, v3);
  uint64_t v5 = v1[7];
  uint64_t v6 = v1[8];
  swift_beginAccess();
  uint64_t v17 = v1[9];
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100003EB0(&qword_1001DD6B8);
  sub_1000CC79C(&qword_1001DD6C0, (void (*)(void))sub_1000CC748);
  sub_1000D5134(v5, v6, (uint64_t)&v17, v3, v7, v4);
  swift_bridgeObjectRelease();
  if (qword_1001D91A0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DD508);
  swift_retain_n();
  Swift::String v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_retain();
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = sub_1000CC188(v12);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    uint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    uint64_t v17 = 0xD000000000000011;
    unint64_t v18 = 0x8000000100197B30;
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v15;
    String.append(_:)(v16);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_100005EB8(v17, v18, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "PayAppletProfileCache: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1000C86E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100003EB0(&qword_1001DD6A8);
  __chkstk_darwin(v6 - 8, v7);
  Swift::String v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100003EB0(&qword_1001DD6B0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for KernelTokenHostConfigurationMapping();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C8984(a1, (uint64_t *)v9);
  uint64_t v18 = sub_100003EB0(&qword_1001DD6A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v9, 1, v18) == 1)
  {
    sub_1000CC6E8((uint64_t)v9);
    uint64_t v19 = *(void *)(v3 + 80);
    uint64_t v20 = *(void *)(v3 + 88);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v26 = *((void *)v9 + 2);
    uint64_t v27 = (uint64_t)&v9[*(int *)(v18 + 48)];
    uint64_t v28 = (uint64_t)&v13[*(int *)(v10 + 48)];
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v9;
    *((void *)v13 + 2) = v26;
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(v9 + 24);
    sub_1000CC628(v27, v28);
    uint64_t v29 = *(void *)v13;
    uint64_t v23 = *((void *)v13 + 1);
    uint64_t v24 = *((void *)v13 + 2);
    uint64_t v25 = *((void *)v13 + 3);
    v32[1] = *((void *)v13 + 4);
    uint64_t v33 = v29;
    sub_1000CC628((uint64_t)&v13[*(int *)(v10 + 48)], (uint64_t)v17);
    uint64_t v30 = *(void *)(v3 + 88);
    uint64_t v34 = *(void *)&v17[*(int *)(v14 + 20)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100017750(v30);
    uint64_t v20 = v34;
    uint64_t v34 = *(void *)&v17[*(int *)(v14 + 24)];
    swift_bridgeObjectRetain();
    uint64_t v31 = swift_bridgeObjectRetain();
    sub_100017750(v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = v34;
    uint64_t result = sub_1000CC68C((uint64_t)v17);
    uint64_t v22 = v33;
  }
  *a2 = v22;
  a2[1] = v23;
  a2[2] = v24;
  a2[3] = v25;
  a2[4] = v20;
  a2[5] = v19;
  return result;
}

uint64_t sub_1000C8984@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v65 = a2;
  unint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  os_log_type_t v61 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v58 - v11;
  uint64_t v13 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v68 = *(void *)(v13 - 8);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D91A0 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v66 = sub_100003E78(v17, (uint64_t)qword_1001DD508);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v67 = v6;
  unint64_t v62 = v12;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v73[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v72 = sub_100005EB8(0xD00000000000001FLL, 0x8000000100198F70, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "PayAppletProfileCache.%s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v67;
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v22 = *(void *)(v3 + 72);
  uint64_t v12 = *(char **)(v22 + 16);
  if (v12)
  {
    unint64_t v60 = v5;
    uint64_t v6 = v22 + 32;
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    uint64_t v58 = v22 + 32;
    uint64_t v59 = v12;
    while (1)
    {
      if (v5 >= *(void *)(v22 + 16))
      {
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v23 = (uint64_t *)(v6 + 40 * v5);
      uint64_t v3 = v23[4];
      uint64_t v24 = *(void *)(v3 + 16);
      if (v24) {
        break;
      }
LABEL_6:
      if ((char *)++v5 == v12)
      {
        swift_bridgeObjectRelease();
        unint64_t v5 = v60;
        uint64_t v6 = v67;
        goto LABEL_18;
      }
    }
    uint64_t v25 = *v23;
    uint64_t v26 = (uint8_t *)v23[1];
    unint64_t v27 = v23[3];
    uint64_t v63 = v23[2];
    uint64_t v64 = v25;
    uint64_t v28 = v68;
    uint64_t v29 = v3 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
    swift_bridgeObjectRetain_n();
    os_log_type_t v70 = v26;
    swift_bridgeObjectRetain();
    unint64_t v69 = v27;
    swift_bridgeObjectRetain();
    uint64_t v30 = *(void *)(v28 + 72);
    while (1)
    {
      sub_1000CC5C4(v29, (uint64_t)v16);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_1000CC68C((uint64_t)v16);
      v29 += v30;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v58;
        uint64_t v12 = v59;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v67;
    char v32 = v62;
    unint64_t v33 = v60;
    (*(void (**)(char *, uint64_t, unint64_t))(v67 + 16))(v62, a1, v60);
    unint64_t v34 = (unint64_t)v70;
    swift_bridgeObjectRetain_n();
    unint64_t v35 = v69;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    int v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v39 = v32;
      uint64_t v40 = swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      uint64_t v72 = v68;
      *(_DWORD *)uint64_t v40 = 136315650;
      LODWORD(v66) = v38;
      UUID.uuidString.getter();
      uint64_t v41 = sub_100117604();
      uint64_t v71 = sub_100005EB8(v41, v42, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = v39;
      unint64_t v34 = (unint64_t)v70;
      (*(void (**)(char *, unint64_t))(v31 + 8))(v43, v33);
      unint64_t v35 = v69;
      *(_WORD *)(v40 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v44 = v64;
      uint64_t v71 = sub_100005EB8(v64, v34, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v40 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v45 = v63;
      uint64_t v71 = sub_100005EB8(v63, v35, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v66, "found tpid %s -> profile %s with global %s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v46 = v65;
    }
    else
    {
      (*(void (**)(char *, unint64_t))(v31 + 8))(v32, v33);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v44 = v64;
      uint64_t v46 = v65;
      uint64_t v45 = v63;
    }
    uint64_t v47 = sub_100003EB0(&qword_1001DD6A0);
    uint64_t v48 = (uint64_t)v46 + *(int *)(v47 + 48);
    *uint64_t v46 = v44;
    v46[1] = v34;
    void v46[2] = v45;
    v46[3] = v35;
    v46[4] = v3;
    sub_1000CC628((uint64_t)v16, v48);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 0, 1, v47);
  }
  else
  {
LABEL_18:
    uint64_t v50 = v61;
    (*(void (**)(char *, uint64_t, unint64_t))(v6 + 16))(v61, a1, v5);
    __int16 v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)unint64_t v53 = 136315138;
      os_log_type_t v70 = v53 + 4;
      UUID.uuidString.getter();
      uint64_t v54 = sub_100117604();
      uint64_t v71 = sub_100005EB8(v54, v55, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t))(v6 + 8))(v50, v5);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Not found in cache: %s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, unint64_t))(v6 + 8))(v50, v5);
    }

    id v56 = v65;
    uint64_t v57 = sub_100003EB0(&qword_1001DD6A0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 1, 1, v57);
  }
}

uint64_t sub_1000C9200(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (qword_1001D91A0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DD508);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v24 = sub_100005EB8(0xD000000000000017, 0x8000000100198F50, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v12 = Array.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_100005EB8(v12, v14, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s\nsync with %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = a1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000C7874(v15, &v24);
  swift_bridgeObjectRelease();
  *(void *)(v4 + 72) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = v24;
  uint64_t v18 = *(void *)(v24 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v19 = (uint64_t *)(v17 + 40);
    do
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      swift_bridgeObjectRetain();
      sub_1000C9640(v20, v21, a2, a3, _swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C94E0()
{
  uint64_t v1 = v0;
  if (qword_1001D91A0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DD508);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "_removeFirst()", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v1 + 72);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = *(void *)(v7 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100021AA8(0, 1);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000C9640(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = v5;
  if (qword_1001D91A0 != -1) {
LABEL_38:
  }
    swift_once();
  __int16 v51 = a4;
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DD508);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "_add(profile:global:kernelTokenInfo:)", v13, 2u);
    swift_slowDealloc();
  }

  __int16 v49 = (void **)(v6 + 72);
  swift_beginAccess();
  unint64_t v14 = *(void **)(v6 + 72);
  uint64_t v15 = v14[2];
  if (!v15) {
    goto LABEL_19;
  }
  uint64_t v6 = v14[8];
  BOOL v16 = v14[4] == a1 && v14[5] == a2;
  uint64_t v52 = a2;
  if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    a4 = v14 + 13;
    unint64_t v17 = 1;
    while (1)
    {
      a2 = v52;
      if (v15 == v17) {
        break;
      }
      if (v17 >= v14[2])
      {
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v6 = *a4;
      if (*(a4 - 4) == a1 && *(a4 - 3) == v52)
      {
        unint64_t v19 = v17;
        goto LABEL_26;
      }
      a4 += 5;
      unint64_t v19 = v17++;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_26;
      }
    }
LABEL_19:
    *(void *)&long long v59 = a1;
    *((void *)&v59 + 1) = a2;
    *(void *)&long long v60 = a3;
    *((void *)&v60 + 1) = v51;
    os_log_type_t v61 = a5;
    swift_beginAccess();
    uint64_t v20 = *v49;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *__int16 v49 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v20 = sub_10015AEAC(0, v20[2] + 1, 1, v20);
      *__int16 v49 = v20;
    }
    unint64_t v23 = v20[2];
    unint64_t v22 = v20[3];
    if (v23 >= v22 >> 1)
    {
      uint64_t v20 = sub_10015AEAC((void *)(v22 > 1), v23 + 1, 1, v20);
      *__int16 v49 = v20;
    }
    void v20[2] = v23 + 1;
    uint64_t v24 = &v20[5 * v23];
    long long v25 = v59;
    long long v26 = v60;
    v24[8] = v61;
    *((_OWORD *)v24 + 2) = v25;
    *((_OWORD *)v24 + 3) = v26;
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(void *)&v54[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_1000C7CA8();
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53[0] = sub_100005EB8(v30, v32, (uint64_t *)v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "New cache entry: %s", v29, 0xCu);
      swift_arrayDestroy();
LABEL_32:
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }
  unint64_t v19 = 0;
LABEL_26:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  sub_100133440(v19, (uint64_t)v54);
  swift_endAccess();
  long long v58 = v54[0];
  sub_10002A434((uint64_t)&v58);
  long long v57 = v54[1];
  sub_10002A434((uint64_t)&v57);
  uint64_t v56 = v55;
  sub_1000CC430((uint64_t)&v56);
  *(void *)&long long v59 = a5;
  swift_bridgeObjectRetain();
  uint64_t v33 = swift_bridgeObjectRetain();
  sub_1000178A4(v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = sub_1000CC45C(v59);
  swift_bridgeObjectRelease();
  unint64_t v35 = sub_1000CACB8(v34);
  swift_bridgeObjectRelease();
  *(void *)&long long v59 = a1;
  *((void *)&v59 + 1) = v52;
  *(void *)&long long v60 = a3;
  *((void *)&v60 + 1) = v51;
  os_log_type_t v61 = v35;
  swift_beginAccess();
  char v36 = *v49;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain();
  char v37 = swift_isUniquelyReferenced_nonNull_native();
  *__int16 v49 = v36;
  if ((v37 & 1) == 0)
  {
    char v36 = sub_10015AEAC(0, v36[2] + 1, 1, v36);
    *__int16 v49 = v36;
  }
  unint64_t v39 = v36[2];
  unint64_t v38 = v36[3];
  if (v39 >= v38 >> 1)
  {
    char v36 = sub_10015AEAC((void *)(v38 > 1), v39 + 1, 1, v36);
    *__int16 v49 = v36;
  }
  v36[2] = v39 + 1;
  uint64_t v40 = &v36[5 * v39];
  long long v41 = v59;
  long long v42 = v60;
  v40[8] = v61;
  *((_OWORD *)v40 + 2) = v41;
  *((_OWORD *)v40 + 3) = v42;
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    v53[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315138;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v45 = sub_1000C7CA8();
    unint64_t v47 = v46;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100005EB8(v45, v47, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v43, "Updated KT-HC map of existing profile: %s", v44, 0xCu);
    swift_arrayDestroy();
    goto LABEL_32;
  }

  swift_release_n();
  swift_bridgeObjectRelease_n();
LABEL_35:
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1000C9DD4()
{
  sub_100006520(v0 + 16);
  sub_100006628(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PayAppletProfileCache()
{
  return self;
}

unint64_t sub_1000C9E50()
{
  return sub_1000C7BF4();
}

uint64_t sub_1000C9E74()
{
  unint64_t v1 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  UUID.uuidString.getter();
  v2._uint64_t countAndFlagsBits = sub_100117604();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for KernelTokenHostConfigurationMapping();
  if (*(void *)(*(void *)(v0 + *(int *)(v3 + 20)) + 16))
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v4._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD000000000000013;
    unint64_t v1 = 0x8000000100198F90;
  }
  else
  {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v1;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v0 + *(int *)(v3 + 24));
  unint64_t v8 = 0xE000000000000000;
  if (*(void *)(v7 + 16))
  {
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v10 = 0xD000000000000018;
    unint64_t v8 = 0x8000000100198FB0;
  }
  else
  {
    unint64_t v10 = 0;
  }
  unint64_t v11 = v8;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  return 0x6970742966617328;
}

uint64_t sub_1000CA044(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003EB0(&qword_1001DD7E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  Swift::String v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000CD8D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for UUID();
  sub_1000CD924(&qword_1001DD7E8, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for KernelTokenHostConfigurationMapping();
    uint64_t v14 = *(void *)(v3 + *(int *)(v10 + 20));
    char v13 = 1;
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    sub_10001EF84(&qword_1001D9B18);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + *(int *)(v10 + 24));
    char v13 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000CA28C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  os_log_type_t v28 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100003EB0(&qword_1001DD7C8);
  uint64_t v26 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v7);
  Swift::String v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for KernelTokenHostConfigurationMapping();
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000CD8D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100006520((uint64_t)a1);
  }
  uint64_t v15 = v26;
  uint64_t v14 = v27;
  uint64_t v24 = a1;
  LOBYTE(v31) = 0;
  sub_1000CD924(&qword_1001DD7D8, (void (*)(uint64_t))&type metadata accessor for UUID);
  BOOL v16 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v17 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  unint64_t v23 = v13;
  v17(v13, v16, v4);
  sub_100003EB0((uint64_t *)&unk_1001DA570);
  char v30 = 1;
  os_log_type_t v28 = (char *)sub_10001EF84(&qword_1001D9B10);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = v10;
  uint64_t v18 = *(int *)(v10 + 20);
  uint64_t v19 = (uint64_t)v23;
  *(void *)&v23[v18] = v31;
  char v30 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v29);
  *(void *)(v19 + *(int *)(v22 + 24)) = v31;
  sub_1000CC5C4(v19, v25);
  sub_100006520((uint64_t)v24);
  return sub_1000CC68C(v19);
}

uint64_t sub_1000CA694(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003EB0(&qword_1001DD788);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  Swift::String v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006788(a1, a1[3]);
  sub_1000CD208();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + 32);
    v11[15] = 2;
    sub_100003EB0(&qword_1001DD798);
    sub_1000CD25C(&qword_1001DD7A0, &qword_1001DD7A8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000CA880()
{
  unint64_t v1 = 0x7250737361707962;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000014;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_1000CA8E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000CD2F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CA908(uint64_t a1)
{
  unint64_t v2 = sub_1000CD8D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CA944(uint64_t a1)
{
  unint64_t v2 = sub_1000CD8D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CA980@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CA28C(a1, a2);
}

uint64_t sub_1000CA998(void *a1)
{
  return sub_1000CA044(a1);
}

Swift::Int sub_1000CA9B4()
{
  return Hasher._finalize()();
}

uint64_t sub_1000CAA3C()
{
  type metadata accessor for UUID();
  sub_1000CD924(&qword_1001DD690, (void (*)(uint64_t))&type metadata accessor for UUID);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1000CAAC0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000CAB48()
{
  uint64_t v1 = 0x64496C61626F6C67;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F546C656E72656BLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x49656C69666F7270;
  }
}

uint64_t sub_1000CABB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000CD450(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CABDC(uint64_t a1)
{
  unint64_t v2 = sub_1000CD208();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CAC18(uint64_t a1)
{
  unint64_t v2 = sub_1000CD208();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000CAC54@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000CD5D8(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1000CAC9C(void *a1)
{
  return sub_1000CA694(a1);
}

void *sub_1000CACB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100003EB0(&qword_1001DCF48);
  uint64_t v3 = *(void *)(type metadata accessor for KernelTokenHostConfigurationMapping() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  double result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1000CBD1C(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1000CC860();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000CAE0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100003EB0(&qword_1001DD6E0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1000CBFE8(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_1000CC860();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_1000CAEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000CD924(&qword_1001DD690, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v20 = a1;
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1000CC5C4(*(void *)(v11 + 48) + v16 * v14, (uint64_t)v10);
      char v17 = static UUID.== infix(_:_:)();
      sub_1000CC68C((uint64_t)v10);
      if (v17) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a1 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000CC68C(a2);
    sub_1000CC5C4(*(void *)(*v3 + 48) + v16 * v14, v20);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1000CC5C4(a2, (uint64_t)v10);
    uint64_t v21 = *v3;
    void *v3 = 0x8000000000000000;
    sub_1000CB510((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    void *v3 = v21;
    swift_bridgeObjectRelease();
    sub_1000CC628(a2, a1);
    return 1;
  }
}

uint64_t sub_1000CB14C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v35 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100003EB0(&qword_1001DD698);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    unint64_t v32 = v0;
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v34 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & v10;
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v33) {
          goto LABEL_33;
        }
        unint64_t v20 = v34[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v20 = v34[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v20 = v34[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v33)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v32;
                uint64_t v30 = 1 << *(unsigned char *)(v6 + 32);
                if (v30 > 63) {
                  bzero(v34, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v30;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v20 = v34[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v34[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v15 = v21;
            }
          }
        }
LABEL_23:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      uint64_t v22 = *(void *)(v35 + 72);
      sub_1000CC628(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_1000CD924(&qword_1001DD690, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = sub_1000CC628((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v8;
  return result;
}

uint64_t sub_1000CB510(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(*v4 + 16);
  unint64_t v14 = *(void *)(*v4 + 24);
  if (v14 > v13 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000CB14C();
  }
  else
  {
    if (v14 > v13)
    {
      sub_1000CB758();
      goto LABEL_12;
    }
    sub_1000CB994();
  }
  uint64_t v15 = *v4;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000CD924(&qword_1001DD690, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v15 + 32);
  a2 = v16 & ~v17;
  if ((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v26 = v8;
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v9 + 72);
    do
    {
      sub_1000CC5C4(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v12);
      char v20 = static UUID.== infix(_:_:)();
      sub_1000CC68C((uint64_t)v12);
      if (v20) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }
    while (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v21 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_1000CC628(a1, *(void *)(v21 + 48) + *(void *)(v9 + 72) * a2);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000CB758()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003EB0(&qword_1001DD698);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v11 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v11 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v11 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    sub_1000CC5C4(*(void *)(v7 + 48) + v20, (uint64_t)v6);
    uint64_t result = (void *)sub_1000CC628((uint64_t)v6, *(void *)(v9 + 48) + v20);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v17) {
    goto LABEL_25;
  }
  unint64_t v22 = *(void *)(v11 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000CB994()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v34 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100003EB0(&qword_1001DD698);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v31 = v0;
  uint64_t v32 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v33) {
        goto LABEL_33;
      }
      unint64_t v20 = *(void *)(v32 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v20 = *(void *)(v32 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v34 + 72);
    sub_1000CC5C4(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000CD924(&qword_1001DD690, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = sub_1000CC628((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22);
    ++*(void *)(v8 + 16);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v31;
    goto LABEL_35;
  }
  unint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v33) {
      goto LABEL_33;
    }
    unint64_t v20 = *(void *)(v32 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000CBD1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8 - 8, v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v11, v14);
  unint64_t v17 = (char *)&v32 - v16;
  uint64_t v37 = a4;
  uint64_t v20 = *(void *)(a4 + 56);
  uint64_t v19 = a4 + 56;
  uint64_t v18 = v20;
  uint64_t v21 = -1 << *(unsigned char *)(v19 - 24);
  if (-v21 < 64) {
    uint64_t v22 = ~(-1 << -(char)v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & v18;
  if (!a2)
  {
    int64_t v24 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v37;
    a1[1] = v19;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }
  if (!a3)
  {
    int64_t v24 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v19 - 24);
  uint64_t v35 = a1;
  int64_t v24 = 0;
  uint64_t v25 = 0;
  int64_t v36 = (unint64_t)(63 - v21) >> 6;
  int64_t v33 = v36 - 1;
  if (!v23) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    uint64_t v31 = *(void *)(v9 + 72);
    sub_1000CC5C4(*(void *)(v37 + 48) + v31 * v27, (uint64_t)v13);
    sub_1000CC628((uint64_t)v13, (uint64_t)v17);
    uint64_t result = sub_1000CC628((uint64_t)v17, a2);
    if (v25 == a3) {
      goto LABEL_37;
    }
    a2 += v31;
    if (v23) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v28 >= v36) {
      goto LABEL_32;
    }
    unint64_t v29 = *(void *)(v19 + 8 * v28);
    if (!v29) {
      break;
    }
LABEL_18:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v24 = v28;
  }
  v24 += 2;
  if (v28 + 1 >= v36)
  {
    unint64_t v23 = 0;
    int64_t v24 = v28;
    goto LABEL_36;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v24);
  if (v29) {
    goto LABEL_14;
  }
  int64_t v30 = v28 + 2;
  if (v28 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    unint64_t v23 = 0;
    int64_t v24 = v28 + 2;
    goto LABEL_36;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v24);
  if (v29)
  {
LABEL_14:
    int64_t v28 = v24;
    goto LABEL_18;
  }
  int64_t v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    unint64_t v23 = 0;
LABEL_36:
    a3 = v25;
LABEL_37:
    uint64_t v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v29 = *(void *)(v19 + 8 * v30);
  if (v29)
  {
LABEL_17:
    int64_t v28 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v36)
    {
      unint64_t v23 = 0;
      int64_t v24 = v33;
      goto LABEL_36;
    }
    unint64_t v29 = *(void *)(v19 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1000CBFE8(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    __int16 v14 = *(_WORD *)(*(void *)(a4 + 56) + 2 * v12);
    *(void *)a2 = v13;
    *(_WORD *)(a2 + 8) = v14;
    a2 += 16;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }
  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }
  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000CC188(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = swift_bridgeObjectRetain() + 64;
  do
  {
    uint64_t v5 = *(void *)(v3 - 32);
    uint64_t v4 = *(void **)(v3 - 24);
    uint64_t v7 = *(void *)(v3 - 16);
    uint64_t v6 = *(void **)(v3 - 8);
    ++v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v5;
    v10._object = v4;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x6C61626F6C67202CLL;
    v11._object = (void *)0xEC000000203A6449;
    String.append(_:)(v11);
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = v7;
    v12._object = v6;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 0x2043482D544B202CLL;
    v13._object = (void *)0xED0000203A70616DLL;
    String.append(_:)(v13);
    type metadata accessor for KernelTokenHostConfigurationMapping();
    swift_bridgeObjectRetain();
    v14._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 0x49656C69666F7270;
    v15._object = (void *)0xEB00000000203A64;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 8236;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = 0x23746F6C53;
    v17._object = (void *)0xE500000000000000;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v3 += 40;
  }
  while (v1 != v2);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for KernelTokenHostConfigurationMapping()
{
  uint64_t result = qword_1001DD740;
  if (!qword_1001DD740) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CC430(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000CC45C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KernelTokenHostConfigurationMapping();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  Swift::String v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  sub_1000CD924(&qword_1001DD688, (void (*)(uint64_t))type metadata accessor for KernelTokenHostConfigurationMapping);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v16 = result;
  if (v11)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_1000CC5C4(v13, (uint64_t)v7);
      sub_1000CAEF4((uint64_t)v10, (uint64_t)v7);
      sub_1000CC68C((uint64_t)v10);
      v13 += v14;
      --v11;
    }
    while (v11);
    return v16;
  }
  return result;
}

uint64_t sub_1000CC5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KernelTokenHostConfigurationMapping();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CC628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KernelTokenHostConfigurationMapping();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CC68C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KernelTokenHostConfigurationMapping();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000CC6E8(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001DD6A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000CC748()
{
  unint64_t result = qword_1001DD6C8;
  if (!qword_1001DD6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD6C8);
  }
  return result;
}

uint64_t sub_1000CC79C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4(&qword_1001DD6B8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000CC80C()
{
  unint64_t result = qword_1001DD6D8;
  if (!qword_1001DD6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD6D8);
  }
  return result;
}

uint64_t sub_1000CC860()
{
  return swift_release();
}

void *sub_1000CC868(void *a1)
{
  uint64_t v3 = a1;
  sub_1000F7B54((uint64_t)v13);
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v4 = v14;
    uint64_t v5 = v15;
    sub_100006788(v13, v14);
    sub_100021C74(v4, v5);
    uint64_t v6 = (char *)a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    uint64_t v7 = type metadata accessor for Settings();
    uint64_t v8 = *(void *)&v6[*(int *)(v7 + 52)];
    uint64_t v9 = *(void *)&v6[*(int *)(v7 + 56)];
    type metadata accessor for PayAppletProfileCache();
    uint64_t v3 = (void *)swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v3[7] = sub_100114E24(0xD000000000000015, 0x800000010018BB90);
    v3[8] = v10;
    sub_100009300((uint64_t)v12, (uint64_t)(v3 + 2));
    v3[9] = &_swiftEmptyArrayStorage;
    v3[10] = v8;
    v3[11] = v9;
    sub_1000C7DE8();
    sub_100006520((uint64_t)v12);
    swift_release();
    sub_100006520((uint64_t)v13);
  }
  return v3;
}

uint64_t destroy for ProfileKernelTokenMapping()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ProfileKernelTokenMapping(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ProfileKernelTokenMapping(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProfileKernelTokenMapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ProfileKernelTokenMapping(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProfileKernelTokenMapping(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileKernelTokenMapping()
{
  return &type metadata for ProfileKernelTokenMapping;
}

uint64_t *sub_1000CCBCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000CCCAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000CCD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000CCDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CCE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_1000CCEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CCF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CCF94);
}

uint64_t sub_1000CCF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000CD054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CD068);
}

uint64_t sub_1000CD068(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1000CD124()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000CD1C0()
{
  return sub_1000CD924(&qword_1001DD780, (void (*)(uint64_t))type metadata accessor for KernelTokenHostConfigurationMapping);
}

unint64_t sub_1000CD208()
{
  unint64_t result = qword_1001DD790;
  if (!qword_1001DD790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD790);
  }
  return result;
}

uint64_t sub_1000CD25C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4(&qword_1001DD798);
    sub_1000CD924(a2, (void (*)(uint64_t))type metadata accessor for KernelTokenHostConfigurationMapping);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CD2F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7250737361707962 && a2 == 0xEF44494178696665 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100198FD0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000CD450(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x49656C69666F7270 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64496C61626F6C67 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F546C656E72656BLL && a2 == 0xEF6F666E496E656BLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000CD5D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DD7B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000CD208();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100006520((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v21 = v10;
  char v24 = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v19 = v13;
  sub_100003EB0(&qword_1001DD798);
  char v23 = 2;
  sub_1000CD25C(&qword_1001DD7B8, &qword_1001DD7C0);
  uint64_t v20 = v15;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v16 = v22;
  swift_bridgeObjectRetain();
  sub_100006520((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v17 = v20;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v21;
  a2[1] = v12;
  a2[2] = v19;
  a2[3] = v17;
  a2[4] = v16;
  return result;
}

unint64_t sub_1000CD8D0()
{
  unint64_t result = qword_1001DD7D0;
  if (!qword_1001DD7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD7D0);
  }
  return result;
}

uint64_t sub_1000CD924(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for KernelTokenHostConfigurationMapping.CodingKeys()
{
  return &type metadata for KernelTokenHostConfigurationMapping.CodingKeys;
}

unsigned char *_s9SPREngine35KernelTokenHostConfigurationMappingV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CDA50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileKernelTokenMapping.CodingKeys()
{
  return &type metadata for ProfileKernelTokenMapping.CodingKeys;
}

unint64_t sub_1000CDA8C()
{
  unint64_t result = qword_1001DD7F0;
  if (!qword_1001DD7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD7F0);
  }
  return result;
}

unint64_t sub_1000CDAE4()
{
  unint64_t result = qword_1001DD7F8;
  if (!qword_1001DD7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD7F8);
  }
  return result;
}

unint64_t sub_1000CDB3C()
{
  unint64_t result = qword_1001DD800;
  if (!qword_1001DD800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD800);
  }
  return result;
}

unint64_t sub_1000CDB94()
{
  unint64_t result = qword_1001DD808;
  if (!qword_1001DD808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD808);
  }
  return result;
}

unint64_t sub_1000CDBEC()
{
  unint64_t result = qword_1001DD810;
  if (!qword_1001DD810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD810);
  }
  return result;
}

unint64_t sub_1000CDC44()
{
  unint64_t result = qword_1001DD818;
  if (!qword_1001DD818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD818);
  }
  return result;
}

uint64_t sub_1000CDCA0()
{
  unint64_t v0 = sub_100106AC4(&off_1001C3050);
  sub_100003EB0(&qword_1001DD820);
  uint64_t result = swift_arrayDestroy();
  qword_1001E0F98 = v0;
  return result;
}

unint64_t sub_1000CDCF8(uint64_t *a1)
{
  return _sSC23SPRPersistenceErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC23SPRPersistenceErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D91A8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E0F98;
  if (*(void *)(qword_1001E0F98 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0xD000000000000011;
  }
  return v5;
}

unint64_t sub_1000CDE00(uint64_t a1)
{
  unint64_t result = sub_1000CDE28();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000CDE28()
{
  unint64_t result = qword_1001D9900;
  if (!qword_1001D9900)
  {
    type metadata accessor for PersistenceError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9900);
  }
  return result;
}

uint64_t sub_1000CDE80()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD828);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD828);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000CDF48(uint64_t a1)
{
  if (qword_1001D91B0 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DD828);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "DefaultManagedDictionary deinit()", v5, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  a1 = *(void *)(a1 + 32);
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      v9 &= v9 - 1;
      goto LABEL_8;
    }
    int64_t v13 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v13 >= v10) {
      goto LABEL_28;
    }
    uint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v12;
    if (!v14)
    {
      int64_t v12 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_28;
      }
      uint64_t v14 = *(void *)(v6 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_28;
        }
        uint64_t v14 = *(void *)(v6 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v13 + 3;
          if (v13 + 3 >= v10) {
            goto LABEL_28;
          }
          uint64_t v14 = *(void *)(v6 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v13 + 4;
            if (v13 + 4 >= v10) {
              goto LABEL_28;
            }
            uint64_t v14 = *(void *)(v6 + 8 * v12);
            if (!v14) {
              break;
            }
          }
        }
      }
    }
LABEL_27:
    uint64_t v9 = (v14 - 1) & v14;
LABEL_8:
    uint64_t result = dispatch thunk of DispatchWorkItem.cancel()();
  }
  int64_t v15 = v13 + 5;
  if (v15 >= v10)
  {
LABEL_28:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v12 = v15;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_28;
    }
    uint64_t v14 = *(void *)(v6 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CE198()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DefaultManagedDictionary()
{
  return self;
}

double sub_1000CE2E8@<D0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_100161CE0(a2 & 1), (v8 & 1) != 0))
  {
    sub_100006570(*(void *)(v6 + 56) + 32 * v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void sub_1000CE370(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  char v9 = a2 & 1;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v50 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  __int16 v51 = (char *)v47 - v15;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v16 - 8, v17);
  v47[1] = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v47[2] = a1 + 32;
  uint64_t v19 = sub_100065E24(v9);
  swift_endAccess();
  if (v19)
  {
    if (qword_1001D91B0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003E78(v20, (uint64_t)qword_1001DD828);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v54 = a1;
      uint64_t v23 = swift_slowAlloc();
      v47[0] = a3;
      char v24 = (uint8_t *)v23;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v24 = 136315138;
      LOBYTE(v56) = v9;
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v56 = sub_100005EB8(v25, v26, aBlock);
      a1 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "DefaultManagedDictionary Found workItem for key: %s. Cancelling it...", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v47[0];
      swift_slowDealloc();
    }

    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  sub_100006570(a3, (uint64_t)aBlock);
  swift_beginAccess();
  sub_100105C50((uint64_t)aBlock, v9);
  swift_endAccess();
  if (qword_1001D91B0 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100003E78(v27, (uint64_t)qword_1001DD828);
  int64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v54 = a1;
    int64_t v30 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)int64_t v30 = 136315138;
    LOBYTE(v56) = v9;
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v56 = sub_100005EB8(v31, v32, aBlock);
    a1 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "DefaultManagedDictionary updated value for key: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a6 > 0.0)
  {
    int64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 134217984;
      *(double *)uint64_t aBlock = a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "DefaultManagedDictionary updateValue duration: %f", v35, 0xCu);
      swift_slowDealloc();
    }

    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v36 = swift_allocObject();
    swift_weakInit();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v36;
    *(unsigned char *)(v37 + 24) = v9;
    uint64_t v39 = v48;
    uint64_t v38 = v49;
    *(void *)(v37 + 32) = v48;
    *(void *)(v37 + 40) = v38;
    aBlock[4] = (uint64_t)sub_1000CF66C;
    aBlock[5] = v37;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000048D8;
    id aBlock[3] = (uint64_t)&unk_1001C9748;
    _Block_copy(aBlock);
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    swift_retain();
    sub_1000448A0(v39);
    uint64_t v40 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0x8000000000000000;
    sub_100106660(v40, v9, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 32) = v56;
    swift_bridgeObjectRelease();
    swift_endAccess();
    long long v42 = v50;
    static DispatchTime.now()();
    os_log_type_t v43 = v51;
    + infix(_:_:)();
    uint64_t v44 = *(void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v45 = v42;
    uint64_t v46 = v53;
    v44(v45, v53);
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    v44(v43, v46);
  }
}

double sub_1000CEA60@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = sub_100161CE0(a1 & 1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100080C34();
      uint64_t v9 = v11;
    }
    sub_100006510((_OWORD *)(*(void *)(v9 + 56) + 32 * v7), a2);
    sub_10007F700(v7, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_1000CEB24(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v36 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v34 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_6:
    if (!a3) {
      return;
    }
    goto LABEL_7;
  }
  char v17 = a2 & 1;
  swift_beginAccess();
  sub_100065E24(a2 & 1);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  sub_1000CEA60(a2 & 1, &aBlock);
  sub_100008970((uint64_t)&aBlock);
  swift_endAccess();
  if (qword_1001D91B0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100003E78(v18, (uint64_t)qword_1001DD828);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v31 = v7;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v32 = a3;
    os_log_type_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v33 = a4;
    *(void *)&long long aBlock = v23;
    uint64_t v30 = v13;
    *(_DWORD *)os_log_type_t v22 = 136315138;
    LOBYTE(v39) = v17;
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v39 = (void *)sub_100005EB8(v24, v25, (uint64_t *)&aBlock);
    uint64_t v13 = v30;
    uint64_t v7 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "DefaultManagedDictionary removed value for key: %s", v22, 0xCu);
    swift_arrayDestroy();
    a4 = v33;
    swift_slowDealloc();
    a3 = v32;
    swift_slowDealloc();
    swift_release();

    goto LABEL_6;
  }

  swift_release();
  if (!a3) {
    return;
  }
LABEL_7:
  sub_10001F160();
  uint64_t v26 = v34;
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v16, enum case for DispatchQoS.QoSClass.background(_:), v13);
  swift_retain();
  uint64_t v27 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v13);
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  long long v41 = sub_1000048D8;
  long long v42 = &unk_1001C9770;
  int64_t v28 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v39 = _swiftEmptyArrayStorage;
  sub_1000CF694();
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_1000CF6EC();
  os_log_type_t v29 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);

  sub_100057838(a3);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v7);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v37);
  swift_release();
}

uint64_t sub_1000CF08C@<X0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  char v2 = a1 & 1;
  if (qword_1001D91B0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003E78(v3, (uint64_t)qword_1001DD828);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v18 = sub_100005EB8(0xD000000000000014, 0x8000000100199050, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2080;
    LOBYTE(v18) = v2;
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v18 = sub_100005EB8(v7, v8, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s, key: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v9 = sub_100065E24(v2);
  swift_endAccess();
  if (v9)
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v17[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      LOBYTE(v18) = v2;
      uint64_t v13 = String.init<A>(describing:)();
      uint64_t v18 = sub_100005EB8(v13, v14, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "DefaultManagedDictionary cancel workitem for key: %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  swift_beginAccess();
  sub_1000CEA60(v2, a2);
  return swift_endAccess();
}

void *sub_1000CF418()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  os_log_type_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  v1[2] = sub_100106E14((uint64_t)&_swiftEmptyArrayStorage);
  sub_10001F160();
  static DispatchQoS.background.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[4] = sub_100106F18((uint64_t)&_swiftEmptyArrayStorage);
  return v1;
}

uint64_t sub_1000CF5EC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000CF624()
{
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000CF66C()
{
  sub_1000CEB24(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000CF67C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000CF68C()
{
  return swift_release();
}

unint64_t sub_1000CF694()
{
  unint64_t result = qword_1001DD360;
  if (!qword_1001DD360)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD360);
  }
  return result;
}

unint64_t sub_1000CF6EC()
{
  unint64_t result = qword_1001DD370;
  if (!qword_1001DD370)
  {
    sub_100003EF4((uint64_t *)&unk_1001DA510);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD370);
  }
  return result;
}

uint64_t sub_1000CF748()
{
  return sub_1000CDF48(v0);
}

unsigned char *storeEnumTagSinglePayload for ManagedDictionaryKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000CF830);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedDictionaryKey()
{
  return &type metadata for ManagedDictionaryKey;
}

unint64_t sub_1000CF86C()
{
  unint64_t result = qword_1001DD950;
  if (!qword_1001DD950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD950);
  }
  return result;
}

void sub_1000CF8C8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  __int16 v97 = a1;
  unint64_t v12 = a1 & 0xFFFFFFFFFFFFLL;
  if (a5) {
    uint64_t v13 = sub_10006BD14(v12, a2, a3, a4);
  }
  else {
    uint64_t v13 = sub_10006C13C(v12, a2, a3, a4);
  }
  uint64_t v15 = v13;
  unint64_t v102 = v14;
  uint64_t v16 = 0;
  id v95 = *(uint64_t (**)(void))(a7 + 16);
  uint64_t v96 = a2;
  uint64_t v23 = v95();
  unint64_t v25 = v24;
  sub_1000065D0(v23, v24);
  uint64_t v90 = v23;
  unint64_t v91 = v25;
  sub_10006C580(v23, v25, (uint64_t)&v114);
  long long v112 = v114;
  *(_OWORD *)uint64_t v113 = v115;
  *(void *)&v113[16] = v116;
  if ((unsigned __int16)v115 != 25360)
  {
    uint64_t v16 = v15;
    if ((unsigned __int16)v115 == 36864)
    {
      sub_100006628(v23, v25);
      uint64_t v26 = v15;
      unint64_t v27 = v102;
      goto LABEL_58;
    }
    if (qword_1001D91B8 == -1)
    {
LABEL_51:
      uint64_t v65 = type metadata accessor for Logger();
      sub_100003E78(v65, (uint64_t)qword_1001DD958);
      sub_1000065D0(v16, v102);
      sub_1000065D0(v16, v102);
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v66, v67))
      {
        sub_100006628(v90, v91);
        sub_100006628(v16, v102);
        sub_100006628(v16, v102);
        sub_100006628(v16, v102);

LABEL_59:
        swift_beginAccess();
        long long v82 = v112;
        uint64_t v83 = *(unsigned __int16 *)v113;
        long long v84 = *(_OWORD *)&v113[8];
        goto LABEL_66;
      }
      os_log_type_t typea = v67;
      uint64_t v68 = swift_slowAlloc();
      uint64_t v106 = swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 136315394;
      swift_beginAccess();
      long long v69 = v112;
      uint64_t v70 = *(void *)&v113[8];
      unint64_t v71 = *(void *)&v113[16];
      sub_1000065D0(v112, *((unint64_t *)&v112 + 1));
      sub_1000065D0(v70, v71);
      Swift::String v72 = Data.hexString()();
      sub_100006628(v69, *((unint64_t *)&v69 + 1));
      sub_100006628(v70, v71);
      sub_100005EB8(v72._countAndFlagsBits, (unint64_t)v72._object, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2080;
      Swift::String v73 = Data.hexString()();
      sub_100005EB8(v73._countAndFlagsBits, (unint64_t)v73._object, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100006628(v16, v102);
      sub_100006628(v16, v102);
      _os_log_impl((void *)&_mh_execute_header, v66, typea, "Status Word Not 9000 (!) RAPDU: %s to CAPDU: %s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100006628(v90, v91);

      uint64_t v26 = v16;
      unint64_t v27 = v102;
LABEL_58:
      sub_100006628(v26, v27);
      goto LABEL_59;
    }
LABEL_78:
    swift_once();
    goto LABEL_51;
  }
  unint64_t v92 = a3;
  uint64_t v93 = a6;
  uint64_t v94 = a7;
  unint64_t v28 = *((void *)&v114 + 1);
  uint64_t v29 = v114;
  sub_1000065D0(v114, *((unint64_t *)&v114 + 1));
  *(void *)type = 0;
  unint64_t v30 = v102;
  uint64_t v31 = v15;
  uint64_t v89 = v15;
  while (2)
  {
    uint64_t v105 = v29;
    if (qword_1001D91B8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100003E78(v32, (uint64_t)qword_1001DD958);
    sub_1000065D0(v96, v92);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = v16;
      unint64_t v36 = v28;
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 16777728;
      *(unsigned char *)(v37 + 4) = v97;
      *(_WORD *)(v37 + 5) = 256;
      *(unsigned char *)(v37 + 7) = HIBYTE(v97);
      sub_100006628(v96, v92);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "More data available: CLA=%hhu, INS=%hhu", (uint8_t *)v37, 8u);
      unint64_t v28 = v36;
      uint64_t v16 = v35;
      swift_slowDealloc();
    }
    else
    {
      sub_100006628(v96, v92);
    }

    unint64_t v38 = v30;
    uint64_t v39 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))v95)(v31, v30, v93, v94);
    unint64_t v41 = v40;
    unint64_t v42 = 0xC000000000000000;
    uint64_t v43 = v39;
    __int16 v44 = 0;
    uint64_t v45 = 0;
    switch(v40 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(v39), v39))
        {
          uint64_t v48 = HIDWORD(v39) - (int)v39;
          goto LABEL_23;
        }
        __break(1u);
        goto LABEL_69;
      case 2uLL:
        uint64_t v50 = *(void *)(v39 + 16);
        uint64_t v49 = *(void *)(v39 + 24);
        uint64_t v48 = v49 - v50;
        if (__OFSUB__(v49, v50))
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
LABEL_23:
        sub_1000065D0(v39, v40);
        if (v48 >= 2)
        {
LABEL_19:
          __int16 v46 = Data.subscript.getter();
          __int16 v44 = Data.subscript.getter() | (unsigned __int16)(v46 << 8);
          sub_1000065D0(v43, v41);
          sub_1000F3910(2, v43, v41, &v106);
          uint64_t v45 = sub_100115410(v106, v107);
          unint64_t v42 = v47;
        }
        else
        {
LABEL_24:
          uint64_t v45 = 0;
          __int16 v44 = 0;
        }
LABEL_25:
        uint64_t v51 = 0;
        switch(*((void *)&v112 + 1) >> 62)
        {
          case 1:
            LODWORD(v51) = DWORD1(v112) - v112;
            if (__OFSUB__(DWORD1(v112), v112)) {
              goto LABEL_70;
            }
            uint64_t v51 = (int)v51;
            break;
          case 2:
            uint64_t v53 = *(void *)(v112 + 16);
            uint64_t v52 = *(void *)(v112 + 24);
            BOOL v54 = __OFSUB__(v52, v53);
            uint64_t v51 = v52 - v53;
            if (v54) {
              goto LABEL_71;
            }
            break;
          case 3:
            break;
          default:
            uint64_t v51 = BYTE14(v112);
            break;
        }
        uint64_t v55 = 0;
        switch(v42 >> 62)
        {
          case 1uLL:
            LODWORD(v55) = HIDWORD(v45) - v45;
            if (__OFSUB__(HIDWORD(v45), v45)) {
              goto LABEL_72;
            }
            uint64_t v55 = (int)v55;
            break;
          case 2uLL:
            uint64_t v57 = *(void *)(v45 + 16);
            uint64_t v56 = *(void *)(v45 + 24);
            BOOL v54 = __OFSUB__(v56, v57);
            uint64_t v55 = v56 - v57;
            if (v54) {
              goto LABEL_73;
            }
            break;
          case 3uLL:
            break;
          default:
            uint64_t v55 = BYTE6(v42);
            break;
        }
        BOOL v54 = __OFADD__(v51, v55);
        uint64_t v58 = v51 + v55;
        if (v54)
        {
          __break(1u);
          swift_once();
          uint64_t v17 = type metadata accessor for Logger();
          sub_100003E78(v17, (uint64_t)qword_1001DD958);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v18 = Logger.logObject.getter();
          os_log_type_t v19 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v18, v19))
          {
            os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v114 = swift_slowAlloc();
            *(_DWORD *)os_log_type_t v20 = 136315138;
            *(void *)&long long v112 = 0;
            swift_errorRetain();
            sub_100003EB0((uint64_t *)&unk_1001DD380);
            uint64_t v21 = String.init<A>(describing:)();
            *(void *)&long long v112 = sub_100005EB8(v21, v22, (uint64_t *)&v114);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v18, v19, "failed to communicate with SE %s", v20, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_100006628(v38, v102);
            swift_errorRelease();
          }
          else
          {
            sub_100006628(v38, v102);
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          goto LABEL_65;
        }
        os_log_t log = (os_log_t)v43;
        unint64_t v101 = v41;
        if (v58 <= 0x100000 && *(void *)type <= 0xFFFuLL)
        {
          __int16 v99 = v44;
          uint64_t v110 = v105;
          unint64_t v111 = v28;
          id v108 = &type metadata for Data;
          uint64_t v109 = &protocol witness table for Data;
          uint64_t v106 = v45;
          unint64_t v107 = v42;
          long long v59 = sub_100006788(&v106, (uint64_t)&type metadata for Data);
          uint64_t v60 = *v59;
          unint64_t v61 = v59[1];
          switch(v61 >> 62)
          {
            case 1uLL:
              uint64_t v16 = v28;
              if (v60 >> 32 < (int)v60) {
                goto LABEL_74;
              }
              sub_1000065D0(v45, v42);
              sub_1000065D0(v45, v42);
              sub_1000065D0(v105, v28);
              sub_1000065D0(v60, v61);
              if (__DataStorage._bytes.getter() && __OFSUB__((int)v60, __DataStorage._offset.getter())) {
                goto LABEL_76;
              }
              __DataStorage._length.getter();
              Data._Representation.append(contentsOf:)();
              sub_100006628(v60, v61);
              unint64_t v38 = v102;
              uint64_t v16 = 0;
              uint64_t v62 = v105;
              break;
            case 2uLL:
              uint64_t v63 = *(void *)(v60 + 16);
              uint64_t v64 = *(void *)(v60 + 24);
              sub_1000065D0(v45, v42);
              sub_1000065D0(v45, v42);
              sub_1000065D0(v105, v28);
              swift_retain();
              swift_retain();
              if (__DataStorage._bytes.getter() && __OFSUB__(v63, __DataStorage._offset.getter())) {
                goto LABEL_77;
              }
              if (__OFSUB__(v64, v63)) {
                goto LABEL_75;
              }
              __DataStorage._length.getter();
              Data._Representation.append(contentsOf:)();
              swift_release();
              swift_release();
              unint64_t v38 = v102;
              uint64_t v62 = v105;
              uint64_t v31 = v89;
              break;
            default:
              sub_1000065D0(v45, v42);
              sub_1000065D0(v45, v42);
              uint64_t v62 = v105;
              sub_1000065D0(v105, v28);
              Data._Representation.append(contentsOf:)();
              break;
          }
          sub_100006520((uint64_t)&v106);
          sub_100006628(v45, v42);
          sub_100006628(v62, v28);
          uint64_t v29 = v110;
          unint64_t v28 = v111;
          sub_1000065D0(v110, v111);
          sub_100006628((uint64_t)log, v101);
          if (v99 != 25360)
          {
            sub_100006628(v90, v91);
            sub_100006628(v29, v28);
            sub_100006628(v31, v38);
            sub_100006628(v45, v42);
            sub_100006628((uint64_t)log, v101);
            long long v78 = v112;
            unint64_t v79 = v28;
            uint64_t v80 = *(void *)&v113[8];
            unint64_t v81 = *(void *)&v113[16];
            *(void *)&long long v112 = v29;
            *((void *)&v112 + 1) = v79;
            *(_WORD *)uint64_t v113 = v99;
            *(void *)&v113[8] = v29;
            *(void *)&v113[16] = v79;
            sub_1000065D0(v29, v79);
            sub_100006628(v78, *((unint64_t *)&v78 + 1));
            uint64_t v26 = v80;
            unint64_t v27 = v81;
            goto LABEL_58;
          }
          unint64_t v30 = v38;
          sub_100006628(v45, v42);
          sub_100006628((uint64_t)log, v101);
          sub_100006628(v29, v28);
          ++*(void *)type;
          continue;
        }
        int64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = swift_slowAlloc();
          *(_DWORD *)uint64_t v76 = 134218240;
          swift_beginAccess();
          uint64_t v77 = 0;
          switch(*((void *)&v112 + 1) >> 62)
          {
            case 1:
              LODWORD(v77) = DWORD1(v112) - v112;
              if (__OFSUB__(DWORD1(v112), v112))
              {
                __break(1u);
LABEL_80:
                __break(1u);
              }
              uint64_t v77 = (int)v77;
LABEL_63:
              uint64_t v110 = v77;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v76 + 12) = 2048;
              uint64_t v110 = *(void *)type + 1;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v74, v75, "exceed artificial limit when fetching more data.\nsize: %ld\napdu exchange counter: %ld", (uint8_t *)v76, 0x16u);
              swift_slowDealloc();
              break;
            case 2:
              uint64_t v86 = *(void *)(v112 + 16);
              uint64_t v85 = *(void *)(v112 + 24);
              BOOL v54 = __OFSUB__(v85, v86);
              uint64_t v77 = v85 - v86;
              if (!v54) {
                goto LABEL_63;
              }
              goto LABEL_80;
            case 3:
              goto LABEL_63;
            default:
              uint64_t v77 = BYTE14(v112);
              goto LABEL_63;
          }
        }
        sub_100006628(v90, v91);
        sub_100006628(v43, v41);

        sub_100006628(v45, v42);
        sub_100006628(v43, v41);
        sub_100006628(v31, v38);
        sub_100006628(v105, v28);
        uint64_t v87 = *(void *)&v113[8];
        unint64_t v88 = *(void *)&v113[16];
        sub_100006628(v112, *((unint64_t *)&v112 + 1));
        sub_100006628(v87, v88);
LABEL_65:
        uint64_t v83 = 0;
        long long v82 = xmmword_10018A340;
        long long v84 = 0uLL;
LABEL_66:
        *(_OWORD *)a8 = v82;
        *(void *)(a8 + 16) = v83;
        *(_OWORD *)(a8 + 24) = v84;
        return;
      case 3uLL:
        goto LABEL_25;
      default:
        if (BYTE6(v40) >= 2uLL) {
          goto LABEL_19;
        }
        goto LABEL_24;
    }
  }
}

uint64_t SecureElementTransceiver.getData(tag:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1001D91B8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DD958);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t type = v8;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_100003EB0((uint64_t *)&unk_1001DD3C0);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_100186100;
    *(void *)(v10 + 56) = &type metadata for UInt;
    *(void *)(v10 + 64) = &protocol witness table for UInt;
    *(void *)(v10 + 32) = a1;
    uint64_t v11 = String.init(format:_:)();
    uint64_t v35 = a3;
    sub_100005EB8(v11, v12, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    unint64_t v13 = bswap32((unsigned __int16)a1 | 0x80CA0000);
    uint64_t v14 = sub_10006BD14(v13, 0, 0xC000000000000000, 0);
    unint64_t v16 = v15;
    Swift::String v17 = Data.hexString()();
    uint64_t v18 = v14;
    a3 = v35;
    sub_100006628(v18, v16);
    sub_100005EB8(v17._countAndFlagsBits, (unint64_t)v17._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "CAPDU (GET DATA for tag %s): %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v13 = bswap32((unsigned __int16)a1 | 0x80CA0000);
  }
  sub_1000CF8C8(v13, 0, 0xC000000000000000, 0, 1, a2, a3, (uint64_t)v37);
  uint64_t v19 = v37[0];
  unint64_t v20 = v37[1];
  uint64_t v21 = v37[3];
  unint64_t v22 = v37[4];
  sub_100038DA0((uint64_t)v37, (uint64_t)&v38);
  unint64_t v23 = v39;
  if (v39 >> 60 == 15)
  {
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error from transceive", v26, 2u);
      swift_slowDealloc();
    }

    sub_100038E08();
    swift_allocError();
    _WORD *v27 = 0;
    swift_willThrow();
  }
  else
  {
    a3 = v38;
    int v36 = v40;
    sub_1000065D0(v19, v20);
    sub_1000065D0(v21, v22);
    sub_1000065D0(v19, v20);
    sub_1000065D0(v21, v22);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136315138;
      Swift::String v31 = Data.hexString()();
      sub_100005EB8(v31._countAndFlagsBits, (unint64_t)v31._object, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100038E5C((uint64_t)v37);
      sub_100038E5C((uint64_t)v37);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "RAPDU: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100038E5C((uint64_t)v37);
      sub_100038E5C((uint64_t)v37);
    }

    if (v36 == 36864)
    {
      sub_1000065D0(a3, v23);
    }
    else
    {
      sub_100038E08();
      swift_allocError();
      *uint64_t v32 = v36;
      swift_willThrow();
    }
    sub_100038E5C((uint64_t)v37);
  }
  return a3;
}

uint64_t sub_1000D1014()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD958);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD958);
  if (qword_1001D9280 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10A0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1000D1170()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Logging();
  return [super dealloc];
}

uint64_t type metadata accessor for Logging()
{
  return self;
}

uint64_t sub_1000D11D0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DD998);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DD998);
  if (qword_1001D9248 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FF8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000D1298()
{
  if (qword_1001D91E0 != -1) {
    swift_once();
  }
  int v0 = byte_1001E0FB8;
  if (qword_1001D91F8 != -1) {
    swift_once();
  }
  int v1 = byte_1001E0FBB;
  sub_10002C874();
  UnsignedInteger.clearBit(_:)(0);
  char v2 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    char v2 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v2 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v2 |= v1;
  }
  byte_1001E0FA0 = v2;
}

void sub_1000D1440()
{
  if (qword_1001D91F8 != -1) {
    swift_once();
  }
  int v0 = byte_1001E0FBB;
  if (qword_1001D9200 != -1) {
    swift_once();
  }
  int v1 = byte_1001E0FBC;
  if (qword_1001D9208 != -1) {
    swift_once();
  }
  int v2 = byte_1001E0FBD;
  sub_10002C874();
  UnsignedInteger.clearBit(_:)(0);
  char v3 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    char v3 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v3 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v3 |= v1;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v3 & v2) != v2)
  {
    UnsignedInteger.clearBit(_:)(0);
    v3 |= v2;
  }
  byte_1001E0FA1 = v3;
}

void sub_1000D1690(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1001D91C0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DD998);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100005EB8(0x6228796669726576, 0xEF293A70616D7469, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v47 = a1;
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_100017548((char *)&v47, (char *)&v48);
  os_log_type_t v8 = v48;
  if (!v48[2])
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  unsigned __int8 v9 = *((unsigned char *)v48 + 32);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Disabling isDeveloperMode check.", v12, 2u);
    swift_slowDealloc();
  }

  sub_10002C874();
  UnsignedInteger.clearBit(_:)(7);
  if (*(unsigned char *)(v2 + 48) == 1)
  {
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Disabling isProductionJCOP check.", v15, 2u);
      swift_slowDealloc();
    }

    UnsignedInteger.clearBit(_:)(1);
  }
  if (*(unsigned char *)(v2 + 49) == 1)
  {
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Disabling isInternalInstall check.", v18, 2u);
      swift_slowDealloc();
    }

    UnsignedInteger.clearBit(_:)(6);
  }
  unint64_t v19 = v8[2];
  if (v19 < 2) {
    goto LABEL_40;
  }
  if ((v9 & (*(unsigned __int8 *)(v2 + 16) ^ *((unsigned __int8 *)v8 + 33))) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      uint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v24 = sub_10012CB58(v23);
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      Swift::String v27 = Data.hexString()();
      sub_100006628(v24, v26);
      sub_100005EB8(v27._countAndFlagsBits, (unint64_t)v27._object, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      unint64_t v28 = "Invalid attestation data: bit field %s";
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v20, v21, v28, v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    goto LABEL_38;
  }
  if (v19 < 3) {
    goto LABEL_41;
  }
  if (*((unsigned __int8 *)v8 + 34) > 5u)
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      uint64_t v29 = swift_bridgeObjectRetain();
      uint64_t v30 = sub_10012CB58(v29);
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      Swift::String v33 = Data.hexString()();
      sub_100006628(v30, v32);
      sub_100005EB8(v33._countAndFlagsBits, (unint64_t)v33._object, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      unint64_t v28 = "Invalid attestation data: number of clients %s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (v19 < 5) {
    goto LABEL_42;
  }
  if (*(unsigned __int16 *)((char *)v8 + 35) < *(unsigned __int16 *)(v2 + 18))
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      uint64_t v34 = swift_bridgeObjectRetain();
      uint64_t v35 = sub_10012CB58(v34);
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      Swift::String v38 = Data.hexString()();
      sub_100006628(v35, v37);
      sub_100005EB8(v38._countAndFlagsBits, (unint64_t)v38._object, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      unint64_t v28 = "Invalid attestation data: jsbl version %s";
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (v19 < 8) {
    goto LABEL_43;
  }
  if (*(void *)(v2 + 24) != *((unsigned __int8 *)v8 + 39)
    || *(void *)(v2 + 32) != *((unsigned __int8 *)v8 + 38)
    || *(void *)(v2 + 40) != *((unsigned __int8 *)v8 + 37))
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      uint64_t v42 = swift_bridgeObjectRetain();
      uint64_t v43 = sub_10012CB58(v42);
      unint64_t v45 = v44;
      swift_bridgeObjectRelease();
      Swift::String v46 = Data.hexString()();
      sub_100006628(v43, v45);
      sub_100005EB8(v46._countAndFlagsBits, (unint64_t)v46._object, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      unint64_t v28 = "Invalid attestation data: iOSVersion %s";
      goto LABEL_37;
    }
LABEL_38:

    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRelease();
  unint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Attestation data valid.", v41, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000D1F8C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MPOCDefaultAttestationOfflineVerifier()
{
  return self;
}

id sub_1000D1FC0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v33 = type metadata accessor for Environment();
  uint64_t v34 = &off_1001C8D80;
  v32[0] = a1;
  uint64_t v6 = type metadata accessor for SecureElement();
  v31[3] = v6;
  v31[4] = &off_1001CC7B8;
  v31[0] = a2;
  if (qword_1001D91C0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DD998);
  sub_100009300((uint64_t)v32, (uint64_t)v29);
  sub_100009300((uint64_t)v32, (uint64_t)v28);
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109376;
    sub_100006788(v29, v30);
    sub_100006520((uint64_t)v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 8) = 1024;
    int v11 = *(unsigned __int8 *)(*sub_100006788(v28, v28[3]) + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment);
    sub_100006520((uint64_t)v28);
    LODWORD(v29[0]) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "MPOCDefaultAttestationOfflineVerifier.init() isProductionEnvironment: %{BOOL}d\nisCertEnvironment: %{BOOL}d", (uint8_t *)v10, 0xEu);
    swift_slowDealloc();
  }
  else
  {
    sub_100006520((uint64_t)v28);
    sub_100006520((uint64_t)v29);
  }

  int v12 = *(unsigned __int8 *)(*sub_100006788(v32, v33) + OBJC_IVAR____TtC9SPREngine11Environment_isProductionEnvironment);
  sub_100009300((uint64_t)v32, (uint64_t)v29);
  if (v12 == 1)
  {
    sub_100006520((uint64_t)v29);
LABEL_9:
    if (qword_1001D91C8 != -1) {
      swift_once();
    }
    os_log_type_t v14 = &byte_1001E0FA0;
    goto LABEL_15;
  }
  int v13 = *(unsigned __int8 *)(*sub_100006788(v29, v30) + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment);
  sub_100006520((uint64_t)v29);
  if (v13 == 1) {
    goto LABEL_9;
  }
  if (qword_1001D91D0 != -1) {
    swift_once();
  }
  os_log_type_t v14 = &byte_1001E0FA1;
LABEL_15:
  char v15 = *v14;
  id result = [*(id *)(*sub_100006788(v31, v6) + 24) expectedSequenceCounter];
  if (result)
  {
    os_log_type_t v17 = result;
    unsigned __int16 v18 = (unsigned __int16)[result unsignedShortValue];

    char v19 = *(unsigned char *)(*sub_100006788(v32, v33) + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment);
    unint64_t v20 = self;
    id v21 = [v20 processInfo];
    [v21 operatingSystemVersion];
    uint64_t v22 = v29[0];

    id v23 = [v20 processInfo];
    [v23 operatingSystemVersion];
    uint64_t v24 = v29[1];

    id v25 = [v20 processInfo];
    [v25 operatingSystemVersion];
    uint64_t v26 = v29[2];

    type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
    uint64_t v27 = swift_allocObject();
    *(unsigned char *)(v27 + 16) = v15;
    *(_WORD *)(v27 + 18) = v18;
    *(void *)(v27 + 24) = v22;
    *(void *)(v27 + 32) = v24;
    *(void *)(v27 + 40) = v26;
    *(unsigned char *)(v27 + 17) = 5;
    *(unsigned char *)(v27 + 48) = a3 & 1;
    *(unsigned char *)(v27 + 49) = v19;
    sub_100006520((uint64_t)v31);
    sub_100006520((uint64_t)v32);
    return (id)v27;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000D23F0(uint64_t a1)
{
  sub_1000FAFAC((uint64_t)v17);
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1000FA008((uint64_t)v15);
    uint64_t v4 = OBJC_IVAR____TtC9SPREngine5Depot_settings;
    char v5 = *(unsigned char *)(a1 + *(int *)(type metadata accessor for Settings() + 72) + v4);
    uint64_t v6 = sub_10001F1A0((uint64_t)v17, v18);
    __chkstk_darwin(v6, v6);
    os_log_type_t v8 = (uint64_t *)&v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    uint64_t v10 = sub_10001F1A0((uint64_t)v15, v16);
    __chkstk_darwin(v10, v10);
    int v12 = (uint64_t *)&v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    id v2 = sub_1000D1FC0(*v8, *v12, (v5 & 1) == 0);
    sub_100006520((uint64_t)v15);
    sub_100006520((uint64_t)v17);
    swift_release();
  }
  return v2;
}

id sub_1000D2610(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  if (qword_1001D91E0 != -1) {
    swift_once();
  }
  int v4 = byte_1001E0FB8;
  char v31 = byte_1001E0FB8;
  sub_10002C874();
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v31 & a1) == v4) {
    unsigned __int8 v5 = [[*(id *)(*sub_100006788((void *)(v1 + 40), *(void *)(v1 + 64)) + 16) isProductionSigned];
  }
  else {
    unsigned __int8 v5 = 0;
  }
  if (qword_1001D91E8 != -1) {
    swift_once();
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (qword_1001D91F0 != -1) {
    swift_once();
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (qword_1001D91F8 != -1) {
    swift_once();
  }
  int v6 = byte_1001E0FBB;
  char v32 = byte_1001E0FBB;
  UnsignedInteger.clearBit(_:)(0);
  unsigned __int8 v33 = v32 & a1;
  UnsignedInteger.clearBit(_:)(0);
  if (v33 == v6)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    int v7 = v33;
  }
  else
  {
    int v7 = 0;
  }
  if (qword_1001D9200 != -1) {
    swift_once();
  }
  int v8 = byte_1001E0FBC;
  char v34 = byte_1001E0FBC;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v34 & a1) == v8)
  {
    String.utf8CString.getter();
    char has_internal_content = os_variant_has_internal_content();
    swift_release();
    if (has_internal_content)
    {
      int has_internal_diagnostics = 1;
    }
    else
    {
      String.utf8CString.getter();
      int has_internal_diagnostics = os_variant_has_internal_diagnostics();
      swift_release();
    }
  }
  else
  {
    int has_internal_diagnostics = 0;
  }
  if (qword_1001D9208 != -1) {
    swift_once();
  }
  int v11 = byte_1001E0FBD;
  char v35 = byte_1001E0FBD;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v35 & a1) == v11)
  {
    int v12 = SPRIsInDeveloperMode();
    uint64_t v30 = a1;
    if (v5)
    {
      if (v7)
      {
        if (has_internal_diagnostics)
        {
          if (v12)
          {
            uint64_t v13 = 512;
            uint64_t v14 = 4096;
LABEL_47:
            uint64_t v16 = 0x4000;
LABEL_55:
            uint64_t v15 = 0x8000;
            goto LABEL_57;
          }
LABEL_33:
          uint64_t v15 = 0;
          uint64_t v13 = 512;
          uint64_t v14 = 4096;
          uint64_t v16 = 0x4000;
          goto LABEL_57;
        }
        if (v12)
        {
          uint64_t v16 = 0;
          uint64_t v13 = 512;
          uint64_t v14 = 4096;
          goto LABEL_55;
        }
LABEL_52:
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v13 = 512;
        uint64_t v14 = 4096;
        goto LABEL_57;
      }
      if (has_internal_diagnostics)
      {
        if (v12)
        {
          uint64_t v14 = 0;
          uint64_t v13 = 512;
          goto LABEL_47;
        }
        goto LABEL_49;
      }
      if (v12)
      {
        uint64_t v16 = 0;
        uint64_t v14 = 0;
        uint64_t v13 = 512;
        goto LABEL_55;
      }
LABEL_56:
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v14 = 0;
      uint64_t v13 = 512;
      goto LABEL_57;
    }
    uint64_t v13 = 0;
    if (v12) {
      uint64_t v15 = 0x8000;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v30 = a1;
    if (v5)
    {
      if (v7)
      {
        if (has_internal_diagnostics) {
          goto LABEL_33;
        }
        goto LABEL_52;
      }
      if (has_internal_diagnostics)
      {
LABEL_49:
        uint64_t v15 = 0;
        uint64_t v14 = 0;
        uint64_t v13 = 512;
        uint64_t v16 = 0x4000;
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    uint64_t v15 = 0;
    uint64_t v13 = 0;
  }
  if (has_internal_diagnostics) {
    uint64_t v16 = 0x4000;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v7) {
    uint64_t v14 = 4096;
  }
  else {
    uint64_t v14 = 0;
  }
LABEL_57:
  uint64_t v17 = sub_1000867C8();
  if (qword_1001D9410 != -1) {
    swift_once();
  }
  uint64_t v18 = static GlobalState.shared;
  id result = [*(id *)(static GlobalState.shared + 72) lock];
  while (*(uint64_t *)(v18 + 96) > 0 || *(unsigned char *)(v18 + 80) == 1)
    id result = [*(id *)(v18 + 72) wait];
  uint64_t v20 = *(void *)(v18 + 88);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
    goto LABEL_72;
  }
  *(void *)(v18 + 88) = v22;
  [*(id *)(v18 + 72) unlock];
  uint64_t v23 = *(void *)(v18 + 64);
  id result = [*(id *)(v18 + 72) lock];
  uint64_t v24 = *(void *)(v18 + 88);
  BOOL v21 = __OFSUB__(v24, 1);
  uint64_t v25 = v24 - 1;
  if (v21)
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    return result;
  }
  *(void *)(v18 + 88) = v25;
  if (!v25) {
    [*(id *)(v18 + 72) broadcast];
  }
  [*(id *)(v18 + 72) unlock];
  id result = [[*(id *)(*sub_100006788((void *)(v2 + 40), *(void *)(v2 + 64))+ 24) sequenceCounter];
  if (!result) {
    goto LABEL_73;
  }
  uint64_t v26 = result;
  uint64_t v27 = 255;
  if (v23 < 255) {
    uint64_t v27 = v23;
  }
  uint64_t v28 = v27 & ~(v27 >> 63);
  unsigned int v29 = [result unsignedShortValue];

  return (id)(v16 | v15 | v14 | v13 | v30 | (v17 << 56) | ((unint64_t)BYTE2(v17) << 40) | ((unint64_t)BYTE1(v17) << 48) | (v28 << 16) | ((unint64_t)v29 << 24));
}

uint64_t sub_1000D2C90()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DDA98);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DDA98);
  if (qword_1001D9248 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FF8);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000D2D58()
{
  uint64_t v1 = v0;
  uint64_t v60 = type metadata accessor for DateInterval();
  uint64_t v64 = *(void *)(v60 - 8);
  uint64_t v3 = __chkstk_darwin(v60, v2);
  uint64_t v59 = (uint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  int v7 = (char *)&v54 - v6;
  uint64_t v8 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v63 = (void (*)(char *, uint64_t))((char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v58 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v66 = (char *)&v54 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = (char *)&v54 - v21;
  __chkstk_darwin(v20, v23);
  uint64_t v62 = (char *)&v54 - v24;
  if (qword_1001D91D8 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v65 = sub_100003E78(v25, (uint64_t)qword_1001DDA98);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v55 = v1;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v56 = v7;
    unsigned int v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v57 = (void (*)(char *, uint64_t))v11;
    v70[0] = v30;
    uint64_t v61 = v12;
    *(_DWORD *)unsigned int v29 = 136315138;
    v69[0] = sub_100005EB8(0xD000000000000028, 0x80000001001992C0, v70);
    uint64_t v1 = v55;
    uint64_t v12 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s", v29, 0xCu);
    swift_arrayDestroy();
    uint64_t v11 = (uint64_t)v57;
    swift_slowDealloc();
    int v7 = v56;
    swift_slowDealloc();
  }

  sub_1000621B0(v1 + 16, (uint64_t)v68);
  sub_1000621B0((uint64_t)v68, (uint64_t)v69);
  if (sub_100029A28((uint64_t)v69) == 1)
  {
    char v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unsigned __int8 v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "No attestation token", v33, 2u);
      swift_slowDealloc();
    }
LABEL_12:

    goto LABEL_13;
  }
  memcpy(v70, v69, 0x110uLL);
  sub_100006788((void *)(v1 + 312), *(void *)(v1 + 336));
  sub_1000621B0((uint64_t)v68, (uint64_t)v67);
  sub_100068C50((uint64_t)v67);
  char v34 = v63;
  sub_1000238E4((uint64_t)v63);
  if ((*(unsigned int (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v12 + 48))(v34, 1, v11) == 1)
  {
    sub_10001EEA8((uint64_t)v34);
    char v31 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v35, "Could not calculate secure now", v36, 2u);
      swift_slowDealloc();
    }
    sub_100029A40((uint64_t)v68);
    goto LABEL_12;
  }
  (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v12 + 32))(v62, v34, v11);
  sub_1000EC7BC((uint64_t)v7);
  DateInterval.end.getter();
  uint64_t v39 = v64 + 8;
  os_log_type_t v40 = *(void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v41 = v60;
  v40(v7, v60);
  static Date.- infix(_:_:)();
  uint64_t v61 = v12;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v12 + 8);
  v42(v66, v11);
  sub_1000EC7BC((uint64_t)v7);
  DateInterval.start.getter();
  uint64_t v64 = v39;
  uint64_t v57 = v40;
  v40(v7, v41);
  uint64_t v43 = v66;
  sub_1000D4C4C(&qword_1001D9B00);
  char v44 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v63 = v42;
  v42(v43, v11);
  if ((v44 & 1) == 0)
  {
    uint64_t v49 = v59;
    sub_1000EC7BC(v59);
    DateInterval.start.getter();
    uint64_t v50 = v60;
    uint64_t v51 = v57;
    v57((char *)v49, v60);
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v58, v22, v11);
    DateInterval.init(start:end:)();
    uint64_t v52 = v62;
    char v37 = DateInterval.contains(_:)();
    sub_100029A40((uint64_t)v68);
    v51(v7, v50);
    uint64_t v53 = v63;
    v63(v22, v11);
    v53(v52, v11);
    return v37 & 1;
  }
  unint64_t v45 = v63;
  Swift::String v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Attestation token expires at or earlier than token validity start date", v48, 2u);
    swift_slowDealloc();
  }
  sub_100029A40((uint64_t)v68);

  v45(v22, v11);
  v45(v62, v11);
LABEL_13:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_1000D34F8(uint64_t a1, uint64_t a2)
{
  uint64_t v112 = a1;
  uint64_t v3 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v110 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for DateInterval();
  uint64_t v6 = *(void *)(v119 - 8);
  uint64_t v8 = __chkstk_darwin(v119, v7);
  long long v115 = (char *)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v109 = (char *)v99 - v12;
  __chkstk_darwin(v11, v13);
  long long v114 = (char *)v99 - v14;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v120 = *(void *)(v15 - 8);
  uint64_t v121 = v15;
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)v99 - v22;
  uint64_t v25 = __chkstk_darwin(v21, v24);
  os_log_type_t v27 = (char *)v99 - v26;
  uint64_t v29 = __chkstk_darwin(v25, v28);
  char v31 = (char *)v99 - v30;
  uint64_t v33 = __chkstk_darwin(v29, v32);
  uint64_t v113 = (char *)v99 - v34;
  __chkstk_darwin(v33, v35);
  uint64_t v118 = (char *)v99 - v36;
  if (qword_1001D91D8 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v117 = sub_100003E78(v37, (uint64_t)qword_1001DDA98);
  Swift::String v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  unint64_t v111 = v23;
  id v108 = v19;
  if (v40)
  {
    uint64_t v41 = v27;
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 134218240;
    v126[0] = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 12) = 2048;
    v126[0] = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "isOfflineAttested(with attestationData: %llu, duration: %llu)", (uint8_t *)v42, 0x16u);
    os_log_type_t v27 = v41;
    swift_slowDealloc();
  }

  uint64_t v43 = v116;
  sub_1000621B0((uint64_t)(v116 + 2), (uint64_t)v125);
  sub_1000621B0((uint64_t)v125, (uint64_t)v126);
  int v44 = sub_100029A28((uint64_t)v126);
  unint64_t v45 = v115;
  if (v44 == 1)
  {
    Swift::String v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "No attestation token", v48, 2u);
      swift_slowDealloc();
    }

    goto LABEL_18;
  }
  uint64_t v49 = v126[12];
  sub_1000621B0((uint64_t)v125, (uint64_t)v124);
  sub_100068C50((uint64_t)v124);
  uint64_t result = Date.init(timeIntervalSince1970:)();
  if (!__CFADD__(v49, a2))
  {
    uint64_t v51 = v113;
    Date.init(timeIntervalSince1970:)();
    uint64_t v52 = v121;
    uint64_t v53 = v120 + 16;
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
    v54(v31, v118, v121);
    uint64_t v105 = v54;
    uint64_t v106 = v53;
    v54(v27, v51, v52);
    uint64_t v55 = v114;
    DateInterval.init(start:end:)();
    uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v57 = v6;
    uint64_t v58 = v31;
    uint64_t v59 = v109;
    uint64_t v60 = v119;
    v56(v109, v55, v119);
    v56(v45, v55, v60);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    int v63 = v62;
    BOOL v64 = os_log_type_enabled(v61, v62);
    uint64_t v107 = v57;
    if (v64)
    {
      uint64_t v65 = swift_slowAlloc();
      uint64_t v104 = swift_slowAlloc();
      uint64_t v123 = v104;
      *(_DWORD *)uint64_t v65 = 136315394;
      v99[1] = v65 + 4;
      int v103 = v63;
      DateInterval.start.getter();
      uint64_t v101 = sub_1000D4C4C((unint64_t *)&qword_1001D9B08);
      uint64_t v66 = v121;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      os_log_t v102 = v61;
      unint64_t v69 = v68;
      uint64_t v100 = *(void (**)(char *, uint64_t))(v120 + 8);
      v100(v58, v66);
      uint64_t v122 = sub_100005EB8(v67, v69, &v123);
      v99[2] = &v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v70 = *(void (**)(char *, uint64_t))(v57 + 8);
      v70(v59, v119);
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v109 = (char *)(v65 + 14);
      unint64_t v71 = v115;
      DateInterval.end.getter();
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v74 = v73;
      v100(v58, v66);
      uint64_t v122 = sub_100005EB8(v72, v74, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v43 = v116;
      swift_bridgeObjectRelease();
      long long v115 = (char *)v70;
      v70(v71, v119);
      os_log_t v75 = v102;
      _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v103, "Validity period: %s...%s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v76 = *(void (**)(char *, uint64_t))(v57 + 8);
      uint64_t v77 = v119;
      v76(v59, v119);
      long long v115 = (char *)v76;
      v76(v45, v77);
    }
    uint64_t v78 = (uint64_t)v110;
    unint64_t v79 = v111;
    sub_100006788(v43 + 39, v43[42]);
    sub_1000238E4(v78);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v78, 1, v121) == 1)
    {
      sub_10001EEA8(v78);
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        long long v82 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Could not calculate secure now", v82, 2u);
        swift_slowDealloc();
      }

      sub_100029A40((uint64_t)v125);
      ((void (*)(char *, uint64_t))v115)(v114, v119);
      uint64_t v83 = v121;
      long long v84 = *(void (**)(char *, uint64_t))(v120 + 8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v79, v78, v121);
      if (DateInterval.contains(_:)())
      {
        sub_100006788(v43 + 44, v43[47]);
        sub_1000D1690(v112);
        char v85 = v86;
        sub_100029A40((uint64_t)v125);
        uint64_t v87 = *(void (**)(char *, uint64_t))(v120 + 8);
        unint64_t v88 = v79;
        uint64_t v89 = v121;
        v87(v88, v121);
        ((void (*)(char *, uint64_t))v115)(v114, v119);
        v87(v113, v89);
        v87(v118, v89);
        return v85 & 1;
      }
      uint64_t v90 = v108;
      v105(v108, v79, v121);
      unint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = (uint8_t *)swift_slowAlloc();
        uint64_t v117 = swift_slowAlloc();
        uint64_t v123 = v117;
        *(_DWORD *)uint64_t v93 = 136315138;
        uint64_t v94 = v120;
        sub_1000D4C4C((unint64_t *)&qword_1001D9B08);
        uint64_t v95 = v121;
        uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v122 = sub_100005EB8(v96, v97, &v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        char v98 = *(void (**)(char *, uint64_t))(v94 + 8);
        v98(v90, v95);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Current date (%s) outside of attestation token validity period", v93, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100029A40((uint64_t)v125);
        v98(v111, v95);
        ((void (*)(char *, uint64_t))v115)(v114, v119);
        v98(v113, v95);
        v98(v118, v95);
        goto LABEL_18;
      }

      sub_100029A40((uint64_t)v125);
      uint64_t v83 = v121;
      long long v84 = *(void (**)(char *, uint64_t))(v120 + 8);
      v84(v90, v121);
      v84(v79, v83);
      ((void (*)(char *, uint64_t))v115)(v114, v119);
    }
    v84(v113, v83);
    v84(v118, v83);
LABEL_18:
    char v85 = 0;
    return v85 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D406C(const void *a1)
{
  uint64_t v2 = v1;
  if (qword_1001D91D8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DDA98);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    __dst[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100005EB8(0xD000000000000017, 0x80000001001992A0, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  memcpy(__dst, (const void *)(v2 + 16), 0x122uLL);
  memcpy((void *)(v2 + 16), a1, 0x122uLL);
  sub_1000852DC((uint64_t)a1);
  return sub_100085484((uint64_t)__dst);
}

id sub_1000D422C(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  if (qword_1001D91D8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DDA98);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    sub_100005EB8(0x287463656C6C6F63, 0xEB00000000293A5FLL, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s(options: %hhu)", (uint8_t *)v7, 0xFu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100006788((void *)(v2 + 392), *(void *)(v2 + 416));
  return sub_1000D2610(a1);
}

uint64_t sub_1000D43E4()
{
  memcpy(__dst, (const void *)(v0 + 16), 0x122uLL);
  sub_100085484((uint64_t)__dst);
  sub_100006520(v0 + 312);
  sub_100006520(v0 + 352);
  sub_100006520(v0 + 392);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MPOCDefaultAttestationManager()
{
  return self;
}

uint64_t sub_1000D446C(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = type metadata accessor for DefaultSecureTimeKeeper();
  os_log_type_t v27 = &off_1001C84C8;
  *(void *)&long long v25 = a2;
  uint64_t v23 = type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
  uint64_t v24 = &off_1001C9828;
  *(void *)&long long v22 = a3;
  uint64_t v20 = type metadata accessor for MPOCDefaultAttestationData();
  uint64_t v21 = &off_1001C8A68;
  *(void *)&long long v19 = a4;
  if (qword_1001D91D8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DDA98);
  sub_1000852DC((uint64_t)a1);
  sub_1000852DC((uint64_t)a1);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    sub_1000852DC((uint64_t)a1);
    unint64_t v14 = sub_1000F2368();
    unint64_t v16 = v15;
    sub_100085484((uint64_t)a1);
    sub_100005EB8(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100085484((uint64_t)a1);
    sub_100085484((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "MPOCDefaultAttestationManager.init() state: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100085484((uint64_t)a1);
    sub_100085484((uint64_t)a1);
  }

  memcpy((void *)(a5 + 16), a1, 0x122uLL);
  sub_10001F1F0(&v25, a5 + 312);
  sub_10001F1F0(&v22, a5 + 352);
  sub_10001F1F0(&v19, a5 + 392);
  return a5;
}

uint64_t sub_1000D46D0(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v32 = &off_1001C84C8;
  v30[0] = a2;
  uint64_t v28 = type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
  uint64_t v29 = &off_1001C9828;
  v27[0] = a3;
  uint64_t v25 = type metadata accessor for MPOCDefaultAttestationData();
  uint64_t v26 = &off_1001C8A68;
  v24[0] = a4;
  type metadata accessor for MPOCDefaultAttestationManager();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_10001F1A0((uint64_t)v30, v31);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_10001F1A0((uint64_t)v27, v28);
  __chkstk_darwin(v13, v13);
  unint64_t v15 = (void *)((char *)&v24[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_10001F1A0((uint64_t)v24, v25);
  __chkstk_darwin(v17, v17);
  long long v19 = (void *)((char *)&v24[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_1000D446C(a1, *v11, *v15, *v19, v8);
  sub_100006520((uint64_t)v24);
  sub_100006520((uint64_t)v27);
  sub_100006520((uint64_t)v30);
  return v21;
}

void *sub_1000D4970@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D91D8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003E78(v3, (uint64_t)qword_1001DDA98);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    __dst[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 136315138;
    uint64_t v15 = sub_100005EB8(0xD000000000000015, 0x8000000100199280, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    memcpy(__dst, (const void *)(v1 + 16), 0x122uLL);
    sub_1000852DC((uint64_t)__dst);
    unint64_t v10 = sub_1000F2368();
    unint64_t v12 = v11;
    sub_100085484((uint64_t)__dst);
    sub_100005EB8(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "MPOCAttestationState: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return memcpy(a1, (const void *)(v2 + 16), 0x122uLL);
}

uint64_t sub_1000D4C4C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D4C90()
{
  sub_1000F85DC((uint64_t)v19);
  if (v0)
  {
    swift_release();
  }
  else
  {
    sub_1000FEF24((uint64_t)v18);
    sub_1000FD4F8((uint64_t)v17);
    sub_100062184(v15);
    sub_1000621B0((uint64_t)v15, (uint64_t)v16);
    v16[35] = 0;
    v16[34] = 0;
    LOWORD(v16[36]) = 256;
    memcpy(v20, v16, 0x122uLL);
    uint64_t v3 = sub_10001F1A0((uint64_t)v19, v19[3]);
    uint64_t v21 = v15;
    __chkstk_darwin(v3, v3);
    os_log_type_t v5 = (uint64_t *)((char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = sub_10001F1A0((uint64_t)v18, v18[3]);
    __chkstk_darwin(v7, v7);
    uint64_t v9 = (uint64_t *)((char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    uint64_t v11 = sub_10001F1A0((uint64_t)v17, v17[3]);
    __chkstk_darwin(v11, v11);
    uint64_t v13 = (uint64_t *)((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    uint64_t v1 = sub_1000D46D0(v20, *v5, *v9, *v13);
    sub_100006520((uint64_t)v17);
    sub_100006520((uint64_t)v18);
    sub_100006520((uint64_t)v19);
    swift_release();
  }
  return v1;
}

uint64_t sub_1000D4FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = a5;
  uint64_t v9 = type metadata accessor for String.Encoding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v14 = String.data(using:allowLossyConversion:)();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if (v16 >> 60 == 15)
  {
    sub_100029D50(6002, 0x2064696C61766E69, (void *)0xED0000382D465455, 0);
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 40))(a1, a2, v14, v16, v18, a6);
    return sub_10000BF70(v14, v16);
  }
}

uint64_t sub_1000D5134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a2;
  uint64_t v22 = a4;
  uint64_t v20 = a1;
  uint64_t v9 = type metadata accessor for JSONEncoder.OutputFormatting();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
  static JSONEncoder.encodeClean<A>(_:outputFormatting:)(a3, (uint64_t)v13);
  if (v6) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  uint64_t v17 = v14;
  unint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 40))(v20, v21, v17, v18, v22, a6);
  return sub_100006628(v17, v18);
}

uint64_t sub_1000D52CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a2, a3, a5);
  if (!v5)
  {
    uint64_t v8 = result;
    unint64_t v9 = v7;
    type metadata accessor for JSONDecoder();
    default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    swift_bridgeObjectRelease();
    return sub_100006628(v8, v9);
  }
  return result;
}

unint64_t sub_1000D5390()
{
  sub_1000845C8(v0, (uint64_t)v9);
  unint64_t v1 = 0x69766C6F7365722ELL;
  switch(v10)
  {
    case 1:
      unint64_t v1 = 0xD00000000000001ELL;
      *(void *)&v8[0] = 0;
      *((void *)&v8[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      swift_release();
      break;
    case 2:
      swift_release();
      unint64_t v1 = 0xD000000000000021;
      break;
    case 3:
      return v1;
    default:
      sub_100006510(v9, v8);
      uint64_t v6 = 0x65766C6F7365722ELL;
      unint64_t v7 = 0xEA00000000002864;
      sub_100006570((uint64_t)v8, (uint64_t)v5);
      v2._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = 41;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      unint64_t v1 = v6;
      sub_100006520((uint64_t)v8);
      break;
  }
  return v1;
}

unint64_t sub_1000D54FC()
{
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = Settings.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 125;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000012;
}

uint64_t sub_1000D5594(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BackendSetting();
  __chkstk_darwin(v4 - 8, v5);
  unint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = OBJC_IVAR____TtC9SPREngine5Depot_components;
  *(void *)(v2 + v8) = sub_1001054A4((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v2 + OBJC_IVAR____TtC9SPREngine5Depot_componentsLock) = 0;
  sub_10004391C(a1, v2 + OBJC_IVAR____TtC9SPREngine5Depot_settings);
  uint64_t v9 = type metadata accessor for Settings();
  uint64_t v10 = a1 + *(int *)(v9 + 24);
  if (*(unsigned __int8 *)(v10 + 16) >= 2u && *(_OWORD *)v10 >= 2uLL)
  {
    uint64_t v21 = sub_1000D64B0;
    uint64_t v22 = 0;
    char v11 = 1;
    char v23 = 1;
    swift_beginAccess();
    sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001993A0);
    uint64_t v12 = sub_1000D6410;
  }
  else
  {
    uint64_t v21 = sub_1000D71F8;
    uint64_t v22 = 0;
    char v11 = 2;
    char v23 = 2;
    swift_beginAccess();
    sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001993A0);
    uint64_t v12 = sub_1000D7164;
  }
  uint64_t v21 = v12;
  uint64_t v22 = 0;
  char v23 = v11;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x80000001001993C0);
  swift_endAccess();
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v7, 11, 11, v13);
  char v15 = sub_100138F6C(a1, (uint64_t)v7);
  sub_1000930A8((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BackendSetting);
  if (v15)
  {
    uint64_t v21 = sub_1000D6374;
    uint64_t v22 = 0;
    char v16 = 1;
  }
  else
  {
    uint64_t v21 = sub_1000D70D0;
    uint64_t v22 = 0;
    char v16 = 2;
  }
  char v23 = v16;
  swift_beginAccess();
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001993E0);
  swift_endAccess();
  uint64_t v17 = a1 + *(int *)(v9 + 20);
  v14(v7, 11, 11, v13);
  LOBYTE(v17) = sub_100138F6C(v17, (uint64_t)v7);
  sub_1000930A8((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BackendSetting);
  if (v17)
  {
    uint64_t v21 = sub_1000D62E0;
    uint64_t v22 = 0;
    char v18 = 1;
  }
  else
  {
    uint64_t v21 = sub_1000D703C;
    uint64_t v22 = 0;
    char v18 = 2;
  }
  char v23 = v18;
  swift_beginAccess();
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199400);
  swift_endAccess();
  uint64_t v21 = sub_1000D6F9C;
  uint64_t v22 = 0;
  char v23 = 2;
  swift_beginAccess();
  sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199420);
  uint64_t v21 = sub_1000D6EE8;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x8000000100199440);
  uint64_t v21 = sub_1000D6EA8;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199460);
  uint64_t v21 = sub_1000D6E08;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0x6E41726564616552, 0xEF73636974796C61);
  uint64_t v21 = sub_1000D6DC8;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000011, 0x8000000100199480);
  uint64_t v21 = sub_1000D6D88;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000012, 0x80000001001994A0);
  uint64_t v21 = sub_1000D6CF4;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001994C0);
  uint64_t v21 = sub_1000D6C54;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000022, 0x80000001001994E0);
  uint64_t v21 = sub_1000D624C;
  uint64_t v22 = 0;
  char v23 = 1;
  sub_1001059B8((uint64_t)&v21, 0x7065654B656D6954, 0xEA00000000007265);
  uint64_t v21 = sub_1000D6BC0;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199510);
  uint64_t v21 = sub_1000D6B2C;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x8000000100199530);
  uint64_t v21 = sub_1000D6A98;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001CLL, 0x8000000100199550);
  uint64_t v21 = sub_1000D616C;
  uint64_t v22 = 0;
  char v23 = 1;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000012, 0x8000000100199570);
  uint64_t v21 = sub_1000D60D0;
  uint64_t v22 = 0;
  char v23 = 1;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x8000000100199590);
  uint64_t v21 = sub_1000D6A00;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000013, 0x80000001001995B0);
  uint64_t v21 = sub_1000D6028;
  uint64_t v22 = 0;
  char v23 = 1;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x80000001001995D0);
  uint64_t v21 = sub_1000D6958;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0x6174614465726F43, 0xEF726567616E614DLL);
  uint64_t v21 = sub_1000D68B8;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001995F0);
  uint64_t v21 = sub_1000D6824;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000026, 0x8000000100199610);
  uint64_t v21 = sub_1000D6790;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001ELL, 0x8000000100199640);
  uint64_t v21 = sub_1000D66FC;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x8000000100199660);
  uint64_t v21 = sub_1000D6668;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199680);
  uint64_t v21 = sub_1000D6618;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0x6553657275636553, 0xED00006563697672);
  uint64_t v21 = sub_1000D65D8;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x80000001001996A0);
  uint64_t v21 = sub_1000D6544;
  uint64_t v22 = 0;
  char v23 = 2;
  sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x80000001001996C0);
  swift_endAccess();
  sub_1000930A8(a1, (uint64_t (*)(void))type metadata accessor for Settings);
  return v2;
}

void sub_1000D5EF4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
  char v4 = *(unsigned char *)(v3 + *(int *)(type metadata accessor for Settings() + 28));
  type metadata accessor for SecureService();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  if (qword_1001D9180 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DD090);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SecureService.init()", v9, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(v5 + 24) = v4;
  *a2 = v5;
}

uint64_t sub_1000D6028@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SecureElement();
  swift_allocObject();
  uint64_t result = sub_10016DC48();
  if (!v1)
  {
    uint64_t v7 = v3;
    os_log_type_t v8 = &off_1001CC7B8;
    *(void *)&long long v6 = result;
    a1[3] = sub_100003EB0(&qword_1001DB7C8);
    uint64_t v5 = swift_allocObject();
    *a1 = v5;
    return sub_10001F1F0(&v6, v5 + 16);
  }
  return result;
}

uint64_t sub_1000D60D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DefaultManagedDictionary();
  swift_allocObject();
  uint64_t v6 = v2;
  uint64_t v7 = &off_1001C96D8;
  *(void *)&long long v5 = sub_1000CF418();
  a1[3] = sub_100003EB0(&qword_1001DB7C0);
  uint64_t v3 = swift_allocObject();
  *a1 = v3;
  return sub_10001F1F0(&v5, v3 + 16);
}

uint64_t sub_1000D616C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SystemInfo();
  uint64_t v3 = swift_allocObject();
  if (qword_1001D9160 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1001E0F90;
  *(_OWORD *)(v3 + 16) = xmmword_1001E0F80;
  *(void *)(v3 + 32) = v4;
  uint64_t v8 = v2;
  uint64_t v9 = &off_1001CB4C8;
  *(void *)&long long v7 = v3;
  a1[3] = sub_100003EB0(&qword_1001DB7D8);
  uint64_t v5 = swift_allocObject();
  *a1 = v5;
  return sub_10001F1F0(&v7, v5 + 16);
}

uint64_t sub_1000D624C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v5 = type metadata accessor for DefaultTimeKeeper();
  uint64_t v6 = &off_1001C7298;
  *(void *)&long long v4 = swift_allocObject();
  a1[3] = sub_100003EB0(&qword_1001DDD98);
  uint64_t v2 = swift_allocObject();
  *a1 = v2;
  return sub_10001F1F0(&v4, v2 + 16);
}

uint64_t sub_1000D62E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v5 = type metadata accessor for MPOCOfflineMonitorBackend();
  uint64_t v6 = &off_1001CBE18;
  *(void *)&long long v4 = swift_allocObject();
  a1[3] = sub_100003EB0(&qword_1001DDD68);
  uint64_t v2 = swift_allocObject();
  *a1 = v2;
  return sub_10001F1F0(&v4, v2 + 16);
}

uint64_t sub_1000D6374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OfflineConfiguratorBackend();
  swift_allocObject();
  uint64_t v6 = v2;
  long long v7 = &off_1001C7658;
  *(void *)&long long v5 = sub_1000443C8();
  a1[3] = sub_100003EB0(&qword_1001DC8E8);
  uint64_t v3 = swift_allocObject();
  *a1 = v3;
  return sub_10001F1F0(&v5, v3 + 16);
}

uint64_t sub_1000D6410@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MPOCVolatileMonitorLogger();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v7 = v2;
  uint64_t v8 = &off_1001C6AE8;
  *(void *)&long long v6 = v3;
  a1[3] = sub_100003EB0(&qword_1001DDD58);
  uint64_t v4 = swift_allocObject();
  *a1 = v4;
  return sub_10001F1F0(&v6, v4 + 16);
}

uint64_t sub_1000D64B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v5 = type metadata accessor for VolatilePersistenceFactory();
  long long v6 = &off_1001CB520;
  *(void *)&long long v4 = swift_allocObject();
  a1[3] = sub_100003EB0(&qword_1001DDD60);
  uint64_t v2 = swift_allocObject();
  *a1 = v2;
  return sub_10001F1F0(&v4, v2 + 16);
}

void *sub_1000D6544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)swift_retain();
  uint64_t result = sub_10015BC38(v3);
  if (!v1)
  {
    uint64_t v5 = result;
    uint64_t v8 = type metadata accessor for StoreAndForwardSelector();
    uint64_t v9 = &off_1001CC120;
    *(void *)&long long v7 = v5;
    a1[3] = sub_100003EB0(&qword_1001DC8F8);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return (void *)sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D65D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D6E48((uint64_t (*)(uint64_t))sub_1000CC868, (uint64_t (*)(void))type metadata accessor for PayAppletProfileCache, a1);
}

void sub_1000D6618(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1000D5EF4(a1, &v4);
  if (!v2)
  {
    a2[3] = type metadata accessor for SecureService();
    *a2 = v4;
  }
}

uint64_t sub_1000D6668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  uint64_t result = sub_100113598(v3);
  if (!v1)
  {
    uint64_t v5 = result;
    uint64_t v8 = type metadata accessor for MPOCDefaultMonitorManager();
    uint64_t v9 = &off_1001CAE10;
    *(void *)&long long v7 = v5;
    a1[3] = sub_100003EB0(&qword_1001DB7D0);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

void *sub_1000D66FC@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t result = sub_100134C38();
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v7 = type metadata accessor for ComponentAuditorFactory();
    uint64_t v8 = &off_1001CB488;
    *(void *)&long long v6 = v4;
    a1[3] = sub_100003EB0(&qword_1001DDD70);
    uint64_t v5 = swift_allocObject();
    *a1 = v5;
    return (void *)sub_10001F1F0(&v6, v5 + 16);
  }
  return result;
}

uint64_t sub_1000D6790@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t result = sub_1000D4C90();
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v7 = type metadata accessor for MPOCDefaultAttestationManager();
    uint64_t v8 = &off_1001C9838;
    *(void *)&long long v6 = v4;
    a1[3] = sub_100003EB0(&qword_1001DC8F0);
    uint64_t v5 = swift_allocObject();
    *a1 = v5;
    return sub_10001F1F0(&v6, v5 + 16);
  }
  return result;
}

id sub_1000D6824@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  id result = sub_1000D23F0(v3);
  if (!v1)
  {
    id v5 = result;
    uint64_t v8 = type metadata accessor for MPOCDefaultAttestationOfflineVerifier();
    uint64_t v9 = &off_1001C9828;
    *(void *)&long long v7 = v5;
    a1[3] = sub_100003EB0(&qword_1001DDD78);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return (id)sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D68B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)swift_retain();
  uint64_t v4 = sub_10008690C(v3);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v8 = type metadata accessor for MPOCDefaultAttestationData();
    uint64_t v9 = &off_1001C8A68;
    *(void *)&long long v7 = v4;
    a1[3] = sub_100003EB0(&qword_1001DDD80);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D6958@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  sub_1000FAFAC((uint64_t)v6);
  if (v1) {
    return swift_release();
  }
  uint64_t v4 = type metadata accessor for CoreDataManager();
  swift_allocObject();
  uint64_t v5 = sub_100139648(v6);
  uint64_t result = swift_release();
  a1[3] = v4;
  *a1 = v5;
  return result;
}

unsigned char *sub_1000D6A00@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Environment();
  uint64_t result = sub_1000909B0(v5);
  if (!v1)
  {
    a1[3] = sub_100003EB0(&qword_1001DDD88);
    uint64_t v4 = swift_allocObject();
    *a1 = v4;
    return (unsigned char *)sub_10001F1F0(v5, v4 + 16);
  }
  return result;
}

uint64_t sub_1000D6A98@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t result = sub_10004A508();
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v7 = type metadata accessor for SecureChannelFactory();
    uint64_t v8 = &off_1001C79F8;
    *(void *)&long long v6 = v4;
    a1[3] = sub_100003EB0(&qword_1001DDD90);
    uint64_t v5 = swift_allocObject();
    *a1 = v5;
    return sub_10001F1F0(&v6, v5 + 16);
  }
  return result;
}

void *sub_1000D6B2C@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t result = sub_100140370();
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v7 = type metadata accessor for SignerFactory();
    uint64_t v8 = &off_1001CB9D0;
    *(void *)&long long v6 = v4;
    a1[3] = sub_100003EB0(&qword_1001DC900);
    uint64_t v5 = swift_allocObject();
    *a1 = v5;
    return (void *)sub_10001F1F0(&v6, v5 + 16);
  }
  return result;
}

uint64_t sub_1000D6BC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  uint64_t result = sub_10006226C(v3);
  if (!v1)
  {
    uint64_t v5 = result;
    uint64_t v8 = type metadata accessor for DefaultSecureTimeKeeper();
    uint64_t v9 = &off_1001C84C8;
    *(void *)&long long v7 = v5;
    a1[3] = sub_100003EB0(&qword_1001DB3D8);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D6C54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_10003A104(v3);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v8 = type metadata accessor for CertificateVerifierFactory();
    uint64_t v9 = &off_1001C7218;
    *(void *)&long long v7 = v4;
    a1[3] = sub_100003EB0(&qword_1001DDDA0);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D6CF4@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t result = sub_10001E668();
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v7 = type metadata accessor for CertificateManager();
    uint64_t v8 = &off_1001C6308;
    *(void *)&long long v6 = v4;
    a1[3] = sub_100003EB0(&qword_1001DB7B0);
    uint64_t v5 = swift_allocObject();
    *a1 = v5;
    return sub_10001F1F0(&v6, v5 + 16);
  }
  return result;
}

uint64_t sub_1000D6D88@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D6F28(sub_10002C8C8, (uint64_t (*)(void))type metadata accessor for ProvisionAnalytics, a1);
}

uint64_t sub_1000D6DC8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D6F28(sub_1000639D0, (uint64_t (*)(void))type metadata accessor for SecurityAnalytics, a1);
}

uint64_t sub_1000D6E08@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D6E48((uint64_t (*)(uint64_t))sub_10005A1F4, (uint64_t (*)(void))type metadata accessor for ReaderAnalytics, a1);
}

uint64_t sub_1000D6E48@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = swift_retain();
  uint64_t result = a1(v7);
  if (!v3)
  {
    uint64_t v9 = result;
    uint64_t result = a2(0);
    a3[3] = result;
    *a3 = v9;
  }
  return result;
}

uint64_t sub_1000D6EA8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D6F28(sub_100048FF0, (uint64_t (*)(void))type metadata accessor for MonitorAnalytics, a1);
}

uint64_t sub_1000D6EE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000D6F28(sub_100046F2C, (uint64_t (*)(void))type metadata accessor for ConfiguratorAnalytics, a1);
}

uint64_t sub_1000D6F28@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = swift_retain();
  uint64_t v8 = a1(v7);
  uint64_t result = swift_release();
  if (!v3)
  {
    uint64_t result = a2(0);
    a3[3] = result;
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1000D6F9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = sub_1000436C8(v3);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v8 = type metadata accessor for CALogger();
    uint64_t v9 = &off_1001C7558;
    *(void *)&long long v7 = v4;
    a1[3] = sub_100003EB0(&qword_1001DDDA8);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D703C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  uint64_t result = sub_1000EC3F0(v3);
  if (!v1)
  {
    uint64_t v5 = result;
    uint64_t v8 = type metadata accessor for MPOCDefaultMonitorBackend();
    uint64_t v9 = &off_1001CA4F8;
    *(void *)&long long v7 = v5;
    a1[3] = sub_100003EB0(&qword_1001DDD68);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D70D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  uint64_t result = sub_1000A707C(v3);
  if (!v1)
  {
    uint64_t v5 = result;
    uint64_t v8 = type metadata accessor for ConfiguratorBackend(0);
    uint64_t v9 = &off_1001C8E40;
    *(void *)&long long v7 = v5;
    a1[3] = sub_100003EB0(&qword_1001DC8E8);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

void *sub_1000D7164@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_retain();
  uint64_t result = sub_10006B1C0(v3);
  if (!v1)
  {
    uint64_t v5 = result;
    uint64_t v8 = type metadata accessor for MPOCDefaultMonitorLogger();
    uint64_t v9 = &off_1001C87B0;
    *(void *)&long long v7 = v5;
    a1[3] = sub_100003EB0(&qword_1001DDD58);
    uint64_t v6 = swift_allocObject();
    *a1 = v6;
    return (void *)sub_10001F1F0(&v7, v6 + 16);
  }
  return result;
}

uint64_t sub_1000D71F8@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  uint64_t result = sub_10014F838();
  if (!v1)
  {
    uint64_t v4 = result;
    uint64_t v7 = type metadata accessor for PersistenceFactory();
    uint64_t v8 = &off_1001CBF38;
    *(void *)&long long v6 = v4;
    a1[3] = sub_100003EB0(&qword_1001DDD60);
    uint64_t v5 = swift_allocObject();
    *a1 = v5;
    return sub_10001F1F0(&v6, v5 + 16);
  }
  return result;
}

uint64_t sub_1000D728C()
{
  sub_1000930A8(v0 + OBJC_IVAR____TtC9SPREngine5Depot_settings, (uint64_t (*)(void))type metadata accessor for Settings);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000D7314()
{
  return type metadata accessor for Depot();
}

uint64_t type metadata accessor for Depot()
{
  uint64_t result = qword_1001DDC38;
  if (!qword_1001DDC38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D7368()
{
  uint64_t result = type metadata accessor for Settings();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000D7410()
{
  return sub_1000D54FC();
}

uint64_t sub_1000D7434()
{
  sub_100006520(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t destroy for Depot.Element(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 32);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)result + 3;
  }
  if (v1 == 2 || v1 == 1)
  {
    return swift_release();
  }
  else if (!v1)
  {
    return sub_100006520(result);
  }
  return result;
}

uint64_t initializeWithCopy for Depot.Element(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    char v6 = 2;
LABEL_9:
    *(unsigned char *)(a1 + 32) = v6;
    swift_retain();
    return a1;
  }
  if (v3 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    char v6 = 1;
    goto LABEL_9;
  }
  if (v3)
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for Depot.Element(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2 || v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      sub_100006520(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 32);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v7 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v7;
      char v8 = 2;
    }
    else
    {
      if (v5 != 1)
      {
        if (v5)
        {
          long long v10 = *a2;
          long long v11 = a2[1];
          *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
          *(_OWORD *)a1 = v10;
          *(_OWORD *)(a1 + 16) = v11;
        }
        else
        {
          uint64_t v6 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v6;
          (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
          *(unsigned char *)(a1 + 32) = 0;
        }
        return a1;
      }
      uint64_t v9 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v9;
      char v8 = 1;
    }
    *(unsigned char *)(a1 + 32) = v8;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithTake for Depot.Element(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2 || v4 == 1)
    {
      swift_release();
    }
    else if (!v4)
    {
      sub_100006520(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2 || v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      if (!v5)
      {
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(unsigned char *)(a1 + 32) = 0;
        return a1;
      }
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      LOBYTE(v5) = *(unsigned char *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for Depot.Element(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Depot.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000D77DC(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t sub_1000D77F8(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Depot.Element()
{
  return &type metadata for Depot.Element;
}

void sub_1000D787C()
{
  byte_1001E0FB8 = 2;
}

void sub_1000D78D0()
{
  byte_1001E0FB9 = 4;
}

void sub_1000D7924()
{
  byte_1001E0FBA = 8;
}

void sub_1000D7978()
{
  byte_1001E0FBB = 16;
}

void sub_1000D79CC()
{
  byte_1001E0FBC = 64;
}

void sub_1000D7A20()
{
  byte_1001E0FBD = 0x80;
}

void sub_1000D7A74()
{
  if (qword_1001D91E0 != -1) {
    swift_once();
  }
  int v0 = byte_1001E0FB8;
  if (qword_1001D91E8 != -1) {
    swift_once();
  }
  int v1 = byte_1001E0FB9;
  if (qword_1001D91F0 != -1) {
    swift_once();
  }
  int v2 = byte_1001E0FBA;
  if (qword_1001D9200 != -1) {
    swift_once();
  }
  int v3 = byte_1001E0FBC;
  if (qword_1001D9208 != -1) {
    swift_once();
  }
  int v4 = byte_1001E0FBD;
  sub_10002C874();
  UnsignedInteger.clearBit(_:)(0);
  char v5 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    char v5 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v1;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v2) != v2)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v2;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v3) != v3)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v3;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v5 & v4) != v4)
  {
    UnsignedInteger.clearBit(_:)(0);
    v5 |= v4;
  }
  byte_1001E0FBE = v5;
}

void sub_1000D7E0C()
{
  byte_1001E0FBF = 0;
}

void sub_1000D7E5C()
{
  if (qword_1001D91E0 != -1) {
    swift_once();
  }
  int v0 = byte_1001E0FB8;
  if (qword_1001D91E8 != -1) {
    swift_once();
  }
  int v1 = byte_1001E0FB9;
  if (qword_1001D91F0 != -1) {
    swift_once();
  }
  int v2 = byte_1001E0FBA;
  if (qword_1001D91F8 != -1) {
    swift_once();
  }
  int v3 = byte_1001E0FBB;
  if (qword_1001D9200 != -1) {
    swift_once();
  }
  int v4 = byte_1001E0FBC;
  if (qword_1001D9208 != -1) {
    swift_once();
  }
  int v5 = byte_1001E0FBD;
  sub_10002C874();
  UnsignedInteger.clearBit(_:)(0);
  char v6 = 0;
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if (v0)
  {
    UnsignedInteger.clearBit(_:)(0);
    char v6 = v0;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v1) != v1)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v1;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v2) != v2)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v2;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v3) != v3)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v3;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v4) != v4)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v4;
  }
  UnsignedInteger.clearBit(_:)(0);
  UnsignedInteger.clearBit(_:)(0);
  if ((v6 & v5) != v5)
  {
    UnsignedInteger.clearBit(_:)(0);
    v6 |= v5;
  }
  byte_1001E0FC0 = v6;
}

uint64_t sub_1000D8294(uint64_t a1, unint64_t a2)
{
  int v2 = 1;
  unsigned __int8 v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)a1;
      if ((int)a1 != a1 >> 32) {
        goto LABEL_15;
      }
      unsigned __int8 v3 = 0;
      return v3 | (v2 << 8);
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      if (v4 != v5)
      {
        if (a2 >> 62 == 2)
        {
          if (v4 >= v5) {
            goto LABEL_23;
          }
          uint64_t v6 = __DataStorage._bytes.getter();
          if (!v6) {
            goto LABEL_25;
          }
          uint64_t v7 = v6;
          a1 = __DataStorage._offset.getter();
          uint64_t v8 = v4 - a1;
          if (!__OFSUB__(v4, a1)) {
            goto LABEL_19;
          }
          __break(1u);
        }
LABEL_15:
        if (v4 < (int)a1 || v4 >= a1 >> 32)
        {
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
        }
        uint64_t v9 = __DataStorage._bytes.getter();
        if (v9)
        {
          uint64_t v7 = v9;
          uint64_t v10 = __DataStorage._offset.getter();
          uint64_t v8 = v4 - v10;
          if (!__OFSUB__(v4, v10))
          {
LABEL_19:
            int v2 = 0;
            unsigned __int8 v3 = *(unsigned char *)(v7 + v8);
            return v3 | (v2 << 8);
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x1000D83DCLL);
      }
      unsigned __int8 v3 = 0;
      int v2 = 1;
      return v3 | (v2 << 8);
    case 3uLL:
      return v3 | (v2 << 8);
    default:
      int v2 = (a2 & 0xFF000000000000) == 0;
      if ((a2 & 0xFF000000000000) != 0) {
        unsigned __int8 v3 = a1;
      }
      else {
        unsigned __int8 v3 = 0;
      }
      return v3 | (v2 << 8);
  }
}

uint64_t sub_1000D83EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

void sub_1000D846C(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, unint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v32 = a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [self defaultManager];
  URL.path(percentEncoded:)(0);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (isa)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_1000DF158(&qword_1001D9D58, type metadata accessor for FileAttributeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  [v13 createFileAtPath:v14 contents:0 attributes:isa];

  sub_1000DF118();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  uint64_t v15 = v34;
  id v16 = sub_1000DC9CC((uint64_t)v12);
  if (!v15)
  {
    uint64_t v17 = 1;
    char v18 = v16;
    uint64_t v19 = 0;
    uint64_t v21 = v32;
    uint64_t v20 = v33;
    switch(a5 >> 62)
    {
      case 1uLL:
        uint64_t v17 = (int)v33 + 1;
        uint64_t v19 = v33 >> 32;
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v33 + 16);
        uint64_t v17 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
          JUMPOUT(0x1000D8828);
        }
        uint64_t v19 = *(void *)(v33 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v19 = BYTE6(a5);
        uint64_t v17 = 1;
        break;
    }
    uint64_t v23 = v19 - 1;
    if (__OFSUB__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = v23 - v17;
      if (v23 >= v17)
      {
        uint64_t v35 = v17;
        if (!__OFSUB__(v23, v17))
        {
          while (v24 >= 4)
          {
            sub_1000DCC04(v21, v17, v23, &v35, v20, a5, (unint64_t)v18);
            uint64_t v24 = v23 - v35;
            if (__OFSUB__(v23, v35))
            {
              __break(1u);
              break;
            }
          }
          if (v24 < 1) {
            goto LABEL_21;
          }
          if (qword_1001D9228 == -1)
          {
LABEL_18:
            uint64_t v26 = type metadata accessor for Logger();
            sub_100003E78(v26, (uint64_t)qword_1001DDDB0);
            os_log_type_t v27 = Logger.logObject.getter();
            os_log_type_t v28 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v27, v28))
            {
              uint64_t v29 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v29 = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "invalid base64", v29, 2u);
              swift_slowDealloc();
            }

            sub_1000DEE78();
            swift_allocError();
            *uint64_t v30 = 2;
            swift_willThrow();
LABEL_21:
            sub_1000DCB24(v18);

            return;
          }
LABEL_26:
          swift_once();
          goto LABEL_18;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
}

uint64_t sub_1000D8838()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DDDB0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DDDB0);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  unsigned __int8 v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000D8900(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v7 = sub_100003EB0(&qword_1001DDF40);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000E0C90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    char v17 = 1;
    sub_100003EB0(&qword_1001DDF08);
    sub_1000E2130(&qword_1001DDF50, &qword_1001DDF08);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1000D8AC8()
{
  if (*v0) {
    return 0x65676E6172;
  }
  else {
    return 0x654B676E69646F63;
  }
}

uint64_t sub_1000D8B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E0CE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D8B2C(uint64_t a1)
{
  unint64_t v2 = sub_1000E0C90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D8B68(uint64_t a1)
{
  unint64_t v2 = sub_1000E0C90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D8BA4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000E0DDC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000D8BD4(void *a1)
{
  return sub_1000D8900(a1, *v1, v1[1], v1[2], v1[3]);
}

unint64_t sub_1000D8BF4(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D8C78(void *a1)
{
  unsigned __int8 v3 = v1;
  uint64_t v5 = sub_100003EB0(&qword_1001DDFA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000E1FF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100029CEC((uint64_t)v3, (uint64_t)v18, &qword_1001DDFA8);
  sub_100029CEC((uint64_t)v18, (uint64_t)&v15, &qword_1001DDFA8);
  char v14 = 0;
  sub_1000DEDD0();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    long long v10 = v3[3];
    long long v15 = v3[2];
    long long v16 = v10;
    char v14 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = v3[5];
    long long v15 = v3[4];
    long long v16 = v11;
    char v14 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_100029CEC((uint64_t)(v3 + 6), (uint64_t)v17, &qword_1001DDFA8);
    sub_100029CEC((uint64_t)v17, (uint64_t)&v15, &qword_1001DDFA8);
    char v14 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_1000D8EC0()
{
  return sub_1000D8BF4(*v0);
}

uint64_t sub_1000D8EC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E1028(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000D8EF0(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000D8EFC(uint64_t a1)
{
  unint64_t v2 = sub_1000E1FF4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D8F38(uint64_t a1)
{
  unint64_t v2 = sub_1000E1FF4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000D8F74@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000E11C0(a1, v9);
  if (!v2)
  {
    long long v5 = v13;
    a2[4] = v12;
    a2[5] = v5;
    long long v6 = v15;
    a2[6] = v14;
    a2[7] = v6;
    long long v7 = v9[1];
    *a2 = v9[0];
    a2[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a2[2] = v10;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1000D8FC8(void *a1)
{
  return sub_1000D8C78(a1);
}

uint64_t sub_1000D9014()
{
  if (*v0) {
    return 0x666E6F4374736F68;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_1000D9058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E1648(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D9080(uint64_t a1)
{
  unint64_t v2 = sub_1000E1744();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D90BC(uint64_t a1)
{
  unint64_t v2 = sub_1000E1744();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000D90F8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000D945C(a1, &qword_1001DDF58, (void (*)(void))sub_1000E1744, a2);
}

uint64_t sub_1000D9134(void *a1)
{
  return sub_1000D9194(a1, &qword_1001DDFC0, (void (*)(void))sub_1000E1744);
}

uint64_t sub_1000D9194(void *a1, uint64_t *a2, void (*a3)(void))
{
  long long v6 = v3;
  uint64_t v8 = sub_100003EB0(a2);
  uint64_t v15 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  long long v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = v6[1];
  v16[0] = *v6;
  v16[1] = v12;
  char v18 = 0;
  sub_1000DEDD0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    sub_100029CEC((uint64_t)(v6 + 2), (uint64_t)v17, &qword_1001DDFA8);
    sub_100029CEC((uint64_t)v17, (uint64_t)v16, &qword_1001DDFA8);
    char v18 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, v8);
}

uint64_t sub_1000D9354()
{
  if (*v0) {
    return 0x747069726373;
  }
  else {
    return 25705;
  }
}

uint64_t sub_1000D9380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E17EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D93A8(uint64_t a1)
{
  unint64_t v2 = sub_1000E1FA0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D93E4(uint64_t a1)
{
  unint64_t v2 = sub_1000E1FA0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000D9420@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1000D945C(a1, &qword_1001DDF80, (void (*)(void))sub_1000E1FA0, a2);
}

double sub_1000D945C@<D0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, _OWORD *a4@<X8>)
{
  sub_1000E18C0(a1, a2, a3, v9);
  if (!v4)
  {
    long long v7 = v9[1];
    *a4 = v9[0];
    a4[1] = v7;
    double result = *(double *)&v10;
    long long v8 = v11;
    a4[2] = v10;
    a4[3] = v8;
  }
  return result;
}

uint64_t sub_1000D94AC(void *a1)
{
  return sub_1000D9194(a1, &qword_1001DDFB0, (void (*)(void))sub_1000E1FA0);
}

void *sub_1000D950C(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v89 = sub_100003EB0(&qword_1001DDF00);
  __chkstk_darwin(v89, v10);
  long long v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D9228 != -1) {
    goto LABEL_106;
  }
LABEL_2:
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100003E78(v13, (uint64_t)qword_1001DDDB0);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v86 = (uint64_t)a1;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v80 = v14;
    uint64_t v88 = a4;
    char v18 = (uint8_t *)v17;
    uint64_t v92 = swift_slowAlloc();
    uint64_t v87 = v12;
    *(_DWORD *)char v18 = 136315138;
    swift_bridgeObjectRetain();
    v91[0] = sub_100005EB8(v86, a2, &v92);
    long long v12 = v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "parsing %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v88;
    uint64_t v14 = v80;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v19 = *(void *)(v5 + 32);
  unint64_t v20 = *(void *)(v5 + 40);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  switch(v20 >> 62)
  {
    case 1uLL:
      uint64_t v21 = (int)v19;
      uint64_t v22 = v19 >> 32;
      goto LABEL_9;
    case 2uLL:
      uint64_t v21 = *(void *)(v19 + 16);
      uint64_t v22 = *(void *)(v19 + 24);
LABEL_9:
      if (v22 >= v21) {
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_108;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v21 = 0;
      uint64_t v22 = BYTE6(v20);
LABEL_10:
      uint64_t v92 = v21;
      unint64_t v93 = v22;
      v91[0] = a3;
      v91[1] = a4;
      uint64_t v23 = sub_100003EB0(&qword_1001DDF08);
      if ((Range.include(_:)((uint64_t)v91, v23) & 1) == 0)
      {
        swift_bridgeObjectRetain_n();
        os_log_type_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          uint64_t v31 = swift_slowAlloc();
          uint64_t v90 = a4;
          v91[0] = v31;
          *(_DWORD *)uint64_t v30 = 136315138;
          uint64_t v89 = (uint64_t)(v30 + 4);
          uint64_t v94 = a3;
          uint64_t v92 = 0;
          unint64_t v93 = 0xE000000000000000;
          _print_unlocked<A, B>(_:_:)();
          v32._uint64_t countAndFlagsBits = 3943982;
          v32._object = (void *)0xE300000000000000;
          String.append(_:)(v32);
          _print_unlocked<A, B>(_:_:)();
          uint64_t v92 = sub_100005EB8(v92, v93, v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "invalid range %s", v30, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        sub_1000DEE78();
        swift_allocError();
        *uint64_t v33 = 0;
        return (void *)swift_willThrow();
      }
      uint64_t v24 = Data._Representation.subscript.getter();
      uint64_t v92 = 0;
      unint64_t v93 = 0xE000000000000000;
      a1 = (void *)(v25 >> 62);
      uint64_t v26 = v24;
      unint64_t v27 = v25;
      switch(v25 >> 62)
      {
        case 1uLL:
        case 2uLL:
          sub_1000065D0(v24, v25);
          sub_1000065D0(v26, v27);
          break;
        default:
          break;
      }
      Data.Iterator.init(_:at:)();
      unint64_t v79 = v27;
      sub_100006628(v26, v27);
      uint64_t v5 = *(int *)(v89 + 36);
      *(void *)&v12[v5] = 0;
      uint64_t v35 = type metadata accessor for Data.Iterator();
      sub_1000DF158((unint64_t *)&qword_1001DDF10, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
      uint64_t v89 = v35;
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v87 = (char *)v26;
      if ((v91[0] & 0x100) != 0)
      {
        unint64_t v82 = 0;
        long long v84 = _swiftEmptyArrayStorage;
LABEL_19:
        sub_100006628((uint64_t)v87, v79);
        swift_bridgeObjectRelease();
        sub_1000DF05C((uint64_t)v12);
        swift_bridgeObjectRelease();
        return v84;
      }
      uint64_t v80 = v14;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      unint64_t v82 = 0;
      a2 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = (int)v26;
      uint64_t v78 = 1;
      long long v84 = _swiftEmptyArrayStorage;
      a4 = 0xE100000000000000;
      uint64_t v88 = a1;
      break;
  }
LABEL_23:
  a3 = v85 | (a2 != 1);
  int v81 = HIDWORD(v85) ^ 1;
  int v37 = 1;
LABEL_24:
  int v83 = v37;
  while (1)
  {
    uint64_t v38 = *(void *)&v12[v5];
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      swift_once();
      goto LABEL_2;
    }
    unsigned int v39 = LOBYTE(v91[0]);
    *(void *)&v12[v5] = v38 + 1;
    uint64_t v40 = 0;
    switch(v88)
    {
      case 1:
        uint64_t v40 = v86;
        break;
      case 2:
        uint64_t v40 = *((void *)v87 + 2);
        break;
      default:
        break;
    }
    uint64_t v41 = v40 + v38;
    if (__OFADD__(v40, v38)) {
      goto LABEL_105;
    }
    if ((v39 & 0x80) != 0) {
      unsigned int v42 = ((v39 >> 6) & 0xFFFFC0FF | ((v39 & 0x3F) << 8)) + 33217;
    }
    else {
      unsigned int v42 = v39 + 1;
    }
    v91[0] = (v42 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v42) >> 3)) & 7)));
    uint64_t v43 = static String._uncheckedFromUTF8(_:)();
    BOOL v45 = v43 == 123 && v44 == (void *)0xE100000000000000;
    if (v45 || (uint64_t v46 = v43, a1 = v44, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      BOOL v36 = __OFADD__(a2++, 1);
      if (!v36) {
        goto LABEL_22;
      }
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
      JUMPOUT(0x1000DA1E4);
    }
    BOOL v47 = v46 == 125 && a1 == (void *)0xE100000000000000;
    if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (v46 == 34 && a1 == (void *)0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (a3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      HIDWORD(v85) ^= 1u;
      if ((v83 | HIDWORD(v85)))
      {
        swift_bridgeObjectRelease();
        LODWORD(v85) = 0;
        a2 = 1;
        goto LABEL_22;
      }
      v54._uint64_t countAndFlagsBits = v46;
      v54._object = a1;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      LODWORD(v85) = 0;
      a2 = 1;
LABEL_82:
      HIDWORD(v85) = 1;
      goto LABEL_22;
    }
    if (v46 == 58 && a1 == (void *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      if ((a3 & 1) == 0) {
        goto LABEL_83;
      }
    }
    else
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        swift_bridgeObjectRelease();
        if (a3) {
          goto LABEL_48;
        }
LABEL_83:
        swift_bridgeObjectRelease();
        uint64_t v55 = v92;
        unint64_t v82 = v93;
        uint64_t v92 = 0;
        unint64_t v93 = 0xE000000000000000;
        uint64_t v76 = v55;
        uint64_t v77 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_116;
        }
        uint64_t v78 = 0;
        a2 = 1;
        LODWORD(v85) = 1;
LABEL_22:
        dispatch thunk of IteratorProtocol.next()();
        if ((v91[0] & 0x100) != 0) {
          goto LABEL_19;
        }
        goto LABEL_23;
      }
      if ((v46 != 44 || a1 != (void *)0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if ((v46 != 92 || a1 != (void *)0xE100000000000000)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if ((v85 & 0x100000000) == 0)
          {
            swift_bridgeObjectRelease();
            HIDWORD(v85) = 0;
            goto LABEL_22;
          }
LABEL_94:
          v62._uint64_t countAndFlagsBits = v46;
          v62._object = a1;
          String.append(_:)(v62);
          swift_bridgeObjectRelease();
          goto LABEL_82;
        }
        if (((v83 | v81) & 1) == 0) {
          goto LABEL_94;
        }
        swift_bridgeObjectRelease();
        dispatch thunk of IteratorProtocol.next()();
        int v37 = 0;
        if ((v91[0] & 0x100) != 0) {
          goto LABEL_19;
        }
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
      if (a2 == 1)
      {
        if (v78)
        {
LABEL_108:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v56 = v84;
          if (v82)
          {
            if (v77 < v41)
            {
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v56 = sub_10015AC70(0, v56[2] + 1, 1, v56);
              }
              unint64_t v58 = v56[2];
              unint64_t v57 = v56[3];
              long long v84 = v56;
              a1 = (void *)(v58 + 1);
              if (v58 >= v57 >> 1) {
                long long v84 = sub_10015AC70((void *)(v57 > 1), v58 + 1, 1, v84);
              }
              LODWORD(v85) = 0;
              uint64_t v78 = 0;
              uint64_t v59 = v84;
              v84[2] = a1;
              uint64_t v60 = &v59[4 * v58];
              unint64_t v61 = v82;
              v60[4] = v76;
              v60[5] = v61;
              v60[6] = v77;
              v60[7] = v41;
              a2 = 1;
              goto LABEL_22;
            }
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        BOOL v72 = os_log_type_enabled(v70, v71);
        unint64_t v66 = v79;
        uint64_t v67 = (uint64_t)v87;
        if (v72)
        {
          unint64_t v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v73 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "The given data was not valid JSON.\nNo string key for value in object", v73, 2u);
          swift_slowDealloc();
        }

        sub_1000DEE78();
        swift_allocError();
        *unint64_t v74 = 0;
        goto LABEL_103;
      }
    }
LABEL_48:
    dispatch thunk of IteratorProtocol.next()();
    if ((v91[0] & 0x100) != 0) {
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  BOOL v36 = __OFSUB__(a2--, 1);
  if (v36) {
    goto LABEL_115;
  }
  if (a2) {
    goto LABEL_22;
  }
  if (v78)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v48 = v84;
    if (v82)
    {
      if (v77 < v41)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v48 = sub_10015AC70(0, v48[2] + 1, 1, v48);
        }
        unint64_t v50 = v48[2];
        unint64_t v49 = v48[3];
        a1 = (void *)(v50 + 1);
        if (v50 >= v49 >> 1) {
          long long v84 = sub_10015AC70((void *)(v49 > 1), v50 + 1, 1, v48);
        }
        else {
          long long v84 = v48;
        }
        a2 = 0;
        LODWORD(v85) = 0;
        uint64_t v78 = 0;
        uint64_t v51 = v84;
        v84[2] = a1;
        uint64_t v52 = &v51[4 * v50];
        unint64_t v53 = v82;
        v52[4] = v76;
        v52[5] = v53;
        v52[6] = v77;
        v52[7] = v41;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  int v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.error.getter();
  BOOL v65 = os_log_type_enabled(v63, v64);
  unint64_t v66 = v79;
  uint64_t v67 = (uint64_t)v87;
  if (v65)
  {
    unint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "an empty JSON value, missing coding key", v68, 2u);
    swift_slowDealloc();
  }

  sub_1000DEE78();
  swift_allocError();
  *unint64_t v69 = 1;
LABEL_103:
  swift_willThrow();
  sub_100006628(v67, v66);
  return (void *)sub_1000DF05C((uint64_t)v12);
}

uint64_t sub_1000DA214()
{
  uint64_t v1 = v0[1];
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v1 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return result;
  }
LABEL_5:
  String.index(before:)();

  return String.remove(at:)();
}

uint64_t sub_1000DA27C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 32);
  unint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)v4;
      uint64_t v7 = v4 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v4 + 24);
LABEL_5:
      if (v7 >= v6) {
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_12;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v6 = 0;
      uint64_t v7 = BYTE6(v5);
LABEL_6:
      uint64_t result = (uint64_t)sub_1000D950C((void *)0x6C6576654C706F74, 0xEC0000004E4F534ALL, v6, v7);
      if (v2) {
        return result;
      }
      sub_1000DA858(result, (uint64_t)v36);
      swift_bridgeObjectRelease();
      v31[2] = v37;
      v31[3] = v38;
      long long v32 = v39;
      long long v33 = v40;
      long long v34 = v41;
      long long v35 = v42;
      v31[0] = v36[0];
      v31[1] = v36[1];
      uint64_t v9 = sub_1000DAB7C((void *)v37, *((unint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1));
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      uint64_t v30 = sub_1000DAEA4(*(uint64_t *)&v31[0], *((unint64_t *)&v31[0] + 1));
      uint64_t v50 = v16;
      uint64_t v29 = v9;
      swift_bridgeObjectRetain();
      sub_1000DB7FC((void *)v32, *((unint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v43);
      swift_bridgeObjectRelease();
      sub_1000DB7FC((void *)v34, *((unint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v44);
      unint64_t v17 = v44[0];
      unint64_t v18 = v44[1];
      unint64_t v19 = v44[2];
      unint64_t v20 = v44[3];
      unint64_t v27 = v44[5];
      unint64_t v28 = v44[4];
      unint64_t v25 = v44[7];
      unint64_t v26 = v44[6];
      sub_1000DEF74((uint64_t)v31);
      uint64_t result = sub_100029CEC((uint64_t)v43, (uint64_t)&v45, &qword_1001DCF80);
      uint64_t v21 = v46;
      if (!v46)
      {
LABEL_12:
        __break(1u);
        JUMPOUT(0x1000DA528);
      }
      uint64_t v22 = v45;
      uint64_t v23 = v50;
      *(void *)a1 = v30;
      *(void *)(a1 + 8) = v23;
      *(void *)(a1 + 16) = v29;
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v22;
      *(void *)(a1 + 56) = v21;
      long long v24 = v48;
      *(_OWORD *)(a1 + 64) = v47;
      *(_OWORD *)(a1 + 80) = v24;
      *(_OWORD *)(a1 + 96) = v49;
      *(void *)(a1 + 112) = v17;
      *(void *)(a1 + 120) = v18;
      *(void *)(a1 + 128) = v19;
      *(void *)(a1 + 136) = v20;
      *(void *)(a1 + 144) = v28;
      *(void *)(a1 + 152) = v27;
      *(void *)(a1 + 160) = v26;
      *(void *)(a1 + 168) = v25;
      return result;
  }
}

uint64_t sub_1000DA538@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = v4;
  uint64_t v10 = type metadata accessor for JSONEncoder.OutputFormatting();
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v38 = v10;
  __chkstk_darwin(v10, v11);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v35 = a4;
  BOOL v36 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v13)
  {
    uint64_t v32 = v4;
    long long v33 = a2;
    uint64_t v34 = a3;
    long long v40 = _swiftEmptyArrayStorage;
    sub_10014BA9C(0, v13, 0);
    uint64_t v14 = v40;
    uint64_t v15 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v16 = *(v15 - 3);
      uint64_t v17 = *(v15 - 2);
      uint64_t v18 = *(v15 - 1);
      uint64_t v39 = *v15;
      long long v40 = v14;
      unint64_t v20 = v14[2];
      unint64_t v19 = v14[3];
      swift_bridgeObjectRetain_n();
      if (v20 >= v19 >> 1)
      {
        sub_10014BA9C(v19 > 1, v20 + 1, 1);
        uint64_t v14 = v40;
      }
      v15 += 4;
      v14[2] = v20 + 1;
      uint64_t v21 = &v14[6 * v20];
      v21[4] = v16;
      v21[5] = v17;
      v21[6] = v16;
      v21[7] = v17;
      uint64_t v22 = v39;
      v21[8] = v18;
      v21[9] = v22;
      --v13;
    }
    while (v13);
    a2 = v33;
    uint64_t v7 = v32;
    goto LABEL_8;
  }
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_8:
    sub_100003EB0(&qword_1001DC928);
    uint64_t v23 = (void *)static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_9;
  }
  uint64_t v23 = &_swiftEmptyDictionarySingleton;
LABEL_9:
  long long v40 = v23;
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_1000DD420(v24, 1, (uint64_t *)&v40);
  if (v7)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v25 = v40;
    type metadata accessor for JSONEncoder();
    long long v40 = v25;
    sub_100003EB0(&qword_1001DDEC0);
    sub_1000DED54();
    uint64_t v26 = (uint64_t)v36;
    default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
    static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)&v40, v26);
    uint64_t v28 = v27;
    unint64_t v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v26, v38);
    swift_release();
    type metadata accessor for JSONDecoder();
    a2();
    default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    swift_bridgeObjectRelease();
    return sub_100006628(v28, v30);
  }
  return result;
}

uint64_t sub_1000DA858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for JSONEncoder.OutputFormatting();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v29 = v2;
    unint64_t v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v31 = v7;
    uint64_t v32 = v6;
    uint64_t v33 = a2;
    uint64_t v35 = _swiftEmptyArrayStorage;
    sub_10014BA9C(0, v11, 0);
    uint64_t v12 = v35;
    int64_t v13 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v14 = *(v13 - 3);
      uint64_t v15 = *(v13 - 2);
      uint64_t v16 = *(v13 - 1);
      uint64_t v34 = *v13;
      uint64_t v35 = v12;
      unint64_t v18 = v12[2];
      unint64_t v17 = v12[3];
      swift_bridgeObjectRetain_n();
      if (v18 >= v17 >> 1)
      {
        sub_10014BA9C(v17 > 1, v18 + 1, 1);
        uint64_t v12 = v35;
      }
      v13 += 4;
      v12[2] = v18 + 1;
      unint64_t v19 = &v12[6 * v18];
      v19[4] = v14;
      uint64_t v19[5] = v15;
      v19[6] = v14;
      v19[7] = v15;
      uint64_t v20 = v34;
      v19[8] = v16;
      v19[9] = v20;
      --v11;
    }
    while (v11);
    uint64_t v6 = v32;
    uint64_t v10 = v30;
    uint64_t v7 = v31;
    uint64_t v3 = v29;
    goto LABEL_8;
  }
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_8:
    sub_100003EB0(&qword_1001DC928);
    uint64_t v21 = (void *)static _DictionaryStorage.allocate(capacity:)();
    goto LABEL_9;
  }
  uint64_t v21 = &_swiftEmptyDictionarySingleton;
LABEL_9:
  uint64_t v35 = v21;
  uint64_t v22 = swift_bridgeObjectRetain();
  sub_1000DD420(v22, 1, (uint64_t *)&v35);
  if (v3)
  {
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = v35;
    type metadata accessor for JSONEncoder();
    uint64_t v35 = v23;
    sub_100003EB0(&qword_1001DDEC0);
    sub_1000DED54();
    default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
    static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)&v35, (uint64_t)v10);
    uint64_t v25 = v24;
    unint64_t v27 = v26;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_release();
    type metadata accessor for JSONDecoder();
    sub_1000DF008();
    default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    swift_bridgeObjectRelease();
    return sub_100006628(v25, v27);
  }
  return result;
}

uint64_t sub_1000DAB7C(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000D950C(a1, a2, a3, a4);
  if (!v4)
  {
    sub_1000DA538((uint64_t)v8, (void (*)(void))sub_1000DEF20, (uint64_t)&type metadata for KCSOTAResponseParser.InternalKernelConfig, (uint64_t)v21);
    swift_bridgeObjectRelease();
    uint64_t v19 = v21[4];
    unint64_t v20 = v21[5];
    uint64_t v9 = Data.subdata(in:)();
    unint64_t v11 = v10;
    uint64_t v5 = sub_1000DDE64();
    unint64_t v13 = v12;
    sub_100006628(v9, v11);
    if (qword_1001D9228 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100003E78(v14, (uint64_t)qword_1001DDDB0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_100005EB8((uint64_t)a1, a2, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_100005EB8(v5, v13, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "decoding %s: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_1000DAEA4(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_1000DAEA4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  if (!a2) {
    return 0;
  }
  uint64_t v5 = v2;
  if (qword_1001D9228 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_100003E78(v8, (uint64_t)qword_1001DDDB0);
  swift_bridgeObjectRetain_n();
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 136315138;
    uint64_t v9 = (uint64_t)(v12 + 12);
    swift_bridgeObjectRetain();
    sub_100005EB8(a1, a2, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "decoding %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v3;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = Data._Representation.subscript.getter();
  unint64_t v15 = v14;
  char v16 = sub_1000DE7EC(v13, v14);
  if (!v4)
  {
    uint64_t v20 = v19 - v17;
    if (v19 < v17)
    {
      __break(1u);
    }
    else
    {
      uint64_t v43 = v13;
      if (!__OFSUB__(v19, v17))
      {
        uint64_t v21 = *(void *)(v5 + 16);
        unint64_t v22 = *(void *)(v5 + 24);
        char v23 = v16;
        switch(v22 >> 62)
        {
          case 1uLL:
            LODWORD(v24) = HIDWORD(v21) - v21;
            if (__OFSUB__(HIDWORD(v21), v21)) {
              goto LABEL_33;
            }
            uint64_t v24 = (int)v24;
LABEL_15:
            if (v20 != v24) {
              goto LABEL_21;
            }
LABEL_18:
            int v45 = v18;
            unint64_t v42 = v15;
            uint64_t v28 = Data.subdata(in:)();
            unint64_t v30 = v29;
            char v31 = sub_10014C798(v28, v29, v21, v22);
            uint64_t v32 = v28;
            unint64_t v15 = v42;
            sub_100006628(v32, v30);
            LOBYTE(v18) = v45;
            if (v31)
            {
              uint64_t v33 = Logger.logObject.getter();
              os_log_type_t v34 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v33, v34))
              {
                uint64_t v35 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v35 = 0;
                _os_log_impl((void *)&_mh_execute_header, v33, v34, "null script", v35, 2u);
                swift_slowDealloc();
              }
              sub_100006628(v43, v42);

              return 0;
            }
LABEL_21:
            uint64_t v13 = v43;
            if (v23 == 34 && v18 == 34)
            {
              uint64_t v9 = Data._Representation.subscript.getter();
              sub_100006628(v43, v15);
              return v9;
            }
            unint64_t v36 = v15;
            uint64_t v37 = Logger.logObject.getter();
            os_log_type_t v38 = static os_log_type_t.error.getter();
            uint64_t v9 = v38;
            if (os_log_type_enabled(v37, v38))
            {
              uint64_t v39 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v39 = 0;
              _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v9, "JSON base64 string value doesn't start and end with \".", v39, 2u);
              uint64_t v13 = v43;
              swift_slowDealloc();
            }

            sub_1000DEE78();
            swift_allocError();
            *long long v40 = 2;
            swift_willThrow();
            unint64_t v15 = v36;
            break;
          case 2uLL:
            uint64_t v26 = *(void *)(v21 + 16);
            uint64_t v25 = *(void *)(v21 + 24);
            BOOL v27 = __OFSUB__(v25, v26);
            uint64_t v24 = v25 - v26;
            if (!v27) {
              goto LABEL_15;
            }
            goto LABEL_34;
          case 3uLL:
            if (!v20) {
              goto LABEL_18;
            }
            goto LABEL_21;
          default:
            uint64_t v24 = BYTE6(v22);
            goto LABEL_15;
        }
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    __break(1u);
    JUMPOUT(0x1000DB348);
  }
LABEL_27:
  sub_100006628(v13, v15);
  return v9;
}

uint64_t sub_1000DB358(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  if (a2)
  {
    if (qword_1001D9228 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100003E78(v7, (uint64_t)qword_1001DDDB0);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      void v37[5] = sub_100005EB8(a1, a2, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "decoding %s", v10, 0xCu);
      swift_arrayDestroy();
      uint64_t v4 = v3;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v11 = Data._Representation.subscript.getter();
    unint64_t v13 = v12;
    sub_1000DE7EC(v11, v12);
    if (v4) {
      return sub_100006628(v11, v13);
    }
    uint64_t v17 = v15 - v14;
    if (v15 < v14)
    {
      __break(1u);
    }
    else if (!__OFSUB__(v15, v14))
    {
      uint64_t v18 = *(void *)(v2 + 16);
      unint64_t v19 = *(void *)(v2 + 24);
      switch(v19 >> 62)
      {
        case 1uLL:
          LODWORD(v20) = HIDWORD(v18) - v18;
          if (__OFSUB__(HIDWORD(v18), v18)) {
            goto LABEL_29;
          }
          uint64_t v20 = (int)v20;
LABEL_16:
          if (v17 != v20) {
            goto LABEL_24;
          }
LABEL_19:
          uint64_t v24 = Data.subdata(in:)();
          unint64_t v26 = v25;
          char v27 = sub_10014C798(v24, v25, v18, v19);
          sub_100006628(v24, v26);
          if ((v27 & 1) == 0)
          {
LABEL_24:
            char v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v31, v32))
            {
              uint64_t v33 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v33 = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "decoding host config", v33, 2u);
              swift_slowDealloc();
            }

            type metadata accessor for JSONDecoder();
            uint64_t v34 = Data.subdata(in:)();
            unint64_t v36 = v35;
            sub_1000DEECC();
            default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
            static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
            sub_100006628(v11, v13);
            swift_bridgeObjectRelease();
            sub_100006628(v34, v36);
            return v37[0];
          }
          uint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            unint64_t v30 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v30 = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "null host config", v30, 2u);
            swift_slowDealloc();
          }
          sub_100006628(v11, v13);

          break;
        case 2uLL:
          uint64_t v22 = *(void *)(v18 + 16);
          uint64_t v21 = *(void *)(v18 + 24);
          BOOL v23 = __OFSUB__(v21, v22);
          uint64_t v20 = v21 - v22;
          if (!v23) {
            goto LABEL_16;
          }
          goto LABEL_30;
        case 3uLL:
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_24;
        default:
          uint64_t v20 = BYTE6(v19);
          goto LABEL_16;
      }
      return 1;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    JUMPOUT(0x1000DB7ECLL);
  }
  return 1;
}

void sub_1000DB7FC(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v7 = v6;
  unint64_t v8 = a2;
  if (a2)
  {
    uint64_t v10 = v5;
    if (qword_1001D9228 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001DDDB0);
    swift_bridgeObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v57[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      v57[9] = (void *)sub_100005EB8((uint64_t)a1, v8, (uint64_t *)v57);
      uint64_t v7 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "decoding %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = v5;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v16 = Data._Representation.subscript.getter();
    unint64_t v18 = v17;
    sub_1000DE7EC(v16, v17);
    if (v7)
    {
      sub_100006628(v16, v18);
      return;
    }
    uint64_t v21 = v20 - v19;
    if (v20 < v19)
    {
      __break(1u);
    }
    else
    {
      uint64_t v52 = a4;
      uint64_t v50 = v16;
      if (!__OFSUB__(v20, v19))
      {
        uint64_t v22 = *(void *)(v10 + 16);
        unint64_t v23 = *(void *)(v10 + 24);
        unint64_t v49 = v18;
        switch(v23 >> 62)
        {
          case 1uLL:
            LODWORD(v24) = HIDWORD(v22) - v22;
            if (__OFSUB__(HIDWORD(v22), v22)) {
              goto LABEL_28;
            }
            uint64_t v24 = (int)v24;
LABEL_16:
            if (v21 != v24) {
              goto LABEL_25;
            }
LABEL_19:
            uint64_t v28 = Data.subdata(in:)();
            unint64_t v30 = v29;
            char v31 = sub_10014C798(v28, v29, v22, v23);
            sub_100006628(v28, v30);
            if ((v31 & 1) == 0)
            {
LABEL_25:
              unint64_t v42 = sub_1000D950C(a1, v8, a3, v52);
              sub_1000DA538((uint64_t)v42, (void (*)(void))sub_1000DEE24, (uint64_t)&type metadata for KCSOTAResponseParser.InternalProfile, (uint64_t)v57);
              swift_bridgeObjectRelease();
              Swift::String v54 = v57[4];
              uint64_t v56 = v57[5];
              unint64_t v8 = sub_1000DAB7C(v57[0], (unint64_t)v57[1], (uint64_t)v57[2], (uint64_t)v57[3]);
              unint64_t v35 = v43;
              unint64_t v37 = v44;
              unint64_t v51 = v45;
              uint64_t v38 = sub_1000DB358((uint64_t)v54, (unint64_t)v56);
              unint64_t v39 = v46;
              unint64_t v40 = v47;
              unint64_t v41 = v48;
              sub_100006628(v50, v49);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v36 = v51;
              goto LABEL_24;
            }
            os_log_type_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v34 = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "null profile", v34, 2u);
              swift_slowDealloc();
            }
            sub_100006628(v50, v49);

            unint64_t v8 = 0;
            break;
          case 2uLL:
            uint64_t v26 = *(void *)(v22 + 16);
            uint64_t v25 = *(void *)(v22 + 24);
            BOOL v27 = __OFSUB__(v25, v26);
            uint64_t v24 = v25 - v26;
            if (!v27) {
              goto LABEL_16;
            }
            goto LABEL_29;
          case 3uLL:
            if (!v21) {
              goto LABEL_19;
            }
            goto LABEL_25;
          default:
            uint64_t v24 = BYTE6(v23);
            goto LABEL_16;
        }
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    JUMPOUT(0x1000DBCE4);
  }
LABEL_23:
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  unint64_t v40 = 0;
  unint64_t v41 = 0;
LABEL_24:
  *a5 = v8;
  a5[1] = v35;
  a5[2] = v36;
  a5[3] = v37;
  a5[4] = v38;
  a5[5] = v39;
  a5[6] = v40;
  a5[7] = v41;
}

uint64_t sub_1000DBCF4()
{
  sub_100006628(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_100006628(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KCSOTAResponseParser()
{
  return self;
}

uint64_t sub_1000DBD58(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  unint64_t v8 = 0xE400000000000000;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x747069726373202CLL;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  if (a4 >> 60 == 15)
  {
    uint64_t v11 = 1819047278;
  }
  else
  {
    uint64_t v11 = sub_1000DBE48(a3, a4);
    unint64_t v8 = v12;
  }
  unint64_t v13 = v8;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  return 540697705;
}

uint64_t sub_1000DBE48(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_7:
      __break(1u);
      JUMPOUT(0x1000DBF20);
    case 2uLL:
      if (!__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_7;
    default:
LABEL_5:
      v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v2);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = 0x3E736574796220;
      v3._object = (void *)0xE700000000000000;
      String.append(_:)(v3);
      return 60;
  }
}

uint64_t sub_1000DBF30(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(59);
  v8._uint64_t countAndFlagsBits = 0x5F7373617079627BLL;
  v8._object = (void *)0xED0000203A646961;
  String.append(_:)(v8);
  if (a1)
  {
    uint64_t v9 = Array.description.getter();
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 0xE400000000000000;
    uint64_t v9 = 1819047278;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000001001997E0;
  v13._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v13);
  if (a2)
  {
    uint64_t v14 = Array.description.getter();
    unint64_t v16 = v15;
  }
  else
  {
    uint64_t v14 = 1819047278;
    unint64_t v16 = 0xE400000000000000;
  }
  unint64_t v17 = v16;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x72746E756F63202CLL;
  v18._object = (void *)0xEF203A65646F4379;
  String.append(_:)(v18);
  if (a4)
  {
    uint64_t v19 = a4;
  }
  else
  {
    a3 = 1819047278;
    uint64_t v19 = (void *)0xE400000000000000;
  }
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = a3;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 125;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return 0;
}

uint64_t sub_1000DC0C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[1] = a5;
  uint64_t v15 = a3;
  uint64_t v8 = sub_100003EB0(&qword_1001DDFB8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000E1F4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = a2;
  char v16 = 0;
  sub_100003EB0((uint64_t *)&unk_1001DA570);
  sub_1000E2130(&qword_1001D9B18, (uint64_t *)&unk_1001DA570);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v17 = v15;
    char v16 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1000DC2C4()
{
  uint64_t v1 = 0x4374726F70707573;
  if (*v0 != 1) {
    uint64_t v1 = 0x437972746E756F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6941737361707962;
  }
}

uint64_t sub_1000DC338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E1B18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000DC360(uint64_t a1)
{
  unint64_t v2 = sub_1000E1F4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DC39C(uint64_t a1)
{
  unint64_t v2 = sub_1000E1F4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DC3D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000E1CB8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000DC408(void *a1)
{
  return sub_1000DC0C4(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000DC428()
{
  return sub_1000DBF30(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

BOOL sub_1000DC434(uint64_t a1, uint64_t a2)
{
  return sub_1000DD7F4(*(void **)a1, *(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void **)a2, *(void **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

unint64_t sub_1000DC450()
{
  uint64_t v9 = 0;
  uint64_t v10 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  sub_100029CEC(v0 + 32, (uint64_t)v8, &qword_1001DDF18);
  sub_100029CEC((uint64_t)v8, (uint64_t)&v9, &qword_1001DDF18);
  if (v9 == 1)
  {
    unint64_t v1 = 0xE400000000000000;
    uint64_t v2 = 1819047278;
  }
  else
  {
    uint64_t v2 = sub_1000DBF30(v9, v10, v11, v12);
    unint64_t v1 = v3;
  }
  unint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001001997C0;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = sub_1000DBD58(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

unint64_t sub_1000DC560()
{
  return sub_1000DC450();
}

BOOL sub_1000DC59C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  _OWORD v8[2] = a2[2];
  v8[3] = v5;
  return sub_1000DD8B8(v7, v8);
}

uint64_t sub_1000DC5E8()
{
  unint64_t v1 = 1819047278;
  *(void *)&v35[0] = 0;
  *((void *)&v35[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(95);
  v2._object = (void *)0x8000000100199720;
  v2._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v2);
  sub_100029CEC(v0, (uint64_t)v29, &qword_1001DCF40);
  sub_100029CEC((uint64_t)v29, (uint64_t)&v34, &qword_1001DCF40);
  if (*((void *)&v34 + 1) >> 60 == 15)
  {
    unint64_t v3 = 0xE400000000000000;
    uint64_t v4 = 1819047278;
  }
  else
  {
    long long v36 = v34;
    *(void *)&v35[0] = 60;
    *((void *)&v35[0] + 1) = 0xE100000000000000;
    sub_1000DF0BC((uint64_t)&v36, (uint64_t)v37);
    sub_1000DF0BC((uint64_t)v37, (uint64_t)&v38);
    unsigned __int8 v5 = BYTE6(v39);
    uint64_t v6 = 0;
    switch(v39 >> 62)
    {
      case 1uLL:
        v39 &= 0x3FFFFFFFFFFFFFFFuLL;
        LODWORD(v6) = HIDWORD(v38) - v38;
        if (__OFSUB__(HIDWORD(v38), v38))
        {
          __break(1u);
LABEL_14:
          __break(1u);
          JUMPOUT(0x1000DC8CCLL);
        }
        uint64_t v6 = (int)v6;
LABEL_8:
        *(void *)&long long v30 = v6;
        v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        v11._uint64_t countAndFlagsBits = 0x3E736574796220;
        v11._object = (void *)0xE700000000000000;
        String.append(_:)(v11);
        unint64_t v3 = *((void *)&v35[0] + 1);
        uint64_t v4 = *(void *)&v35[0];
        break;
      case 2uLL:
        v39 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v7 = *(void *)(v38 + 16);
        uint64_t v8 = *(void *)(v38 + 24);
        BOOL v9 = __OFSUB__(v8, v7);
        uint64_t v6 = v8 - v7;
        if (!v9) {
          goto LABEL_8;
        }
        goto LABEL_14;
      case 3uLL:
        goto LABEL_8;
      default:
        v39 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v6 = v5;
        goto LABEL_8;
    }
  }
  unint64_t v12 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000016;
  v13._object = (void *)0x8000000100199740;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = sub_1000DBD58(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0xD000000000000018;
  v15._object = (void *)0x8000000100199760;
  String.append(_:)(v15);
  long long v16 = *(_OWORD *)(v0 + 64);
  long long v25 = *(_OWORD *)(v0 + 48);
  long long v26 = v16;
  long long v17 = *(_OWORD *)(v0 + 96);
  long long v27 = *(_OWORD *)(v0 + 80);
  long long v28 = v17;
  v18._uint64_t countAndFlagsBits = sub_1000DC450();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 0xD000000000000015;
  v19._object = (void *)0x8000000100199780;
  String.append(_:)(v19);
  sub_100029CEC(v0 + 112, (uint64_t)v24, &qword_1001DCF80);
  sub_100029CEC((uint64_t)v24, (uint64_t)v35, &qword_1001DCF80);
  if (*((void *)&v35[0] + 1))
  {
    long long v30 = v35[0];
    long long v31 = v35[1];
    long long v32 = v35[2];
    long long v33 = v35[3];
    unint64_t v1 = sub_1000DC450();
    Swift::String v21 = v20;
  }
  else
  {
    Swift::String v21 = (void *)0xE400000000000000;
  }
  v22._uint64_t countAndFlagsBits = v1;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000DC8DC()
{
  return sub_1000DC5E8();
}

BOOL sub_1000DC938(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v13[10] = a1[10];
  long long v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  long long v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  long long v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  long long v6 = a1[3];
  v13[2] = a1[2];
  void v13[3] = v6;
  long long v7 = a2[9];
  v14[8] = a2[8];
  v14[9] = v7;
  v14[10] = a2[10];
  long long v8 = a2[5];
  v14[4] = a2[4];
  v14[5] = v8;
  long long v9 = a2[7];
  v14[6] = a2[6];
  v14[7] = v9;
  long long v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  long long v11 = a2[3];
  void v14[2] = a2[2];
  v14[3] = v11;
  return sub_1000DDB10((uint64_t)v13, (uint64_t)v14);
}

id sub_1000DC9CC(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  long long v3 = v2;
  id v12 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() fileHandleForWritingToURL:v2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    long long v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

id sub_1000DCB24(void *a1)
{
  id v5 = 0;
  unsigned int v1 = [a1 closeAndReturnError:&v5];
  id v2 = v5;
  if (v1)
  {
    return v2;
  }
  else
  {
    id v4 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)swift_errorRelease();
  }
}

uint64_t sub_1000DCC04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v14 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v16 = *a4;
  if (__OFSUB__(a3, *a4))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a3 - *a4 < a1) {
    a1 = a3 - *a4;
  }
  if (__OFADD__(v16, a1)) {
    goto LABEL_30;
  }
  if (v16 + a1 < v16)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v43 = a4;
  a6 = Data.subdata(in:)();
  a7 = v17;
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(data:encoding:)();
  if (!v19)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  sub_10000A87C();
  uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v45 = v20;
  unint64_t v46 = v22;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_1000D83EC(v20, v22);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  if (v25)
  {
    if (v23 == 92 && v25 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        goto LABEL_13;
      }
    }
    sub_1000DA214();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v27 = __OFSUB__(a1--, 1);
    if (v27)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
LABEL_13:
  swift_bridgeObjectRetain();
  char v28 = String.count.getter();
  swift_bridgeObjectRelease();
  if ((v28 & 3) == 0) {
    goto LABEL_20;
  }
  uint64_t v44 = a6;
  a6 = a7;
  swift_bridgeObjectRetain();
  uint64_t v29 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v29 <= 0) {
    unint64_t v30 = -(-v29 & 3);
  }
  else {
    unint64_t v30 = v29 & 3;
  }
  swift_bridgeObjectRetain();
  sub_1000DF1A0(v30, v45, v46);
  a7 = v31;
  swift_bridgeObjectRelease();
  sub_1000DD25C(v30);
  sub_1000DF25C();
  uint64_t v32 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v32 + 16);
  swift_bridgeObjectRelease();
  unint64_t v34 = v30 + v33 - 1;
  if (__OFADD__(v30, v33 - 1)) {
    goto LABEL_32;
  }
  BOOL v27 = __OFSUB__(a1, v34);
  a1 -= v34;
  uint64_t v8 = v7;
  if (v27)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  a7 = a6;
  a6 = v44;
LABEL_20:
  uint64_t v35 = Data.init(base64Encoded:options:)();
  unint64_t v37 = v36;
  swift_bridgeObjectRelease();
  if (v37 >> 60 != 15)
  {
    sub_1000DF2B0();
    NSFileHandle.write<A>(contentsOf:)();
    sub_100006628(a6, a7);
    uint64_t result = sub_10000BF70(v35, v37);
    if (v8) {
      return result;
    }
    if (!__OFADD__(*v43, a1))
    {
      *v43 += a1;
      return result;
    }
    goto LABEL_36;
  }
  if (qword_1001D9228 != -1) {
LABEL_34:
  }
    swift_once();
  uint64_t v38 = type metadata accessor for Logger();
  sub_100003E78(v38, (uint64_t)qword_1001DDDB0);
  unint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    unint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "non base64 string", v41, 2u);
    swift_slowDealloc();
  }

  sub_1000DEE78();
  swift_allocError();
  *unint64_t v42 = 2;
  swift_willThrow();
  return sub_100006628(a6, a7);
}

uint64_t sub_1000DD0B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1000F7928(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = sub_1000F78AC(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x1000DD22CLL);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_100006628(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

unint64_t sub_1000DD25C(unint64_t result)
{
  if (!result) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    goto LABEL_14;
  }
  if (4 * v3 < result >> 14)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  return String.removeSubrange(_:)();
}

uint64_t sub_1000DD30C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  v3._uint64_t countAndFlagsBits = 60;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  switch(v2 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_7:
      __break(1u);
      JUMPOUT(0x1000DD3FCLL);
    case 2uLL:
      if (!__OFSUB__(*(void *)(v1 + 24), *(void *)(v1 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_7;
    default:
LABEL_5:
      v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._uint64_t countAndFlagsBits = 0x3E736574796220;
      v5._object = (void *)0xE700000000000000;
      String.append(_:)(v5);
      return 0;
  }
}

uint64_t sub_1000DD40C(uint64_t a1, uint64_t a2)
{
  return sub_10014C798(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t sub_1000DD420(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)swift_bridgeObjectRetain();
  uint64_t v8 = v6[4];
  uint64_t v7 = v6[5];
  uint64_t v10 = v6[6];
  uint64_t v9 = v6[7];
  uint64_t v52 = v6[8];
  unint64_t v53 = v6;
  uint64_t v51 = v6[9];
  Swift::String v54 = a3;
  uint64_t v11 = *a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_10000C4B0(v8, v7);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15)) {
    goto LABEL_23;
  }
  char v17 = v12;
  if (*(void *)(v11 + 24) >= v16)
  {
    if (a2)
    {
      if (v12) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1000808C8();
      if (v17) {
        goto LABEL_10;
      }
    }
LABEL_13:
    unint64_t v21 = a3;
    unint64_t v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    uint64_t v23 = (uint64_t *)(v22[6] + 16 * v13);
    *uint64_t v23 = v8;
    v23[1] = v7;
    uint64_t v24 = (void *)(v22[7] + 32 * v13);
    *uint64_t v24 = v10;
    v24[1] = v9;
    v24[2] = v52;
    void v24[3] = v51;
    uint64_t v25 = v22[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v27;
    uint64_t v28 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (i = v53 + 15; ; i += 6)
    {
      uint64_t v31 = *(i - 5);
      uint64_t v30 = *(i - 4);
      uint64_t v33 = *(i - 3);
      uint64_t v32 = *(i - 2);
      uint64_t v34 = *(i - 1);
      uint64_t v35 = *i;
      uint64_t v36 = *v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_10000C4B0(v31, v30);
      uint64_t v39 = *(void *)(v36 + 16);
      BOOL v40 = (v38 & 1) == 0;
      BOOL v26 = __OFADD__(v39, v40);
      uint64_t v41 = v39 + v40;
      if (v26) {
        break;
      }
      char v42 = v38;
      if (*(void *)(v36 + 24) < v41)
      {
        sub_10007DDBC(v41, 1);
        unint64_t v37 = sub_10000C4B0(v31, v30);
        if ((v42 & 1) != (v43 & 1)) {
          goto LABEL_25;
        }
      }
      if (v42) {
        goto LABEL_10;
      }
      unint64_t v21 = v54;
      uint64_t v44 = (void *)*v54;
      *(void *)(*v54 + 8 * (v37 >> 6) + 64) |= 1 << v37;
      uint64_t v45 = (uint64_t *)(v44[6] + 16 * v37);
      *uint64_t v45 = v31;
      v45[1] = v30;
      unint64_t v46 = (void *)(v44[7] + 32 * v37);
      *unint64_t v46 = v33;
      v46[1] = v32;
      void v46[2] = v34;
      v46[3] = v35;
      uint64_t v47 = v44[2];
      BOOL v26 = __OFADD__(v47, 1);
      uint64_t v48 = v47 + 1;
      if (v26) {
        goto LABEL_24;
      }
      v44[2] = v48;
      if (!--v28) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10007DDBC(v16, a2 & 1);
  unint64_t v18 = sub_10000C4B0(v8, v7);
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v13 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v49._object = (void *)0x8000000100197BD0;
  v49._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v49);
  _print_unlocked<A, B>(_:_:)();
  v50._uint64_t countAndFlagsBits = 39;
  v50._object = (void *)0xE100000000000000;
  String.append(_:)(v50);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_1000DD7F4(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (!a5 || (sub_10014A9C0(a1, a5) & 1) == 0) {
      return 0;
    }
  }
  else if (a5)
  {
    return 0;
  }
  if (a2)
  {
    if (!a6 || (sub_10014A9C0(a2, a6) & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a4) {
    return a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
  }
  return !a8;
}

BOOL sub_1000DD8B8(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    if (v5 >> 60 == 15)
    {
      if (v6 >> 60 == 15)
      {
LABEL_12:
        char v12 = (void *)a1[4];
        unint64_t v13 = (void *)a1[5];
        uint64_t v14 = a1[6];
        uint64_t v15 = a1[7];
        char v17 = (void *)a2[4];
        uint64_t v16 = (void *)a2[5];
        uint64_t v19 = a2[6];
        uint64_t v18 = a2[7];
        if (v12 == (void *)1)
        {
          if (v17 == (void *)1) {
            return 1;
          }
        }
        else if (v17 != (void *)1)
        {
          BOOL v20 = sub_1000DD7F4(v12, v13, v14, v15, v17, v16, v19, v18);
          sub_1000A79E0((uint64_t)v12);
          sub_1000A79E0((uint64_t)v12);
          sub_1000A79E0((uint64_t)v17);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000A7BA8((uint64_t)v12);
          return v20;
        }
        sub_1000A79E0((uint64_t)v12);
        sub_1000A79E0((uint64_t)v17);
        sub_1000A7BA8((uint64_t)v12);
        sub_1000A7BA8((uint64_t)v17);
        return 0;
      }
    }
    else if (v6 >> 60 != 15)
    {
      sub_100038D8C(v4, v5);
      sub_100038D8C(v7, v6);
      char v11 = sub_10014C798(v4, v5, v7, v6);
      sub_10000BF70(v7, v6);
      sub_10000BF70(v4, v5);
      if ((v11 & 1) == 0) {
        return 0;
      }
      goto LABEL_12;
    }
    sub_100038D8C(v4, v5);
    sub_100038D8C(v7, v6);
    sub_10000BF70(v4, v5);
    sub_10000BF70(v7, v6);
    return 0;
  }
  return result;
}

BOOL sub_1000DDB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15) {
      goto LABEL_7;
    }
LABEL_5:
    sub_100038D8C(*(void *)a1, v5);
    sub_100038D8C(v6, v7);
    sub_10000BF70(v4, v5);
    sub_10000BF70(v6, v7);
    return 0;
  }
  if (v7 >> 60 == 15) {
    goto LABEL_5;
  }
  sub_100038D8C(*(void *)a1, v5);
  sub_100038D8C(v6, v7);
  char v8 = sub_10014C798(v4, v5, v6, v7);
  sub_10000BF70(v6, v7);
  sub_10000BF70(v4, v5);
  if ((v8 & 1) == 0) {
    return 0;
  }
LABEL_7:
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v11 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    if (v9 >> 60 == 15)
    {
      if (v11 >> 60 == 15)
      {
LABEL_16:
        long long v16 = *(_OWORD *)(a1 + 64);
        v57[0] = *(_OWORD *)(a1 + 48);
        v57[1] = v16;
        long long v17 = *(_OWORD *)(a1 + 96);
        v57[2] = *(_OWORD *)(a1 + 80);
        v57[3] = v17;
        long long v18 = *(_OWORD *)(a2 + 64);
        v56[0] = *(_OWORD *)(a2 + 48);
        v56[1] = v18;
        long long v19 = *(_OWORD *)(a2 + 96);
        v56[2] = *(_OWORD *)(a2 + 80);
        v56[3] = v19;
        if (sub_1000DD8B8(v57, v56))
        {
          uint64_t v21 = *(void *)(a1 + 112);
          uint64_t v20 = *(void *)(a1 + 120);
          uint64_t v22 = *(void *)(a1 + 128);
          unint64_t v23 = *(void *)(a1 + 136);
          uint64_t v24 = *(void *)(a1 + 144);
          uint64_t v25 = *(void *)(a1 + 152);
          uint64_t v26 = *(void *)(a1 + 160);
          uint64_t v27 = *(void *)(a1 + 168);
          uint64_t v29 = *(void *)(a2 + 112);
          uint64_t v28 = *(void *)(a2 + 120);
          uint64_t v31 = *(void *)(a2 + 128);
          unint64_t v30 = *(void *)(a2 + 136);
          uint64_t v33 = *(void *)(a2 + 144);
          uint64_t v32 = *(void *)(a2 + 152);
          uint64_t v35 = *(void *)(a2 + 160);
          uint64_t v34 = *(void *)(a2 + 168);
          if (v20)
          {
            if (v28)
            {
              v58[0] = v21;
              v58[1] = v20;
              _OWORD v58[2] = v22;
              v58[3] = v23;
              v58[4] = v24;
              v58[5] = v25;
              v58[6] = v26;
              v58[7] = v27;
              uint64_t v40 = v29;
              uint64_t v41 = v28;
              uint64_t v42 = v31;
              unint64_t v43 = v30;
              uint64_t v44 = v33;
              uint64_t v45 = v32;
              uint64_t v46 = v35;
              uint64_t v47 = v34;
              uint64_t v37 = v22;
              unint64_t v38 = v23;
              uint64_t v39 = v24;
              sub_1000A7A34(v21, v20, v22, v23, v24);
              sub_1000A7A34(v29, v28, v31, v30, v33);
              BOOL v36 = sub_1000DD8B8(v58, &v40);
              sub_1000A7BF8(v29, v28, v31, v30, v33);
              sub_1000A7BF8(v21, v20, v37, v38, v39);
              return v36;
            }
          }
          else if (!v28)
          {
            return 1;
          }
          uint64_t v40 = v21;
          uint64_t v41 = v20;
          uint64_t v42 = v22;
          unint64_t v43 = v23;
          uint64_t v44 = v24;
          uint64_t v45 = v25;
          uint64_t v46 = v26;
          uint64_t v47 = v27;
          uint64_t v48 = v29;
          uint64_t v49 = v28;
          uint64_t v50 = v31;
          unint64_t v51 = v30;
          uint64_t v52 = v33;
          uint64_t v53 = v32;
          uint64_t v54 = v35;
          uint64_t v55 = v34;
          sub_1000A7A34(v21, v20, v22, v23, v24);
          sub_1000A7A34(v29, v28, v31, v30, v33);
          sub_1000E20A0(&v40);
        }
        return 0;
      }
    }
    else if (v11 >> 60 != 15)
    {
      sub_100038D8C(v10, v9);
      sub_100038D8C(v12, v11);
      char v15 = sub_10014C798(v10, v9, v12, v11);
      sub_10000BF70(v12, v11);
      sub_10000BF70(v10, v9);
      if ((v15 & 1) == 0) {
        return 0;
      }
      goto LABEL_16;
    }
    sub_100038D8C(v10, v9);
    sub_100038D8C(v12, v11);
    sub_10000BF70(v10, v9);
    sub_10000BF70(v12, v11);
    return 0;
  }
  return result;
}

uint64_t sub_1000DDE64()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v0 - 8, v1);
  static String.Encoding.utf8.getter();
  uint64_t v2 = String.init(data:encoding:)();
  if (!v3)
  {
LABEL_9:
    if (qword_1001D9228 == -1)
    {
LABEL_10:
      uint64_t v5 = type metadata accessor for Logger();
      sub_100003E78(v5, (uint64_t)qword_1001DDDB0);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        char v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalid JSON string with non utf8 encoding", v8, 2u);
        swift_slowDealloc();
      }

      sub_1000DEE78();
      swift_allocError();
      *unint64_t v9 = 0;
      return swift_willThrow();
    }
LABEL_134:
    swift_once();
    goto LABEL_10;
  }
  uint64_t v69 = v2;
  unint64_t v70 = v3;
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v71 = v4;
  if (!v4) {
    goto LABEL_61;
  }
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0xFFFFFFFFFFFFLL) == 0)
    {
LABEL_8:
      __break(1u);
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v11 = String.subscript.getter();
    uint64_t v13 = v12;
    String.index(_:offsetBy:limitedBy:)();
    if (v14)
    {
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    String.removeSubrange(_:)();
    BOOL v15 = v13 == 0xE100000000000000;
    BOOL v16 = v11 == 32 && v13 == 0xE100000000000000;
    if (v16
      || ((char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 == 10)
        ? (BOOL v18 = v13 == 0xE100000000000000)
        : (BOOL v18 = 0),
          !v18 ? (char v19 = 0) : (char v19 = 1),
          (v17 & 1) != 0 || (v19 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      BOOL v20 = (v70 & 0x2000000000000000) == 0;
      uint64_t v21 = HIBYTE(v70) & 0xF;
      uint64_t v22 = v69 & 0xFFFFFFFFFFFFLL;
      if ((v70 & 0x2000000000000000) != 0) {
        uint64_t v23 = HIBYTE(v70) & 0xF;
      }
      else {
        uint64_t v23 = v69 & 0xFFFFFFFFFFFFLL;
      }
      if (v23)
      {
        do
        {
          if (v20)
          {
            if (!v22) {
              goto LABEL_8;
            }
          }
          else if (!v21)
          {
            goto LABEL_131;
          }
          uint64_t v11 = String.subscript.getter();
          uint64_t v26 = v25;
          String.index(_:offsetBy:limitedBy:)();
          if (v27) {
            goto LABEL_135;
          }
          String.removeSubrange(_:)();
          swift_bridgeObjectRelease();
          BOOL v15 = v26 == 0xE100000000000000;
          if (v11 != 32 || v26 != 0xE100000000000000)
          {
            char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v29 = v11 == 10 && v26 == 0xE100000000000000;
            BOOL v30 = v29;
            if ((v28 & 1) == 0 && !v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_54;
            }
          }
          BOOL v20 = (v70 & 0x2000000000000000) == 0;
          uint64_t v21 = HIBYTE(v70) & 0xF;
          uint64_t v22 = v69 & 0xFFFFFFFFFFFFLL;
          if ((v70 & 0x2000000000000000) != 0) {
            uint64_t v24 = HIBYTE(v70) & 0xF;
          }
          else {
            uint64_t v24 = v69 & 0xFFFFFFFFFFFFLL;
          }
        }
        while (v24);
      }
LABEL_61:
      swift_bridgeObjectRelease();
      if (qword_1001D9228 == -1) {
        goto LABEL_62;
      }
      goto LABEL_132;
    }
LABEL_54:
    if ((v70 & 0x2000000000000000) != 0) {
      uint64_t v31 = HIBYTE(v70) & 0xF;
    }
    else {
      uint64_t v31 = v69 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain();
    uint64_t v71 = v31;
    if (v31)
    {
      if ((v70 & 0x2000000000000000) != 0)
      {
        if ((v70 & 0xF00000000000000) == 0)
        {
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
      }
      else if ((v69 & 0xFFFFFFFFFFFFLL) == 0)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      String.index(before:)();
      uint64_t v38 = String.remove(at:)();
      uint64_t v39 = v37;
      BOOL v40 = v37 == 0xE100000000000000;
      if (v38 != 32 || v37 != 0xE100000000000000)
      {
        char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v42 = v38 == 10 && v39 == 0xE100000000000000;
        BOOL v43 = v42;
        if ((v41 & 1) == 0 && !v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
LABEL_106:
          if (v11 == 34 && v15)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }
          else
          {
            char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if ((v61 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              goto LABEL_127;
            }
          }
          if (v38 == 34 && v40)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            return v69;
          }
          char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v63)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v69;
          }
LABEL_127:
          swift_bridgeObjectRelease();
          if (qword_1001D9228 == -1)
          {
LABEL_128:
            uint64_t v64 = type metadata accessor for Logger();
            sub_100003E78(v64, (uint64_t)qword_1001DDDB0);
            BOOL v65 = Logger.logObject.getter();
            os_log_type_t v66 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v65, v66))
            {
              uint64_t v67 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v67 = 0;
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "Badly formed object", v67, 2u);
              swift_slowDealloc();
            }

            sub_1000DEE78();
            swift_allocError();
            *unint64_t v68 = 2;
            swift_willThrow();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
LABEL_136:
          swift_once();
          goto LABEL_128;
        }
      }
      BOOL v44 = (v70 & 0x2000000000000000) == 0;
      uint64_t v45 = HIBYTE(v70) & 0xF;
      uint64_t v46 = v69 & 0xFFFFFFFFFFFFLL;
      if ((v70 & 0x2000000000000000) != 0) {
        uint64_t v47 = HIBYTE(v70) & 0xF;
      }
      else {
        uint64_t v47 = v69 & 0xFFFFFFFFFFFFLL;
      }
      if (v47)
      {
        do
        {
          if (v44)
          {
            if (!v46) {
              goto LABEL_60;
            }
          }
          else if (!v45)
          {
            goto LABEL_133;
          }
          String.index(before:)();
          uint64_t v38 = String.remove(at:)();
          uint64_t v50 = v49;
          swift_bridgeObjectRelease();
          BOOL v40 = v50 == 0xE100000000000000;
          if (v38 != 32 || v50 != 0xE100000000000000)
          {
            char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v53 = v38 == 10 && v50 == 0xE100000000000000;
            BOOL v54 = v53;
            if ((v52 & 1) == 0 && !v54 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_106;
            }
          }
          BOOL v44 = (v70 & 0x2000000000000000) == 0;
          uint64_t v45 = HIBYTE(v70) & 0xF;
          uint64_t v46 = v69 & 0xFFFFFFFFFFFFLL;
          if ((v70 & 0x2000000000000000) != 0) {
            uint64_t v48 = HIBYTE(v70) & 0xF;
          }
          else {
            uint64_t v48 = v69 & 0xFFFFFFFFFFFFLL;
          }
        }
        while (v48);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1001D9228 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_100003E78(v56, (uint64_t)qword_1001DDDB0);
    unint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unescaped control character.\nmissing ending \" in string", v59, 2u);
      swift_slowDealloc();
    }

    sub_1000DEE78();
    swift_allocError();
    *uint64_t v60 = 0;
    swift_willThrow();
    uint64_t result = swift_bridgeObjectRelease();
    if (v31) {
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  if ((v3 & 0xF00000000000000) != 0) {
    goto LABEL_15;
  }
LABEL_131:
  __break(1u);
LABEL_132:
  swift_once();
LABEL_62:
  uint64_t v32 = type metadata accessor for Logger();
  sub_100003E78(v32, (uint64_t)qword_1001DDDB0);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unescaped control character.\nmissing startng \" in string", v35, 2u);
    swift_slowDealloc();
  }

  sub_1000DEE78();
  swift_allocError();
  *BOOL v36 = 0;
  uint64_t result = swift_willThrow();
  if (v71) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DE7EC(unint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  char v4 = a2;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)a1;
      uint64_t v7 = (uint64_t)a1 >> 32;
      if ((int)a1 >= (uint64_t)a1 >> 32) {
        goto LABEL_51;
      }
      goto LABEL_7;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      if (v6 >= v7) {
        goto LABEL_51;
      }
LABEL_7:
      uint64_t v44 = BYTE6(a2);
      break;
    case 3uLL:
      goto LABEL_51;
    default:
      uint64_t v44 = BYTE6(a2);
      if (!BYTE6(a2)) {
        goto LABEL_51;
      }
      uint64_t v6 = 0;
      uint64_t v7 = BYTE6(a2);
      break;
  }
  char v8 = a1;
  unint64_t v42 = a1 >> 8;
  uint64_t v43 = (uint64_t)a1 >> 32;
  unint64_t v40 = a1 >> 24;
  unint64_t v41 = a1 >> 16;
  unint64_t v38 = a1 >> 40;
  unint64_t v39 = HIDWORD(a1);
  unint64_t v36 = HIBYTE(a1);
  unint64_t v37 = HIWORD(a1);
  unint64_t v34 = a2 >> 16;
  unint64_t v35 = a2 >> 8;
  unint64_t v32 = HIDWORD(a2);
  unint64_t v33 = a2 >> 24;
  unint64_t v31 = a2 >> 40;
  do
  {
    if (v3)
    {
      if (v3 == 1)
      {
        if (v6 < (int)a1 || v6 >= v43)
        {
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v9 = __DataStorage._bytes.getter();
        if (!v9)
        {
          __break(1u);
LABEL_74:
          __break(1u);
          __break(1u);
        }
        uint64_t v2 = v9;
        uint64_t v10 = __DataStorage._offset.getter();
        uint64_t v11 = v6 - v10;
        if (__OFSUB__(v6, v10)) {
          goto LABEL_61;
        }
      }
      else
      {
        if (v6 < *(void *)(a1 + 16)) {
          goto LABEL_60;
        }
        if (v6 >= *(void *)(a1 + 24)) {
          goto LABEL_62;
        }
        uint64_t v12 = __DataStorage._bytes.getter();
        if (!v12) {
          goto LABEL_74;
        }
        uint64_t v2 = v12;
        uint64_t v13 = __DataStorage._offset.getter();
        uint64_t v11 = v6 - v13;
        if (__OFSUB__(v6, v13)) {
          goto LABEL_63;
        }
      }
      uint64_t v2 = *(unsigned __int8 *)(v2 + v11);
    }
    else
    {
      if (v6 >= v44) {
        goto LABEL_59;
      }
      char v45 = v8;
      char v46 = v42;
      char v47 = v41;
      char v48 = v40;
      char v49 = v39;
      char v50 = v38;
      char v51 = v37;
      char v52 = v36;
      char v53 = v4;
      char v54 = v35;
      char v55 = v34;
      char v56 = v33;
      char v57 = v32;
      char v58 = v31;
      uint64_t v2 = *(&v45 + v6);
    }
    if (v2 != 32 && v2 != 10)
    {
      if (v7 <= v6 + 1)
      {
LABEL_48:
        if (qword_1001D9228 != -1) {
          goto LABEL_72;
        }
        goto LABEL_49;
      }
      uint64_t v14 = v7 - 1;
      while (1)
      {
        if (v3)
        {
          if (v3 == 1)
          {
            if (v14 < (int)a1 || v14 >= v43)
            {
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              swift_once();
LABEL_49:
              uint64_t v23 = type metadata accessor for Logger();
              sub_100003E78(v23, (uint64_t)qword_1001DDDB0);
              uint64_t v24 = Logger.logObject.getter();
              os_log_type_t v25 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v24, v25))
              {
                uint64_t v26 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v26 = 0;
                char v27 = "Unescaped control character. Missing ending \" in string";
                goto LABEL_54;
              }
              goto LABEL_55;
            }
            uint64_t v15 = __DataStorage._bytes.getter();
            if (!v15)
            {
              __break(1u);
LABEL_76:
              __break(1u);
              JUMPOUT(0x1000DED44);
            }
            uint64_t v16 = v15;
            uint64_t v17 = __DataStorage._offset.getter();
            uint64_t v18 = v14 - v17;
            if (__OFSUB__(v14, v17)) {
              goto LABEL_69;
            }
          }
          else
          {
            if (v14 < *(void *)(a1 + 16)) {
              goto LABEL_68;
            }
            if (v14 >= *(void *)(a1 + 24)) {
              goto LABEL_70;
            }
            uint64_t v20 = __DataStorage._bytes.getter();
            if (!v20) {
              goto LABEL_76;
            }
            uint64_t v16 = v20;
            uint64_t v21 = __DataStorage._offset.getter();
            uint64_t v18 = v14 - v21;
            if (__OFSUB__(v14, v21)) {
              goto LABEL_71;
            }
          }
          int v19 = *(unsigned __int8 *)(v16 + v18);
        }
        else
        {
          if (v14 >= v44) {
            goto LABEL_67;
          }
          char v45 = v8;
          char v46 = v42;
          char v47 = v41;
          char v48 = v40;
          char v49 = v39;
          char v50 = v38;
          char v51 = v37;
          char v52 = v36;
          char v53 = v4;
          char v54 = v35;
          char v55 = v34;
          char v56 = v33;
          char v57 = v32;
          char v58 = v31;
          int v19 = *(&v45 + v14);
        }
        if (v19 != 32 && v19 != 10) {
          return v2;
        }
        if (__OFSUB__(v14--, 1)) {
          goto LABEL_64;
        }
        if (v14 <= v6) {
          goto LABEL_48;
        }
      }
    }
    ++v6;
  }
  while (v6 < v7);
LABEL_51:
  if (qword_1001D9228 == -1) {
    goto LABEL_52;
  }
LABEL_65:
  swift_once();
LABEL_52:
  uint64_t v28 = type metadata accessor for Logger();
  sub_100003E78(v28, (uint64_t)qword_1001DDDB0);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    char v27 = "Unescaped control character. Missing starting \" in base64";
LABEL_54:
    _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
    swift_slowDealloc();
  }
LABEL_55:

  sub_1000DEE78();
  swift_allocError();
  *BOOL v29 = 0;
  swift_willThrow();
  return v2;
}

unint64_t sub_1000DED54()
{
  unint64_t result = qword_1001DDEC8;
  if (!qword_1001DDEC8)
  {
    sub_100003EF4(&qword_1001DDEC0);
    sub_1000DEDD0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDEC8);
  }
  return result;
}

unint64_t sub_1000DEDD0()
{
  unint64_t result = qword_1001DDED0;
  if (!qword_1001DDED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDED0);
  }
  return result;
}

unint64_t sub_1000DEE24()
{
  unint64_t result = qword_1001DDED8;
  if (!qword_1001DDED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDED8);
  }
  return result;
}

unint64_t sub_1000DEE78()
{
  unint64_t result = qword_1001DDEE0;
  if (!qword_1001DDEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDEE0);
  }
  return result;
}

unint64_t sub_1000DEECC()
{
  unint64_t result = qword_1001DDEE8;
  if (!qword_1001DDEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDEE8);
  }
  return result;
}

unint64_t sub_1000DEF20()
{
  unint64_t result = qword_1001DDEF0;
  if (!qword_1001DDEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDEF0);
  }
  return result;
}

uint64_t sub_1000DEF74(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000DEFCC(uint64_t a1)
{
  return a1;
}

unint64_t sub_1000DF008()
{
  unint64_t result = qword_1001DDEF8;
  if (!qword_1001DDEF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDEF8);
  }
  return result;
}

uint64_t sub_1000DF05C(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001DDF00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000DF0BC(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1000DF118()
{
  unint64_t result = qword_1001DDF20;
  if (!qword_1001DDF20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001DDF20);
  }
  return result;
}

uint64_t sub_1000DF158(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000DF1A0(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    uint64_t result = 15;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_12;
  }

  return String.subscript.getter();
}

unint64_t sub_1000DF25C()
{
  unint64_t result = qword_1001DDF28;
  if (!qword_1001DDF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF28);
  }
  return result;
}

unint64_t sub_1000DF2B0()
{
  unint64_t result = qword_1001DDF30;
  if (!qword_1001DDF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF30);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyBase64Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000065D0(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for LazyBase64Data(uint64_t a1)
{
  return sub_100006628(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for LazyBase64Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000065D0(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100006628(v5, v6);
  return a1;
}

uint64_t *assignWithTake for LazyBase64Data(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100006628(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyBase64Data(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LazyBase64Data(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyBase64Data()
{
  return &type metadata for LazyBase64Data;
}

uint64_t destroy for KCSOTAResponseParser.InternalKCSOTAResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KCSOTAResponseParser.InternalKCSOTAResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  return a1;
}

__n128 initializeWithTake for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KCSOTAResponseParser.InternalKCSOTAResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKCSOTAResponse()
{
  return &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse;
}

uint64_t destroy for KCSOTAResponse(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_100006628(*a1, v2);
  }
  swift_bridgeObjectRelease();
  unint64_t v3 = a1[5];
  if (v3 >> 60 != 15) {
    sub_100006628(a1[4], v3);
  }
  swift_bridgeObjectRelease();
  unint64_t v4 = a1[9];
  if (v4 >> 60 != 15) {
    sub_100006628(a1[8], v4);
  }
  if (a1[10] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = a1[15];
  if (result)
  {
    swift_bridgeObjectRelease();
    unint64_t v6 = a1[17];
    if (v6 >> 60 != 15) {
      sub_100006628(a1[16], v6);
    }
    uint64_t result = a1[18];
    if (result != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for KCSOTAResponse(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_1000065D0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2 + 4;
  unint64_t v8 = a2[5];
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  else
  {
    uint64_t v9 = *(void *)v7;
    sub_1000065D0(v9, v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v8;
  }
  uint64_t v10 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v10;
  uint64_t v11 = a2 + 8;
  unint64_t v12 = a2[9];
  swift_bridgeObjectRetain();
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *v11;
  }
  else
  {
    uint64_t v13 = *(void *)v11;
    sub_1000065D0(v13, v12);
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v12;
  }
  uint64_t v14 = a2[10];
  if (v14 != 1)
  {
    uint64_t v20 = a2[11];
    uint64_t v19 = a2[12];
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v20;
    uint64_t v21 = a2[13];
    *(void *)(a1 + 96) = v19;
    *(void *)(a1 + 104) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = a2[15];
    if (v16) {
      goto LABEL_12;
    }
LABEL_15:
    long long v22 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v22;
    long long v23 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v23;
    return a1;
  }
  long long v15 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 96) = v15;
  uint64_t v16 = a2[15];
  if (!v16) {
    goto LABEL_15;
  }
LABEL_12:
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = v16;
  uint64_t v17 = a2 + 16;
  unint64_t v18 = a2[17];
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v17;
  }
  else
  {
    uint64_t v24 = *(void *)v17;
    sub_1000065D0(v24, v18);
    *(void *)(a1 + 128) = v24;
    *(void *)(a1 + 136) = v18;
  }
  uint64_t v25 = a2[18];
  if (v25 == 1)
  {
    long long v26 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = v26;
  }
  else
  {
    uint64_t v28 = a2[19];
    uint64_t v27 = a2[20];
    *(void *)(a1 + 144) = v25;
    *(void *)(a1 + 152) = v28;
    uint64_t v29 = a2[21];
    *(void *)(a1 + 160) = v27;
    *(void *)(a1 + 168) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for KCSOTAResponse(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *(void *)a2;
      sub_1000065D0(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_1000DFF34(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)a2;
  sub_1000065D0(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  sub_100006628(v7, v8);
LABEL_8:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(a2 + 32);
  unint64_t v10 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_1000065D0(*v9, *(void *)(a2 + 40));
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v10;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v10 >> 60 == 15)
  {
    sub_1000DFF34(a1 + 32);
LABEL_13:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
    goto LABEL_15;
  }
  uint64_t v12 = *v9;
  sub_1000065D0(*v9, *(void *)(a2 + 40));
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v10;
  sub_100006628(v13, v14);
LABEL_15:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v15 = (uint64_t *)(a2 + 64);
  unint64_t v16 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 == 15)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *v15;
      sub_1000065D0(*v15, *(void *)(a2 + 72));
      *(void *)(a1 + 64) = v17;
      *(void *)(a1 + 72) = v16;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v16 >> 60 == 15)
  {
    sub_1000DFF34(a1 + 64);
LABEL_20:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v15;
    goto LABEL_22;
  }
  uint64_t v18 = *v15;
  sub_1000065D0(*v15, *(void *)(a2 + 72));
  uint64_t v19 = *(void *)(a1 + 64);
  unint64_t v20 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v18;
  *(void *)(a1 + 72) = v16;
  sub_100006628(v19, v20);
LABEL_22:
  uint64_t v21 = (_OWORD *)(a1 + 80);
  long long v23 = (_OWORD *)(a2 + 80);
  uint64_t v22 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) == 1)
  {
    if (v22 == 1)
    {
      long long v24 = *(_OWORD *)(a2 + 96);
      *uint64_t v21 = *v23;
      *(_OWORD *)(a1 + 96) = v24;
    }
    else
    {
      *(void *)(a1 + 80) = v22;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v22 == 1)
  {
    sub_1000ABEA4(a1 + 80);
    long long v25 = *(_OWORD *)(a2 + 96);
    *uint64_t v21 = *v23;
    *(_OWORD *)(a1 + 96) = v25;
  }
  else
  {
    *(void *)(a1 + 80) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  long long v26 = (long long *)(a1 + 112);
  uint64_t v27 = (long long *)(a2 + 112);
  uint64_t v28 = *(void *)(a2 + 120);
  if (*(void *)(a1 + 120))
  {
    if (!v28)
    {
      sub_1000DFF64((uint64_t *)(a1 + 112));
      long long v34 = *(_OWORD *)(a2 + 160);
      long long v36 = *v27;
      long long v35 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v34;
      *long long v26 = v36;
      *(_OWORD *)(a1 + 128) = v35;
      return a1;
    }
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v29 = (uint64_t *)(a2 + 128);
    unint64_t v30 = *(void *)(a2 + 136);
    if (*(void *)(a1 + 136) >> 60 == 15)
    {
      if (v30 >> 60 != 15)
      {
        uint64_t v31 = *v29;
        sub_1000065D0(*v29, *(void *)(a2 + 136));
        *(void *)(a1 + 128) = v31;
        *(void *)(a1 + 136) = v30;
LABEL_46:
        long long v26 = (long long *)(a1 + 144);
        char v46 = (long long *)(a2 + 144);
        uint64_t v41 = *(void *)(a2 + 144);
        if (*(void *)(a1 + 144) == 1)
        {
          if (v41 == 1)
          {
            long long v37 = *v46;
            long long v38 = *(_OWORD *)(a2 + 160);
            goto LABEL_49;
          }
          goto LABEL_50;
        }
        if (v41 == 1)
        {
          sub_1000ABEA4(a1 + 144);
          long long v47 = *(_OWORD *)(a2 + 160);
          *long long v26 = *v46;
          *(_OWORD *)(a1 + 160) = v47;
        }
        else
        {
          *(void *)(a1 + 144) = v41;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(a1 + 152) = *(void *)(a2 + 152);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(a1 + 160) = *(void *)(a2 + 160);
          *(void *)(a1 + 168) = *(void *)(a2 + 168);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        return a1;
      }
    }
    else
    {
      if (v30 >> 60 != 15)
      {
        uint64_t v43 = *v29;
        sub_1000065D0(*v29, *(void *)(a2 + 136));
        uint64_t v44 = *(void *)(a1 + 128);
        unint64_t v45 = *(void *)(a1 + 136);
        *(void *)(a1 + 128) = v43;
        *(void *)(a1 + 136) = v30;
        sub_100006628(v44, v45);
        goto LABEL_46;
      }
      sub_1000DFF34(a1 + 128);
    }
    *(_OWORD *)(a1 + 128) = *(_OWORD *)v29;
    goto LABEL_46;
  }
  if (!v28)
  {
    long long v37 = *v27;
    long long v38 = *(_OWORD *)(a2 + 128);
    long long v39 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v39;
LABEL_49:
    *long long v26 = v37;
    v26[1] = v38;
    return a1;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  unint64_t v32 = (_OWORD *)(a2 + 128);
  unint64_t v33 = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v32;
  }
  else
  {
    uint64_t v40 = *(void *)v32;
    sub_1000065D0(v40, v33);
    *(void *)(a1 + 128) = v40;
    *(void *)(a1 + 136) = v33;
  }
  uint64_t v41 = *(void *)(a2 + 144);
  if (v41 != 1)
  {
LABEL_50:
    *(void *)(a1 + 144) = v41;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  long long v42 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v42;
  return a1;
}

uint64_t sub_1000DFF34(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000DFF64(uint64_t *a1)
{
  return a1;
}

__n128 initializeWithTake for KCSOTAResponse(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for KCSOTAResponse(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_1000DFF34(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_100006628(v6, v4);
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  long long v8 = (_OWORD *)(a2 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1000DFF34(a1 + 32);
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)v8;
  *(void *)(a1 + 40) = v10;
  sub_100006628(v11, v9);
LABEL_11:
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = (_OWORD *)(a2 + 64);
  unint64_t v14 = *(void *)(a1 + 72);
  if (v14 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *v13;
    goto LABEL_16;
  }
  unint64_t v15 = *(void *)(a2 + 72);
  if (v15 >> 60 == 15)
  {
    sub_1000DFF34(a1 + 64);
    goto LABEL_14;
  }
  uint64_t v16 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)v13;
  *(void *)(a1 + 72) = v15;
  sub_100006628(v16, v14);
LABEL_16:
  uint64_t v17 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) == 1)
  {
LABEL_19:
    long long v18 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v18;
    goto LABEL_21;
  }
  if (v17 == 1)
  {
    sub_1000ABEA4(a1 + 80);
    goto LABEL_19;
  }
  *(void *)(a1 + 80) = v17;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v19;
  swift_bridgeObjectRelease();
LABEL_21:
  if (!*(void *)(a1 + 120))
  {
LABEL_28:
    long long v24 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v24;
    long long v25 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v25;
    return a1;
  }
  uint64_t v20 = *(void *)(a2 + 120);
  if (!v20)
  {
    sub_1000DFF64((uint64_t *)(a1 + 112));
    goto LABEL_28;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)(a2 + 128);
  unint64_t v22 = *(void *)(a1 + 136);
  if (v22 >> 60 != 15)
  {
    unint64_t v23 = *(void *)(a2 + 136);
    if (v23 >> 60 != 15)
    {
      uint64_t v26 = *(void *)(a1 + 128);
      *(void *)(a1 + 128) = *v21;
      *(void *)(a1 + 136) = v23;
      sub_100006628(v26, v22);
      goto LABEL_30;
    }
    sub_1000DFF34(a1 + 128);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)v21;
LABEL_30:
  uint64_t v27 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144) != 1)
  {
    if (v27 != 1)
    {
      *(void *)(a1 + 144) = v27;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v29;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000ABEA4(a1 + 144);
  }
  long long v28 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v28;
  return a1;
}

uint64_t getEnumTagSinglePayload for KCSOTAResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KCSOTAResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponse()
{
  return &type metadata for KCSOTAResponse;
}

uint64_t destroy for KCSOTAResponse.Profile(uint64_t *a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_100006628(a1[2], v2);
  }
  uint64_t result = a1[4];
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for KCSOTAResponse.Profile(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  unint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_1000065D0(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8 == 1)
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v10 = *(void *)(a2 + 48);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v11;
    uint64_t v12 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for KCSOTAResponse.Profile(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 == 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *v4;
      sub_1000065D0(*v4, *(void *)(a2 + 24));
      *(void *)(a1 + 16) = v6;
      *(void *)(a1 + 24) = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
    sub_1000DFF34(a1 + 16);
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v7 = *v4;
  sub_1000065D0(*v4, *(void *)(a2 + 24));
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v5;
  sub_100006628(v8, v9);
LABEL_8:
  uint64_t v10 = (_OWORD *)(a1 + 32);
  uint64_t v12 = (_OWORD *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1)
  {
    if (v11 == 1)
    {
      long long v13 = *(_OWORD *)(a2 + 48);
      _OWORD *v10 = *v12;
      *(_OWORD *)(a1 + 48) = v13;
    }
    else
    {
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_1000ABEA4(a1 + 32);
    long long v14 = *(_OWORD *)(a2 + 48);
    _OWORD *v10 = *v12;
    *(_OWORD *)(a1 + 48) = v14;
  }
  else
  {
    *(void *)(a1 + 32) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 initializeWithTake for KCSOTAResponse.Profile(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for KCSOTAResponse.Profile(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  unint64_t v5 = a2 + 2;
  unint64_t v6 = a1[3];
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    sub_1000DFF34((uint64_t)(a1 + 2));
LABEL_4:
    *((_OWORD *)a1 + 1) = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = a1[2];
  a1[2] = *(void *)v5;
  a1[3] = v7;
  sub_100006628(v8, v6);
LABEL_6:
  uint64_t v9 = a2[4];
  if (a1[4] != 1)
  {
    if (v9 != 1)
    {
      a1[4] = v9;
      swift_bridgeObjectRelease();
      a1[5] = a2[5];
      swift_bridgeObjectRelease();
      uint64_t v11 = a2[7];
      a1[6] = a2[6];
      a1[7] = v11;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000ABEA4((uint64_t)(a1 + 4));
  }
  long long v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v10;
  return a1;
}

ValueMetadata *type metadata accessor for KCSOTAResponse.Profile()
{
  return &type metadata for KCSOTAResponse.Profile;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKernelConfig()
{
  return &type metadata for KCSOTAResponseParser.InternalKernelConfig;
}

uint64_t destroy for KCSOTAResponse.HostConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for KCSOTAResponse.HostConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KCSOTAResponse.HostConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for KCSOTAResponse.HostConfiguration(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KCSOTAResponse.HostConfiguration(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KCSOTAResponse.HostConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponse.HostConfiguration()
{
  return &type metadata for KCSOTAResponse.HostConfiguration;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.DecodingError()
{
  return &type metadata for KCSOTAResponseParser.DecodingError;
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwxx_0()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t _s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t _s9SPREngine14KCSOTAResponseV7ProfileVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000E0AF0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalProfile()
{
  return &type metadata for KCSOTAResponseParser.InternalProfile;
}

uint64_t initializeWithCopy for KCSOTAResponseParser.JSONObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KCSOTAResponseParser.JSONObject(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for KCSOTAResponseParser.JSONObject(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.JSONObject()
{
  return &type metadata for KCSOTAResponseParser.JSONObject;
}

unint64_t sub_1000E0C3C()
{
  unint64_t result = qword_1001DDF38;
  if (!qword_1001DDF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF38);
  }
  return result;
}

unint64_t sub_1000E0C90()
{
  unint64_t result = qword_1001DDF48;
  if (!qword_1001DDF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF48);
  }
  return result;
}

uint64_t sub_1000E0CE4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x654B676E69646F63 && a2 == 0xE900000000000079;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000E0DDC(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001DDFC8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[4];
  sub_100006788(a1, a1[3]);
  sub_1000E0C90();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100006520((uint64_t)a1);
  }
  else
  {
    LOBYTE(v10) = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100003EB0(&qword_1001DDF08);
    char v11 = 1;
    sub_1000E2130(&qword_1001DDFD0, &qword_1001DDF08);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100006520((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1000E1028(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100199820
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100199840 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100199860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100199880)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000E11C0@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DDF90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  unint64_t v45 = a1;
  sub_100006788(a1, v10);
  sub_1000E1FF4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100006520((uint64_t)v45);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = a2;
    uint64_t v44 = v6;
    LOBYTE(v46) = 0;
    sub_1000E1798();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v11 = v55;
    uint64_t v42 = v54;
    uint64_t v12 = v56;
    uint64_t v13 = v57;
    LOBYTE(v46) = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v38 = v12;
    uint64_t v39 = v54;
    uint64_t v40 = v56;
    uint64_t v41 = v13;
    uint64_t v14 = v57;
    LOBYTE(v46) = 2;
    uint64_t v15 = v55;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v36 = v14;
    uint64_t v37 = v15;
    uint64_t v17 = v54;
    uint64_t v16 = v55;
    uint64_t v34 = v57;
    uint64_t v35 = v56;
    char v74 = 3;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v5);
    uint64_t v19 = v70;
    uint64_t v18 = v71;
    uint64_t v44 = v70;
    uint64_t v20 = v73;
    uint64_t v32 = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v46 = v42;
    *((void *)&v46 + 1) = v11;
    uint64_t v21 = v17;
    uint64_t v33 = v17;
    uint64_t v23 = v37;
    uint64_t v22 = v38;
    *(void *)&long long v47 = v38;
    *((void *)&v47 + 1) = v41;
    *(void *)&long long v48 = v39;
    *((void *)&v48 + 1) = v37;
    *(void *)&long long v49 = v40;
    *((void *)&v49 + 1) = v36;
    *(void *)&long long v50 = v21;
    *((void *)&v50 + 1) = v16;
    *(void *)&long long v51 = v35;
    *((void *)&v51 + 1) = v34;
    *(void *)&long long v52 = v19;
    *((void *)&v52 + 1) = v18;
    uint64_t v24 = v32;
    *(void *)&long long v53 = v32;
    *((void *)&v53 + 1) = v20;
    sub_1000E2048((uint64_t)&v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v45);
    uint64_t v54 = v42;
    uint64_t v55 = v11;
    uint64_t v56 = v22;
    uint64_t v57 = v41;
    uint64_t v58 = v39;
    uint64_t v59 = v23;
    uint64_t v60 = v40;
    uint64_t v61 = v36;
    uint64_t v62 = v33;
    uint64_t v63 = v16;
    uint64_t v64 = v35;
    uint64_t v65 = v34;
    uint64_t v66 = v44;
    uint64_t v67 = v18;
    uint64_t v68 = v24;
    uint64_t v69 = v20;
    uint64_t result = sub_1000DEF74((uint64_t)&v54);
    long long v26 = v51;
    uint64_t v27 = v43;
    v43[4] = v50;
    void v27[5] = v26;
    long long v28 = v53;
    v27[6] = v52;
    v27[7] = v28;
    long long v29 = v47;
    _OWORD *v27 = v46;
    v27[1] = v29;
    long long v30 = v49;
    v27[2] = v48;
    void v27[3] = v30;
  }
  return result;
}

uint64_t sub_1000E1648(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100199800
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x666E6F4374736F68 && a2 == 0xEA00000000006769)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1000E1744()
{
  unint64_t result = qword_1001DDF60;
  if (!qword_1001DDF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF60);
  }
  return result;
}

unint64_t sub_1000E1798()
{
  unint64_t result = qword_1001DDF68;
  if (!qword_1001DDF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF68);
  }
  return result;
}

uint64_t sub_1000E17EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x747069726373 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000E18C0@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, void *a4@<X8>)
{
  long long v25 = a4;
  uint64_t v7 = sub_100003EB0(a2);
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4)
  {
    sub_100006520((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v24;
    uint64_t v11 = v25;
    char v30 = 0;
    sub_1000E1798();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v13 = v27;
    uint64_t v22 = v28;
    uint64_t v23 = v26;
    uint64_t v21 = v29;
    char v30 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v7);
    uint64_t v15 = v26;
    uint64_t v14 = v27;
    uint64_t v16 = v28;
    uint64_t v17 = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v11 = v23;
    v11[1] = v13;
    uint64_t v19 = v21;
    v11[2] = v22;
    v11[3] = v19;
    v11[4] = v15;
    v11[5] = v14;
    v11[6] = v16;
    v11[7] = v17;
  }
  return result;
}

uint64_t sub_1000E1B18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6941737361707962 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4374726F70707573 && a2 == 0xED0000787254706ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000E1CB8(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001DDF70);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000E1F4C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v9 = 0;
    sub_100006520((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    char v11 = 0;
    sub_1000E2130(&qword_1001D9B10, (uint64_t *)&unk_1001DA570);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v9 = v12;
    char v11 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100006520((uint64_t)a1);
  }
  return v9;
}

unint64_t sub_1000E1F4C()
{
  unint64_t result = qword_1001DDF78;
  if (!qword_1001DDF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF78);
  }
  return result;
}

unint64_t sub_1000E1FA0()
{
  unint64_t result = qword_1001DDF88;
  if (!qword_1001DDF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF88);
  }
  return result;
}

unint64_t sub_1000E1FF4()
{
  unint64_t result = qword_1001DDF98;
  if (!qword_1001DDF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDF98);
  }
  return result;
}

uint64_t sub_1000E2048(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1000E20A0(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  sub_1000A7BF8(*a1, a1[1], a1[2], a1[3], a1[4]);
  sub_1000A7BF8(v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_1000E2130(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s9SPREngine20KCSOTAResponseParserC13DecodingErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E225CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.InternalKCSOTAResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalKernelConfig.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.InternalKernelConfig.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for KCSOTAResponse.HostConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E2378);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponse.HostConfiguration.CodingKeys()
{
  return &type metadata for KCSOTAResponse.HostConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.InternalProfile.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.InternalProfile.CodingKeys;
}

unsigned char *_s9SPREngine20KCSOTAResponseParserC20InternalKernelConfigV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E248CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KCSOTAResponseParser.JSONObject.CodingKeys()
{
  return &type metadata for KCSOTAResponseParser.JSONObject.CodingKeys;
}

unint64_t sub_1000E24C8()
{
  unint64_t result = qword_1001DDFD8;
  if (!qword_1001DDFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDFD8);
  }
  return result;
}

unint64_t sub_1000E2520()
{
  unint64_t result = qword_1001DDFE0;
  if (!qword_1001DDFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDFE0);
  }
  return result;
}

unint64_t sub_1000E2578()
{
  unint64_t result = qword_1001DDFE8;
  if (!qword_1001DDFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDFE8);
  }
  return result;
}

unint64_t sub_1000E25D0()
{
  unint64_t result = qword_1001DDFF0;
  if (!qword_1001DDFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDFF0);
  }
  return result;
}

unint64_t sub_1000E2628()
{
  unint64_t result = qword_1001DDFF8;
  if (!qword_1001DDFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DDFF8);
  }
  return result;
}

unint64_t sub_1000E2680()
{
  unint64_t result = qword_1001DE000;
  if (!qword_1001DE000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE000);
  }
  return result;
}

unint64_t sub_1000E26D8()
{
  unint64_t result = qword_1001DE008;
  if (!qword_1001DE008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE008);
  }
  return result;
}

unint64_t sub_1000E2730()
{
  unint64_t result = qword_1001DE010;
  if (!qword_1001DE010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE010);
  }
  return result;
}

unint64_t sub_1000E2788()
{
  unint64_t result = qword_1001DE018;
  if (!qword_1001DE018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE018);
  }
  return result;
}

unint64_t sub_1000E27E0()
{
  unint64_t result = qword_1001DE020;
  if (!qword_1001DE020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE020);
  }
  return result;
}

unint64_t sub_1000E2838()
{
  unint64_t result = qword_1001DE028;
  if (!qword_1001DE028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE028);
  }
  return result;
}

unint64_t sub_1000E2890()
{
  unint64_t result = qword_1001DE030;
  if (!qword_1001DE030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE030);
  }
  return result;
}

unint64_t sub_1000E28E8()
{
  unint64_t result = qword_1001DE038;
  if (!qword_1001DE038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE038);
  }
  return result;
}

unint64_t sub_1000E2940()
{
  unint64_t result = qword_1001DE040;
  if (!qword_1001DE040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE040);
  }
  return result;
}

unint64_t sub_1000E2998()
{
  unint64_t result = qword_1001DE048;
  if (!qword_1001DE048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE048);
  }
  return result;
}

void sub_1000E29F8(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v1 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v1 = *(id *)(a1 + 32);
  }
  uint64_t v2 = v1;
  SecKeyRef v3 = SecCertificateRef.publicKey.getter();

  if (!v3) {
    goto LABEL_9;
  }
  if (!SecKeyIsAlgorithmSupported(v3, kSecKeyOperationTypeVerify, kSecKeyAlgorithmECDSASignatureDigestX962SHA256))
  {

LABEL_9:
    sub_1000E2B88();
    swift_allocError();
    swift_willThrow();
    return;
  }
  CFErrorRef error = 0;
  CFDataRef v4 = SecKeyCopyExternalRepresentation(v3, &error);
  if (v4)
  {
    CFDataRef v5 = v4;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  }
  else
  {
    CFErrorRef v6 = error;
    if (error)
    {
      type metadata accessor for CFError(0);
      sub_1000E2BDC();
      swift_allocError();
      *uint64_t v7 = v6;
      swift_willThrow();
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t sub_1000E2B88()
{
  unint64_t result = qword_1001DE050;
  if (!qword_1001DE050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE050);
  }
  return result;
}

unint64_t sub_1000E2BDC()
{
  unint64_t result = qword_1001DE058;
  if (!qword_1001DE058)
  {
    type metadata accessor for CFError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE058);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CryptoKitExtensionError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000E2CD0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKitExtensionError()
{
  return &type metadata for CryptoKitExtensionError;
}

unint64_t sub_1000E2D0C()
{
  unint64_t result = qword_1001DE060;
  if (!qword_1001DE060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE060);
  }
  return result;
}

void *sub_1000E2D60(uint64_t a1, unint64_t a2)
{
  type metadata accessor for TLV();
  uint64_t v31 = (uint64_t)static TLV.decode(from:)(a1, a2);
  uint64_t v4 = *(void *)TLVTag.fileControlInformationTemplate.unsafeMutableAddressor();
  uint64_t v5 = sub_100003EB0((uint64_t *)&unk_1001DF8B0);
  sub_1000E6DE8();
  unint64_t v6 = Collection<>.filter(tag:)(v4, v5);
  unint64_t result = (void *)swift_bridgeObjectRelease();
  if (!(v6 >> 62))
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = (void *)swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_20;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    unint64_t v29 = v6 & 0xC000000000000001;
    uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v27 = v8;
    unint64_t v28 = v6;
    do
    {
      if (v29)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v11 = *(void *)(v6 + 8 * v9 + 32);
        swift_retain();
      }
      uint64_t v12 = *(uint64_t (**)(void))(*(void *)v11 + 144);
      uint64_t v13 = v12();
      uint64_t v15 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = sub_10015A580(0, v10[2] + 1, 1, v10);
      }
      unint64_t v17 = v10[2];
      unint64_t v16 = v10[3];
      char v30 = v10;
      if (v17 >= v16 >> 1) {
        char v30 = sub_10015A580((void *)(v16 > 1), v17 + 1, 1, v10);
      }
      v30[2] = v17 + 1;
      uint64_t v18 = &v30[2 * v17];
      v18[4] = v13;
      uint64_t v18[5] = v15;
      if (qword_1001D9230 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100003E78(v19, (uint64_t)qword_1001DE068);
      swift_retain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136446210;
        uint64_t v23 = v12();
        unint64_t v25 = v24;
        Swift::String v26 = Data.hexString()();
        sub_100006628(v23, v25);
        *(void *)(v22 + 4) = sub_100005EB8(v26._countAndFlagsBits, (unint64_t)v26._object, &v31);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "PPSE Response: %{public}s", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        uint64_t v8 = v27;
        swift_slowDealloc();
        unint64_t v6 = v28;
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release_n();
      }
      ++v9;
      uint64_t v10 = v30;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E328C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  uint64_t v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_19;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t v7 = *(void *)TLVTag.TAG_DF8129_LENGTH.unsafeMutableAddressor();
      if (v4 == v7)
      {
        uint64_t v13 = 0;
        switch((int)v2)
        {
          case 1:
            uint64_t v13 = (int)a1;
            break;
          case 2:
            uint64_t v13 = *(void *)(a1 + 16);
            break;
          default:
            break;
        }
        if (__OFADD__(v13, *(void *)TLVTag.OFFSET_OPS_STATUS.unsafeMutableAddressor()))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          JUMPOUT(0x1000E3524);
        }
        char v14 = Data.subscript.getter();
        unsigned __int8 v12 = *(unsigned char *)TLVTag.OPS_STATUS_MASK.unsafeMutableAddressor() & v14;
      }
      else
      {
        if (qword_1001D9230 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_100003E78(v8, (uint64_t)qword_1001DE068);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = swift_slowAlloc();
          uint64_t v16 = swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 136315394;
          sub_100005EB8(0xD000000000000017, 0x80000001001998D0, &v16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v11 + 12) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - OPS length is not %ld", (uint8_t *)v11, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        unsigned __int8 v12 = 0;
      }
      return v12 | ((v4 != v7) << 8);
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000E3544(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v5 > a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 + 1 < a1)
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x1000E35B8);
  }
  return Data._Representation.subscript.getter();
}

void sub_1000E35C8(void *a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0xF000000000000000;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + 16 * v2;
    uint64_t v5 = *(void *)(v4 + 32);
    unint64_t v6 = *(void *)(v4 + 40);
    v1[1] = v2 + 1;
    uint64_t v7 = v1[2];
    if (!__OFADD__(v7, 1))
    {
      v1[2] = v7 + 1;
      *a1 = v7;
      a1[1] = v5;
      a1[2] = v6;
      sub_1000065D0(v5, v6);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1000E3620()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DE068);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE068);
  if (qword_1001D9238 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FC8);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t type metadata accessor for PayAppletResponse()
{
  return self;
}

uint64_t sub_1000E370C(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v5 = (int)v5;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_23;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v5 = BYTE6(a2);
LABEL_6:
      if (v5 != 22 || (sub_1000065D0(a1, a2), __int16 v2 = sub_1000D8294(a1, a2), sub_100006628(a1, a2), (v2 & 0x100) != 0))
      {
LABEL_13:
        if (qword_1001D9230 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_100003E78(v16, (uint64_t)qword_1001DE068);
        sub_1000065D0(a1, a2);
        sub_1000065D0(a1, a2);
        unint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = (uint8_t *)swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          *(_DWORD *)uint64_t v19 = 136315138;
          Swift::String v20 = Data.hexString()();
          sub_100005EB8(v20._countAndFlagsBits, (unint64_t)v20._object, &v21);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100006628(a1, a2);
          sub_100006628(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Bad length or could not get messageId from UIRD: %s", v19, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          return 0;
        }
        else
        {
          sub_100006628(a1, a2);
          sub_100006628(a1, a2);

          return 0;
        }
      }
      else
      {
        if (qword_1001D9230 != -1) {
LABEL_24:
        }
          swift_once();
        uint64_t v9 = type metadata accessor for Logger();
        sub_100003E78(v9, (uint64_t)qword_1001DE068);
        os_log_type_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          unsigned __int8 v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v21 = swift_slowAlloc();
          *(_DWORD *)unsigned __int8 v12 = 136315138;
          uint64_t v13 = SPRTransactionMessage.description.getter();
          sub_100005EB8(v13, v14, &v21);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "UIRD: %s", v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t result = 6;
        switch((char)v2)
        {
          case 6:
            uint64_t result = 10;
            break;
          case 28:
            uint64_t result = 7;
            break;
          case 32:
            uint64_t result = 8;
            break;
          case 33:
            return result;
          default:
            return 0;
        }
      }
      return result;
  }
}

void *sub_1000E3B9C(uint64_t a1, unint64_t a2)
{
  sub_1000065D0(a1, a2);
  __int16 v5 = sub_1000D8294(a1, a2);
  sub_100006628(a1, a2);
  if ((v5 & 0x100) == 0 && (_BYTE)v5)
  {
    uint64_t v6 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v6) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_42:
          __break(1u);
          JUMPOUT(0x1000E3FA4);
        }
        uint64_t v6 = (int)v6;
LABEL_13:
        uint64_t v16 = v6 - 1;
        if (__OFSUB__(v6, 1))
        {
          __break(1u);
        }
        else
        {
          uint64_t v2 = v16 / 5;
          if (v16 / 5 >= v5) {
            goto LABEL_19;
          }
          if (qword_1001D9230 != -1) {
            goto LABEL_40;
          }
LABEL_16:
          uint64_t v17 = type metadata accessor for Logger();
          sub_100003E78(v17, (uint64_t)qword_1001DE068);
          os_log_type_t v18 = Logger.logObject.getter();
          os_log_type_t v19 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v18, v19))
          {
            uint64_t v20 = swift_slowAlloc();
            *(_DWORD *)uint64_t v20 = 134218240;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v20 + 12) = 2048;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v18, v19, "%ld errors reported but only %ld described", (uint8_t *)v20, 0x16u);
            swift_slowDealloc();
          }

LABEL_19:
          if (v16 >= 5)
          {
            uint64_t v21 = 0;
            uint64_t v22 = v2 - 1;
            os_log_type_t v11 = _swiftEmptyArrayStorage;
            while (1)
            {
              uint64_t v23 = v21 + 5;
              uint64_t v24 = 0;
              uint64_t v25 = 0;
              switch(a2 >> 62)
              {
                case 1uLL:
                  uint64_t v24 = a1 >> 32;
                  uint64_t v25 = (int)a1;
                  break;
                case 2uLL:
                  uint64_t v25 = *(void *)(a1 + 16);
                  uint64_t v24 = *(void *)(a1 + 24);
                  break;
                case 3uLL:
                  break;
                default:
                  uint64_t v25 = 0;
                  uint64_t v24 = BYTE6(a2);
                  break;
              }
              if (v23 < v25) {
                break;
              }
              if (v23 >= v24) {
                goto LABEL_35;
              }
              uint64_t v26 = Data._Representation.subscript.getter();
              unint64_t v28 = v27;
              sub_1000065D0(v26, v27);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                os_log_type_t v11 = sub_10015A580(0, v11[2] + 1, 1, v11);
              }
              unint64_t v30 = v11[2];
              unint64_t v29 = v11[3];
              if (v30 >= v29 >> 1) {
                os_log_type_t v11 = sub_10015A580((void *)(v29 > 1), v30 + 1, 1, v11);
              }
              v11[2] = v30 + 1;
              uint64_t v31 = &v11[2 * v30];
              _OWORD v31[4] = v26;
              void v31[5] = v28;
              sub_100006628(v26, v28);
              if (!v22) {
                return v11;
              }
              v21 += 5;
              --v22;
              if (v21 == 0x7FFFFFFFFFFFFFFDLL) {
                goto LABEL_36;
              }
            }
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
        }
        __break(1u);
LABEL_40:
        swift_once();
        goto LABEL_16;
      case 2uLL:
        uint64_t v14 = *(void *)(a1 + 16);
        uint64_t v13 = *(void *)(a1 + 24);
        BOOL v15 = __OFSUB__(v13, v14);
        uint64_t v6 = v13 - v14;
        if (!v15) {
          goto LABEL_13;
        }
        goto LABEL_42;
      case 3uLL:
        goto LABEL_13;
      default:
        uint64_t v6 = BYTE6(a2);
        goto LABEL_13;
    }
  }
  if (qword_1001D9230 != -1) {
LABEL_37:
  }
    swift_once();
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DE068);
  BOOL v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "empty Track Error", v10, 2u);
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000E3FC4(uint64_t a1)
{
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v44 = a1;
  swift_bridgeObjectRetain();
  sub_1000E35C8(v42);
  unint64_t v1 = v43;
  if (v43 >> 60 == 15)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    char v3 = 0;
    uint64_t v5 = v42[0];
    uint64_t v4 = v42[1];
    while (1)
    {
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v42, "Track Error #");
      HIWORD(v42[1]) = -4864;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x1000E479CLL);
      }
      v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._uint64_t countAndFlagsBits = 8250;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      uint64_t v8 = v42[0];
      uint64_t v9 = v42[1];
      if (v3) {
        swift_bridgeObjectRelease();
      }
      uint64_t v47 = v8;
      unint64_t v48 = v9;
      uint64_t v10 = 0;
      switch(v1 >> 62)
      {
        case 1uLL:
          uint64_t v10 = (int)v4;
          break;
        case 2uLL:
          uint64_t v10 = *(void *)(v4 + 16);
          break;
        default:
          break;
      }
      switch(Data.subscript.getter())
      {
        case 0u:
          swift_beginAccess();
          unint64_t v11 = 0xD000000000000010;
          unint64_t v12 = 0x8000000100199970;
          break;
        case 1u:
          swift_beginAccess();
          unint64_t v11 = 0xD000000000000014;
          unint64_t v12 = 0x8000000100199990;
          break;
        case 2u:
          swift_beginAccess();
          unint64_t v11 = 0x7961502061736956;
          unint64_t v12 = 0xEE00202C65766157;
          break;
        case 3u:
          swift_beginAccess();
          uint64_t v13 = 1480936769;
          goto LABEL_18;
        case 6u:
          swift_beginAccess();
          unint64_t v11 = 0x7265766F63736944;
          unint64_t v12 = 0xEA0000000000202CLL;
          break;
        case 0xEu:
          swift_beginAccess();
          uint64_t v13 = 2020505932;
LABEL_18:
          unint64_t v11 = v13 & 0xFFFF0000FFFFFFFFLL | 0x202C00000000;
          unint64_t v12 = 0xE600000000000000;
          break;
        default:
          swift_beginAccess();
          unint64_t v11 = 0xD00000000000001ELL;
          unint64_t v12 = 0x80000001001998F0;
          break;
      }
      String.append(_:)(*(Swift::String *)&v11);
      swift_endAccess();
      uint64_t v14 = v10 + 4;
      if (__OFADD__(v10, 4)) {
        goto LABEL_36;
      }
      if (v14 < v10 + 3) {
        goto LABEL_37;
      }
      uint64_t v15 = sub_1000E3544(v10 + 3, v14, v4, v1);
      unint64_t v17 = v16;
      __int16 v18 = Data.toUInt16(endianness:)(1, v15, v16);
      sub_100006628(v15, v17);
      v42[0] = 0;
      v42[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      strcpy((char *)v42, "State: 0x");
      WORD1(v42[1]) = 0;
      HIDWORD(v42[1]) = -385875968;
      sub_100003EB0((uint64_t *)&unk_1001DD3C0);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_100186100;
      char v20 = Data.subscript.getter();
      *(void *)(v19 + 56) = &type metadata for UInt8;
      *(void *)(v19 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v19 + 32) = v20;
      v21._uint64_t countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._uint64_t countAndFlagsBits = 0x3A6C6576654C202CLL;
      v22._object = (void *)0xEB00000000783020;
      String.append(_:)(v22);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_100186100;
      char v24 = Data.subscript.getter();
      *(void *)(v23 + 56) = &type metadata for UInt8;
      *(void *)(v23 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v23 + 32) = v24;
      v25._uint64_t countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 0x203A65646F43202CLL;
      v26._object = (void *)0xEA00000000007830;
      String.append(_:)(v26);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_100186100;
      *(void *)(v27 + 56) = &type metadata for UInt16;
      *(void *)(v27 + 64) = &protocol witness table for UInt16;
      *(_WORD *)(v27 + 32) = v18;
      v28._uint64_t countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      uint64_t v29 = v42[0];
      unint64_t v30 = (void *)v42[1];
      swift_beginAccess();
      v31._uint64_t countAndFlagsBits = v29;
      v31._object = v30;
      String.append(_:)(v31);
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (qword_1001D9230 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100003E78(v32, (uint64_t)qword_1001DE068);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        v42[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136446210;
        __int16 v41 = v18;
        uint64_t v36 = v47;
        unint64_t v37 = v48;
        swift_bridgeObjectRetain();
        sub_100005EB8(v36, v37, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        __int16 v18 = v41;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s", v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      if (v18 == 209)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = 0xD00000000000001DLL;
        uint64_t v39 = "ERROR_HCI_TRANSMISSION_FAILED";
        goto LABEL_33;
      }
      if (v18 == 208)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = 0xD00000000000001ALL;
        uint64_t v39 = "ERROR_HCI_RECEPTION_FAILED";
        goto LABEL_33;
      }
      if (v18 == 62) {
        break;
      }
      sub_1000E6E44(v5, v4, v1);
      sub_1000E35C8(v42);
      uint64_t v5 = v42[0];
      uint64_t v4 = v42[1];
      unint64_t v1 = v43;
      char v3 = 1;
      if (v43 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_2;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v38 = 0xD000000000000017;
    uint64_t v39 = "ERROR_HCI_TIMEOUT_ERROR";
LABEL_33:
    uint64_t v2 = sub_10002A544(4026, v38, (void *)((unint64_t)(v39 - 32) | 0x8000000000000000), 0);
    sub_1000E6E44(v5, v4, v1);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_1000E47E8(uint64_t a1, unint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v259 = a3;
  long long v273 = xmmword_10018A340;
  char v272 = -1;
  long long v271 = xmmword_10018A340;
  v270._uint64_t countAndFlagsBits = 0;
  v270._object = 0;
  Swift::Bool v269 = 1;
  __int16 v268 = 0;
  long long v266 = xmmword_10018A340;
  long long v267 = xmmword_10018A340;
  long long v235 = xmmword_10018A340;
  type metadata accessor for TLV();
  Swift::String v7 = &qword_1001D9000;
  uint64_t v255 = a4;
  unint64_t v10 = (unint64_t)static TLV.decode(from:)(a1, a2);
  uint64_t v249 = 0;
  *(void *)&long long v264 = v10;
  TLVTag.applicationLabel.unsafeMutableAddressor();
  uint64_t v236 = sub_100003EB0((uint64_t *)&unk_1001DF8B0);
  unint64_t v11 = sub_1000E6DE8();
  uint64_t v12 = Collection<>.first(tag:)();
  if (v12)
  {
    uint64_t v250 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 296))(v12);
    uint64_t v8 = v13;
    swift_release();
  }
  else
  {
    uint64_t v250 = 0;
    uint64_t v8 = 0;
  }
  *(void *)&long long v264 = v10;
  TLVTag.applicationPreferredName.unsafeMutableAddressor();
  uint64_t v14 = Collection<>.first(tag:)();
  if (v14)
  {
    uint64_t v251 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 296))(v14);
    unint64_t v16 = v15;
    swift_release();
  }
  else
  {
    uint64_t v251 = 0;
    unint64_t v16 = 0;
  }
  *(void *)&long long v264 = v10;
  TLVTag.applicationIdentifier.unsafeMutableAddressor();
  uint64_t v17 = Collection<>.first(tag:)();
  unint64_t v234 = v10;
  unint64_t v256 = v11;
  if (v17)
  {
    uint64_t v260 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 152))(v17);
    uint64_t v19 = v18;
    swift_release();
    uint64_t v248 = v19;
    if (!v8 && v19)
    {
      uint64_t v20 = qword_1001D9338;
      swift_bridgeObjectRetain();
      if (v20 != -1) {
        swift_once();
      }
      uint64_t v21 = *(void *)(qword_1001E1168 + 16);
      if (v21)
      {
        uint64_t v258 = &v228;
        unint64_t v243 = v16;
        uint64_t v22 = v19;
        uint64_t v23 = qword_1001E1168;
        swift_bridgeObjectRetain_n();
        sub_10000A87C();
        unint64_t v257 = v23;
        char v24 = (uint64_t *)(v23 + 56);
        while (1)
        {
          Swift::String v7 = (uint64_t *)*(v24 - 1);
          uint64_t v25 = *v24;
          uint64_t v26 = *(v24 - 3);
          uint64_t v27 = *(v24 - 2);
          *(void *)&long long v264 = v260;
          *((void *)&v264 + 1) = v22;
          uint64_t v262 = v26;
          uint64_t v263 = v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (StringProtocol.contains<A>(_:)()) {
            break;
          }
          v24 += 4;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!--v21)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::String v7 = &qword_1001D9000;
            unint64_t v16 = v243;
            unint64_t v10 = v234;
            goto LABEL_19;
          }
        }
        uint64_t v8 = v25;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (qword_1001D9230 != -1) {
LABEL_227:
        }
          swift_once();
        uint64_t v32 = type metadata accessor for Logger();
        sub_100003E78(v32, (uint64_t)qword_1001DE068);
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.default.getter();
        BOOL v35 = os_log_type_enabled(v33, v34);
        unint64_t v16 = v243;
        unint64_t v10 = v234;
        if (v35)
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "readResult network set from AID", v36, 2u);
          swift_slowDealloc();
        }

        uint64_t v250 = (uint64_t)v7;
        Swift::String v7 = &qword_1001D9000;
      }
      else
      {
LABEL_19:
        swift_bridgeObjectRelease();
        if (qword_1001D9230 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        sub_100003E78(v28, (uint64_t)qword_1001DE068);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          Swift::String v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Swift::String v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "appLabel nil and AID unrecognized", v31, 2u);
          swift_slowDealloc();
        }

        uint64_t v8 = 0;
      }
    }
  }
  else
  {
    uint64_t v248 = 0;
    uint64_t v260 = 0;
  }
  *(void *)&long long v264 = v10;
  TLVTag.thirdPartyData.unsafeMutableAddressor();
  uint64_t v37 = Collection<>.first(tag:)();
  if (v37) {
    goto LABEL_34;
  }
  if (qword_1001D9230 != -1) {
    goto LABEL_215;
  }
  while (1)
  {
    uint64_t v38 = type metadata accessor for Logger();
    sub_100003E78(v38, (uint64_t)qword_1001DE068);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      __int16 v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__int16 v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "thirdPartyData absent so formFactor from cardInterfaceCapabilities", v41, 2u);
      swift_slowDealloc();
    }

    *(void *)&long long v264 = v10;
    TLVTag.cardInterfaceCapabilities.unsafeMutableAddressor();
    uint64_t v37 = Collection<>.first(tag:)();
    if (v37)
    {
LABEL_34:
      uint64_t v241 = (*(uint64_t (**)(void))(*(void *)v37 + 152))();
      uint64_t v247 = v42;
      swift_release();
    }
    else
    {
      uint64_t v241 = 0;
      uint64_t v247 = 0;
    }
    *(void *)&long long v264 = v10;
    TLVTag.outcomeParameterSet.unsafeMutableAddressor();
    uint64_t v43 = Collection<>.first(tag:)();
    if (v43)
    {
      uint64_t v44 = (*(uint64_t (**)(void))(*(void *)v43 + 144))();
      unint64_t v46 = v45;
      swift_release();
      sub_10000BF70(v273, *((unint64_t *)&v273 + 1));
      *(void *)&long long v273 = v44;
      *((void *)&v273 + 1) = v46;
      sub_1000065D0(v44, v46);
      int v47 = sub_1000E328C(v44, v46);
      if ((v47 & 0x100) != 0) {
        int v48 = 0;
      }
      else {
        int v48 = v47;
      }
      LODWORD(v258) = v48;
      uint64_t v49 = 0;
      switch(v46 >> 62)
      {
        case 1uLL:
          uint64_t v49 = (int)v44;
          break;
        case 2uLL:
          uint64_t v49 = *(void *)(v44 + 16);
          break;
        default:
          break;
      }
      if (__OFADD__(v49, *(void *)TLVTag.OFFSET_OPS_CVM.unsafeMutableAddressor()))
      {
        __break(1u);
        goto LABEL_214;
      }
      char v50 = Data.subscript.getter();
      char v51 = *(unsigned char *)TLVTag.OPS_CVM_MASK.unsafeMutableAddressor();
      sub_100006628(v44, v46);
      char v272 = v51 & v50;
      BOOL v246 = (v51 & v50) == 32;
    }
    else
    {
      sub_10000BF70(v273, *((unint64_t *)&v273 + 1));
      BOOL v246 = 0;
      LODWORD(v258) = 0;
      long long v273 = v235;
    }
    *(void *)&long long v264 = v10;
    TLVTag.terminalCountryCode.unsafeMutableAddressor();
    uint64_t v52 = Collection<>.first(tag:)();
    if (v52)
    {
      unsigned int v53 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 224))(v52);
      swift_release();
      unsigned int v238 = v53;
      int v54 = HIWORD(v53) & 1;
    }
    else
    {
      unsigned int v238 = 0;
      int v54 = 1;
    }
    int v245 = v54;
    *(void *)&long long v264 = v10;
    TLVTag.terminalVerificationResults.unsafeMutableAddressor();
    uint64_t v55 = Collection<>.first(tag:)();
    if (v55)
    {
      uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 144))(v55);
      unint64_t v58 = v57;
      swift_release();
      uint64_t v59 = 0;
      switch(v58 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(v56), v56))
          {
            uint64_t v59 = HIDWORD(v56) - (int)v56;
            goto LABEL_54;
          }
          __break(1u);
          goto LABEL_222;
        case 2uLL:
          uint64_t v61 = *(void *)(v56 + 16);
          uint64_t v60 = *(void *)(v56 + 24);
          uint64_t v59 = v60 - v61;
          if (!__OFSUB__(v60, v61)) {
            goto LABEL_54;
          }
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
          goto LABEL_227;
        case 3uLL:
          goto LABEL_54;
        default:
          uint64_t v59 = BYTE6(v58);
LABEL_54:
          if (v59 != *(void *)TLVTag.TAG_95_LENGTH.unsafeMutableAddressor())
          {
            sub_100006628(v56, v58);
            goto LABEL_66;
          }
          unint64_t v243 = v16;
          uint64_t v252 = v8;
          swift_bridgeObjectRelease();
          Swift::String v62 = Data.hexString()();
          Swift::String v270 = v62;
          uint64_t v63 = 0;
          switch(v58 >> 62)
          {
            case 1uLL:
              uint64_t v63 = (int)v56;
              break;
            case 2uLL:
              uint64_t v63 = *(void *)(v56 + 16);
              break;
            default:
              break;
          }
          swift_bridgeObjectRetain();
          if (__OFADD__(v63, *(void *)TLVTag.OFFSET_BYTE_3.unsafeMutableAddressor()))
          {
            __break(1u);
          }
          else
          {
            LOBYTE(v264) = Data.subscript.getter();
            Swift::Int v64 = *(void *)TLVTag.TVR_CV_NOT_SUCCESSFUL_BIT.unsafeMutableAddressor();
            sub_10002C874();
            Swift::Bool v269 = UnsignedInteger.readBit(_:)(v64);
            if (qword_1001D9230 == -1) {
              goto LABEL_62;
            }
          }
          swift_once();
LABEL_62:
          uint64_t v65 = type metadata accessor for Logger();
          sub_100003E78(v65, (uint64_t)qword_1001DE068);
          swift_bridgeObjectRetain();
          uint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.default.getter();
          int v68 = v67;
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v69 = swift_slowAlloc();
            os_log_t v254 = v66;
            LODWORD(v257) = v68;
            uint64_t v70 = v69;
            *(void *)&long long v264 = swift_slowAlloc();
            *(_DWORD *)uint64_t v70 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v262 = sub_100005EB8(v62._countAndFlagsBits, (unint64_t)v62._object, (uint64_t *)&v264);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v70 + 12) = 1024;
            swift_beginAccess();
            LODWORD(v262) = v269;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            os_log_t v71 = v254;
            _os_log_impl((void *)&_mh_execute_header, v254, (os_log_type_t)v257, "95 TVR: %s, cvNotSuccessful: %{BOOL}d", (uint8_t *)v70, 0x12u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            sub_100006628(v56, v58);
          }
          else
          {
            swift_bridgeObjectRelease_n();
            sub_100006628(v56, v58);
          }
          uint64_t v8 = v252;
          unint64_t v16 = v243;
LABEL_66:
          unint64_t v10 = v234;
          break;
      }
    }
    *(void *)&long long v264 = v10;
    TLVTag.errorIndication.unsafeMutableAddressor();
    uint64_t v72 = Collection<>.first(tag:)();
    if (!v72)
    {
      int v237 = 0;
      int v244 = 0;
      uint64_t v253 = 0;
      os_log_t v254 = (os_log_t)0xF000000000000000;
LABEL_87:
      LODWORD(v257) = 1;
      goto LABEL_90;
    }
    uint64_t v253 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 144))(v72);
    char v74 = v73;
    swift_release();
    os_log_t v254 = v74;
    uint64_t v75 = 0;
    switch((unint64_t)v74 >> 62)
    {
      case 1uLL:
        uint64_t v76 = v253;
        if (__OFSUB__(HIDWORD(v253), v253)) {
          goto LABEL_223;
        }
        uint64_t v75 = HIDWORD(v253) - (int)v253;
        goto LABEL_74;
      case 2uLL:
        uint64_t v76 = v253;
        uint64_t v78 = *(void *)(v253 + 16);
        uint64_t v77 = *(void *)(v253 + 24);
        uint64_t v75 = v77 - v78;
        if (__OFSUB__(v77, v78)) {
          goto LABEL_224;
        }
LABEL_74:
        sub_1000065D0(v76, (unint64_t)v254);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v75 = BYTE6(v254);
        break;
    }
    if (v75 != *(void *)TLVTag.TAG_DF8115_LENGTH.unsafeMutableAddressor())
    {
      sub_100006628(v253, (unint64_t)v254);
      int v237 = 0;
      int v244 = 0;
      goto LABEL_87;
    }
    unint64_t v243 = v16;
    uint64_t v79 = v253;
    os_log_t v80 = v254;
    sub_1000065D0(v253, (unint64_t)v254);
    uint64_t v81 = sub_100115410(v79, (unint64_t)v80);
    unint64_t v83 = v82;
    TLVTag.OFFSET_ERROR_INDICATION_L2.unsafeMutableAddressor();
    int v244 = Data.subscript.getter();
    long long v84 = (uint64_t *)TLVTag.OFFSET_ERROR_INDICATION_SW12.unsafeMutableAddressor();
    uint64_t v85 = sub_1000E3544(*v84, v84[1], v81, v83);
    unint64_t v87 = v86;
    int v88 = Data.toUInt16(endianness:)(1, v85, v86);
    sub_100006628(v85, v87);
    TLVTag.OFFSET_ERROR_INDICATION_MSG_ON_ERROR.unsafeMutableAddressor();
    uint64_t v252 = v81;
    unint64_t v257 = v83;
    uint64_t v89 = Data._Representation.subscript.getter();
    unint64_t v91 = v90;
    Swift::UInt8 v92 = Data.toUInt8()();
    sub_100006628(v89, v91);
    HIBYTE(v268) = v92;
    int v237 = v88;
    BOOL v94 = (unsigned __int16)v88 == 27012 && v92 == 28;
    LOBYTE(v268) = v94;
    if (qword_1001D9230 != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    sub_100003E78(v95, (uint64_t)qword_1001DE068);
    sub_1000065D0(v79, (unint64_t)v80);
    sub_1000065D0(v79, (unint64_t)v80);
    uint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.default.getter();
    BOOL v98 = os_log_type_enabled(v96, v97);
    unint64_t v16 = v243;
    if (v98)
    {
      uint64_t v99 = swift_slowAlloc();
      uint64_t v242 = swift_slowAlloc();
      *(void *)&long long v264 = v242;
      *(_DWORD *)uint64_t v99 = 136315650;
      LODWORD(v240) = v94;
      Swift::String v100 = Data.hexString()();
      uint64_t v262 = sub_100005EB8(v100._countAndFlagsBits, (unint64_t)v100._object, (uint64_t *)&v264);
      os_log_t v239 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100006628(v79, (unint64_t)v80);
      sub_100006628(v79, (unint64_t)v80);
      *(_WORD *)(v99 + 12) = 2080;
      swift_beginAccess();
      uint64_t v101 = SPRTransactionMessage.description.getter();
      uint64_t v262 = sub_100005EB8(v101, v102, (uint64_t *)&v264);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v99 + 22) = 1024;
      LODWORD(v262) = v240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v103 = v239;
      _os_log_impl((void *)&_mh_execute_header, v239, v97, "DF8115 Error Indication: %s, Msg On Error: %s, switchInterfaceIndication: %{BOOL}d", (uint8_t *)v99, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100006628(v252, v257);

      sub_100006628(v79, (unint64_t)v80);
    }
    else
    {
      sub_100006628(v79, (unint64_t)v80);
      sub_100006628(v79, (unint64_t)v80);
      sub_100006628(v79, (unint64_t)v80);
      sub_100006628(v252, v257);
    }
    LODWORD(v257) = 0;
    Swift::String v7 = &qword_1001D9000;
    unint64_t v10 = v234;
LABEL_90:
    swift_beginAccess();
    if ((v268 & 1) != 0 || (swift_beginAccess(), v269))
    {
      if (qword_1001D9230 != -1) {
        swift_once();
      }
      uint64_t v104 = type metadata accessor for Logger();
      sub_100003E78(v104, (uint64_t)qword_1001DE068);
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "switchInterfaceOrNoCVMSuccess: true", v107, 2u);
        swift_slowDealloc();
      }

      *((void *)&v265 + 1) = &type metadata for Bool;
      LOBYTE(v264) = 1;
      sub_1001058E0((uint64_t)&v264, 0xD00000000000001DLL, 0x8000000100193F40);
    }
    *(void *)&long long v264 = v10;
    TLVTag.merchantCategoryCode.unsafeMutableAddressor();
    uint64_t v108 = Collection<>.first(tag:)();
    if (v108)
    {
      uint64_t v109 = (*(uint64_t (**)(void))(*(void *)v108 + 144))();
      unint64_t v111 = v110;
      swift_release();
    }
    else
    {
      uint64_t v109 = 0;
      unint64_t v111 = 0xF000000000000000;
    }
    sub_10000BF70(v267, *((unint64_t *)&v267 + 1));
    *(void *)&long long v267 = v109;
    *((void *)&v267 + 1) = v111;
    *(void *)&long long v264 = v10;
    TLVTag.languagePreference.unsafeMutableAddressor();
    uint64_t v112 = Collection<>.first(tag:)();
    if (v112)
    {
      uint64_t v113 = (*(uint64_t (**)(void))(*(void *)v112 + 144))();
      unint64_t v115 = v114;
      swift_release();
    }
    else
    {
      uint64_t v113 = 0;
      unint64_t v115 = 0xF000000000000000;
    }
    sub_10000BF70(v266, *((unint64_t *)&v266 + 1));
    *(void *)&long long v266 = v113;
    *((void *)&v266 + 1) = v115;
    *(void *)&long long v264 = v10;
    TLVTag.applicationInterchangeProfile.unsafeMutableAddressor();
    uint64_t v116 = Collection<>.first(tag:)();
    if (v116)
    {
      uint64_t v240 = (*(uint64_t (**)(uint64_t))(*(void *)v116 + 152))(v116);
      uint64_t v242 = v117;
      swift_release();
    }
    else
    {
      uint64_t v240 = 0;
      uint64_t v242 = 0;
    }
    *(void *)&long long v264 = v10;
    TLVTag.cardProcessingRequirement.unsafeMutableAddressor();
    uint64_t v118 = Collection<>.first(tag:)();
    if (v118)
    {
      os_log_t v239 = (os_log_t)(*(uint64_t (**)(uint64_t))(*(void *)v118 + 152))(v118);
      unint64_t v243 = v119;
      swift_release();
    }
    else
    {
      os_log_t v239 = 0;
      unint64_t v243 = 0;
    }
    *(void *)&long long v264 = v10;
    TLVTag.interacCardTransactionInformation.unsafeMutableAddressor();
    uint64_t v120 = Collection<>.first(tag:)();
    if (!v120) {
      goto LABEL_115;
    }
    uint64_t v121 = (*(uint64_t (**)(uint64_t))(*(void *)v120 + 144))(v120);
    unint64_t v10 = v122;
    swift_release();
    uint64_t v123 = 0;
    switch(v10 >> 62)
    {
      case 1uLL:
        uint64_t v123 = (int)v121;
        break;
      case 2uLL:
        uint64_t v123 = *(void *)(v121 + 16);
        break;
      default:
        break;
    }
    if (!__OFADD__(v123, *(void *)TLVTag.OFFSET_BYTE_2.unsafeMutableAddressor())) {
      break;
    }
LABEL_214:
    __break(1u);
LABEL_215:
    swift_once();
  }
  LOBYTE(v264) = Data.subscript.getter();
  sub_10002C874();
  Swift::Bool v124 = UnsignedInteger.readBit(_:)(0);
  sub_100006628(v121, v10);
  v255[133] = v124;
  unint64_t v10 = v234;
LABEL_115:
  *(void *)&long long v264 = v10;
  TLVTag.aidOverridePerformed.unsafeMutableAddressor();
  uint64_t v125 = Collection<>.first(tag:)();
  if (v125)
  {
    __int16 v126 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 216))(v125);
    swift_release();
    if ((v126 & 0x100) == 0) {
      v255[129] = v126 != 0;
    }
  }
  *(void *)&long long v264 = v10;
  TLVTag.cvmResults.unsafeMutableAddressor();
  uint64_t v127 = Collection<>.first(tag:)();
  if (v127)
  {
    uint64_t v128 = (*(uint64_t (**)(uint64_t))(*(void *)v127 + 144))(v127);
    unint64_t v130 = v129;
    swift_release();
    sub_10000BF70(v271, *((unint64_t *)&v271 + 1));
    *(void *)&long long v271 = v128;
    *((void *)&v271 + 1) = v130;
    unint64_t v131 = v130 >> 62;
    uint64_t v132 = 0;
    switch(v130 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v128), v128)) {
          goto LABEL_225;
        }
        uint64_t v132 = HIDWORD(v128) - (int)v128;
        goto LABEL_125;
      case 2uLL:
        uint64_t v134 = *(void *)(v128 + 16);
        uint64_t v133 = *(void *)(v128 + 24);
        uint64_t v132 = v133 - v134;
        if (__OFSUB__(v133, v134)) {
          goto LABEL_226;
        }
LABEL_125:
        sub_1000065D0(v128, v130);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v132 = BYTE6(v130);
        break;
    }
    if (v132 == *(void *)TLVTag.TAG_9F34_LENGTH.unsafeMutableAddressor())
    {
      uint64_t v135 = 0;
      switch((int)v131)
      {
        case 1:
          uint64_t v135 = (int)v128;
          break;
        case 2:
          uint64_t v135 = *(void *)(v128 + 16);
          break;
        default:
          break;
      }
      if (__OFADD__(v135, *(void *)TLVTag.OFFSET_CVM_RESULTS_CVM_PERFORMED.unsafeMutableAddressor()))
      {
        __break(1u);
      }
      else
      {
        LODWORD(v235) = Data.subscript.getter();
        uint64_t v135 = 0;
        int v233 = *(unsigned __int8 *)TLVTag.CVM_RESULTS_NO_CVM_PERFORMED.unsafeMutableAddressor();
        switch((int)v131)
        {
          case 1:
            uint64_t v135 = (int)v128;
            break;
          case 2:
            uint64_t v135 = *(void *)(v128 + 16);
            break;
          default:
            break;
        }
        if (!__OFADD__(v135, *(void *)TLVTag.OFFSET_CVM_RESULTS_CVM_RESULTS.unsafeMutableAddressor()))
        {
          int v232 = Data.subscript.getter();
          LODWORD(v135) = *(unsigned __int8 *)TLVTag.CVM_RESULTS_CVM_SUCCESSFUL.unsafeMutableAddressor();
          if (qword_1001D9230 == -1) {
            goto LABEL_137;
          }
          goto LABEL_220;
        }
      }
      __break(1u);
LABEL_220:
      swift_once();
LABEL_137:
      uint64_t v136 = type metadata accessor for Logger();
      sub_100003E78(v136, (uint64_t)qword_1001DE068);
      sub_1000065D0(v128, v130);
      sub_1000065D0(v128, v130);
      uint64_t v137 = Logger.logObject.getter();
      os_log_type_t v138 = static os_log_type_t.default.getter();
      int v139 = v138;
      if (os_log_type_enabled(v137, v138))
      {
        int v231 = v139;
        BOOL v229 = v135 == v232;
        uint64_t v252 = v8;
        BOOL v140 = v233 != v235;
        uint64_t v141 = swift_slowAlloc();
        uint64_t v230 = swift_slowAlloc();
        *(void *)&long long v264 = v230;
        *(_DWORD *)uint64_t v141 = 136315650;
        Swift::String v142 = Data.hexString()();
        os_log_t v228 = v137;
        uint64_t v262 = sub_100005EB8(v142._countAndFlagsBits, (unint64_t)v142._object, (uint64_t *)&v264);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100006628(v128, v130);
        sub_100006628(v128, v130);
        *(_WORD *)(v141 + 12) = 1024;
        LODWORD(v262) = v140;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v141 + 18) = 1024;
        LODWORD(v262) = v229;
        unsigned __int8 v143 = v235;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v144 = v228;
        _os_log_impl((void *)&_mh_execute_header, v228, (os_log_type_t)v231, "9F34 CVM Results: %s, isCVMPerformed: %{BOOL}d, isCVMSuccess: %{BOOL}d", (uint8_t *)v141, 0x18u);
        swift_arrayDestroy();
        uint64_t v8 = v252;
        swift_slowDealloc();
        unint64_t v10 = v234;
        swift_slowDealloc();

        sub_100006628(v128, v130);
      }
      else
      {
        sub_100006628(v128, v130);
        sub_100006628(v128, v130);
        sub_100006628(v128, v130);

        unsigned __int8 v143 = v235;
      }
      BOOL v145 = v135 == v232;
      id v146 = v255;
      v255[131] = v233 != v143;
      v146[132] = v145;
    }
    else
    {
      sub_100006628(v128, v130);
    }
  }
  else
  {
    sub_10000BF70(v271, *((unint64_t *)&v271 + 1));
    long long v271 = v235;
  }
  *(void *)&long long v264 = v10;
  TLVTag.cardState.unsafeMutableAddressor();
  uint64_t v147 = Collection<>.first(tag:)();
  uint64_t v148 = swift_bridgeObjectRelease();
  if (!v147
    || (__int16 v149 = (*(uint64_t (**)(uint64_t))(*(void *)v147 + 216))(v148), swift_release(),
                                                                                     (v149 & 0x100) != 0))
  {
    char v151 = 0;
    char v150 = 0;
  }
  else
  {
    char v150 = *(unsigned char *)TLVTag.CARD_STATE_EXPIRATION_MASK.unsafeMutableAddressor() & v149;
    char v151 = *(unsigned char *)TLVTag.CARD_STATE_EFFECTIVE_MASK.unsafeMutableAddressor() & v149;
  }
  if (v8)
  {
    int v9 = 0;
    *((void *)&v265 + 1) = &type metadata for String;
    *(void *)&long long v264 = v250;
    *((void *)&v264 + 1) = v8;
  }
  else
  {
    uint64_t v8 = 0;
    long long v264 = 0u;
    long long v265 = 0u;
    int v9 = 1;
  }
  uint64_t v252 = v8;
  swift_bridgeObjectRetain();
  sub_1001058E0((uint64_t)&v264, 0x6B726F7774656ELL, 0xE700000000000000);
  if (v16)
  {
    *((void *)&v265 + 1) = &type metadata for String;
    *(void *)&long long v264 = v251;
    *((void *)&v264 + 1) = v16;
    unint64_t v152 = v16;
  }
  else
  {
    long long v264 = 0u;
    long long v265 = 0u;
    unint64_t v152 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  sub_1001058E0((uint64_t)&v264, 0x656D614E707061, 0xE700000000000000);
  LODWORD(v256) = v9;
  if (*((void *)&v273 + 1) >> 60 == 15)
  {
    long long v264 = 0u;
    long long v265 = 0u;
  }
  else
  {
    *((void *)&v265 + 1) = &type metadata for Data;
    long long v264 = v273;
  }
  sub_100038D8C(v273, *((unint64_t *)&v273 + 1));
  sub_1001058E0((uint64_t)&v264, 0xD000000000000013, 0x8000000100192E30);
  type metadata accessor for SPRTransactionOutcomeStatus(0);
  *((void *)&v265 + 1) = v153;
  LOBYTE(v264) = (_BYTE)v258;
  sub_1001058E0((uint64_t)&v264, 0x53656D6F6374756FLL, 0xED00007375746174);
  char v154 = v272;
  type metadata accessor for SPRTransactionCVMType(0);
  *((void *)&v265 + 1) = v155;
  LOBYTE(v264) = v154;
  sub_1001058E0((uint64_t)&v264, 0x657079546D7663, 0xE700000000000000);
  if (*((void *)&v271 + 1) >> 60 == 15)
  {
    long long v264 = 0u;
    long long v265 = 0u;
  }
  else
  {
    *((void *)&v265 + 1) = &type metadata for Data;
    long long v264 = v271;
  }
  sub_100038D8C(v271, *((unint64_t *)&v271 + 1));
  sub_1001058E0((uint64_t)&v264, 0x6C757365526D7663, 0xE900000000000074);
  *((void *)&v265 + 1) = &type metadata for Bool;
  LOBYTE(v264) = v246;
  sub_1001058E0((uint64_t)&v264, 0x69757165526E6970, 0xEB00000000646572);
  if (*((void *)&v267 + 1) >> 60 == 15)
  {
    long long v264 = 0u;
    long long v265 = 0u;
  }
  else
  {
    *((void *)&v265 + 1) = &type metadata for Data;
    long long v264 = v267;
  }
  sub_100038D8C(v267, *((unint64_t *)&v267 + 1));
  sub_1001058E0((uint64_t)&v264, 0xD000000000000014, 0x8000000100193E80);
  if (*((void *)&v266 + 1) >> 60 == 15)
  {
    long long v264 = 0u;
    long long v265 = 0u;
  }
  else
  {
    *((void *)&v265 + 1) = &type metadata for Data;
    long long v264 = v266;
  }
  sub_100038D8C(v266, *((unint64_t *)&v266 + 1));
  sub_1001058E0((uint64_t)&v264, 0xD000000000000012, 0x8000000100193EC0);
  if (v257)
  {
    long long v264 = 0u;
    long long v265 = 0u;
  }
  else
  {
    *((void *)&v265 + 1) = &type metadata for UInt16;
    LOWORD(v264) = v237;
  }
  sub_1001058E0((uint64_t)&v264, 0xD000000000000019, 0x8000000100193E40);
  swift_beginAccess();
  char v156 = HIBYTE(v268);
  type metadata accessor for SPRTransactionMessage(0);
  *((void *)&v265 + 1) = v157;
  LOBYTE(v264) = v156;
  sub_1001058E0((uint64_t)&v264, 0xD000000000000019, 0x8000000100193E60);
  type metadata accessor for SPRCardExpirationState(0);
  *((void *)&v265 + 1) = v158;
  LOBYTE(v264) = v150;
  sub_1001058E0((uint64_t)&v264, 0xD000000000000013, 0x8000000100193F60);
  type metadata accessor for SPRCardEffectiveState(0);
  *((void *)&v265 + 1) = v159;
  LOBYTE(v264) = v151;
  sub_1001058E0((uint64_t)&v264, 0xD000000000000012, 0x8000000100193F80);
  if (qword_1001D9230 != -1) {
    swift_once();
  }
  uint64_t v160 = type metadata accessor for Logger();
  sub_100003E78(v160, (uint64_t)qword_1001DE068);
  swift_bridgeObjectRetain();
  uint64_t v161 = Logger.logObject.getter();
  os_log_type_t v162 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v161, v162))
  {
    uint64_t v163 = swift_slowAlloc();
    uint64_t v164 = swift_slowAlloc();
    *(void *)&long long v264 = v164;
    *(_DWORD *)uint64_t v163 = 136447746;
    if (v16) {
      uint64_t v165 = v251;
    }
    else {
      uint64_t v165 = 0;
    }
    swift_bridgeObjectRetain();
    uint64_t v261 = sub_100005EB8(v165, v152, (uint64_t *)&v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v163 + 12) = 2082;
    swift_beginAccess();
    unint64_t v166 = *((void *)&v273 + 1);
    uint64_t v259 = v164;
    if (*((void *)&v273 + 1) >> 60 == 15)
    {
      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v171 = v273;
      sub_1000065D0(v273, *((unint64_t *)&v273 + 1));
      Swift::String v172 = Data.hexString()();
      uint64_t countAndFlagsBits = v172._countAndFlagsBits;
      object = v172._object;
      sub_10000BF70(v171, v166);
    }
    uint64_t v261 = sub_100005EB8(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v163 + 22) = 2082;
    swift_beginAccess();
    unint64_t v173 = *((void *)&v271 + 1);
    if (*((void *)&v271 + 1) >> 60 == 15)
    {
      uint64_t v174 = 0;
      uint64_t v175 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v176 = v271;
      sub_1000065D0(v271, *((unint64_t *)&v271 + 1));
      Swift::String v177 = Data.hexString()();
      uint64_t v174 = v177._countAndFlagsBits;
      uint64_t v175 = v177._object;
      sub_10000BF70(v176, v173);
    }
    uint64_t v261 = sub_100005EB8(v174, (unint64_t)v175, (uint64_t *)&v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v163 + 32) = 2082;
    swift_beginAccess();
    uint64_t v178 = SPRTransactionCVMType.description.getter();
    uint64_t v261 = sub_100005EB8(v178, v179, (uint64_t *)&v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v163 + 42) = 2082;
    swift_beginAccess();
    unint64_t v180 = *((void *)&v266 + 1);
    if (*((void *)&v266 + 1) >> 60 == 15)
    {
      uint64_t v181 = 0;
      uint64_t v182 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v183 = v266;
      sub_1000065D0(v266, *((unint64_t *)&v266 + 1));
      Swift::String v184 = Data.hexString()();
      uint64_t v181 = v184._countAndFlagsBits;
      uint64_t v182 = v184._object;
      sub_10000BF70(v183, v180);
    }
    uint64_t v169 = v252;
    uint64_t v261 = sub_100005EB8(v181, (unint64_t)v182, (uint64_t *)&v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v163 + 52) = 2082;
    swift_beginAccess();
    unint64_t v185 = *((void *)&v267 + 1);
    if (*((void *)&v267 + 1) >> 60 == 15)
    {
      uint64_t v186 = 0;
      uint64_t v187 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v188 = v267;
      sub_1000065D0(v267, *((unint64_t *)&v267 + 1));
      Swift::String v189 = Data.hexString()();
      uint64_t v186 = v189._countAndFlagsBits;
      uint64_t v187 = v189._object;
      sub_10000BF70(v188, v185);
    }
    char v170 = v245;
    uint64_t v261 = sub_100005EB8(v186, (unint64_t)v187, (uint64_t *)&v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v163 + 62) = 2082;
    uint64_t v190 = SPRTransactionMessage.description.getter();
    uint64_t v261 = sub_100005EB8(v190, v191, (uint64_t *)&v264);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v161, v162, "Transaction Results: appName: %{public}s, outcomeParameterSet: %{public}s, cvmResult: %{public}s, cvmType: %{public}s, langPreference: %{public}s, MCC: %{public}s, errorIndicationMsgOnError: %{public}s,", (uint8_t *)v163, 0x48u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v169 = v252;
    char v170 = v245;
  }
  uint64_t v192 = v242;
  char v193 = v256;
  sub_100003EB0((uint64_t *)&unk_1001DD390);
  uint64_t v194 = swift_allocObject();
  uint64_t v195 = v194;
  *(_OWORD *)(v194 + 16) = xmmword_10018CD20;
  *(unsigned char *)(v194 + 32) = 10;
  uint64_t v196 = v253;
  if (v193)
  {
    uint64_t v197 = 0;
    uint64_t v169 = 0;
    uint64_t v198 = 0;
    *(void *)(v194 + 56) = 0;
  }
  else
  {
    uint64_t v198 = &type metadata for String;
    uint64_t v197 = v250;
  }
  *(void *)(v194 + 40) = v197;
  *(void *)(v194 + 48) = v169;
  *(void *)(v194 + 64) = v198;
  *(unsigned char *)(v194 + 72) = 11;
  if (v248)
  {
    long long v199 = &type metadata for String;
    uint64_t v200 = v260;
    uint64_t v201 = v248;
  }
  else
  {
    uint64_t v200 = 0;
    uint64_t v201 = 0;
    long long v199 = 0;
    *(void *)(v194 + 96) = 0;
  }
  uint64_t v202 = v247;
  *(void *)(v194 + 80) = v200;
  *(void *)(v194 + 88) = v201;
  *(void *)(v194 + 104) = v199;
  *(unsigned char *)(v194 + 112) = 12;
  if (v202)
  {
    long long v203 = &type metadata for String;
    uint64_t v204 = v241;
  }
  else
  {
    uint64_t v204 = 0;
    long long v203 = 0;
    *(void *)(v194 + 136) = 0;
  }
  *(void *)(v194 + 120) = v204;
  *(void *)(v194 + 128) = v202;
  *(void *)(v194 + 144) = v203;
  uint64_t v205 = (void *)(v194 + 160);
  *(unsigned char *)(v194 + 152) = 13;
  if (v170)
  {
    uint64_t v206 = 0;
    *uint64_t v205 = 0;
    *(void *)(v194 + 168) = 0;
    *(void *)(v194 + 176) = 0;
  }
  else
  {
    *(_WORD *)uint64_t v205 = v238;
    uint64_t v206 = &type metadata for UInt16;
  }
  *(void *)(v194 + 184) = v206;
  *(unsigned char *)(v194 + 192) = 14;
  swift_beginAccess();
  os_log_t v207 = v270._object;
  unint64_t v208 = (unint64_t)v254;
  if (v270._object)
  {
    uint64_t v209 = v270._countAndFlagsBits;
    uint64_t v210 = &type metadata for String;
  }
  else
  {
    uint64_t v209 = 0;
    uint64_t v210 = 0;
    *(void *)(v195 + 216) = 0;
  }
  *(void *)(v195 + 200) = v209;
  *(void *)(v195 + 208) = v207;
  *(void *)(v195 + 224) = v210;
  *(unsigned char *)(v195 + 232) = 15;
  if (v208 >> 60 == 15)
  {
    *(void *)(v195 + 248) = 0;
    *(void *)(v195 + 256) = 0;
    swift_bridgeObjectRetain();
    unint64_t v211 = 0;
    v212 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_100038D8C(v196, v208);
    unint64_t v211 = Data.toUInt64(endianness:)(1, v196, v208);
    sub_10000BF70(v196, v208);
    v212 = &type metadata for UInt64;
  }
  *(void *)(v195 + 240) = v211;
  *(void *)(v195 + 264) = v212;
  *(unsigned char *)(v195 + 272) = 16;
  swift_beginAccess();
  unint64_t v213 = *((void *)&v273 + 1);
  if (*((void *)&v273 + 1) >> 60 == 15)
  {
    unint64_t v214 = 0;
    os_log_type_t v215 = 0;
    *(void *)(v195 + 288) = 0;
    *(void *)(v195 + 296) = 0;
  }
  else
  {
    uint64_t v216 = v273;
    sub_1000065D0(v273, *((unint64_t *)&v273 + 1));
    unint64_t v214 = Data.toUInt64(endianness:)(1, v216, v213);
    sub_10000BF70(v216, v213);
    os_log_type_t v215 = &type metadata for UInt64;
  }
  *(void *)(v195 + 280) = v214;
  *(void *)(v195 + 304) = v215;
  *(unsigned char *)(v195 + 312) = 21;
  if (v192)
  {
    uint64_t v217 = &type metadata for String;
    uint64_t v218 = v240;
  }
  else
  {
    uint64_t v218 = 0;
    uint64_t v217 = 0;
    *(void *)(v195 + 336) = 0;
  }
  unint64_t v219 = v243;
  *(void *)(v195 + 320) = v218;
  *(void *)(v195 + 328) = v192;
  *(void *)(v195 + 344) = v217;
  *(unsigned char *)(v195 + 352) = 22;
  if (v219)
  {
    unint64_t v220 = &type metadata for String;
    os_log_t v221 = v239;
  }
  else
  {
    os_log_t v221 = 0;
    unint64_t v220 = 0;
    *(void *)(v195 + 376) = 0;
  }
  *(void *)(v195 + 360) = v221;
  *(void *)(v195 + 368) = v219;
  *(void *)(v195 + 384) = v220;
  unint64_t v222 = sub_1001052FC(v195);
  *(&v228 - 2) = (os_log_t)__chkstk_darwin(v222, v223);
  unint64_t v225 = (uint64_t *)&v224[4];
  unint64_t v226 = v224 + 8;
  os_unfair_lock_lock(v224 + 8);
  sub_10005A488(v225);
  os_unfair_lock_unlock(v226);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_beginAccess();
  sub_10000BF70(v266, *((unint64_t *)&v266 + 1));
  sub_10000BF70(v267, *((unint64_t *)&v267 + 1));
  sub_10000BF70(v196, v208);
  sub_10000BF70(v271, *((unint64_t *)&v271 + 1));
  sub_10000BF70(v273, *((unint64_t *)&v273 + 1));
  return (v244 << 8) | (v257 << 16) | v258;
}

unint64_t sub_1000E6DE8()
{
  unint64_t result = qword_1001DA550;
  if (!qword_1001DA550)
  {
    sub_100003EF4((uint64_t *)&unk_1001DF8B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA550);
  }
  return result;
}

uint64_t sub_1000E6E44(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_100006628(a2, a3);
  }
  return result;
}

uint64_t sub_1000E6E60()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E0FC8);
  sub_100003E78(v0, (uint64_t)qword_1001E0FC8);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E6F24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E0FE0);
  sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E6FF4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E0FF8);
  sub_100003E78(v0, (uint64_t)qword_1001E0FF8);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E70C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E1010);
  sub_100003E78(v0, (uint64_t)qword_1001E1010);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E718C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E1028);
  sub_100003E78(v0, (uint64_t)qword_1001E1028);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E7250()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E1040);
  sub_100003E78(v0, (uint64_t)qword_1001E1040);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E7324()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E1058);
  sub_100003E78(v0, (uint64_t)qword_1001E1058);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E73EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E1070);
  sub_100003E78(v0, (uint64_t)qword_1001E1070);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E74C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E1088);
  sub_100003E78(v0, (uint64_t)qword_1001E1088);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E758C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E10A0);
  sub_100003E78(v0, (uint64_t)qword_1001E10A0);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000E7660()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, static SPRLogger.xpcServer);
  sub_100003E78(v0, (uint64_t)static SPRLogger.xpcServer);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

uint64_t SPRLogger.xpcServer.unsafeMutableAddressor()
{
  if (qword_1001D9288 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100003E78(v0, (uint64_t)static SPRLogger.xpcServer);
}

uint64_t static SPRLogger.xpcServer.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1001D9288 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = sub_100003E78(v2, (uint64_t)static SPRLogger.xpcServer);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

ValueMetadata *type metadata accessor for SPRLogger()
{
  return &type metadata for SPRLogger;
}

uint64_t sub_1000E7848()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001E10D0);
  sub_100003E78(v0, (uint64_t)qword_1001E10D0);
  id v1 = [self current];
  id v2 = [v1 bundleIdentifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  return Logger.init(subsystem:category:)();
}

int64_t sub_1000E7914()
{
  uint64_t v1 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v3 = type metadata accessor for CocoaError();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  Swift::String v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t result = NSFileHandle.read(upToCount:)();
  if (!v0)
  {
    unint64_t v10 = v9;
    unint64_t v11 = v9 >> 60;
    if (v9 >> 60 == 15)
    {
      uint64_t v12 = 0;
LABEL_22:
      BOOL v30 = v11 > 0xE;
      return v12 | ((unint64_t)(v11 > 0xE) << 32);
    }
    unint64_t v13 = v9 >> 62;
    uint64_t v14 = result;
    switch(v9 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(result) - result;
        if (__OFSUB__(HIDWORD(result), result))
        {
          __break(1u);
LABEL_25:
          __break(1u);
        }
        else
        {
          uint64_t v15 = (int)v15;
LABEL_9:
          if (v15 != 4)
          {
LABEL_16:
            static CocoaError.Code.fileReadCorruptFile.getter();
            sub_1000E9D34((uint64_t)_swiftEmptyArrayStorage);
            sub_1000EA450((unint64_t *)&qword_1001DE298, (void (*)(uint64_t))&type metadata accessor for CocoaError);
            _BridgedStoredNSError.init(_:userInfo:)();
            CocoaError._nsError.getter();
            (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
            swift_willThrow();
            return sub_10000BF70(v14, v10);
          }
          if (!v13)
          {
            unsigned int v23 = result;
            goto LABEL_21;
          }
          if (v13 != 1)
          {
            uint64_t v24 = *(void *)(result + 16);
            swift_retain();
            swift_retain();
            uint64_t v25 = __DataStorage._bytes.getter();
            if (!v25)
            {
LABEL_30:
              __DataStorage._length.getter();
              __break(1u);
              JUMPOUT(0x1000E7C38);
            }
            uint64_t v26 = v25;
            uint64_t v27 = __DataStorage._offset.getter();
            BOOL v18 = __OFSUB__(v24, v27);
            uint64_t v28 = v24 - v27;
            if (!v18)
            {
              __DataStorage._length.getter();
              unsigned int v23 = *(_DWORD *)(v26 + v28);
              swift_release();
              swift_release();
              goto LABEL_21;
            }
            goto LABEL_27;
          }
          if ((int)result <= result >> 32)
          {
            sub_1000065D0(result, v9);
            uint64_t v19 = __DataStorage._bytes.getter();
            if (!v19)
            {
LABEL_29:
              __DataStorage._length.getter();
              __break(1u);
              goto LABEL_30;
            }
            uint64_t v20 = v19;
            uint64_t v21 = __DataStorage._offset.getter();
            uint64_t v22 = (int)v14 - v21;
            if (!__OFSUB__((int)v14, v21))
            {
              __DataStorage._length.getter();
              unsigned int v23 = *(_DWORD *)(v20 + v22);
              sub_10000BF70(v14, v10);
LABEL_21:
              sub_10000BF70(v14, v10);
              uint64_t v12 = bswap32(v23);
              goto LABEL_22;
            }
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      case 2uLL:
        uint64_t v17 = *(void *)(result + 16);
        uint64_t v16 = *(void *)(result + 24);
        BOOL v18 = __OFSUB__(v16, v17);
        uint64_t v15 = v16 - v17;
        if (!v18) {
          goto LABEL_9;
        }
        goto LABEL_25;
      case 3uLL:
        goto LABEL_16;
      default:
        uint64_t v15 = BYTE6(v9);
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1000E7C48()
{
  uint64_t v1 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v3 = type metadata accessor for CocoaError();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  Swift::String v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = NSFileHandle.read(upToCount:)();
  if (!v0)
  {
    unint64_t v10 = v9;
    if (v9 >> 60 == 15) {
      return 0;
    }
    unint64_t v11 = v9 >> 62;
    uint64_t v12 = result;
    switch(v9 >> 62)
    {
      case 1uLL:
        LODWORD(v13) = HIDWORD(result) - result;
        if (__OFSUB__(HIDWORD(result), result))
        {
          __break(1u);
LABEL_23:
          __break(1u);
        }
        else
        {
          uint64_t v13 = (int)v13;
LABEL_9:
          if (v13 != 8)
          {
LABEL_16:
            static CocoaError.Code.fileReadCorruptFile.getter();
            sub_1000E9D34((uint64_t)_swiftEmptyArrayStorage);
            sub_1000EA450((unint64_t *)&qword_1001DE298, (void (*)(uint64_t))&type metadata accessor for CocoaError);
            _BridgedStoredNSError.init(_:userInfo:)();
            CocoaError._nsError.getter();
            (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
            swift_willThrow();
            return sub_10000BF70(v12, v10);
          }
          unint64_t v17 = result;
          if (!v11) {
            goto LABEL_20;
          }
          if (v11 != 1)
          {
            uint64_t v22 = *(void *)(result + 16);
            swift_retain();
            swift_retain();
            uint64_t v23 = __DataStorage._bytes.getter();
            if (!v23)
            {
LABEL_28:
              __DataStorage._length.getter();
              __break(1u);
              JUMPOUT(0x1000E7F5CLL);
            }
            uint64_t v24 = v23;
            uint64_t v25 = __DataStorage._offset.getter();
            BOOL v16 = __OFSUB__(v22, v25);
            uint64_t v26 = v22 - v25;
            if (!v16)
            {
              __DataStorage._length.getter();
              unint64_t v17 = *(void *)(v24 + v26);
              swift_release();
              swift_release();
              goto LABEL_20;
            }
            goto LABEL_25;
          }
          if ((int)result <= result >> 32)
          {
            sub_1000065D0(result, v9);
            uint64_t v18 = __DataStorage._bytes.getter();
            if (!v18)
            {
LABEL_27:
              __DataStorage._length.getter();
              __break(1u);
              goto LABEL_28;
            }
            uint64_t v19 = v18;
            uint64_t v20 = __DataStorage._offset.getter();
            uint64_t v21 = (int)v12 - v20;
            if (!__OFSUB__((int)v12, v20))
            {
              __DataStorage._length.getter();
              unint64_t v17 = *(void *)(v19 + v21);
              sub_10000BF70(v12, v10);
LABEL_20:
              sub_10000BF70(v12, v10);
              return bswap64(v17);
            }
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      case 2uLL:
        uint64_t v15 = *(void *)(result + 16);
        uint64_t v14 = *(void *)(result + 24);
        BOOL v16 = __OFSUB__(v14, v15);
        uint64_t v13 = v14 - v15;
        if (!v16) {
          goto LABEL_9;
        }
        goto LABEL_23;
      case 3uLL:
        goto LABEL_16;
      default:
        uint64_t v13 = BYTE6(v9);
        goto LABEL_9;
    }
  }
  return result;
}

void sub_1000E7F6C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];
  sub_100006788(v0 + 8, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
  Date.timeIntervalSince1970.getter();
  double v9 = v8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v11 = v0[11];
  uint64_t v10 = v0[12];
  sub_100006788(v0 + 8, v11);
  double v12 = (v9 - (*(double (**)(uint64_t, uint64_t))(v10 + 24))(v11, v10)) * 1000000.0;
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v12 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v12 >= 1.84467441e19) {
LABEL_7:
  }
    __break(1u);
}

uint64_t sub_1000E8104()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DE140);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE140);
  if (qword_1001D9250 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1010);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000E81CC(uint64_t a1, int a2, void *a3)
{
  uint64_t v66 = a3;
  int v62 = a2;
  uint64_t v6 = type metadata accessor for CocoaError.Code();
  uint64_t v63 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  double v9 = &v61[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = &v61[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v67 = v3;
  uint64_t v15 = v3 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileUrl;
  uint64_t v69 = v11;
  BOOL v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v65 = a1;
  v16(v15, a1, v10);
  sub_1000DF118();
  uint64_t v64 = v15;
  uint64_t v68 = v10;
  v16((uint64_t)v14, v15, v10);
  id v17 = sub_1000E8B3C((uint64_t)v14);
  if (v4)
  {
    swift_errorRetain();
    static CocoaError.fileNoSuchFile.getter();
    sub_1000EA450(&qword_1001DCDD8, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    char v18 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v9, v6);
    if (v18)
    {
      swift_errorRelease();
      uint64_t v19 = v68;
      if (qword_1001D9298 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100003E78(v20, (uint64_t)qword_1001DE140);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      BOOL v23 = os_log_type_enabled(v21, v22);
      uint64_t v25 = v66;
      uint64_t v24 = v67;
      uint64_t v26 = v65;
      if (v23)
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "No existing Monitor Store file", v27, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      if (qword_1001D9298 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100003E78(v28, (uint64_t)qword_1001DE140);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        Swift::String v31 = (uint8_t *)swift_slowAlloc();
        uint64_t v32 = (void *)swift_slowAlloc();
        *(_DWORD *)Swift::String v31 = 138412290;
        swift_errorRetain();
        uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v71 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v32 = v33;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error reading existing Monitor Store: %@", v31, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v25 = v66;
      uint64_t v24 = v67;
      uint64_t v26 = v65;
      uint64_t v19 = v68;
    }
    goto LABEL_28;
  }
  os_log_type_t v34 = v17;
  if ((v62 & 1) == 0 || (int64_t v35 = sub_1000E7914(), v36 = v35, (v35 & 0x100000000) != 0))
  {
    uint64_t v25 = v66;
    uint64_t v24 = v67;
    uint64_t v26 = v65;
    uint64_t v19 = v68;
    if (qword_1001D9298 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100003E78(v43, (uint64_t)qword_1001DE140);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v44, v45)) {
      goto LABEL_27;
    }
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    int v47 = "Missing Monitor Store version";
  }
  else
  {
    if (v35 != 2)
    {
      if (qword_1001D9298 != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      sub_100003E78(v55, (uint64_t)qword_1001DE140);
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      uint64_t v19 = v68;
      if (v58)
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 67109120;
        int v70 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unsupported Monitor Store version: %u", v59, 8u);
        swift_slowDealloc();
      }

      uint64_t v25 = v66;
      uint64_t v24 = v67;
      uint64_t v26 = v65;
      goto LABEL_28;
    }
    uint64_t v37 = sub_1000E7C48();
    if (v38 & 1) != 0 || (uint64_t v39 = v37, v40 = sub_1000E7C48(), (v41))
    {
      uint64_t v25 = v66;
      uint64_t v24 = v67;
      uint64_t v26 = v65;
      uint64_t v19 = v68;
    }
    else
    {
      unint64_t v42 = v40;
      uint64_t v25 = v66;
      uint64_t v24 = v67;
      uint64_t v26 = v65;
      uint64_t v19 = v68;
      if (v40 >= 0x14)
      {
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v65, v68);
        *(void *)(v24 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_timeBase) = v39;
        *(void *)(v24 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) = v42;
        *(void *)(v24 + 16) = v34;
        goto LABEL_33;
      }
    }
    if (qword_1001D9298 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_100003E78(v60, (uint64_t)qword_1001DE140);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v44, v45)) {
      goto LABEL_27;
    }
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    int v47 = "Invalid or missing Monitor Store header";
  }
  _os_log_impl((void *)&_mh_execute_header, v44, v45, v47, v46, 2u);
  swift_slowDealloc();
LABEL_27:

LABEL_28:
  uint64_t v48 = v64;
  sub_100006788(v25, v25[3]);
  sub_1000E7F6C();
  *(void *)(v24 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_timeBase) = v49;
  *(void *)(v24 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) = 20;
  *(void *)(v24 + 16) = sub_1000EA020(v48, v49, 0x14uLL);
  if (qword_1001D9298 != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  sub_100003E78(v50, (uint64_t)qword_1001DE140);
  char v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    unsigned int v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Created empty Monitor Store V2", v53, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v26, v19);
LABEL_33:
  sub_100006520((uint64_t)v25);
  return v24;
}

id sub_1000E8B3C(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() fileHandleForUpdatingURL:v2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_1000E8C94(unint64_t *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (((*(uint64_t (**)(unint64_t *))(*a1 + 136))(a1) & 0x8000000000000000) == 0)
  {
    uint64_t v6 = *(void **)(v4 + 16);
    uint64_t v7 = OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize;
    uint64_t v8 = *(void *)(v4 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize);
    uint64_t v32 = 0;
    unsigned int v9 = [v6 seekToOffset:v8 error:&v32];
    uint64_t v10 = v32;
    if (v9)
    {
      uint64_t v11 = *(void **)(v4 + 16);
      unint64_t v12 = sub_1000DF118();
      uint64_t v13 = v10;
      id v14 = v11;
      DERWriter.writeDER(tlv:)(a1, v12, (uint64_t)&protocol witness table for NSFileHandle);
      if (v2)
      {

LABEL_7:
        uint64_t v32 = 0;
        uint64_t v33 = (id *)0xE000000000000000;
        _StringGuts.grow(_:)(24);
        v16._object = (void *)0x8000000100199A80;
        v16._uint64_t countAndFlagsBits = 0xD000000000000016;
        String.append(_:)(v16);
        unint64_t v31 = v3;
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        _print_unlocked<A, B>(_:_:)();
        id v17 = v32;
        char v18 = v33;
        sub_10006AB38();
        swift_allocError();
        *(void *)uint64_t v19 = v17;
        *(void *)(v19 + 8) = v18;
        *(unsigned char *)(v19 + 16) = 1;
        swift_willThrow();
        swift_errorRelease();
        return;
      }

      id v20 = *(id *)(v4 + 16);
      Swift::UInt64 v21 = NSFileHandle.offset()();
      uint64_t v3 = v22;
      if (v22)
      {

        goto LABEL_7;
      }
      unint64_t v23 = v21;

      uint64_t v24 = *(void **)(v4 + 16);
      uint64_t v32 = 0;
      unsigned int v25 = [v24 seekToOffset:12 error:&v32];
      uint64_t v26 = v32;
      if (v25)
      {
        uint64_t v27 = *(void **)(v4 + 16);
        unint64_t v31 = bswap64(v23);
        uint64_t v32 = &v31;
        uint64_t v33 = (id *)&v32;
        sub_1000E9CE0();
        uint64_t v28 = v26;
        id v29 = v27;
        NSFileHandle.write<A>(contentsOf:)();

        *(void *)(v4 + v7) = v23;
        return;
      }
      os_log_type_t v30 = v32;
      uint64_t v3 = _convertNSErrorToError(_:)();
    }
    else
    {
      uint64_t v15 = v32;
      uint64_t v3 = _convertNSErrorToError(_:)();
    }
    swift_willThrow();
    goto LABEL_7;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000E8F90(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = *(id *)(v1 + 16);
  Swift::UInt64 v5 = NSFileHandle.offset()();
  uint64_t v7 = v6;
  if (v6)
  {

    goto LABEL_10;
  }
  Swift::UInt64 v8 = v5;

  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1000E93F0);
  }
  Swift::UInt64 v9 = *(void *)(v2 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize);
  BOOL v10 = v9 >= v8;
  unint64_t v11 = v9 - v8;
  if (!v10)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  if (v11 >= a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = v11;
  }
  uint64_t v43 = sub_1000EA3B4(v12);
  unint64_t v44 = v13;
  id v42 = *(id *)(v2 + 16);
  unint64_t v14 = sub_1000DF118();
  id v15 = v42;
  Swift::Int v21 = DERReader.readDERTLV()(v14, (uint64_t)&protocol witness table for NSFileHandle);
  uint64_t v41 = v14;
  while (2)
  {

    if (!v21) {
      return v43;
    }
    uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v21 + 168))();
    uint64_t v18 = v43;
    unint64_t v24 = v44;
    uint64_t v25 = v22;
    unint64_t v26 = v23;
    uint64_t v27 = 0;
    switch(v44 >> 62)
    {
      case 1uLL:
        LODWORD(v27) = HIDWORD(v43) - v43;
        if (__OFSUB__(HIDWORD(v43), v43)) {
          goto LABEL_34;
        }
        uint64_t v27 = (int)v27;
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v43 + 16);
        uint64_t v28 = *(void *)(v43 + 24);
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          break;
        }
        goto LABEL_35;
      case 3uLL:
        break;
      default:
        uint64_t v27 = BYTE6(v44);
        break;
    }
    uint64_t v31 = 0;
    switch(v23 >> 62)
    {
      case 1uLL:
        LODWORD(v31) = HIDWORD(v22) - v22;
        if (__OFSUB__(HIDWORD(v22), v22)) {
          goto LABEL_37;
        }
        uint64_t v31 = (int)v31;
LABEL_23:
        BOOL v30 = __OFADD__(v27, v31);
        uint64_t v34 = v27 + v31;
        if (v30)
        {
          __break(1u);
          goto LABEL_33;
        }
        if (v34 <= a1)
        {
          Data.append(_:)();
          id v35 = *(id *)(v2 + 16);
          Swift::UInt64 v36 = NSFileHandle.offset()();
          uint64_t v7 = v37;
          if (v37)
          {

            sub_100006628(v25, v26);
            swift_release();
            sub_100006628(v43, v44);
            goto LABEL_10;
          }
          Swift::UInt64 v8 = v36;
          sub_100006628(v25, v26);

          swift_release();
          id v42 = *(id *)(v2 + 16);
          id v15 = v42;
          Swift::Int v21 = DERReader.readDERTLV()(v41, (uint64_t)&protocol witness table for NSFileHandle);
          continue;
        }
        char v38 = *(void **)(v2 + 16);
        id v42 = 0;
        if ([v38 seekToOffset:v8 error:&v42])
        {
          id v39 = v42;
          sub_100006628(v25, v26);
          swift_release();
          return v18;
        }
        id v40 = v42;
        uint64_t v7 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        sub_100006628(v25, v26);
        swift_release();
        sub_100006628(v18, v24);
LABEL_10:
        uint64_t v43 = 0;
        unint64_t v44 = 0xE000000000000000;
        _StringGuts.grow(_:)(26);
        v16._object = (void *)0x8000000100199A60;
        v16._uint64_t countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v16);
        id v42 = v7;
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        _print_unlocked<A, B>(_:_:)();
        uint64_t v17 = v43;
        uint64_t v18 = v44;
        sub_10006AB38();
        swift_allocError();
        *(void *)uint64_t v19 = v17;
        *(void *)(v19 + 8) = v18;
        *(unsigned char *)(v19 + 16) = 1;
        swift_willThrow();
        swift_errorRelease();
        return v18;
      case 2uLL:
        uint64_t v33 = *(void *)(v22 + 16);
        uint64_t v32 = *(void *)(v22 + 24);
        BOOL v30 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v30) {
          goto LABEL_23;
        }
        goto LABEL_36;
      case 3uLL:
        goto LABEL_23;
      default:
        uint64_t v31 = BYTE6(v23);
        goto LABEL_23;
    }
  }
}

void sub_1000E9410(unint64_t a1, uint64_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_32:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1000E97A4);
  }
  uint64_t v4 = v2;
  unint64_t v6 = a1 + 20;
  uint64_t v7 = OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize;
  if (*(void *)(v4 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) < a1 + 20)
  {
    sub_10006AB38();
    swift_allocError();
    *(_OWORD *)uint64_t v8 = xmmword_10018CD60;
    *(unsigned char *)(v8 + 16) = 0;
    goto LABEL_24;
  }
  BOOL v10 = *(void **)(v4 + 16);
  uint64_t v37 = 0;
  unsigned int v11 = [v10 seekToOffset:v6 error:&v37];
  uint64_t v12 = v37;
  if (!v11) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v4 + v7);
  unint64_t v14 = v13 - a1;
  if (v13 < a1)
  {
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  id v15 = *(void **)(a2 + 16);
  uint64_t v37 = 0;
  Swift::String v16 = v12;
  unsigned int v17 = [v15 seekToOffset:12 error:&v37];
  uint64_t v18 = v37;
  if (!v17)
  {
LABEL_23:
    uint64_t v34 = v37;
    _convertNSErrorToError(_:)();

    goto LABEL_24;
  }
  uint64_t v19 = *(void **)(a2 + 16);
  unint64_t v36 = bswap64(v14);
  uint64_t v37 = &v36;
  char v38 = (id *)&v37;
  sub_1000E9CE0();
  id v20 = v18;
  id v21 = v19;
  NSFileHandle.write<A>(contentsOf:)();

  if (v3) {
    return;
  }
  unint64_t v22 = *(void *)(v4 + v7);
  unint64_t v23 = v22 - v6;
  if (v22 < v6) {
LABEL_31:
  }
    __break(1u);
  if (!v23) {
    return;
  }
  while (2)
  {
    id v24 = *(id *)(v4 + 16);
    uint64_t v25 = (unint64_t *)NSFileHandle.read(upToCount:)();
    unint64_t v27 = v26;

    if (v27 >> 60 != 15)
    {
      uint64_t v28 = *(void **)(a2 + 16);
      uint64_t v37 = v25;
      char v38 = (id *)v27;
      sub_1000DF2B0();
      id v29 = v28;
      NSFileHandle.write<A>(contentsOf:)();

      switch(v27 >> 62)
      {
        case 1uLL:
          sub_10000BF70((uint64_t)v25, v27);
          LODWORD(v31) = HIDWORD(v25) - v25;
          if (__OFSUB__(HIDWORD(v25), v25)) {
            goto LABEL_29;
          }
          unint64_t v31 = (int)v31;
LABEL_17:
          if ((v31 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          BOOL v30 = v23 >= v31;
          v23 -= v31;
          if (!v30) {
            goto LABEL_28;
          }
LABEL_21:
          if (!v23) {
            return;
          }
          continue;
        case 2uLL:
          unint64_t v33 = v25[2];
          unint64_t v32 = v25[3];
          sub_10000BF70((uint64_t)v25, v27);
          unint64_t v31 = v32 - v33;
          if (!__OFSUB__(v32, v33)) {
            goto LABEL_17;
          }
          goto LABEL_30;
        case 3uLL:
          sub_10000BF70((uint64_t)v25, v27);
          goto LABEL_21;
        default:
          sub_10000BF70((uint64_t)v25, v27);
          BOOL v30 = v23 >= BYTE6(v27);
          v23 -= BYTE6(v27);
          if (!v30) {
            goto LABEL_28;
          }
          goto LABEL_21;
      }
    }
    break;
  }
  sub_10006AB38();
  swift_allocError();
  *(_OWORD *)uint64_t v35 = xmmword_10018CD50;
  *(unsigned char *)(v35 + 16) = 1;
LABEL_24:
  swift_willThrow();
}

unint64_t *sub_1000E97B4()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize;
  *(void *)(v0 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileSize) = 20;
  Swift::UInt64 v5 = *(void **)(v0 + 16);
  id v20 = 0;
  unsigned int v6 = [v5 seekToOffset:12 error:&v20];
  uint64_t v7 = v20;
  if (!v6)
  {
LABEL_6:
    unint64_t v14 = v7;
    uint64_t v2 = _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_7;
  }
  uint64_t v8 = *(void **)(v3 + 16);
  unint64_t v19 = bswap64(*(void *)(v3 + v4));
  id v20 = &v19;
  id v21 = (id *)&v20;
  sub_1000E9CE0();
  Swift::UInt64 v9 = v7;
  id v10 = v8;
  NSFileHandle.write<A>(contentsOf:)();
  if (!v1)
  {

    unsigned int v11 = *(void **)(v3 + 16);
    id v20 = 0;
    unsigned __int8 v12 = [v11 truncateAtOffset:20 error:&v20];
    uint64_t v7 = v20;
    if (v12) {
      return v20;
    }
    goto LABEL_6;
  }

LABEL_7:
  id v20 = 0;
  id v21 = (id *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v15._object = (void *)0x8000000100199A40;
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v15);
  unint64_t v19 = v2;
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  _print_unlocked<A, B>(_:_:)();
  Swift::String v16 = v20;
  unsigned int v17 = v21;
  sub_10006AB38();
  swift_allocError();
  *(void *)uint64_t v18 = v16;
  *(void *)(v18 + 8) = v17;
  *(unsigned char *)(v18 + 16) = 1;
  swift_willThrow();
  return (unint64_t *)swift_errorRelease();
}

id sub_1000E99C4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v8 = 0;
  if ([v1 closeAndReturnError:&v8]) {
    return v8;
  }
  id v3 = v8;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  id v8 = 0;
  unint64_t v9 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v4._object = (void *)0x8000000100199A20;
  v4._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v4);
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  _print_unlocked<A, B>(_:_:)();
  id v5 = v8;
  unint64_t v6 = v9;
  sub_10006AB38();
  swift_allocError();
  *(void *)uint64_t v7 = v5;
  *(void *)(v7 + 8) = v6;
  *(unsigned char *)(v7 + 16) = 1;
  swift_willThrow();
  return (id)swift_errorRelease();
}

uint64_t sub_1000E9B34()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileUrl;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000E9BDC()
{
  return type metadata accessor for MPOCMonitorStore();
}

uint64_t type metadata accessor for MPOCMonitorStore()
{
  uint64_t result = qword_1001DE180;
  if (!qword_1001DE180) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E9C30()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000E9CE0()
{
  unint64_t result = qword_1001DE290;
  if (!qword_1001DE290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE290);
  }
  return result;
}

unint64_t sub_1000E9D34(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001D8768);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  id v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000EA498(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000E9E60(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unsigned int v11 = (uint64_t *)(v3[6] + 16 * result);
    *unsigned int v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100006510(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000E9E60(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000E9ED8(a1, a2, v4);
}

unint64_t sub_1000E9ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

unint64_t **sub_1000EA020(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v24 = a3;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultManager];
  URL.path(percentEncoded:)(0);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v13 = [v11 createFileAtPath:v12 contents:0 attributes:0];

  if (v13)
  {
    sub_1000DF118();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
    uint64_t v14 = (unint64_t **)sub_1000E8B3C((uint64_t)v10);
    if (v3)
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t **)0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      unint64_t v26 = (unint64_t *)0xD00000000000002DLL;
      unint64_t v27 = (unint64_t **)0x8000000100199AC0;
      Swift::String v16 = URL.path(percentEncoded:)(0);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      long long v17 = v26;
      uint64_t v15 = v27;
      sub_10006AB38();
      swift_allocError();
      *(void *)uint64_t v18 = v17;
      *(void *)(v18 + 8) = v15;
      *(unsigned char *)(v18 + 16) = 1;
      swift_willThrow();
      swift_errorRelease();
    }
    else
    {
      uint64_t v15 = v14;
      LODWORD(v25) = 0x2000000;
      unint64_t v26 = &v25;
      unint64_t v27 = (unint64_t **)((char *)&v25 + 4);
      sub_1000E9CE0();
      NSFileHandle.write<A>(contentsOf:)();
      unint64_t v25 = bswap64(a2);
      unint64_t v26 = &v25;
      unint64_t v27 = &v26;
      NSFileHandle.write<A>(contentsOf:)();
      unint64_t v25 = bswap64(v24);
      unint64_t v26 = &v25;
      unint64_t v27 = &v26;
      NSFileHandle.write<A>(contentsOf:)();
    }
  }
  else
  {
    unint64_t v26 = 0;
    unint64_t v27 = (unint64_t **)0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    unint64_t v26 = (unint64_t *)0xD00000000000001ALL;
    unint64_t v27 = (unint64_t **)0x8000000100199AA0;
    Swift::String v19 = URL.path(percentEncoded:)(0);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    id v20 = v26;
    uint64_t v15 = v27;
    sub_10006AB38();
    swift_allocError();
    *(void *)uint64_t v21 = v20;
    *(void *)(v21 + 8) = v15;
    *(unsigned char *)(v21 + 16) = 1;
    swift_willThrow();
  }
  return v15;
}

uint64_t sub_1000EA3B4(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        unint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000EA450(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EA498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001D8770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EA504()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for MPOCMonitorStoreError()
{
  return sub_1000EA51C();
}

uint64_t sub_1000EA51C()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s9SPREngine21MPOCMonitorStoreErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1000EA504();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MPOCMonitorStoreError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1000EA504();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000EA51C();
  return a1;
}

__n128 initializeWithTake for MPOCMonitorStoreError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MPOCMonitorStoreError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000EA51C();
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorStoreError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorStoreError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000EA6B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000EA6B8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorStoreError()
{
  return &type metadata for MPOCMonitorStoreError;
}

uint64_t sub_1000EA6D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DE2A0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE2A0);
  if (qword_1001D9250 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1010);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000EA79C(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 16) = 0xD000000000000011;
  *(void *)(v3 + 24) = 0x8000000100199B60;
  if (qword_1001D92A0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DE2A0);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v17 = a1;
    id v11 = a2;
    uint64_t v12 = a3;
    unsigned int v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)unsigned int v13 = 136315138;
    sub_100005EB8(0xD000000000000029, 0x8000000100199B80, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v12;
    a2 = v11;
    a1 = v17;
    swift_slowDealloc();
  }

  uint64_t v14 = v4 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_url;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a1, v15);
  sub_10001F1F0(a2, v4 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel);
  *(void *)(v4 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_monitorAnalytics) = a3;
  return v4;
}

void *sub_1000EA9CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL.DirectoryHint();
  uint64_t v132 = *(void *)(v6 - 8);
  uint64_t v133 = v6;
  __chkstk_darwin(v6, v7);
  unint64_t v131 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  __chkstk_darwin(v9 - 8, v10);
  unint64_t v130 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URLRequest();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  Swift::String v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D92A0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v135 = sub_100003E78(v17, (uint64_t)qword_1001DE2A0);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v128 = v13;
  uint64_t v129 = v12;
  __int16 v126 = a2;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v140 = swift_slowAlloc();
    uint64_t v127 = v16;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v137 = sub_100005EB8(0x293A5F28646E6573, 0xE800000000000000, (uint64_t *)&v140);
    Swift::String v16 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v22 = *(void *)(v3 + 24);
  *(void *)&long long v140 = *(void *)(v3 + 16);
  *((void *)&v140 + 1) = v22;
  unint64_t v24 = v131;
  uint64_t v23 = v132;
  uint64_t v25 = v133;
  (*(void (**)(char *, void, uint64_t))(v132 + 104))(v131, enum case for URL.DirectoryHint.inferFromPath(_:), v133);
  sub_10000A87C();
  swift_bridgeObjectRetain();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
  swift_bridgeObjectRelease();
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  uint64_t v26 = URLRequest.httpMethod.setter();
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(v26);
  URLRequest.httpBody.setter();
  long long v140 = xmmword_10018A340;
  uint64_t v27 = *(void *)(v3 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_monitorAnalytics);
  swift_retain();
  uint64_t v133 = v27;
  uint64_t v28 = v27;
  uint64_t v29 = v134;
  sub_10005A908(v28, (uint64_t *)&v140, v3, (uint64_t)v16);
  uint64_t v30 = v29;
  if (!v29)
  {
    swift_release();
    unint64_t v45 = *((void *)&v140 + 1);
    if (*((void *)&v140 + 1) >> 60 != 15)
    {
      uint64_t v58 = v140;
      sub_100038D8C(v140, *((unint64_t *)&v140 + 1));
      sub_10013BF50(v141);
      uint64_t v76 = sub_10000BF70(v58, v45);
      uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v76);
      sub_100048A08(v77, 0);
      sub_10000BF70(v58, v45);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v16, v129);
      return memcpy(v126, v141, 0x128uLL);
    }
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Empty MPOC monitor backend returned response", v48, 2u);
      swift_slowDealloc();
    }

    sub_1000EC300();
    swift_allocError();
    *(void *)uint64_t v49 = 15;
    *(unsigned char *)(v49 + 8) = 1;
    uint64_t v50 = swift_willThrow();
    goto LABEL_60;
  }
  swift_release();
  uint64_t v137 = v29;
  swift_errorRetain();
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  type metadata accessor for SPRHTTPError(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_errorRetain();
    swift_errorRetain();
    char v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unsigned int v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v134 = a1;
      uint64_t v55 = (void *)v54;
      *(_DWORD *)unsigned int v53 = 138412290;
      uint64_t v135 = (uint64_t)(v53 + 4);
      swift_errorRetain();
      uint64_t v56 = v16;
      uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v137 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v55 = v57;
      Swift::String v16 = v56;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "MPOC monitor backend returned error: %@", v53, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      a1 = v134;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_1000EC300();
    swift_allocError();
    *(void *)uint64_t v72 = 14;
    *(unsigned char *)(v72 + 8) = 1;
    swift_willThrow();
    goto LABEL_59;
  }
  uint64_t v134 = a1;
  unint64_t v31 = (char *)*(id *)&v139;
  unint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  int v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v35 = v31;
    uint64_t v36 = swift_slowAlloc();
    unint64_t v131 = (char *)swift_slowAlloc();
    uint64_t v137 = (uint64_t)v131;
    *(_DWORD *)uint64_t v36 = 136315650;
    double v139 = *(double *)&v35;
    sub_1000EC3AC(&qword_1001D9C68);
    uint64_t v132 = v29;
    LODWORD(v130) = v34;
    uint64_t v37 = Error.localizedDescription.getter();
    double v139 = COERCE_DOUBLE(sub_100005EB8(v37, v38, &v137));
    uint64_t v127 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    uint64_t v39 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter();
    if (v40)
    {
      unint64_t v41 = v40;
    }
    else
    {
      uint64_t v39 = 0;
      unint64_t v41 = 0xE000000000000000;
    }
    double v139 = COERCE_DOUBLE(sub_100005EB8(v39, v41, &v137));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 22) = 2080;
    double v139 = *(double *)&v35;
    sub_1000EC3AC(&qword_1001D9CF0);
    _BridgedStoredNSError.userInfo.getter();
    uint64_t v42 = Dictionary.description.getter();
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    double v139 = COERCE_DOUBLE(sub_100005EB8(v42, v44, &v137));
    Swift::String v16 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v30 = v132;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v130, "MPOC monitor backend returned http error: %s, server code: %s, user info: %s", (uint8_t *)v36, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v31 = v35;
    swift_slowDealloc();
  }
  else
  {
  }
  if ((related decl 'e' for SPRHTTPErrorCode.isClientError.getter() & 1) == 0)
  {
    char v73 = related decl 'e' for SPRHTTPErrorCode.isServerError.getter();
    sub_1000EC300();
    swift_allocError();
    a1 = v134;
    if (v73) {
      uint64_t v75 = 12;
    }
    else {
      uint64_t v75 = 13;
    }
    *(void *)uint64_t v74 = v75;
    *(unsigned char *)(v74 + 8) = 1;
    swift_willThrow();

LABEL_59:
    uint64_t v50 = swift_errorRelease();
LABEL_60:
    uint64_t v86 = 0;
    goto LABEL_61;
  }
  unint64_t v131 = v31;
  uint64_t v59 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter();
  if (!v60)
  {
LABEL_52:
    uint64_t v89 = v131;
    unint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v127 = v16;
      Swift::UInt8 v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v135 = swift_slowAlloc();
      uint64_t v137 = v135;
      uint64_t v132 = v30;
      *(_DWORD *)Swift::UInt8 v92 = 136315138;
      uint64_t v93 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter();
      if (v94)
      {
        unint64_t v95 = v94;
      }
      else
      {
        uint64_t v93 = 7104878;
        unint64_t v95 = 0xE300000000000000;
      }
      double v139 = COERCE_DOUBLE(sub_100005EB8(v93, v95, &v137));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      Swift::String v16 = v127;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Invalid server code format: %s", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    a1 = v134;
    sub_1000EC300();
    swift_allocError();
    *(void *)uint64_t v96 = 0;
    *(unsigned char *)(v96 + 8) = 1;
    swift_willThrow();

    goto LABEL_59;
  }
  uint64_t v61 = v59;
  unint64_t v62 = v60;
  uint64_t v137 = 45;
  uint64_t v138 = 0xE100000000000000;
  __chkstk_darwin(v59, v60);
  Swift::Bool v124 = &v137;
  swift_bridgeObjectRetain();
  uint64_t v63 = (void *)sub_1000934A8(0x7FFFFFFFFFFFFFFFLL, 1, sub_1000EC354, (uint64_t)(&v126 - 4), v61, v62);
  swift_bridgeObjectRelease();
  if (v63[2] != 2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  uint64_t v132 = v30;
  uint64_t v127 = v16;
  unint64_t v64 = v63[4];
  unint64_t v65 = v63[5];
  uint64_t v67 = v63[6];
  uint64_t v66 = v63[7];
  swift_bridgeObjectRetain();
  unint64_t v68 = Substring.init(_:)();
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  if (v67 == v70 && v66 == v71 && v64 >> 16 == v68 >> 16 && v65 >> 16 == v69 >> 16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    LOBYTE(v124) = 0;
    char v79 = _stringCompareInternal(_:_:_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::String v16 = v127;
    if ((v79 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
  }
  if (v63[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_49;
  }
  unint64_t v80 = v63[8];
  unint64_t v81 = v63[9];
  unint64_t v83 = v63[10];
  unint64_t v82 = v63[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!((v81 ^ v80) >> 14))
  {
LABEL_49:
    swift_bridgeObjectRelease();
    Swift::String v16 = v127;
LABEL_51:
    uint64_t v30 = v132;
    goto LABEL_52;
  }
  uint64_t v84 = sub_1000EC22C(v80, v81, v83, v82, 10);
  if ((v85 & 0x100) != 0) {
    uint64_t v84 = (uint64_t)sub_10009412C(v80, v81, v83, v82, 10);
  }
  uint64_t v86 = v84;
  char v87 = v85;
  swift_bridgeObjectRelease();
  Swift::String v16 = v127;
  uint64_t v30 = v132;
  if (v87) {
    goto LABEL_52;
  }
  a1 = v134;
  if (v86 > 4599)
  {
    switch(v86)
    {
      case 4600:
        sub_1000EC300();
        swift_allocError();
        *(void *)uint64_t v98 = 5;
        *(unsigned char *)(v98 + 8) = 1;
        swift_willThrow();

        uint64_t v50 = swift_errorRelease();
        uint64_t v86 = 4600;
        break;
      case 4601:
        sub_1000EC300();
        swift_allocError();
        *(void *)uint64_t v103 = 6;
        *(unsigned char *)(v103 + 8) = 1;
        swift_willThrow();

        uint64_t v50 = swift_errorRelease();
        uint64_t v86 = 4601;
        break;
      case 4602:
        sub_1000EC300();
        swift_allocError();
        *(void *)uint64_t v104 = 7;
        *(unsigned char *)(v104 + 8) = 1;
        swift_willThrow();

        uint64_t v50 = swift_errorRelease();
        uint64_t v86 = 4602;
        break;
      case 4603:
        sub_1000EC300();
        swift_allocError();
        *(void *)uint64_t v105 = 8;
        *(unsigned char *)(v105 + 8) = 1;
        swift_willThrow();

        uint64_t v50 = swift_errorRelease();
        uint64_t v86 = 4603;
        break;
      default:
        if (v86 == 4700)
        {
          sub_1000EC300();
          swift_allocError();
          *(void *)uint64_t v106 = 9;
          *(unsigned char *)(v106 + 8) = 1;
          swift_willThrow();

          uint64_t v50 = swift_errorRelease();
          uint64_t v86 = 4700;
        }
        else
        {
          if (v86 != 4701) {
            goto LABEL_85;
          }
          sub_1000EC300();
          swift_allocError();
          *(void *)uint64_t v100 = 10;
          *(unsigned char *)(v100 + 8) = 1;
          swift_willThrow();

          uint64_t v50 = swift_errorRelease();
          uint64_t v86 = 4701;
        }
        break;
    }
    goto LABEL_61;
  }
  if (v86 <= 4129)
  {
    if ((unint64_t)(v86 - 4000) < 3)
    {
      sub_1000EC300();
      swift_allocError();
      *(void *)uint64_t v99 = 1;
      *(unsigned char *)(v99 + 8) = 1;
LABEL_86:
      swift_willThrow();

      uint64_t v50 = swift_errorRelease();
      goto LABEL_61;
    }
LABEL_85:
    sub_1000EC300();
    swift_allocError();
    *(void *)uint64_t v120 = 11;
    *(unsigned char *)(v120 + 8) = 1;
    goto LABEL_86;
  }
  if (v86 > 4499)
  {
    if (v86 != 4500)
    {
      if (v86 == 4550)
      {
        sub_1000EC300();
        swift_allocError();
        *(void *)uint64_t v101 = 4;
        *(unsigned char *)(v101 + 8) = 1;
        swift_willThrow();

        uint64_t v50 = swift_errorRelease();
        uint64_t v86 = 4550;
        goto LABEL_61;
      }
      goto LABEL_85;
    }
    uint64_t v107 = v131;
    uint64_t v108 = related decl 'e' for SPRHTTPErrorCode.atsBanExpirationTime.getter();
    if (!v109)
    {
LABEL_91:
      sub_1000EC300();
      swift_allocError();
      *(void *)uint64_t v121 = 0x4014000000000000;
      *(unsigned char *)(v121 + 8) = 0;
      swift_willThrow();

      uint64_t v50 = swift_errorRelease();
      uint64_t v86 = 4500;
      goto LABEL_61;
    }
    uint64_t v110 = v109;
    double v139 = 0.0;
    uint64_t v111 = __chkstk_darwin(v108, v109);
    Swift::Bool v124 = (uint64_t *)&v139;
    if ((v110 & 0x1000000000000000) != 0 || !(v110 & 0x2000000000000000 | v112 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)();
      swift_bridgeObjectRelease();
      if (v136)
      {
LABEL_84:
        double v118 = v139 / 1000.0;
        sub_1000EC300();
        swift_allocError();
        *(double *)uint64_t v119 = v118;
        *(unsigned char *)(v119 + 8) = 0;
        swift_willThrow();

        uint64_t v50 = swift_errorRelease();
        uint64_t v86 = 4500;
        a1 = v134;
        goto LABEL_61;
      }
    }
    else
    {
      __chkstk_darwin(v111, &v126 - 4);
      Swift::Bool v124 = (uint64_t *)sub_1000EC374;
      uint64_t v125 = v114;
      if ((v110 & 0x2000000000000000) == 0)
      {
        if ((v113 & 0x1000000000000000) != 0)
        {
          uint64_t v115 = (v110 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v116 = v113 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          uint64_t v115 = _StringObject.sharedUTF8.getter();
        }
        char v117 = sub_100029C48(v115, v116, (void (*)(uint64_t *__return_ptr))sub_1000EC390);
        swift_bridgeObjectRelease();
        if (v117) {
          goto LABEL_84;
        }
        goto LABEL_90;
      }
      uint64_t v137 = v113;
      uint64_t v138 = v110 & 0xFFFFFFFFFFFFFFLL;
      if (v113 <= 0x20u && ((1 << v113) & 0x100003E01) != 0
        || (unint64_t v122 = (unsigned __int8 *)_swift_stdlib_strtod_clocale()) == 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        int v123 = *v122;
        swift_bridgeObjectRelease();
        if (!v123) {
          goto LABEL_84;
        }
      }
    }
LABEL_90:
    a1 = v134;
    uint64_t v107 = v131;
    goto LABEL_91;
  }
  if (v86 == 4130)
  {
    sub_1000EC300();
    swift_allocError();
    *(void *)uint64_t v102 = 2;
    *(unsigned char *)(v102 + 8) = 1;
    swift_willThrow();

    uint64_t v50 = swift_errorRelease();
    uint64_t v86 = 4130;
    goto LABEL_61;
  }
  if (v86 != 4444) {
    goto LABEL_85;
  }
  sub_1000EC300();
  swift_allocError();
  *(void *)uint64_t v88 = 3;
  *(unsigned char *)(v88 + 8) = 1;
  swift_willThrow();

  uint64_t v50 = swift_errorRelease();
  uint64_t v86 = 4444;
LABEL_61:
  uint64_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(v50);
  sub_100048A08(v97, v86);
  sub_10000BF70(v140, *((unint64_t *)&v140 + 1));
  return (void *)(*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v16, v129);
}

uint64_t sub_1000EC004()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_url;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100006520(v0 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000EC0CC()
{
  return type metadata accessor for MPOCDefaultMonitorBackend();
}

uint64_t type metadata accessor for MPOCDefaultMonitorBackend()
{
  uint64_t result = qword_1001DE2E0;
  if (!qword_1001DE2E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000EC120()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_1000EC1D4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000EA9CC(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x128uLL);
  }
  return result;
}

uint64_t sub_1000EC22C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_1000949E0((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_1000EC300()
{
  unint64_t result = qword_1001DE3A0;
  if (!qword_1001DE3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE3A0);
  }
  return result;
}

uint64_t sub_1000EC354(void *a1)
{
  return sub_100094988(a1, *(void **)(v1 + 16)) & 1;
}

unsigned char *sub_1000EC374@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100029BDC(a1, a2);
}

void *sub_1000EC390@<X0>(unsigned char *a1@<X8>)
{
  return sub_100029CA8(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_1000EC3AC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SPRHTTPError(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EC3F0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1;
  sub_1000FAFAC((uint64_t)v24);
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1000FE9E0((uint64_t)v23);
    if (qword_1001D92A0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003E78(v9, (uint64_t)qword_1001DE2A0);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    int v12 = v11;
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(void *)&v22[0] = v21;
      *(_DWORD *)uint64_t v13 = 136315394;
      int v20 = v12;
      uint64_t v25 = sub_100005EB8(0x7065642874696E69, 0xEC000000293A746FLL, (uint64_t *)v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v19 = v13 + 14;
      type metadata accessor for Settings();
      uint64_t v14 = sub_100137C58();
      uint64_t v25 = sub_100005EB8(v14, v15, (uint64_t *)v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v20, "MPOCDefaultMonitorBackend.%s, BackendSetting: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    Swift::String v16 = sub_100006788(v24, v24[3]);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, *v16 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v3);
    sub_100006788(v23, v23[3]);
    sub_100049404(v22);
    uint64_t v18 = sub_1000FF9EC();
    type metadata accessor for MPOCDefaultMonitorBackend();
    uint64_t v8 = swift_allocObject();
    sub_1000EA79C((uint64_t)v7, v22, v18);
    swift_release();
    sub_100006520((uint64_t)v23);
    sub_100006520((uint64_t)v24);
  }
  return v8;
}

uint64_t sub_1000EC7BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v94 = a1;
  uint64_t v103 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v103 - 8);
  uint64_t v4 = __chkstk_darwin(v103, v3);
  uint64_t v98 = (char *)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  Swift::UInt8 v92 = (char *)v84 - v8;
  __chkstk_darwin(v7, v9);
  uint64_t v97 = (char *)v84 - v10;
  uint64_t v11 = type metadata accessor for Logger();
  os_log_t v90 = *(os_log_t *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v89 = (char *)v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  os_log_type_t v91 = (char *)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = (char *)v84 - v21;
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v101 = (char *)v84 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v102 = (char *)v84 - v28;
  __chkstk_darwin(v27, v29);
  unint64_t v31 = (char *)v84 - v30;
  long long v32 = v1[11];
  long long v33 = v1[13];
  long long v34 = v1[14];
  v112[5] = v1[12];
  v112[6] = v33;
  v112[7] = v34;
  long long v35 = v1[7];
  long long v36 = v1[9];
  long long v37 = v1[10];
  v112[1] = v1[8];
  v112[2] = v36;
  id v112[3] = v37;
  v112[4] = v32;
  long long v38 = v1[4];
  long long v108 = v1[3];
  long long v109 = v38;
  long long v39 = v1[6];
  long long v110 = v1[5];
  long long v111 = v39;
  v112[0] = v35;
  sub_1000ED150((uint64_t)v112, (uint64_t)v113);
  sub_1000ED150((uint64_t)v113, (uint64_t)&v114);
  if (v115) {
    static Date.distantPast.getter();
  }
  else {
    Date.init(timeIntervalSince1970:)();
  }
  unint64_t v40 = v101;
  Date.init(timeIntervalSince1970:)();
  unint64_t v41 = v102;
  static Date.- infix(_:_:)();
  uint64_t v99 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v100 = v15 + 8;
  v99(v40, v14);
  char v42 = static Date.< infix(_:_:)();
  unint64_t v95 = v31;
  uint64_t v96 = v14;
  uint64_t v93 = v2;
  if (v42)
  {
    if (qword_1001D9258 != -1) {
      swift_once();
    }
    uint64_t v43 = sub_100003E78(v11, (uint64_t)qword_1001E1028);
    ((void (*)(char *, uint64_t, uint64_t))v90[2].isa)(v89, v43, v11);
    unint64_t v44 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v44(v22, v31, v14);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    int v47 = v46;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      v107[0] = v88;
      *(_DWORD *)uint64_t v48 = 136315394;
      v84[1] = v48 + 4;
      swift_beginAccess();
      sub_1000EDEC8();
      LODWORD(v86) = v47;
      os_log_t v85 = v45;
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v104 = sub_100005EB8(v49, v50, v107);
      char v87 = (uint64_t *)v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v104 = sub_100005EB8(v51, v52, v107);
      uint64_t v14 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v99(v22, v14);
      os_log_t v53 = v85;
      _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v86, "Invalid JWT: exp %s is before nbf %s, replacing exp with nbf.", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v41 = v102;
      swift_slowDealloc();

      uint64_t v54 = (uint64_t)v87;
    }
    else
    {
      v99(v22, v14);

      uint64_t v54 = v11;
    }
    ((void (*)(char *))v90[1].isa)(v89);
    swift_beginAccess();
    uint64_t v55 = v95;
    (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v41, v95, v14);
    v44(v101, v55, v14);
  }
  else
  {
    uint64_t v54 = v11;
    unint64_t v44 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v44(v101, v31, v14);
  }
  swift_beginAccess();
  v44(v91, v41, v14);
  uint64_t v56 = v97;
  DateInterval.init(start:end:)();
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  sub_100003E78(v54, (uint64_t)qword_1001E1028);
  uint64_t v58 = v92;
  uint64_t v57 = v93;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  uint64_t v60 = v103;
  v59(v92, v56, v103);
  uint64_t v61 = v98;
  v59(v98, v56, v60);
  unint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  int v64 = v63;
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v65 = swift_slowAlloc();
    os_log_type_t v91 = (char *)swift_slowAlloc();
    uint64_t v106 = v91;
    *(_DWORD *)uint64_t v65 = 136315394;
    uint64_t v66 = v57;
    uint64_t v67 = v101;
    os_log_t v90 = v62;
    DateInterval.start.getter();
    uint64_t v88 = sub_1000EDEC8();
    uint64_t v68 = v96;
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    LODWORD(v89) = v64;
    unint64_t v71 = v70;
    v99(v67, v68);
    uint64_t v105 = sub_100005EB8(v69, v71, (uint64_t *)&v106);
    char v87 = (uint64_t *)&v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v72 = v103;
    uint64_t v86 = *(void (**)(char *, uint64_t))(v57 + 8);
    v86(v58, v103);
    *(_WORD *)(v65 + 12) = 2080;
    Swift::UInt8 v92 = (char *)(v65 + 14);
    DateInterval.end.getter();
    uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v75 = v74;
    uint64_t v76 = v99;
    v99(v67, v68);
    uint64_t v105 = sub_100005EB8(v73, v75, (uint64_t *)&v106);
    uint64_t v56 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v86(v98, v72);
    os_log_t v77 = v90;
    _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v89, "Validity period: %s...%s", (uint8_t *)v65, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v78 = v95;
    uint64_t v79 = v68;
  }
  else
  {
    unint64_t v80 = v61;

    uint64_t v66 = v57;
    unint64_t v81 = *(void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v82 = v103;
    v81(v80, v103);
    v81(v58, v82);
    uint64_t v78 = v95;
    uint64_t v68 = v96;
    uint64_t v79 = v96;
    uint64_t v76 = v99;
  }
  v76(v78, v79);
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v94, v56, v103);
  return ((uint64_t (*)(char *, uint64_t))v76)(v102, v68);
}

uint64_t sub_1000ED150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DE3A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ED1B8(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001DE3E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006788(a1, a1[3]);
  sub_1000EFB20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1000ED340(char a1)
{
  uint64_t result = 7566185;
  switch(a1)
  {
    case 1:
      uint64_t result = 6583649;
      break;
    case 2:
      uint64_t result = 6911082;
      break;
    case 3:
      uint64_t result = 7627113;
      break;
    case 4:
      uint64_t result = 7370853;
      break;
    case 5:
      uint64_t result = 6709870;
      break;
    case 6:
      uint64_t result = 6452595;
      break;
    case 7:
      uint64_t result = 1684628851;
      break;
    case 8:
      uint64_t result = 6580592;
      break;
    case 9:
      uint64_t result = 1684631668;
      break;
    case 10:
      uint64_t result = 0x64697074666173;
      break;
    case 11:
      uint64_t result = 1953853539;
      break;
    case 12:
      uint64_t result = 1802531681;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000ED45C(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001DE3E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006788(a1, a1[3]);
  sub_1000F0998();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[8] = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[7] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[6] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[5] = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[4] = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[3] = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1000ED778()
{
  return qword_10018D330[*v0];
}

uint64_t sub_1000ED790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000EF760(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000ED7B8(uint64_t a1)
{
  unint64_t v2 = sub_1000EFB20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ED7F4(uint64_t a1)
{
  unint64_t v2 = sub_1000EFB20();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ED830(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_1000EE380(v7, v8) & 1;
}

double sub_1000ED878@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000EF888(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1000ED8BC(void *a1)
{
  return sub_1000ED1B8(a1);
}

uint64_t sub_1000ED8D4()
{
  return sub_1000ED340(*v0);
}

uint64_t sub_1000ED8DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000EFB74(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000ED904(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1000ED910(uint64_t a1)
{
  unint64_t v2 = sub_1000F0998();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ED94C(uint64_t a1)
{
  unint64_t v2 = sub_1000F0998();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_1000ED988(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  v15[8] = a1[8];
  v15[9] = v2;
  long long v3 = a1[11];
  v15[10] = a1[10];
  v15[11] = v3;
  long long v4 = a1[5];
  v15[4] = a1[4];
  v15[5] = v4;
  long long v5 = a1[7];
  v15[6] = a1[6];
  v15[7] = v5;
  long long v6 = a1[1];
  v15[0] = *a1;
  v15[1] = v6;
  long long v7 = a1[3];
  v15[2] = a1[2];
  v15[3] = v7;
  long long v8 = a2[9];
  v16[8] = a2[8];
  v16[9] = v8;
  long long v9 = a2[11];
  v16[10] = a2[10];
  v16[11] = v9;
  long long v10 = a2[5];
  v16[4] = a2[4];
  v16[5] = v10;
  long long v11 = a2[7];
  v16[6] = a2[6];
  v16[7] = v11;
  long long v12 = a2[1];
  v16[0] = *a2;
  v16[1] = v12;
  long long v13 = a2[3];
  _OWORD v16[2] = a2[2];
  v16[3] = v13;
  return sub_1000EDF20((uint64_t)v15, (uint64_t)v16);
}

double sub_1000EDA1C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000EFFE4(a1, v11);
  if (!v2)
  {
    long long v5 = v19;
    a2[8] = v18;
    a2[9] = v5;
    long long v6 = v21;
    a2[10] = v20;
    a2[11] = v6;
    long long v7 = v15;
    a2[4] = v14;
    a2[5] = v7;
    long long v8 = v17;
    a2[6] = v16;
    a2[7] = v8;
    long long v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    double result = *(double *)&v12;
    long long v10 = v13;
    a2[2] = v12;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_1000EDA80(void *a1)
{
  return sub_1000ED45C(a1);
}

uint64_t sub_1000EDA98(void *a1)
{
  long long v3 = v1;
  uint64_t v5 = sub_100003EB0(&qword_1001DE408);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  long long v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000F129C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = v3[1];
  long long v20 = *v3;
  long long v11 = v3[2];
  long long v21 = v10;
  long long v22 = v11;
  char v32 = 0;
  sub_1000F1344();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[12];
    long long v28 = v3[11];
    long long v29 = v12;
    long long v13 = v3[14];
    long long v30 = v3[13];
    long long v31 = v13;
    long long v14 = v3[8];
    long long v24 = v3[7];
    long long v25 = v14;
    long long v15 = v3[10];
    long long v26 = v3[9];
    long long v27 = v15;
    long long v16 = v3[4];
    long long v20 = v3[3];
    long long v17 = v3[5];
    long long v18 = v3[6];
    long long v21 = v16;
    long long v22 = v17;
    long long v23 = v18;
    char v32 = 1;
    sub_1000F1398();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v20 = v3[15];
    char v32 = 2;
    sub_1000F13EC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000EDCDC()
{
  uint64_t result = 0x726564616568;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x736D69616C63;
      break;
    case 2:
      uint64_t result = 0x727574616E676973;
      break;
    case 3:
      uint64_t result = 0x65756C6156776172;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000EDD64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000F0B5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000EDD8C(uint64_t a1)
{
  unint64_t v2 = sub_1000F129C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EDDC8(uint64_t a1)
{
  unint64_t v2 = sub_1000F129C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EDE04(void *__src, const void *a2)
{
  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_1000EE1E8((uint64_t)v4, (uint64_t)__dst) & 1;
}

void *sub_1000EDE5C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000F0D14(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x110uLL);
  }
  return result;
}

uint64_t sub_1000EDEB0(void *a1)
{
  return sub_1000EDA98(a1);
}

unint64_t sub_1000EDEC8()
{
  unint64_t result = qword_1001D9B08;
  if (!qword_1001D9B08)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9B08);
  }
  return result;
}

BOOL sub_1000EDF20(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
      {
        if (*(void *)(a1 + 48) != *(void *)(a2 + 48) || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
          return 0;
        }
        char v10 = *(unsigned char *)(a2 + 72);
        if (*(unsigned char *)(a1 + 72))
        {
          if (!*(unsigned char *)(a2 + 72)) {
            return 0;
          }
        }
        else
        {
          if (*(void *)(a1 + 64) != *(void *)(a2 + 64)) {
            char v10 = 1;
          }
          if (v10) {
            return 0;
          }
        }
        uint64_t v11 = *(void *)(a1 + 88);
        uint64_t v12 = *(void *)(a2 + 88);
        if (v11)
        {
          if (!v12) {
            return 0;
          }
          if (*(void *)(a1 + 80) != *(void *)(a2 + 80) || v11 != v12)
          {
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v13 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v12)
        {
          return 0;
        }
        uint64_t v14 = *(void *)(a1 + 104);
        uint64_t v15 = *(void *)(a2 + 104);
        if (v14)
        {
          if (!v15) {
            return 0;
          }
          if (*(void *)(a1 + 96) != *(void *)(a2 + 96) || v14 != v15)
          {
            char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v16 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v15)
        {
          return 0;
        }
        uint64_t v17 = *(void *)(a1 + 120);
        uint64_t v18 = *(void *)(a2 + 120);
        if (v17)
        {
          if (!v18) {
            return 0;
          }
          if (*(void *)(a1 + 112) != *(void *)(a2 + 112) || v17 != v18)
          {
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v19 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v18)
        {
          return 0;
        }
        uint64_t v20 = *(void *)(a1 + 136);
        uint64_t v21 = *(void *)(a2 + 136);
        if (v20)
        {
          if (!v21) {
            return 0;
          }
          if (*(void *)(a1 + 128) != *(void *)(a2 + 128) || v20 != v21)
          {
            char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v22 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v21)
        {
          return 0;
        }
        uint64_t v23 = *(void *)(a1 + 152);
        uint64_t v24 = *(void *)(a2 + 152);
        if (v23)
        {
          if (!v24) {
            return 0;
          }
          if (*(void *)(a1 + 144) != *(void *)(a2 + 144) || v23 != v24)
          {
            char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v25 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v24)
        {
          return 0;
        }
        uint64_t v26 = *(void *)(a1 + 168);
        uint64_t v27 = *(void *)(a2 + 168);
        if (v26)
        {
          if (!v27) {
            return 0;
          }
          if (*(void *)(a1 + 160) != *(void *)(a2 + 160) || v26 != v27)
          {
            char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v28 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v27)
        {
          return 0;
        }
        uint64_t v29 = *(void *)(a1 + 184);
        uint64_t v30 = *(void *)(a2 + 184);
        if (v29) {
          return v30
        }
              && (*(void *)(a1 + 176) == *(void *)(a2 + 176) && v29 == v30
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
        return !v30;
      }
    }
  }
  return result;
}

uint64_t sub_1000EE1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  if ((*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (v4 != v8 || v6 != v9) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if (v7)
  {
    if (!v10 || (v5 != v11 || v7 != v10) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
  long long v12 = *(_OWORD *)(a1 + 192);
  v30[8] = *(_OWORD *)(a1 + 176);
  v30[9] = v12;
  long long v13 = *(_OWORD *)(a1 + 224);
  v30[10] = *(_OWORD *)(a1 + 208);
  v30[11] = v13;
  long long v14 = *(_OWORD *)(a1 + 128);
  v30[4] = *(_OWORD *)(a1 + 112);
  id v30[5] = v14;
  long long v15 = *(_OWORD *)(a1 + 160);
  v30[6] = *(_OWORD *)(a1 + 144);
  v30[7] = v15;
  long long v16 = *(_OWORD *)(a1 + 64);
  v30[0] = *(_OWORD *)(a1 + 48);
  v30[1] = v16;
  long long v17 = *(_OWORD *)(a1 + 96);
  v30[2] = *(_OWORD *)(a1 + 80);
  void v30[3] = v17;
  long long v18 = *(_OWORD *)(a2 + 192);
  v29[8] = *(_OWORD *)(a2 + 176);
  v29[9] = v18;
  long long v19 = *(_OWORD *)(a2 + 224);
  v29[10] = *(_OWORD *)(a2 + 208);
  v29[11] = v19;
  long long v20 = *(_OWORD *)(a2 + 128);
  v29[4] = *(_OWORD *)(a2 + 112);
  v29[5] = v20;
  long long v21 = *(_OWORD *)(a2 + 160);
  v29[6] = *(_OWORD *)(a2 + 144);
  v29[7] = v21;
  long long v22 = *(_OWORD *)(a2 + 64);
  v29[0] = *(_OWORD *)(a2 + 48);
  v29[1] = v22;
  long long v23 = *(_OWORD *)(a2 + 96);
  v29[2] = *(_OWORD *)(a2 + 80);
  void v29[3] = v23;
  if (!sub_1000EDF20((uint64_t)v30, (uint64_t)v29)) {
    return 0;
  }
  uint64_t v24 = *(void *)(a1 + 240);
  unint64_t v25 = *(void *)(a1 + 248);
  uint64_t v26 = *(void *)(a2 + 240);
  unint64_t v27 = *(void *)(a2 + 248);

  return sub_10014C798(v24, v25, v26, v27);
}

uint64_t sub_1000EE380(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      uint64_t v9 = a1[5];
      uint64_t v10 = a2[5];
      if (v9)
      {
        if (v10 && (a1[4] == a2[4] && v9 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v10)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

void *sub_1000EE43C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(void *)&__src[0] = a1;
  *((void *)&__src[0] + 1) = a2;
  *(void *)&long long v23 = 46;
  *((void *)&v23 + 1) = 0xE100000000000000;
  sub_10000A87C();
  uint64_t v7 = StringProtocol.components<A>(separatedBy:)();
  if (*(void *)(v7 + 16) != 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = 0xD000000000000014;
    uint64_t v11 = (void *)0x8000000100199BB0;
LABEL_13:
    sub_10002A180(10005, v10, v11, 0);
    return (void *)swift_willThrow();
  }
  swift_bridgeObjectRetain();
  uint64_t result = (void *)Data.init(base64urlEncoded:)();
  if (v9 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v11 = (void *)0x8000000100199BD0;
    uint64_t v10 = 0xD000000000000010;
    goto LABEL_13;
  }
  if (*(void *)(v7 + 16) < 2uLL)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v12 = (uint64_t)result;
  unint64_t v13 = v9;
  swift_bridgeObjectRetain();
  uint64_t result = (void *)Data.init(base64urlEncoded:)();
  if (v14 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_11:
    sub_10000BF70(v12, v13);
    goto LABEL_12;
  }
  uint64_t v21 = (uint64_t)result;
  unint64_t v35 = v14;
  if (*(void *)(v7 + 16) < 3uLL) {
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = Data.init(base64urlEncoded:)();
  if (v16 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    sub_10000BF70(v21, v35);
    goto LABEL_11;
  }
  unint64_t v17 = v16;
  uint64_t v20 = v15;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000EE948();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v3)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    sub_10002A180(10005, 0x636564204E4F534ALL, (void *)0xED0000676E69646FLL, v3);
    swift_errorRelease();
    swift_willThrow();
    sub_10000BF70(v12, v13);
    sub_10000BF70(v21, v35);
    sub_10000BF70(v20, v17);
    return (void *)swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000EE99C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10000BF70(v12, v13);
    swift_release();
    sub_10000BF70(v21, v35);
    __src[11] = v31;
    __src[12] = v32;
    __src[13] = v33;
    __src[14] = v34;
    __src[7] = v27;
    __src[8] = v28;
    __src[9] = v29;
    __src[10] = v30;
    __src[3] = v23;
    __src[4] = v24;
    __src[5] = v25;
    __src[6] = v26;
    *(void *)&__src[15] = v20;
    *((void *)&__src[15] + 1) = v17;
    *(void *)&__src[16] = a1;
    *((void *)&__src[16] + 1) = a2;
    swift_bridgeObjectRetain();
    sub_100068C50((uint64_t)__src);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100062020((uint64_t)__src);
    return memcpy(a3, __src, 0x110uLL);
  }
}

unint64_t sub_1000EE948()
{
  unint64_t result = qword_1001DE3B0;
  if (!qword_1001DE3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE3B0);
  }
  return result;
}

unint64_t sub_1000EE99C()
{
  unint64_t result = qword_1001DE3B8;
  if (!qword_1001DE3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE3B8);
  }
  return result;
}

uint64_t destroy for JWTClaims()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JWTClaims(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v11;
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JWTClaims(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for JWTClaims(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t assignWithTake for JWTClaims(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JWTClaims(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 192)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JWTClaims(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JWTClaims()
{
  return &type metadata for JWTClaims;
}

uint64_t destroy for JWTHeader()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for JWTHeader(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JWTHeader(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for JWTHeader(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for JWTHeader(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JWTHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JWTHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JWTHeader()
{
  return &type metadata for JWTHeader;
}

uint64_t destroy for JSONWebToken(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006628(*(void *)(a1 + 240), *(void *)(a1 + 248));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JSONWebToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v14;
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  uint64_t v16 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  unint64_t v17 = *(void *)(a2 + 248);
  uint64_t v20 = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000065D0(v20, v17);
  *(void *)(a1 + 240) = v20;
  *(void *)(a1 + 248) = v17;
  uint64_t v18 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JSONWebToken(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 240);
  unint64_t v6 = *(void *)(a2 + 248);
  sub_1000065D0(v5, v6);
  uint64_t v7 = *(void *)(a1 + 240);
  unint64_t v8 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = v5;
  *(void *)(a1 + 248) = v6;
  sub_100006628(v7, v8);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for JSONWebToken(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t assignWithTake for JSONWebToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a1 + 240);
  unint64_t v18 = *(void *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_100006628(v17, v18);
  uint64_t v19 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONWebToken(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 272)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONWebToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 272) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 272) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONWebToken()
{
  return &type metadata for JSONWebToken;
}

uint64_t sub_1000EF760(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7371124 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6777953 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6580587 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000EF888@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DE3C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000EFB20();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100006520((uint64_t)a1);
  }
  char v28 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v25 = v10;
  char v27 = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v23 = v13;
  char v26 = 2;
  swift_bridgeObjectRetain();
  uint64_t v24 = v15;
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v18 = v17;
  uint64_t v19 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_bridgeObjectRetain();
  sub_100006520((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v20 = v24;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v25;
  a2[1] = v12;
  a2[2] = v23;
  a2[3] = v20;
  a2[4] = v19;
  a2[5] = v18;
  return result;
}

unint64_t sub_1000EFB20()
{
  unint64_t result = qword_1001DE3C8;
  if (!qword_1001DE3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE3C8);
  }
  return result;
}

uint64_t sub_1000EFB74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7566185 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6583649 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6911082 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 7627113 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 7370853 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 6709870 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 6452595 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 1684628851 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 6580592 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1684631668 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x64697074666173 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 1953853539 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 1802531681 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

uint64_t sub_1000EFFE4@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DE3D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  long long v109 = a1;
  sub_100006788(a1, v10);
  sub_1000F0998();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100006520((uint64_t)v109);
  }
  uint64_t v11 = v6;
  uint64_t v73 = a2;
  LOBYTE(v89[0]) = 0;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  LOBYTE(v89[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v72 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v89[0]) = 2;
  uint64_t v17 = v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v76 = v17;
  uint64_t v71 = v18;
  LOBYTE(v89[0]) = 3;
  uint64_t v20 = v19;
  swift_bridgeObjectRetain();
  uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v75 = v20;
  uint64_t v70 = v21;
  LOBYTE(v89[0]) = 4;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v69 = v13;
  LOBYTE(v89[0]) = 5;
  uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v108 = v23 & 1;
  LOBYTE(v89[0]) = 6;
  int v67 = v23;
  uint64_t v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v24 = v22;
  LOBYTE(v89[0]) = 7;
  uint64_t v26 = v25;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v74 = v26;
  uint64_t v62 = v27;
  LOBYTE(v89[0]) = 8;
  uint64_t v29 = v28;
  swift_bridgeObjectRetain();
  uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v64 = v30;
  uint64_t v65 = v29;
  LOBYTE(v89[0]) = 9;
  swift_bridgeObjectRetain();
  uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v60 = v31;
  uint64_t v63 = 0;
  LOBYTE(v89[0]) = 10;
  swift_bridgeObjectRetain();
  uint64_t v32 = v63;
  uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v59 = v33;
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v109);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v63) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    LOBYTE(v89[0]) = 11;
    swift_bridgeObjectRetain();
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v35 = v34;
    char v106 = 12;
    swift_bridgeObjectRetain();
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v55 = v37;
    uint64_t v38 = v36;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v5);
    *(void *)&long long v77 = v69;
    *((void *)&v77 + 1) = v15;
    uint64_t v40 = v75;
    uint64_t v39 = v76;
    *(void *)&long long v78 = v72;
    *((void *)&v78 + 1) = v76;
    *(void *)&long long v79 = v71;
    *((void *)&v79 + 1) = v75;
    *(void *)&long long v80 = v70;
    *((void *)&v80 + 1) = v24;
    uint64_t v54 = v24;
    *(void *)&long long v81 = v68;
    BYTE8(v81) = v67 & 1;
    *(void *)&long long v82 = v66;
    *((void *)&v82 + 1) = v74;
    *(void *)&long long v83 = v62;
    *((void *)&v83 + 1) = v65;
    *(void *)&long long v84 = v61;
    *((void *)&v84 + 1) = v64;
    *(void *)&long long v85 = v58;
    *((void *)&v85 + 1) = v60;
    *(void *)&long long v86 = v57;
    *((void *)&v86 + 1) = v59;
    *(void *)&long long v87 = v56;
    *((void *)&v87 + 1) = v35;
    uint64_t v53 = v38;
    *(void *)&long long v88 = v38;
    *((void *)&v88 + 1) = v55;
    sub_1000F09EC((uint64_t)&v77);
    swift_bridgeObjectRelease();
    uint64_t v41 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = v65;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v60;
    swift_bridgeObjectRelease();
    uint64_t v44 = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v109);
    v89[0] = v69;
    v89[1] = v15;
    v89[2] = v72;
    v89[3] = v41;
    v89[4] = v71;
    v89[5] = v40;
    v89[6] = v70;
    v89[7] = v54;
    v89[8] = v68;
    char v90 = v108;
    *(_DWORD *)os_log_type_t v91 = *(_DWORD *)v107;
    *(_DWORD *)&v91[3] = *(_DWORD *)&v107[3];
    uint64_t v92 = v66;
    uint64_t v93 = v74;
    uint64_t v94 = v62;
    uint64_t v95 = v42;
    uint64_t v96 = v61;
    uint64_t v97 = v64;
    uint64_t v98 = v58;
    uint64_t v99 = v43;
    uint64_t v100 = v57;
    uint64_t v101 = v44;
    uint64_t v102 = v56;
    uint64_t v103 = v35;
    uint64_t v104 = v53;
    uint64_t v105 = v55;
    uint64_t result = sub_1000F0AA4((uint64_t)v89);
    long long v45 = v86;
    os_log_type_t v46 = v73;
    v73[8] = v85;
    v46[9] = v45;
    long long v47 = v88;
    v46[10] = v87;
    v46[11] = v47;
    long long v48 = v82;
    v46[4] = v81;
    v46[5] = v48;
    long long v49 = v84;
    v46[6] = v83;
    v46[7] = v49;
    long long v50 = v78;
    *os_log_type_t v46 = v77;
    v46[1] = v50;
    long long v51 = v80;
    void v46[2] = v79;
    v46[3] = v51;
  }
  return result;
}

unint64_t sub_1000F0998()
{
  unint64_t result = qword_1001DE3D8;
  if (!qword_1001DE3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE3D8);
  }
  return result;
}

uint64_t sub_1000F09EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F0AA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F0B5C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726564616568 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D69616C63 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void *sub_1000F0D14@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DE3F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1[3];
  uint64_t v33 = a1;
  sub_100006788(a1, v10);
  sub_1000F129C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return (void *)sub_100006520((uint64_t)v33);
  }
  uint64_t v31 = a2;
  uint64_t v32 = v6;
  LOBYTE(v34[0]) = 0;
  sub_1000EE948();
  uint64_t v11 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v12 = v36;
  uint64_t v13 = v38;
  uint64_t v29 = v35;
  uint64_t v30 = v37;
  uint64_t v14 = v39;
  uint64_t v15 = v40;
  char v94 = 1;
  sub_1000EE99C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = v14;
  long long v65 = v77;
  long long v66 = v78;
  long long v67 = v79;
  long long v68 = v80;
  long long v61 = v73;
  long long v62 = v74;
  long long v63 = v75;
  long long v64 = v76;
  long long v57 = v69;
  long long v58 = v70;
  long long v59 = v71;
  long long v60 = v72;
  long long v89 = v77;
  long long v90 = v78;
  long long v91 = v79;
  long long v92 = v80;
  long long v85 = v73;
  long long v86 = v74;
  long long v87 = v75;
  long long v88 = v76;
  long long v81 = v69;
  long long v82 = v70;
  long long v83 = v71;
  long long v84 = v72;
  LOBYTE(v34[0]) = 2;
  sub_1000F09EC((uint64_t)&v57);
  sub_1000F12F0();
  uint64_t v28 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v35;
  char v93 = 3;
  unint64_t v26 = v36;
  sub_1000065D0(v35, v36);
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v32 + 8);
  uint64_t v32 = v17;
  uint64_t v20 = v19;
  v18(v9, v11);
  *(void *)&v34[0] = v29;
  *((void *)&v34[0] + 1) = v12;
  unint64_t v21 = v12;
  *(void *)&v34[1] = v30;
  *((void *)&v34[1] + 1) = v13;
  uint64_t v22 = v27;
  *(void *)&v34[2] = v27;
  *((void *)&v34[2] + 1) = v15;
  v34[11] = v65;
  v34[12] = v66;
  v34[13] = v67;
  v34[14] = v68;
  v34[7] = v61;
  v34[8] = v62;
  v34[9] = v63;
  v34[10] = v64;
  v34[3] = v57;
  v34[4] = v58;
  v34[5] = v59;
  v34[6] = v60;
  *(void *)&v34[15] = v16;
  uint64_t v23 = v16;
  unint64_t v24 = v26;
  *((void *)&v34[15] + 1) = v26;
  *(void *)&v34[16] = v32;
  *((void *)&v34[16] + 1) = v20;
  sub_100068C50((uint64_t)v34);
  sub_100006628(v23, v24);
  sub_1000F0AA4((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006520((uint64_t)v33);
  uint64_t v35 = v29;
  unint64_t v36 = v21;
  uint64_t v37 = v30;
  uint64_t v38 = v13;
  uint64_t v39 = v22;
  uint64_t v40 = v15;
  long long v49 = v89;
  long long v50 = v90;
  long long v51 = v91;
  long long v52 = v92;
  long long v45 = v85;
  long long v46 = v86;
  long long v47 = v87;
  long long v48 = v88;
  long long v41 = v81;
  long long v42 = v82;
  long long v43 = v83;
  long long v44 = v84;
  uint64_t v53 = v23;
  unint64_t v54 = v24;
  uint64_t v55 = v32;
  uint64_t v56 = v20;
  sub_100062020((uint64_t)&v35);
  return memcpy(v31, v34, 0x110uLL);
}

unint64_t sub_1000F129C()
{
  unint64_t result = qword_1001DE3F8;
  if (!qword_1001DE3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE3F8);
  }
  return result;
}

unint64_t sub_1000F12F0()
{
  unint64_t result = qword_1001DE400;
  if (!qword_1001DE400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE400);
  }
  return result;
}

unint64_t sub_1000F1344()
{
  unint64_t result = qword_1001DE410;
  if (!qword_1001DE410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE410);
  }
  return result;
}

unint64_t sub_1000F1398()
{
  unint64_t result = qword_1001DE418;
  if (!qword_1001DE418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE418);
  }
  return result;
}

unint64_t sub_1000F13EC()
{
  unint64_t result = qword_1001DE420;
  if (!qword_1001DE420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE420);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for JSONWebToken.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F150CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONWebToken.CodingKeys()
{
  return &type metadata for JSONWebToken.CodingKeys;
}

uint64_t getEnumTagSinglePayload for JWTClaims.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for JWTClaims.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F16A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JWTClaims.CodingKeys()
{
  return &type metadata for JWTClaims.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for JWTHeader.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F17A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JWTHeader.CodingKeys()
{
  return &type metadata for JWTHeader.CodingKeys;
}

unint64_t sub_1000F17E0()
{
  unint64_t result = qword_1001DE428;
  if (!qword_1001DE428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE428);
  }
  return result;
}

unint64_t sub_1000F1838()
{
  unint64_t result = qword_1001DE430;
  if (!qword_1001DE430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE430);
  }
  return result;
}

unint64_t sub_1000F1890()
{
  unint64_t result = qword_1001DE438;
  if (!qword_1001DE438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE438);
  }
  return result;
}

unint64_t sub_1000F18E8()
{
  unint64_t result = qword_1001DE440;
  if (!qword_1001DE440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE440);
  }
  return result;
}

unint64_t sub_1000F1940()
{
  unint64_t result = qword_1001DE448;
  if (!qword_1001DE448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE448);
  }
  return result;
}

unint64_t sub_1000F1998()
{
  unint64_t result = qword_1001DE450;
  if (!qword_1001DE450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE450);
  }
  return result;
}

unint64_t sub_1000F19F0()
{
  unint64_t result = qword_1001DE458;
  if (!qword_1001DE458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE458);
  }
  return result;
}

unint64_t sub_1000F1A48()
{
  unint64_t result = qword_1001DE460;
  if (!qword_1001DE460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE460);
  }
  return result;
}

unint64_t sub_1000F1AA0()
{
  unint64_t result = qword_1001DE468;
  if (!qword_1001DE468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE468);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MPOCMonitorManagerError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorManagerError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorManagerError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000F1B58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F1B74(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorManagerError()
{
  return &type metadata for MPOCMonitorManagerError;
}

BOOL sub_1000F1BA4(uint64_t a1, uint64_t a2)
{
  return sub_1000F1BC0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL sub_1000F1BC0(uint64_t a1, char a2, unint64_t a3, char a4)
{
  if (a2)
  {
    switch(a1)
    {
      case 1:
        if ((a4 & 1) == 0 || a3 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if ((a4 & 1) == 0 || a3 != 2) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if ((a4 & 1) == 0 || a3 != 3) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if ((a4 & 1) == 0 || a3 != 4) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if ((a4 & 1) == 0 || a3 != 5) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 6:
        if ((a4 & 1) == 0 || a3 != 6) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 7:
        if ((a4 & 1) == 0 || a3 != 7) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 8:
        if ((a4 & 1) == 0 || a3 != 8) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 9:
        if ((a4 & 1) == 0 || a3 != 9) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 10:
        if ((a4 & 1) == 0 || a3 != 10) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 11:
        if ((a4 & 1) == 0 || a3 <= 0xA) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if ((a4 & 1) == 0 || *(double *)&a3 != 0.0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (a4 & 1) == 0 && *(double *)&a1 == *(double *)&a3;
  }
  return result;
}

uint64_t SecureChannelProtocol.securingRequest(_:contentType:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a1;
  unsigned int v18 = a2 & 1;
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9, v12);
  uint64_t v14 = &v17[-v13];
  static DispatchTime.now()();
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  + infix(_:_:)();
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v15(v11, v6);
  (*(void (**)(uint64_t, void, unsigned char *, uint64_t, uint64_t))(a4 + 16))(v19, v18, v14, a3, a4);
  return ((uint64_t (*)(unsigned char *, uint64_t))v15)(v14, v6);
}

unint64_t HTTPContentType.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000018;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1000F1EF0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  unsigned int v20 = a2 & 1;
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v13);
  uint64_t v15 = &v19[-v14];
  static DispatchTime.now()();
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  + infix(_:_:)();
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v16(v12, v7);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void, unsigned char *, uint64_t, uint64_t))(a4 + 24))(a1, v20, v15, a3, a4);
  v16(v15, v7);
  return v17;
}

uint64_t HTTPContentType.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C5C10, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F20D8(char *a1, char *a2)
{
  return sub_100047C94(*a1, *a2);
}

unint64_t sub_1000F20E8()
{
  unint64_t result = qword_1001DE470;
  if (!qword_1001DE470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE470);
  }
  return result;
}

Swift::Int sub_1000F213C()
{
  return sub_100047F58();
}

uint64_t sub_1000F2144()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000F21B8()
{
  return sub_1000485BC();
}

uint64_t sub_1000F21C0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C5C10, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1000F2220(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000018;
  }
  else {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x8000000100193A20;
  if (*v1) {
    unint64_t v3 = 0x8000000100193A40;
  }
  *a1 = v2;
  a1[1] = v3;
}

unsigned char *storeEnumTagSinglePayload for HTTPContentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F2330);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPContentType()
{
  return &type metadata for HTTPContentType;
}

unint64_t sub_1000F2368()
{
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  unint64_t v12 = 0xD00000000000001CLL;
  unint64_t v13 = 0x8000000100199BF0;
  sub_100029CEC(v0, (uint64_t)v15, &qword_1001DA130);
  sub_100029CEC((uint64_t)v15, (uint64_t)v11, &qword_1001DA130);
  sub_100003EB0(&qword_1001DA130);
  v1._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000100199C10;
  v2._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v2);
  sub_100029CEC(v0 + 272, (uint64_t)v14, &qword_1001DE478);
  sub_100029CEC((uint64_t)v14, (uint64_t)&v16, &qword_1001DE478);
  uint64_t v3 = v16;
  if (v16) {
    uint64_t v3 = Array.debugDescription.getter();
  }
  else {
    uint64_t v4 = 0;
  }
  v11[0] = v3;
  v11[1] = v4;
  sub_100003EB0(&qword_1001DA138);
  v5._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x3A726F727265202CLL;
  v6._object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  sub_100029CEC(v0 + 280, (uint64_t)v11, &qword_1001DE480);
  sub_100029CEC((uint64_t)v11, (uint64_t)&v10, &qword_1001DE480);
  sub_100003EB0(&qword_1001DE480);
  v7._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return v12;
}

unint64_t sub_1000F2534()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_1000F2368();
}

uint64_t destroy for MPOCAttestationState(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006628(a1[30], a1[31]);
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MPOCAttestationState(void *__dst, void *__src)
{
  uint64_t v4 = __src[1];
  if (v4)
  {
    *__dst = *__src;
    __dst[1] = v4;
    uint64_t v5 = __src[3];
    __dst[2] = __src[2];
    __dst[3] = v5;
    uint64_t v6 = __src[5];
    __dst[4] = __src[4];
    __dst[5] = v6;
    uint64_t v7 = __src[7];
    __dst[6] = __src[6];
    __dst[7] = v7;
    uint64_t v8 = __src[9];
    __dst[8] = __src[8];
    __dst[9] = v8;
    uint64_t v9 = __src[11];
    __dst[10] = __src[10];
    __dst[11] = v9;
    *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
    *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
    __dst[14] = __src[14];
    uint64_t v10 = __src[17];
    __dst[16] = __src[16];
    __dst[17] = v10;
    uint64_t v11 = __src[19];
    __dst[18] = __src[18];
    __dst[19] = v11;
    uint64_t v12 = __src[21];
    __dst[20] = __src[20];
    __dst[21] = v12;
    uint64_t v13 = __src[23];
    __dst[22] = __src[22];
    __dst[23] = v13;
    uint64_t v14 = __src[25];
    __dst[24] = __src[24];
    __dst[25] = v14;
    uint64_t v15 = __src[27];
    __dst[26] = __src[26];
    __dst[27] = v15;
    uint64_t v16 = __src[29];
    __dst[28] = __src[28];
    __dst[29] = v16;
    unint64_t v17 = __src[31];
    uint64_t v21 = __src[30];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000065D0(v21, v17);
    __dst[30] = v21;
    __dst[31] = v17;
    uint64_t v18 = __src[33];
    __dst[32] = __src[32];
    __dst[33] = v18;
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(__dst, __src, 0x110uLL);
  }
  uint64_t v19 = __src[35];
  __dst[34] = __src[34];
  __dst[35] = v19;
  *((_WORD *)__dst + 144) = *((_WORD *)__src + 144);
  swift_bridgeObjectRetain();
  return __dst;
}

void *assignWithCopy for MPOCAttestationState(void *__dst, void *__src)
{
  uint64_t v4 = __src[1];
  if (!__dst[1])
  {
    if (v4)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      __dst[6] = __src[6];
      __dst[7] = __src[7];
      __dst[8] = __src[8];
      __dst[9] = __src[9];
      __dst[10] = __src[10];
      __dst[11] = __src[11];
      __dst[12] = __src[12];
      __dst[13] = __src[13];
      uint64_t v10 = __src[14];
      *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
      __dst[14] = v10;
      __dst[16] = __src[16];
      __dst[17] = __src[17];
      __dst[18] = __src[18];
      __dst[19] = __src[19];
      __dst[20] = __src[20];
      __dst[21] = __src[21];
      __dst[22] = __src[22];
      __dst[23] = __src[23];
      __dst[24] = __src[24];
      __dst[25] = __src[25];
      __dst[26] = __src[26];
      __dst[27] = __src[27];
      __dst[28] = __src[28];
      __dst[29] = __src[29];
      unint64_t v11 = __src[31];
      uint64_t v14 = __src[30];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000065D0(v14, v11);
      __dst[30] = v14;
      __dst[31] = v11;
      __dst[32] = __src[32];
      __dst[33] = __src[33];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_1000F2BFC((uint64_t)__dst);
    goto LABEL_7;
  }
  *__dst = *__src;
  __dst[1] = __src[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[2] = __src[2];
  __dst[3] = __src[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[4] = __src[4];
  __dst[5] = __src[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[6] = __src[6];
  __dst[7] = __src[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[8] = __src[8];
  __dst[9] = __src[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[10] = __src[10];
  __dst[11] = __src[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[12] = __src[12];
  __dst[13] = __src[13];
  uint64_t v5 = __src[14];
  *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
  __dst[14] = v5;
  __dst[16] = __src[16];
  __dst[17] = __src[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[18] = __src[18];
  __dst[19] = __src[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[20] = __src[20];
  __dst[21] = __src[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[22] = __src[22];
  __dst[23] = __src[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[24] = __src[24];
  __dst[25] = __src[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[26] = __src[26];
  __dst[27] = __src[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[28] = __src[28];
  __dst[29] = __src[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = __src[30];
  unint64_t v7 = __src[31];
  sub_1000065D0(v6, v7);
  uint64_t v8 = __dst[30];
  unint64_t v9 = __dst[31];
  __dst[30] = v6;
  __dst[31] = v7;
  sub_100006628(v8, v9);
  __dst[32] = __src[32];
  __dst[33] = __src[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  __dst[34] = __src[34];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = __src[35];
  *((_WORD *)__dst + 144) = *((_WORD *)__src + 144);
  __dst[35] = v12;
  return __dst;
}

uint64_t sub_1000F2BFC(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for MPOCAttestationState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x122uLL);
}

void *assignWithTake for MPOCAttestationState(void *__dst, void *__src)
{
  if (!__dst[1]) {
    goto LABEL_5;
  }
  uint64_t v4 = __src[1];
  if (!v4)
  {
    sub_1000F2BFC((uint64_t)__dst);
LABEL_5:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_6;
  }
  *__dst = *__src;
  __dst[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = __src[3];
  __dst[2] = __src[2];
  __dst[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = __src[5];
  __dst[4] = __src[4];
  __dst[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = __src[7];
  __dst[6] = __src[6];
  __dst[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = __src[9];
  __dst[8] = __src[8];
  __dst[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = __src[11];
  __dst[10] = __src[10];
  __dst[11] = v9;
  swift_bridgeObjectRelease();
  *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
  __dst[14] = __src[14];
  *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
  uint64_t v10 = __src[17];
  __dst[16] = __src[16];
  __dst[17] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = __src[19];
  __dst[18] = __src[18];
  __dst[19] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = __src[21];
  __dst[20] = __src[20];
  __dst[21] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = __src[23];
  __dst[22] = __src[22];
  __dst[23] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = __src[25];
  __dst[24] = __src[24];
  __dst[25] = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = __src[27];
  __dst[26] = __src[26];
  __dst[27] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = __src[29];
  __dst[28] = __src[28];
  __dst[29] = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = __dst[30];
  unint64_t v18 = __dst[31];
  *((_OWORD *)__dst + 15) = *((_OWORD *)__src + 15);
  sub_100006628(v17, v18);
  uint64_t v19 = __src[33];
  __dst[32] = __src[32];
  __dst[33] = v19;
  swift_bridgeObjectRelease();
LABEL_6:
  __dst[34] = __src[34];
  swift_bridgeObjectRelease();
  __dst[35] = __src[35];
  *((_WORD *)__dst + 144) = *((_WORD *)__src + 144);
  return __dst;
}

uint64_t getEnumTagSinglePayload for MPOCAttestationState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 290)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCAttestationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_WORD *)(result + 288) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 290) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 290) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCAttestationState()
{
  return &type metadata for MPOCAttestationState;
}

uint64_t sub_1000F2EE0(void *__src, const void *a2)
{
  memcpy(v4, __src, 0x122uLL);
  memcpy(__dst, a2, 0x122uLL);
  return sub_1000F2F38((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t sub_1000F2F38(uint64_t a1, uint64_t a2)
{
  sub_100029CEC(a1, (uint64_t)v55, &qword_1001DA130);
  sub_100029CEC(a2, (uint64_t)v56, &qword_1001DA130);
  sub_100029CEC((uint64_t)v55, (uint64_t)v57, &qword_1001DA130);
  if (sub_100029A28((uint64_t)v57) == 1)
  {
    sub_100029CEC((uint64_t)v56, (uint64_t)v51, &qword_1001DA130);
    if (sub_100029A28((uint64_t)v51) == 1) {
      goto LABEL_3;
    }
LABEL_8:
    sub_100029CEC((uint64_t)v55, (uint64_t)v51, &qword_1001DA130);
    sub_100029CEC((uint64_t)v56, (uint64_t)&v52, &qword_1001DA130);
    sub_1000F3554((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
    sub_1000F3554((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
    sub_1000F33C8((uint64_t)v51);
    return 0;
  }
  sub_100029CEC((uint64_t)v56, (uint64_t)v51, &qword_1001DA130);
  if (sub_100029A28((uint64_t)v51) == 1) {
    goto LABEL_8;
  }
  sub_100029CEC((uint64_t)v55, (uint64_t)v21, &qword_1001DA130);
  sub_100029CEC((uint64_t)v56, (uint64_t)v36, &qword_1001DA130);
  uint64_t v7 = v21[2];
  uint64_t v8 = v21[3];
  uint64_t v10 = v21[4];
  uint64_t v9 = v21[5];
  uint64_t v11 = v36[2];
  uint64_t v12 = v36[3];
  uint64_t v14 = v36[4];
  uint64_t v13 = v36[5];
  if ((v21[0] != v36[0] || v21[1] != v36[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (v7 != v11 || v8 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if (v9)
  {
    if (!v13 || (v10 != v14 || v9 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  v53[8] = v30;
  v53[9] = v31;
  v53[10] = v32;
  v53[11] = v33;
  v53[4] = v26;
  v53[5] = v27;
  v53[6] = v28;
  v53[7] = v29;
  v53[0] = v22;
  v53[1] = v23;
  v53[2] = v24;
  uint64_t v53[3] = v25;
  v54[8] = v45;
  v54[9] = v46;
  v54[10] = v47;
  v54[11] = v48;
  v54[4] = v41;
  v54[5] = v42;
  v54[6] = v43;
  v54[7] = v44;
  v54[0] = v37;
  v54[1] = v38;
  _OWORD v54[2] = v39;
  v54[3] = v40;
  if (!sub_1000EDF20((uint64_t)v53, (uint64_t)v54)) {
    return 0;
  }
  uint64_t v15 = v34;
  unint64_t v16 = v35;
  uint64_t v17 = v49;
  unint64_t v18 = v50;
  sub_1000F3554((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
  sub_1000F3554((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
  LOBYTE(v15) = sub_10014C798(v15, v16, v17, v18);
  sub_1000F3554((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100029ABC);
  sub_1000F3554((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100029ABC);
  if ((v15 & 1) == 0) {
    return 0;
  }
LABEL_3:
  uint64_t v4 = *(void *)(a1 + 272);
  uint64_t v5 = *(void *)(a2 + 272);
  if (v4)
  {
    if (!v5 || (sub_10014AA88(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 289) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 289) & 1) == 0)
    {
      double v19 = *(double *)(a1 + 280);
      double v20 = *(double *)(a2 + 280);
      if (*(unsigned char *)(a1 + 288))
      {
        switch(*(void *)&v19)
        {
          case 1:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 1;
          case 2:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 2;
          case 3:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 3;
          case 4:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 4;
          case 5:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 5;
          case 6:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 6;
          case 7:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 7;
          case 8:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 8;
          case 9:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 9;
          case 0xALL:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 == 10;
          case 0xBLL:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && *(void *)&v20 > 0xAuLL;
          default:
            return (*(unsigned char *)(a2 + 288) & 1) != 0 && v20 == 0.0;
        }
      }
      if ((*(unsigned char *)(a2 + 288) & 1) == 0 && v19 == v20) {
        return 1;
      }
    }
    return 0;
  }
  return (*(unsigned char *)(a2 + 289) & 1) != 0;
}

uint64_t sub_1000F33C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 280);
  uint64_t v23 = *(void *)(a1 + 272);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v5 = *(void *)(a1 + 304);
  uint64_t v6 = *(void *)(a1 + 312);
  uint64_t v7 = *(void *)(a1 + 320);
  uint64_t v8 = *(void *)(a1 + 328);
  long long v21 = *(_OWORD *)(a1 + 352);
  long long v22 = *(_OWORD *)(a1 + 336);
  long long v19 = *(_OWORD *)(a1 + 384);
  long long v20 = *(_OWORD *)(a1 + 368);
  long long v17 = *(_OWORD *)(a1 + 416);
  long long v18 = *(_OWORD *)(a1 + 400);
  long long v15 = *(_OWORD *)(a1 + 448);
  long long v16 = *(_OWORD *)(a1 + 432);
  long long v14 = *(_OWORD *)(a1 + 464);
  long long v12 = *(_OWORD *)(a1 + 496);
  long long v13 = *(_OWORD *)(a1 + 480);
  long long v11 = *(_OWORD *)(a1 + 512);
  long long v10 = *(_OWORD *)(a1 + 224);
  sub_100029ABC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v10,
    *((uint64_t *)&v10 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  sub_100029ABC(v23, v2, v3, v4, v5, v6, v7, v8, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((unint64_t *)&v11 + 1));
  return a1;
}

uint64_t sub_1000F3554(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264));
  return a1;
}

uint64_t sub_1000F35D8()
{
  unint64_t v0 = sub_100106B04(&off_1001C31E0);
  sub_100003EB0(&qword_1001DE488);
  uint64_t result = swift_arrayDestroy();
  qword_1001E1118 = v0;
  return result;
}

uint64_t sub_1000F3630(uint64_t *a1)
{
  return _sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D92A8 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E1118;
  if (*(void *)(qword_1001E1118 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v8, "SecurityError#");
    HIBYTE(v8[1]) = -18;
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v8[0];
  }
  return v5;
}

unint64_t sub_1000F3740(uint64_t a1)
{
  unint64_t result = sub_1000F3768();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000F3768()
{
  unint64_t result = qword_1001D87E8;
  if (!qword_1001D87E8)
  {
    type metadata accessor for SecurityError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D87E8);
  }
  return result;
}

uint64_t sub_1000F37C0(OSStatus a1, uint64_t a2)
{
  switch(a1)
  {
    case -67843:
      goto LABEL_5;
    case -67842:
    case -67841:
    case -67840:
    case -67839:
    case -67838:
    case -67837:
    case -67836:
    case -67835:
    case -67834:
    case -67833:
    case -67832:
    case -67831:
    case -67830:
    case -67829:
    case -67828:
    case -67827:
    case -67826:
    case -67825:
    case -67824:
    case -67823:
    case -67822:
    case -67821:
      goto LABEL_6;
    case -67820:
      uint64_t v3 = 10013;
      goto LABEL_10;
    case -67819:
      uint64_t v3 = 10011;
      goto LABEL_10;
    case -67818:
      uint64_t v3 = 10012;
      goto LABEL_10;
    default:
      if (a1 == -67880 || a1 == -25318)
      {
LABEL_5:
        uint64_t v3 = 10010;
LABEL_10:
        uint64_t v9 = 0;
        long long v10 = 0;
      }
      else
      {
LABEL_6:
        CFStringRef v4 = SecCopyErrorMessageString(a1, 0);
        if (v4)
        {
          uint64_t v5 = (__CFString *)v4;
          uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v8 = v7;
        }
        else
        {
          uint64_t v6 = 0;
          uint64_t v8 = 0;
        }
        uint64_t v3 = 10997;
        uint64_t v9 = v6;
        long long v10 = v8;
      }
      return sub_10002A180(v3, v9, v10, a2);
  }
}

uint64_t sub_1000F3910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1000F3A80);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1000F7928(v9, v8, a2, a3);
  if (v11 > 0 || v11 <= v10)
  {
    uint64_t v12 = sub_1000F78AC(v9, v10, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = (int)a2;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 16);
        break;
      default:
        break;
    }
    if (v12 < v13)
    {
      __break(1u);
      goto LABEL_14;
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_100006628(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

void NFSecureElementManagerSession.select(_:)(uint64_t a1, unint64_t a2)
{
  if (qword_1001D92B0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DE490);
  unint64_t v5 = a2 >> 62;
  sub_1000065D0(a1, a2);
  sub_1000065D0(a1, a2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  uint64_t v55 = a1;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    Swift::String v9 = Data.hexString()();
    sub_100005EB8(v9._countAndFlagsBits, (unint64_t)v9._object, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(a1, a2);
    sub_100006628(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "selectApplet(%s)", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(a1, a2);
    sub_100006628(a1, a2);
  }

  switch((int)v5)
  {
    case 1:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (HIDWORD(a1) - (int)a1 < 256)
      {
LABEL_14:
        LOWORD(v10) = WORD2(a1) - a1;
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
LABEL_15:
          sub_1000065D0(a1, a2);
LABEL_17:
          sub_1000065D0(a1, a2);
          sub_1000065D0(a1, a2);
          uint64_t v13 = Logger.logObject.getter();
          os_log_type_t v14 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v13, v14))
          {
            uint64_t v15 = (uint8_t *)swift_slowAlloc();
            uint64_t v60 = swift_slowAlloc();
            *(_DWORD *)uint64_t v15 = 136315138;
            unint64_t v16 = ((unint64_t)(unsigned __int16)v10 << 32) | 0x4A400;
            uint64_t v17 = sub_10006C13C(v16, a1, a2, 0);
            unint64_t v18 = a2;
            uint64_t v19 = v17;
            unint64_t v21 = v20;
            Swift::String v22 = Data.hexString()();
            uint64_t v23 = v19;
            a2 = v18;
            a1 = v55;
            sub_100006628(v23, v21);
            sub_100005EB8(v22._countAndFlagsBits, (unint64_t)v22._object, &v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100006628(v55, a2);
            sub_100006628(v55, a2);
            _os_log_impl((void *)&_mh_execute_header, v13, v14, "C-APDU (SELECT): %s", v15, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100006628(a1, a2);
            sub_100006628(a1, a2);

            unint64_t v16 = ((unint64_t)(unsigned __int16)v10 << 32) | 0x4A400;
          }
          sub_1000F61E8(v16, a1, a2, 0, 0, (uint64_t)v56);
          uint64_t v24 = v56[0];
          unint64_t v25 = v56[1];
          uint64_t v26 = v56[3];
          unint64_t v27 = v56[4];
          sub_100029CEC((uint64_t)v56, (uint64_t)v57, (uint64_t *)&unk_1001DA590);
          if (v58 >> 60 == 15)
          {
            long long v28 = Logger.logObject.getter();
            os_log_type_t v29 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v28, v29))
            {
              long long v30 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)long long v30 = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "select applet error", v30, 2u);
              swift_slowDealloc();
            }

            sub_100038E08();
            swift_allocError();
            *long long v31 = 0;
            swift_willThrow();
            uint64_t v32 = v55;
            unint64_t v33 = a2;
          }
          else
          {
            unint64_t v54 = a2;
            int v34 = v59;
            sub_1000065D0(v24, v25);
            sub_1000065D0(v26, v27);
            sub_1000065D0(v24, v25);
            sub_1000065D0(v26, v27);
            unint64_t v35 = Logger.logObject.getter();
            os_log_type_t v36 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v35, v36))
            {
              long long v37 = (uint8_t *)swift_slowAlloc();
              uint64_t v60 = swift_slowAlloc();
              *(_DWORD *)long long v37 = 136315138;
              Swift::String v38 = Data.hexString()();
              sub_100005EB8(v38._countAndFlagsBits, (unint64_t)v38._object, &v60);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100038E5C((uint64_t)v56);
              sub_100038E5C((uint64_t)v56);
              _os_log_impl((void *)&_mh_execute_header, v35, v36, "R-APDU: %s", v37, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_100038E5C((uint64_t)v56);
              sub_100038E5C((uint64_t)v56);
            }

            if (v34 == 36864)
            {
              sub_1000065D0(v55, v54);
              sub_1000065D0(v55, v54);
              long long v43 = Logger.logObject.getter();
              os_log_type_t v44 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v43, v44))
              {
                long long v45 = (uint8_t *)swift_slowAlloc();
                uint64_t v60 = swift_slowAlloc();
                *(_DWORD *)long long v45 = 136315138;
                Swift::String v46 = Data.hexString()();
                sub_100005EB8(v46._countAndFlagsBits, (unint64_t)v46._object, &v60);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_100006628(v55, v54);
                sub_100006628(v55, v54);
                _os_log_impl((void *)&_mh_execute_header, v43, v44, "Applet selected: %s", v45, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                sub_100038E5C((uint64_t)v56);
                sub_100006628(v55, v54);
              }
              else
              {
                sub_100006628(v55, v54);
                sub_100006628(v55, v54);
                sub_100006628(v55, v54);
                sub_100038E5C((uint64_t)v56);
              }
              return;
            }
            sub_1000065D0(v24, v25);
            sub_1000065D0(v26, v27);
            sub_1000065D0(v24, v25);
            sub_1000065D0(v26, v27);
            long long v47 = Logger.logObject.getter();
            os_log_type_t v48 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v47, v48))
            {
              uint64_t v49 = (uint8_t *)swift_slowAlloc();
              uint64_t v60 = swift_slowAlloc();
              *(_DWORD *)uint64_t v49 = 136315138;
              sub_100003EB0((uint64_t *)&unk_1001DD3C0);
              uint64_t v50 = swift_allocObject();
              *(_OWORD *)(v50 + 16) = xmmword_100186100;
              *(void *)(v50 + 56) = &type metadata for UInt16;
              *(void *)(v50 + 64) = &protocol witness table for UInt16;
              *(_WORD *)(v50 + 32) = v34;
              uint64_t v51 = String.init(format:_:)();
              sub_100005EB8(v51, v52, &v60);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100038E5C((uint64_t)v56);
              sub_100038E5C((uint64_t)v56);
              _os_log_impl((void *)&_mh_execute_header, v47, v48, "received non 9000 while selecting applet(%s).", v49, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_100038E5C((uint64_t)v56);
              sub_100038E5C((uint64_t)v56);
            }

            sub_100038E08();
            swift_allocError();
            *uint64_t v53 = v34;
            swift_willThrow();
            sub_100038E5C((uint64_t)v56);
            uint64_t v32 = v55;
            unint64_t v33 = v54;
          }
          sub_100006628(v32, v33);
          return;
        }
LABEL_41:
        __break(1u);
        JUMPOUT(0x1000F456CLL);
      }
LABEL_26:
      long long v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        long long v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Applet ID too long", v41, 2u);
        swift_slowDealloc();
      }

      sub_100038E08();
      swift_allocError();
      *long long v42 = 0;
      swift_willThrow();
      return;
    case 2:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (__OFSUB__(v11, v12)) {
        goto LABEL_40;
      }
      if (v10 >= 256) {
        goto LABEL_26;
      }
      if (v5 != 2) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 3:
      sub_100006628(a1, a2);
      LOWORD(v10) = 0;
      goto LABEL_17;
    default:
      sub_100006628(a1, a2);
      LOWORD(v10) = BYTE6(a2);
      goto LABEL_17;
  }
}

uint64_t sub_1000F457C()
{
  Swift::String v1 = v0;
  unsigned int v2 = [v0 validateSEPairings:0];
  if (v2 != 27)
  {
    unsigned int v3 = v2;
    if (v2)
    {
      if (qword_1001D92B0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100003E78(v14, (uint64_t)qword_1001DE490);
      unint64_t v5 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v15)) {
        goto LABEL_18;
      }
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 67109120;
      LODWORD(v19) = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v15, "Failed to determine SE-SEP pairings: %u", v16, 8u);
    }
    else
    {
      if (qword_1001D92B0 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_100003E78(v4, (uint64_t)qword_1001DE490);
      unint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v5, v6)) {
        goto LABEL_18;
      }
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "valid SE-SEP pairing found.", v7, 2u);
    }
    swift_slowDealloc();
LABEL_18:

    char v13 = 1;
    return v13 & 1;
  }
  if (qword_1001D92B0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DE490);
  Swift::String v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SE-SEP is not paired, deleteAllApplets", v11, 2u);
    swift_slowDealloc();
  }

  id v19 = 0;
  if ([v1 deleteAllApplets:0 error:&v19])
  {
    id v12 = v19;
    char v13 = 0;
  }
  else
  {
    id v18 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13 & 1;
}

BOOL NFSecureElementManagerSession.isAppletInSEStateInfo(aid:seState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v4 = Data.hexString()();
  if (qword_1001D92B0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001DE490);
  swift_bridgeObjectRetain_n();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    sub_100005EB8(v4._countAndFlagsBits, (unint64_t)v4._object, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "checking if applet %s is in SE State Info", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = sub_1000F4BF4(v4._countAndFlagsBits, (uint64_t)v4._object, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11))
  {

    swift_bridgeObjectRelease_n();
    if (!v9) {
      return v9 != 0;
    }
    goto LABEL_13;
  }
  id v12 = (uint8_t *)swift_slowAlloc();
  uint64_t v17 = swift_slowAlloc();
  *(_DWORD *)id v12 = 136315138;
  if (v9)
  {
    uint64_t v13 = Dictionary.description.getter();
    unint64_t v15 = v14;
  }
  else
  {
    unint64_t v15 = 0xE700000000000000;
    uint64_t v13 = 0x676E6968746F6ELL;
  }
  sub_100005EB8(v13, v15, &v17);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v10, v11, "found %s", v12, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (v9) {
LABEL_13:
  }
    swift_bridgeObjectRelease();
  return v9 != 0;
}

uint64_t sub_1000F4BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v9 = a3;
    goto LABEL_3;
  }
  id v12 = [v3 stateInformation];
  if (!v12)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    goto LABEL_31;
  }
  uint64_t v13 = v12;
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v14 + 16))
  {
    long long v27 = 0u;
    long long v28 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  sub_100006570(v14 + 32, (uint64_t)&v27);
  swift_bridgeObjectRelease();
  if (!*((void *)&v28 + 1))
  {
LABEL_31:
    sub_100008970((uint64_t)&v27);
    return 0;
  }
  sub_100003EB0(&qword_1001DABD8);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v9 = *(void *)&v26[0];
  if (!*(void *)&v26[0]) {
    return 0;
  }
LABEL_3:
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_10000C4B0(0x656E6961746E6F63, 0xEA00000000007372);
    if (v11)
    {
      sub_100006570(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v27);
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
  }
  else
  {
    long long v27 = 0u;
    long long v28 = 0u;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v28 + 1)) {
    goto LABEL_31;
  }
  sub_100006680(0, &qword_1001DB7E8);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  id v21 = *(id *)&v26[0];
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (!*((void *)&v28 + 1))
  {
LABEL_28:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    return 0;
  }
  uint64_t v20 = v5;
  while (1)
  {
    sub_100006510(&v27, v26);
    sub_100003EB0(&qword_1001DABD8);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v15 = v24;
    if (!*(void *)(v24 + 16)
      || (unint64_t v16 = sub_10000C4B0(0x694174656C707061, 0xE900000000000064), (v17 & 1) == 0)
      || (sub_100006570(*(void *)(v15 + 56) + 32 * v16, (uint64_t)v26), (swift_dynamicCast() & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    if (v24 == v23 && v25 == v22) {
      break;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = v20;
LABEL_19:
    NSFastEnumerationIterator.next()();
    if (!*((void *)&v28 + 1)) {
      goto LABEL_28;
    }
  }
  swift_bridgeObjectRelease();
LABEL_35:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);

  return v15;
}

void sub_1000F4FB4(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  unint64_t v8 = a3;
  uint64_t v9 = a2;
  unint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  if (a5) {
    uint64_t v12 = sub_10006BD14(v11, a2, a3, a4);
  }
  else {
    uint64_t v12 = sub_10006C13C(v11, a2, a3, a4);
  }
  unint64_t v14 = v12;
  unint64_t v15 = v13;
  uint64_t v22 = sub_1000F77D4();
  unint64_t v24 = v23;
  sub_1000065D0((uint64_t)v22, v23);
  uint64_t v107 = (uint64_t)v22;
  unint64_t v108 = v24;
  sub_10006C580((uint64_t)v22, v24, (uint64_t)&v133);
  long long v131 = v133;
  *(_OWORD *)uint64_t v132 = v134;
  *(void *)&v132[16] = v135;
  if ((unsigned __int16)v134 != 25360)
  {
    if ((unsigned __int16)v134 == 36864)
    {
      sub_100006628((uint64_t)v22, v24);
      uint64_t v25 = v14;
      unint64_t v26 = v15;
LABEL_63:
      sub_100006628(v25, v26);
      goto LABEL_64;
    }
    if (qword_1001D91B8 == -1) {
      goto LABEL_53;
    }
    goto LABEL_86;
  }
  unint64_t v27 = a1;
  uint64_t v121 = v14;
  unint64_t v14 = *((void *)&v133 + 1);
  uint64_t v28 = v133;
  sub_1000065D0(v133, *((unint64_t *)&v133 + 1));
  unint64_t v124 = 0;
  unint64_t v110 = v27 >> 8;
  char v111 = v27;
  unint64_t v109 = v15;
  uint64_t v114 = v9;
  unint64_t v116 = v8;
  *(void *)double v118 = v7;
  while (2)
  {
    if (qword_1001D91B8 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100003E78(v29, (uint64_t)qword_1001DD958);
    sub_1000065D0(v9, v8);
    long long v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v33 = v9;
      uint64_t v34 = v28;
      unint64_t v35 = (uint8_t *)v32;
      *(_DWORD *)uint64_t v32 = 16777728;
      *(unsigned char *)(v32 + 4) = v111;
      *(_WORD *)(v32 + 5) = 256;
      *(unsigned char *)(v32 + 7) = v110;
      sub_100006628(v33, v8);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "More data available: CLA=%hhu, INS=%hhu", v35, 8u);
      uint64_t v28 = v34;
      swift_slowDealloc();
    }
    else
    {
      sub_100006628(v9, v8);
    }

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v125 = 0;
    id v37 = [v7 transceive:isa error:&v125];

    id v38 = v125;
    if (!v37)
    {
      long long v78 = v38;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_1000065D0(v121, v15);
      swift_errorRetain();
      sub_1000065D0(v121, v15);
      swift_errorRetain();
      long long v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v79, v80))
      {
        sub_100006628(v107, v108);
        sub_100006628(v121, v15);
        sub_100006628(v28, v14);
        swift_errorRelease();
        sub_100006628(v121, v15);
        sub_100006628(v121, v15);
        swift_errorRelease();
        swift_errorRelease();

LABEL_72:
        uint64_t v105 = *(void *)&v132[8];
        unint64_t v106 = *(void *)&v132[16];
        sub_100006628(v131, *((unint64_t *)&v131 + 1));
        sub_100006628(v105, v106);
        goto LABEL_73;
      }
      os_log_type_t v119 = v80;
      uint64_t v81 = swift_slowAlloc();
      char v117 = (void *)swift_slowAlloc();
      unint64_t v129 = swift_slowAlloc();
      *(_DWORD *)uint64_t v81 = 138413058;
      sub_100038E08();
      swift_allocError();
      *long long v82 = 25360;
      long long v83 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v125 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v117 = v83;
      *(_WORD *)(v81 + 12) = 2080;
      Swift::String v84 = Data.hexString()();
      id v125 = (id)sub_100005EB8(v84._countAndFlagsBits, (unint64_t)v84._object, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100006628(v121, v15);
      sub_100006628(v121, v15);
      *(_WORD *)(v81 + 22) = 2080;
      swift_beginAccess();
      long long v85 = v131;
      uint64_t v115 = v28;
      uint64_t v86 = *(void *)&v132[8];
      unint64_t v87 = *(void *)&v132[16];
      sub_1000065D0(v131, *((unint64_t *)&v131 + 1));
      sub_1000065D0(v86, v87);
      Swift::String v88 = Data.hexString()();
      sub_100006628(v85, *((unint64_t *)&v85 + 1));
      sub_100006628(v86, v87);
      sub_100005EB8(v88._countAndFlagsBits, (unint64_t)v88._object, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v81 + 32) = 2080;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v89 = String.init<A>(describing:)();
      sub_100005EB8(v89, v90, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v79, v119, "getting %@, but subsequent apdu failed. C-APDU: %s\nR-APDU: %s\nerror: %s", (uint8_t *)v81, 0x2Au);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100006628(v107, v108);

      swift_errorRelease();
      sub_100006628(v121, v15);
      uint64_t v91 = v115;
      unint64_t v92 = v14;
LABEL_71:
      sub_100006628(v91, v92);
      goto LABEL_72;
    }
    uint64_t type = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    unint64_t v41 = 0xC000000000000000;
    __int16 v42 = 0;
    long long v43 = 0;
    switch(v40 >> 62)
    {
      case 1uLL:
        uint64_t v46 = type;
        if (!__OFSUB__(HIDWORD(type), type))
        {
          uint64_t v47 = HIDWORD(type) - (int)type;
          goto LABEL_24;
        }
        __break(1u);
        goto LABEL_77;
      case 2uLL:
        uint64_t v46 = type;
        uint64_t v49 = *(void *)(type + 16);
        uint64_t v48 = *(void *)(type + 24);
        uint64_t v47 = v48 - v49;
        if (__OFSUB__(v48, v49))
        {
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          swift_once();
LABEL_53:
          uint64_t v67 = type metadata accessor for Logger();
          sub_100003E78(v67, (uint64_t)qword_1001DD958);
          sub_1000065D0(v14, v15);
          sub_1000065D0(v14, v15);
          long long v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v68, v69))
          {
            sub_100006628(v107, v108);
            sub_100006628(v14, v15);
            sub_100006628(v14, v15);
            sub_100006628(v14, v15);

LABEL_64:
            swift_beginAccess();
            long long v100 = v131;
            uint64_t v101 = *(unsigned __int16 *)v132;
            long long v102 = *(_OWORD *)&v132[8];
            goto LABEL_74;
          }
          os_log_type_t typea = v69;
          uint64_t v70 = swift_slowAlloc();
          id v125 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v70 = 136315394;
          swift_beginAccess();
          long long v71 = v131;
          unint64_t v72 = v15;
          uint64_t v73 = *(void *)&v132[8];
          unint64_t v74 = *(void *)&v132[16];
          sub_1000065D0(v131, *((unint64_t *)&v131 + 1));
          sub_1000065D0(v73, v74);
          Swift::String v75 = Data.hexString()();
          unint64_t v76 = v14;
          sub_100006628(v71, *((unint64_t *)&v71 + 1));
          sub_100006628(v73, v74);
          sub_100005EB8(v75._countAndFlagsBits, (unint64_t)v75._object, (uint64_t *)&v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v70 + 12) = 2080;
          Swift::String v77 = Data.hexString()();
          sub_100005EB8(v77._countAndFlagsBits, (unint64_t)v77._object, (uint64_t *)&v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100006628(v14, v72);
          sub_100006628(v14, v72);
          _os_log_impl((void *)&_mh_execute_header, v68, typea, "Status Word Not 9000 (!) RAPDU: %s to CAPDU: %s", (uint8_t *)v70, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100006628(v107, v108);

          goto LABEL_62;
        }
LABEL_24:
        sub_1000065D0(v46, v40);
        if (v47 >= 2)
        {
LABEL_20:
          __int16 v44 = Data.subscript.getter();
          __int16 v42 = Data.subscript.getter() | (unsigned __int16)(v44 << 8);
          sub_1000065D0(type, v40);
          sub_1000F3910(2, type, v40, (uint64_t *)&v125);
          long long v43 = (void *)sub_100115410((uint64_t)v125, v126);
          unint64_t v41 = v45;
        }
        else
        {
LABEL_25:
          long long v43 = 0;
          __int16 v42 = 0;
        }
LABEL_26:
        uint64_t v50 = 0;
        switch(*((void *)&v131 + 1) >> 62)
        {
          case 1:
            LODWORD(v50) = DWORD1(v131) - v131;
            if (__OFSUB__(DWORD1(v131), v131)) {
              goto LABEL_78;
            }
            uint64_t v50 = (int)v50;
            break;
          case 2:
            uint64_t v52 = *(void *)(v131 + 16);
            uint64_t v51 = *(void *)(v131 + 24);
            BOOL v53 = __OFSUB__(v51, v52);
            uint64_t v50 = v51 - v52;
            if (v53) {
              goto LABEL_79;
            }
            break;
          case 3:
            break;
          default:
            uint64_t v50 = BYTE14(v131);
            break;
        }
        uint64_t v54 = 0;
        switch(v41 >> 62)
        {
          case 1uLL:
            LODWORD(v54) = HIDWORD(v43) - v43;
            if (__OFSUB__(HIDWORD(v43), v43)) {
              goto LABEL_80;
            }
            uint64_t v54 = (int)v54;
            break;
          case 2uLL:
            uint64_t v56 = v43[2];
            uint64_t v55 = v43[3];
            BOOL v53 = __OFSUB__(v55, v56);
            uint64_t v54 = v55 - v56;
            if (v53) {
              goto LABEL_81;
            }
            break;
          case 3uLL:
            break;
          default:
            uint64_t v54 = BYTE6(v41);
            break;
        }
        BOOL v53 = __OFADD__(v50, v54);
        uint64_t v57 = v50 + v54;
        if (!v53)
        {
          if (v57 > 0x100000 || v124 >= 0x1000)
          {
            uint64_t v93 = (uint64_t)v43;
            char v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v94, v95))
            {
              uint64_t v96 = swift_slowAlloc();
              *(_DWORD *)uint64_t v96 = 134218240;
              swift_beginAccess();
              uint64_t v97 = 0;
              switch(*((void *)&v131 + 1) >> 62)
              {
                case 1:
                  LODWORD(v97) = DWORD1(v131) - v131;
                  if (__OFSUB__(DWORD1(v131), v131))
                  {
                    __break(1u);
LABEL_88:
                    __break(1u);
                  }
                  uint64_t v97 = (int)v97;
LABEL_69:
                  unint64_t v129 = v97;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v96 + 12) = 2048;
                  unint64_t v129 = v124 + 1;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl((void *)&_mh_execute_header, v94, v95, "exceed artificial limit when fetching more data.\nsize: %ld\napdu exchange counter: %ld", (uint8_t *)v96, 0x16u);
                  swift_slowDealloc();
                  break;
                case 2:
                  uint64_t v104 = *(void *)(v131 + 16);
                  uint64_t v103 = *(void *)(v131 + 24);
                  BOOL v53 = __OFSUB__(v103, v104);
                  uint64_t v97 = v103 - v104;
                  if (!v53) {
                    goto LABEL_69;
                  }
                  goto LABEL_88;
                case 3:
                  goto LABEL_69;
                default:
                  uint64_t v97 = BYTE14(v131);
                  goto LABEL_69;
              }
            }
            sub_100006628(v107, v108);
            sub_100006628(type, v40);

            sub_100006628(v93, v41);
            sub_100006628(type, v40);
            sub_100006628(v121, v15);
            uint64_t v91 = v28;
            unint64_t v92 = v14;
            goto LABEL_71;
          }
          unint64_t v129 = v28;
          unint64_t v130 = v14;
          uint64_t v127 = &type metadata for Data;
          uint64_t v128 = &protocol witness table for Data;
          id v125 = v43;
          unint64_t v126 = v41;
          unint64_t v58 = sub_100006788(&v125, (uint64_t)&type metadata for Data);
          uint64_t v59 = *v58;
          unint64_t v60 = v58[1];
          switch(v60 >> 62)
          {
            case 1uLL:
              os_log_t log = (os_log_t)v40;
              uint64_t v61 = v28;
              unint64_t v62 = v14;
              unint64_t v14 = (int)v59;
              unint64_t v15 = (v59 >> 32) - (int)v59;
              if (v59 >> 32 < (int)v59) {
                goto LABEL_82;
              }
              sub_1000065D0((uint64_t)v43, v41);
              uint64_t v112 = v43;
              sub_1000065D0((uint64_t)v43, v41);
              sub_1000065D0(v61, v62);
              sub_1000065D0(v59, v60);
              if (__DataStorage._bytes.getter() && __OFSUB__((int)v59, __DataStorage._offset.getter())) {
                goto LABEL_84;
              }
              __DataStorage._length.getter();
              Data._Representation.append(contentsOf:)();
              sub_100006628(v59, v60);
              break;
            case 2uLL:
              os_log_t log = (os_log_t)v40;
              uint64_t v63 = (uint64_t)v43;
              unint64_t v64 = v14;
              unint64_t v15 = *(void *)(v59 + 16);
              unint64_t v14 = *(void *)(v59 + 24);
              sub_1000065D0(v63, v41);
              uint64_t v112 = (void *)v63;
              sub_1000065D0(v63, v41);
              uint64_t v61 = v28;
              uint64_t v65 = v28;
              unint64_t v62 = v64;
              sub_1000065D0(v65, v64);
              swift_retain();
              swift_retain();
              if (__DataStorage._bytes.getter() && __OFSUB__(v15, __DataStorage._offset.getter())) {
                goto LABEL_85;
              }
              BOOL v53 = __OFSUB__(v14, v15);
              unint64_t v15 = v14 - v15;
              if (v53) {
                goto LABEL_83;
              }
              __DataStorage._length.getter();
              Data._Representation.append(contentsOf:)();
              swift_release();
              swift_release();
              break;
            default:
              sub_1000065D0((uint64_t)v43, v41);
              sub_1000065D0((uint64_t)v43, v41);
              sub_1000065D0(v28, v14);
              uint64_t v66 = (uint64_t)v43;
              Data._Representation.append(contentsOf:)();
              unint64_t v8 = v116;
              uint64_t v7 = *(void **)v118;
              goto LABEL_50;
          }
          unint64_t v15 = v109;
          unint64_t v14 = v62;
          uint64_t v28 = v61;
          unint64_t v8 = v116;
          uint64_t v7 = *(void **)v118;
          uint64_t v66 = (uint64_t)v112;
          unint64_t v40 = (unint64_t)log;
LABEL_50:
          sub_100006520((uint64_t)&v125);
          sub_100006628(v66, v41);
          sub_100006628(v28, v14);
          uint64_t v28 = v129;
          unint64_t v14 = v130;
          sub_1000065D0(v129, v130);
          sub_100006628(type, v40);
          if (v42 != 25360)
          {
            sub_100006628(v107, v108);
            sub_100006628(v28, v14);
            sub_100006628(v121, v15);
            sub_100006628(v66, v41);
            sub_100006628(type, v40);
            long long v98 = v131;
            uint64_t v99 = v28;
            unint64_t v76 = *(void *)&v132[8];
            unint64_t v72 = *(void *)&v132[16];
            *(void *)&long long v131 = v99;
            *((void *)&v131 + 1) = v14;
            *(_WORD *)uint64_t v132 = v42;
            *(void *)&v132[8] = v99;
            *(void *)&v132[16] = v14;
            sub_1000065D0(v99, v14);
            sub_100006628(v98, *((unint64_t *)&v98 + 1));
LABEL_62:
            uint64_t v25 = v76;
            unint64_t v26 = v72;
            goto LABEL_63;
          }
          sub_100006628(v66, v41);
          sub_100006628(type, v40);
          sub_100006628(v28, v14);
          ++v124;
          uint64_t v9 = v114;
          continue;
        }
        __break(1u);
        swift_once();
        uint64_t v16 = type metadata accessor for Logger();
        sub_100003E78(v16, (uint64_t)qword_1001DD958);
        swift_errorRetain();
        swift_errorRetain();
        char v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          id v19 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v133 = swift_slowAlloc();
          *(_DWORD *)id v19 = 136315138;
          *(void *)&long long v131 = v40;
          swift_errorRetain();
          sub_100003EB0((uint64_t *)&unk_1001DD380);
          uint64_t v20 = String.init<A>(describing:)();
          *(void *)&long long v131 = sub_100005EB8(v20, v21, (uint64_t *)&v133);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "failed to communicate with SE %s", v19, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_100006628(v14, v15);
          swift_errorRelease();
        }
        else
        {
          sub_100006628(v14, v15);
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
LABEL_73:
        uint64_t v101 = 0;
        long long v100 = xmmword_10018A340;
        long long v102 = 0uLL;
LABEL_74:
        *(_OWORD *)a6 = v100;
        *(void *)(a6 + 16) = v101;
        *(_OWORD *)(a6 + 24) = v102;
        return;
      case 3uLL:
        goto LABEL_26;
      default:
        if (BYTE6(v40) >= 2uLL) {
          goto LABEL_20;
        }
        goto LABEL_25;
    }
  }
}

void sub_1000F61E8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v6 = a3;
  uint64_t v7 = a2;
  __int16 v78 = a1;
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  if (a5) {
    uint64_t v10 = sub_10006BD14(v9, a2, a3, a4);
  }
  else {
    uint64_t v10 = sub_10006C13C(v9, a2, a3, a4);
  }
  uint64_t v12 = v10;
  unint64_t v13 = (unint64_t)v11;
  unint64_t v14 = NFSecureElementManagerSession.transceive(_:)(v10, v11);
  uint64_t v22 = v21;
  uint64_t v23 = (uint64_t)v14;
  sub_1000065D0((uint64_t)v14, v21);
  uint64_t v75 = v23;
  sub_10006C580(v23, v22, (uint64_t)&v88);
  long long v86 = v88;
  *(_OWORD *)unint64_t v87 = v89;
  *(void *)&v87[16] = v90;
  if ((unsigned __int16)v89 != 25360)
  {
    if ((unsigned __int16)v89 == 36864)
    {
      sub_100006628(v23, v22);
      uint64_t v24 = v12;
      unint64_t v25 = v13;
      goto LABEL_44;
    }
    if (qword_1001D91B8 == -1)
    {
LABEL_42:
      uint64_t v54 = type metadata accessor for Logger();
      sub_100003E78(v54, (uint64_t)qword_1001DD958);
      sub_1000065D0(v12, v13);
      sub_1000065D0(v12, v13);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v55, v56))
      {
        sub_100006628(v75, v22);
        sub_100006628(v12, v13);
        sub_100006628(v12, v13);
        sub_100006628(v12, v13);

        goto LABEL_49;
      }
      loga = v55;
      uint64_t v57 = swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 136315394;
      swift_beginAccess();
      long long v58 = v86;
      uint64_t v59 = a6;
      uint64_t v60 = *(void *)&v87[8];
      unint64_t v61 = *(void *)&v87[16];
      sub_1000065D0(v86, *((unint64_t *)&v86 + 1));
      sub_1000065D0(v60, v61);
      Swift::String v62 = Data.hexString()();
      sub_100006628(v58, *((unint64_t *)&v58 + 1));
      unint64_t v63 = v61;
      a6 = v59;
      sub_100006628(v60, v63);
      sub_100005EB8(v62._countAndFlagsBits, (unint64_t)v62._object, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2080;
      Swift::String v64 = Data.hexString()();
      sub_100005EB8(v64._countAndFlagsBits, (unint64_t)v64._object, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100006628(v12, v13);
      sub_100006628(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, loga, v56, "Status Word Not 9000 (!) RAPDU: %s to CAPDU: %s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100006628(v75, v22);

      uint64_t v24 = v12;
      unint64_t v25 = v13;
LABEL_44:
      sub_100006628(v24, v25);
LABEL_49:
      swift_beginAccess();
      long long v27 = v86;
      uint64_t v26 = *(unsigned __int16 *)v87;
      long long v28 = *(_OWORD *)&v87[8];
      goto LABEL_55;
    }
LABEL_63:
    swift_once();
    goto LABEL_42;
  }
  uint64_t v73 = a6;
  unint64_t v74 = v22;
  unint64_t v29 = *((void *)&v88 + 1);
  a6 = v88;
  sub_1000065D0(v88, *((unint64_t *)&v88 + 1));
  unint64_t v83 = 0;
  uint64_t v76 = v7;
  unint64_t v77 = v6;
  uint64_t v79 = v12;
  unint64_t v80 = v13;
  while (2)
  {
    os_log_t log = (os_log_t)v29;
    if (qword_1001D91B8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100003E78(v30, (uint64_t)qword_1001DD958);
    sub_1000065D0(v7, v6);
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 16777728;
      *(unsigned char *)(v33 + 4) = v78;
      *(_WORD *)(v33 + 5) = 256;
      *(unsigned char *)(v33 + 7) = HIBYTE(v78);
      sub_100006628(v7, v6);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "More data available: CLA=%hhu, INS=%hhu", (uint8_t *)v33, 8u);
      swift_slowDealloc();
    }
    else
    {
      sub_100006628(v7, v6);
    }

    uint64_t v34 = NFSecureElementManagerSession.transceive(_:)(v12, (uint8_t *)v13);
    unint64_t v36 = v35;
    unint64_t v37 = 0xC000000000000000;
    uint64_t v38 = (uint64_t)v34;
    unint64_t v13 = 0;
    uint64_t v22 = 0;
    switch(v35 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(v34), v34))
        {
          uint64_t v41 = HIDWORD(v34) - (int)v34;
          goto LABEL_24;
        }
        __break(1u);
        goto LABEL_58;
      case 2uLL:
        uint64_t v43 = *((void *)v34 + 2);
        uint64_t v42 = *((void *)v34 + 3);
        uint64_t v41 = v42 - v43;
        if (__OFSUB__(v42, v43))
        {
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
LABEL_24:
        sub_1000065D0((uint64_t)v34, v35);
        if (v41 >= 2)
        {
LABEL_20:
          int v39 = Data.subscript.getter();
          unint64_t v13 = Data.subscript.getter() | (v39 << 8);
          sub_1000065D0(v38, v36);
          sub_1000F3910(2, v38, v36, &v84);
          uint64_t v22 = sub_100115410(v84, (unint64_t)v85);
          unint64_t v37 = v40;
        }
        else
        {
LABEL_25:
          uint64_t v22 = 0;
          unint64_t v13 = 0;
        }
LABEL_26:
        unint64_t v44 = *((void *)&v86 + 1);
        uint64_t v45 = v86;
        uint64_t v46 = 0;
        uint64_t v12 = (uint64_t)log;
        switch(*((void *)&v86 + 1) >> 62)
        {
          case 1:
            LODWORD(v46) = DWORD1(v86) - v86;
            if (__OFSUB__(DWORD1(v86), v86)) {
              goto LABEL_59;
            }
            uint64_t v46 = (int)v46;
            break;
          case 2:
            uint64_t v48 = *(void *)(v86 + 16);
            uint64_t v47 = *(void *)(v86 + 24);
            BOOL v49 = __OFSUB__(v47, v48);
            uint64_t v46 = v47 - v48;
            if (v49) {
              goto LABEL_60;
            }
            break;
          case 3:
            break;
          default:
            uint64_t v46 = BYTE14(v86);
            break;
        }
        uint64_t v50 = 0;
        switch(v37 >> 62)
        {
          case 1uLL:
            LODWORD(v50) = HIDWORD(v22) - v22;
            if (__OFSUB__(HIDWORD(v22), v22)) {
              goto LABEL_61;
            }
            uint64_t v50 = (int)v50;
            break;
          case 2uLL:
            uint64_t v52 = *(void *)(v22 + 16);
            uint64_t v51 = *(void *)(v22 + 24);
            BOOL v49 = __OFSUB__(v51, v52);
            uint64_t v50 = v51 - v52;
            if (v49) {
              goto LABEL_62;
            }
            break;
          case 3uLL:
            break;
          default:
            uint64_t v50 = BYTE6(v37);
            break;
        }
        BOOL v49 = __OFADD__(v46, v50);
        uint64_t v53 = v46 + v50;
        if (v49)
        {
          __break(1u);
          swift_once();
          uint64_t v15 = type metadata accessor for Logger();
          sub_100003E78(v15, (uint64_t)qword_1001DD958);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v16, v17))
          {
            os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v88 = swift_slowAlloc();
            *(_DWORD *)os_log_type_t v18 = 136315138;
            *(void *)&long long v86 = v44;
            swift_errorRetain();
            sub_100003EB0((uint64_t *)&unk_1001DD380);
            uint64_t v19 = String.init<A>(describing:)();
            *(void *)&long long v86 = sub_100005EB8(v19, v20, (uint64_t *)&v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v16, v17, "failed to communicate with SE %s", v18, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_100006628((uint64_t)log, v13);
            swift_errorRelease();
          }
          else
          {
            sub_100006628((uint64_t)log, v13);
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          uint64_t v26 = 0;
          long long v27 = xmmword_10018A340;
          long long v28 = 0uLL;
          goto LABEL_55;
        }
        if (v53 <= 0x100000 && v83 < 0x1000)
        {
          uint64_t v84 = a6;
          os_log_t v85 = log;
          sub_1000065D0(a6, (unint64_t)log);
          sub_1000065D0(v22, v37);
          sub_100147328(v22, v37);
          sub_100006628(v22, v37);
          sub_100006628(a6, (unint64_t)log);
          a6 = v84;
          unint64_t v29 = (unint64_t)v85;
          sub_1000065D0(v84, (unint64_t)v85);
          sub_100006628(v38, v36);
          if ((unsigned __int16)v13 != 25360)
          {
            sub_100006628(v75, v74);
            sub_100006628(a6, v29);
            sub_100006628(v79, v80);
            sub_100006628(v22, v37);
            sub_100006628(v38, v36);
            unint64_t v68 = v29;
            uint64_t v69 = *(void *)&v87[8];
            unint64_t v70 = *(void *)&v87[16];
            *(void *)&long long v86 = a6;
            *((void *)&v86 + 1) = v68;
            *(_WORD *)unint64_t v87 = v13;
            *(void *)&v87[8] = a6;
            *(void *)&v87[16] = v68;
            sub_1000065D0(a6, v68);
            sub_100006628(v45, v44);
            sub_100006628(v69, v70);
            a6 = v73;
            goto LABEL_49;
          }
          sub_100006628(v22, v37);
          sub_100006628(v38, v36);
          sub_100006628(a6, v29);
          ++v83;
          uint64_t v12 = v79;
          unint64_t v13 = v80;
          unint64_t v6 = v77;
          uint64_t v7 = v76;
          continue;
        }
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = swift_slowAlloc();
          *(_DWORD *)uint64_t v67 = 134218240;
          swift_beginAccess();
          switch(*((void *)&v86 + 1) >> 62)
          {
            case 1:
              if (!__OFSUB__(DWORD1(v86), v86)) {
                goto LABEL_53;
              }
              __break(1u);
LABEL_65:
              __break(1u);
              JUMPOUT(0x1000F7088);
            case 2:
              if (!__OFSUB__(*(void *)(v86 + 24), *(void *)(v86 + 16))) {
                goto LABEL_53;
              }
              goto LABEL_65;
            default:
LABEL_53:
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v67 + 12) = 2048;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "exceed artificial limit when fetching more data.\nsize: %ld\napdu exchange counter: %ld", (uint8_t *)v67, 0x16u);
              swift_slowDealloc();
              break;
          }
        }
        sub_100006628(v75, v74);
        sub_100006628(v38, v36);

        sub_100006628(v22, v37);
        sub_100006628(v38, v36);
        sub_100006628(v79, v80);
        sub_100006628(a6, (unint64_t)log);
        uint64_t v71 = *(void *)&v87[8];
        unint64_t v72 = *(void *)&v87[16];
        sub_100006628(v86, *((unint64_t *)&v86 + 1));
        sub_100006628(v71, v72);
        uint64_t v26 = 0;
        long long v27 = xmmword_10018A340;
        long long v28 = 0uLL;
        a6 = v73;
LABEL_55:
        *(_OWORD *)a6 = v27;
        *(void *)(a6 + 16) = v26;
        *(_OWORD *)(a6 + 24) = v28;
        return;
      case 3uLL:
        goto LABEL_26;
      default:
        if (BYTE6(v35) >= 2uLL) {
          goto LABEL_20;
        }
        goto LABEL_25;
    }
  }
}

uint64_t sub_1000F70C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DE490);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE490);
  if (qword_1001D9280 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10A0);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint8_t *NFSecureElementManagerSession.transceive(_:)(uint64_t a1, uint8_t *a2)
{
  id v17 = 0;
  id v4 = [self embeddedSecureElementWithError:&v17];
  if (!v4)
  {
    id v11 = v17;
    _convertNSErrorToError(_:)();

LABEL_12:
    swift_willThrow();
    return a2;
  }
  uint64_t v5 = v4;
  id v6 = v17;
  id v7 = [v5 serialNumber];

  if (!v7)
  {
    if (qword_1001D92B0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001DE490);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      a2 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)a2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "no seid", a2, 2u);
      swift_slowDealloc();
    }

    sub_100038E08();
    swift_allocError();
    *uint64_t v15 = 0;
    goto LABEL_12;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v17 = 0;
  id v9 = [v2 transceive:isa forSEID:v7 error:&v17];

  uint64_t v10 = (uint8_t *)v17;
  if (!v9)
  {
    a2 = v10;
    _convertNSErrorToError(_:)();

    goto LABEL_12;
  }
  a2 = (uint8_t *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return a2;
}

Swift::Void __swiftcall NFSecureElementManagerSession.performCleanupScript()()
{
  sub_10005EED8(v10);
  sub_100029CEC((uint64_t)v10, (uint64_t)v11, &qword_1001DCF58);
  if (v12)
  {
    v13[2] = v11[2];
    void v13[3] = v11[3];
    v13[4] = v11[4];
    uint64_t v14 = v12;
    v13[0] = v11[0];
    v13[1] = v11[1];
    uint64_t v8 = sub_100006680(0, (unint64_t *)&qword_1001DF8A0);
    uint64_t v9 = sub_1000F7ABC((unint64_t *)&qword_1001D8780, (unint64_t *)&qword_1001DF8A0);
    *(void *)&long long v7 = v0;
    type metadata accessor for SLAMSwift();
    uint64_t v1 = (void *)swift_allocObject();
    v1[11] = sub_100106D3C((uint64_t)&_swiftEmptyArrayStorage);
    sub_10001F1F0(&v7, (uint64_t)(v1 + 2));
    v1[7] = BitString.init(data:unusedBits:);
    v1[8] = 0;
    v1[9] = 0;
    v1[10] = 1;
    id v2 = v0;
    sub_10005CF44((uint64_t)v13);
    swift_release();
    sub_1000F7A14(v10);
  }
  else
  {
    if (qword_1001D92B0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003E78(v3, (uint64_t)qword_1001DE490);
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not perform cleanup script", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint8_t *sub_1000F778C(uint64_t a1, uint8_t *a2)
{
  return NFSecureElementManagerSession.transceive(_:)(a1, a2);
}

void *sub_1000F77B0()
{
  return sub_1000F77D4();
}

void *sub_1000F77D4()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 transceive:isa error:&v6];

  id v3 = v6;
  if (v2)
  {
    id v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

uint64_t sub_1000F78AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1000F7918);
  }
  return result;
}

uint64_t sub_1000F7928(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1000F79F4);
  }
  return result;
}

uint64_t *sub_1000F7A14(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000F7A68(uint64_t a1)
{
  uint64_t result = sub_1000F7ABC(&qword_1001DE4A8, (unint64_t *)&qword_1001DF8A0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000F7ABC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100006680(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F7B00(uint64_t a1)
{
  uint64_t result = sub_1000F7ABC(&qword_1001DE4B0, &qword_1001DE4B8);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000F7B54@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001ALL, 0x80000001001993A0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001993A0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001ALL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DDD60);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      uint64_t v23 = 0;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE670);
      sub_100029F68(7004, 0xD000000000000027, (void *)0x800000010019A740, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001993A0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DDD60);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&unint64_t v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001993A0);
        swift_endAccess();
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v21 = 0u;
        uint64_t v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE670);
        sub_100029F68(7004, 0xD000000000000025, (void *)0x800000010019A710, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&unint64_t v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001993A0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001993A0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD60);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        unint64_t v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001CLL;
        uint64_t v26 = 0x800000010019A770;
        id v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          os_log_type_t v18 = sub_10000C4B0(0xD00000000000001ALL, 0x80000001001993A0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            unint64_t v21 = 0u;
            uint64_t v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v21 = 0u;
          uint64_t v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000F8088);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000F8098@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000022, 0x80000001001994E0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001994E0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000022;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DDDA0);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      uint64_t v23 = 0;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE690);
      sub_100029F68(7004, 0xD00000000000002FLL, (void *)0x800000010019A9D0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000022, 0x80000001001994E0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DDDA0);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&unint64_t v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000022, 0x80000001001994E0);
        swift_endAccess();
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v21 = 0u;
        uint64_t v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE690);
        sub_100029F68(7004, 0xD00000000000002DLL, (void *)0x800000010019A9A0, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&unint64_t v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000022, 0x80000001001994E0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001994E0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDDA0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        unint64_t v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000024;
        uint64_t v26 = 0x800000010019AA00;
        id v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          os_log_type_t v18 = sub_10000C4B0(0xD000000000000022, 0x80000001001994E0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            unint64_t v21 = 0u;
            uint64_t v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v21 = 0u;
          uint64_t v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000F85CCLL);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000F85DC@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000010, 0x8000000100199510);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199510;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000010;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DB3D8);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      uint64_t v23 = 0;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE640);
      sub_100029F68(7004, 0xD00000000000001DLL, (void *)0x800000010019A3C0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199510);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DB3D8);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&unint64_t v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199510);
        swift_endAccess();
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v21 = 0u;
        uint64_t v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE640);
        sub_100029F68(7004, 0xD00000000000001BLL, (void *)0x800000010019A3A0, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&unint64_t v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199510);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199510;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DB3D8);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        unint64_t v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000012;
        uint64_t v26 = 0x800000010019A3E0;
        id v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          os_log_type_t v18 = sub_10000C4B0(0xD000000000000010, 0x8000000100199510);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            unint64_t v21 = 0u;
            uint64_t v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v21 = 0u;
          uint64_t v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000F8B10);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000F8B20@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001FLL, 0x8000000100199660);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199660;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001FLL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DDD70);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      uint64_t v23 = 0;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE628);
      sub_100029F68(7004, 0xD00000000000002CLL, (void *)0x800000010019A150, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      unint64_t v21 = 0u;
      uint64_t v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x8000000100199660);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      uint64_t v15 = sub_100003EB0(&qword_1001DDD70);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&unint64_t v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x8000000100199660);
        swift_endAccess();
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v21 = 0u;
        uint64_t v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE628);
        sub_100029F68(7004, 0xD00000000000002ALL, (void *)0x800000010019A120, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&unint64_t v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x8000000100199660);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199660;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD70);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        unint64_t v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000021;
        uint64_t v26 = 0x800000010019A180;
        id v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          os_log_type_t v18 = sub_10000C4B0(0xD00000000000001FLL, 0x8000000100199660);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            unint64_t v21 = 0u;
            uint64_t v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v21 = 0u;
          uint64_t v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000F9054);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000F9064()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16))
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10000C4B0(0xD000000000000015, 0x8000000100199440);
  if (v6)
  {
    sub_1000845C8(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v25);
  }
  else
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
  }
  swift_bridgeObjectRelease();
  if (v27 == 255)
  {
LABEL_10:
    char v8 = (void *)0x8000000100199440;
    uint64_t v9 = 7002;
LABEL_11:
    uint64_t v10 = 0xD000000000000015;
    goto LABEL_12;
  }
  uint64_t v7 = sub_100104494((uint64_t)&v25, (uint64_t)&v22);
  switch(v24)
  {
    case 1u:
      ((void (*)(long long *__return_ptr, uint64_t))v22)(&v19, v7);
      if (v1) {
        goto LABEL_21;
      }
      uint64_t v13 = type metadata accessor for ConfiguratorAnalytics();
      if (swift_dynamicCast()) {
        goto LABEL_26;
      }
      sub_100029F68(7004, 0xD000000000000022, (void *)0x800000010019A350, 0);
      goto LABEL_18;
    case 2u:
      long long v12 = v22;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v19, 0xD000000000000015, 0x8000000100199440);
      swift_endAccess();
      ((void (*)(long long *__return_ptr, uint64_t))v12)(&v19, v2);
      if (v1) {
        goto LABEL_17;
      }
      uint64_t v13 = type metadata accessor for ConfiguratorAnalytics();
      if (swift_dynamicCast())
      {
LABEL_26:
        uint64_t v2 = v18;
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v18;
        char v21 = 0;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000015, 0x8000000100199440);
        swift_endAccess();
        swift_release();
      }
      else
      {
        sub_100029F68(7004, 0xD000000000000020, (void *)0x800000010019A320, 0);
        swift_willThrow();
LABEL_17:
        long long v19 = v12;
        char v21 = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000015, 0x8000000100199440);
        swift_endAccess();
LABEL_18:
        swift_willThrow();
LABEL_21:
        swift_release();
      }
      goto LABEL_13;
    case 3u:
      char v8 = (void *)0x8000000100199440;
      uint64_t v9 = 7003;
      goto LABEL_11;
    default:
      type metadata accessor for ConfiguratorAnalytics();
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v22);
        *(void *)&long long v19 = 0xD000000000000017;
        *((void *)&v19 + 1) = 0x800000010019A380;
        uint64_t v14 = *v3;
        if (*(void *)(*v3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_10000C4B0(0xD000000000000015, 0x8000000100199440);
          if (v16)
          {
            sub_1000845C8(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v22);
          }
          else
          {
            long long v22 = 0u;
            long long v23 = 0u;
            unsigned __int8 v24 = -1;
          }
          swift_bridgeObjectRelease();
          if (v24 != 255)
          {
            v17._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v22);
            char v8 = (void *)*((void *)&v19 + 1);
            uint64_t v10 = v19;
            uint64_t v9 = 7004;
LABEL_12:
            sub_100029F68(v9, v10, v8, 0);
            swift_willThrow();
            goto LABEL_13;
          }
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
          unsigned __int8 v24 = -1;
        }
        __break(1u);
        JUMPOUT(0x1000F9570);
      }
      uint64_t v2 = v19;
      sub_100006520((uint64_t)&v22);
LABEL_13:
      sub_10005F4F8((uint64_t)&v25, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      swift_endAccess();
      return v2;
  }
}

uint64_t sub_1000F9580@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001BLL, 0x80000001001993E0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001993E0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001BLL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC8E8);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE658);
      sub_100029F68(7004, 0xD000000000000028, (void *)0x800000010019A5C0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001993E0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC8E8);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001993E0);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE658);
        sub_100029F68(7004, 0xD000000000000026, (void *)0x800000010019A590, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001993E0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001993E0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DC8E8);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001DLL;
        long long v26 = 0x800000010019A5F0;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001BLL, 0x80000001001993E0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000F9AB4);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000F9AC4@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000010, 0x8000000100199420);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199420;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000010;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDDA8);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE6A0);
      sub_100029F68(7004, 0xD00000000000001DLL, (void *)0x800000010019AA90, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199420);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDDA8);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199420);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE6A0);
        sub_100029F68(7004, 0xD00000000000001BLL, (void *)0x800000010019AA70, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000010, 0x8000000100199420);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199420;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDDA8);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000012;
        long long v26 = 0x800000010019AAB0;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000010, 0x8000000100199420);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000F9FF8);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FA008@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000015, 0x80000001001995D0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001995D0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000015;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7C8);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE610);
      sub_100029F68(7004, 0xD000000000000022, (void *)0x8000000100199F90, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x80000001001995D0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7C8);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x80000001001995D0);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE610);
        sub_100029F68(7004, 0xD000000000000020, (void *)0x8000000100199F60, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x80000001001995D0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001995D0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DB7C8);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000017;
        long long v26 = 0x8000000100199FC0;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000015, 0x80000001001995D0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FA53CLL);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FA54C@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000019, 0x8000000100199590);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199590;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000019;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7C0);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE608);
      sub_100029F68(7004, 0xD000000000000026, (void *)0x8000000100199F10, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x8000000100199590);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7C0);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x8000000100199590);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE608);
        sub_100029F68(7004, 0xD000000000000024, (void *)0x8000000100199EE0, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x8000000100199590);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199590;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DB7C0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001BLL;
        long long v26 = 0x8000000100199F40;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000019, 0x8000000100199590);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FAA80);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FAA90()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16))
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10000C4B0(0xD000000000000012, 0x80000001001994A0);
  if (v6)
  {
    sub_1000845C8(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v25);
  }
  else
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
  }
  swift_bridgeObjectRelease();
  if (v27 == 255)
  {
LABEL_10:
    char v8 = (void *)0x80000001001994A0;
    uint64_t v9 = 7002;
LABEL_11:
    uint64_t v10 = 0xD000000000000012;
    goto LABEL_12;
  }
  uint64_t v7 = sub_100104494((uint64_t)&v25, (uint64_t)&v22);
  switch(v24)
  {
    case 1u:
      ((void (*)(long long *__return_ptr, uint64_t))v22)(&v19, v7);
      if (v1) {
        goto LABEL_21;
      }
      uint64_t v13 = type metadata accessor for ProvisionAnalytics();
      if (swift_dynamicCast()) {
        goto LABEL_26;
      }
      sub_100029F68(7004, 0xD00000000000001FLL, (void *)0x8000000100199EA0, 0);
      goto LABEL_18;
    case 2u:
      long long v12 = v22;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v19, 0xD000000000000012, 0x80000001001994A0);
      swift_endAccess();
      ((void (*)(long long *__return_ptr, uint64_t))v12)(&v19, v2);
      if (v1) {
        goto LABEL_17;
      }
      uint64_t v13 = type metadata accessor for ProvisionAnalytics();
      if (swift_dynamicCast())
      {
LABEL_26:
        uint64_t v2 = v18;
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v18;
        char v21 = 0;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000012, 0x80000001001994A0);
        swift_endAccess();
        swift_release();
      }
      else
      {
        sub_100029F68(7004, 0xD00000000000001DLL, (void *)0x8000000100199E80, 0);
        swift_willThrow();
LABEL_17:
        long long v19 = v12;
        char v21 = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000012, 0x80000001001994A0);
        swift_endAccess();
LABEL_18:
        swift_willThrow();
LABEL_21:
        swift_release();
      }
      goto LABEL_13;
    case 3u:
      char v8 = (void *)0x80000001001994A0;
      uint64_t v9 = 7003;
      goto LABEL_11;
    default:
      type metadata accessor for ProvisionAnalytics();
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v22);
        *(void *)&long long v19 = 0xD000000000000014;
        *((void *)&v19 + 1) = 0x8000000100199EC0;
        uint64_t v14 = *v3;
        if (*(void *)(*v3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_10000C4B0(0xD000000000000012, 0x80000001001994A0);
          if (v16)
          {
            sub_1000845C8(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v22);
          }
          else
          {
            long long v22 = 0u;
            long long v23 = 0u;
            unsigned __int8 v24 = -1;
          }
          swift_bridgeObjectRelease();
          if (v24 != 255)
          {
            v17._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v22);
            char v8 = (void *)*((void *)&v19 + 1);
            uint64_t v10 = v19;
            uint64_t v9 = 7004;
LABEL_12:
            sub_100029F68(v9, v10, v8, 0);
            swift_willThrow();
            goto LABEL_13;
          }
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
          unsigned __int8 v24 = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FAF9CLL);
      }
      uint64_t v2 = v19;
      sub_100006520((uint64_t)&v22);
LABEL_13:
      sub_10005F4F8((uint64_t)&v25, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      swift_endAccess();
      return v2;
  }
}

uint64_t sub_1000FAFAC@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000013, 0x80000001001995B0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001995B0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000013;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD88);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE6A8);
      sub_100029F68(7004, 0xD000000000000020, (void *)0x800000010019AB50, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000013, 0x80000001001995B0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD88);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000013, 0x80000001001995B0);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE6A8);
        sub_100029F68(7004, 0xD00000000000001ELL, (void *)0x800000010019AB30, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000013, 0x80000001001995B0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001995B0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD88);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000015;
        long long v26 = 0x800000010019AB80;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000013, 0x80000001001995B0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FB4E0);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FB4F0@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000012, 0x8000000100199570);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199570;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000012;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7D8);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE620);
      sub_100029F68(7004, 0xD00000000000001FLL, (void *)0x800000010019A0E0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000012, 0x8000000100199570);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7D8);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000012, 0x8000000100199570);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE620);
        sub_100029F68(7004, 0xD00000000000001DLL, (void *)0x800000010019A0C0, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000012, 0x8000000100199570);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199570;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DB7D8);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000014;
        long long v26 = 0x800000010019A100;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000012, 0x8000000100199570);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FBA24);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FBA34@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000015, 0x8000000100199530);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199530;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000015;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC900);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE648);
      sub_100029F68(7004, 0xD000000000000022, (void *)0x800000010019A430, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x8000000100199530);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC900);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x8000000100199530);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE648);
        sub_100029F68(7004, 0xD000000000000020, (void *)0x800000010019A400, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000015, 0x8000000100199530);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199530;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DC900);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000017;
        long long v26 = 0x800000010019A460;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000015, 0x8000000100199530);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FBF68);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FBF78@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001ALL, 0x8000000100199680);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199680;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001ALL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7D0);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE660);
      sub_100029F68(7004, 0xD000000000000027, (void *)0x800000010019A640, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199680);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7D0);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199680);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE660);
        sub_100029F68(7004, 0xD000000000000025, (void *)0x800000010019A610, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199680);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199680;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DB7D0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001CLL;
        long long v26 = 0x800000010019A670;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001ALL, 0x8000000100199680);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FC4ACLL);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FC4BC@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001ALL, 0x80000001001994C0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001994C0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001ALL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7B0);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE618);
      sub_100029F68(7004, 0xD000000000000027, (void *)0x800000010019A070, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001994C0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DB7B0);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001994C0);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE618);
        sub_100029F68(7004, 0xD000000000000025, (void *)0x800000010019A040, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x80000001001994C0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001994C0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DB7B0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001CLL;
        long long v26 = 0x800000010019A0A0;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001ALL, 0x80000001001994C0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FC9F0);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FCA00()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16))
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10000C4B0(0x6E41726564616552, 0xEF73636974796C61);
  if (v6)
  {
    sub_1000845C8(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v25);
  }
  else
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
  }
  swift_bridgeObjectRelease();
  if (v27 == 255)
  {
LABEL_10:
    uint64_t v8 = 7002;
LABEL_11:
    uint64_t v9 = 0x6E41726564616552;
    uint64_t v10 = (void *)0xEF73636974796C61;
    goto LABEL_12;
  }
  uint64_t v7 = sub_100104494((uint64_t)&v25, (uint64_t)&v22);
  switch(v24)
  {
    case 1u:
      ((void (*)(long long *__return_ptr, uint64_t))v22)(&v19, v7);
      if (v1) {
        goto LABEL_21;
      }
      uint64_t v13 = type metadata accessor for ReaderAnalytics();
      if (swift_dynamicCast()) {
        goto LABEL_26;
      }
      sub_100029F68(7004, 0xD00000000000001CLL, (void *)0x800000010019A000, 0);
      goto LABEL_18;
    case 2u:
      long long v12 = v22;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v19, 0x6E41726564616552, 0xEF73636974796C61);
      swift_endAccess();
      ((void (*)(long long *__return_ptr, uint64_t))v12)(&v19, v2);
      if (v1) {
        goto LABEL_17;
      }
      uint64_t v13 = type metadata accessor for ReaderAnalytics();
      if (swift_dynamicCast())
      {
LABEL_26:
        uint64_t v2 = v18;
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v18;
        char v21 = 0;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0x6E41726564616552, 0xEF73636974796C61);
        swift_endAccess();
        swift_release();
      }
      else
      {
        sub_100029F68(7004, 0xD00000000000001ALL, (void *)0x8000000100199FE0, 0);
        swift_willThrow();
LABEL_17:
        long long v19 = v12;
        char v21 = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0x6E41726564616552, 0xEF73636974796C61);
        swift_endAccess();
LABEL_18:
        swift_willThrow();
LABEL_21:
        swift_release();
      }
      goto LABEL_13;
    case 3u:
      uint64_t v8 = 7003;
      goto LABEL_11;
    default:
      type metadata accessor for ReaderAnalytics();
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v22);
        *(void *)&long long v19 = 0xD000000000000011;
        *((void *)&v19 + 1) = 0x800000010019A020;
        uint64_t v14 = *v3;
        if (*(void *)(*v3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_10000C4B0(0x6E41726564616552, 0xEF73636974796C61);
          if (v16)
          {
            sub_1000845C8(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v22);
          }
          else
          {
            long long v22 = 0u;
            long long v23 = 0u;
            unsigned __int8 v24 = -1;
          }
          swift_bridgeObjectRelease();
          if (v24 != 255)
          {
            v17._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v22);
            uint64_t v10 = (void *)*((void *)&v19 + 1);
            uint64_t v9 = v19;
            uint64_t v8 = 7004;
LABEL_12:
            sub_100029F68(v8, v9, v10, 0);
            swift_willThrow();
            goto LABEL_13;
          }
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
          unsigned __int8 v24 = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FCF74);
      }
      uint64_t v2 = v19;
      sub_100006520((uint64_t)&v22);
LABEL_13:
      sub_10005F4F8((uint64_t)&v25, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      swift_endAccess();
      return v2;
  }
}

uint64_t sub_1000FCF84@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void v25[4];
  char v26;
  long long v27;
  long long v28;
  unsigned __int8 v29;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    unsigned __int8 v27 = 0u;
    long long v28 = 0u;
    unint64_t v29 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0x7065654B656D6954, 0xEA00000000007265);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v27);
  }
  else
  {
    unsigned __int8 v27 = 0u;
    long long v28 = 0u;
    unint64_t v29 = -1;
  }
  swift_bridgeObjectRelease();
  if (v29 == 255)
  {
LABEL_10:
    uint64_t v10 = 7002;
LABEL_11:
    uint64_t v11 = 0x7065654B656D6954;
    long long v12 = (void *)0xEA00000000007265;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v27, (uint64_t)v25);
  switch(v26)
  {
    case 1:
      ((void (*)(void *__return_ptr, uint64_t))v25[0])(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD98);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE698);
      sub_100029F68(7004, 0xD000000000000017, (void *)0x800000010019AA50, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = (void (*)(void *__return_ptr, uint64_t))v25[0];
      uint64_t v13 = v25[1];
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0x7065654B656D6954, 0xEA00000000007265);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD98);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0x7065654B656D6954, 0xEA00000000007265);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE698);
        sub_100029F68(7004, 0xD000000000000015, (void *)0x800000010019AA30, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0x7065654B656D6954, 0xEA00000000007265);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD98);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)v25);
        strcpy((char *)v25, "TimeKeeper: ");
        BYTE5(v25[1]) = 0;
        HIWORD(v25[1]) = -5120;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0x7065654B656D6954, 0xEA00000000007265);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v11 = v25[0];
            long long v12 = (void *)v25[1];
            uint64_t v10 = 7004;
LABEL_12:
            sub_100029F68(v10, v11, v12, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FD4E8);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v27, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FD4F8@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001BLL, 0x80000001001995F0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001995F0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001BLL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD80);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE680);
      sub_100029F68(7004, 0xD000000000000028, (void *)0x800000010019A840, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001995F0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD80);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001995F0);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE680);
        sub_100029F68(7004, 0xD000000000000026, (void *)0x800000010019A810, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001BLL, 0x80000001001995F0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001995F0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD80);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001DLL;
        long long v26 = 0x800000010019A870;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001BLL, 0x80000001001995F0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FDA2CLL);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FDA3C()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16))
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10000C4B0(0xD000000000000015, 0x80000001001996A0);
  if (v6)
  {
    sub_1000845C8(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v25);
  }
  else
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
  }
  swift_bridgeObjectRelease();
  if (v27 == 255)
  {
LABEL_10:
    char v8 = (void *)0x80000001001996A0;
    uint64_t v9 = 7002;
LABEL_11:
    uint64_t v10 = 0xD000000000000015;
    goto LABEL_12;
  }
  uint64_t v7 = sub_100104494((uint64_t)&v25, (uint64_t)&v22);
  switch(v24)
  {
    case 1u:
      ((void (*)(long long *__return_ptr, uint64_t))v22)(&v19, v7);
      if (v1) {
        goto LABEL_21;
      }
      uint64_t v13 = type metadata accessor for PayAppletProfileCache();
      if (swift_dynamicCast()) {
        goto LABEL_26;
      }
      sub_100029F68(7004, 0xD000000000000022, (void *)0x800000010019A540, 0);
      goto LABEL_18;
    case 2u:
      long long v12 = v22;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v19, 0xD000000000000015, 0x80000001001996A0);
      swift_endAccess();
      ((void (*)(long long *__return_ptr, uint64_t))v12)(&v19, v2);
      if (v1) {
        goto LABEL_17;
      }
      uint64_t v13 = type metadata accessor for PayAppletProfileCache();
      if (swift_dynamicCast())
      {
LABEL_26:
        uint64_t v2 = v18;
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v18;
        char v21 = 0;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000015, 0x80000001001996A0);
        swift_endAccess();
        swift_release();
      }
      else
      {
        sub_100029F68(7004, 0xD000000000000020, (void *)0x800000010019A510, 0);
        swift_willThrow();
LABEL_17:
        long long v19 = v12;
        char v21 = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000015, 0x80000001001996A0);
        swift_endAccess();
LABEL_18:
        swift_willThrow();
LABEL_21:
        swift_release();
      }
      goto LABEL_13;
    case 3u:
      char v8 = (void *)0x80000001001996A0;
      uint64_t v9 = 7003;
      goto LABEL_11;
    default:
      type metadata accessor for PayAppletProfileCache();
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v22);
        *(void *)&long long v19 = 0xD000000000000017;
        *((void *)&v19 + 1) = 0x800000010019A570;
        uint64_t v14 = *v3;
        if (*(void *)(*v3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_10000C4B0(0xD000000000000015, 0x80000001001996A0);
          if (v16)
          {
            sub_1000845C8(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v22);
          }
          else
          {
            long long v22 = 0u;
            long long v23 = 0u;
            unsigned __int8 v24 = -1;
          }
          swift_bridgeObjectRelease();
          if (v24 != 255)
          {
            v17._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v22);
            char v8 = (void *)*((void *)&v19 + 1);
            uint64_t v10 = v19;
            uint64_t v9 = 7004;
LABEL_12:
            sub_100029F68(v9, v10, v8, 0);
            swift_willThrow();
            goto LABEL_13;
          }
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
          unsigned __int8 v24 = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FDF48);
      }
      uint64_t v2 = v19;
      sub_100006520((uint64_t)&v22);
LABEL_13:
      sub_10005F4F8((uint64_t)&v25, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      swift_endAccess();
      return v2;
  }
}

uint64_t sub_1000FDF58@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001ELL, 0x8000000100199640);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199640;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001ELL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC8F0);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE630);
      sub_100029F68(7004, 0xD00000000000002BLL, (void *)0x800000010019A240, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001ELL, 0x8000000100199640);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC8F0);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ELL, 0x8000000100199640);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE630);
        sub_100029F68(7004, 0xD000000000000029, (void *)0x800000010019A210, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ELL, 0x8000000100199640);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199640;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DC8F0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000020;
        long long v26 = 0x800000010019A270;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001ELL, 0x8000000100199640);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FE48CLL);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FE49C@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001FLL, 0x80000001001996C0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001996C0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001FLL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC8F8);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE650);
      sub_100029F68(7004, 0xD00000000000002CLL, (void *)0x800000010019A4B0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x80000001001996C0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DC8F8);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x80000001001996C0);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE650);
        sub_100029F68(7004, 0xD00000000000002ALL, (void *)0x800000010019A480, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001FLL, 0x80000001001996C0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001996C0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DC8F8);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000021;
        long long v26 = 0x800000010019A4E0;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001FLL, 0x80000001001996C0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FE9D0);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FE9E0@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001CLL, 0x8000000100199550);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199550;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001CLL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD90);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE668);
      sub_100029F68(7004, 0xD000000000000029, (void *)0x800000010019A6C0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001CLL, 0x8000000100199550);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD90);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001CLL, 0x8000000100199550);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE668);
        sub_100029F68(7004, 0xD000000000000027, (void *)0x800000010019A690, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001CLL, 0x8000000100199550);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199550;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD90);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001ELL;
        long long v26 = 0x800000010019A6F0;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001CLL, 0x8000000100199550);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FEF14);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FEF24@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000026, 0x8000000100199610);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199610;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000026;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD78);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE688);
      sub_100029F68(7004, 0xD000000000000033, (void *)0x800000010019A8D0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000026, 0x8000000100199610);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD78);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000026, 0x8000000100199610);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE688);
        sub_100029F68(7004, 0xD000000000000031, (void *)0x800000010019A890, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000026, 0x8000000100199610);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199610;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD78);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD000000000000028;
        long long v26 = 0x800000010019A910;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000026, 0x8000000100199610);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FF458);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_1000FF468()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16))
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10000C4B0(0x6174614465726F43, 0xEF726567616E614DLL);
  if (v6)
  {
    sub_1000845C8(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v25);
  }
  else
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
  }
  swift_bridgeObjectRelease();
  if (v27 == 255)
  {
LABEL_10:
    uint64_t v8 = 7002;
LABEL_11:
    uint64_t v9 = 0x6174614465726F43;
    uint64_t v10 = (void *)0xEF726567616E614DLL;
    goto LABEL_12;
  }
  uint64_t v7 = sub_100104494((uint64_t)&v25, (uint64_t)&v22);
  switch(v24)
  {
    case 1u:
      ((void (*)(long long *__return_ptr, uint64_t))v22)(&v19, v7);
      if (v1) {
        goto LABEL_21;
      }
      uint64_t v13 = type metadata accessor for CoreDataManager();
      if (swift_dynamicCast()) {
        goto LABEL_26;
      }
      sub_100029F68(7004, 0xD00000000000001CLL, (void *)0x800000010019AAF0, 0);
      goto LABEL_18;
    case 2u:
      long long v12 = v22;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v19, 0x6174614465726F43, 0xEF726567616E614DLL);
      swift_endAccess();
      ((void (*)(long long *__return_ptr, uint64_t))v12)(&v19, v2);
      if (v1) {
        goto LABEL_17;
      }
      uint64_t v13 = type metadata accessor for CoreDataManager();
      if (swift_dynamicCast())
      {
LABEL_26:
        uint64_t v2 = v18;
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v18;
        char v21 = 0;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0x6174614465726F43, 0xEF726567616E614DLL);
        swift_endAccess();
        swift_release();
      }
      else
      {
        sub_100029F68(7004, 0xD00000000000001ALL, (void *)0x800000010019AAD0, 0);
        swift_willThrow();
LABEL_17:
        long long v19 = v12;
        char v21 = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0x6174614465726F43, 0xEF726567616E614DLL);
        swift_endAccess();
LABEL_18:
        swift_willThrow();
LABEL_21:
        swift_release();
      }
      goto LABEL_13;
    case 3u:
      uint64_t v8 = 7003;
      goto LABEL_11;
    default:
      type metadata accessor for CoreDataManager();
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v22);
        *(void *)&long long v19 = 0xD000000000000011;
        *((void *)&v19 + 1) = 0x800000010019AB10;
        uint64_t v14 = *v3;
        if (*(void *)(*v3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_10000C4B0(0x6174614465726F43, 0xEF726567616E614DLL);
          if (v16)
          {
            sub_1000845C8(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v22);
          }
          else
          {
            long long v22 = 0u;
            long long v23 = 0u;
            unsigned __int8 v24 = -1;
          }
          swift_bridgeObjectRelease();
          if (v24 != 255)
          {
            v17._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v22);
            uint64_t v10 = (void *)*((void *)&v19 + 1);
            uint64_t v9 = v19;
            uint64_t v8 = 7004;
LABEL_12:
            sub_100029F68(v8, v9, v10, 0);
            swift_willThrow();
            goto LABEL_13;
          }
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
          unsigned __int8 v24 = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FF9DCLL);
      }
      uint64_t v2 = v19;
      sub_100006520((uint64_t)&v22);
LABEL_13:
      sub_10005F4F8((uint64_t)&v25, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      swift_endAccess();
      return v2;
  }
}

uint64_t sub_1000FF9EC()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16))
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10000C4B0(0xD000000000000010, 0x8000000100199460);
  if (v6)
  {
    sub_1000845C8(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v25);
  }
  else
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
  }
  swift_bridgeObjectRelease();
  if (v27 == 255)
  {
LABEL_10:
    uint64_t v8 = (void *)0x8000000100199460;
    uint64_t v9 = 7002;
LABEL_11:
    uint64_t v10 = 0xD000000000000010;
    goto LABEL_12;
  }
  uint64_t v7 = sub_100104494((uint64_t)&v25, (uint64_t)&v22);
  switch(v24)
  {
    case 1u:
      ((void (*)(long long *__return_ptr, uint64_t))v22)(&v19, v7);
      if (v1) {
        goto LABEL_21;
      }
      uint64_t v13 = type metadata accessor for MonitorAnalytics();
      if (swift_dynamicCast()) {
        goto LABEL_26;
      }
      sub_100029F68(7004, 0xD00000000000001DLL, (void *)0x800000010019A1D0, 0);
      goto LABEL_18;
    case 2u:
      long long v12 = v22;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v19, 0xD000000000000010, 0x8000000100199460);
      swift_endAccess();
      ((void (*)(long long *__return_ptr, uint64_t))v12)(&v19, v2);
      if (v1) {
        goto LABEL_17;
      }
      uint64_t v13 = type metadata accessor for MonitorAnalytics();
      if (swift_dynamicCast())
      {
LABEL_26:
        uint64_t v2 = v18;
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v18;
        char v21 = 0;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000010, 0x8000000100199460);
        swift_endAccess();
        swift_release();
      }
      else
      {
        sub_100029F68(7004, 0xD00000000000001BLL, (void *)0x800000010019A1B0, 0);
        swift_willThrow();
LABEL_17:
        long long v19 = v12;
        char v21 = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000010, 0x8000000100199460);
        swift_endAccess();
LABEL_18:
        swift_willThrow();
LABEL_21:
        swift_release();
      }
      goto LABEL_13;
    case 3u:
      uint64_t v8 = (void *)0x8000000100199460;
      uint64_t v9 = 7003;
      goto LABEL_11;
    default:
      type metadata accessor for MonitorAnalytics();
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v22);
        *(void *)&long long v19 = 0xD000000000000012;
        *((void *)&v19 + 1) = 0x800000010019A1F0;
        uint64_t v14 = *v3;
        if (*(void *)(*v3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_10000C4B0(0xD000000000000010, 0x8000000100199460);
          if (v16)
          {
            sub_1000845C8(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v22);
          }
          else
          {
            long long v22 = 0u;
            long long v23 = 0u;
            unsigned __int8 v24 = -1;
          }
          swift_bridgeObjectRelease();
          if (v24 != 255)
          {
            v17._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v22);
            uint64_t v8 = (void *)*((void *)&v19 + 1);
            uint64_t v10 = v19;
            uint64_t v9 = 7004;
LABEL_12:
            sub_100029F68(v9, v10, v8, 0);
            swift_willThrow();
            goto LABEL_13;
          }
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
          unsigned __int8 v24 = -1;
        }
        __break(1u);
        JUMPOUT(0x1000FFEF8);
      }
      uint64_t v2 = v19;
      sub_100006520((uint64_t)&v22);
LABEL_13:
      sub_10005F4F8((uint64_t)&v25, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      swift_endAccess();
      return v2;
  }
}

uint64_t sub_1000FFF08()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(*v3 + 16))
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10000C4B0(0xD000000000000011, 0x8000000100199480);
  if (v6)
  {
    sub_1000845C8(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v25);
  }
  else
  {
    long long v26 = 0u;
    long long v25 = 0u;
    unsigned __int8 v27 = -1;
  }
  swift_bridgeObjectRelease();
  if (v27 == 255)
  {
LABEL_10:
    uint64_t v8 = (void *)0x8000000100199480;
    uint64_t v9 = 7002;
LABEL_11:
    uint64_t v10 = 0xD000000000000011;
    goto LABEL_12;
  }
  uint64_t v7 = sub_100104494((uint64_t)&v25, (uint64_t)&v22);
  switch(v24)
  {
    case 1u:
      ((void (*)(long long *__return_ptr, uint64_t))v22)(&v19, v7);
      if (v1) {
        goto LABEL_21;
      }
      uint64_t v13 = type metadata accessor for SecurityAnalytics();
      if (swift_dynamicCast()) {
        goto LABEL_26;
      }
      sub_100029F68(7004, 0xD00000000000001ELL, (void *)0x800000010019A960, 0);
      goto LABEL_18;
    case 2u:
      long long v12 = v22;
      long long v19 = 0u;
      long long v20 = 0u;
      char v21 = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v19, 0xD000000000000011, 0x8000000100199480);
      swift_endAccess();
      ((void (*)(long long *__return_ptr, uint64_t))v12)(&v19, v2);
      if (v1) {
        goto LABEL_17;
      }
      uint64_t v13 = type metadata accessor for SecurityAnalytics();
      if (swift_dynamicCast())
      {
LABEL_26:
        uint64_t v2 = v18;
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v18;
        char v21 = 0;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000011, 0x8000000100199480);
        swift_endAccess();
        swift_release();
      }
      else
      {
        sub_100029F68(7004, 0xD00000000000001CLL, (void *)0x800000010019A940, 0);
        swift_willThrow();
LABEL_17:
        long long v19 = v12;
        char v21 = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v19, 0xD000000000000011, 0x8000000100199480);
        swift_endAccess();
LABEL_18:
        swift_willThrow();
LABEL_21:
        swift_release();
      }
      goto LABEL_13;
    case 3u:
      uint64_t v8 = (void *)0x8000000100199480;
      uint64_t v9 = 7003;
      goto LABEL_11;
    default:
      type metadata accessor for SecurityAnalytics();
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v22);
        *(void *)&long long v19 = 0xD000000000000013;
        *((void *)&v19 + 1) = 0x800000010019A980;
        uint64_t v14 = *v3;
        if (*(void *)(*v3 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v15 = sub_10000C4B0(0xD000000000000011, 0x8000000100199480);
          if (v16)
          {
            sub_1000845C8(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v22);
          }
          else
          {
            long long v22 = 0u;
            long long v23 = 0u;
            unsigned __int8 v24 = -1;
          }
          swift_bridgeObjectRelease();
          if (v24 != 255)
          {
            v17._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v17);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v22);
            uint64_t v8 = (void *)*((void *)&v19 + 1);
            uint64_t v10 = v19;
            uint64_t v9 = 7004;
LABEL_12:
            sub_100029F68(v9, v10, v8, 0);
            swift_willThrow();
            goto LABEL_13;
          }
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
          unsigned __int8 v24 = -1;
        }
        __break(1u);
        JUMPOUT(0x100100414);
      }
      uint64_t v2 = v19;
      sub_100006520((uint64_t)&v22);
LABEL_13:
      sub_10005F4F8((uint64_t)&v25, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      swift_endAccess();
      return v2;
  }
}

uint64_t sub_100100424@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD000000000000019, 0x80000001001993C0);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x80000001001993C0;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD000000000000019;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD58);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE638);
      sub_100029F68(7004, 0xD000000000000026, (void *)0x800000010019A2D0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x80000001001993C0);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD58);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x80000001001993C0);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE638);
        sub_100029F68(7004, 0xD000000000000024, (void *)0x800000010019A2A0, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD000000000000019, 0x80000001001993C0);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x80000001001993C0;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD58);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001BLL;
        long long v26 = 0x800000010019A300;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD000000000000019, 0x80000001001993C0);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x100100958);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_100100968@<X0>(uint64_t a1@<X8>)
{
  void (*v14)(void *__return_ptr, uint64_t);
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  char v19;
  Swift::String v20;
  long long v21;
  long long v22;
  uint64_t v23;
  void v24[4];
  void (*v25)(void *__return_ptr, uint64_t);
  unint64_t v26;
  char v27;
  long long v28;
  long long v29;
  unsigned __int8 v30;

  uint64_t v3 = v1;
  swift_beginAccess();
  os_unfair_recursive_lock_lock_with_options();
  swift_endAccess();
  unint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC9SPREngine5Depot_components);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16))
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_10000C4B0(0xD00000000000001ALL, 0x8000000100199400);
  if (v8)
  {
    sub_1000845C8(*(void *)(v6 + 56) + 40 * v7, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    unint64_t v29 = 0u;
    uint64_t v30 = -1;
  }
  swift_bridgeObjectRelease();
  if (v30 == 255)
  {
LABEL_10:
    uint64_t v10 = (void *)0x8000000100199400;
    uint64_t v11 = 7002;
LABEL_11:
    uint64_t v12 = 0xD00000000000001ALL;
    goto LABEL_12;
  }
  uint64_t v9 = sub_100104494((uint64_t)&v28, (uint64_t)&v25);
  switch(v27)
  {
    case 1:
      v25(v24, v9);
      if (v2) {
        goto LABEL_22;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD68);
      if (swift_dynamicCast()) {
        goto LABEL_21;
      }
      long long v23 = 0;
      char v21 = 0u;
      long long v22 = 0u;
      sub_10005F4F8((uint64_t)&v21, &qword_1001DE678);
      sub_100029F68(7004, 0xD000000000000027, (void *)0x800000010019A7C0, 0);
      goto LABEL_17;
    case 2:
      uint64_t v14 = v25;
      unint64_t v13 = v26;
      char v21 = 0u;
      long long v22 = 0u;
      LOBYTE(v23) = 3;
      swift_beginAccess();
      sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199400);
      swift_endAccess();
      v14(v24, v3);
      if (v2) {
        goto LABEL_16;
      }
      unint64_t v15 = sub_100003EB0(&qword_1001DDD68);
      if (swift_dynamicCast())
      {
LABEL_21:
        sub_10001F1F0(&v21, a1);
        *((void *)&v22 + 1) = v15;
        *(void *)&char v21 = swift_allocObject();
        sub_100009300(a1, v21 + 16);
        LOBYTE(v23) = 0;
        swift_beginAccess();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199400);
        swift_endAccess();
      }
      else
      {
        long long v23 = 0;
        char v21 = 0u;
        long long v22 = 0u;
        sub_10005F4F8((uint64_t)&v21, &qword_1001DE678);
        sub_100029F68(7004, 0xD000000000000025, (void *)0x800000010019A790, 0);
        swift_willThrow();
LABEL_16:
        *(void *)&char v21 = v14;
        *((void *)&v21 + 1) = v13;
        LOBYTE(v23) = 2;
        swift_beginAccess();
        swift_retain();
        sub_1001059B8((uint64_t)&v21, 0xD00000000000001ALL, 0x8000000100199400);
        swift_endAccess();
LABEL_17:
        swift_willThrow();
      }
LABEL_22:
      swift_release();
      goto LABEL_23;
    case 3:
      uint64_t v10 = (void *)0x8000000100199400;
      uint64_t v11 = 7003;
      goto LABEL_11;
    default:
      sub_100003EB0(&qword_1001DDD68);
      if ((swift_dynamicCast() & 1) == 0)
      {
        sub_100006520((uint64_t)&v25);
        long long v25 = (void (*)(void *__return_ptr, uint64_t))0xD00000000000001CLL;
        long long v26 = 0x800000010019A7F0;
        Swift::String v17 = *v5;
        if (*(void *)(*v5 + 16))
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_10000C4B0(0xD00000000000001ALL, 0x8000000100199400);
          if (v19)
          {
            sub_1000845C8(*(void *)(v17 + 56) + 40 * v18, (uint64_t)&v21);
          }
          else
          {
            char v21 = 0u;
            long long v22 = 0u;
            LOBYTE(v23) = -1;
          }
          swift_bridgeObjectRelease();
          if (v23 != 255)
          {
            v20._uint64_t countAndFlagsBits = sub_1000D5390();
            String.append(_:)(v20);
            swift_bridgeObjectRelease();
            sub_1001044FC((uint64_t)&v21);
            uint64_t v12 = (uint64_t)v25;
            uint64_t v10 = (void *)v26;
            uint64_t v11 = 7004;
LABEL_12:
            sub_100029F68(v11, v12, v10, 0);
            swift_willThrow();
            goto LABEL_23;
          }
        }
        else
        {
          char v21 = 0u;
          long long v22 = 0u;
          LOBYTE(v23) = -1;
        }
        __break(1u);
        JUMPOUT(0x100100E9CLL);
      }
      sub_10001F1F0(&v21, a1);
      sub_100006520((uint64_t)&v25);
LABEL_23:
      sub_10005F4F8((uint64_t)&v28, &qword_1001DE600);
      swift_beginAccess();
      os_unfair_recursive_lock_unlock();
      return swift_endAccess();
  }
}

uint64_t sub_100100EAC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DE4C0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE4C0);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100100F74()
{
  uint64_t v0 = type metadata accessor for Settings();
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Settings.default.getter((uint64_t)v3);
  type metadata accessor for Depot();
  swift_allocObject();
  uint64_t v4 = sub_1000D5594((uint64_t)v3);
  type metadata accessor for Primer();
  uint64_t v5 = swift_allocObject();
  sub_100003EB0(&qword_1001D94A8);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)(v5 + 40) = v6;
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = v4;
  type metadata accessor for Provider();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v4;
  *(void *)(v5 + 32) = v7;
  static Primer.shared = v5;
  return swift_retain();
}

uint64_t *Primer.shared.unsafeMutableAddressor()
{
  if (qword_1001D92C0 != -1) {
    swift_once();
  }
  return &static Primer.shared;
}

uint64_t static Primer.shared.getter()
{
  if (qword_1001D92C0 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t Primer.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x5B72656D697250;
}

uint64_t Primer.storageSetting.getter()
{
  swift_retain();
  sub_1000FAFAC((uint64_t)v3);
  swift_release();
  uint64_t v0 = *sub_100006788(v3, v3[3]) + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting;
  uint64_t v1 = *(void *)v0;
  sub_100101284(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  sub_100006520((uint64_t)v3);
  return v1;
}

uint64_t sub_100101284(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t Primer.__allocating_init(settings:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Settings();
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v23[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v23[-1] - v8;
  if (qword_1001D92B8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DE4C0);
  sub_10004391C(a1, (uint64_t)v9);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    uint64_t v14 = Settings.description.getter();
    uint64_t v22 = sub_100005EB8(v14, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100043980((uint64_t)v9);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Primer.init with Settings: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100043980((uint64_t)v9);
  }

  sub_10004391C(a1, (uint64_t)v6);
  type metadata accessor for Depot();
  swift_allocObject();
  uint64_t v16 = sub_1000D5594((uint64_t)v6);
  swift_beginAccess();
  unsigned int v17 = atomic_fetch_add_explicit(dword_1001E1128, 1u, memory_order_relaxed) + 1;
  swift_endAccess();
  type metadata accessor for Primer();
  uint64_t v18 = swift_allocObject();
  sub_100003EB0(&qword_1001D94A8);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 24) = 0;
  *(void *)(v19 + 16) = 0;
  *(void *)(v18 + 40) = v19;
  *(_DWORD *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v16;
  type metadata accessor for Provider();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v16;
  *(void *)(v18 + 32) = v20;
  swift_retain();
  sub_100043980(a1);
  return v18;
}

uint64_t type metadata accessor for Primer()
{
  return self;
}

unint64_t Primer.configuration.getter()
{
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10018D630;
  *(void *)(inited + 32) = 0xD00000000000001ALL;
  *(void *)(inited + 40) = 0x8000000100199C30;
  uint64_t v2 = OBJC_IVAR____TtC9SPREngine5Depot_settings;
  uint64_t v3 = *(void *)(v0 + 24) + OBJC_IVAR____TtC9SPREngine5Depot_settings;
  uint64_t v4 = (int *)type metadata accessor for Settings();
  *(unsigned char *)(inited + 48) = *(unsigned char *)(v3 + v4[7]);
  *(void *)(inited + 72) = &type metadata for Bool;
  *(void *)(inited + 80) = 0xD000000000000020;
  *(void *)(inited + 88) = 0x8000000100199C50;
  *(void *)(inited + 96) = *(void *)(*(void *)(v0 + 24) + v2 + v4[8]);
  *(void *)(inited + 120) = &type metadata for Double;
  *(void *)(inited + 128) = 0xD00000000000001BLL;
  *(void *)(inited + 136) = 0x8000000100199C80;
  *(void *)(inited + 144) = *(void *)(*(void *)(v0 + 24) + v2 + v4[9]);
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 176) = 0xD000000000000018;
  *(void *)(inited + 184) = 0x8000000100199CA0;
  *(void *)(inited + 192) = *(void *)(*(void *)(v0 + 24) + v2 + v4[10]);
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 224) = 0xD000000000000029;
  *(void *)(inited + 232) = 0x8000000100199CC0;
  *(void *)(inited + 240) = *(void *)(*(void *)(v0 + 24) + v2 + v4[11]);
  *(void *)(inited + 264) = &type metadata for Double;
  *(void *)(inited + 272) = 0xD000000000000025;
  *(void *)(inited + 280) = 0x8000000100199CF0;
  *(void *)(inited + 288) = *(void *)(*(void *)(v0 + 24) + v2 + v4[12]);
  *(void *)(inited + 312) = &type metadata for Double;
  *(void *)(inited + 320) = 0xD000000000000027;
  *(void *)(inited + 328) = 0x8000000100199D20;
  uint64_t v5 = *(void *)(*(void *)(v0 + 24) + v2 + v4[13]);
  uint64_t v6 = sub_100003EB0((uint64_t *)&unk_1001DA570);
  *(void *)(inited + 336) = v5;
  *(void *)(inited + 360) = v6;
  *(void *)(inited + 368) = 0xD000000000000025;
  *(void *)(inited + 376) = 0x8000000100199D50;
  *(void *)(inited + 384) = *(void *)(*(void *)(v0 + 24) + v2 + v4[14]);
  *(void *)(inited + 408) = v6;
  *(void *)(inited + 416) = 0xD00000000000001ALL;
  *(void *)(inited + 424) = 0x8000000100199D80;
  *(unsigned char *)(inited + 432) = *(unsigned char *)(*(void *)(v0 + 24) + v2 + v4[15]);
  *(void *)(inited + 456) = &type metadata for Bool;
  *(void *)(inited + 464) = 0xD000000000000013;
  *(void *)(inited + 472) = 0x8000000100199DA0;
  *(unsigned char *)(inited + 480) = *(unsigned char *)(*(void *)(v0 + 24) + v2 + v4[16]);
  *(void *)(inited + 504) = &type metadata for Bool;
  *(void *)(inited + 512) = 0x2E726F74696E6F4DLL;
  *(void *)(inited + 520) = 0xEF64656C62616E45;
  char v7 = *(unsigned char *)(*(void *)(v0 + 24) + v2 + v4[17]);
  *(void *)(inited + 552) = &type metadata for Bool;
  *(unsigned char *)(inited + 528) = v7;
  *(void *)(inited + 560) = 0xD00000000000002ELL;
  *(void *)(inited + 568) = 0x8000000100199DC0;
  char v8 = *(unsigned char *)(*(void *)(v0 + 24) + v2 + v4[18]);
  *(void *)(inited + 600) = &type metadata for Bool;
  *(unsigned char *)(inited + 576) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v36 = sub_100004D6C(inited);
  swift_retain();
  sub_1000FAFAC((uint64_t)v34);
  swift_release();
  uint64_t v9 = sub_100006788(v34, v35);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v33 = v10;
  uint64_t v11 = sub_10008CDF4(v32);
  os_log_type_t v12 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  v12(v11, *v9 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v10);
  sub_100006510(v32, v31);
  unint64_t v13 = v36;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10000CE84(v31, 0xD000000000000017, 0x8000000100199DF0, isUniquelyReferenced_nonNull_native);
  unint64_t v36 = v13;
  swift_bridgeObjectRelease();
  unint64_t v15 = sub_100006788(v34, v35);
  uint64_t v33 = v10;
  uint64_t v16 = sub_10008CDF4(v32);
  v12(v16, *v15 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v10);
  sub_100006510(v32, v31);
  unint64_t v17 = v36;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10000CE84(v31, 0xD00000000000001ALL, 0x8000000100199E10, v18);
  unint64_t v36 = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_100006788(v34, v35);
  uint64_t v33 = v10;
  uint64_t v20 = sub_10008CDF4(v32);
  v12(v20, *v19 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v10);
  sub_100006510(v32, v31);
  unint64_t v21 = v36;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_10000CE84(v31, 0xD000000000000015, 0x8000000100190900, v22);
  unint64_t v36 = v21;
  swift_bridgeObjectRelease();
  sub_100006520((uint64_t)v34);
  if (qword_1001D92B8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100003E78(v23, (uint64_t)qword_1001DE4C0);
  unsigned __int8 v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    long long v26 = (uint8_t *)swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)long long v26 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v27 = Dictionary.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    *(void *)&v31[0] = sub_100005EB8(v27, v29, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Primer.configuration: %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  return v36;
}

uint64_t Primer.getProvider()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  a1[3] = type metadata accessor for Provider();
  a1[4] = &off_1001CB498;
  *a1 = v3;

  return swift_retain();
}

uint64_t Primer.makeSecureChannel(owner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  swift_retain();
  sub_1000FE9E0((uint64_t)v9);
  uint64_t result = swift_release();
  if (!v3)
  {
    char v8 = sub_100006788(v9, v9[3]);
    sub_100049500(a1, a2, (void *)(*v8 + 136), a3);
    return sub_100006520((uint64_t)v9);
  }
  return result;
}

uint64_t Primer.getMPOCMonitorManagerPublic()@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  sub_1000FBF78((uint64_t)v8);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    uint64_t v6 = sub_100006788(v8, v9);
    a1[3] = v4;
    a1[4] = *(void *)(v5 + 8);
    char v7 = sub_10008CDF4(a1);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    return sub_100006520((uint64_t)v8);
  }
  return result;
}

Swift::Void __swiftcall Primer.attach(isPOS:)(Swift::Bool isPOS)
{
  if (qword_1001D92B8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DE4C0);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 8) = 1024;
    type metadata accessor for Settings();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Primer.attach() isPOS: %{BOOL}d, depot.settings.monitorEnabled: %{BOOL}d", (uint8_t *)v4, 0xEu);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v5 = swift_release();
  }
  __chkstk_darwin(v5, v6);
  char v8 = (uint64_t *)&v7[4];
  uint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_100104454(v8);
  os_unfair_lock_unlock(v9);
}

void sub_10010216C(uint64_t *a1, char a2, uint64_t a3)
{
  uint64_t v6 = &qword_1001D9000;
  if (!*a1 && (a2 & 1) != 0)
  {
    uint64_t v7 = *(void *)(a3 + 24) + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    if (*(unsigned char *)(v7 + *(int *)(type metadata accessor for Settings() + 68)) == 1)
    {
      sub_1000AE8E4();
      if (!v3) {
        goto LABEL_32;
      }
      uint64_t v70 = v3;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      sub_10003C5B8();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      id v8 = [v69 domain];
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      if (v9 == String.init(cString:)() && v11 == v12)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
LABEL_23:

LABEL_24:
          swift_errorRelease();
          if (qword_1001D92B8 != -1) {
            swift_once();
          }
          uint64_t v27 = type metadata accessor for Logger();
          sub_100003E78(v27, (uint64_t)qword_1001DE4C0);
          swift_errorRetain();
          swift_errorRetain();
          unint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v28, v29))
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();

LABEL_32:
            swift_retain();
            sub_1000FBF78((uint64_t)&v65);
            swift_release();
            sub_100006788(&v65, v67);
            sub_10010C9F0();
            sub_100006520((uint64_t)&v65);
            if (v6[87] != -1) {
              swift_once();
            }
            uint64_t v34 = type metadata accessor for Logger();
            sub_100003E78(v34, (uint64_t)qword_1001DE4C0);
            swift_retain_n();
            uint64_t v35 = Logger.logObject.getter();
            os_log_type_t v36 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v35, v36))
            {
              unint64_t v37 = (uint8_t *)swift_slowAlloc();
              uint64_t v70 = swift_slowAlloc();
              *(_DWORD *)unint64_t v37 = 136315138;
              uint64_t v64 = (uint64_t)(v37 + 4);
              uint64_t v65 = 0x5B72656D697250;
              unint64_t v66 = 0xE700000000000000;
              LODWORD(v69) = *(_DWORD *)(a3 + 16);
              swift_retain();
              v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v38);
              swift_bridgeObjectRelease();
              v39._uint64_t countAndFlagsBits = 93;
              v39._object = (void *)0xE100000000000000;
              String.append(_:)(v39);
              swift_release();
              uint64_t v65 = sub_100005EB8(v65, v66, &v70);
              uint64_t v6 = &qword_1001D9000;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s: Background MPOC monitoring started", v37, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release_n();
            }
            if (v6[87] != -1) {
              swift_once();
            }
            uint64_t v40 = type metadata accessor for Logger();
            sub_100003E78(v40, (uint64_t)qword_1001DE4C0);
            uint64_t v41 = Logger.logObject.getter();
            os_log_type_t v42 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v41, v42))
            {
              uint64_t v43 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v43 = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, v42, "start certificate background renewal", v43, 2u);
              swift_slowDealloc();
            }

            swift_retain();
            sub_1000FC4BC((uint64_t)&v65);
            swift_release();
            sub_100006788(&v65, v67);
            sub_10000FF00();
            sub_100006520((uint64_t)&v65);
            goto LABEL_42;
          }
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          uint64_t v64 = 0;
          os_log_type_t v31 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v30 = 138412290;
          swift_errorRetain();
          uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v6 = &qword_1001D9000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v31 = v65;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "failed to restore pairing %@", v30, 0xCu);
          sub_100003EB0((uint64_t *)&unk_1001DA540);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_31:
          swift_errorRelease();
          goto LABEL_32;
        }
      }
      unint64_t v20 = (unint64_t)[v69 code];
      if ((v20 & 0x8000000000000000) != 0 || HIDWORD(v20))
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      if (v20 == 8)
      {
        swift_errorRelease();
        if (qword_1001D92B8 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_100003E78(v21, (uint64_t)qword_1001DE4C0);
        char v22 = v69;
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v23, v24))
        {
          os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
          unint64_t v63 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v25 = 138412290;
          uint64_t v65 = (uint64_t)v22;
          uint64_t v64 = 0;
          long long v26 = v22;
          uint64_t v6 = &qword_1001D9000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unint64_t v63 = v22;

          _os_log_impl((void *)&_mh_execute_header, v23, v24, "security violation %@", v25, 0xCu);
          sub_100003EB0((uint64_t *)&unk_1001DA540);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v23 = v22;
        }

        swift_retain();
        sub_1000FA008((uint64_t)&v65);
        swift_release();
        uint64_t v32 = v67;
        uint64_t v33 = v68;
        sub_10001F1A0((uint64_t)&v65, v67);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 88))(1, v32, v33);

        sub_100006520((uint64_t)&v65);
        goto LABEL_31;
      }
      goto LABEL_23;
    }
  }
  if (qword_1001D92B8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003E78(v13, (uint64_t)qword_1001DE4C0);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = v3;
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v65 = 0x5B72656D697250;
    unint64_t v66 = 0xE700000000000000;
    LODWORD(v69) = *(_DWORD *)(a3 + 16);
    swift_retain();
    v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 93;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_release();
    uint64_t v65 = sub_100005EB8(0x5B72656D697250, 0xE700000000000000, &v70);
    uint64_t v6 = &qword_1001D9000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: Background MPOC monitoring is disabled", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
LABEL_42:
  uint64_t v44 = *a1 + 1;
  if (*a1 == -1)
  {
    __break(1u);
    goto LABEL_64;
  }
  *a1 = v44;
  if (qword_1001D9410 != -1) {
LABEL_64:
  }
    swift_once();
  uint64_t v45 = static GlobalState.shared;
  [*(id *)(static GlobalState.shared + 72) lock];
  while (*(uint64_t *)(v45 + 96) > 0 || *(unsigned char *)(v45 + 80) == 1)
    [*(id *)(v45 + 72) wait];
  uint64_t v46 = *(void *)(v45 + 88);
  BOOL v47 = __OFADD__(v46, 1);
  uint64_t v48 = v46 + 1;
  if (v47)
  {
    __break(1u);
    goto LABEL_66;
  }
  *(void *)(v45 + 88) = v48;
  [*(id *)(v45 + 72) unlock];
  uint64_t v49 = *(void *)(v45 + 64);
  [*(id *)(v45 + 72) lock];
  uint64_t v50 = *(void *)(v45 + 88);
  BOOL v47 = __OFSUB__(v50, 1);
  uint64_t v51 = v50 - 1;
  if (v47)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  uint64_t v64 = v44;
  *(void *)(v45 + 88) = v51;
  if (!v51) {
    [*(id *)(v45 + 72) broadcast];
  }
  [*(id *)(v45 + 72) unlock];
  BOOL v47 = __OFADD__(v49, 1);
  uint64_t v52 = v49 + 1;
  if (v47) {
    goto LABEL_67;
  }
  [*(id *)(v45 + 72) lock];
  uint64_t v53 = *(void *)(v45 + 96);
  BOOL v47 = __OFADD__(v53, 1);
  uint64_t v54 = v53 + 1;
  if (v47)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  *(void *)(v45 + 96) = v54;
  while (*(uint64_t *)(v45 + 88) > 0 || *(unsigned char *)(v45 + 80) == 1)
    [*(id *)(v45 + 72) wait];
  uint64_t v55 = *(void *)(v45 + 96);
  BOOL v47 = __OFSUB__(v55, 1);
  uint64_t v56 = v55 - 1;
  if (!v47)
  {
    *(void *)(v45 + 96) = v56;
    *(unsigned char *)(v45 + 80) = 1;
    [*(id *)(v45 + 72) unlock];
    *(void *)(v45 + 64) = v52;
    [*(id *)(v45 + 72) lock];
    *(unsigned char *)(v45 + 80) = 0;
    [*(id *)(v45 + 72) broadcast];
    [*(id *)(v45 + 72) unlock];
    if (v6[87] == -1) {
      goto LABEL_60;
    }
    goto LABEL_70;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  swift_once();
LABEL_60:
  uint64_t v57 = type metadata accessor for Logger();
  sub_100003E78(v57, (uint64_t)qword_1001DE4C0);
  swift_retain_n();
  long long v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 136315394;
    uint64_t v65 = 0x5B72656D697250;
    unint64_t v66 = 0xE700000000000000;
    LODWORD(v69) = *(_DWORD *)(a3 + 16);
    swift_retain();
    v61._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._uint64_t countAndFlagsBits = 93;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    swift_release();
    uint64_t v65 = sub_100005EB8(v65, v66, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 12) = 2048;
    uint64_t v65 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "%s: Client attached. currentAttachCount: (%lu)", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

Swift::Void __swiftcall Primer.detach(isPOS:)(Swift::Bool isPOS)
{
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 40);
  uint64_t v3 = (uint64_t *)&v2[4];
  uint64_t v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_100104474(v3);
  os_unfair_lock_unlock(v4);
}

void sub_10010357C(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v5 = *a1;
  if (qword_1001D92B8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DE4C0);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v43 = v5;
    uint64_t v46 = 0x5B72656D697250;
    unint64_t v47 = 0xE700000000000000;
    int v49 = *(_DWORD *)(a2 + 16);
    swift_retain();
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 93;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    swift_release();
    sub_100005EB8(0x5B72656D697250, 0xE700000000000000, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2048;
    uint64_t v46 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: Detaching client. currentAttachCount: (%lu)", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = *a1 - 1;
  if (!*a1)
  {
    __break(1u);
    goto LABEL_38;
  }
  *a1 = v12;
  if (qword_1001D9410 != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v13 = static GlobalState.shared;
  [*(id *)(static GlobalState.shared + 72) lock:v43];
  while (*(uint64_t *)(v13 + 96) > 0 || *(unsigned char *)(v13 + 80) == 1)
    [*(id *)(v13 + 72) wait];
  uint64_t v14 = *(void *)(v13 + 88);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    goto LABEL_40;
  }
  *(void *)(v13 + 88) = v16;
  [*(id *)(v13 + 72) unlock];
  uint64_t v17 = *(void *)(v13 + 64);
  [*(id *)(v13 + 72) lock];
  uint64_t v18 = *(void *)(v13 + 88);
  BOOL v15 = __OFSUB__(v18, 1);
  uint64_t v19 = v18 - 1;
  if (v15)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  *(void *)(v13 + 88) = v19;
  if (!v19) {
    [*(id *)(v13 + 72) broadcast];
  }
  [*(id *)(v13 + 72) unlock];
  BOOL v15 = __OFSUB__(v17, 1);
  uint64_t v20 = v17 - 1;
  if (v15) {
    goto LABEL_41;
  }
  [*(id *)(v13 + 72) lock];
  uint64_t v21 = *(void *)(v13 + 96);
  BOOL v15 = __OFADD__(v21, 1);
  uint64_t v22 = v21 + 1;
  if (v15)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  *(void *)(v13 + 96) = v22;
  while (*(uint64_t *)(v13 + 88) > 0 || *(unsigned char *)(v13 + 80) == 1)
    [*(id *)(v13 + 72) wait];
  uint64_t v23 = *(void *)(v13 + 96);
  BOOL v15 = __OFSUB__(v23, 1);
  uint64_t v24 = v23 - 1;
  if (v15) {
    goto LABEL_43;
  }
  *(void *)(v13 + 96) = v24;
  *(unsigned char *)(v13 + 80) = 1;
  [*(id *)(v13 + 72) unlock];
  *(void *)(v13 + 64) = v20;
  [*(id *)(v13 + 72) lock];
  *(unsigned char *)(v13 + 80) = 0;
  [*(id *)(v13 + 72) broadcast];
  [*(id *)(v13 + 72) unlock];
  if (!v12
    && (a3 & 1) != 0
    && (uint64_t v25 = a2,
        uint64_t v26 = *(void *)(a2 + 24) + OBJC_IVAR____TtC9SPREngine5Depot_settings,
        int v27 = *(unsigned __int8 *)(v26 + *(int *)(type metadata accessor for Settings() + 68)),
        a2 = v25,
        v27 == 1))
  {
    swift_retain();
    sub_1000FBF78((uint64_t)&v46);
    if (v45)
    {
      swift_release();
      swift_retain_n();
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        uint64_t v46 = 0x5B72656D697250;
        unint64_t v47 = 0xE700000000000000;
        int v49 = *(_DWORD *)(v25 + 16);
        swift_retain();
        v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v32._uint64_t countAndFlagsBits = 93;
        v32._object = (void *)0xE100000000000000;
        String.append(_:)(v32);
        swift_release();
        uint64_t v46 = sub_100005EB8(v46, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s: Missing MPOCMonitorManager instance", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        swift_release_n();
      }
    }
    else
    {
      swift_release();
      sub_100006788(&v46, v48);
      sub_10010D5D8();
      sub_100006520((uint64_t)&v46);
      swift_retain_n();
      Swift::String v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315138;
        uint64_t v46 = 0x5B72656D697250;
        unint64_t v47 = 0xE700000000000000;
        int v49 = *(_DWORD *)(v25 + 16);
        swift_retain();
        v41._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        v42._uint64_t countAndFlagsBits = 93;
        v42._object = (void *)0xE100000000000000;
        String.append(_:)(v42);
        swift_release();
        uint64_t v46 = sub_100005EB8(v46, v47, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s: Background MPOC monitoring stopped", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
    }
    swift_retain();
    sub_1000FC4BC((uint64_t)&v46);
    swift_release();
    sub_100006788(&v46, v48);
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    sub_100006520((uint64_t)&v46);
  }
  else
  {
    swift_retain_n();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v46 = 0x5B72656D697250;
      unint64_t v47 = 0xE700000000000000;
      int v49 = *(_DWORD *)(a2 + 16);
      swift_retain();
      v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = 93;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      swift_release();
      uint64_t v46 = sub_100005EB8(0x5B72656D697250, 0xE700000000000000, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s: Background MPOC monitoring is disabled", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t Primer.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t Primer.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t sub_10010414C()
{
  return Primer.configuration.getter();
}

uint64_t sub_100104170()
{
  return Primer.storageSetting.getter();
}

void sub_100104194(Swift::Bool a1)
{
}

void sub_1001041B8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)v0 + 40);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_100104588(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_10010421C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 32);
  a1[3] = type metadata accessor for Provider();
  a1[4] = &off_1001CB498;
  *a1 = v3;

  return swift_retain();
}

uint64_t sub_100104270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  swift_retain();
  sub_1000FE9E0((uint64_t)v9);
  uint64_t result = swift_release();
  if (!v3)
  {
    os_log_type_t v8 = sub_100006788(v9, v9[3]);
    sub_100049500(a1, a2, (void *)(*v8 + 136), a3);
    return sub_100006520((uint64_t)v9);
  }
  return result;
}

uint64_t sub_100104308@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  sub_1000FBF78((uint64_t)v8);
  uint64_t result = swift_release();
  if (!v1)
  {
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    uint64_t v6 = sub_100006788(v8, v9);
    a1[3] = v4;
    a1[4] = *(void *)(v5 + 8);
    uint64_t v7 = sub_10008CDF4(a1);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(v7, v6, v4);
    return sub_100006520((uint64_t)v8);
  }
  return result;
}

uint64_t sub_1001043CC()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x5B72656D697250;
}

void sub_100104454(uint64_t *a1)
{
  sub_10010216C(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100104474(uint64_t *a1)
{
  sub_10010357C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100104494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DE600);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001044FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100104550()
{
  sub_100006520(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100104588(uint64_t *a1)
{
}

unint64_t sub_1001045F0(int a1)
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  sub_100003EB0((uint64_t *)&unk_1001DD3C0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100186100;
  *(void *)(v2 + 56) = &type metadata for UInt32;
  *(void *)(v2 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v2 + 32) = a1;
  v3._uint64_t countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000017;
}

uint64_t sub_1001046D0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x5441545345545441 && a2 == 0xEB000000004E4F49
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0x52554749464E4F43 && a2 == 0xED00004E4F495441
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (a1 == 0x49524F54494E4F4DLL && a2 == 0xEA0000000000474ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0x544E4F435F4E4950 && a2 == 0xEE0052454C4C4F52
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 4;
  }
  if (a1 == 0x524544414552 && a2 == 0xE600000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 5;
  }
  if (a1 == 0x435F455255434553 && a2 == 0xEE004C454E4E4148
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 6;
  }
  uint64_t result = 7;
  if (a1 != 0xD000000000000011 || a2 != 0x800000010019ABC0)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return 7;
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001049A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001DC8D0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  Swift::String v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    unint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    sub_1000065D0(v5, v6);
    sub_1000065D0(v7, v8);
    unint64_t result = sub_1001618E4(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    Swift::String v11 = (uint64_t *)(v2[6] + 16 * result);
    *Swift::String v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100104ACC(uint64_t a1)
{
  return sub_100104C60(a1, &qword_1001DE6F8, &qword_1001DE700, (uint64_t (*)(void))sub_1001619A4);
}

unint64_t sub_100104AF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001D9B28);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100006724(v6, (uint64_t)&v15, &qword_1001D9B30);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10000C4B0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    Swift::String v11 = (uint64_t *)(v3[6] + 16 * result);
    *Swift::String v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_10001F1F0(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100104C38(uint64_t a1)
{
  return sub_100104C60(a1, &qword_1001DE6B0, &qword_1001DE6B8, sub_100161AE8);
}

unint64_t sub_100104C60(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100006724(v11, (uint64_t)v18, a3);
    char v12 = v18[0];
    unint64_t result = a4(v18[0]);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v8[6] + result) = v12;
    unint64_t result = sub_100008908((uint64_t)&v19, v8[7] + 32 * result);
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    void v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100104D90(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001DE6C0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10000C4B0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100104EA4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001DC8C8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_10000C4B0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100104FC0(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001DE740);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    id v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001DC918);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  id v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = (uint64_t)v6 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100006724(v13, (uint64_t)v6, &qword_1001DE740);
    uint64_t v15 = *v6;
    uint64_t v16 = v6[1];
    unint64_t result = sub_10000C4B0(*v6, v16);
    if (v18) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    uint64_t *v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for StopWatch();
    unint64_t result = sub_10005AE78(v10, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    void v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001051A8(uint64_t a1)
{
  return sub_100104C60(a1, &qword_1001DE708, &qword_1001DE710, sub_100161B14);
}

unint64_t sub_1001051D0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001DC968);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_10000C4B0(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001052FC(uint64_t a1)
{
  return sub_100104C60(a1, &qword_1001DE6D0, &qword_1001DE6D8, sub_100161B40);
}

unint64_t sub_100105324(uint64_t a1)
{
  return sub_100105374(a1, &qword_1001DC930, &qword_1001DE6E0, sub_100161C4C);
}

unint64_t sub_10010534C(uint64_t a1)
{
  return sub_100105374(a1, &qword_1001DE6E8, &qword_1001DE6F0, (uint64_t (*)(uint64_t))sub_100161C4C);
}

unint64_t sub_100105374(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    char v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  char v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100006724(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_100006510(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    void v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001054A4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001DC8E0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100006724(v6, (uint64_t)&v15, &qword_1001DE748);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10000C4B0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100065EE4((uint64_t)&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t NamedError.init(_:reason:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v30[1] = a7;
  v30[2] = *(void *)(a6 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v15);
  uint64_t v17 = (char *)v30 - v16;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 16))(a1, a5, a6);
  uint64_t v35 = v18;
  if (a3)
  {
    v32._uint64_t countAndFlagsBits = 8250;
    v32._object = (void *)0xE200000000000000;
    v19._uint64_t countAndFlagsBits = a2;
    v19._object = a3;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v21;
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v22;
  unint64_t v23 = sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
    swift_errorRetain();
    uint64_t v27 = _convertErrorToNSError(_:)();
    uint64_t v33 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    v32._uint64_t countAndFlagsBits = v27;
    sub_100006510(&v32, v31);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30[4] = v23;
    sub_10000CE84(v31, v24, v26, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, AssociatedTypeWitness);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_errorRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_1001058E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100006510((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_10000CE84(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10005F4F8(a1, &qword_1001DD3F0);
    sub_1000657C4(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_10005F4F8((uint64_t)v9, &qword_1001DD3F0);
  }
}

uint64_t sub_1001059B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    sub_10005F4F8(a1, &qword_1001DE600);
    sub_1000659B0(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_10005F4F8((uint64_t)v9, &qword_1001DE600);
  }
  else
  {
    sub_100065EE4(a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100105EBC((uint64_t)v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100105A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100003EB0(&qword_1001DE6C8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for StopWatch();
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 48))(a1, 1) == 1)
  {
    sub_10005F4F8(a1, &qword_1001DE6C8);
    sub_100065B9C(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease();
    return sub_10005F4F8((uint64_t)v11, &qword_1001DE6C8);
  }
  else
  {
    sub_10005AE78(a1, (uint64_t)v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_100106148((uint64_t)v15, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v20;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100105C50(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  char v4 = a2 & 1;
  if (*(void *)(a1 + 24))
  {
    sub_100006510((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_100106788(v14, v4, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10005F4F8(a1, &qword_1001DD3F0);
    unint64_t v7 = sub_100161CE0(v4);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_100080C34();
        uint64_t v11 = v13;
      }
      sub_100006510((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      sub_10007F700(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return sub_10005F4F8((uint64_t)v14, &qword_1001DD3F0);
  }
}

uint64_t sub_100105D64(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_1001618E4(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = sub_100006628(*(void *)v21, *(void *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10007FBC0();
    goto LABEL_7;
  }
  sub_10007C7CC(v17, a5 & 1);
  uint64_t v23 = sub_1001618E4(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10007F8BC(v14, a3, a4, a1, a2, v20);

  return sub_1000065D0(a3, a4);
}

uint64_t sub_100105EBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = sub_10000C4B0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10007FD88();
      goto LABEL_7;
    }
    sub_10007CAE4(v15, a4 & 1);
    unint64_t v21 = sub_10000C4B0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    return sub_100106A04(a1, v19);
  }
LABEL_13:
  sub_10007F90C(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

void sub_100106008(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = sub_10000C4B0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10007FF74();
    goto LABEL_7;
  }
  sub_10007CE0C(v15, a4 & 1);
  unint64_t v20 = sub_10000C4B0(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10007F97C(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

uint64_t sub_100106148(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = sub_10000C4B0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100080128();
      goto LABEL_7;
    }
    sub_10007D11C(v15, a4 & 1);
    unint64_t v22 = sub_10000C4B0(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for StopWatch() - 8) + 72) * v12;
    return sub_100106A60(a1, v20);
  }
LABEL_13:
  sub_10007F980(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001062AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_10000C4B0(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      char v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_unknownObjectRelease();
      *char v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000803A8();
    goto LABEL_7;
  }
  sub_10007D4D4(v17, a5 & 1);
  unint64_t v23 = sub_10000C4B0(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10007F8BC(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100106400(__int16 a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_100161C08(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(_WORD *)(v16[7] + 2 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10008056C();
    goto LABEL_7;
  }
  sub_10007D7E0(result, a3 & 1);
  uint64_t result = sub_100161C08(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_10007FA18(v10, a2, a1, v16);
}

_OWORD *sub_10010651C(_OWORD *a1, void *a2, char a3)
{
  char v4 = (void **)v3;
  unint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_100161C4C(a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_100080700();
      goto LABEL_7;
    }
    sub_10007DA80(v12, a3 & 1);
    uint64_t v18 = sub_100161C4C(a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for SPRConfigurationStatusKey(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    BOOL v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_100006520((uint64_t)v16);
    return sub_100006510(a1, v16);
  }
LABEL_13:
  sub_10007FA5C(v9, (uint64_t)a2, a1, v15);

  return a2;
}

unint64_t sub_100106660(uint64_t a1, char a2, char a3)
{
  char v4 = (void **)v3;
  char v7 = a2 & 1;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_100161CE0(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    BOOL v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100080A90();
    goto LABEL_7;
  }
  sub_10007E0EC(v13, a3 & 1);
  unint64_t v19 = sub_100161CE0(v7);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  BOOL v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return sub_10007FAC4(v10, v7, a1, v16);
}

_OWORD *sub_100106788(_OWORD *a1, char a2, char a3)
{
  char v4 = (void **)v3;
  char v7 = a2 & 1;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_100161CE0(a2 & 1);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100080C34();
      goto LABEL_7;
    }
    sub_10007E3C0(v13, a3 & 1);
    unint64_t v19 = sub_100161CE0(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    sub_100006520((uint64_t)v17);
    return sub_100006510(a1, v17);
  }
LABEL_13:

  return sub_10007FB0C(v10, v7, a1, v16);
}

uint64_t sub_1001068C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000C4B0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100080DF4();
    goto LABEL_7;
  }
  sub_10007E698(v15, a4 & 1);
  unint64_t v21 = sub_10000C4B0(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_10007F97C(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100106A04(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100106A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StopWatch();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100106AC4(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE758, sub_100161878);
}

unint64_t sub_100106AE4(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE718, sub_100161878);
}

unint64_t sub_100106B04(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE750, sub_100161878);
}

unint64_t sub_100106B24(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE768, sub_100161878);
}

unint64_t sub_100106B44(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE720, sub_100161878);
}

unint64_t sub_100106B64(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE728, (uint64_t (*)(uint64_t))sub_100161878);
}

unint64_t sub_100106B84(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE770, sub_100161878);
}

unint64_t sub_100106BA4(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE730, sub_100161878);
}

unint64_t sub_100106BC4(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE778, sub_100161878);
}

unint64_t sub_100106BE4(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE760, sub_100161878);
}

unint64_t sub_100106C04(void *a1)
{
  return sub_100106C24(a1, &qword_1001DE780, sub_100161878);
}

unint64_t sub_100106C24(void *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100003EB0(a2);
  uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  unint64_t result = a3(v7);
  if (v11)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v6;
  }
  unint64_t v12 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v6[6] + 8 * result) = v7;
    uint64_t v13 = (void *)(v6[7] + 16 * result);
    *uint64_t v13 = v8;
    v13[1] = v9;
    uint64_t v14 = v6[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      break;
    }
    _OWORD v6[2] = v16;
    if (!--v3) {
      goto LABEL_8;
    }
    uint64_t v17 = v12 + 3;
    uint64_t v7 = *(v12 - 2);
    uint64_t v8 = *(v12 - 1);
    uint64_t v18 = *v12;
    swift_bridgeObjectRetain();
    unint64_t result = a3(v7);
    unint64_t v12 = v17;
    uint64_t v9 = v18;
    if (v19) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100106D3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100003EB0(&qword_1001DC950);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (unint64_t i = (_WORD *)(a1 + 40); ; i += 8)
    {
      uint64_t v5 = *((void *)i - 1);
      __int16 v6 = *i;
      unint64_t result = sub_100161C08(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_WORD *)(v3[7] + 2 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100106E14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100003EB0(&qword_1001DC910);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 40)
    {
      sub_100006724(i, (uint64_t)v11, &qword_1001DE738);
      char v5 = v11[0];
      unint64_t result = sub_100161CE0(v11[0]);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      unint64_t result = (unint64_t)sub_100006510(&v12, (_OWORD *)(v3[7] + 32 * result));
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100106F18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100003EB0(&qword_1001DC908);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_100161CE0(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    long long v12 = v8 + 2;
    char v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_retain();
    unint64_t result = sub_100161CE0(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100107020@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_100107094@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  char v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10010710C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DE788);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE788);
  if (qword_1001D9250 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1010);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001071D4()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DE7A0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE7A0);
  if (qword_1001D9018 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D70);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10010729C(uint64_t a1)
{
  return sub_1001072EC(a1, 0xD00000000000001ELL, 0x800000010019AD00, &qword_1001E1130, (unint64_t *)algn_1001E1138);
}

uint64_t sub_1001072C4(uint64_t a1)
{
  return sub_1001072EC(a1, 0x6975752D746F6F62, 0xE900000000000064, &qword_1001E1140, (unint64_t *)algn_1001E1148);
}

uint64_t sub_1001072EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  BOOL v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v13 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a4 = v11;
    *a5 = v13;
  }
  return result;
}

uint64_t sub_100107400()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  __int16 v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  BOOL v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003E78(v11, (uint64_t)qword_1001DE788);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    char v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v19 = v2;
    aBlock[0] = v15;
    uint64_t v18 = v6;
    *(_DWORD *)char v14 = 136315138;
    uint64_t v21 = sub_100005EB8(0x74696E696564, 0xE600000000000000, aBlock);
    __int16 v6 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v19;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_getObjectType();
  aBlock[4] = (uint64_t)BitString.init(data:unusedBits:);
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000048D8;
  id aBlock[3] = (uint64_t)&unk_1001CAF18;
  uint64_t v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  sub_10000491C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v7);
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  if ((*(unsigned char *)(v1 + 16) & 1) == 0) {
    OS_dispatch_source.resume()();
  }

  swift_unknownObjectRelease();
  sub_100006520(v1 + 64);
  sub_100006520(v1 + 104);
  sub_100006520(v1 + 144);
  swift_unknownObjectRelease();
  sub_100006520(v1 + 200);
  sub_100006520(v1 + 240);
  sub_100006520(v1 + 280);
  swift_release();
  sub_100006520(v1 + 328);
  return v1;
}

uint64_t sub_1001077E8()
{
  sub_100107400();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MPOCDefaultMonitorManager()
{
  return self;
}

uint64_t sub_100107840()
{
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DE788);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    sub_100005EB8(0x63746142646E6573, 0xEB00000000292868, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1001079F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  BOOL v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v3 + 24);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_100113514;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001CAEF0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_100113F54((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100006814((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

void sub_100107CB8(char a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  BOOL v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)v35 - v12;
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  unint64_t v23 = (char *)v35 - v22;
  if (*(unsigned char *)(v4 + 40))
  {
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100003E78(v24, (uint64_t)qword_1001DE788);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Cannot send logs when device is not online.", v27, 2u);
      swift_slowDealloc();
    }

    sub_100112D64();
    swift_allocError();
    *(void *)uint64_t v28 = 0;
    *(unsigned char *)(v28 + 8) = 1;
    swift_willThrow();
  }
  else
  {
    uint64_t v38 = v21;
    sub_100108154(a1 & 1, v20);
    if (!v2)
    {
      if (*(unsigned char *)(v4 + 16) == 1)
      {
        v35[2] = *(void *)(v4 + 32);
        uint64_t v36 = v29;
        v35[1] = swift_getObjectType();
        static DispatchTime.now()();
        + infix(_:_:)();
        Swift::String v37 = *(void (**)(char *, uint64_t))(v38 + 8);
        v38 += 8;
        v37(v18, v14);
        uint64_t v30 = *(void (**)(char *, void, uint64_t))(v39 + 104);
        v30(v13, enum case for DispatchTimeInterval.never(_:), v6);
        *(void *)BOOL v10 = 0;
        v30(v10, enum case for DispatchTimeInterval.nanoseconds(_:), v6);
        OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
        Swift::String v31 = *(void (**)(char *, uint64_t))(v39 + 8);
        v31(v10, v6);
        v31(v13, v6);
        v37(v23, v14);
        uint64_t v29 = v36;
      }
      if (!v29)
      {
        sub_100006788((void *)(*(void *)(v4 + 320) + 16), *(void *)(*(void *)(v4 + 320) + 40));
        sub_100042F68((uint64_t)&off_1001C5CC8);
        return;
      }
      uint64_t v3 = v29;
      sub_100006788((void *)(*(void *)(v4 + 320) + 16), *(void *)(*(void *)(v4 + 320) + 40));
      swift_errorRetain();
      sub_100042F68((uint64_t)&off_1001C5CA0);
      swift_willThrow();
      swift_errorRelease();
    }
    uint64_t v42 = v3;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      uint64_t v32 = v40;
      char v33 = v41;
      if (v41 == 1) {
        uint64_t v32 = qword_10018D7E8[v40];
      }
      sub_100112D64();
      swift_allocError();
      *(void *)uint64_t v34 = v32;
      *(unsigned char *)(v34 + 8) = v33;
      swift_willThrow();
    }
    swift_errorRelease();
  }
}

double sub_100108154(uint64_t a1, uint64_t a2)
{
  os_log_t v305 = v3;
  int v295 = __chkstk_darwin(a1, a2);
  uint64_t v5 = sub_100003EB0(&qword_1001D9AE8);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  uint64_t v293 = (uint64_t)&v250 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v283 = (uint64_t)&v250 - v10;
  uint64_t v301 = type metadata accessor for Date();
  uint64_t v287 = *(void *)(v301 - 8);
  uint64_t v12 = __chkstk_darwin(v301, v11);
  __int16 v303 = (char *)&v250 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  v294 = (char *)&v250 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v288 = (char *)&v250 - v18;
  uint64_t v285 = type metadata accessor for DateInterval();
  uint64_t v292 = *(void *)(v285 - 8);
  __chkstk_darwin(v285, v19);
  uint64_t v300 = (char *)&v250 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v289 = type metadata accessor for OSSignpostError();
  uint64_t v286 = *(char **)(v289 - 8);
  __chkstk_darwin(v289, v21);
  unint64_t v23 = (char *)&v250 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for OSSignpostID();
  uint64_t v298 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  uint64_t v28 = (char *)&v250 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v26, v29);
  uint64_t v32 = (char *)&v250 - v31;
  __chkstk_darwin(v30, v33);
  uint64_t v35 = (char *)&v250 - v34;
  uint64_t v37 = v2[28];
  uint64_t v36 = v2[29];
  __int16 v306 = (char *)(v2 + 25);
  __int16 v307 = v2;
  sub_100006788(v2 + 25, v37);
  os_log_t v38 = v305;
  uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v37, v36);
  if (v38)
  {
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v42 = sub_100003E78(v41, (uint64_t)qword_1001DE788);
    swift_errorRetain();
    swift_errorRetain();
    os_log_t v305 = v42;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 138412290;
      swift_errorRetain();
      uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
      v317[0] = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v46 = v47;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Could not collect batch: %@.", v45, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v52 = v306;
    uint64_t v51 = v307;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Attempting to remove the stored files.", v55, 2u);
      swift_slowDealloc();
    }

    uint64_t v56 = v51[28];
    uint64_t v57 = v51[29];
    sub_100006788(v52, v56);
    (*(void (**)(uint64_t, uint64_t))(v57 + 32))(v56, v57);
    uint64_t v50 = 0;
    if (qword_1001D9210 != -1) {
LABEL_186:
    }
      swift_once();
    unsigned __int8 v58 = byte_1001E0FBE;
    unint64_t v59 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
    sub_100006788(v51 + 35, v51[38]);
    id v60 = sub_1000D422C(v58);
    uint64_t v61 = v51[28];
    uint64_t v62 = v51[29];
    sub_100006788(v52, v61);
    (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v62 + 8))(4326145, v60, v59, v61, v62);
    swift_bridgeObjectRelease();
    if (!v50)
    {
      sub_100112D64();
      swift_allocError();
      *(void *)uint64_t v216 = 11;
      *(unsigned char *)(v216 + 8) = 1;
      swift_willThrow();
    }
    swift_errorRelease();
    return v4;
  }
  uint64_t v48 = v298;
  int v281 = v35;
  uint64_t v282 = v23;
  v291 = v32;
  long long v273 = v28;
  uint64_t v296 = v24;
  if (!v39)
  {
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_100003E78(v63, (uint64_t)qword_1001DE788);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v64, v65))
    {
      unint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "No monitoring events to send.", v66, 2u);
      swift_slowDealloc();
    }

    sub_100112D64();
    swift_allocError();
    *(void *)uint64_t v67 = 1;
    *(unsigned char *)(v67 + 8) = 1;
    swift_willThrow();
    return v4;
  }
  uint64_t v277 = v40;
  uint64_t v270 = swift_retain();
  int v49 = v307;
  uint64_t v50 = 0;
  unint64_t v290 = sub_10010B5E4(v270);
  double v68 = *((double *)v49 + 6);
  sub_100112B6C((uint64_t)v319);
  sub_100029CEC((uint64_t)v319, (uint64_t)v318, &qword_1001DE9B0);
  if (qword_1001D92D0 != -1) {
    swift_once();
  }
  uint64_t v302 = (char *)&v310[38] + 2;
  uint64_t v279 = v49 + 13;
  uint64_t v280 = v49 + 35;
  uint64_t v69 = type metadata accessor for OSSignposter();
  uint64_t v297 = 0;
  uint64_t v304 = 0;
  uint64_t v299 = 0;
  uint64_t v275 = (void (**)(char *, char *, uint64_t))(v48 + 16);
  uint64_t v276 = v69;
  id v284 = (void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v259 = (uint64_t (**)(char *, uint64_t))(v286 + 88);
  int v258 = enum case for OSSignpostError.doubleEnd(_:);
  unint64_t v257 = v314;
  uint64_t v252 = (void (**)(char *, uint64_t))(v292 + 8);
  uint64_t v253 = (void (**)(char *, uint64_t))(v286 + 8);
  Swift::Bool v269 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v287 + 48);
  uint64_t v262 = (void (**)(char *, uint64_t, uint64_t))(v287 + 32);
  uint64_t v260 = *(void *)&v68 & 0xFFFFFFFFFFFFFLL;
  uint64_t v261 = *(void *)&v68 & 0x7FF0000000000000;
  long long v266 = &v308[16];
  long long v267 = &v309[289];
  long long v264 = (void (**)(char *, uint64_t))(v287 + 8);
  long long v265 = &v308[320];
  v274 = &v310[2];
  uint64_t v250 = &v311[289];
  uint64_t v251 = &v311[272];
  os_log_t v254 = &v308[8];
  *(void *)&long long v70 = 138412290;
  long long v263 = v70;
  *((void *)&v70 + 1) = 2;
  long long v268 = xmmword_100186100;
  *(void *)&long long v70 = 136315138;
  long long v256 = v70;
  uint64_t v255 = (char *)&type metadata for Any + 8;
  double v4 = v68;
  uint64_t v298 = v270;
  for (LODWORD(v292) = 1; ; LODWORD(v292) = v51)
  {
    os_log_t v305 = v50;
    uint64_t v71 = sub_100003E78(v276, (uint64_t)qword_1001DE7A0);
    unint64_t v72 = v281;
    static OSSignpostID.exclusive.getter();
    uint64_t v287 = v71;
    uint64_t v73 = OSSignposter.logHandle.getter();
    os_signpost_type_t v74 = static os_signpost_type_t.begin.getter();
    char v75 = OS_os_log.signpostsEnabled.getter();
    uint64_t v76 = v275;
    if (v75)
    {
      unint64_t v77 = *v275;
      __int16 v78 = v291;
      uint64_t v79 = v296;
      (*v275)(v291, v72, v296);
      unint64_t v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v80 = 0;
      os_signpost_id_t v81 = OSSignpostID.rawValue.getter();
      os_signpost_type_t v82 = v74;
      unint64_t v83 = v78;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v73, v82, v81, "monitor-send-logs", "begin send monitoring logs", v80, 2u);
      swift_slowDealloc();

      uint64_t v84 = v284;
      (*v284)(v78, v79);
      os_log_t v85 = v77;
      long long v86 = v282;
    }
    else
    {

      os_log_t v85 = *v76;
      long long v86 = v282;
      uint64_t v79 = v296;
      unint64_t v83 = v291;
      uint64_t v84 = v284;
    }
    v278 = v85;
    v85(v83, v72, v79);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v87 = OSSignpostIntervalState.init(id:isOpen:)();
    long long v88 = *v84;
    (*v84)(v72, v79);
    long long v89 = v307;
    sub_10010B030((uint64_t)v290, (uint64_t)v320);
    sub_100029CEC((uint64_t)v320, (uint64_t)v317, &qword_1001DE9C8);
    sub_100029CEC((uint64_t)v320, (uint64_t)v321, &qword_1001DE9C8);
    if (sub_100112DCC((uint64_t)v321) == 1)
    {
      sub_100029CEC((uint64_t)v317, (uint64_t)v315, &qword_1001DE9C8);
      uint64_t v90 = (const void *)BitString.init(data:unusedBits:)(v315);
      memcpy(v316, v90, 0x142uLL);
      sub_100112DD4();
      swift_willThrowTypedImpl();
      uint64_t v91 = swift_allocError();
      memcpy(v92, v90, 0x142uLL);
      swift_release();
      uint64_t v50 = v305;
      uint64_t v52 = v303;
      unsigned int v93 = v292;
      goto LABEL_47;
    }
    char v272 = v88;
    sub_100029CEC((uint64_t)v317, (uint64_t)v315, &qword_1001DE9C8);
    uint64_t v286 = (char *)BitString.init(data:unusedBits:)(v315);
    memcpy(v324, v286, sizeof(v324));
    char v94 = OSSignposter.logHandle.getter();
    os_log_type_t v95 = v273;
    OSSignpostIntervalState.signpostID.getter();
    int v96 = static os_signpost_type_t.end.getter();
    char v97 = OS_os_log.signpostsEnabled.getter();
    uint64_t v271 = v87;
    if (v97)
    {
      LODWORD(v287) = v96;
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v98 = v289;
      int v99 = (*v259)(v86, v289);
      long long v100 = "[Error] Interval already ended";
      if (v99 != v258)
      {
        (*v253)(v86, v98);
        long long v100 = "end send monitoring logs";
      }
      uint64_t v101 = v291;
      uint64_t v102 = v296;
      v278(v291, v95, v296);
      uint64_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v103 = 0;
      os_signpost_id_t v104 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v94, (os_signpost_type_t)v287, v104, "monitor-send-logs", v100, v103, 2u);
      swift_slowDealloc();

      uint64_t v105 = v102;
      unint64_t v106 = v272;
      v272(v95, v102);
      uint64_t v107 = v101;
    }
    else
    {

      uint64_t v107 = v95;
      uint64_t v105 = v296;
      unint64_t v106 = v272;
    }
    v106(v107, v105);
    unint64_t v108 = v286;
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v109 = type metadata accessor for Logger();
    uint64_t v110 = sub_100003E78(v109, (uint64_t)qword_1001DE788);
    sub_100029CEC((uint64_t)v317, (uint64_t)v310, &qword_1001DE9C8);
    uint64_t v111 = BitString.init(data:unusedBits:)(v310);
    sub_1001130F8(v111);
    sub_1001130F8((uint64_t)v108);
    uint64_t v287 = v110;
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v112, v113))
    {
      uint64_t v114 = (uint8_t *)swift_slowAlloc();
      *(void *)__int16 v308 = swift_slowAlloc();
      *(_DWORD *)uint64_t v114 = v256;
      uint64_t v115 = sub_10013AAE8();
      uint64_t v313 = sub_100005EB8(v115, v116, (uint64_t *)v308);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100113180((uint64_t)v320);
      sub_100113180((uint64_t)v320);
      _os_log_impl((void *)&_mh_execute_header, v112, v113, "A&M Backend Response: %s", v114, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v108 = v286;
      swift_slowDealloc();
    }
    else
    {
      sub_100113180((uint64_t)v320);
      sub_100113180((uint64_t)v320);
    }

    char v117 = v307;
    char v118 = v295;
    uint64_t v119 = (uint64_t)v300;
    uint64_t v120 = v301;
    uint64_t v121 = v294;
    sub_100029CEC((uint64_t)v318, (uint64_t)v312, &qword_1001DE9B0);
    sub_100029CEC((uint64_t)v312, (uint64_t)&v313, &qword_1001DE9B0);
    if (sub_100112C94((uint64_t)&v313) == 1) {
      goto LABEL_40;
    }
    sub_100029CEC((uint64_t)v318, (uint64_t)v311, &qword_1001DA130);
    sub_100029CEC((uint64_t)v311, (uint64_t)v308, &qword_1001DA130);
    if (sub_100029A28((uint64_t)v308) == 1) {
      goto LABEL_40;
    }
    sub_100029CEC((uint64_t)v311, (uint64_t)v309, &qword_1001DA130);
    memcpy(v323, v309, sizeof(v323));
    sub_100068C50((uint64_t)v309);
    sub_1000EC7BC(v119);
    sub_100113450((uint64_t)v311, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100029ABC);
    uint64_t v122 = v117[16];
    uint64_t v123 = v117[17];
    sub_100006788(v279, v122);
    uint64_t v124 = v122;
    id v125 = v288;
    (*(void (**)(uint64_t))(*(void *)(v123 + 8) + 8))(v124);
    LOBYTE(v123) = DateInterval.contains(_:)();
    (*v264)(v125, v120);
    (*v252)(v300, v285);
    if ((v123 & 1) == 0)
    {
LABEL_40:
      uint64_t v126 = *((void *)v108 + 36);
      sub_100029CEC((uint64_t)v108, (uint64_t)v309, &qword_1001DA130);
      *(void *)&v309[272] = v126;
      *(void *)&v309[280] = 0;
      v309[288] = 0;
      *long long v267 = 1;
      memcpy(v311, v309, 0x122uLL);
      BitString.init(data:unusedBits:)(v311);
      sub_100029CEC((uint64_t)v318, (uint64_t)v308, &qword_1001DE9B0);
      sub_100113450((uint64_t)v108, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
      swift_bridgeObjectRetain();
      sub_100112E28((uint64_t)v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
      sub_100029CEC((uint64_t)v311, (uint64_t)v318, &qword_1001DE9B0);
    }
    if (v118)
    {
      sub_100029CEC((uint64_t)v318, (uint64_t)v311, &qword_1001DE9B0);
      *(void *)__int16 v308 = 0;
      *(_WORD *)&v308[8] = 1;
      sub_100029CEC((uint64_t)v311, (uint64_t)v266, &qword_1001DE9B0);
      *(_WORD *)&v308[306] = 0;
      v308[308] = 0;
      *(void *)&v308[312] = 0;
      *long long v265 = 1;
LABEL_46:
      v308[321] = 0;
      sub_100112DD4();
      uint64_t v91 = swift_allocError();
      memcpy(v129, v308, 0x142uLL);
      sub_100112E28((uint64_t)v311, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112EBC);
      swift_willThrow();
      sub_100113180((uint64_t)v320);
      swift_release();
      uint64_t v50 = 0;
      long long v89 = v117;
      unsigned int v93 = v292;
      uint64_t v52 = v303;
      goto LABEL_47;
    }
    sub_100029CEC((uint64_t)v108, (uint64_t)v309, &qword_1001DA130);
    if sub_100029A28((uint64_t)v309) == 1 || (v108[280])
    {
      sub_100112D64();
      uint64_t v127 = swift_allocError();
      *(void *)uint64_t v128 = 7;
      *(unsigned char *)(v128 + 8) = 1;
      sub_100029CEC((uint64_t)v318, (uint64_t)v311, &qword_1001DE9B0);
      *(void *)__int16 v308 = v127;
      *(_WORD *)&v308[8] = 1;
      sub_100029CEC((uint64_t)v311, (uint64_t)v266, &qword_1001DE9B0);
      *(_WORD *)&v308[306] = 0;
      v308[308] = 0;
      *(void *)&v308[312] = 0;
      *long long v265 = 1;
      goto LABEL_46;
    }
    uint64_t v192 = *((void *)v108 + 34);
    sub_100006788(v279, v117[16]);
    uint64_t v193 = v283;
    sub_1000238E4(v283);
    if ((*v269)(v193, 1, v120) == 1)
    {
      sub_10005F4F8(v193, &qword_1001D9AE8);
      uint64_t v194 = Logger.logObject.getter();
      os_log_type_t v195 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v194, v195))
      {
        uint64_t v196 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v196 = 0;
        _os_log_impl((void *)&_mh_execute_header, v194, v195, "Could not calculate secure now, using default send rate", v196, 2u);
        swift_slowDealloc();
      }

      double v4 = v68;
    }
    else
    {
      (*v262)(v121, v193, v120);
      Date.timeIntervalSince1970.getter();
      double v213 = (double)v192 - v212 + -300.0;
      if (v213 <= 0.0) {
        double v213 = v68;
      }
      if (v260) {
        double v214 = v213;
      }
      else {
        double v214 = v68;
      }
      if (v261 != 0x7FF0000000000000) {
        double v214 = v68;
      }
      double v4 = v213 <= v68 ? v213 : v214;
      (*v264)(v121, v120);
    }
    long long v89 = v117;
    unsigned int v93 = v292;
    os_log_t v215 = v305;
    sub_100110980();
    uint64_t v91 = (uint64_t)v215;
    uint64_t v52 = v303;
    if (!v215) {
      break;
    }
    sub_100113180((uint64_t)v320);
    swift_release();
    uint64_t v50 = 0;
LABEL_47:
    v314[36] = v91;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    int v130 = swift_dynamicCast();
    long long v131 = v302;
    if (!v130)
    {
      swift_errorRelease();
      if (qword_1001D92C8 != -1) {
        swift_once();
      }
      uint64_t v218 = type metadata accessor for Logger();
      sub_100003E78(v218, (uint64_t)qword_1001DE788);
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v219 = Logger.logObject.getter();
      os_log_type_t v220 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v219, v220))
      {
        char v221 = v93;
        uint64_t v222 = swift_slowAlloc();
        uint64_t v223 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v222 = v263;
        swift_errorRetain();
        uint64_t v224 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v222 + 4) = v224;
        *uint64_t v223 = v224;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v219, v220, "Unexpected error during unpacking A&M backend response: %@", (uint8_t *)v222, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        if ((v221 & 1) == 0) {
          goto LABEL_170;
        }
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        if ((v93 & 1) == 0) {
          goto LABEL_170;
        }
      }
      goto LABEL_161;
    }
    swift_errorRelease();
    swift_errorRelease();
    memcpy(v310, v315, 0x142uLL);
    BOOL v132 = v304 < 1;
    uint64_t v133 = v310[0];
    sub_100029CEC((uint64_t)v318, (uint64_t)v316, &qword_1001DE9B0);
    uint64_t v299 = v133;
    swift_errorRetain();
    long long v134 = v274;
    sub_100112E28((uint64_t)v274, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112EBC);
    sub_100112E28((uint64_t)v316, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
    sub_100029CEC((uint64_t)v134, (uint64_t)v318, &qword_1001DE9B0);
    if (BYTE1(v310[1]) == 1)
    {
      sub_100006788(v279, v89[16]);
      sub_100061180();
    }
    uint64_t v51 = (void *)(v132 & v93);
    if (v131[15] == 1)
    {
      if (__OFADD__(v297, 1))
      {
        __break(1u);
        goto LABEL_186;
      }
      ++v297;
      if ((v131[1] & 1) == 0)
      {
LABEL_69:
        if (LOBYTE(v310[1]) == 1 && v297 <= 1)
        {
          os_log_t v305 = v50;
          goto LABEL_72;
        }
        if (*v131) {
          goto LABEL_82;
        }
        if (v131[2]) {
          goto LABEL_110;
        }
LABEL_149:
        char v191 = 0;
        uint64_t v304 = 0;
        goto LABEL_112;
      }
LABEL_56:
      if (qword_1001D9220 != -1) {
        swift_once();
      }
      unsigned __int8 v135 = byte_1001E0FC0;
      unint64_t v136 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
      sub_100006788(v280, v89[38]);
      id v137 = sub_1000D422C(v135);
      uint64_t v138 = v89[28];
      uint64_t v139 = v89[29];
      sub_100006788(v306, v138);
      (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v139 + 8))(3736321, v137, v136, v138, v139);
      if (v50)
      {
        swift_bridgeObjectRelease();
        if (qword_1001D92C8 != -1) {
          swift_once();
        }
        uint64_t v140 = type metadata accessor for Logger();
        sub_100003E78(v140, (uint64_t)qword_1001DE788);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v141 = Logger.logObject.getter();
        os_log_type_t v142 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v141, v142))
        {
          uint64_t v143 = swift_slowAlloc();
          os_log_t v144 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v143 = v263;
          swift_errorRetain();
          uint64_t v145 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v143 + 4) = v145;
          *os_log_t v144 = v145;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v141, v142, "Failed to store complete attestation event: %@", (uint8_t *)v143, 0xCu);
          sub_100003EB0((uint64_t *)&unk_1001DA540);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v50 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      long long v131 = v302;
      goto LABEL_69;
    }
    if (v131[1])
    {
      uint64_t v297 = 0;
      goto LABEL_56;
    }
    if ((v310[1] & 1) == 0)
    {
      if (*v131)
      {
        int v162 = 0;
        uint64_t v297 = 0;
        goto LABEL_83;
      }
      char v197 = v131[2];
      uint64_t v297 = 0;
      if (v197) {
        goto LABEL_110;
      }
      goto LABEL_149;
    }
    os_log_t v305 = v50;
    uint64_t v297 = 0;
LABEL_72:
    uint64_t v146 = v89[28];
    uint64_t v147 = v89[29];
    uint64_t v148 = v89;
    __int16 v149 = v306;
    sub_100006788(v306, v146);
    char v150 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 24);
    uint64_t v151 = swift_retain();
    os_log_t v152 = v305;
    v150(v151, v277, v146, v147);
    uint64_t v153 = v148;
    uint64_t v50 = v152;
    if (v152)
    {
      swift_errorRelease();
      swift_release();
      swift_release_n();
      swift_release();
      sub_100112FAC((uint64_t)v310);
      swift_errorRelease();
      sub_100029CEC((uint64_t)v318, (uint64_t)v308, &qword_1001DE9B0);
      sub_100112E28((uint64_t)v308, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
      return v4;
    }
    swift_release();
    uint64_t v154 = v153[28];
    uint64_t v155 = v153[29];
    sub_100006788(v149, v154);
    uint64_t v157 = (*(uint64_t (**)(uint64_t, uint64_t))(v155 + 16))(v154, v155);
    if (v157)
    {
      uint64_t v158 = v156;
      swift_release();
      uint64_t v159 = swift_retain_n();
      long long v89 = v153;
      uint64_t v160 = sub_10010B5E4(v159);
      long long v131 = v302;
      uint64_t v161 = v160;
      swift_release_n();
      swift_release();
      if (*v131)
      {
        uint64_t v277 = v158;
        int v162 = 1;
        unint64_t v290 = v161;
LABEL_84:
        LODWORD(v292) = v162;
        os_log_t v305 = v50;
        if (qword_1001D9218 != -1) {
          swift_once();
        }
        unsigned __int8 v165 = byte_1001E0FBF;
        sub_100003EB0(&qword_1001D8A20);
        uint64_t v166 = swift_allocObject();
        *(_OWORD *)(v166 + 16) = v268;
        *(void *)(v166 + 32) = 1635017060;
        *(void *)(v166 + 40) = 0xE400000000000000;
        os_log_type_t v167 = *(uint64_t (**)(void))(*(void *)v157 + 168);
        uint64_t v298 = v157;
        uint64_t v168 = v167();
        unint64_t v170 = v169;
        Swift::String v171 = Data.hexString()();
        sub_100006628(v168, v170);
        *(Swift::String *)(v166 + 48) = v171;
        unint64_t v172 = sub_100004C48(v166);
        unint64_t v173 = v280;
        sub_100006788(v280, v89[38]);
        id v174 = sub_1000D422C(v165);
        uint64_t v175 = v89[28];
        uint64_t v176 = v89[29];
        Swift::String v177 = v89;
        uint64_t v178 = v306;
        sub_100006788(v306, v175);
        os_log_t v179 = v305;
        (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v176 + 8))(2753281, v174, v172, v175, v176);
        if (v179)
        {
          swift_bridgeObjectRelease();
          unsigned __int8 v180 = byte_1001E0FBF;
          unint64_t v181 = sub_100004C48((uint64_t)&off_1001C5C60);
          sub_100006788(v173, v177[38]);
          id v182 = sub_1000D422C(v180);
          uint64_t v183 = v177[28];
          uint64_t v184 = v177[29];
          sub_100006788(v178, v183);
          (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v184 + 8))(2753281, v182, v181, v183, v184);
          uint64_t v50 = 0;
          swift_bridgeObjectRelease();
          if (qword_1001D92C8 != -1) {
            swift_once();
          }
          uint64_t v185 = type metadata accessor for Logger();
          sub_100003E78(v185, (uint64_t)qword_1001DE788);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v186 = Logger.logObject.getter();
          os_log_type_t v187 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v186, v187))
          {
            uint64_t v188 = swift_slowAlloc();
            Swift::String v189 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v188 = v263;
            os_log_t v305 = (os_log_t)(v188 + 4);
            swift_errorRetain();
            uint64_t v190 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)__int16 v308 = v190;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *Swift::String v189 = v190;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v186, v187, "Failed to store rewrap logs in log flush event: %@", (uint8_t *)v188, 0xCu);
            sub_100003EB0((uint64_t *)&unk_1001DA540);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          long long v131 = v302;
          uint64_t v52 = v303;
          char v191 = v292;
          LODWORD(v51) = 1;
          if ((v302[2] & 1) == 0)
          {
            uint64_t v304 = 0;
            long long v89 = v307;
            goto LABEL_112;
          }
          long long v89 = v307;
        }
        else
        {
          swift_bridgeObjectRelease();
          long long v131 = v302;
          LODWORD(v51) = 1;
          if ((v302[2] & 1) == 0)
          {
            uint64_t v304 = 0;
            uint64_t v52 = v303;
            long long v89 = v177;
            uint64_t v50 = 0;
            char v191 = v292;
            goto LABEL_112;
          }
          uint64_t v52 = v303;
          long long v89 = v177;
          uint64_t v50 = 0;
        }
LABEL_110:
        ++v304;
      }
      else
      {
        if (v131[2])
        {
          LODWORD(v51) = 1;
          uint64_t v277 = v158;
          uint64_t v298 = v157;
          unint64_t v290 = v161;
          uint64_t v52 = v303;
          goto LABEL_110;
        }
        uint64_t v304 = 0;
        LODWORD(v51) = 1;
        uint64_t v277 = v158;
        uint64_t v298 = v157;
        unint64_t v290 = v161;
        uint64_t v52 = v303;
      }
      char v191 = 1;
      goto LABEL_112;
    }
    sub_100029CEC((uint64_t)v318, (uint64_t)&v313, &qword_1001DE9B0);
    sub_100029CEC((uint64_t)&v313, (uint64_t)v308, &qword_1001DE9B0);
    int v163 = sub_100112C94((uint64_t)v308);
    long long v89 = v153;
    long long v131 = v302;
    if (v163 == 1)
    {
      sub_100062184(v309);
      sub_100029CEC((uint64_t)v309, (uint64_t)v311, &qword_1001DA130);
      uint64_t v164 = v251;
      *uint64_t v251 = 0;
      v164[1] = 0;
      *((unsigned char *)v164 + 16) = 0;
      *uint64_t v250 = 1;
      memcpy(v312, v311, 0x122uLL);
      BitString.init(data:unusedBits:)(v312);
      sub_100029CEC((uint64_t)v312, (uint64_t)v318, &qword_1001DE9B0);
    }
    if (*v131 == 1)
    {
LABEL_82:
      int v162 = 0;
LABEL_83:
      uint64_t v157 = v298;
      goto LABEL_84;
    }
    char v191 = 0;
    uint64_t v52 = v303;
    if (v131[2] == 1)
    {
      LODWORD(v51) = 0;
      goto LABEL_110;
    }
    uint64_t v304 = 0;
    LODWORD(v51) = 0;
LABEL_112:
    if (v131[14])
    {
      sub_100112FAC((uint64_t)v310);
    }
    else
    {
      double v198 = *(double *)&v310[39];
      sub_100006788(v279, v89[16]);
      uint64_t v199 = v293;
      sub_1000238E4(v293);
      uint64_t v200 = v199;
      uint64_t v201 = v199;
      uint64_t v202 = v301;
      if ((*v269)(v201, 1, v301) == 1)
      {
        char v203 = v191;
        sub_10005F4F8(v200, &qword_1001D9AE8);
        if (qword_1001D92C8 != -1) {
          swift_once();
        }
        uint64_t v204 = type metadata accessor for Logger();
        sub_100003E78(v204, (uint64_t)qword_1001DE788);
        uint64_t v205 = Logger.logObject.getter();
        os_log_type_t v206 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v205, v206))
        {
          os_log_t v207 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_t v207 = 0;
          _os_log_impl((void *)&_mh_execute_header, v205, v206, "Could not calculate secure now, using default send rate for ban expiration", v207, 2u);
          swift_slowDealloc();

          sub_100112FAC((uint64_t)v310);
        }
        else
        {
          sub_100112FAC((uint64_t)v310);
        }
        double v4 = v68;
        char v191 = v203;
      }
      else
      {
        (*v262)(v52, v200, v202);
        Date.timeIntervalSince1970.getter();
        double v209 = v208;
        sub_100112FAC((uint64_t)v310);
        double v210 = v198 - v209;
        if (v198 - v209 <= 0.0) {
          double v210 = v68;
        }
        if (v260) {
          double v211 = v210;
        }
        else {
          double v211 = v68;
        }
        if (v261 != 0x7FF0000000000000) {
          double v211 = v68;
        }
        if (v210 <= v68) {
          double v4 = v210;
        }
        else {
          double v4 = v211;
        }
        (*v264)(v52, v202);
      }
    }
    swift_errorRelease();
    if ((v191 & 1) == 0 || v304 > 1)
    {
      if ((v51 & 1) == 0) {
        goto LABEL_170;
      }
      goto LABEL_161;
    }
  }
  sub_100113180((uint64_t)v320);
  swift_release();
  uint64_t v50 = 0;
  if ((v93 & 1) == 0) {
    goto LABEL_170;
  }
LABEL_161:
  uint64_t v225 = v89[28];
  uint64_t v226 = v89[29];
  sub_100006788(v306, v225);
  unint64_t v227 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 24);
  uint64_t v228 = swift_retain();
  v227(v228, v277, v225, v226);
  if (v50)
  {
    swift_release();
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v229 = type metadata accessor for Logger();
    sub_100003E78(v229, (uint64_t)qword_1001DE788);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v230 = Logger.logObject.getter();
    os_log_type_t v231 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v230, v231))
    {
      int v232 = (uint8_t *)swift_slowAlloc();
      uint64_t v233 = swift_slowAlloc();
      os_log_t v305 = v230;
      unint64_t v234 = (void *)v233;
      *(_DWORD *)int v232 = v263;
      swift_errorRetain();
      uint64_t v235 = _swift_stdlib_bridgeErrorToNSError();
      v315[0] = v235;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v234 = v235;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v236 = v305;
      _os_log_impl((void *)&_mh_execute_header, v305, v231, "Could not remove batch: %@", v232, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v50 = 0;
  }
  else
  {
    swift_release();
  }
LABEL_170:
  if (qword_1001D9220 != -1) {
    swift_once();
  }
  unsigned __int8 v237 = byte_1001E0FC0;
  unint64_t v238 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  sub_100006788(v280, v89[38]);
  id v239 = sub_1000D422C(v237);
  uint64_t v240 = v89[28];
  uint64_t v241 = v89[29];
  uint64_t v242 = v89;
  sub_100006788(v306, v240);
  (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v241 + 8))(3736321, v239, v238, v240, v241);
  if (v50)
  {
    swift_bridgeObjectRelease();
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v243 = type metadata accessor for Logger();
    sub_100003E78(v243, (uint64_t)qword_1001DE788);
    swift_errorRetain();
    swift_errorRetain();
    int v244 = Logger.logObject.getter();
    os_log_type_t v245 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v244, v245))
    {
      BOOL v246 = (uint8_t *)swift_slowAlloc();
      uint64_t v247 = (void *)swift_slowAlloc();
      *(_DWORD *)BOOL v246 = v263;
      swift_errorRetain();
      uint64_t v248 = _swift_stdlib_bridgeErrorToNSError();
      v315[0] = v248;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v247 = v248;
      uint64_t v242 = v307;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v244, v245, "Could not store complete attestation event: %@", v246, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v249 = v280;

    swift_errorRelease();
    sub_100062184(v308);
    sub_100029CEC((uint64_t)v308, (uint64_t)v316, &qword_1001DA130);
    v316[35] = 0;
    v316[34] = 0;
    LOWORD(v316[36]) = 256;
    memcpy(v310, v316, 0x122uLL);
    BitString.init(data:unusedBits:)(v310);
    sub_100029CEC((uint64_t)v318, (uint64_t)v315, &qword_1001DE9B0);
    sub_100112E28((uint64_t)v315, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
    sub_100029CEC((uint64_t)v310, (uint64_t)v318, &qword_1001DE9B0);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v249 = v280;
  }
  sub_100029CEC((uint64_t)v318, (uint64_t)v310, &qword_1001DE9B0);
  sub_100029CEC((uint64_t)v310, (uint64_t)v315, &qword_1001DE9B0);
  if (sub_100112C94((uint64_t)v315) == 1)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    memcpy(v322, v315, 0x122uLL);
    sub_100006788(v249, v242[38]);
    sub_100029CEC((uint64_t)v310, (uint64_t)v316, &qword_1001DE9B0);
    sub_1000852DC((uint64_t)v316);
    sub_1000D406C(v322);
    swift_release();
    swift_release();
    swift_release();
    sub_100112E28((uint64_t)v310, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
    sub_100112E28((uint64_t)v310, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
  }
  return v4;
}

uint64_t sub_10010B030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[33];
  uint64_t v6 = v2[34];
  sub_100006788(v2 + 30, v5);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v6 + 8))(v9, a1, v5, v6);
  memcpy(__src, v9, 0x128uLL);
  sub_100112DC4((uint64_t)__src);
  sub_100029CEC((uint64_t)__src, (uint64_t)__dst, &qword_1001DE9C8);
  return sub_100029CEC((uint64_t)__dst, a2, &qword_1001DE9C8);
}

NSObject *sub_10010B5E4(uint64_t a1)
{
  uint64_t v158 = (uint64_t *)a1;
  uint64_t v160 = type metadata accessor for OSSignpostError();
  uint64_t v156 = *(void *)(v160 - 8);
  uint64_t v2 = __chkstk_darwin(v160, v1);
  uint64_t v151 = (uint64_t *)((char *)&v143 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v143 - v6;
  __chkstk_darwin(v5, v8);
  char v150 = (char *)&v143 - v9;
  uint64_t v166 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v166 - 8);
  uint64_t v12 = __chkstk_darwin(v166, v11);
  unint64_t v154 = (unint64_t)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = ((char *)&v143 - v16);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v153 = (char *)&v143 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v143 - v23;
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v143 - v26;
  if (qword_1001D92D0 != -1) {
    swift_once();
  }
  os_log_t v152 = v7;
  uint64_t v161 = v17;
  uint64_t v28 = type metadata accessor for OSSignposter();
  uint64_t v29 = sub_100003E78(v28, (uint64_t)qword_1001DE7A0);
  static OSSignpostID.exclusive.getter();
  uint64_t v163 = v29;
  uint64_t v30 = OSSignposter.logHandle.getter();
  os_signpost_type_t v31 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    unsigned __int8 v165 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    unint64_t v32 = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v33 = v24;
    uint64_t v34 = v24;
    uint64_t v35 = v166;
    v165(v34, v27, v166);
    uint64_t v36 = v10;
    uint64_t v37 = v35;
    os_log_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_t v38 = 0;
    os_signpost_id_t v39 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, v31, v39, "monitor-sign-logs", "begin signing monitoring logs", v38, 2u);
    uint64_t v40 = v37;
    uint64_t v10 = v36;
    uint64_t v41 = v33;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v40);
    uint64_t v42 = v165;
  }
  else
  {

    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    unint64_t v32 = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v41 = v24;
    uint64_t v40 = v166;
  }
  unsigned __int8 v165 = v42;
  unint64_t v155 = v32;
  v42(v41, v27, v40);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v157 = v41;
  uint64_t v164 = OSSignpostIntervalState.init(id:isOpen:)();
  os_log_type_t v44 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v43 = (char *)(v10 + 8);
  int v162 = v44;
  v44(v27, v40);
  uint64_t result = [*(id *)(*sub_100006788(v167 + 18, v167[21]) + 16) serialNumber];
  if (result)
  {
    uint64_t v46 = result;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v48;

    uint64_t v50 = Data.init(hexString:)(v47, v49);
    if (v51 >> 60 == 15)
    {
      if (qword_1001D92C8 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_100003E78(v52, (uint64_t)qword_1001DE788);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Could not get secure element serial number", v55, 2u);
        swift_slowDealloc();
      }

      sub_100112D64();
      uint64_t v56 = swift_allocError();
      *(void *)uint64_t v57 = 2;
      *(unsigned char *)(v57 + 8) = 1;
      swift_willThrow();
      unsigned __int8 v58 = OSSignposter.logHandle.getter();
      unint64_t v59 = v161;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v60 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        os_log_type_t v167 = (void *)v56;
        uint64_t v61 = v40;
        swift_retain();
        uint64_t v62 = v152;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v63 = v156;
        uint64_t v64 = v160;
        if ((*(unsigned int (**)(char *, uint64_t))(v156 + 88))(v62, v160) == enum case for OSSignpostError.doubleEnd(_:))
        {
          os_log_type_t v65 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
          os_log_type_t v65 = "end signing monitoring logs";
        }
        uint64_t v115 = v157;
        unint64_t v59 = v161;
        v165(v157, (char *)v161, v61);
        unint64_t v116 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v116 = 0;
        os_signpost_id_t v117 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, v60, v117, "monitor-sign-logs", v65, v116, 2u);
        swift_slowDealloc();

        char v118 = v115;
        uint64_t v119 = v162;
        v162((char *)v59, v61);
        v119(v118, v61);
      }
      else
      {

        v162((char *)v59, v40);
      }
    }
    else
    {
      uint64_t v66 = v50;
      unint64_t v67 = v51;
      os_log_t v152 = v43;
      type metadata accessor for TLV();
      uint64_t v147 = (uint64_t *)TLVTag.asn1Sequence.unsafeMutableAddressor();
      uint64_t v68 = *v147;
      uint64_t v146 = sub_100003EB0((uint64_t *)&unk_1001DA5A0);
      uint64_t v69 = swift_allocObject();
      *(_OWORD *)(v69 + 16) = xmmword_100189F90;
      sub_1000065D0(v66, v67);
      uint64_t v70 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v69 + 32) = TLV.__allocating_init(tag:value:)(v70, v66, v67);
      *(void *)(v69 + 40) = v158;
      swift_retain();
      uint64_t v71 = *(void *)TLVTag.asn1IA5String.unsafeMutableAddressor();
      sub_100006788(v167 + 35, v167[38]);
      sub_1000D4970(v169);
      sub_100029CEC((uint64_t)v169, (uint64_t)v170, &qword_1001DA130);
      sub_100029CEC((uint64_t)v170, (uint64_t)v171, &qword_1001DA130);
      int v72 = sub_100029A28((uint64_t)v171);
      uint64_t v148 = v66;
      unint64_t v149 = v67;
      if (v72 != 1) {
        swift_bridgeObjectRetain();
      }
      *(void *)(v69 + 48) = TLV.__allocating_init(tag:string:)(v71);
      v168[0] = v69;
      specialized Array._endMutation()();
      uint64_t v73 = TLV.__allocating_init(tag:children:)(v68, v168[0]);
      uint64_t v74 = v167[24];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v76 = (uint64_t (*)(void))*((void *)v73->isa + 21);
      uint64_t v161 = v73;
      uint64_t v77 = v76();
      unint64_t v79 = v78;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v158 = &v143;
      uint64_t v144 = *(void *)(AssociatedTypeWitness - 8);
      uint64_t v145 = AssociatedTypeWitness;
      __chkstk_darwin(AssociatedTypeWitness, v81);
      unint64_t v83 = (char *)&v143 - v82;
      uint64_t v84 = v159;
      uint64_t v85 = sub_100132BC4((uint64_t)&v143 - v82, v77, v79, 1u, ObjectType, v74);
      os_log_type_t v167 = (void *)v84;
      if (!v84)
      {
        unint64_t v154 = v86;
        uint64_t v159 = v85;
        sub_100006628(v77, v79);
        uint64_t v95 = v145;
        v168[3] = v145;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v168[4] = AssociatedConformanceWitness;
        uint64_t v151 = sub_10008CDF4(v168);
        (*(void (**)(uint64_t *, char *, uint64_t))(v144 + 32))(v151, v83, v95);
        uint64_t v158 = (uint64_t *)*v147;
        uint64_t v97 = swift_allocObject();
        *(_OWORD *)(v97 + 16) = xmmword_100189E80;
        uint64_t v172 = 1;
        unint64_t v98 = sub_100006AD0();
        sub_100021C20();
        uint64_t v99 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
        long long v100 = TLV.__allocating_init<A>(tag:integer:)(v99, (char *)&v172, &type metadata for Int, v98);
        uint64_t v101 = v161;
        *(void *)(v97 + 32) = v100;
        *(void *)(v97 + 40) = v101;
        uint64_t v102 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
        swift_retain();
        uint64_t v103 = v102(v95, AssociatedConformanceWitness);
        uint64_t v105 = v104;
        uint64_t v106 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
        *(void *)(v97 + 48) = TLV.__allocating_init(tag:value:)(v106, v103, v105);
        uint64_t v107 = *v147;
        uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v95, AssociatedConformanceWitness);
        uint64_t v109 = *(void *)(v108 + 16);
        if (v109)
        {
          uint64_t v151 = (uint64_t *)v107;
          uint64_t v172 = (uint64_t)_swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v147 = (uint64_t *)v108;
          uint64_t v110 = (unint64_t *)(v108 + 40);
          do
          {
            uint64_t v111 = *(v110 - 1);
            unint64_t v112 = *v110;
            sub_1000065D0(v111, *v110);
            sub_1000065D0(v111, v112);
            uint64_t v113 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
            TLV.__allocating_init(tag:value:)(v113, v111, v112);
            sub_100006628(v111, v112);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v110 += 2;
            --v109;
          }
          while (v109);
          uint64_t v114 = (void *)v172;
          swift_bridgeObjectRelease();
          uint64_t v107 = (uint64_t)v151;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v114 = _swiftEmptyArrayStorage;
        }
        *(void *)(v97 + 56) = TLV.__allocating_init(tag:children:)(v107, (uint64_t)v114);
        uint64_t v126 = v159;
        unint64_t v127 = v154;
        sub_1000065D0(v159, v154);
        uint64_t v128 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
        *(void *)(v97 + 64) = TLV.__allocating_init(tag:value:)(v128, v126, v127);
        uint64_t v172 = v97;
        specialized Array._endMutation()();
        unint64_t v59 = TLV.__allocating_init(tag:children:)((uint64_t)v158, v172);
        sub_10000BF70(v148, v149);
        swift_release();
        sub_100006628(v126, v127);
        sub_100006520((uint64_t)v168);
        unint64_t v129 = OSSignposter.logHandle.getter();
        int v130 = v153;
        OSSignpostIntervalState.signpostID.getter();
        int v131 = static os_signpost_type_t.end.getter();
        char v132 = OS_os_log.signpostsEnabled.getter();
        uint64_t v133 = v166;
        uint64_t v134 = v160;
        if (v132)
        {
          LODWORD(v163) = v131;
          uint64_t v135 = v166;
          swift_retain();
          unint64_t v136 = v150;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          uint64_t v137 = v156;
          if ((*(unsigned int (**)(char *, uint64_t))(v156 + 88))(v136, v134) == enum case for OSSignpostError.doubleEnd(_:))
          {
            uint64_t v138 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v137 + 8))(v136, v134);
            uint64_t v138 = "end signing monitoring logs";
          }
          int v130 = v157;
          uint64_t v140 = v153;
          v165(v157, v153, v135);
          uint64_t v141 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v141 = 0;
          os_signpost_id_t v142 = OSSignpostID.rawValue.getter();
          uint64_t v133 = v135;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v129, (os_signpost_type_t)v163, v142, "monitor-sign-logs", v138, v141, 2u);
          swift_slowDealloc();

          uint64_t v139 = v162;
          v162(v140, v135);
        }
        else
        {

          uint64_t v139 = v162;
        }
        v139(v130, v133);
        swift_release();
        return v59;
      }
      sub_10000BF70(v148, v149);
      swift_release();
      sub_100006628(v77, v79);
      unint64_t v59 = OSSignposter.logHandle.getter();
      unint64_t v87 = v154;
      OSSignpostIntervalState.signpostID.getter();
      int v88 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        LODWORD(v163) = v88;
        swift_retain();
        long long v89 = v151;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v90 = v156;
        uint64_t v91 = v160;
        int v92 = (*(uint64_t (**)(uint64_t *, uint64_t))(v156 + 88))(v89, v160);
        uint64_t v93 = v166;
        if (v92 == enum case for OSSignpostError.doubleEnd(_:))
        {
          char v94 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t))(v90 + 8))(v89, v91);
          char v94 = "end signing monitoring logs";
        }
        uint64_t v120 = v157;
        v165(v157, (char *)v87, v93);
        uint64_t v121 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v121 = 0;
        os_signpost_id_t v122 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v59, (os_signpost_type_t)v163, v122, "monitor-sign-logs", v94, v121, 2u);
        uint64_t v123 = v93;
        swift_slowDealloc();

        uint64_t v124 = v93;
        id v125 = v162;
        v162((char *)v87, v124);
        v125(v120, v123);
      }
      else
      {

        v162((char *)v87, v166);
      }
    }
    swift_release();
    return v59;
  }
  __break(1u);
  return result;
}

void sub_10010C4AC(char a1)
{
  uint64_t v3 = v1;
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  int v5 = a1 & 1;
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DE788);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_100005EB8(0x6F4D686374697773, 0xEF293A6F74286564, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    if (a1) {
      uint64_t v10 = 0x656E696C66666FLL;
    }
    else {
      uint64_t v10 = 0x656E696C6E6FLL;
    }
    if (a1) {
      unint64_t v11 = 0xE700000000000000;
    }
    else {
      unint64_t v11 = 0xE600000000000000;
    }
    sub_100005EB8(v10, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int v5 = a1 & 1;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s(mode: %s)", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (((v5 == 0) ^ *(unsigned __int8 *)(v3 + 40)))
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v34 = v15;
      if (v5) {
        uint64_t v16 = 0x656E696C66666FLL;
      }
      else {
        uint64_t v16 = 0x656E696C6E6FLL;
      }
      if (v5) {
        unint64_t v17 = 0xE700000000000000;
      }
      else {
        unint64_t v17 = 0xE600000000000000;
      }
      sub_100005EB8(v16, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Already in %s mode.", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    *(unsigned char *)(v3 + 40) = v5;
    uint64_t v18 = *(void *)(v3 + 88);
    uint64_t v19 = *(void *)(v3 + 96);
    sub_100006788((void *)(v3 + 64), v18);
    if (qword_1001D92D8 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_1001E1130;
    uint64_t v21 = *(void *)algn_1001E1138;
    sub_100003EB0(&qword_1001D8778);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_100186100;
    char v33 = v5;
    *(unsigned char *)(v22 + 32) = v5;
    uint64_t v23 = sub_10012CB58(v22);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v19 + 40))(v20, v21, v23, v25, v18, v19);
    sub_100006628(v23, v25);
    if (!v2)
    {
      sub_100003EB0(&qword_1001D8A20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100186100;
      *(void *)(inited + 32) = 1701080941;
      *(void *)(inited + 40) = 0xE400000000000000;
      LOBYTE(v34) = *(unsigned char *)(v3 + 40);
      sub_100112D10();
      *(void *)(inited + 48) = BinaryInteger.description.getter();
      *(void *)(inited + 56) = v27;
      unint64_t v28 = sub_100004C48(inited);
      if (qword_1001D9210 != -1) {
        swift_once();
      }
      unsigned __int8 v29 = byte_1001E0FBE;
      sub_100006788((void *)(v3 + 280), *(void *)(v3 + 304));
      id v30 = sub_1000D422C(v29);
      uint64_t v31 = *(void *)(v3 + 224);
      uint64_t v32 = *(void *)(v3 + 232);
      sub_100006788((void *)(v3 + 200), v31);
      (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v32 + 8))(3801857, v30, v28, v31, v32);
      swift_bridgeObjectRelease();
      *(unsigned char *)(*(void *)(v3 + 320) + 64) = v33;
    }
  }
}

void sub_10010C9F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v72 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  int v5 = &v66[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v78 = *(void *)(v6 - 8);
  uint64_t v79 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v76 = &v66[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v77 = type metadata accessor for DispatchQoS();
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77, v9);
  uint64_t v74 = &v66[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = &v66[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = &v66[-v19];
  __chkstk_darwin(v18, v21);
  uint64_t v82 = &v66[-v22];
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_100003E78(v23, (uint64_t)qword_1001DE788);
  swift_retain_n();
  uint64_t v83 = v24;
  unint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v73 = v2;
  unint64_t v80 = v16;
  uint64_t v81 = v20;
  uint64_t v71 = v5;
  if (v27)
  {
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v28 = 136315138;
    if (*(unsigned char *)(v1 + 40)) {
      uint64_t v29 = 0x656E696C66666FLL;
    }
    else {
      uint64_t v29 = 0x656E696C6E6FLL;
    }
    if (*(unsigned char *)(v1 + 40)) {
      unint64_t v30 = 0xE700000000000000;
    }
    else {
      unint64_t v30 = 0xE600000000000000;
    }
    uint64_t v84 = sub_100005EB8(v29, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "MPOCDefaultMonitorManager.start(), current MPOCOperationMode: %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v20 = v81;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v31 = v82;
  if (*(unsigned char *)(v1 + 16))
  {
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Background process already started", v34, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    *(unsigned char *)(v1 + 16) = 1;
    if (qword_1001D92D0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for OSSignposter();
    uint64_t v36 = sub_100003E78(v35, (uint64_t)qword_1001DE7A0);
    static OSSignpostID.exclusive.getter();
    uint64_t v69 = v36;
    uint64_t v37 = OSSignposter.logHandle.getter();
    os_signpost_type_t v38 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      os_signpost_id_t v39 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 16);
      unint64_t v40 = (v12 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v39(v20, v31, v11);
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      os_signpost_id_t v42 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v37, v38, v42, "start-monitoring", "begin start monitoring", v41, 2u);
      uint64_t v31 = v82;
      swift_slowDealloc();

      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v20, v11);
    }
    else
    {

      os_signpost_id_t v39 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 16);
      unint64_t v40 = (v12 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    }
    unint64_t v67 = v39;
    v39(v20, v31, v11);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v70 = OSSignpostIntervalState.init(id:isOpen:)();
    uint64_t v68 = *(void (**)(unsigned char *, uint64_t))(v12 + 8);
    v68(v31, v11);
    if (qword_1001D9220 != -1) {
      swift_once();
    }
    unsigned __int8 v43 = byte_1001E0FC0;
    unint64_t v44 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
    sub_100006788((void *)(v1 + 280), *(void *)(v1 + 304));
    id v45 = sub_1000D422C(v43);
    uint64_t v46 = *(void *)(v1 + 224);
    uint64_t v47 = *(void *)(v1 + 232);
    sub_100006788((void *)(v1 + 200), v46);
    (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v47 + 8))(3736321, v45, v44, v46, v47);
    uint64_t v82 = (unsigned char *)v40;
    swift_bridgeObjectRelease();
    swift_getObjectType();
    uint64_t v48 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = (uint64_t)sub_100112D08;
    aBlock[5] = v48;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000048D8;
    id aBlock[3] = (uint64_t)&unk_1001CAEA0;
    uint64_t v49 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v50 = v74;
    static DispatchQoS.unspecified.getter();
    unint64_t v51 = v76;
    sub_10000491C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v49);
    (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v51, v79);
    (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v50, v77);
    swift_release();
    swift_release();
    sub_10010E040();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      os_log_type_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Background process started", v54, 2u);
      swift_slowDealloc();
    }

    OS_dispatch_source.resume()();
    uint64_t v55 = OSSignposter.logHandle.getter();
    uint64_t v56 = v80;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v57 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      unsigned __int8 v58 = v71;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v60 = v72;
      uint64_t v59 = v73;
      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v72 + 88))(v58, v73) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v61 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v58, v59);
        uint64_t v61 = "end start monitoring";
      }
      uint64_t v62 = v81;
      v67(v81, v56, v11);
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      os_signpost_id_t v64 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v55, v57, v64, "start-monitoring", v61, v63, 2u);
      swift_slowDealloc();

      os_log_type_t v65 = v68;
      v68(v56, v11);
      v65(v62, v11);
    }
    else
    {

      v68(v56, v11);
    }
    swift_release();
  }
}

uint64_t sub_10010D580()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10010E040();
    return swift_release();
  }
  return result;
}

void sub_10010D5D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v62 = *(void *)(v2 - 8);
  uint64_t v63 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v70 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v69 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v5);
  unint64_t v67 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for DispatchQoS();
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v7);
  os_log_type_t v65 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v71 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v58 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v58 - v19;
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v72 = sub_100003E78(v21, (uint64_t)qword_1001DE788);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v73 = v9;
  if (v24)
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v61 = v1;
    aBlock[0] = v26;
    *(_DWORD *)unint64_t v25 = 136315138;
    uint64_t v74 = sub_100005EB8(0x2928706F7473, 0xE600000000000000, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v61;
    swift_slowDealloc();
    uint64_t v9 = v73;
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + 16) == 1)
  {
    *(unsigned char *)(v1 + 16) = 0;
    if (qword_1001D92D0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for OSSignposter();
    uint64_t v28 = sub_100003E78(v27, (uint64_t)qword_1001DE7A0);
    static OSSignpostID.exclusive.getter();
    uint64_t v60 = v28;
    uint64_t v29 = OSSignposter.logHandle.getter();
    os_signpost_type_t v30 = static os_signpost_type_t.begin.getter();
    uint64_t v31 = v20;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
      uint64_t v33 = v10;
      v32(v17, v31, v9);
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      os_signpost_id_t v35 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, v30, v35, "stop-monitoring", "begin stop monitoring", v34, 2u);
      uint64_t v9 = v73;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    }
    else
    {

      uint64_t v33 = v10;
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    }
    unsigned __int8 v58 = v32;
    v32(v17, v31, v9);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v59 = v17;
    OSSignpostIntervalState.init(id:isOpen:)();
    os_signpost_id_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v61 = v33 + 8;
    v39(v31, v9);
    swift_getObjectType();
    aBlock[4] = (uint64_t)BitString.init(data:unusedBits:);
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000048D8;
    id aBlock[3] = (uint64_t)&unk_1001CAE50;
    unint64_t v40 = _Block_copy(aBlock);
    uint64_t v41 = v65;
    static DispatchQoS.unspecified.getter();
    os_signpost_id_t v42 = v67;
    sub_10000491C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v42, v64);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v68);
    OS_dispatch_source.suspend()();
    unsigned __int8 v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      id v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Background process stopped", v45, 2u);
      swift_slowDealloc();
    }

    uint64_t v46 = OSSignposter.logHandle.getter();
    uint64_t v47 = v71;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v48 = static os_signpost_type_t.end.getter();
    char v49 = OS_os_log.signpostsEnabled.getter();
    uint64_t v50 = v70;
    if (v49)
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v51 = v62;
      int v52 = (*(uint64_t (**)(char *, uint64_t))(v62 + 88))(v50, v63);
      uint64_t v53 = v73;
      if (v52 == enum case for OSSignpostError.doubleEnd(_:))
      {
        os_log_type_t v54 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v63);
        os_log_type_t v54 = "end stop monitoring";
      }
      uint64_t v55 = v59;
      v58(v59, v47, v53);
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      os_signpost_id_t v57 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, v48, v57, "stop-monitoring", v54, v56, 2u);
      swift_slowDealloc();

      v39(v47, v53);
      v39(v55, v53);
    }
    else
    {

      v39(v47, v73);
    }
    swift_release();
  }
  else
  {
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_signpost_type_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_signpost_type_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Background process already stopped", v38, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10010DE88()
{
  uint64_t v1 = v0;
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DE788);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100005EB8(0xD000000000000010, 0x800000010019ACB0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = v1 + 25;
  uint64_t v8 = v1[28];
  uint64_t v7 = v1[29];
  sub_100006788(v6, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v8, v7);
}

uint64_t sub_10010E040()
{
  uint64_t v1 = v0;
  if (qword_1001D9210 != -1) {
    swift_once();
  }
  unsigned __int8 v2 = byte_1001E0FBE;
  unint64_t v3 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  os_log_type_t v4 = (void *)(v0 + 280);
  sub_100006788((void *)(v0 + 280), *(void *)(v0 + 304));
  id v5 = sub_1000D422C(v2);
  uint64_t v6 = (void *)(v1 + 200);
  uint64_t v7 = *(void *)(v1 + 224);
  uint64_t v8 = *(void *)(v1 + 232);
  sub_100006788((void *)(v1 + 200), v7);
  (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v8 + 8))(1311489, v5, v3, v7, v8);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v1 + 40) != 1)
  {
    uint64_t result = sub_10010E45C();
    if ((result & 1) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = sub_10010E9E8();
  if (result)
  {
LABEL_7:
    unsigned __int8 v10 = byte_1001E0FBE;
    unint64_t v11 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
    sub_100006788(v4, *(void *)(v1 + 304));
    id v12 = sub_1000D422C(v10);
    uint64_t v14 = *(void *)(v1 + 224);
    uint64_t v13 = *(void *)(v1 + 232);
    sub_100006788(v6, v14);
    (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v13 + 8))(1377025, v12, v11, v14, v13);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10010E45C()
{
  uint64_t v1 = v0;
  uint64_t v39 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v39 - 8);
  uint64_t v4 = __chkstk_darwin(v39, v3);
  os_signpost_id_t v42 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v35[-v7];
  uint64_t v41 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v41 - 8);
  uint64_t v11 = __chkstk_darwin(v41, v10);
  uint64_t v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11, v14);
  unint64_t v40 = &v35[-v15];
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  os_signpost_type_t v38 = (void (*)(void, void))v13;
  uint64_t v16 = type metadata accessor for Logger();
  sub_100003E78(v16, (uint64_t)qword_1001DE788);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "performOnlineAttestation()", v19, 2u);
    swift_slowDealloc();
  }

  if (qword_1001D9220 != -1) {
    swift_once();
  }
  unsigned __int8 v20 = byte_1001E0FC0;
  unint64_t v21 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  sub_100006788(v1 + 35, v1[38]);
  id v22 = sub_1000D422C(v20);
  uint64_t v23 = v1[28];
  uint64_t v24 = v1[29];
  sub_100006788(v1 + 25, v23);
  (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v24 + 8))(3736321, v22, v21, v23, v24);
  unsigned __int8 v43 = v8;
  swift_bridgeObjectRelease();
  sub_100108154(0, v25);
  swift_errorRelease();
  unsigned int v36 = 1;
  uint64_t v26 = v38;
  uint64_t ObjectType = swift_getObjectType();
  static DispatchTime.now()();
  uint64_t v27 = v40;
  + infix(_:_:)();
  os_signpost_type_t v38 = *(void (**)(void, void))(v9 + 8);
  uint64_t v28 = v41;
  v38(v26, v41);
  uint64_t v29 = *(void (**)(unsigned char *, void, uint64_t))(v2 + 104);
  os_signpost_type_t v30 = v43;
  uint64_t v31 = v39;
  v29(v43, enum case for DispatchTimeInterval.never(_:), v39);
  uint64_t v32 = v42;
  *os_signpost_id_t v42 = 0;
  v29(v32, enum case for DispatchTimeInterval.nanoseconds(_:), v31);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v33 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
  v33(v32, v31);
  v33(v30, v31);
  v38(v27, v28);
  return v36;
}

uint64_t sub_10010E9E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  unsigned __int8 v43 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  os_log_type_t v44 = (char *)&ObjectType - v7;
  uint64_t v47 = type metadata accessor for DispatchTime();
  uint64_t v42 = *(void *)(v47 - 8);
  uint64_t v9 = __chkstk_darwin(v47, v8);
  uint64_t v41 = (char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  unint64_t v40 = (char *)&ObjectType - v12;
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003E78(v13, (uint64_t)qword_1001DE788);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "performOfflineAttestation()", v16, 2u);
    swift_slowDealloc();
  }

  sub_100112B6C((uint64_t)v53);
  sub_100006788(v1 + 35, v1[38]);
  if (qword_1001D9220 != -1) {
    swift_once();
  }
  id v17 = sub_1000D422C(byte_1001E0FC0);
  uint64_t v19 = v1[28];
  uint64_t v18 = v1[29];
  sub_100006788(v1 + 25, v19);
  unint64_t v20 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, id, unint64_t, uint64_t, uint64_t))(v18 + 8))(3736321, v17, v20, v19, v18);
  swift_bridgeObjectRelease();
  sub_100029CEC((uint64_t)v53, (uint64_t)v52, &qword_1001DE9B0);
  sub_100006788(v1 + 35, v1[38]);
  if ((sub_1000D34F8((uint64_t)v17, v1[7]) & 1) == 0)
  {
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Offline attestation failed to validate complete attestation data, clearing attestation token", v24, 2u);
      swift_slowDealloc();
    }

    sub_100112E28((uint64_t)v52, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
    sub_100062184(v48);
    sub_100029CEC((uint64_t)v48, (uint64_t)v51, &qword_1001DA130);
    v51[35] = 0;
    v51[34] = 0;
    LOWORD(v51[36]) = 256;
    memcpy(v54, v51, 0x122uLL);
    BitString.init(data:unusedBits:)(v54);
    sub_100029CEC((uint64_t)v54, (uint64_t)v49, &qword_1001DE9B0);
    sub_100029CEC((uint64_t)v48, (uint64_t)v50, &qword_1001DA130);
    unsigned int v39 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
    char v28 = 1;
    goto LABEL_14;
  }
  unsigned int v39 = 1;
  sub_100029CEC((uint64_t)v52, (uint64_t)v54, &qword_1001DE9B0);
  if (sub_100112C94((uint64_t)v54) != 1)
  {
    char v27 = v54[36];
    char v28 = BYTE1(v54[36]);
    uint64_t v26 = v54[35];
    uint64_t v25 = v54[34];
    sub_100029CEC((uint64_t)v52, (uint64_t)v51, &qword_1001DE9B0);
    sub_1000852DC((uint64_t)v51);
    sub_100029CEC((uint64_t)v52, (uint64_t)v49, &qword_1001DE9B0);
    sub_100029CEC((uint64_t)v54, (uint64_t)v50, &qword_1001DA130);
LABEL_14:
    sub_100029CEC((uint64_t)v50, (uint64_t)v48, &qword_1001DA130);
    *(void *)&v48[272] = v25;
    *(void *)&v48[280] = v26;
    v48[288] = v27;
    v48[289] = v28;
    memcpy(v54, v48, 0x122uLL);
    sub_100006788(v1 + 35, v1[38]);
    sub_1000D406C(v54);
    sub_100085484((uint64_t)v48);
    unint64_t v21 = v49;
    goto LABEL_15;
  }
  unint64_t v21 = v52;
LABEL_15:
  sub_100029CEC((uint64_t)v21, (uint64_t)v51, &qword_1001DE9B0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v29 = v41;
  static DispatchTime.now()();
  os_signpost_type_t v30 = v40;
  + infix(_:_:)();
  uint64_t v42 = *(void *)(v42 + 8);
  ((void (*)(char *, uint64_t))v42)(v29, v47);
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  uint64_t v33 = *(void (**)(char *, void, uint64_t))(v45 + 104);
  uint64_t v34 = v46;
  v33(v44, enum case for DispatchTimeInterval.never(_:), v46);
  os_signpost_id_t v35 = v43;
  *(void *)unsigned __int8 v43 = 0;
  v33(v35, enum case for DispatchTimeInterval.nanoseconds(_:), v34);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  sub_100112E28((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100112BA4);
  unsigned int v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v35, v34);
  v36(v32, v34);
  ((void (*)(char *, uint64_t))v42)(v30, v47);
  return v39;
}

uint64_t sub_10010F11C()
{
  uint64_t v1 = v0;
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DE788);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    if (*(unsigned char *)(v1 + 40)) {
      uint64_t v6 = 0x656E696C66666FLL;
    }
    else {
      uint64_t v6 = 0x656E696C6E6FLL;
    }
    if (*(unsigned char *)(v1 + 40)) {
      unint64_t v7 = 0xE700000000000000;
    }
    else {
      unint64_t v7 = 0xE600000000000000;
    }
    sub_100005EB8(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "checkAttestationState() MPOCOperationMode: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  char v8 = *(unsigned char *)(v1 + 40);
  sub_100006788((void *)(v1 + 280), *(void *)(v1 + 304));
  if (v8)
  {
    if (qword_1001D9220 != -1) {
      swift_once();
    }
    id v9 = sub_1000D422C(byte_1001E0FC0);
    sub_100006788((void *)(v1 + 280), *(void *)(v1 + 304));
    char v10 = sub_1000D34F8((uint64_t)v9, *(void *)(v1 + 56));
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109120;
      LODWORD(v16) = v10 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v14 = "isOfflineAttested(): %{BOOL}d";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v14, v13, 8u);
      swift_slowDealloc();
    }
  }
  else
  {
    char v10 = sub_1000D2D58();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109120;
      LODWORD(v16) = v10 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v14 = "isOnlineAttested(): %{BOOL}d";
      goto LABEL_19;
    }
  }

  return v10 & 1;
}

uint64_t sub_10010F4B0(uint64_t a1)
{
  uint64_t v155 = a1;
  uint64_t v1 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v156 = (uint64_t)&v144 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v161 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v160 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignpostError();
  uint64_t v153 = *(void *)(v7 - 8);
  uint64_t v154 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  os_log_type_t v15 = (char *)&v144 - v14;
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v145 = (char *)&v144 - v18;
  __chkstk_darwin(v17, v19);
  uint64_t v157 = (char *)&v144 - v20;
  uint64_t v21 = type metadata accessor for OSSignpostID();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  char v150 = (char *)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  unint64_t v149 = (char *)&v144 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v32 = (char *)&v144 - v31;
  uint64_t v34 = __chkstk_darwin(v30, v33);
  uint64_t v158 = (char *)&v144 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  unsigned int v39 = (char *)&v144 - v38;
  __chkstk_darwin(v37, v40);
  uint64_t v42 = (char *)&v144 - v41;
  if (qword_1001D92D0 != -1) {
    swift_once();
  }
  uint64_t v147 = v15;
  uint64_t v148 = v11;
  uint64_t v146 = v32;
  uint64_t v159 = v4;
  uint64_t v43 = type metadata accessor for OSSignposter();
  uint64_t v44 = sub_100003E78(v43, (uint64_t)qword_1001DE7A0);
  static OSSignpostID.exclusive.getter();
  uint64_t v163 = v44;
  uint64_t v45 = OSSignposter.logHandle.getter();
  os_signpost_type_t v46 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    unint64_t v48 = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v47(v39, v42, v21);
    char v49 = v39;
    uint64_t v50 = v21;
    uint64_t v51 = v22;
    int v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v52 = 0;
    os_signpost_id_t v53 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, v46, v53, "attestation-checkpoint", "begin attestation checkpoint", v52, 2u);
    uint64_t v22 = v51;
    uint64_t v21 = v50;
    unsigned int v39 = v49;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v22 + 8))(v49, v21);
  }
  else
  {

    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    unint64_t v48 = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  unint64_t v151 = v48;
  os_log_t v152 = v47;
  v47(v39, v42, v21);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v54 = OSSignpostIntervalState.init(id:isOpen:)();
  int v162 = *(void (**)(char *, uint64_t))(v22 + 8);
  v162(v42, v21);
  uint64_t v55 = v164;
  if (sub_10010F11C())
  {
    uint64_t v56 = v21;
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100003E78(v57, (uint64_t)qword_1001DE788);
    unsigned __int8 v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.info.getter();
    BOOL v60 = os_log_type_enabled(v58, v59);
    uint64_t v61 = v158;
    if (v60)
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "checkAttestationState true", v62, 2u);
      swift_slowDealloc();
    }

    uint64_t v63 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v64 = static os_signpost_type_t.end.getter();
    char v65 = OS_os_log.signpostsEnabled.getter();
    uint64_t v66 = v157;
    if (v65)
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      uint64_t v156 = v54;
      swift_release();
      uint64_t v68 = v153;
      uint64_t v67 = v154;
      if ((*(unsigned int (**)(char *, uint64_t))(v153 + 88))(v66, v154) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v69 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
        uint64_t v69 = "end attestation checkpoint";
      }
      v152(v39, v61, v56);
      int v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v92 = 0;
      os_signpost_id_t v93 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, v64, v93, "attestation-checkpoint", v69, v92, 2u);
      swift_slowDealloc();

      char v94 = v162;
      v162(v61, v56);
      v94(v39, v56);
    }
    else
    {

      v162(v61, v56);
    }
LABEL_34:
    swift_release();
    return 1;
  }
  uint64_t v70 = v156;
  sub_100068DC4(v155, v156);
  uint64_t v71 = v161;
  uint64_t v72 = v159;
  int v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v70, 1, v159);
  uint64_t v144 = v39;
  if (v73 == 1)
  {
    sub_10005F4F8(v70, (uint64_t *)&unk_1001DF8D0);
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    sub_100003E78(v74, (uint64_t)qword_1001DE788);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "checkAttestationState false", v77, 2u);
      swift_slowDealloc();
    }

    uint64_t v78 = OSSignposter.logHandle.getter();
    uint64_t v79 = v150;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v80 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      uint64_t v81 = v148;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v83 = v153;
      uint64_t v82 = v154;
      if ((*(unsigned int (**)(char *, uint64_t))(v153 + 88))(v81, v154) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v84 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v81, v82);
        uint64_t v84 = "end attestation checkpoint";
      }
      uint64_t v110 = v144;
      v152(v144, v79, v21);
      uint64_t v111 = v79;
      unint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v112 = 0;
      os_signpost_id_t v113 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v78, v80, v113, "attestation-checkpoint", v84, v112, 2u);
      swift_slowDealloc();

      uint64_t v114 = v162;
      v162(v111, v21);
      v114(v110, v21);
      goto LABEL_50;
    }

    int v96 = v79;
    uint64_t v97 = v21;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v160, v70, v72);
    sub_100006788((void *)(v55 + 280), *(void *)(v55 + 304));
    sub_1000D4970(v170);
    if (*(unsigned char *)(v55 + 40) == 1)
    {
      sub_100029CEC((uint64_t)v170, (uint64_t)v175, &qword_1001DA130);
      sub_100029CEC((uint64_t)v175, (uint64_t)v177, &qword_1001DA130);
      int v85 = sub_100029A28((uint64_t)v177);
      sub_1000852DC((uint64_t)v170);
      if (v85 == 1 && (sub_1001105CC() & 1) == 0)
      {
        uint64_t v158 = (char *)v21;
        if (qword_1001D92C8 != -1) {
          swift_once();
        }
        uint64_t v86 = type metadata accessor for Logger();
        uint64_t v157 = (char *)sub_100003E78(v86, (uint64_t)qword_1001DE788);
        unint64_t v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v87, v88))
        {
          long long v89 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v89 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "monitoring offline and attestation token absent and no reboot.attempt recovery...", v89, 2u);
          swift_slowDealloc();
        }

        sub_100006788((void *)(v55 + 328), *(void *)(v55 + 352));
        uint64_t v90 = sub_100159F24();
        uint64_t v21 = (uint64_t)v158;
        if (v91)
        {
          sub_1000EE43C(v90, v91, v174);
          uint64_t v156 = v54;
          memcpy(v169, v174, sizeof(v169));
          uint64_t v120 = Logger.logObject.getter();
          uint64_t v121 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v120, (os_log_type_t)v121))
          {
            os_signpost_id_t v122 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_signpost_id_t v122 = 0;
            _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v121, "found persisted attestation token", v122, 2u);
            swift_slowDealloc();
          }

          uint64_t v123 = v171;
          uint64_t v124 = v172;
          char v125 = v173;
          char v126 = HIBYTE(v173);
          v166[34] = v171;
          v166[35] = v172;
          LOWORD(v166[36]) = v173;
          memcpy(v167, v169, sizeof(v167));
          BitString.init(data:unusedBits:)(v167);
          sub_100029CEC((uint64_t)v167, (uint64_t)v166, &qword_1001DA130);
          sub_100006788((void *)(v55 + 280), *(void *)(v55 + 304));
          sub_100029CEC((uint64_t)v167, (uint64_t)v168, &qword_1001DA130);
          v168[34] = v123;
          v168[35] = v124;
          LOBYTE(v168[36]) = v125;
          BYTE1(v168[36]) = v126;
          memcpy(v176, v168, 0x122uLL);
          sub_1000852DC((uint64_t)v170);
          sub_100068C50((uint64_t)v174);
          sub_1000852DC((uint64_t)v168);
          sub_1000D406C(v176);
          sub_100085484((uint64_t)v168);
          if (sub_10010F11C())
          {
            unint64_t v127 = Logger.logObject.getter();
            os_log_type_t v128 = static os_log_type_t.default.getter();
            BOOL v129 = os_log_type_enabled(v127, v128);
            uint64_t v130 = v159;
            if (v129)
            {
              int v131 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)int v131 = 0;
              _os_log_impl((void *)&_mh_execute_header, v127, v128, "persisted attestation token is valid", v131, 2u);
              swift_slowDealloc();
            }

            sub_100062020((uint64_t)v174);
            sub_100085484((uint64_t)v170);
            (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v130);
            memcpy(v165, v166, 0x122uLL);
            sub_100085484((uint64_t)v165);
            char v132 = OSSignposter.logHandle.getter();
            uint64_t v133 = v146;
            OSSignpostIntervalState.signpostID.getter();
            os_signpost_type_t v134 = static os_signpost_type_t.end.getter();
            if (OS_os_log.signpostsEnabled.getter())
            {
              swift_retain();
              uint64_t v135 = v145;
              checkForErrorAndConsumeState(state:)();
              swift_release();
              uint64_t v137 = v153;
              uint64_t v136 = v154;
              if ((*(unsigned int (**)(char *, uint64_t))(v153 + 88))(v135, v154) == enum case for OSSignpostError.doubleEnd(_:))
              {
                uint64_t v138 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v137 + 8))(v135, v136);
                uint64_t v138 = "end attestation checkpoint";
              }
              uint64_t v139 = v144;
              uint64_t v140 = v158;
              v152(v144, v133, (uint64_t)v158);
              uint64_t v141 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v141 = 0;
              os_signpost_id_t v142 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v132, v134, v142, "attestation-checkpoint", v138, v141, 2u);
              swift_slowDealloc();

              uint64_t v143 = (void (*)(char *, char *))v162;
              v162(v133, (uint64_t)v140);
              v143(v139, v140);
            }
            else
            {

              v162(v133, (uint64_t)v158);
            }
            goto LABEL_34;
          }
          sub_100062020((uint64_t)v174);
          sub_100085484((uint64_t)v168);
          uint64_t v21 = (uint64_t)v158;
          uint64_t v72 = v159;
        }
      }
    }
    else
    {
      sub_1000852DC((uint64_t)v170);
    }
    uint64_t v98 = v21;
    if (qword_1001D92C8 != -1) {
      swift_once();
    }
    uint64_t v99 = type metadata accessor for Logger();
    sub_100003E78(v99, (uint64_t)qword_1001DE788);
    long long v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v100, v101))
    {
      uint64_t v102 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v102 = 0;
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "not attested", v102, 2u);
      swift_slowDealloc();
    }

    sub_100085484((uint64_t)v170);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v72);
    uint64_t v103 = OSSignposter.logHandle.getter();
    uint64_t v104 = v149;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v105 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      uint64_t v106 = v147;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v108 = v153;
      uint64_t v107 = v154;
      if ((*(unsigned int (**)(char *, uint64_t))(v153 + 88))(v106, v154) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v109 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v107);
        uint64_t v109 = "end attestation checkpoint";
      }
      uint64_t v115 = v144;
      v152(v144, v104, v98);
      unint64_t v116 = v104;
      os_signpost_id_t v117 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_signpost_id_t v117 = 0;
      os_signpost_id_t v118 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v103, v105, v118, "attestation-checkpoint", v109, v117, 2u);
      swift_slowDealloc();

      uint64_t v119 = v162;
      v162(v116, v98);
      v119(v115, v98);
      goto LABEL_50;
    }

    int v96 = v104;
    uint64_t v97 = v98;
  }
  v162(v96, v97);
LABEL_50:
  swift_release();
  return 0;
}

uint64_t sub_1001105CC()
{
  uint64_t v1 = v0;
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DE788);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "isRebootedSinceLastOnline()", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = sub_10011286C();
  if (v7 >> 60 == 15)
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Need boot UUID", v10, 2u);
      swift_slowDealloc();
    }
LABEL_17:
    uint64_t v20 = 1;
    goto LABEL_18;
  }
  uint64_t v11 = v6;
  unint64_t v12 = v7;
  uint64_t v13 = v1[11];
  uint64_t v14 = v1[12];
  sub_100006788(v1 + 8, v13);
  if (qword_1001D92E0 != -1) {
    swift_once();
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 32))(qword_1001E1140, *(void *)algn_1001E1148, v13, v14);
  unint64_t v17 = v16;
  if ((sub_10014C798(v11, v12, v15, v16) & 1) == 0)
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v21, "Device reboot detected", v22, 2u);
      swift_slowDealloc();
    }
    sub_100006628(v15, v17);
    sub_10000BF70(v11, v12);
    goto LABEL_17;
  }
  sub_100006628(v15, v17);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v18, "Got previousBootUUID, no reboot detected", v19, 2u);
    swift_slowDealloc();
  }
  sub_10000BF70(v11, v12);
  uint64_t v20 = 0;
LABEL_18:

  return v20;
}

uint64_t sub_100110980()
{
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DE788);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "storeBootUUID()", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = sub_10011286C();
  if (v6 >> 60 == 15)
  {
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not getBootUUID to storeBootUUID", v9, 2u);
      swift_slowDealloc();
    }

    sub_10002A974(2035, 0x6F6F62206465654ELL, (void *)0xEE00444955552074, 0);
    return swift_willThrow();
  }
  else
  {
    uint64_t v11 = v5;
    unint64_t v12 = v6;
    uint64_t v14 = v0[11];
    uint64_t v13 = v0[12];
    sub_100006788(v0 + 8, v14);
    if (qword_1001D92E0 != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 40))(qword_1001E1140, *(void *)algn_1001E1148, v11, v12, v14, v13);
    return sub_10000BF70(v11, v12);
  }
}

uint64_t sub_100110BB4()
{
  return sub_100107840();
}

uint64_t sub_100110BD8(uint64_t a1, uint64_t a2)
{
  return sub_1001079F8(a1, a2);
}

uint64_t sub_100110BFC()
{
  return sub_10010DE88();
}

uint64_t sub_100110C20(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v53 = a8;
  uint64_t v42 = a7;
  uint64_t v51 = a6;
  uint64_t v54 = (void *)a3;
  uint64_t v52 = a10;
  LODWORD(v18) = a1 & 1;
  uint64_t v48 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin();
  os_signpost_type_t v46 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin();
  uint64_t v44 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  uint64_t v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v60[4] = &off_1001C84C8;
  v60[0] = a4;
  v59[3] = type metadata accessor for SecureElement();
  v59[4] = &off_1001CC7B8;
  v59[0] = a5;
  v58[3] = type metadata accessor for MPOCDefaultAttestationManager();
  v58[4] = &off_1001C9838;
  v58[0] = a11;
  v57[3] = type metadata accessor for StoreAndForwardSelector();
  _OWORD v57[4] = &off_1001CC120;
  v57[0] = a13;
  *(unsigned char *)(a14 + 16) = 0;
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v50 = a12;
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v41[2] = sub_100003E78(v23, (uint64_t)qword_1001DE788);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  int v49 = (int)v18;
  if (v26)
  {
    v41[1] = v22;
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v18 = 136315138;
    uint64_t v55 = sub_100005EB8(0xD0000000000000AFLL, 0x800000010019AD90, (uint64_t *)&v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    LOBYTE(v18) = v49;
    swift_slowDealloc();
  }

  *(unsigned char *)(a14 + 40) = (_BYTE)v18;
  *(double *)(a14 + 48) = a9;
  *(void *)(a14 + 56) = a2;
  uint64_t v27 = v54;
  sub_100009300((uint64_t)v54, a14 + 64);
  sub_100009300((uint64_t)v60, a14 + 104);
  sub_100009300((uint64_t)v59, a14 + 144);
  uint64_t v28 = v42;
  *(void *)(a14 + 184) = v51;
  *(void *)(a14 + 192) = v28;
  sub_100009300(v53, a14 + 200);
  sub_100009300(v52, a14 + 240);
  sub_100009300((uint64_t)v58, a14 + 280);
  *(void *)(a14 + 320) = v50;
  sub_100009300((uint64_t)v57, a14 + 328);
  sub_100006680(0, (unint64_t *)&qword_1001DD340);
  swift_unknownObjectRetain();
  swift_retain();
  static DispatchQoS.background.getter();
  uint64_t v56 = &_swiftEmptyArrayStorage;
  sub_100113F54((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_100006814((unint64_t *)&qword_1001DA500, (uint64_t *)&unk_1001DD350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v44, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  *(void *)(a14 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_100006680(0, &qword_1001D8758);
  uint64_t v56 = &_swiftEmptyArrayStorage;
  sub_100113F54(&qword_1001DB790, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_100003EB0(&qword_1001DB798);
  sub_100006814(&qword_1001DB7A0, &qword_1001DB798);
  uint64_t v29 = v46;
  uint64_t v30 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v31 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v30);
  *(void *)(a14 + 32) = v31;
  uint64_t v32 = v27[3];
  uint64_t v33 = v27[4];
  sub_100006788(v27, v32);
  if (qword_1001D92D8 != -1) {
    swift_once();
  }
  uint64_t v34 = qword_1001E1130;
  uint64_t v35 = *(void *)algn_1001E1138;
  sub_100003EB0(&qword_1001D8778);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_100186100;
  *(unsigned char *)(v36 + 32) = v49;
  uint64_t v37 = sub_10012CB58(v36);
  unint64_t v39 = v38;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v33 + 40))(v34, v35, v37, v39, v32, v33);
  sub_100006628(v37, v39);
  swift_unknownObjectRelease();
  swift_release();
  sub_100006520((uint64_t)v57);
  sub_100006520((uint64_t)v58);
  sub_100006520(v52);
  sub_100006520(v53);
  sub_100006520((uint64_t)v59);
  sub_100006520((uint64_t)v60);
  sub_100006520((uint64_t)v54);
  return a14;
}

uint64_t sub_1001114B0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v41 = a8;
  uint64_t v40 = a7;
  uint64_t v39 = a6;
  uint64_t v38 = a3;
  char v17 = a1 & 1;
  uint64_t v52 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v53 = &off_1001C84C8;
  v51[0] = a4;
  uint64_t v49 = type metadata accessor for SecureElement();
  uint64_t v50 = &off_1001CC7B8;
  v48[0] = a5;
  uint64_t v46 = type metadata accessor for MPOCDefaultAttestationManager();
  uint64_t v47 = &off_1001C9838;
  v45[0] = a11;
  uint64_t v43 = type metadata accessor for StoreAndForwardSelector();
  uint64_t v44 = &off_1001CC120;
  v42[0] = a13;
  type metadata accessor for MPOCDefaultMonitorManager();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = sub_10001F1A0((uint64_t)v51, v52);
  __chkstk_darwin(v19, v19);
  uint64_t v21 = (uint64_t *)((char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10001F1A0((uint64_t)v48, v49);
  __chkstk_darwin(v23, v23);
  os_log_type_t v25 = (uint64_t *)((char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_10001F1A0((uint64_t)v45, v46);
  __chkstk_darwin(v27, v27);
  uint64_t v29 = (uint64_t *)((char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = sub_10001F1A0((uint64_t)v42, v43);
  __chkstk_darwin(v31, v31);
  uint64_t v33 = (uint64_t *)((char *)&v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  uint64_t v35 = sub_100110C20(v17, a2, v38, *v21, *v25, v39, v40, v41, a9, a10, *v29, a12, *v33, v18);
  sub_100006520((uint64_t)v42);
  sub_100006520((uint64_t)v45);
  sub_100006520((uint64_t)v48);
  sub_100006520((uint64_t)v51);
  return v35;
}

void *sub_10011188C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v47 = a6;
  uint64_t v45 = a4;
  uint64_t v44 = a3;
  uint64_t v42 = a1;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v17 - 8, v18);
  sub_100009300((uint64_t)(a7 + 2), (uint64_t)v53);
  sub_100006788(a7 + 12, a7[15]);
  uint64_t v43 = a2;
  swift_bridgeObjectRetain();
  uint64_t v46 = a5;
  swift_bridgeObjectRetain();
  sub_100039D18((uint64_t)v52);
  uint64_t v19 = a7[17];
  sub_100009300((uint64_t)(a7 + 18), (uint64_t)v50);
  sub_100009300((uint64_t)(a7 + 25), (uint64_t)v48);
  uint64_t v20 = a7[23];
  uint64_t v21 = a7[24];
  uint64_t v41 = v20;
  sub_100006680(0, (unint64_t *)&qword_1001DD340);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.background.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_1001D9428 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1001D9420;
  id v24 = (id)qword_1001E1240;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_1001E1238;
  uint64_t v26 = sub_10001F1A0((uint64_t)v50, v51);
  __chkstk_darwin(v26, v26);
  uint64_t v28 = (uint64_t *)((char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = sub_10001F1A0((uint64_t)v48, v49);
  __chkstk_darwin(v30, v30);
  uint64_t v32 = (uint64_t *)((char *)&v41 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  uint64_t v34 = *v28;
  uint64_t v35 = *v32;
  uint64_t v36 = v47;
  swift_retain();
  swift_bridgeObjectRetain();
  *((void *)&v40 + 1) = v24;
  *((void *)&v39 + 1) = v21;
  *(void *)&long long v40 = v22;
  *(void *)&long long v39 = v41;
  uint64_t v37 = sub_100111D70(v42, v43, v44, v45, v46, (uint64_t)v53, v36, (uint64_t)v52, v19, v34, v35, v39, v40, v25);
  sub_100006520((uint64_t)v48);
  sub_100006520((uint64_t)v50);
  sub_100113F54(&qword_1001DE9D8, (void (*)(uint64_t))type metadata accessor for BAASigner);
  return v37;
}

void *sub_100111D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, long long a13, uint64_t a14)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  long long v29 = a13;
  long long v30 = a12;
  uint64_t v39 = type metadata accessor for SystemInfo();
  long long v40 = &off_1001CB4C8;
  v38[0] = a10;
  uint64_t v36 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v37 = &off_1001C84C8;
  v35[0] = a11;
  type metadata accessor for BAASigner();
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = sub_10001F1A0((uint64_t)v38, v39);
  __chkstk_darwin(v19, v19);
  uint64_t v21 = (uint64_t *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10001F1A0((uint64_t)v35, v36);
  __chkstk_darwin(v23, v23);
  uint64_t v25 = (uint64_t *)((char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_100111FBC(a1, a2, a3, a4, v31, v32, v33, v34, a9, *v21, *v25, v30, *((uint64_t *)&v30 + 1), (void *)v29, *((void **)&v29 + 1), a14, v18);
  sub_100006520((uint64_t)v35);
  sub_100006520((uint64_t)v38);
  return v27;
}

void *sub_100111FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v19, v20);
  void v45[3] = type metadata accessor for NullAuditor();
  v45[4] = &off_1001C7208;
  v45[0] = a7;
  uint64_t v43 = &type metadata for SystemRandomNumberGenerator;
  uint64_t v44 = &protocol witness table for SystemRandomNumberGenerator;
  void v41[3] = type metadata accessor for SystemInfo();
  v41[4] = &off_1001CB4C8;
  v41[0] = a10;
  v40[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v40[4] = &off_1001C84C8;
  aBlock[5] = 0;
  v40[0] = a11;
  a17[7] = 0;
  aBlock[4] = BitString.init(data:unusedBits:);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001CAF40;
  _Block_copy(aBlock);
  sub_100113F54((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100006814((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  uint64_t v21 = a8;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  a17[44] = DispatchWorkItem.init(flags:block:)();
  a17[45] = 600000;
  a17[2] = a1;
  a17[3] = a2;
  a17[4] = a3;
  a17[5] = a4;
  a17[6] = a5;
  sub_100009300(a6, (uint64_t)(a17 + 8));
  sub_100009300((uint64_t)v45, (uint64_t)(a17 + 13));
  sub_100009300(a8, (uint64_t)(a17 + 33));
  a17[38] = a9;
  sub_100009300((uint64_t)v41, (uint64_t)(a17 + 39));
  sub_100009300((uint64_t)v40, (uint64_t)(a17 + 28));
  a17[18] = a14;
  a17[19] = a15;
  a17[20] = a16;
  a17[21] = a12;
  a17[22] = a13;
  sub_100009300((uint64_t)v42, (uint64_t)(a17 + 23));
  swift_retain();
  id v22 = a14;
  id v23 = a15;
  uint64_t v24 = sub_10015155C();
  if (!v24) {
    goto LABEL_5;
  }
  uint64_t v25 = (uint64_t *)v24;
  uint64_t v26 = *(void *)(v24 + 24);
  unint64_t v27 = *(void *)(v24 + 32);
  sub_1000065D0(v26, v27);
  char v28 = sub_1001540F0();
  sub_100006628(v26, v27);
  if ((v28 & 1) == 0)
  {
    sub_100152464();
    swift_release();
LABEL_5:
    uint64_t v37 = v22;
    sub_100150E50();
    long long v30 = (uint64_t *)v29;
    sub_100151D7C(v29);
    sub_100152928(v30);
    swift_release();

    swift_release();
    goto LABEL_6;
  }
  a17[7] = v25;
  swift_retain();
  swift_release();
  sub_100152928(v25);
  swift_release();
  swift_release();

LABEL_6:
  sub_100006520((uint64_t)v42);
  sub_100006520((uint64_t)v40);
  sub_100006520((uint64_t)v41);
  sub_100006520(v21);
  sub_100006520((uint64_t)v45);
  sub_100006520(a6);
  return a17;
}

uint64_t sub_10011286C()
{
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DE788);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "getBootUUID()", v3, 2u);
    swift_slowDealloc();
  }

  size_t v17 = 37;
  os_log_type_t v4 = (void *)swift_slowAlloc();
  if (sysctlbyname("kern.bootsessionuuid", v4, &v17, 0, 0))
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (__OFSUB__(v17, 1)) {
      __break(1u);
    }
    uint64_t v5 = sub_1001156C4((uint64_t)v4, (uint64_t)v4 + v17 - 1);
    uint64_t v21 = v5;
    unint64_t v22 = v6;
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v9 = 136315138;
      swift_beginAccess();
      uint64_t countAndFlagsBits = 0;
      object = 0;
      uint64_t v5 = v21;
      unint64_t v12 = v22;
      if (v22 >> 60 != 15)
      {
        sub_1000065D0(v21, v22);
        Swift::String v13 = Data.hexString()();
        uint64_t countAndFlagsBits = v13._countAndFlagsBits;
        object = v13._object;
        sub_10000BF70(v5, v12);
      }
      uint64_t v18 = countAndFlagsBits;
      uint64_t v19 = object;
      sub_100003EB0(&qword_1001DA138);
      uint64_t v14 = String.init<A>(describing:)();
      uint64_t v18 = sub_100005EB8(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "bootUUID data: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  swift_slowDealloc();
  return v5;
}

double sub_100112B6C(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_10018A0C0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  return result;
}

uint64_t sub_100112BA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32)
{
  if (a2 != 1)
  {
    sub_100029ABC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100112C94(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100112CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100112CC8()
{
  return swift_release();
}

uint64_t sub_100112CD0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100112D08()
{
  return sub_10010D580();
}

unint64_t sub_100112D10()
{
  unint64_t result = qword_1001DE9B8;
  if (!qword_1001DE9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE9B8);
  }
  return result;
}

unint64_t sub_100112D64()
{
  unint64_t result = qword_1001DE9C0;
  if (!qword_1001DE9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE9C0);
  }
  return result;
}

uint64_t sub_100112DB8(uint64_t result)
{
  *(unsigned char *)(result + 322) = 1;
  return result;
}

uint64_t sub_100112DC4(uint64_t result)
{
  *(unsigned char *)(result + 322) = 0;
  return result;
}

uint64_t sub_100112DCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 322);
}

unint64_t sub_100112DD4()
{
  unint64_t result = qword_1001DE9D0;
  if (!qword_1001DE9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DE9D0);
  }
  return result;
}

uint64_t sub_100112E28(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v7 = *(_WORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 240);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    *(void *)(a1 + 272),
    *(void *)(a1 + 280),
    v7);
  return a1;
}

uint64_t sub_100112EBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32)
{
  if (a2 != 1)
  {
    sub_100085364(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100112FAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 96);
  long long v20 = *(_OWORD *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 112);
  long long v15 = *(_OWORD *)(a1 + 160);
  long long v16 = *(_OWORD *)(a1 + 144);
  long long v13 = *(_OWORD *)(a1 + 192);
  long long v14 = *(_OWORD *)(a1 + 176);
  long long v12 = *(_OWORD *)(a1 + 208);
  long long v10 = *(_OWORD *)(a1 + 240);
  long long v11 = *(_OWORD *)(a1 + 224);
  long long v9 = *(_OWORD *)(a1 + 256);
  swift_errorRelease();
  sub_100112BA4(v22, v21, v2, v3, v4, v5, v6, v7, v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((unint64_t *)&v9 + 1));
  return a1;
}

uint64_t sub_1001130F8(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_100085364(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100113180(uint64_t a1)
{
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v3 = *(_OWORD *)(a1 + 208);
  sub_10011321C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    *(void *)(a1 + 304),
    *(void *)(a1 + 312),
    *(_WORD *)(a1 + 320),
    *(unsigned char *)(a1 + 322));
  return a1;
}

uint64_t sub_10011321C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,__int16 a41,char a42)
{
  if (a42)
  {
    swift_errorRelease();
    return sub_100112BA4(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34);
  }
  else
  {
    sub_100029ABC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      a22,
      a23,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30,
      a31,
      a32);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100113450(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    *(void *)(a1 + 256),
    *(void *)(a1 + 264));
  return a1;
}

uint64_t sub_1001134D4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100113514()
{
  unint64_t v1 = *(void (**)(void))(v0 + 24);
  sub_100107CB8(1);
  v1(0);

  return swift_errorRelease();
}

void sub_10011357C()
{
}

uint64_t sub_100113598(uint64_t a1)
{
  if (qword_1001D92C8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = sub_100003E78(v3, (uint64_t)qword_1001DE788);
  long long v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v60 = v4;
    v74[0] = swift_slowAlloc();
    *(_DWORD *)long long v7 = 136315138;
    v71[0] = sub_100005EB8(0x7065642874696E69, 0xEC000000293A746FLL, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v8 = a1;
  sub_1000FBA34((uint64_t)v74);
  if (v1)
  {
    swift_release();
    return v8;
  }
  sub_1000F7B54((uint64_t)v71);
  uint64_t v9 = v72;
  uint64_t v10 = v73;
  sub_100006788(v71, v72);
  sub_100021C74(v9, v10);
  uint64_t v11 = v69;
  uint64_t v12 = v70;
  sub_100006788(v68, v69);
  if (qword_1001D92D8 != -1) {
    swift_once();
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 32))(qword_1001E1130, *(void *)algn_1001E1138, v11, v12);
  unint64_t v15 = v14;
  uint64_t v16 = v13;
  switch(v14 >> 62)
  {
    case 1uLL:
      uint64_t v17 = (int)v13;
      uint64_t v18 = v13 >> 32;
      goto LABEL_14;
    case 2uLL:
      uint64_t v17 = *(void *)(v13 + 16);
      uint64_t v18 = *(void *)(v13 + 24);
LABEL_14:
      if (v17 != v18) {
        goto LABEL_15;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_17;
    default:
      if ((v14 & 0xFF000000000000) == 0) {
        goto LABEL_17;
      }
LABEL_15:
      int v19 = Data.subscript.getter();
      if (v19 != 1)
      {
        if (v19)
        {
LABEL_17:
          long long v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v20, v21))
          {
            sub_100006628(v16, v15);

            goto LABEL_21;
          }
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Could not load MPOCOperation mode from persistence. Using .online", v22, 2u);
          swift_slowDealloc();
        }
        sub_100006628(v16, v15);
LABEL_21:
        char v23 = 0;
        goto LABEL_22;
      }
      sub_100006628(v16, v15);
      char v23 = 1;
LABEL_22:
      uint64_t v24 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
      uint64_t v25 = type metadata accessor for Settings();
      double v26 = *(double *)(v24 + *(int *)(v25 + 32));
      uint64_t v27 = *(void *)(v24 + *(int *)(v25 + 36));
      sub_100009300((uint64_t)v68, (uint64_t)v67);
      sub_1000F85DC((uint64_t)v66);
      sub_1000FA008((uint64_t)v65);
      char v28 = sub_100006788(v74, v75);
      uint64_t v29 = sub_100006788(v74, v75);
      uint64_t v30 = *(void *)(*v29 + 280);
      uint64_t v31 = *(void *)(*v29 + 288);
      type metadata accessor for NullAuditor();
      uint64_t v32 = a1;
      uint64_t v33 = swift_allocObject();
      uint64_t v34 = (void *)*v28;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_10011188C(v30, v31, 101, 0x7461747365747461, 0xEB000000006E6F69, v33, v34);
      uint64_t v37 = v36;
      swift_release();
      swift_bridgeObjectRelease();
      sub_100100424((uint64_t)v64);
      sub_100100968((uint64_t)v63);
      sub_1000FDF58((uint64_t)v62);
      uint64_t v60 = sub_1000FF9EC();
      sub_1000FE49C((uint64_t)v61);
      uint64_t v59 = v32;
      uint64_t v39 = sub_10001F1A0((uint64_t)v66, v66[3]);
      unsigned __int8 v58 = v53;
      __chkstk_darwin(v39, v39);
      uint64_t v56 = (void *)((char *)v53 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(void))(v41 + 16))();
      uint64_t v42 = sub_10001F1A0((uint64_t)v65, v65[3]);
      uint64_t v57 = v53;
      __chkstk_darwin(v42, v42);
      uint64_t v54 = (void *)((char *)v53 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(void))(v44 + 16))();
      uint64_t v45 = sub_10001F1A0((uint64_t)v62, v62[3]);
      uint64_t v55 = v53;
      __chkstk_darwin(v45, v45);
      uint64_t v47 = (void *)((char *)v53 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v48 + 16))(v47);
      uint64_t v49 = sub_10001F1A0((uint64_t)v61, v61[3]);
      v53[1] = v53;
      __chkstk_darwin(v49, v49);
      uint64_t v51 = (void *)((char *)v53 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v52 + 16))(v51);
      uint64_t v8 = sub_1001114B0(v23, v27, (uint64_t)v67, *v56, *v54, (uint64_t)v35, v37, (uint64_t)v64, v26, (uint64_t)v63, *v47, v60, *v51);
      sub_100006520((uint64_t)v61);
      sub_100006520((uint64_t)v62);
      sub_100006520((uint64_t)v65);
      sub_100006520((uint64_t)v66);
      swift_release();
      sub_100006520((uint64_t)v68);
      sub_100006520((uint64_t)v71);
      sub_100006520((uint64_t)v74);
      return v8;
  }
}

uint64_t sub_100113F54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for MPOCMonitorInstruction(void *a1)
{
  swift_errorRelease();
  uint64_t result = a1[3];
  if (result)
  {
    if (result == 1) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006628(a1[32], a1[33]);
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MPOCMonitorInstruction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_errorRetain();
  *(void *)a1 = v4;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  long long v5 = a2 + 2;
  uint64_t v6 = a2[3];
  if (!v6)
  {
    memcpy((void *)(a1 + 16), v5, 0x110uLL);
LABEL_6:
    uint64_t v21 = a2[37];
    *(void *)(a1 + 288) = a2[36];
    *(void *)(a1 + 296) = v21;
    *(_WORD *)(a1 + 304) = *((_WORD *)a2 + 152);
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  if (v6 != 1)
  {
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v9;
    uint64_t v10 = a2[11];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = v10;
    uint64_t v11 = a2[13];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = v11;
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    *(void *)(a1 + 128) = a2[16];
    uint64_t v12 = a2[19];
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = v12;
    uint64_t v13 = a2[21];
    *(void *)(a1 + 160) = a2[20];
    *(void *)(a1 + 168) = v13;
    uint64_t v14 = a2[23];
    *(void *)(a1 + 176) = a2[22];
    *(void *)(a1 + 184) = v14;
    uint64_t v15 = a2[25];
    *(void *)(a1 + 192) = a2[24];
    *(void *)(a1 + 200) = v15;
    uint64_t v16 = a2[27];
    *(void *)(a1 + 208) = a2[26];
    *(void *)(a1 + 216) = v16;
    uint64_t v17 = a2[29];
    *(void *)(a1 + 224) = a2[28];
    *(void *)(a1 + 232) = v17;
    uint64_t v18 = a2[31];
    *(void *)(a1 + 240) = a2[30];
    *(void *)(a1 + 248) = v18;
    unint64_t v19 = a2[33];
    uint64_t v23 = a2[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000065D0(v23, v19);
    *(void *)(a1 + 256) = v23;
    *(void *)(a1 + 264) = v19;
    uint64_t v20 = a2[35];
    *(void *)(a1 + 272) = a2[34];
    *(void *)(a1 + 280) = v20;
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  memcpy((void *)(a1 + 16), v5, 0x122uLL);
LABEL_7:
  *(unsigned char *)(a1 + 306) = *((unsigned char *)a2 + 306);
  *(_WORD *)(a1 + 307) = *(_WORD *)((char *)a2 + 307);
  *(void *)(a1 + 312) = a2[39];
  *(_WORD *)(a1 + 320) = *((_WORD *)a2 + 160);
  return a1;
}

uint64_t assignWithCopy for MPOCMonitorInstruction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a2 + 306;
  uint64_t v5 = *a2;
  swift_errorRetain();
  *(void *)a1 = v5;
  swift_errorRelease();
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = a2[3];
  if (v6 != 1)
  {
    if (v7 == 1)
    {
      sub_100114914(a1 + 16);
      goto LABEL_7;
    }
    if (v6)
    {
      if (v7)
      {
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = a2[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 96) = a2[12];
        *(void *)(a1 + 104) = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 112) = a2[14];
        *(void *)(a1 + 120) = a2[15];
        uint64_t v9 = a2[16];
        *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
        *(void *)(a1 + 128) = v9;
        *(void *)(a1 + 144) = a2[18];
        *(void *)(a1 + 152) = a2[19];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 160) = a2[20];
        *(void *)(a1 + 168) = a2[21];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 176) = a2[22];
        *(void *)(a1 + 184) = a2[23];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 192) = a2[24];
        *(void *)(a1 + 200) = a2[25];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 208) = a2[26];
        *(void *)(a1 + 216) = a2[27];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 224) = a2[28];
        *(void *)(a1 + 232) = a2[29];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 240) = a2[30];
        *(void *)(a1 + 248) = a2[31];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v10 = a2[32];
        unint64_t v11 = a2[33];
        sub_1000065D0(v10, v11);
        uint64_t v12 = *(void *)(a1 + 256);
        unint64_t v13 = *(void *)(a1 + 264);
        *(void *)(a1 + 256) = v10;
        *(void *)(a1 + 264) = v11;
        sub_100006628(v12, v13);
        *(void *)(a1 + 272) = a2[34];
        *(void *)(a1 + 280) = a2[35];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_17:
        *(void *)(a1 + 288) = a2[36];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v16 = a2[37];
        *(_WORD *)(a1 + 304) = *((_WORD *)a2 + 152);
        *(void *)(a1 + 296) = v16;
        goto LABEL_18;
      }
      sub_1000F2BFC(a1 + 16);
    }
    else if (v7)
    {
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = a2[3];
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = a2[10];
      *(void *)(a1 + 88) = a2[11];
      *(void *)(a1 + 96) = a2[12];
      *(void *)(a1 + 104) = a2[13];
      *(void *)(a1 + 112) = a2[14];
      *(void *)(a1 + 120) = a2[15];
      uint64_t v15 = a2[16];
      *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
      *(void *)(a1 + 128) = v15;
      *(void *)(a1 + 144) = a2[18];
      *(void *)(a1 + 152) = a2[19];
      *(void *)(a1 + 160) = a2[20];
      *(void *)(a1 + 168) = a2[21];
      *(void *)(a1 + 176) = a2[22];
      *(void *)(a1 + 184) = a2[23];
      *(void *)(a1 + 192) = a2[24];
      *(void *)(a1 + 200) = a2[25];
      *(void *)(a1 + 208) = a2[26];
      *(void *)(a1 + 216) = a2[27];
      *(void *)(a1 + 224) = a2[28];
      *(void *)(a1 + 232) = a2[29];
      *(void *)(a1 + 240) = a2[30];
      *(void *)(a1 + 248) = a2[31];
      unint64_t v20 = a2[33];
      uint64_t v22 = a2[32];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000065D0(v22, v20);
      *(void *)(a1 + 256) = v22;
      *(void *)(a1 + 264) = v20;
      *(void *)(a1 + 272) = a2[34];
      *(void *)(a1 + 280) = a2[35];
      swift_bridgeObjectRetain();
      goto LABEL_17;
    }
    memcpy((void *)(a1 + 16), a2 + 2, 0x110uLL);
    goto LABEL_17;
  }
  if (!v7)
  {
    memcpy((void *)(a1 + 16), a2 + 2, 0x110uLL);
    goto LABEL_12;
  }
  if (v7 != 1)
  {
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = a2[10];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = a2[12];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = a2[15];
    uint64_t v8 = a2[16];
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    *(void *)(a1 + 128) = v8;
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = a2[20];
    *(void *)(a1 + 168) = a2[21];
    *(void *)(a1 + 176) = a2[22];
    *(void *)(a1 + 184) = a2[23];
    *(void *)(a1 + 192) = a2[24];
    *(void *)(a1 + 200) = a2[25];
    *(void *)(a1 + 208) = a2[26];
    *(void *)(a1 + 216) = a2[27];
    *(void *)(a1 + 224) = a2[28];
    *(void *)(a1 + 232) = a2[29];
    *(void *)(a1 + 240) = a2[30];
    *(void *)(a1 + 248) = a2[31];
    unint64_t v19 = a2[33];
    uint64_t v21 = a2[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000065D0(v21, v19);
    *(void *)(a1 + 256) = v21;
    *(void *)(a1 + 264) = v19;
    *(void *)(a1 + 272) = a2[34];
    *(void *)(a1 + 280) = a2[35];
    swift_bridgeObjectRetain();
LABEL_12:
    *(void *)(a1 + 288) = a2[36];
    uint64_t v14 = a2[37];
    *(_WORD *)(a1 + 304) = *((_WORD *)a2 + 152);
    *(void *)(a1 + 296) = v14;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
LABEL_7:
  memcpy((void *)(a1 + 16), a2 + 2, 0x122uLL);
LABEL_18:
  *(unsigned char *)(a1 + 306) = *v4;
  *(unsigned char *)(a1 + 307) = v4[1];
  *(unsigned char *)(a1 + 308) = v4[2];
  uint64_t v17 = a2[39];
  *(unsigned char *)(a1 + 320) = *((unsigned char *)a2 + 320);
  *(void *)(a1 + 312) = v17;
  *(unsigned char *)(a1 + 321) = v4[15];
  return a1;
}

uint64_t sub_100114914(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for MPOCMonitorInstruction(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x142uLL);
}

uint64_t assignWithTake for MPOCMonitorInstruction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 306);
  *(void *)a1 = *(void *)a2;
  swift_errorRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5 == 1) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6 != 1)
  {
    if (v5)
    {
      if (v6)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v6;
        swift_bridgeObjectRelease();
        uint64_t v7 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v7;
        swift_bridgeObjectRelease();
        uint64_t v8 = *(void *)(a2 + 56);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = v8;
        swift_bridgeObjectRelease();
        uint64_t v9 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = v9;
        swift_bridgeObjectRelease();
        uint64_t v10 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = v10;
        swift_bridgeObjectRelease();
        uint64_t v11 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = v11;
        swift_bridgeObjectRelease();
        *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
        uint64_t v12 = *(void *)(a2 + 152);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(void *)(a1 + 152) = v12;
        swift_bridgeObjectRelease();
        uint64_t v13 = *(void *)(a2 + 168);
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a1 + 168) = v13;
        swift_bridgeObjectRelease();
        uint64_t v14 = *(void *)(a2 + 184);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        *(void *)(a1 + 184) = v14;
        swift_bridgeObjectRelease();
        uint64_t v15 = *(void *)(a2 + 200);
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(void *)(a1 + 200) = v15;
        swift_bridgeObjectRelease();
        uint64_t v16 = *(void *)(a2 + 216);
        *(void *)(a1 + 208) = *(void *)(a2 + 208);
        *(void *)(a1 + 216) = v16;
        swift_bridgeObjectRelease();
        uint64_t v17 = *(void *)(a2 + 232);
        *(void *)(a1 + 224) = *(void *)(a2 + 224);
        *(void *)(a1 + 232) = v17;
        swift_bridgeObjectRelease();
        uint64_t v18 = *(void *)(a2 + 248);
        *(void *)(a1 + 240) = *(void *)(a2 + 240);
        *(void *)(a1 + 248) = v18;
        swift_bridgeObjectRelease();
        uint64_t v19 = *(void *)(a1 + 256);
        unint64_t v20 = *(void *)(a1 + 264);
        *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
        sub_100006628(v19, v20);
        uint64_t v21 = *(void *)(a2 + 280);
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(void *)(a1 + 280) = v21;
        swift_bridgeObjectRelease();
LABEL_10:
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_bridgeObjectRelease();
        *(void *)(a1 + 296) = *(void *)(a2 + 296);
        *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
        goto LABEL_11;
      }
      sub_1000F2BFC(a1 + 16);
    }
    memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x110uLL);
    goto LABEL_10;
  }
  sub_100114914(a1 + 16);
LABEL_4:
  memcpy((void *)(a1 + 16), (const void *)(a2 + 16), 0x122uLL);
LABEL_11:
  *(unsigned char *)(a1 + 306) = *v4;
  *(unsigned char *)(a1 + 307) = v4[1];
  *(unsigned char *)(a1 + 308) = v4[2];
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(unsigned char *)(a1 + 321) = v4[15];
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorInstruction(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 322)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorInstruction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_WORD *)(result + 320) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 322) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 322) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorInstruction()
{
  return &type metadata for MPOCMonitorInstruction;
}

void *sub_100114CB8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v5) {
      break;
    }
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = 0;
    while (v5 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      uint64_t v11 = v8;
      sub_100120A5C(&v11, a2, &v10, &v12);

      if (v2) {
        return (void *)swift_release();
      }
      ++v7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v5 == v7) {
        return v13;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100114E24(unint64_t a1, unint64_t a2)
{
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100003EB0(&qword_1001DEBF0);
  if (swift_dynamicCast())
  {
    sub_10001F1F0(v38, (uint64_t)&v41);
    sub_100006788(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    sub_100006520((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_10005F4F8((uint64_t)v38, &qword_1001DEBF8);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    id v8 = sub_10012CA54(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  id v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_10012CAB8(v11);
  *((void *)&v38[0] + 1) = v12;
  __chkstk_darwin();
  unint64_t v13 = (unint64_t)sub_10012B01C((void *(*)(uint64_t *__return_ptr, char *, char *))sub_10013122C);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_1000940B0(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_1000940B0(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  id v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    sub_10000BF70(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_10000BF70((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_100115354(uint64_t a1, uint64_t a2)
{
  void v8[3] = &type metadata for UnsafeRawBufferPointer;
  _OWORD v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  unint64_t v2 = sub_100006788(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  unint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (uint64_t v4 = (unsigned char *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_10012C890(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_10012C954((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_10012C9D0((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_100006520((uint64_t)v8);
  return v6;
}

uint64_t sub_100115410(uint64_t a1, unint64_t a2)
{
  v28[3] = &type metadata for Data;
  uint64_t v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_100006788(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1000065D0(a1, a2);
      sub_1000065D0(v5, v6);
      id v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = 0;
      }
      sub_10012B320(v8, v13, &v27);
      sub_100006628(v5, v6);
LABEL_27:
      sub_100006628(a1, a2);
      uint64_t v24 = v27;
      sub_100006520((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1000065D0(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        BOOL v23 = v22;
      }
      else {
        BOOL v23 = 0;
      }
      sub_10012B320(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1000065D0(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1000065D0(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_10012B320(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_1001156C4(uint64_t a1, uint64_t a2)
{
  _OWORD v7[3] = &type metadata for UnsafeMutableRawBufferPointer;
  _OWORD v7[4] = &protocol witness table for UnsafeMutableRawBufferPointer;
  v7[0] = a1;
  v7[1] = a2;
  unint64_t v2 = sub_100006788(v7, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = (unsigned char *)v2[1];
    uint64_t v5 = (uint64_t)&v4[-v3];
    if (v4 == (unsigned char *)v3)
    {
      uint64_t v3 = 0;
    }
    else if (v5 <= 14)
    {
      uint64_t v3 = sub_10012C890((unsigned char *)*v2, v4);
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(bytes:length:)();
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v3 = swift_allocObject();
        *(void *)(v3 + 16) = 0;
        *(void *)(v3 + 24) = v5;
      }
      else
      {
        uint64_t v3 = v5 << 32;
      }
    }
  }
  sub_100006520((uint64_t)v7);
  return v3;
}

uint64_t sub_1001157C8(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v42 = a1;
  uint64_t v2 = sub_100003EB0(&qword_1001DE6C8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v41 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v6 = v36;
  __chkstk_darwin(v5, v7);
  uint64_t v37 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003EB0(qword_1001DBB58);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = type metadata accessor for StopWatch();
  uint64_t v39 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v35 - v23;
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v25(v16, 1, 1, v5);
  v25(v13, 1, 1, v5);
  v25(v21, 1, 1, v5);
  uint64_t v40 = v17;
  uint64_t v26 = (uint64_t)&v21[*(int *)(v17 + 20)];
  v25((char *)v26, 1, 1, v5);
  sub_10005F4F8((uint64_t)v21, qword_1001DBB58);
  sub_100029CEC((uint64_t)v16, (uint64_t)v21, qword_1001DBB58);
  sub_10005F4F8(v26, qword_1001DBB58);
  sub_100029CEC((uint64_t)v13, v26, qword_1001DBB58);
  sub_10005AE78((uint64_t)v21, (uint64_t)v24);
  uint64_t v27 = v37;
  static DispatchTime.now()();
  sub_10005F4F8((uint64_t)v24, qword_1001DBB58);
  uint64_t v28 = v36;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v24, v27, v5);
  v25(v24, 0, 1, v5);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v5);
  unint64_t v29 = 0xED0000656D695468;
  unint64_t v30 = 0x637465464D414C53;
  switch((char)v38)
  {
    case 1:
      unint64_t v30 = 0xD000000000000012;
      char v31 = "KernelSLAMLoadTime";
      goto LABEL_5;
    case 2:
      unint64_t v30 = 0xD000000000000018;
      char v31 = "GlobalConfigSLAMLoadTime";
      goto LABEL_5;
    case 3:
      unint64_t v30 = 0xD000000000000013;
      char v31 = "ProfileSLAMLoadTime";
LABEL_5:
      unint64_t v29 = (unint64_t)(v31 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v29 = 0x80000001001934D0;
      unint64_t v30 = 0xD000000000000011;
      break;
    case 5:
      uint64_t v32 = 0x736575716552;
      goto LABEL_10;
    case 6:
      unint64_t v29 = 0xEC000000656D6954;
      unint64_t v30 = 0x7265746E45464153;
      break;
    case 7:
      uint64_t v32 = 0x697845464153;
LABEL_10:
      unint64_t v30 = v32 & 0xFFFFFFFFFFFFLL | 0x5474000000000000;
      unint64_t v29 = 0xEB00000000656D69;
      break;
    default:
      break;
  }
  uint64_t v33 = v41;
  sub_10012D668((uint64_t)v24, v41, (uint64_t (*)(void))type metadata accessor for StopWatch);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v33, 0, 1, v40);
  sub_100105A94(v33, v30, v29);
  return sub_10012D6D0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for StopWatch);
}

uint64_t sub_100115CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v37 = a1;
  uint64_t v2 = sub_100003EB0(&qword_1001DE6C8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v36 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v32 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003EB0(qword_1001DBB58);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = type metadata accessor for StopWatch();
  uint64_t v33 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v32 - v23;
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v25(v16, 1, 1, v5);
  v25(v13, 1, 1, v5);
  v25(v21, 1, 1, v5);
  uint64_t v34 = v17;
  uint64_t v26 = (uint64_t)&v21[*(int *)(v17 + 20)];
  v25((char *)v26, 1, 1, v5);
  sub_10005AE10((uint64_t)v16, (uint64_t)v21);
  sub_10005AE10((uint64_t)v13, v26);
  sub_10005AE78((uint64_t)v21, (uint64_t)v24);
  uint64_t v27 = v32;
  static DispatchTime.now()();
  sub_10005F4F8((uint64_t)v24, qword_1001DBB58);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v24, v27, v5);
  v25(v24, 0, 1, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v5);
  uint64_t v28 = 0x8000000100192EE0;
  uint64_t v29 = 0xD000000000000012;
  switch((char)v35)
  {
    case 1:
      uint64_t v28 = 0xEB00000000564D45;
      uint64_t v29 = 0x656D695464616572;
      break;
    case 2:
      uint64_t v28 = 0xE900000000000065;
      uint64_t v29 = 0x6D69546C61746F74;
      break;
    case 3:
      uint64_t v28 = 0xEE00534156656D69;
      uint64_t v29 = 0x54676E696C6C6F70;
      break;
    default:
      break;
  }
  uint64_t v30 = v36;
  sub_10012D668((uint64_t)v24, v36, (uint64_t (*)(void))type metadata accessor for StopWatch);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v34);
  sub_100105A94(v30, v29, v28);
  return sub_10012D6D0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for StopWatch);
}

uint64_t sub_1001160FC(uint64_t a1, int a2)
{
  int v37 = a2;
  uint64_t v38 = a1;
  uint64_t v2 = sub_100003EB0(&qword_1001DE6C8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v36 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v34 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003EB0(qword_1001DBB58);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = type metadata accessor for StopWatch();
  uint64_t v33 = v17;
  uint64_t v35 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v33 - v23;
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v25(v16, 1, 1, v5);
  v25(v13, 1, 1, v5);
  v25(v21, 1, 1, v5);
  uint64_t v26 = (uint64_t)&v21[*(int *)(v17 + 20)];
  v25((char *)v26, 1, 1, v5);
  sub_10005AE10((uint64_t)v16, (uint64_t)v21);
  sub_10005AE10((uint64_t)v13, v26);
  sub_10005AE78((uint64_t)v21, (uint64_t)v24);
  uint64_t v27 = v34;
  static DispatchTime.now()();
  sub_10005F4F8((uint64_t)v24, qword_1001DBB58);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v24, v27, v5);
  v25(v24, 0, 1, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v27, v5);
  unint64_t v28 = sub_1000581D0(v37);
  uint64_t v30 = v29;
  uint64_t v31 = v36;
  sub_10012D668((uint64_t)v24, v36, (uint64_t (*)(void))type metadata accessor for StopWatch);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v33);
  sub_100105A94(v31, v28, v30);
  return sub_10012D6D0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for StopWatch);
}

uint64_t sub_1001164B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003EB0(&qword_1001DE6C8);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v53 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = type metadata accessor for StopWatch();
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a2;
  uint64_t v54 = v20;
  unint64_t v21 = 0x637465464D414C53;
  unint64_t v22 = 0xED0000656D695468;
  switch((char)a2)
  {
    case 1:
      unint64_t v21 = 0xD000000000000012;
      uint64_t v23 = "KernelSLAMLoadTime";
      goto LABEL_5;
    case 2:
      unint64_t v21 = 0xD000000000000018;
      uint64_t v23 = "GlobalConfigSLAMLoadTime";
      goto LABEL_5;
    case 3:
      unint64_t v21 = 0xD000000000000013;
      uint64_t v23 = "ProfileSLAMLoadTime";
LABEL_5:
      unint64_t v22 = (unint64_t)(v23 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v22 = 0x80000001001934D0;
      unint64_t v21 = 0xD000000000000011;
      break;
    case 5:
      uint64_t v24 = 0x736575716552;
      goto LABEL_9;
    case 6:
      unint64_t v21 = 0x7265746E45464153;
      unint64_t v22 = 0xEC000000656D6954;
      break;
    case 7:
      uint64_t v24 = 0x697845464153;
LABEL_9:
      unint64_t v21 = v24 & 0xFFFFFFFFFFFFLL | 0x5474000000000000;
      unint64_t v22 = 0xEB00000000656D69;
      break;
    default:
      break;
  }
  uint64_t v51 = a1;
  uint64_t v25 = a1[1];
  if (*(void *)(v25 + 16) && (unint64_t v26 = sub_10000C4B0(v21, v22), (v27 & 1) != 0))
  {
    uint64_t v28 = *(void *)(v25 + 56);
    uint64_t v29 = v54;
    sub_10012D668(v28 + *(void *)(v54 + 72) * v26, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for StopWatch);
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
    uint64_t v31 = v15;
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v29 = v54;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
    uint64_t v31 = v15;
    uint64_t v32 = 1;
  }
  uint64_t v50 = v30;
  v30(v31, v32, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v15, 1, v16) == 1) {
    return sub_10005F4F8((uint64_t)v15, &qword_1001DE6C8);
  }
  sub_10005AE78((uint64_t)v15, (uint64_t)v19);
  static DispatchTime.now()();
  uint64_t v34 = (uint64_t)&v19[*(int *)(v16 + 20)];
  sub_10005F4F8(v34, qword_1001DBB58);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v34, v8, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v34, 0, 1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  unint64_t v35 = 0xED0000656D695468;
  char v36 = v52;
  unint64_t v37 = 0x637465464D414C53;
  switch((char)v52)
  {
    case 1:
      unint64_t v37 = 0xD000000000000012;
      uint64_t v38 = "KernelSLAMLoadTime";
      goto LABEL_21;
    case 2:
      unint64_t v37 = 0xD000000000000018;
      uint64_t v38 = "GlobalConfigSLAMLoadTime";
      goto LABEL_21;
    case 3:
      unint64_t v37 = 0xD000000000000013;
      uint64_t v38 = "ProfileSLAMLoadTime";
LABEL_21:
      unint64_t v35 = (unint64_t)(v38 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v35 = 0x80000001001934D0;
      unint64_t v37 = 0xD000000000000011;
      break;
    case 5:
      uint64_t v39 = 0x736575716552;
      goto LABEL_26;
    case 6:
      unint64_t v37 = 0x7265746E45464153;
      unint64_t v35 = 0xEC000000656D6954;
      break;
    case 7:
      uint64_t v39 = 0x697845464153;
LABEL_26:
      unint64_t v37 = v39 & 0xFFFFFFFFFFFFLL | 0x5474000000000000;
      unint64_t v35 = 0xEB00000000656D69;
      break;
    default:
      break;
  }
  sub_10005A54C();
  if (v40)
  {
    uint64_t v44 = (void *)sub_100065AA0(v37, v35);
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    uint64_t v42 = v51;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v55 = *v42;
    *uint64_t v42 = 0x8000000000000000;
    sub_100106008((uint64_t)isa, v37, v35, isUniquelyReferenced_nonNull_native);
    *uint64_t v42 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v45 = 0x637465464D414C53;
  unint64_t v46 = 0xED0000656D695468;
  switch(v36)
  {
    case 0:
      goto LABEL_40;
    case 1:
      unint64_t v45 = 0xD000000000000012;
      uint64_t v47 = "KernelSLAMLoadTime";
      goto LABEL_34;
    case 2:
      unint64_t v45 = 0xD000000000000018;
      uint64_t v47 = "GlobalConfigSLAMLoadTime";
      goto LABEL_34;
    case 3:
      unint64_t v45 = 0xD000000000000013;
      uint64_t v47 = "ProfileSLAMLoadTime";
LABEL_34:
      unint64_t v46 = (unint64_t)(v47 - 32) | 0x8000000000000000;
      goto LABEL_40;
    case 4:
      unint64_t v46 = 0x80000001001934D0;
      unint64_t v45 = 0xD000000000000011;
      goto LABEL_40;
    case 5:
      uint64_t v48 = 0x736575716552;
      goto LABEL_39;
    case 6:
      unint64_t v45 = 0x7265746E45464153;
      unint64_t v46 = 0xEC000000656D6954;
      goto LABEL_40;
    case 7:
      uint64_t v48 = 0x697845464153;
LABEL_39:
      unint64_t v45 = v48 & 0xFFFFFFFFFFFFLL | 0x5474000000000000;
      unint64_t v46 = 0xEB00000000656D69;
LABEL_40:
      uint64_t v49 = (uint64_t)v53;
      v50(v53, 1, 1, v16);
      sub_100105A94(v49, v45, v46);
      uint64_t result = sub_10012D6D0((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for StopWatch);
      break;
    default:
      JUMPOUT(0);
  }
  return result;
}

uint64_t sub_100116C04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003EB0(&qword_1001DE6C8);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v46 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for StopWatch();
  uint64_t v49 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a2;
  unint64_t v48 = (unint64_t)"transactionStatus";
  uint64_t v20 = 0x8000000100192EE0;
  uint64_t v21 = 0xD000000000000012;
  switch((char)a2)
  {
    case 1:
      uint64_t v21 = 0x656D695464616572;
      uint64_t v20 = 0xEB00000000564D45;
      break;
    case 2:
      uint64_t v21 = 0x6D69546C61746F74;
      uint64_t v20 = 0xE900000000000065;
      break;
    case 3:
      uint64_t v21 = 0x54676E696C6C6F70;
      uint64_t v20 = 0xEE00534156656D69;
      break;
    default:
      break;
  }
  unint64_t v45 = a1;
  uint64_t v22 = a1[1];
  if (*(void *)(v22 + 16) && (unint64_t v23 = sub_10000C4B0(v21, v20), (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)(v22 + 56);
    uint64_t v26 = v49;
    sub_10012D668(v25 + *(void *)(v49 + 72) * v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for StopWatch);
    char v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v28 = v15;
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v26 = v49;
    char v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
    uint64_t v28 = v15;
    uint64_t v29 = 1;
  }
  uint64_t v44 = v27;
  v27(v28, v29, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v15, 1, v16) == 1) {
    return sub_10005F4F8((uint64_t)v15, &qword_1001DE6C8);
  }
  sub_10005AE78((uint64_t)v15, (uint64_t)v19);
  static DispatchTime.now()();
  uint64_t v31 = (uint64_t)&v19[*(int *)(v16 + 20)];
  sub_10005F4F8(v31, qword_1001DBB58);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v31, v8, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v31, 0, 1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  char v32 = v47;
  unint64_t v33 = v48 | 0x8000000000000000;
  uint64_t v34 = 0xD000000000000012;
  switch((char)v47)
  {
    case 1:
      uint64_t v34 = 0x656D695464616572;
      unint64_t v33 = 0xEB00000000564D45;
      break;
    case 2:
      uint64_t v34 = 0x6D69546C61746F74;
      unint64_t v33 = 0xE900000000000065;
      break;
    case 3:
      uint64_t v34 = 0x54676E696C6C6F70;
      unint64_t v33 = 0xEE00534156656D69;
      break;
    default:
      break;
  }
  sub_10005A54C();
  if (v35)
  {
    uint64_t v39 = (void *)sub_100065AA0(v34, v33);
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    unint64_t v37 = v45;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = *v37;
    *unint64_t v37 = 0x8000000000000000;
    sub_100106008((uint64_t)isa, v34, v33, isUniquelyReferenced_nonNull_native);
    *unint64_t v37 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v40 = v48 | 0x8000000000000000;
  uint64_t v41 = 0xD000000000000012;
  switch(v32)
  {
    case 0:
      break;
    case 1:
      uint64_t v41 = 0x656D695464616572;
      unint64_t v40 = 0xEB00000000564D45;
      break;
    case 2:
      uint64_t v41 = 0x6D69546C61746F74;
      unint64_t v40 = 0xE900000000000065;
      break;
    case 3:
      uint64_t v41 = 0x54676E696C6C6F70;
      unint64_t v40 = 0xEE00534156656D69;
      break;
    default:
      JUMPOUT(0);
  }
  uint64_t v42 = (uint64_t)v46;
  v44(v46, 1, 1, v16);
  sub_100105A94(v42, v41, v40);
  return sub_10012D6D0((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for StopWatch);
}

uint64_t sub_1001171E0(uint64_t *a1, int a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003EB0(&qword_1001DE6C8);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v43 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v16 = type metadata accessor for StopWatch();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v46 = (uint64_t)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v45 = a2;
  unint64_t v20 = sub_1000581D0(a2);
  uint64_t v44 = a1;
  uint64_t v22 = a1[1];
  if (*(void *)(v22 + 16) && (unint64_t v23 = sub_10000C4B0(v20, v21), (v24 & 1) != 0))
  {
    sub_10012D668(*(void *)(v22 + 56) + *(void *)(v17 + 72) * v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for StopWatch);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v25(v15, 0, 1, v16);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    v25(v15, 1, 1, v16);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return sub_10005F4F8((uint64_t)v15, &qword_1001DE6C8);
  }
  uint64_t v42 = v25;
  uint64_t v27 = v46;
  sub_10005AE78((uint64_t)v15, v46);
  static DispatchTime.now()();
  uint64_t v28 = v27 + *(int *)(v16 + 20);
  sub_10005F4F8(v28, qword_1001DBB58);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v28, v8, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v28, 0, 1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  char v29 = v45;
  unint64_t v30 = sub_1000581D0(v45);
  uint64_t v32 = v31;
  sub_10005A54C();
  if (v33)
  {
    unint64_t v37 = (void *)sub_100065AA0(v30, v32);
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    char v35 = v44;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v47 = *v35;
    *char v35 = 0x8000000000000000;
    sub_100106008((uint64_t)isa, v30, v32, isUniquelyReferenced_nonNull_native);
    *char v35 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v38 = sub_1000581D0(v29);
  uint64_t v40 = v39;
  uint64_t v41 = (uint64_t)v43;
  v42(v43, 1, 1, v16);
  sub_100105A94(v41, v38, v40);
  return sub_10012D6D0(v46, (uint64_t (*)(void))type metadata accessor for StopWatch);
}

uint64_t sub_100117604()
{
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Character.hexDigitValue.getter();
      if ((v4 & 1) == 0)
      {
        v5._uint64_t countAndFlagsBits = countAndFlagsBits;
        v5._object = object;
        String.append(_:)(v5);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v3 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
      object = v3.value._object;
    }
    while (v3.value._object);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001176D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DE9E0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE9E0);
  if (qword_1001D9238 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FC8);
  Swift::String_optional v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10011779C()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DE9F8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DE9F8);
  if (qword_1001D9000 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D28);
  Swift::String_optional v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100117864()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DE9E0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "deinit", v10, 2u);
    swift_slowDealloc();
  }

  if ((uint64_t)[*(id *)(v0 + 96) operationCount] >= 1)
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "reader deinit and readCard in progress, client must have crashed", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = sub_100006788((void *)(v1 + 280), *(void *)(v1 + 304));
    type metadata accessor for ReadError(0);
    v21[3] = v15;
    v21[0] = sub_10002A544(4013, 0, 0, 0);
    uint64_t v16 = *v14;
    uint64_t v17 = static DispatchWorkItemFlags.barrier.getter();
    __chkstk_darwin(v17, v18);
    *(void *)&v20[-48] = v16;
    v20[-40] = 1;
    *(void *)&v20[-32] = v21;
    *(void *)&v20[-24] = 0;
    *(void *)&v20[-16] = 0;
    *(void *)&v20[-8] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
    sub_100006520((uint64_t)v21);
    sub_10012A284();
    [*(id *)(v1 + 96) cancelAllOperations];
  }
  sub_100006520(v1 + 16);
  sub_100006520(v1 + 56);

  sub_100006520(v1 + 104);
  swift_release();
  sub_100006520(v1 + 152);
  sub_100006520(v1 + 192);
  sub_100006520(v1 + 232);
  swift_release();
  sub_100006520(v1 + 280);
  sub_100006520(v1 + 320);
  sub_100006520(v1 + 360);
  sub_100006520(v1 + 408);
  swift_release();
  return v1;
}

uint64_t sub_100117BB0()
{
  sub_100117864();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Reader()
{
  return self;
}

void *sub_100117C08(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100003E78(v9, (uint64_t)qword_1001DE9E0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "validate(readParameters:)", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = *(void **)(*sub_100006788(v3 + 51, v3[54]) + 16);
  id v14 = a1;
  uint64_t result = [v13 serialNumber];
  if (result)
  {
    uint64_t v16 = result;
    unint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    type metadata accessor for ReaderConfiguration();
    swift_allocObject();
    uint64_t result = sub_100066334(v14, v17, v19);
    if (!v2)
    {
      v3[56] = result;
      swift_release();
      uint64_t v20 = v3[56];
      if (v20)
      {
        sub_100068DC4(v20 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID, (uint64_t)v8);
      }
      else
      {
        uint64_t v21 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 1, 1, v21);
      }
      sub_100128CD8((uint64_t)v8);
      return (void *)sub_10005F4F8((uint64_t)v8, (uint64_t *)&unk_1001DF8D0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100117E6C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v309 = a3;
  uint64_t v310 = a4;
  os_log_t v305 = a1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v292 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v287 = (char *)v279 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v286 = (char *)v279 - v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v285 = (char *)v279 - v15;
  __chkstk_darwin(v14, v16);
  id v284 = (char *)v279 - v17;
  uint64_t v18 = type metadata accessor for OSSignpostError();
  uint64_t v289 = *(void *)(v18 - 8);
  uint64_t v290 = v18;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)v279 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v297 = *(void **)(v22 - 8);
  uint64_t v298 = v22;
  __chkstk_darwin(v22, v23);
  uint64_t v296 = (char *)v279 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for OSSignpostID();
  uint64_t v26 = *(void **)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  unint64_t v30 = (char *)v279 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v299 = (char *)v279 - v33;
  uint64_t v35 = __chkstk_darwin(v32, v34);
  unint64_t v37 = (char *)v279 - v36;
  __chkstk_darwin(v35, v38);
  uint64_t v304 = (char *)v279 - v39;
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v311 = v4;
  uint64_t v40 = sub_100003E78(v6, (uint64_t)qword_1001DE9E0);
  swift_unknownObjectRetain_n();
  uint64_t v306 = v40;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v300 = v37;
  uint64_t v301 = (void *)v25;
  uint64_t v291 = v6;
  uint64_t v302 = v26;
  uint64_t v293 = v30;
  uint64_t v288 = v21;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    *(void *)&long long v312 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315394;
    v321[0] = sub_100005EB8(0xD000000000000028, 0x800000010019B8E0, (uint64_t *)&v312);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2080;
    v321[0] = a2;
    swift_unknownObjectRetain();
    sub_100003EB0(&qword_1001DEBD8);
    uint64_t v45 = String.init<A>(describing:)();
    v321[0] = sub_100005EB8(v45, v46, (uint64_t *)&v312);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s, delegate: %s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 0;
  int v295 = (id *)(v47 + 16);
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = 0;
  __int16 v303 = (void **)(v48 + 16);
  uint64_t v49 = swift_allocObject();
  *(unsigned char *)(v49 + 16) = 0;
  v294 = (unsigned char *)(v49 + 16);
  uint64_t v50 = (void *)v311;
  sub_100009300(v311 + 280, (uint64_t)v321);
  sub_100009300((uint64_t)(v50 + 29), (uint64_t)v320);
  uint64_t v51 = v50[34];
  uint64_t v52 = swift_allocObject();
  swift_weakInit();
  sub_100009300((uint64_t)v320, (uint64_t)&v312);
  uint64_t v53 = (void *)swift_allocObject();
  uint64_t v54 = v310;
  void v53[2] = v309;
  uint64_t v53[3] = v54;
  v53[4] = v51;
  v53[5] = v47;
  v53[6] = v52;
  v53[7] = v49;
  v53[8] = v48;
  sub_10001F1F0(&v312, (uint64_t)(v53 + 9));
  v53[14] = a2;
  type metadata accessor for ReadDelegateRelay();
  uint64_t v55 = (void *)swift_allocObject();
  v55[2] = a2;
  v55[3] = sub_100131014;
  uint64_t v309 = v55;
  v55[4] = v53;
  swift_unknownObjectRetain_n();
  uint64_t v56 = (void *)v51;
  swift_retain();
  swift_retain();
  uint64_t v307 = v47;
  swift_retain();
  uint64_t v310 = v49;
  uint64_t v57 = v50;
  swift_retain();
  uint64_t v308 = v48;
  swift_retain();
  sub_100058EEC();
  *(unsigned char *)(v51 + 120) = 4;
  *(void *)(v51 + 121) = 0x202020202020202;
  *(void *)(v51 + 127) = 0x202020202020202;
  *(_OWORD *)(v51 + 136) = 0u;
  *(_OWORD *)(v51 + 152) = 0u;
  *(void *)(v51 + 166) = 0;
  swift_beginAccess();
  *(void *)(v51 + 176) = 0;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v51 + 112) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  sub_100003EB0((uint64_t *)&unk_1001DD390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v59 = v50 + 51;
  id v60 = [*(id *)(*sub_100006788(v50 + 51, v50[54]) + 24) sequenceCounter];
  if (!v60) {
    __break(1u);
  }
  uint64_t v61 = v60;
  unsigned __int16 v62 = (unsigned __int16)[v60 unsignedShortValue];

  *(void *)(inited + 64) = &type metadata for UInt16;
  *(_WORD *)(inited + 40) = v62;
  unint64_t v63 = sub_1001052FC(inited);
  os_signpost_type_t v64 = v279;
  __chkstk_darwin(v63, v65);
  uint64_t v67 = (uint64_t *)&v66[4];
  uint64_t v68 = v66 + 8;
  os_unfair_lock_lock(v66 + 8);
  uint64_t v69 = v67;
  uint64_t v70 = 0;
  sub_1000C7240(v69);
  os_unfair_lock_unlock(v68);
  swift_bridgeObjectRelease();
  if (MKBGetDeviceLockState() - 1 < 2)
  {
    uint64_t v71 = 4056;
LABEL_9:
    uint64_t v72 = 0;
    uint64_t v73 = 0;
LABEL_10:
    uint64_t v74 = (void *)sub_10002A544(v71, v72, v73, 0);
    *(void *)&long long v312 = v74;
    type metadata accessor for ReadError(0);
    sub_100131054((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
    *(void *)(v51 + 144) = _BridgedStoredNSError.errorCode.getter();
    id v75 = v74;
    sub_1000C755C((uint64_t)v75);
LABEL_11:
    swift_release();

    sub_100006520((uint64_t)v320);
LABEL_49:
    sub_100006520((uint64_t)v321);
    swift_release();
    swift_release();
    return swift_release();
  }
  sub_100006788(v59, v57[54]);
  if ((sub_10016E1FC() & 1) == 0)
  {
    os_log_type_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Incorrect JCOP version", v78, 2u);
      swift_slowDealloc();
    }

    if (*((unsigned char *)v57 + 400) == 1)
    {
      uint64_t v71 = 4043;
      goto LABEL_9;
    }
  }
  uint64_t v79 = v305;
  uint64_t v283 = v59;
  if (v305)
  {
    os_signpost_type_t v80 = *(void **)(*sub_100006788(v59, v57[54]) + 16);
    uint64_t v81 = v79;
    id v82 = [v80 serialNumber];
    if (!v82)
    {
      __break(1u);
LABEL_109:

      __break(1u);
      goto LABEL_110;
    }
    uint64_t v83 = v82;
    unint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v86 = v85;

    type metadata accessor for ReaderConfiguration();
    swift_allocObject();
    unint64_t v87 = sub_100066334(v81, v84, v86);
    os_log_type_t v88 = v304;
    os_signpost_id_t v93 = v87;

    char v94 = v303;
    swift_beginAccess();
    *char v94 = v93;
  }
  else
  {
    long long v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "SPRReadParameters nil, use ReaderConfiguration from Reader instance", v91, 2u);
      swift_slowDealloc();
    }

    int v92 = (void *)v57[56];
    char v94 = v303;
    swift_beginAccess();
    *char v94 = v92;
    swift_retain();
    os_log_type_t v88 = v304;
  }
  swift_release();
  swift_beginAccess();
  uint64_t v95 = *v94;
  if (!v95)
  {
    uint64_t v72 = 0xD00000000000001BLL;
    uint64_t v73 = (void *)0x800000010019B840;
    uint64_t v71 = 4000;
    goto LABEL_10;
  }
  *(void *)(v311 + 448) = 0;
  swift_retain();
  swift_release();
  if (qword_1001D92F0 != -1) {
    swift_once();
  }
  uint64_t v282 = 0;
  os_log_t v305 = v95;
  uint64_t v96 = type metadata accessor for OSSignposter();
  uint64_t v97 = sub_100003E78(v96, (uint64_t)qword_1001DE9F8);
  static OSSignpostID.exclusive.getter();
  uint64_t v281 = v97;
  uint64_t v98 = OSSignposter.logHandle.getter();
  os_signpost_type_t v99 = static os_signpost_type_t.begin.getter();
  long long v100 = v88;
  if (OS_os_log.signpostsEnabled.getter())
  {
    os_log_type_t v101 = v301;
    uint64_t v102 = v302;
    __int16 v303 = (void **)v302[2];
    unint64_t v103 = (unint64_t)(v302 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    id v104 = v300;
    ((void (*)(char *, char *, void *))v303)(v300, v100, v301);
    os_signpost_type_t v105 = v100;
    uint64_t v106 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v106 = 0;
    os_signpost_id_t v107 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v98, v99, v107, "reader-session_start", "begin PreReadVerification and setup", v106, 2u);
    long long v100 = v105;
    swift_slowDealloc();

    ((void (*)(id, void *))v102[1])(v104, v101);
    uint64_t v108 = v303;
    ((void (*)(id, char *, void *))v303)(v104, v105, v101);
  }
  else
  {

    os_log_type_t v101 = v301;
    uint64_t v102 = v302;
    uint64_t v108 = (void **)v302[2];
    unint64_t v103 = (unint64_t)(v302 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    ((void (*)(char *, char *, void *))v108)(v300, v100, v301);
  }
  uint64_t v109 = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v304 = (char *)OSSignpostIntervalState.init(id:isOpen:)();
  unint64_t v112 = (void (*)(void, void))v102[1];
  uint64_t v110 = v102 + 1;
  uint64_t v111 = (void (*)(char *, void *))v112;
  v112(v100, v101);
  *(void *)&long long v312 = 0;
  id v113 = [self sharedHardwareManager];
  id v114 = [v113 getRadioEnabledState:&v312];

  if (v114)
  {
    id v115 = v114;
    unint64_t v116 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v116, v117))
    {
      os_signpost_id_t v118 = (uint8_t *)swift_slowAlloc();
      v319[0] = swift_slowAlloc();
      *(_DWORD *)os_signpost_id_t v118 = 136315138;
      uint64_t v311 = (uint64_t)(v118 + 4);
      v318[0] = v115;
      id v119 = v115;
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v120 = String.init<A>(describing:)();
      v318[0] = sub_100005EB8(v120, v121, v319);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "getRadioEnabledState failed: %s", v118, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v124 = sub_10002A544(4025, 0, 0, 0);
    swift_willThrow();

    goto LABEL_42;
  }
  v279[2] = v103;
  uint64_t v280 = v111;
  v279[1] = v109;
  uint64_t v302 = v110;
  __int16 v303 = v108;
  if ((void)v312 != 1)
  {
    char v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v125, v126))
    {
      unint64_t v127 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "NFRadioState .disabled", v127, 2u);
      swift_slowDealloc();
    }

    uint64_t v124 = sub_10002A544(4025, 0, 0, 0);
    swift_willThrow();
    goto LABEL_42;
  }
  uint64_t v122 = (uint64_t)v305;
  uint64_t v123 = v282;
  sub_100128CD8((uint64_t)v305 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID);
  uint64_t v124 = v123;
  if (v123)
  {
LABEL_42:
    *(void *)&long long v312 = v124;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    type metadata accessor for ReadError(0);
    if (swift_dynamicCast())
    {
      os_log_type_t v128 = (void *)v319[0];
      v318[0] = v319[0];
      sub_100131054((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
      if (_BridgedStoredNSError.errorCode.getter() >= 4000)
      {
        v318[0] = v128;
        if (_BridgedStoredNSError.errorCode.getter() <= 4999)
        {
          swift_errorRelease();
          v318[0] = v128;
          v56[18] = _BridgedStoredNSError.errorCode.getter();
          id v130 = v128;
          sub_1000C755C((uint64_t)v130);
          swift_release();
          swift_release();
          swift_release();

          sub_100006520((uint64_t)v320);
          swift_errorRelease();
          goto LABEL_49;
        }
      }
    }
    swift_errorRelease();
    sub_1000C755C(v124);
    swift_errorRelease();
    swift_release();
    goto LABEL_47;
  }
  sub_1001291A4(v122);
  swift_retain_n();
  int v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v131, v132))
  {
    os_signpost_type_t v134 = (uint8_t *)swift_slowAlloc();
    uint64_t v282 = swift_slowAlloc();
    v319[0] = v282;
    *(_DWORD *)os_signpost_type_t v134 = 136315138;
    v279[0] = v134 + 4;
    swift_retain();
    uint64_t v135 = sub_10006829C();
    unint64_t v137 = v136;
    swift_release();
    v318[0] = sub_100005EB8(v135, v137, v319);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "ReaderConfiguration: %s", v134, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v138 = v298;
  sub_100129CB4(v122);
  sub_100006788(v321, v322);
  uint64_t v139 = v296;
  uint64_t v140 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v140, v141);
  uint64_t v298 = sub_100003EB0(&qword_1001DD3F0);
  OS_dispatch_queue.sync<A>(flags:execute:)();
  os_signpost_id_t v142 = (void (*)(char *, uint64_t))v297[1];
  v142(v139, v138);
  sub_10005F4F8((uint64_t)&v312, &qword_1001DD3F0);
  sub_100006788(v321, v322);
  uint64_t v143 = static DispatchWorkItemFlags.barrier.getter();
  uint64_t v297 = v279;
  __chkstk_darwin(v143, v144);
  OS_dispatch_queue.sync<A>(flags:execute:)();
  uint64_t v298 = 0;
  v142(v139, v138);
  uint64_t v145 = v314;
  sub_10005F4F8((uint64_t)&v312, &qword_1001DD3F0);
  uint64_t v146 = v280;
  if (v145)
  {
    uint64_t v147 = Logger.logObject.getter();
    os_log_type_t v148 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v147, v148))
    {
      unint64_t v149 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v149 = 0;
      _os_log_impl((void *)&_mh_execute_header, v147, v148, "PAN from previous transaction not cleared yet", v149, 2u);
      swift_slowDealloc();
    }

    char v150 = v294;
    swift_beginAccess();
    *char v150 = 1;
  }
  unint64_t v151 = sub_10012D730();
  os_log_t v152 = v295;
  swift_beginAccess();
  id v153 = *v152;
  id *v152 = v151;

  if (!*v152)
  {
    uint64_t v160 = Logger.logObject.getter();
    os_log_type_t v161 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v160, v161))
    {
      int v162 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v162 = 0;
      _os_log_impl((void *)&_mh_execute_header, v160, v161, "startReaderSession failed", v162, 2u);
      swift_slowDealloc();
    }

    uint64_t v163 = (void *)sub_10002A544(4040, 0, 0, 0);
    *(void *)&long long v312 = v163;
    type metadata accessor for ReadError(0);
    sub_100131054((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
    v56[18] = _BridgedStoredNSError.errorCode.getter();
    id v75 = v163;
    sub_1000C755C((uint64_t)v75);
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  uint64_t v297 = *v152;
  uint64_t v154 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v155 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    uint64_t v156 = v288;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v158 = v289;
    uint64_t v157 = v290;
    if ((*(unsigned int (**)(char *, uint64_t))(v289 + 88))(v156, v290) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v159 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v157);
      uint64_t v159 = "end PreReadVerification and setup";
    }
    uint64_t v166 = v300;
    os_log_type_t v167 = v299;
    ((void (*)(char *, char *, void *))v303)(v300, v299, v301);
    uint64_t v168 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v168 = 0;
    os_signpost_id_t v169 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v154, v155, v169, "reader-session_start", v159, v168, 2u);
    uint64_t v164 = v301;
    swift_slowDealloc();

    v146(v167, v164);
    unsigned __int8 v165 = v166;
  }
  else
  {

    uint64_t v164 = v301;
    unsigned __int8 v165 = v299;
  }
  v146(v165, v164);
  unint64_t v170 = v293;
  static OSSignpostID.exclusive.getter();
  uint64_t v171 = OSSignposter.logHandle.getter();
  os_signpost_type_t v172 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    __int16 v173 = v300;
    os_signpost_type_t v174 = v172;
    uint64_t v175 = v303;
    ((void (*)(char *, char *, void *))v303)(v300, v170, v164);
    uint64_t v176 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v176 = 0;
    os_signpost_id_t v177 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v171, v174, v177, "reader-total_transaction", "begin total transaction", v176, 2u);
    uint64_t v164 = v301;
    swift_slowDealloc();

    v280(v173, v164);
  }
  else
  {

    __int16 v173 = v300;
    uint64_t v175 = v303;
  }
  ((void (*)(char *, char *, void *))v175)(v173, v170, v164);
  swift_allocObject();
  __int16 v303 = (void **)OSSignpostIntervalState.init(id:isOpen:)();
  v280(v170, v164);
  uint64_t v178 = v297;
  sub_100044AEC("reader-preprocessing", 20, 2, (uint64_t)v178, 0xD000000000000013, 0x800000010019B880);

  LOBYTE(v312) = 3;
  __chkstk_darwin(v179, v180);
  id v182 = v181 + 4;
  uint64_t v183 = v181 + 8;
  os_unfair_lock_lock(v181 + 8);
  uint64_t v184 = (uint64_t)v182;
  uint64_t v185 = v298;
  sub_100132020(v184);
  os_unfair_lock_unlock(v183);
  sub_100009300((uint64_t)v320, (uint64_t)&v312);
  uint64_t v186 = v311;
  os_log_type_t v187 = *(void **)(v311 + 96);
  sub_100009300((uint64_t)v321, (uint64_t)v319);
  sub_100009300((uint64_t)v283, (uint64_t)v318);
  sub_100009300(v186 + 192, (uint64_t)v317);
  id v188 = objc_allocWithZone((Class)type metadata accessor for ReadOperation());
  swift_retain();
  uint64_t v189 = (uint64_t)v305;
  swift_retain();
  uint64_t v190 = v178;
  uint64_t v191 = (uint64_t)v309;
  swift_retain();
  uint64_t v192 = v187;
  sub_1000B46B8(v190, v189, v191, (uint64_t)&v312, (uint64_t)v56, v192, (uint64_t)v319, (uint64_t)v318, v317);
  if (v185)
  {
    *(void *)&long long v312 = v185;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    type metadata accessor for ReadError(0);
    if (swift_dynamicCast())
    {
      uint64_t v194 = (void *)v319[0];
      v318[0] = v319[0];
      sub_100131054((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
      if (_BridgedStoredNSError.errorCode.getter() >= 4000)
      {
        v318[0] = v194;
        if (_BridgedStoredNSError.errorCode.getter() <= 4999)
        {
          uint64_t v302 = v190;
          swift_errorRelease();
          v318[0] = v194;
          v56[18] = _BridgedStoredNSError.errorCode.getter();
          v318[0] = v194;
          uint64_t v250 = (void *)sub_10002A544(4037, 0, 0, 0);
          v317[0] = v250;
          char v251 = static _BridgedStoredNSError.== infix(_:_:)();

          if ((v251 & 1) != 0
            || (v318[0] = v194,
                uint64_t v252 = (void *)sub_10002A544(4036, 0, 0, 0),
                v317[0] = v252,
                char v253 = static _BridgedStoredNSError.== infix(_:_:)(),
                v252,
                (v253 & 1) != 0))
          {
            os_log_t v254 = Logger.logObject.getter();
            os_log_type_t v255 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v254, v255))
            {
              long long v256 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)long long v256 = 0;
              _os_log_impl((void *)&_mh_execute_header, v254, v255, "Pay applet cannot be selected: Prohibit timer or not installed", v256, 2u);
              swift_slowDealloc();
            }

            sub_100006788(v56 + 2, v56[5]);
            sub_100042F68((uint64_t)&off_1001C5D40);
          }
          id v257 = v194;
          sub_1000C755C((uint64_t)v257);
          swift_release();

          swift_release();
          swift_release();
          swift_release();

          sub_100006520((uint64_t)v320);
          swift_errorRelease();
          goto LABEL_49;
        }
      }
    }
    swift_errorRelease();
    sub_1000C755C(v185);
    swift_errorRelease();
    swift_release();

    swift_release();
LABEL_47:
    swift_release();
    swift_release();
LABEL_48:
    sub_100006520((uint64_t)v320);
    goto LABEL_49;
  }
  os_signpost_type_t v64 = v193;
  os_log_type_t v195 = v303;
  uint64_t v196 = v294;
  swift_beginAccess();
  *uint64_t v196 = 0;
  uint64_t v70 = *(char **)(v189 + 16);
  uint64_t v301 = v64;
  uint64_t v302 = v190;
  uint64_t v300 = v192;
  if ((unint64_t)(v70 - 2) < 2)
  {
    uint64_t v197 = swift_allocObject();
    swift_weakInit();
    double v198 = (void *)swift_allocObject();
    v198[2] = v197;
    v198[3] = v64;
    v198[4] = v189;
    v198[5] = v191;
    v198[6] = v195;
    v198[7] = v190;
    v198[8] = v310;
    uint64_t v315 = sub_100131104;
    unint64_t v316 = v198;
    *(void *)&long long v312 = _NSConcreteStackBlock;
    *((void *)&v312 + 1) = 1107296256;
    uint64_t v313 = sub_1000048D8;
    long long v314 = &unk_1001CB168;
    uint64_t v199 = _Block_copy(&v312);
    uint64_t v200 = self;
    uint64_t v201 = v190;
    uint64_t v202 = v64;
    swift_retain();
    swift_retain();
    id v203 = v201;
    swift_retain();
    uint64_t v204 = v202;
    swift_retain();
    id v205 = [v200 blockOperationWithBlock:v199];
    _Block_release(v199);
    swift_release();
    uint64_t v206 = *(void *)(v189 + 16);
    os_log_t v207 = v204;
    uint64_t v70 = (char *)v205;
    double v208 = (void (**)(char *, uint64_t, uint64_t))(v292 + 16);
    if (v206 != 2)
    {
      NSString v229 = String._bridgeToObjectiveC()();
      p_ivar_lyt = &GlobalState.ivar_lyt;
      [v207 setName:v229];

      uint64_t v230 = v291;
      (*v208)(v287, v306, v291);
      uint64_t v81 = v207;
      os_log_type_t v231 = Logger.logObject.getter();
      os_signpost_type_t v64 = (void *)static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v231, (os_log_type_t)v64))
      {

        (*(void (**)(char *, uint64_t))(v292 + 8))(v287, v230);
        goto LABEL_103;
      }
      int v232 = (uint8_t *)swift_slowAlloc();
      uint64_t v311 = swift_slowAlloc();
      *(void *)&long long v312 = v311;
      *(_DWORD *)int v232 = 136315138;
      id v233 = [v81 name];
      if (v233)
      {
        unint64_t v234 = v233;
        uint64_t v235 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v237 = v236;

        v318[0] = sub_100005EB8(v235, v237, (uint64_t *)&v312);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v231, (os_log_type_t)v64, "%s", v232, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v292 + 8))(v287, v291);
        p_ivar_lyt = (void **)(&GlobalState + 16);
        goto LABEL_103;
      }
      goto LABEL_111;
    }
    NSString v209 = String._bridgeToObjectiveC()();
    p_ivar_lyt = &GlobalState.ivar_lyt;
    [v207 setName:v209];

    uint64_t v211 = v291;
    (*v208)(v286, v306, v291);
    uint64_t v81 = v207;
    double v212 = Logger.logObject.getter();
    os_signpost_type_t v64 = (void *)static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v212, (os_log_type_t)v64))
    {

      (*(void (**)(char *, uint64_t))(v292 + 8))(v286, v211);
      goto LABEL_103;
    }
    double v213 = (uint8_t *)swift_slowAlloc();
    uint64_t v311 = swift_slowAlloc();
    *(void *)&long long v312 = v311;
    *(_DWORD *)double v213 = 136315138;
    id v214 = [v81 name];
    if (v214)
    {
      os_log_t v215 = v214;
      uint64_t v216 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v218 = v217;

      v318[0] = sub_100005EB8(v216, v218, (uint64_t *)&v312);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v212, (os_log_type_t)v64, "%s", v213, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v292 + 8))(v286, v291);
      p_ivar_lyt = (void **)(&GlobalState + 16);
LABEL_103:
      NSString v267 = String._bridgeToObjectiveC()();
      [v70 setBackgroundColor:v267];
      goto LABEL_106;
    }
    goto LABEL_109;
  }
  if (!v70)
  {
    unint64_t v219 = v64;
    NSString v220 = String._bridgeToObjectiveC()();
    [v219 setName:v220];

    uint64_t v221 = v291;
    (*(void (**)(char *, uint64_t, uint64_t))(v292 + 16))(v284, v306, v291);
    uint64_t v70 = v219;
    uint64_t v222 = Logger.logObject.getter();
    os_log_type_t v223 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v222, v223))
    {
      uint64_t v81 = (_DWORD *)swift_slowAlloc();
      *(void *)&long long v312 = swift_slowAlloc();
      *uint64_t v81 = 136315138;
      id v224 = [v70 name];
      if (!v224)
      {
LABEL_110:

        __break(1u);
LABEL_111:

        __break(1u);
        goto LABEL_112;
      }
      uint64_t v225 = v224;
      uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v228 = v227;

      v318[0] = sub_100005EB8(v226, v228, (uint64_t *)&v312);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v222, v223, "%s", (uint8_t *)v81, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v292 + 8))(v284, v291);
      uint64_t v191 = (uint64_t)v309;
      os_log_type_t v195 = v303;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v292 + 8))(v284, v221);
    }
    uint64_t v258 = swift_allocObject();
    swift_weakInit();
    uint64_t v259 = (void *)swift_allocObject();
    id v260 = v302;
    v259[2] = v258;
    v259[3] = v260;
    v259[4] = v195;
    v259[5] = v70;
    uint64_t v261 = v305;
    v259[6] = v191;
    v259[7] = v261;
    v259[8] = v310;
    uint64_t v315 = sub_1001311F8;
    unint64_t v316 = v259;
    *(void *)&long long v312 = _NSConcreteStackBlock;
    *((void *)&v312 + 1) = 1107296256;
    uint64_t v313 = sub_1000048D8;
    long long v314 = &unk_1001CB208;
    uint64_t v262 = _Block_copy(&v312);
    long long v263 = self;
    swift_retain();
    swift_retain();
    id v264 = v260;
    swift_retain();
    long long v265 = v70;
    swift_retain();
    id v266 = [v263 blockOperationWithBlock:v262];
    _Block_release(v262);
    swift_release();
    uint64_t v70 = (char *)v266;
    NSString v267 = String._bridgeToObjectiveC()();
    [v70 setName:v267];
LABEL_106:

    v274 = v301;
    [v70 addDependency:v301];
    sub_100003EB0((uint64_t *)&unk_1001DA5A0);
    uint64_t v275 = swift_allocObject();
    *(_OWORD *)(v275 + 16) = xmmword_100189A10;
    *(void *)(v275 + 32) = v274;
    *(void *)(v275 + 40) = v70;
    *(void *)&long long v312 = v275;
    specialized Array._endMutation()();
    sub_100006680(0, &qword_1001DACF8);
    uint64_t v276 = v70;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v300 addOperations:isa waitUntilFinished:0];

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    goto LABEL_48;
  }
  uint64_t v238 = v291;
  if (v70 == (char *)1)
  {
    id v239 = v64;
    NSString v240 = String._bridgeToObjectiveC()();
    [v239 setName:v240];

    (*(void (**)(char *, uint64_t, uint64_t))(v292 + 16))(v285, v306, v238);
    uint64_t v70 = v239;
    uint64_t v241 = Logger.logObject.getter();
    os_log_type_t v242 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v241, v242))
    {
      uint64_t v243 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v312 = swift_slowAlloc();
      *(_DWORD *)uint64_t v243 = 136315138;
      id v244 = [v70 name];
      if (!v244)
      {
LABEL_112:

        __break(1u);
        goto LABEL_113;
      }
      os_log_type_t v245 = v244;
      uint64_t v246 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v248 = v247;

      v318[0] = sub_100005EB8(v246, v248, (uint64_t *)&v312);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v241, v242, "%s", v243, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v292 + 8))(v285, v291);
      uint64_t v191 = (uint64_t)v309;
      uint64_t v249 = v303;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v292 + 8))(v285, v238);
      uint64_t v249 = v195;
    }
    uint64_t v268 = swift_allocObject();
    swift_weakInit();
    Swift::Bool v269 = (void *)swift_allocObject();
    v269[2] = v268;
    v269[3] = v70;
    v269[4] = v249;
    v269[5] = v191;
    uint64_t v315 = sub_100131184;
    unint64_t v316 = v269;
    *(void *)&long long v312 = _NSConcreteStackBlock;
    *((void *)&v312 + 1) = 1107296256;
    uint64_t v313 = sub_1000048D8;
    long long v314 = &unk_1001CB1B8;
    uint64_t v270 = _Block_copy(&v312);
    uint64_t v271 = self;
    swift_retain();
    char v272 = v70;
    swift_retain();
    id v273 = [v271 blockOperationWithBlock:v270];
    _Block_release(v270);
    swift_release();
    uint64_t v70 = (char *)v273;
    NSString v267 = String._bridgeToObjectiveC()();
    [v70 setName:v267];
    goto LABEL_106;
  }
LABEL_113:
  type metadata accessor for SPRReaderMode(0);
  *(void *)&long long v312 = v70;
  v278 = v64;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_10011A95C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = (id *)(a6 + 16);
  a3();
  if (!a1 && a2) {
    sub_100058BDC();
  }
  swift_beginAccess();
  if (!*v15) {
    goto LABEL_7;
  }
  id v16 = *v15;
  if ([v16 didEnd])
  {

LABEL_7:
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100003E78(v17, (uint64_t)qword_1001DE9E0);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "validation error, no session to end or clear PAN", v20, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_100009300(Strong + 16, (uint64_t)aBlock);
      swift_release();
      uint64_t v22 = v45;
      uint64_t v23 = v46;
      sub_100006788(aBlock, (uint64_t)v45);
      (*(void (**)(void (*)(uint64_t), void, void *))(*((void *)v23 + 1) + 16))(sub_10011AF8C, 0, v22);
      sub_100006520((uint64_t)aBlock);
    }
    return;
  }
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v24 = a10;
  uint64_t v25 = (unsigned char *)(a8 + 16);
  uint64_t v26 = type metadata accessor for Logger();
  sub_100003E78(v26, (uint64_t)qword_1001DE9E0);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "completion block after readCard", v29, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (*v25 == 1)
  {
    sub_100003EB0((uint64_t *)&unk_1001DA520);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_100186100;
    if (qword_1001D9358 != -1) {
      swift_once();
    }
    uint64_t v31 = *((void *)&xmmword_1001E11A0 + 1);
    *(void *)(v30 + 32) = xmmword_1001E11A0;
    *(void *)(v30 + 40) = v31;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    aBlock[0] = 0;
    unsigned int v33 = [v16 selectApplets:isa error:aBlock];

    if (v33)
    {
      id v34 = aBlock[0];
      sub_100142958();
    }
    else
    {
      id v35 = aBlock[0];
      uint64_t v36 = _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v37 = Logger.logObject.getter();
      int v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, (os_log_type_t)v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136315138;
        *(void *)&v48[0] = v36;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v40 = String.init<A>(describing:)();
        *(void *)&v48[0] = sub_100005EB8(v40, v41, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "failed to clear PAN in NVM %s", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v24 = a10;
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
  }
  sub_100009300(v24, (uint64_t)v48);
  os_log_type_t v42 = (void *)swift_allocObject();
  uint64_t v42[2] = a9;
  sub_10001F1F0(v48, (uint64_t)(v42 + 3));
  v42[8] = a11;
  v42[9] = a7;
  unint64_t v46 = sub_100131350;
  uint64_t v47 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000048D8;
  uint64_t v45 = &unk_1001CB2A8;
  BOOL v43 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v16 endSessionWithCompletion:v43];
  _Block_release(v43);
}

uint64_t sub_10011AF90(uint64_t a1, void *a2, void *a3)
{
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DE9E0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "NF SE Reader Session ended in completion block of ReadDelegateRelay", v10, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v11 = (void *)*v6;
  if (v11)
  {
    uint64_t v12 = a2[3];
    uint64_t v13 = a2[4];
    sub_100006788(a2, v12);
    uint64_t v14 = qword_1001D91E0;
    swift_retain();
    if (v14 != -1) {
      swift_once();
    }
    uint64_t v15 = byte_1001E0FB8;
    sub_100003EB0(&qword_1001D8A20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    strcpy((char *)(inited + 32), "transactionId");
    *(_WORD *)(inited + 46) = -4864;
    uint64_t v17 = v11[17];
    *(void *)(inited + 48) = v11[16];
    *(void *)(inited + 56) = v17;
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_100004C48(inited);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 8))(13, v15, v18, v12, v13);
    swift_bridgeObjectRelease();
    swift_retain_n();
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v22 = SPRReaderMode.description.getter();
      uint64_t v33 = sub_100005EB8(v22, v23, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "onUpdate(event: .closed, mode: .%s)", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a3) {
        goto LABEL_16;
      }
    }
    else
    {

      swift_release_n();
      if (!a3)
      {
LABEL_16:
        swift_release();
        goto LABEL_17;
      }
    }
    [a3 onUpdateWithEvent:3 mode:v11[2]];
    goto LABEL_16;
  }
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "readerConfig was nil in callback completion", v26, 2u);
    swift_slowDealloc();
  }

LABEL_17:
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100009300(result + 16, (uint64_t)v30);
    swift_release();
    uint64_t v28 = v31;
    uint64_t v29 = v32;
    sub_100006788(v30, v31);
    (*(void (**)(void (*)(uint64_t), void, uint64_t))(*(void *)(v29 + 8) + 16))(sub_10011AF8C, 0, v28);
    return sub_100006520((uint64_t)v30);
  }
  return result;
}

void sub_10011B3EC(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100003E78(v1, (uint64_t)qword_1001DE9E0);
    swift_errorRetain();
    swift_errorRetain();
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315138;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v4 = String.init<A>(describing:)();
      sub_100005EB8(v4, v5, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to send MPOC logs after readCard: %s", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003E78(v6, (uint64_t)qword_1001DE9E0);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "MPOC logs sent after readCard", v8, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10011B6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v14 = Strong;
    uint64_t v15 = (NSObject **)(a4 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult);
    swift_beginAccess();
    id v16 = *v15;
    uint64_t v17 = &qword_1001D9000;
    if ((*v15)[2].isa)
    {
      swift_bridgeObjectRetain();
      unint64_t v18 = sub_10000C4B0(0xD000000000000014, 0x8000000100193EE0);
      if (v19)
      {
        sub_100006570((uint64_t)v16[7].isa + 32 * v18, (uint64_t)&v56);
      }
      else
      {
        long long v56 = 0u;
        long long v57 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v57 + 1))
      {
        type metadata accessor for SPRPayAppletStatus(0);
        if (swift_dynamicCast())
        {
          uint64_t v54 = a5;
          if (qword_1001D92E8 != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          sub_100003E78(v24, (uint64_t)qword_1001DE9E0);
          os_log_type_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v27 = 67109120;
            LODWORD(v56) = v55 == 6;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "payReadComplete: %{BOOL}d", v27, 8u);
            swift_slowDealloc();
          }

          *(unsigned char *)(*(void *)(v14 + 272) + 121) = v55 == 6;
          uint64_t v28 = v54;
          if (qword_1001D9318 != -1) {
            swift_once();
          }
          if ([(id)qword_1001E1150 canEvaluatePolicy:2 error:0])
          {
            sub_100006680(0, &qword_1001DEC00);
            uint64_t v29 = *v15;
            uint64_t v30 = *(void **)(a4 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
            swift_bridgeObjectRetain();
            uint64_t v31 = sub_100021FBC((uint64_t)_swiftEmptyArrayStorage, v29, v30);
            uint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v32, v33))
            {
              os_log_type_t type = v33;
              id v34 = (uint8_t *)swift_slowAlloc();
              uint64_t v53 = (void *)swift_slowAlloc();
              *(_DWORD *)id v34 = 138412290;
              *(void *)&long long v56 = v31;
              id v35 = v31;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v53 = v31;

              uint64_t v28 = v54;
              _os_log_impl((void *)&_mh_execute_header, v32, type, "SPRTransactionData: %@", v34, 0xCu);
              sub_100003EB0((uint64_t *)&unk_1001DA540);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v32 = v31;
            }

            sub_100006788((void *)(*(void *)(v14 + 272) + 16), *(void *)(*(void *)(v14 + 272) + 40));
            swift_retain();
            sub_100042F68((uint64_t)&off_1001C5DB8);
            swift_release();
            sub_10012A3A0(v28, v31, *(void *)(a6 + 152), *(void *)(a6 + 160));

            sub_10011BF0C(a2, a3, v14);
            swift_release();
            return;
          }
          uint64_t v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v49, v50))
          {
            uint64_t v51 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v51 = 0;
            _os_log_impl((void *)&_mh_execute_header, v49, v50, "no passcode after tap: attestationFailed", v51, 2u);
            swift_slowDealloc();
          }

          id v40 = (id)sub_10002A544(4023, 0, 0, 0);
          swift_willThrow();
          uint64_t v17 = &qword_1001D9000;
          goto LABEL_29;
        }
LABEL_24:
        if (qword_1001D92E8 != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        sub_100003E78(v36, (uint64_t)qword_1001DE9E0);
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "ReadOperation completed but payAppletFinalStatus not found in readResult", v39, 2u);
          uint64_t v17 = &qword_1001D9000;
          swift_slowDealloc();
        }

        id v40 = *(id *)(a4 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
        swift_willThrow();
LABEL_29:
        sub_10011BF0C(a2, a3, v14);
        if (v17[93] != -1) {
          swift_once();
        }
        unint64_t v41 = (unsigned char *)(a7 + 16);
        uint64_t v42 = type metadata accessor for Logger();
        sub_100003E78(v42, (uint64_t)qword_1001DE9E0);
        BOOL v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          uint64_t v45 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Could not init SPRTransactionData or InternalTransactionData", v45, 2u);
          swift_slowDealloc();
        }

        swift_beginAccess();
        *unint64_t v41 = 1;
        uint64_t v46 = *(void *)(v14 + 272);
        swift_retain();
        uint64_t v47 = (void *)_convertErrorToNSError(_:)();
        id v48 = [v47 code];

        *(void *)(v46 + 144) = v48;
        swift_release();
        sub_100006788((void *)(*(void *)(v14 + 272) + 16), *(void *)(*(void *)(v14 + 272) + 40));
        swift_retain();
        sub_100042F68((uint64_t)&off_1001C5DE0);
        swift_release();
        sub_1000C755C((uint64_t)v40);
        swift_release();
        swift_errorRelease();
        return;
      }
    }
    else
    {
      long long v56 = 0u;
      long long v57 = 0u;
    }
    sub_10005F4F8((uint64_t)&v56, &qword_1001DD3F0);
    goto LABEL_24;
  }
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003E78(v20, (uint64_t)qword_1001DE9E0);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "reader deinit during after-read operation", v23, 2u);
    swift_slowDealloc();
  }
}

void sub_10011BF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a3;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v43 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  os_log_type_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  id v16 = (char *)&v42 - v15;
  if (qword_1001D92F0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSSignposter();
  sub_100003E78(v17, (uint64_t)qword_1001DE9F8);
  sub_100044E30("reader-postProcessing", 21, 2, a1, 0xD000000000000013, 0x800000010019B910);
  unint64_t v18 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v19 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v20 = v43;
    if ((*(unsigned int (**)(char *, uint64_t))(v43 + 88))(v7, v4) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v4);
      uint64_t v21 = "end total transaction";
    }
    uint64_t v24 = v44;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v16, v8);
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v25 = 0;
    os_signpost_id_t v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v26, "reader-total_transaction", v21, v25, 2u);
    swift_slowDealloc();

    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v16, v8);
    uint64_t v22 = ((uint64_t (*)(char *, uint64_t))v27)(v13, v8);
  }
  else
  {

    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    uint64_t v24 = v44;
  }
  uint64_t v28 = *(void *)(v24 + 272);
  uint64_t v29 = *(void *)(v28 + 56);
  uint64_t v30 = (os_unfair_lock_s *)(v29 + 32);
  uint64_t v31 = (uint64_t *)(v29 + 16);
  char v46 = 7;
  __chkstk_darwin(v22, v23);
  *(&v42 - 2) = (uint64_t)&v46;
  os_unfair_lock_lock(v30);
  sub_100132008(v31);
  os_unfair_lock_unlock(v30);
  char v46 = 3;
  __chkstk_darwin(v32, v33);
  *(&v42 - 2) = (uint64_t)&v46;
  os_unfair_lock_lock(v30);
  sub_100132008(v31);
  os_unfair_lock_unlock(v30);
  uint64_t v36 = 2;
  unint64_t v37 = *(os_unfair_lock_s **)(v28 + 56);
  os_log_type_t v38 = v37 + 8;
  uint64_t v39 = (uint64_t)&v37[4];
  id v40 = &byte_1001C5D88;
  do
  {
    char v41 = *v40++;
    char v45 = v41;
    __chkstk_darwin(v34, v35);
    *(&v42 - 2) = (uint64_t)&v45;
    os_unfair_lock_lock(v38);
    sub_100132020(v39);
    os_unfair_lock_unlock(v38);
    --v36;
  }
  while (v36);
}

void sub_10011C398(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v103 = a3;
  uint64_t v6 = type metadata accessor for OSSignpostError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  os_log_type_t v101 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  unint64_t v18 = (char *)&v92 - v17;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v20 = Strong;
    uint64_t v95 = v7;
    uint64_t v96 = v6;
    uint64_t v21 = OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
    if (a2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound]) {
      int v22 = 1;
    }
    else {
      int v22 = a2[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK];
    }
    os_signpost_id_t v93 = v15;
    uint64_t v97 = v10;
    *(unsigned char *)(*(void *)(Strong + 272) + 122) = v22;
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = sub_100003E78(v27, (uint64_t)qword_1001DE9E0);
    uint64_t v29 = a2;
    uint64_t v94 = v28;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v102 = v20;
    uint64_t v100 = a4;
    int v99 = v22;
    if (v32)
    {
      uint64_t v33 = (_DWORD *)swift_slowAlloc();
      int v34 = v22;
      uint64_t v35 = v33;
      *uint64_t v33 = 67109632;
      LODWORD(v105[0]) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v35 + 4) = 1024;
      LODWORD(v105[0]) = a2[v21];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v35 + 7) = 1024;
      LODWORD(v105[0]) = *((unsigned __int8 *)&v29->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
      uint64_t v20 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "vasReadSuccess: %{BOOL}d, vasDataFound: %{BOOL}d, vasURLOK: %{BOOL}d", (uint8_t *)v35, 0x14u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v30 = v29;
    }
    uint64_t v36 = v29;
    uint64_t v38 = v95;
    uint64_t v37 = v96;

    if (qword_1001D92F0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for OSSignposter();
    sub_100003E78(v39, (uint64_t)qword_1001DE9F8);
    id v40 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v41 = static os_signpost_type_t.end.getter();
    char v42 = OS_os_log.signpostsEnabled.getter();
    uint64_t v98 = (char *)v36;
    if (v42)
    {
      swift_retain();
      uint64_t v43 = v101;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t))(v38 + 88))(v43, v37) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v44 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v43, v37);
        uint64_t v44 = "end total transaction";
      }
      char v45 = v93;
      uint64_t v46 = v97;
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v93, v18, v97);
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      os_signpost_id_t v48 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, v41, v48, "reader-total_transaction", v44, v47, 2u);
      swift_slowDealloc();

      uint64_t v49 = *(void (**)(char *, uint64_t))(v11 + 8);
      v49(v18, v46);
      v49(v45, v46);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v97);
    }
    uint64_t v50 = *(void *)(v20 + 272);
    uint64_t v51 = *(void *)(v50 + 56);
    uint64_t v52 = (os_unfair_lock_s *)(v51 + 32);
    uint64_t v53 = (uint64_t *)(v51 + 16);
    uint64_t v54 = swift_retain();
    LOBYTE(v105[0]) = 6;
    __chkstk_darwin(v54, v55);
    *(&v92 - 2) = (uint64_t)v105;
    os_unfair_lock_lock(v52);
    sub_100132008(v53);
    os_unfair_lock_unlock(v52);
    LOBYTE(v105[0]) = 3;
    __chkstk_darwin(v56, v57);
    *(&v92 - 2) = (uint64_t)v105;
    os_unfair_lock_lock(v52);
    sub_100132008(v53);
    os_unfair_lock_unlock(v52);
    uint64_t v60 = 1;
    uint64_t v61 = *(os_unfair_lock_s **)(v50 + 56);
    unsigned __int16 v62 = v61 + 8;
    uint64_t v63 = (uint64_t)&v61[4];
    os_signpost_type_t v64 = &byte_1001C5E28;
    do
    {
      char v65 = *v64++;
      LOBYTE(v105[0]) = v65;
      __chkstk_darwin(v58, v59);
      *(&v92 - 2) = (uint64_t)v105;
      os_unfair_lock_lock(v62);
      sub_100132020(v63);
      os_unfair_lock_unlock(v62);
      --v60;
    }
    while (v60);
    swift_release();
    uint64_t v66 = v102;
    uint64_t v67 = v98;
    if (v98[OBJC_IVAR____TtC9SPREngine13ReadOperation_skipLoyalty])
    {
      uint64_t v68 = (void *)sub_10002A544(4027, 0, 0, 0);
      uint64_t v69 = *(void *)(v66 + 272);
      v105[0] = (uint64_t)v68;
      type metadata accessor for ReadError(0);
      sub_100131054((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
      swift_retain();
      *(void *)(v69 + 136) = _BridgedStoredNSError.errorCode.getter();
      swift_release();
      sub_100006788((void *)(*(void *)(v66 + 272) + 16), *(void *)(*(void *)(v66 + 272) + 40));
      swift_retain();
      sub_100042F68((uint64_t)&off_1001C5E58);
      swift_release();
      id v70 = v68;
      sub_1000C755C((uint64_t)v70);
      swift_release();
    }
    else
    {
      if (v99)
      {
        sub_100006680(0, &qword_1001DEC00);
        uint64_t v71 = *(void *)&v67[OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse];
        uint64_t v72 = *(void **)&v67[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
        swift_bridgeObjectRetain();
        id v73 = sub_10002354C(v71, v72);
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v74, v75))
        {
          os_log_type_t v76 = (uint8_t *)swift_slowAlloc();
          os_log_type_t v77 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v76 = 138412290;
          v105[0] = (uint64_t)v73;
          id v78 = v73;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *os_log_type_t v77 = v73;

          uint64_t v66 = v102;
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "SPRTransactionData: %@", v76, 0xCu);
          sub_100003EB0((uint64_t *)&unk_1001DA540);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_100006788((void *)(*(void *)(v66 + 272) + 16), *(void *)(*(void *)(v66 + 272) + 40));
        swift_retain();
        sub_100042F68((uint64_t)&off_1001C5EA8);
        swift_release();
        (*(void (**)(id, void))(v100 + 24))(v73, 0);
      }
      else
      {
        uint64_t v79 = v98;
        os_signpost_type_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v80, v81))
        {
          id v82 = (uint8_t *)swift_slowAlloc();
          uint64_t v83 = swift_slowAlloc();
          *(_DWORD *)id v82 = 136315138;
          v105[0] = v83;
          uint64_t v104 = *(void *)&v79[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
          unint64_t v84 = (void *)v104;
          type metadata accessor for ReadError(0);
          id v85 = v84;
          uint64_t v86 = String.init<A>(describing:)();
          uint64_t v104 = sub_100005EB8(v86, v87, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "readOp.readError: %s", v82, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v88 = v102;
        uint64_t v89 = *(void *)(v102 + 272);
        uint64_t v90 = OBJC_IVAR____TtC9SPREngine13ReadOperation_readError;
        v105[0] = *(void *)&v79[OBJC_IVAR____TtC9SPREngine13ReadOperation_readError];
        type metadata accessor for ReadError(0);
        sub_100131054((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
        swift_retain();
        *(void *)(v89 + 136) = _BridgedStoredNSError.errorCode.getter();
        swift_release();
        sub_100006788((void *)(*(void *)(v88 + 272) + 16), *(void *)(*(void *)(v88 + 272) + 40));
        swift_retain();
        sub_100042F68((uint64_t)&off_1001C5E80);
        swift_release();
        id v91 = *(id *)&v79[v90];
        sub_1000C755C((uint64_t)v91);
      }
      swift_release();
    }
  }
  else
  {
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100003E78(v23, (uint64_t)qword_1001DE9E0);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_signpost_id_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_signpost_id_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "reader deinit during after-read operation", v26, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10011CF68(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v192 = a6;
  uint64_t v193 = a4;
  uint64_t v194 = a5;
  uint64_t v191 = a3;
  uint64_t v9 = type metadata accessor for OSSignpostError();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v185 = (char *)&v174 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  os_log_type_t v187 = (char *)&v174 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v186 = (char *)&v174 - v18;
  uint64_t v19 = type metadata accessor for OSSignpostID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v174 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v22, v25);
  uint64_t v189 = (char *)&v174 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  os_log_type_t v31 = (char *)&v174 - v30;
  __chkstk_darwin(v29, v32);
  id v188 = (char *)&v174 - v33;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v179 = v31;
    uint64_t v190 = (uint8_t *)OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound;
    if (*((unsigned char *)a2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasDataFound)) {
      int v34 = 1;
    }
    else {
      int v34 = *((unsigned __int8 *)a2 + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
    }
    uint64_t v178 = v24;
    uint64_t v182 = v10;
    uint64_t v183 = v9;
    uint64_t v184 = v19;
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100003E78(v39, (uint64_t)qword_1001DE9E0);
    id v40 = a2;
    os_signpost_type_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v181 = v20;
    uint64_t v180 = a2;
    if (v43)
    {
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 67109632;
      LODWORD(v197) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 8) = 1024;
      LODWORD(v197) = v190[(void)a2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 14) = 1024;
      LODWORD(v197) = *((unsigned __int8 *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v41, v42, "vasReadSuccess: %{BOOL}d, vasDataFound: %{BOOL}d, vasURLOK: %{BOOL}d", (uint8_t *)v44, 0x14u);
      swift_slowDealloc();
    }
    else
    {

      os_signpost_type_t v41 = v40;
    }

    *(unsigned char *)(*(void *)(Strong + 272) + 122) = v34;
    if (v34)
    {
      sub_100006680(0, &qword_1001DEC00);
      uint64_t v45 = *(uint64_t *)((char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse);
      uint64_t v46 = *(Class *)((char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_10002354C(v45, v46);
      os_signpost_id_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v177 = a7;
        uint64_t v51 = (uint8_t *)v50;
        uint64_t v52 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 138412290;
        *(void *)&long long v197 = v47;
        uint64_t v53 = v47;
        uint64_t v175 = v40;
        uint64_t v54 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v52 = v47;

        id v40 = v175;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "SPRTransactionData: %@", v51, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        swift_slowDealloc();
        a7 = v177;
        swift_slowDealloc();
      }
      else
      {

        os_signpost_id_t v48 = v47;
      }
      uint64_t v55 = v184;

      if (v191[2] == 2)
      {
        if ((*((unsigned char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) == 0)
        {
          uint64_t v56 = (void (*)(NSObject *, void))v193[3];
          uint64_t v176 = v47;
          v56(v47, 0);
          if (qword_1001D92F0 != -1) {
            swift_once();
          }
          uint64_t v57 = type metadata accessor for OSSignposter();
          sub_100003E78(v57, (uint64_t)qword_1001DE9F8);
          uint64_t v58 = OSSignposter.logHandle.getter();
          uint64_t v59 = v188;
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v60 = static os_signpost_type_t.end.getter();
          char v61 = OS_os_log.signpostsEnabled.getter();
          uint64_t v62 = v183;
          uint64_t v63 = v182;
          if (v61)
          {
            swift_retain();
            os_signpost_type_t v64 = v186;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v63 + 88))(v64, v62) == enum case for OSSignpostError.doubleEnd(_:))
            {
              char v65 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v62);
              char v65 = "end total transaction";
            }
            uint64_t v108 = v181;
            uint64_t v109 = v179;
            (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v179, v59, v55);
            uint64_t v110 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v110 = 0;
            os_signpost_id_t v111 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, v60, v111, "reader-total_transaction", v65, v110, 2u);
            swift_slowDealloc();

            unint64_t v112 = *(void (**)(char *, uint64_t))(v108 + 8);
            v112(v59, v55);
            v112(v109, v55);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v181 + 8))(v59, v55);
          }
          uint64_t v113 = *(void *)(Strong + 272);
          uint64_t v114 = *(void *)(v113 + 56);
          id v115 = (os_unfair_lock_s *)(v114 + 32);
          unint64_t v116 = (uint64_t *)(v114 + 16);
          uint64_t v117 = swift_retain();
          LOBYTE(v197) = 3;
          __chkstk_darwin(v117, v118);
          *(&v174 - 2) = (uint64_t)&v197;
          os_unfair_lock_lock(v115);
          sub_100132008(v116);
          os_unfair_lock_unlock(v115);
          uint64_t v121 = 1;
          uint64_t v122 = *(os_unfair_lock_s **)(v113 + 56);
          uint64_t v123 = v122 + 8;
          uint64_t v124 = (uint64_t)&v122[4];
          char v125 = &byte_1001C5F40;
          do
          {
            char v126 = *v125++;
            LOBYTE(v197) = v126;
            __chkstk_darwin(v119, v120);
            *(&v174 - 2) = (uint64_t)&v197;
            os_unfair_lock_lock(v123);
            sub_100132020(v124);
            os_unfair_lock_unlock(v123);
            --v121;
          }
          while (v121);
LABEL_70:
          swift_release();
          swift_release();

          return;
        }
      }
      else
      {
        if (v190[(void)v180] == 1)
        {
          uint64_t v66 = (void (*)(NSObject *, void))v193[3];
          uint64_t v176 = v47;
          v66(v47, 0);
          if (qword_1001D92F0 != -1) {
            swift_once();
          }
          uint64_t v67 = type metadata accessor for OSSignposter();
          sub_100003E78(v67, (uint64_t)qword_1001DE9F8);
          uint64_t v68 = OSSignposter.logHandle.getter();
          uint64_t v69 = v189;
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v70 = static os_signpost_type_t.end.getter();
          char v71 = OS_os_log.signpostsEnabled.getter();
          uint64_t v72 = v183;
          uint64_t v73 = v182;
          if (v71)
          {
            swift_retain();
            uint64_t v74 = v187;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v73 + 88))(v74, v72) == enum case for OSSignpostError.doubleEnd(_:))
            {
              os_log_type_t v75 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v72);
              os_log_type_t v75 = "end total transaction";
            }
            uint64_t v127 = v181;
            os_log_type_t v128 = v179;
            (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v179, v69, v55);
            BOOL v129 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)BOOL v129 = 0;
            os_signpost_id_t v130 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v68, v70, v130, "reader-total_transaction", v75, v129, 2u);
            swift_slowDealloc();

            int v131 = *(void (**)(char *, uint64_t))(v127 + 8);
            v131(v69, v55);
            v131(v128, v55);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v181 + 8))(v69, v55);
          }
          uint64_t v132 = *(void *)(Strong + 272);
          uint64_t v133 = *(void *)(v132 + 56);
          os_signpost_type_t v134 = (os_unfair_lock_s *)(v133 + 32);
          uint64_t v135 = (uint64_t *)(v133 + 16);
          uint64_t v136 = swift_retain();
          LOBYTE(v197) = 3;
          __chkstk_darwin(v136, v137);
          *(&v174 - 2) = (uint64_t)&v197;
          os_unfair_lock_lock(v134);
          sub_100132008(v135);
          os_unfair_lock_unlock(v134);
          uint64_t v140 = 1;
          uint64_t v141 = *(os_unfair_lock_s **)(v132 + 56);
          os_signpost_id_t v142 = v141 + 8;
          uint64_t v143 = (uint64_t)&v141[4];
          uint64_t v144 = &byte_1001C5F90;
          do
          {
            char v145 = *v144++;
            LOBYTE(v197) = v145;
            __chkstk_darwin(v138, v139);
            *(&v174 - 2) = (uint64_t)&v197;
            os_unfair_lock_lock(v142);
            sub_100132020(v143);
            os_unfair_lock_unlock(v142);
            --v140;
          }
          while (v140);
          goto LABEL_70;
        }
        if (*((unsigned char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasURLOK) == 1
          && (*((unsigned char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_paymentDataForthcoming) & 1) == 0)
        {
          ((void (*)(NSObject *, void))v193[3])(v47, 0);
          if (qword_1001D92F0 != -1) {
            swift_once();
          }
          uint64_t v146 = type metadata accessor for OSSignposter();
          sub_100003E78(v146, (uint64_t)qword_1001DE9F8);
          uint64_t v147 = OSSignposter.logHandle.getter();
          os_log_type_t v148 = v178;
          OSSignpostIntervalState.signpostID.getter();
          os_signpost_type_t v149 = static os_signpost_type_t.end.getter();
          char v150 = OS_os_log.signpostsEnabled.getter();
          uint64_t v151 = v183;
          uint64_t v152 = v182;
          uint64_t v176 = v47;
          if (v150)
          {
            swift_retain();
            id v153 = v185;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            if ((*(unsigned int (**)(char *, uint64_t))(v152 + 88))(v153, v151) == enum case for OSSignpostError.doubleEnd(_:))
            {
              uint64_t v154 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v152 + 8))(v153, v151);
              uint64_t v154 = "end total transaction";
            }
            uint64_t v155 = v181;
            uint64_t v156 = v179;
            (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v179, v148, v55);
            uint64_t v157 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v157 = 0;
            os_signpost_id_t v158 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v147, v149, v158, "reader-total_transaction", v154, v157, 2u);
            swift_slowDealloc();

            uint64_t v159 = *(void (**)(char *, uint64_t))(v155 + 8);
            v159(v148, v55);
            v159(v156, v55);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v181 + 8))(v148, v55);
          }
          uint64_t v160 = *(void *)(Strong + 272);
          uint64_t v161 = *(void *)(v160 + 56);
          int v162 = (os_unfair_lock_s *)(v161 + 32);
          uint64_t v163 = (uint64_t *)(v161 + 16);
          uint64_t v164 = swift_retain();
          LOBYTE(v197) = 3;
          __chkstk_darwin(v164, v165);
          *(&v174 - 2) = (uint64_t)&v197;
          os_unfair_lock_lock(v162);
          sub_100132008(v163);
          os_unfair_lock_unlock(v162);
          uint64_t v168 = 1;
          os_signpost_id_t v169 = *(os_unfair_lock_s **)(v160 + 56);
          unint64_t v170 = v169 + 8;
          uint64_t v171 = (uint64_t)&v169[4];
          os_signpost_type_t v172 = &byte_1001C5FE0;
          do
          {
            char v173 = *v172++;
            LOBYTE(v197) = v173;
            __chkstk_darwin(v166, v167);
            *(&v174 - 2) = (uint64_t)&v197;
            os_unfair_lock_lock(v170);
            sub_100132020(v171);
            os_unfair_lock_unlock(v170);
            --v168;
          }
          while (v168);
          goto LABEL_70;
        }
      }
    }
    if (qword_1001D9318 != -1) {
      swift_once();
    }
    if (![(id)qword_1001E1150 canEvaluatePolicy:2 error:0])
    {
      os_signpost_type_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        id v82 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "no passcode after tap: attestationFailed", v82, 2u);
        swift_slowDealloc();
      }

      id v83 = (id)sub_10002A544(4023, 0, 0, 0);
      goto LABEL_56;
    }
    os_log_type_t v76 = (NSObject **)((char *)v40 + OBJC_IVAR____TtC9SPREngine13ReadOperation_readResult);
    swift_beginAccess();
    os_log_type_t v77 = *v76;
    if ((*v76)[2].isa)
    {
      swift_bridgeObjectRetain();
      unint64_t v78 = sub_10000C4B0(0xD000000000000014, 0x8000000100193EE0);
      if (v79)
      {
        sub_100006570((uint64_t)v77[7].isa + 32 * v78, (uint64_t)&v197);
      }
      else
      {
        long long v197 = 0u;
        long long v198 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v198 + 1))
      {
        type metadata accessor for SPRPayAppletStatus(0);
        if (swift_dynamicCast())
        {
          int v84 = v196;
          id v85 = Logger.logObject.getter();
          os_log_type_t v86 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v85, v86))
          {
            unint64_t v87 = (uint8_t *)swift_slowAlloc();
            uint64_t v177 = a7;
            uint64_t v88 = v87;
            *(_DWORD *)unint64_t v87 = 67109120;
            LODWORD(v197) = v84 == 6;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v85, v86, "payReadComplete: %{BOOL}d", v88, 8u);
            a7 = v177;
            swift_slowDealloc();
          }

          *(unsigned char *)(*(void *)(Strong + 272) + 121) = v84 == 6;
          sub_100006680(0, &qword_1001DEC00);
          uint64_t v89 = *(uint64_t *)((char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_vasResponse);
          uint64_t v90 = *v76;
          id v91 = *(Class *)((char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v92 = sub_100021FBC(v89, v90, v91);
          uint64_t v177 = a7;
          os_signpost_id_t v93 = v92;
          uint64_t v94 = Logger.logObject.getter();
          os_log_type_t v95 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v94, v95))
          {
            uint64_t v96 = (uint8_t *)swift_slowAlloc();
            uint64_t v189 = (char *)swift_slowAlloc();
            uint64_t v190 = v96;
            *(_DWORD *)uint64_t v96 = 138412290;
            *(void *)&long long v197 = v93;
            uint64_t v97 = v93;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(void *)uint64_t v189 = v93;

            _os_log_impl((void *)&_mh_execute_header, v94, v95, "SPRTransactionData: %@", v190, 0xCu);
            sub_100003EB0((uint64_t *)&unk_1001DA540);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v94 = v93;
          }

          sub_100006788((void *)(*(void *)(Strong + 272) + 16), *(void *)(*(void *)(Strong + 272) + 40));
          swift_retain();
          sub_100042F68((uint64_t)&off_1001C6010);
          swift_release();
          sub_10012A3A0(v193, v93, v191[19], v191[20]);

          sub_10011E530(v192, v194, Strong);
          swift_release();
          return;
        }
        goto LABEL_53;
      }
    }
    else
    {
      long long v197 = 0u;
      long long v198 = 0u;
    }
    sub_10005F4F8((uint64_t)&v197, &qword_1001DD3F0);
LABEL_53:
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "ReadOperation completed but payAppletFinalStatus not found in readResult", v100, 2u);
      swift_slowDealloc();
    }

    id v83 = *(id *)((char *)&v40->isa + OBJC_IVAR____TtC9SPREngine13ReadOperation_readError);
LABEL_56:
    swift_willThrow();
    sub_10011E530(v192, v194, Strong);
    os_log_type_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Could not init SPRTransactionData or InternalTransactionData", v103, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    *(unsigned char *)(a7 + 16) = 1;
    uint64_t v104 = Strong;
    uint64_t v105 = *(void *)(Strong + 272);
    swift_retain();
    uint64_t v106 = (void *)_convertErrorToNSError(_:)();
    id v107 = [v106 code];

    *(void *)(v105 + 144) = v107;
    swift_release();
    sub_100006788((void *)(*(void *)(v104 + 272) + 16), *(void *)(*(void *)(v104 + 272) + 40));
    swift_retain();
    sub_100042F68((uint64_t)&off_1001C6038);
    swift_release();
    sub_1000C755C((uint64_t)v83);
    swift_release();
    swift_errorRelease();
    return;
  }
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100003E78(v35, (uint64_t)qword_1001DE9E0);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "reader deinit during after-read operation", v38, 2u);
    swift_slowDealloc();
  }
}

void sub_10011E530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a3;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v43 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v42 - v15;
  if (qword_1001D92F0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSSignposter();
  sub_100003E78(v17, (uint64_t)qword_1001DE9F8);
  sub_100044E30("reader-postProcessing", 21, 2, a1, 0xD000000000000013, 0x800000010019B910);
  uint64_t v18 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v19 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v20 = v43;
    if ((*(unsigned int (**)(char *, uint64_t))(v43 + 88))(v7, v4) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v4);
      uint64_t v21 = "end total transaction";
    }
    uint64_t v24 = v44;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v16, v8);
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    os_signpost_id_t v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v26, "reader-total_transaction", v21, v25, 2u);
    swift_slowDealloc();

    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v16, v8);
    uint64_t v22 = ((uint64_t (*)(char *, uint64_t))v27)(v13, v8);
  }
  else
  {

    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    uint64_t v24 = v44;
  }
  uint64_t v28 = *(void *)(v24 + 272);
  uint64_t v29 = *(void *)(v28 + 56);
  uint64_t v30 = (os_unfair_lock_s *)(v29 + 32);
  os_log_type_t v31 = (uint64_t *)(v29 + 16);
  char v46 = 7;
  __chkstk_darwin(v22, v23);
  *(&v42 - 2) = (uint64_t)&v46;
  os_unfair_lock_lock(v30);
  sub_100132008(v31);
  os_unfair_lock_unlock(v30);
  char v46 = 3;
  __chkstk_darwin(v32, v33);
  *(&v42 - 2) = (uint64_t)&v46;
  os_unfair_lock_lock(v30);
  sub_100132008(v31);
  os_unfair_lock_unlock(v30);
  uint64_t v36 = 2;
  os_log_type_t v37 = *(os_unfair_lock_s **)(v28 + 56);
  uint64_t v38 = v37 + 8;
  uint64_t v39 = (uint64_t)&v37[4];
  id v40 = &byte_1001C5EF0;
  do
  {
    char v41 = *v40++;
    char v45 = v41;
    __chkstk_darwin(v34, v35);
    *(&v42 - 2) = (uint64_t)&v45;
    os_unfair_lock_lock(v38);
    sub_100132020(v39);
    os_unfair_lock_unlock(v38);
    --v36;
  }
  while (v36);
}

void sub_10011E9BC()
{
  uint64_t v1 = v0;
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v3);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DE9E0);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Reader.cancelRead()", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = (void *)v1[12];
  uint64_t v11 = (uint64_t)[v10 operationCount];
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  if (v11 < 1)
  {
    if (v14)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No Reader Operation to cancel", v23, 2u);
      goto LABEL_12;
    }
  }
  else
  {
    if (v14)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Setting readCancelReason: ReadError(.cancelled)", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = sub_100006788(v1 + 35, v1[38]);
    type metadata accessor for ReadError(0);
    void v24[3] = v17;
    v24[0] = sub_10002A544(4013, 0, 0, 0);
    uint64_t v18 = *v16;
    uint64_t v19 = static DispatchWorkItemFlags.barrier.getter();
    __chkstk_darwin(v19, v20);
    v24[-6] = v18;
    LOBYTE(v24[-5]) = 1;
    v24[-4] = v24;
    v24[-3] = 0;
    v24[-2] = 0;
    v24[-1] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v25);
    sub_100006520((uint64_t)v24);
    sub_10012A284();
    [v10 cancelAllOperations];
    [v10 waitUntilAllOperationsAreFinished];
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v21, "All Reader Operations cancelled", v22, 2u);
LABEL_12:
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10011ED7C(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  unint64_t v293 = a4;
  unint64_t v294 = a5;
  uint64_t v288 = (uint64_t *)a1;
  uint64_t v16 = type metadata accessor for HPKE.Sender();
  uint64_t v265 = *(void *)(v16 - 8);
  uint64_t v266 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v279 = (char *)&v234 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HPKE.AEAD();
  uint64_t v276 = *(void *)(v19 - 8);
  uint64_t v277 = (void *)v19;
  __chkstk_darwin(v19, v20);
  uint64_t v275 = (char *)&v234 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for HPKE.KDF();
  uint64_t v272 = *(void *)(v22 - 8);
  uint64_t v273 = v22;
  __chkstk_darwin(v22, v23);
  v274 = (char *)&v234 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for HPKE.KEM();
  uint64_t v268 = *(void *)(v25 - 8);
  uint64_t v269 = v25;
  __chkstk_darwin(v25, v26);
  uint64_t v270 = (char *)&v234 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for HPKE.Ciphersuite();
  uint64_t v281 = *(void *)(v28 - 8);
  uint64_t v282 = v28;
  uint64_t v30 = __chkstk_darwin(v28, v29);
  uint64_t v271 = (char *)&v234 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  uint64_t v280 = (char *)&v234 - v33;
  uint64_t v34 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v283 = *(void *)(v34 - 8);
  uint64_t v284 = v34;
  uint64_t v36 = __chkstk_darwin(v34, v35);
  NSString v267 = (char *)&v234 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36, v38);
  uint64_t v285 = (char *)&v234 - v39;
  uint64_t v40 = type metadata accessor for String.Encoding();
  uint64_t v41 = *(void *)(v40 - 8);
  unint64_t v290 = v40;
  uint64_t v291 = v41;
  __chkstk_darwin(v40, v42);
  uint64_t v289 = (uint64_t)&v234 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  os_log_t v278 = (os_log_t)sub_100003E78(v44, (uint64_t)qword_1001DE9E0);
  uint64_t countAndFlagsBits = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled((os_log_t)countAndFlagsBits, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)countAndFlagsBits, v46, "getStoreAndForwardResultsBlob(trxHashes:sessionId:activationId:mid:partnerId:virtualTerminalId:)", v47, 2u);
    swift_slowDealloc();
  }
  uint64_t v292 = a6;

  uint64_t v48 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v48 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v48) {
    goto LABEL_29;
  }
  unint64_t v49 = HIBYTE(v294) & 0xF;
  if ((v294 & 0x2000000000000000) == 0) {
    unint64_t v49 = v293 & 0xFFFFFFFFFFFFLL;
  }
  if (!v49) {
    goto LABEL_29;
  }
  uint64_t v50 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v50 = v292 & 0xFFFFFFFFFFFFLL;
  }
  if (!v50) {
    goto LABEL_29;
  }
  uint64_t v51 = HIBYTE(a9) & 0xF;
  if ((a9 & 0x2000000000000000) == 0) {
    uint64_t v51 = a8 & 0xFFFFFFFFFFFFLL;
  }
  if (!v51) {
    goto LABEL_29;
  }
  uint64_t v52 = HIBYTE(a11) & 0xF;
  uint64_t v264 = a10;
  if ((a11 & 0x2000000000000000) == 0) {
    uint64_t v52 = a10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v52) {
    goto LABEL_29;
  }
  uint64_t countAndFlagsBits = v289;
  static String.Encoding.utf8.getter();
  uint64_t v261 = String.data(using:allowLossyConversion:)();
  uint64_t v53 = (void *)a3;
  unint64_t v55 = v54;
  uint64_t v56 = *(void (**)(uint64_t, unint64_t))(v291 + 8);
  v291 += 8;
  long long v263 = v56;
  v56(countAndFlagsBits, v290);
  unint64_t v262 = v55;
  if (v55 >> 60 == 15) {
    goto LABEL_29;
  }
  id v257 = v53;
  unint64_t v258 = a7;
  uint64_t countAndFlagsBits = v289;
  static String.Encoding.utf8.getter();
  uint64_t v259 = String.data(using:allowLossyConversion:)();
  unint64_t v58 = v57;
  uint64_t v59 = v263;
  v263(countAndFlagsBits, v290);
  unint64_t v260 = v58;
  if (v58 >> 60 == 15)
  {
LABEL_28:
    sub_10000BF70(v261, v262);
LABEL_29:
    sub_10002A544(4000, 0xD000000000000028, (void *)0x800000010019B700, 0);
    swift_willThrow();
    return countAndFlagsBits;
  }
  unint64_t v254 = a11;
  static String.Encoding.utf8.getter();
  uint64_t v255 = String.data(using:allowLossyConversion:)();
  unint64_t v61 = v60;
  v59(countAndFlagsBits, v290);
  unint64_t v256 = v61;
  if (v61 >> 60 == 15)
  {
LABEL_27:
    sub_10000BF70(v259, v260);
    goto LABEL_28;
  }
  static String.Encoding.utf8.getter();
  uint64_t v253 = String.data(using:allowLossyConversion:)();
  unint64_t v63 = v62;
  v59(countAndFlagsBits, v290);
  if (v63 >> 60 == 15)
  {
LABEL_26:
    sub_10000BF70(v255, v256);
    goto LABEL_27;
  }
  unint64_t v252 = v63;
  static String.Encoding.utf8.getter();
  uint64_t v250 = String.data(using:allowLossyConversion:)();
  unint64_t v65 = v64;
  v59(countAndFlagsBits, v290);
  unint64_t v251 = v65;
  if (v65 >> 60 == 15)
  {
    sub_10000BF70(v253, v252);
    goto LABEL_26;
  }
  unint64_t v249 = a9;
  long long v248 = xmmword_100189A30;
  long long v303 = xmmword_100189A30;
  uint64_t v67 = v287;
  unint64_t v68 = (unint64_t)v288;
  uint64_t v69 = sub_100114CB8((unint64_t)v288, (uint64_t)&v303);
  unint64_t v70 = v260;
  if (v67)
  {
    sub_10000BF70(v261, v262);
    sub_10000BF70(v259, v70);
    sub_10000BF70(v255, v256);
    sub_10000BF70(v253, v252);
    sub_10000BF70(v250, v251);
LABEL_42:
    sub_100006628(v303, *((unint64_t *)&v303 + 1));
    return countAndFlagsBits;
  }
  uint64_t v71 = (uint64_t)v69;
  uint64_t v240 = a8;
  uint64_t v72 = type metadata accessor for TLV();
  uint64_t v241 = (uint64_t *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  uint64_t v287 = TLV.__allocating_init(tag:children:)(*v241, v71);
  if (v68 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v73 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v75 = v289;
  unint64_t v74 = v290;
  uint64_t v244 = v72;
  uint64_t v242 = a2;
  static String.Encoding.utf8.getter();
  uint64_t v76 = String.data(using:allowLossyConversion:)();
  unint64_t v78 = v77;
  v263(v75, v74);
  uint64_t v79 = v261;
  if (v78 >> 60 == 15)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    JUMPOUT(0x100120A3CLL);
  }
  uint64_t v297 = v76;
  unint64_t v298 = v78;
  sub_100038D8C(v76, v78);
  unint64_t v80 = v262;
  sub_100038D8C(v79, v262);
  sub_100147328(v79, v80);
  sub_10000BF70(v79, v80);
  sub_10000BF70(v76, v78);
  uint64_t v81 = v297;
  unint64_t v82 = v298;
  uint64_t v301 = (char *)v297;
  unint64_t v302 = v298;
  sub_1000065D0(v297, v298);
  uint64_t v84 = v259;
  unint64_t v83 = v260;
  sub_100038D8C(v259, v260);
  sub_100147328(v84, v83);
  sub_10000BF70(v84, v83);
  sub_100006628(v81, v82);
  uint64_t v85 = (uint64_t)v301;
  unint64_t v86 = v302;
  uint64_t v297 = (uint64_t)v301;
  unint64_t v298 = v302;
  sub_1000065D0((uint64_t)v301, v302);
  uint64_t v87 = v255;
  unint64_t v88 = v256;
  sub_100038D8C(v255, v256);
  sub_100147328(v87, v88);
  sub_10000BF70(v87, v88);
  sub_100006628(v85, v86);
  uint64_t v90 = v297;
  unint64_t v89 = v298;
  uint64_t v301 = (char *)v297;
  unint64_t v302 = v298;
  sub_1000065D0(v297, v298);
  unint64_t v92 = v252;
  uint64_t v91 = v253;
  sub_100038D8C(v253, v252);
  sub_100147328(v91, v92);
  sub_10000BF70(v91, v92);
  sub_100006628(v90, v89);
  uint64_t v94 = (uint64_t)v301;
  unint64_t v93 = v302;
  uint64_t v297 = (uint64_t)v301;
  unint64_t v298 = v302;
  sub_1000065D0((uint64_t)v301, v302);
  uint64_t v95 = v250;
  unint64_t v96 = v251;
  sub_100038D8C(v250, v251);
  sub_100147328(v95, v96);
  sub_10000BF70(v95, v96);
  sub_100006628(v94, v93);
  uint64_t v97 = v297;
  unint64_t v98 = v298;
  uint64_t v301 = (char *)bswap64(v73);
  uint64_t v99 = sub_100115354((uint64_t)&v301, (uint64_t)&v302);
  unint64_t v101 = v100;
  uint64_t v301 = (char *)v97;
  unint64_t v302 = v98;
  sub_1000065D0(v97, v98);
  sub_100147328(v99, v101);
  sub_100006628(v99, v101);
  sub_100006628(v97, v98);
  uint64_t v102 = (uint64_t)v301;
  unint64_t v103 = v302;
  long long v104 = v303;
  uint64_t v297 = (uint64_t)v301;
  unint64_t v298 = v302;
  sub_1000065D0(v303, *((unint64_t *)&v303 + 1));
  sub_1000065D0(v102, v103);
  sub_100147328(v104, *((unint64_t *)&v104 + 1));
  sub_100006628(v104, *((unint64_t *)&v104 + 1));
  sub_100006628(v102, v103);
  uint64_t v105 = v297;
  unint64_t v106 = v298;
  uint64_t v107 = Data.sha256Digest.getter(v297, v298);
  uint64_t v239 = v73;
  uint64_t v108 = v107;
  uint64_t v110 = v109;
  sub_100006628(v105, v106);
  sub_100006788(v286 + 19, v286[22]);
  os_signpost_id_t v111 = sub_10013E06C(202, 0xD000000000000010, 0x8000000100197D50, 4);
  uint64_t v113 = v112;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v288 = &v234;
  uint64_t v243 = AssociatedTypeWitness;
  uint64_t v116 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v117);
  uint64_t v246 = v108;
  unint64_t v247 = v110;
  uint64_t v245 = sub_100132D4C((uint64_t)&v234 - v118, v108, v110, 1u, ObjectType, v113);
  uint64_t v119 = v245;
  unint64_t v237 = v111;
  uint64_t v120 = v243;
  uint64_t v299 = v243;
  unint64_t v122 = v121;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v238 = 0;
  uint64_t v124 = AssociatedConformanceWitness;
  uint64_t v300 = AssociatedConformanceWitness;
  sub_10008CDF4(&v297);
  (*(void (**)(void))(v116 + 32))();
  uint64_t v236 = sub_100003EB0((uint64_t *)&unk_1001DA5A0);
  uint64_t v125 = swift_allocObject();
  *(_OWORD *)(v125 + 16) = xmmword_100189F80;
  char v126 = *(uint64_t (**)(uint64_t, uint64_t))(v124 + 48);
  sub_1000065D0(v119, v122);
  uint64_t v127 = v124;
  unint64_t v128 = v238;
  uint64_t v129 = v126(v120, v127);
  TLV.__allocating_init(dataRepresentation:)(v129, v130);
  uint64_t v288 = (uint64_t *)v128;
  if (v128)
  {
    sub_100006628(v119, v122);
    *(void *)(v125 + 16) = 0;
    swift_unknownObjectRelease();
    swift_release();
    sub_100006520((uint64_t)&v297);
    uint64_t countAndFlagsBits = 0;
    unint64_t v132 = v122;
    unint64_t v133 = v260;
    uint64_t v135 = v246;
    unint64_t v134 = v247;
    uint64_t v136 = (uint64_t)v288;
    unint64_t v137 = v128;
LABEL_38:
    swift_errorRetain();
    sub_10002A544(4048, 0xD00000000000003ELL, (void *)0x800000010019B730, v136);
    swift_errorRelease();
    swift_willThrow();
    sub_10000BF70(v261, v262);
    sub_10000BF70(v259, v133);
    sub_10000BF70(v255, v256);
    sub_10000BF70(v253, v252);
    swift_release();
    sub_100006628(v135, v134);
    sub_10000BF70(v250, v251);
    swift_errorRelease();
    if (!v137) {
      sub_100006628(v245, v132);
    }
    if (countAndFlagsBits) {
      swift_bridgeObjectRelease();
    }
    goto LABEL_42;
  }
  unint64_t v138 = v122;
  *(void *)(v125 + 32) = v131;
  uint64_t v301 = (char *)v125;
  specialized Array._endMutation()();
  uint64_t v139 = v300;
  uint64_t v295 = (uint64_t)v301;
  uint64_t v140 = v299;
  sub_100006788(&v297, v299);
  uint64_t v141 = (*(uint64_t (**)(uint64_t, uint64_t))(v139 + 56))(v140, v139);
  uint64_t v142 = *(void *)(v141 + 16);
  unint64_t v235 = v138;
  uint64_t v243 = v141;
  if (v142)
  {
    uint64_t v143 = (unint64_t *)(v141 + 40);
    uint64_t v136 = (uint64_t)v288;
    while (1)
    {
      uint64_t v145 = *(v143 - 1);
      unint64_t v144 = *v143;
      sub_1000065D0(v145, *v143);
      sub_1000065D0(v145, v144);
      TLV.__allocating_init(dataRepresentation:)(v145, v144);
      if (v136) {
        break;
      }
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v295 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v295 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
        uint64_t v288 = *(uint64_t **)((v295 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v143 += 2;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100006628(v145, v144);
      if (!--v142) {
        goto LABEL_51;
      }
    }
    swift_bridgeObjectRelease();
    sub_100006628(v145, v144);
    swift_unknownObjectRelease();
    unint64_t v132 = v235;
    sub_100006628(v245, v235);
    sub_100006520((uint64_t)&v297);
    uint64_t countAndFlagsBits = 1;
    unint64_t v133 = v260;
    uint64_t v135 = v246;
    unint64_t v134 = v247;
    unint64_t v137 = v238;
    goto LABEL_38;
  }
  uint64_t v136 = (uint64_t)v288;
LABEL_51:
  uint64_t v288 = (uint64_t *)v136;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006520((uint64_t)&v297);
  uint64_t v146 = v241;
  uint64_t v147 = *v241;
  uint64_t v148 = swift_allocObject();
  *(_OWORD *)(v148 + 16) = xmmword_10018D870;
  os_signpost_type_t v149 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
  *(void *)(v148 + 32) = TLV.__allocating_init(tag:string:)(*v149);
  uint64_t v150 = *v149;
  swift_bridgeObjectRetain();
  *(void *)(v148 + 40) = TLV.__allocating_init(tag:string:)(v150);
  uint64_t v151 = *v149;
  swift_bridgeObjectRetain();
  *(void *)(v148 + 48) = TLV.__allocating_init(tag:string:)(v151);
  uint64_t v152 = *v149;
  swift_bridgeObjectRetain();
  *(void *)(v148 + 56) = TLV.__allocating_init(tag:string:)(v152);
  uint64_t v153 = *v149;
  swift_bridgeObjectRetain();
  *(void *)(v148 + 64) = TLV.__allocating_init(tag:string:)(v153);
  unint64_t v293 = (unint64_t)v149;
  uint64_t v154 = *v149;
  swift_bridgeObjectRetain();
  *(void *)(v148 + 72) = TLV.__allocating_init(tag:string:)(v154);
  uint64_t v297 = v239;
  unint64_t v155 = sub_100006AD0();
  sub_100021C20();
  uint64_t v156 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(void *)(v148 + 80) = TLV.__allocating_init<A>(tag:integer:)(v156, (char *)&v297, &type metadata for Int, v155);
  *(void *)(v148 + 88) = v287;
  swift_retain();
  variable initialization expression of PrimaryAccountWatcher.isSandboxAccount();
  uint64_t v157 = BitString.init(data:unusedBits:)(v245);
  unint64_t v159 = v158;
  char v161 = v160;
  uint64_t v162 = default argument 0 of IteratorProtocol<>.nextBitString(tag:)();
  *(void *)(v148 + 96) = TLV.__allocating_init(tag:bitString:)(v162, v157, v159, v161);
  *(void *)(v148 + 104) = TLV.__allocating_init(tag:children:)(*v146, v295);
  uint64_t v297 = v148;
  specialized Array._endMutation()();
  uint64_t v163 = TLV.__allocating_init(tag:children:)(v147, v297);
  uint64_t v164 = (*(uint64_t (**)(void))(*v163 + 168))();
  unint64_t v166 = v165;
  sub_100003EB0(&qword_1001DEBE8);
  uint64_t v167 = swift_allocObject();
  *(_OWORD *)(v167 + 16) = xmmword_100186100;
  uint64_t v297 = 0;
  unint64_t v298 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v297 = 0x6F6C796150666173;
  unint64_t v298 = 0xEF5B617461446461;
  uint64_t v168 = 0;
  uint64_t v169 = v164;
  switch(v166 >> 62)
  {
    case 1uLL:
      LODWORD(v168) = HIDWORD(v164) - v164;
      if (__OFSUB__(HIDWORD(v164), v164))
      {
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      uint64_t v168 = (int)v168;
LABEL_57:
      uint64_t v301 = (char *)v168;
      v173._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v173);
      swift_bridgeObjectRelease();
      v174._uint64_t countAndFlagsBits = 15709;
      v174._object = (void *)0xE200000000000000;
      String.append(_:)(v174);
      unint64_t v294 = v166;
      Swift::String v175 = Data.hexString()();
      String.append(_:)(v175);
      swift_bridgeObjectRelease();
      uint64_t v176 = v297;
      unint64_t v177 = v298;
      *(void *)(v167 + 56) = &type metadata for String;
      *(void *)(v167 + 32) = v176;
      *(void *)(v167 + 40) = v177;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = *(void *)(*sub_100006788(v286 + 13, v286[16]) + 200);
      unint64_t v178 = (unint64_t)v288;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v179 = v178;
      if (v178) {
        goto LABEL_63;
      }
      sub_1000E29F8(v297);
      swift_bridgeObjectRelease();
      uint64_t v180 = P256.KeyAgreement.PublicKey.x963Representation.getter();
      unint64_t v182 = v181;
      uint64_t v243 = Data.sha256Digest.getter(v180, v181);
      uint64_t v288 = (uint64_t *)v183;
      sub_100006628(v180, v182);
      uint64_t v297 = 0xD000000000000024;
      unint64_t v298 = 0x800000010019AFB0;
      v184._uint64_t countAndFlagsBits = v242;
      v184._object = v257;
      String.append(_:)(v184);
      uint64_t v185 = v289;
      static String.Encoding.utf8.getter();
      uint64_t v186 = String.data(using:allowLossyConversion:)();
      unint64_t v188 = v187;
      swift_bridgeObjectRelease();
      v263(v185, v290);
      if (v188 >> 60 == 15)
      {
        uint64_t countAndFlagsBits = Logger.logObject.getter();
        os_log_type_t v189 = static os_log_type_t.error.getter();
        if (os_log_type_enabled((os_log_t)countAndFlagsBits, v189))
        {
          uint64_t v190 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v190 = 0;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)countAndFlagsBits, v189, "Error converting senderInfo to Data", v190, 2u);
          swift_slowDealloc();
        }

        uint64_t v179 = sub_10002A544(4000, 0, 0, 0);
        swift_willThrow();
        sub_100006628(v243, (unint64_t)v288);
        (*(void (**)(char *, uint64_t))(v283 + 8))(v285, v284);
LABEL_63:
        swift_errorRetain();
        sub_10002A544(4048, 0xD00000000000004ALL, (void *)0x800000010019B770, v179);
        swift_errorRelease();
        swift_willThrow();
        sub_10000BF70(v261, v262);
        sub_10000BF70(v259, v260);
        sub_10000BF70(v255, v256);
        sub_10000BF70(v253, v252);
        sub_100006628(v169, v294);
        swift_release();
        sub_100006628(v246, v247);
        sub_10000BF70(v250, v251);
        swift_errorRelease();
        swift_release();
        sub_100006628(v245, v235);
        goto LABEL_42;
      }
      uint64_t v297 = v186;
      unint64_t v298 = v188;
      Data.append(_:)();
      (*(void (**)(char *, void, uint64_t))(v268 + 104))(v270, enum case for HPKE.KEM.P256_HKDF_SHA256(_:), v269);
      (*(void (**)(char *, void, uint64_t))(v272 + 104))(v274, enum case for HPKE.KDF.HKDF_SHA256(_:), v273);
      (*(void (**)(char *, void, void *))(v276 + 104))(v275, enum case for HPKE.AEAD.AES_GCM_128(_:), v277);
      uint64_t v191 = v280;
      HPKE.Ciphersuite.init(kem:kdf:aead:)();
      (*(void (**)(char *, char *, uint64_t))(v283 + 16))(v267, v285, v284);
      (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v271, v191, v282);
      sub_1000065D0(v297, v298);
      HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
      uint64_t v301 = (char *)v169;
      unint64_t v302 = v294;
      long long v296 = v248;
      sub_1000DF2B0();
      uint64_t v192 = HPKE.Sender.seal<A, B>(_:authenticating:)();
      unint64_t v290 = v193;
      uint64_t v291 = v192;
      uint64_t v289 = *v241;
      uint64_t v194 = swift_allocObject();
      *(_OWORD *)(v194 + 16) = xmmword_100189E80;
      os_log_type_t v195 = (uint64_t *)v293;
      *(void *)(v194 + 32) = TLV.__allocating_init(tag:string:)(*(void *)v293);
      uint64_t v196 = v243;
      uint64_t v197 = (uint64_t)v288;
      sub_1000065D0(v243, (unint64_t)v288);
      uint64_t v198 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v194 + 40) = TLV.__allocating_init(tag:value:)(v198, v196, v197);
      uint64_t v199 = *v195;
      swift_bridgeObjectRetain();
      *(void *)(v194 + 48) = TLV.__allocating_init(tag:string:)(v199);
      uint64_t v201 = v290;
      uint64_t v200 = v291;
      sub_1000065D0(v291, v290);
      uint64_t v202 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v194 + 56) = TLV.__allocating_init(tag:value:)(v202, v200, v201);
      uint64_t v203 = HPKE.Sender.encapsulatedKey.getter();
      uint64_t v205 = v204;
      uint64_t v206 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v194 + 64) = TLV.__allocating_init(tag:value:)(v206, v203, v205);
      uint64_t v301 = (char *)v194;
      specialized Array._endMutation()();
      os_log_t v207 = TLV.__allocating_init(tag:children:)(v289, (uint64_t)v301);
      double v208 = *(uint64_t (**)(void))(*v207 + 168);
      uint64_t v277 = v207;
      uint64_t v209 = v208();
      unint64_t v211 = v210;
      sub_1000065D0(v209, v210);
      uint64_t v289 = v209;
      unint64_t v293 = v211;
      sub_1000065D0(v209, v211);
      double v212 = Logger.logObject.getter();
      LODWORD(v276) = static os_log_type_t.debug.getter();
      os_log_t v278 = v212;
      if (os_log_type_enabled(v212, (os_log_type_t)v276))
      {
        unint64_t v214 = v293 >> 62;
        uint64_t v215 = swift_slowAlloc();
        uint64_t v275 = (char *)swift_slowAlloc();
        uint64_t v301 = v275;
        *(_DWORD *)uint64_t v215 = 134218242;
        uint64_t v216 = 0;
        switch(v214)
        {
          case 1uLL:
            LODWORD(v216) = HIDWORD(v289) - v289;
            if (__OFSUB__(HIDWORD(v289), v289)) {
              goto LABEL_77;
            }
            uint64_t v216 = (int)v216;
LABEL_72:
            *(void *)&long long v296 = v216;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v215 + 12) = 2080;
            v274 = (char *)(v215 + 14);
            uint64_t v221 = v289;
            unint64_t v222 = v293;
            Swift::String v223 = Data.hexString()();
            *(void *)&long long v296 = sub_100005EB8(v223._countAndFlagsBits, (unint64_t)v223._object, (uint64_t *)&v301);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100006628(v221, v222);
            sub_100006628(v221, v222);
            os_log_t v224 = v278;
            _os_log_impl((void *)&_mh_execute_header, v278, (os_log_type_t)v276, "storeAndForwardSessionResultsData[%ld]=%s", (uint8_t *)v215, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            break;
          case 2uLL:
            uint64_t v220 = *(void *)(v289 + 16);
            uint64_t v219 = *(void *)(v289 + 24);
            BOOL v172 = __OFSUB__(v219, v220);
            uint64_t v216 = v219 - v220;
            if (!v172) {
              goto LABEL_72;
            }
            goto LABEL_78;
          case 3uLL:
            goto LABEL_72;
          default:
            uint64_t v216 = BYTE6(v293);
            goto LABEL_72;
        }
      }
      else
      {
        uint64_t v217 = v289;
        unint64_t v218 = v293;
        sub_100006628(v289, v293);
        sub_100006628(v217, v218);
      }
      uint64_t v225 = v286 + 29;
      uint64_t v226 = v286[32];
      uint64_t v286 = (void *)v286[33];
      sub_100006788(v225, v226);
      sub_100003EB0(&qword_1001D9B20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10018A620;
      *(void *)(inited + 32) = 0x496E6F6973736573;
      *(void *)(inited + 40) = 0xE900000000000064;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 80) = &protocol witness table for String;
      *(void *)(inited + 48) = v242;
      unint64_t v228 = v258;
      *(void *)(inited + 56) = v257;
      *(void *)(inited + 88) = 6572397;
      *(void *)(inited + 96) = 0xE300000000000000;
      *(void *)(inited + 128) = &type metadata for String;
      *(void *)(inited + 136) = &protocol witness table for String;
      *(void *)(inited + 104) = v292;
      *(void *)(inited + 112) = v228;
      *(void *)(inited + 144) = 0x4972656E74726170;
      *(void *)(inited + 152) = 0xE900000000000064;
      *(void *)(inited + 184) = &type metadata for String;
      *(void *)(inited + 192) = &protocol witness table for String;
      unint64_t v229 = v249;
      *(void *)(inited + 160) = v240;
      *(void *)(inited + 168) = v229;
      *(void *)(inited + 200) = 0xD000000000000011;
      *(void *)(inited + 208) = 0x800000010019B7C0;
      *(void *)(inited + 240) = &type metadata for String;
      *(void *)(inited + 248) = &protocol witness table for String;
      unint64_t v230 = v254;
      *(void *)(inited + 216) = v264;
      *(void *)(inited + 224) = v230;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v231 = sub_100104AF4(inited);
      sub_100136224(37, v231, v226, (uint64_t)v286);
      swift_bridgeObjectRelease();
      uint64_t v232 = v289;
      unint64_t v233 = v293;
      uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
      sub_10000BF70(v261, v262);
      sub_10000BF70(v259, v260);
      sub_10000BF70(v255, v256);
      sub_10000BF70(v253, v252);
      swift_release();
      sub_100006628(v169, v294);
      swift_release();
      sub_100006628(v246, v247);
      sub_10000BF70(v250, v251);
      sub_100006628(v232, v233);
      sub_100006628(v291, v290);
      sub_100006628(v243, (unint64_t)v288);
      swift_release();
      (*(void (**)(char *, uint64_t))(v265 + 8))(v279, v266);
      (*(void (**)(char *, uint64_t))(v281 + 8))(v280, v282);
      sub_100006628(v297, v298);
      (*(void (**)(char *, uint64_t))(v283 + 8))(v285, v284);
      sub_100006628(v245, v235);
      sub_100006628(v303, *((unint64_t *)&v303 + 1));
      return countAndFlagsBits;
    case 2uLL:
      uint64_t v171 = *(void *)(v164 + 16);
      uint64_t v170 = *(void *)(v164 + 24);
      BOOL v172 = __OFSUB__(v170, v171);
      uint64_t v168 = v170 - v171;
      if (!v172) {
        goto LABEL_57;
      }
      goto LABEL_75;
    case 3uLL:
      goto LABEL_57;
    default:
      uint64_t v168 = BYTE6(v166);
      goto LABEL_57;
  }
}

uint64_t sub_100120A5C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  id v12 = [v11 transactionDataDigest];
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  switch(v15 >> 62)
  {
    case 1uLL:
      unint64_t v49 = a4;
      sub_100006628(v13, v15);
      if ((int)v13 != v13 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_13;
    case 2uLL:
      unint64_t v49 = a4;
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = *(void *)(v13 + 24);
      sub_100006628(v13, v15);
      if (v16 != v17) {
        goto LABEL_7;
      }
      goto LABEL_13;
    case 3uLL:
      sub_100006628(v13, v15);
      goto LABEL_13;
    default:
      unint64_t v49 = a4;
      sub_100006628(v13, v15);
      if ((v15 & 0xFF000000000000) == 0)
      {
LABEL_13:
        uint64_t v28 = (void *)0x800000010019B810;
        uint64_t v27 = 0xD00000000000002CLL;
        goto LABEL_14;
      }
LABEL_7:
      id v18 = [v11 transactionId];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      swift_bridgeObjectRelease();
      uint64_t v22 = HIBYTE(v21) & 0xF;
      if ((v21 & 0x2000000000000000) == 0) {
        uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
      }
      if (!v22) {
        goto LABEL_11;
      }
      id v23 = [v11 transactionId];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static String.Encoding.utf8.getter();
      uint64_t v24 = String.data(using:allowLossyConversion:)();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if (v26 >> 60 == 15)
      {
LABEL_11:
        uint64_t v27 = 0xD00000000000002DLL;
        uint64_t v28 = (void *)0x800000010019B7E0;
LABEL_14:
        uint64_t v29 = sub_10002A544(4000, v27, v28, 0);
        uint64_t result = swift_willThrow();
        *uint64_t v51 = v29;
        return result;
      }
      sub_100003EB0((uint64_t *)&unk_1001DA5A0);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_100189A10;
      type metadata accessor for TLV();
      uint64_t v32 = *(void *)TLVTag.asn1IA5String.unsafeMutableAddressor();
      id v33 = [v11 transactionId];
      uint64_t v51 = (void *)v24;
      id v34 = v33;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)(v31 + 32) = TLV.__allocating_init(tag:string:)(v32);
      id v35 = [v11 transactionDataDigest];
      uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      uint64_t v39 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v31 + 40) = TLV.__allocating_init(tag:value:)(v39, v36, v38);
      uint64_t v52 = v31;
      specialized Array._endMutation()();
      uint64_t v40 = v52;
      uint64_t v41 = (uint64_t)v51;
      Data.append(_:)();
      id v42 = [v11 transactionDataDigest];
      uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;

      Data.append(_:)();
      sub_100006628(v43, v45);
      os_log_type_t v46 = (uint64_t *)TLVTag.asn1Sequence.unsafeMutableAddressor();
      uint64_t v47 = TLV.__allocating_init(tag:children:)(*v46, v40);
      uint64_t result = sub_10000BF70(v41, v26);
      *unint64_t v49 = v47;
      return result;
  }
}

uint64_t sub_100120E74(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  uint64_t v143 = a7;
  uint64_t v147 = a5;
  unint64_t v149 = a4;
  uint64_t v148 = a3;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v142 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v145 = type metadata accessor for String.Encoding();
  unint64_t v146 = *(void *)(v145 - 8);
  __chkstk_darwin(v145, v18);
  uint64_t v144 = (uint64_t)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v141 = sub_100003E78(v14, (uint64_t)qword_1001DE9E0);
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    unint64_t v140 = v8;
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "validateStoreAndForwardResultsToken(_:sessionId:activationId:trxCount:)", v22, 2u);
    unint64_t v9 = v140;
    swift_slowDealloc();
  }

  sub_100006788(v10 + 13, v10[16]);
  OS_dispatch_queue.sync<A>(execute:)();
  if (v9)
  {
    unint64_t v152 = 0;
    uint64_t v153 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v152 = 0xD000000000000020;
    uint64_t v153 = (void *)0x800000010019B660;
    swift_getErrorValue();
    v23._uint64_t countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    sub_10002A544(4055, v152, v153, 0);
    swift_willThrow();
    return swift_errorRelease();
  }
  uint64_t v25 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v25 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v25) {
    goto LABEL_20;
  }
  uint64_t v26 = HIBYTE(v149) & 0xF;
  if ((v149 & 0x2000000000000000) == 0) {
    uint64_t v26 = v148 & 0xFFFFFFFFFFFFLL;
  }
  if (!v26) {
    goto LABEL_20;
  }
  uint64_t v27 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0) {
    uint64_t v27 = v147 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27)
  {
LABEL_20:
    uint64_t v38 = 0xD00000000000001CLL;
    uint64_t v39 = "An input parameter was empty";
    goto LABEL_21;
  }
  uint64_t v137 = v15;
  uint64_t v135 = 0;
  unint64_t v139 = a6;
  uint64_t v136 = a2;
  String.uppercased()();
  uint64_t v28 = v144;
  static String.Encoding.utf8.getter();
  uint64_t v29 = String.data(using:allowLossyConversion:)();
  unint64_t v31 = v30;
  swift_bridgeObjectRelease();
  unint64_t v32 = v146 + 8;
  id v33 = *(void (**)(uint64_t, unint64_t))(v146 + 8);
  v33(v28, v145);
  unint64_t v140 = v31;
  if (v31 >> 60 == 15)
  {
LABEL_19:
    uint64_t v38 = 0xD000000000000025;
    uint64_t v39 = "sessionId or activationId is not utf8";
LABEL_21:
    sub_10002A544(4000, v38, (void *)((unint64_t)(v39 - 32) | 0x8000000000000000), 0);
    swift_willThrow();
LABEL_22:
    uint64_t v40 = v10 + 29;
    uint64_t v42 = v10[32];
    uint64_t v41 = v10[33];
    sub_100006788(v40, v42);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(void *)(inited + 32) = 0xD000000000000010;
    *(void *)(inited + 40) = 0x8000000100196A80;
    swift_getErrorValue();
    uint64_t v44 = Error.localizedDescription.getter();
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = &protocol witness table for String;
    *(void *)(inited + 48) = v44;
    *(void *)(inited + 56) = v45;
    unint64_t v46 = sub_100104AF4(inited);
    sub_100136224(40, v46, v42, v41);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  uint64_t v129 = v10 + 13;
  uint64_t v138 = v29;
  String.uppercased()();
  unint64_t v34 = v32;
  static String.Encoding.utf8.getter();
  uint64_t v134 = String.data(using:allowLossyConversion:)();
  unint64_t v36 = v35;
  unint64_t v37 = v145;
  swift_bridgeObjectRelease();
  unint64_t v146 = v34;
  v33(v28, v37);
  if (v36 >> 60 == 15)
  {
    sub_10000BF70(v138, v140);
    goto LABEL_19;
  }
  if (v143 < 0)
  {
    sub_10002A544(4000, 0xD00000000000001BLL, (void *)0x800000010019B6C0, 0);
    swift_willThrow();
    sub_10000BF70(v138, v140);
    sub_10000BF70(v134, v36);
    goto LABEL_22;
  }
  unint64_t v133 = v36;
  uint64_t v47 = v144;
  static String.Encoding.utf8.getter();
  uint64_t v48 = String.data(using:allowLossyConversion:)();
  unint64_t v49 = v37;
  uint64_t v50 = v48;
  unint64_t v52 = v51;
  v33(v47, v49);
  if (v52 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v130 = v33;
  uint64_t v131 = v50;
  unint64_t v132 = (void *)v52;
  uint64_t v53 = v10[54];
  char v126 = v10 + 51;
  id v54 = [*(*sub_100006788(v10 + 51, v53) + 16) serialNumber];
  if (!v54)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v55 = v54;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.uppercased()();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v56 = String.data(using:allowLossyConversion:)();
  unint64_t v58 = v57;
  swift_bridgeObjectRelease();
  v130(v47, v145);
  if (v58 >> 60 == 15)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v152 = bswap64(v143);
  uint64_t v59 = (void (*)(uint64_t, unint64_t))sub_100115354((uint64_t)&v152, (uint64_t)&v153);
  unint64_t v146 = v60;
  uint64_t v150 = v131;
  uint64_t v151 = v132;
  sub_100038D8C(v131, (unint64_t)v132);
  sub_100038D8C(v56, v58);
  sub_100147328(v56, v58);
  sub_10000BF70(v56, v58);
  unint64_t v145 = v58;
  uint64_t v144 = v56;
  uint64_t v61 = v150;
  unint64_t v62 = (unint64_t)v151;
  unint64_t v152 = v150;
  uint64_t v153 = v151;
  sub_1000065D0(v150, (unint64_t)v151);
  uint64_t v63 = v138;
  unint64_t v64 = v140;
  sub_100038D8C(v138, v140);
  sub_100147328(v63, v64);
  sub_10000BF70(v63, v64);
  sub_100006628(v61, v62);
  uint64_t v65 = v152;
  unint64_t v66 = (unint64_t)v153;
  uint64_t v150 = v152;
  uint64_t v151 = v153;
  sub_1000065D0(v152, (unint64_t)v153);
  uint64_t v67 = v134;
  unint64_t v68 = v133;
  sub_100038D8C(v134, v133);
  sub_100147328(v67, v68);
  sub_10000BF70(v67, v68);
  sub_100006628(v65, v66);
  uint64_t v69 = v150;
  unint64_t v70 = (unint64_t)v151;
  unint64_t v152 = v150;
  uint64_t v153 = v151;
  sub_1000065D0(v150, (unint64_t)v151);
  unint64_t v130 = v59;
  unint64_t v71 = v146;
  sub_1000065D0((uint64_t)v59, v146);
  sub_100147328((uint64_t)v59, v71);
  sub_100006628((uint64_t)v59, v71);
  unint64_t v72 = (unint64_t)v132;
  sub_100006628(v69, v70);
  unint64_t v127 = v152;
  unint64_t v128 = (unint64_t)v153;
  (*(void (**)(char *, uint64_t, uint64_t))(v137 + 16))(v142, v141, v14);
  uint64_t v73 = v131;
  sub_100038D8C(v131, v72);
  sub_100038D8C(v144, v145);
  uint64_t v74 = v138;
  sub_100038D8C(v138, v140);
  sub_100038D8C(v67, v133);
  sub_1000065D0((uint64_t)v130, v146);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000065D0(v127, v128);
  uint64_t v75 = v73;
  unint64_t v76 = v140;
  sub_100038D8C(v75, v72);
  sub_100038D8C(v144, v145);
  sub_100038D8C(v74, v76);
  sub_100038D8C(v67, v133);
  sub_1000065D0((uint64_t)v130, v146);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000065D0(v127, v128);
  unint64_t v77 = Logger.logObject.getter();
  LODWORD(v141) = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v77, (os_log_type_t)v141))
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    uint64_t v104 = v131;
    unint64_t v105 = (unint64_t)v132;
    sub_10000BF70(v131, (unint64_t)v132);
    sub_10000BF70(v104, v105);
    uint64_t v106 = v144;
    unint64_t v107 = v145;
    sub_10000BF70(v144, v145);
    sub_10000BF70(v106, v107);
    uint64_t v108 = v138;
    sub_10000BF70(v138, v76);
    sub_10000BF70(v108, v76);
    uint64_t v109 = v134;
    unint64_t v110 = v133;
    sub_10000BF70(v134, v133);
    sub_10000BF70(v109, v110);
    os_signpost_id_t v111 = v130;
    unint64_t v112 = v146;
    sub_100006628((uint64_t)v130, v146);
    sub_100006628((uint64_t)v111, v112);
    uint64_t v102 = v127;
    unint64_t v113 = v128;
    sub_100006628(v127, v128);
    sub_100006628(v102, v113);

    (*(void (**)(char *, uint64_t))(v137 + 8))(v142, v14);
    unint64_t v100 = v113;
    goto LABEL_32;
  }
  os_log_t v123 = v77;
  uint64_t v124 = v14;
  uint64_t v125 = a1;
  uint64_t v78 = swift_slowAlloc();
  uint64_t v122 = swift_slowAlloc();
  unint64_t v152 = v122;
  *(_DWORD *)uint64_t v78 = 136317442;
  id v79 = [*(id *)(*sub_100006788(v126, v10[54]) + 16) serialNumber];
  if (!v79)
  {
LABEL_38:
    sub_100006628(v127, v128);
    sub_100006628((uint64_t)v130, v146);
    sub_10000BF70(v134, v133);
    sub_10000BF70(v138, v140);
    sub_10000BF70(v144, v145);
    sub_10000BF70(v131, (unint64_t)v132);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  unint64_t v80 = v79;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v81 = String.uppercased()();
  swift_bridgeObjectRelease();
  uint64_t v150 = sub_100005EB8(v81._countAndFlagsBits, (unint64_t)v81._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v78 + 12) = 2080;
  Swift::String v82 = String.uppercased()();
  uint64_t v150 = sub_100005EB8(v82._countAndFlagsBits, (unint64_t)v82._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v78 + 22) = 2080;
  Swift::String v83 = String.uppercased()();
  uint64_t v150 = sub_100005EB8(v83._countAndFlagsBits, (unint64_t)v83._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v78 + 32) = 2048;
  uint64_t v150 = v143;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v78 + 42) = 2080;
  uint64_t v84 = v131;
  unint64_t v85 = (unint64_t)v132;
  Swift::String v86 = Data.hexString()();
  uint64_t v150 = sub_100005EB8(v86._countAndFlagsBits, (unint64_t)v86._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10000BF70(v84, v85);
  sub_10000BF70(v84, v85);
  *(_WORD *)(v78 + 52) = 2080;
  uint64_t v87 = v144;
  unint64_t v88 = v145;
  Swift::String v89 = Data.hexString()();
  uint64_t v150 = sub_100005EB8(v89._countAndFlagsBits, (unint64_t)v89._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10000BF70(v87, v88);
  sub_10000BF70(v87, v88);
  *(_WORD *)(v78 + 62) = 2080;
  uint64_t v90 = v138;
  unint64_t v91 = v140;
  Swift::String v92 = Data.hexString()();
  uint64_t v150 = sub_100005EB8(v92._countAndFlagsBits, (unint64_t)v92._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10000BF70(v90, v91);
  sub_10000BF70(v90, v91);
  *(_WORD *)(v78 + 72) = 2080;
  uint64_t v93 = v134;
  unint64_t v94 = v133;
  Swift::String v95 = Data.hexString()();
  uint64_t v150 = sub_100005EB8(v95._countAndFlagsBits, (unint64_t)v95._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10000BF70(v93, v94);
  sub_10000BF70(v93, v94);
  *(_WORD *)(v78 + 82) = 2080;
  unint64_t v96 = v130;
  unint64_t v97 = v146;
  Swift::String v98 = Data.hexString()();
  uint64_t v150 = sub_100005EB8(v98._countAndFlagsBits, (unint64_t)v98._object, (uint64_t *)&v152);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100006628((uint64_t)v96, v97);
  sub_100006628((uint64_t)v96, v97);
  *(_WORD *)(v78 + 92) = 2080;
  uint64_t v99 = v127;
  unint64_t v100 = v128;
  Swift::String v101 = Data.hexString()();
  uint64_t v150 = sub_100005EB8(v101._countAndFlagsBits, (unint64_t)v101._object, (uint64_t *)&v152);
  uint64_t v102 = v99;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100006628(v99, v100);
  sub_100006628(v99, v100);
  os_log_t v103 = v123;
  _os_log_impl((void *)&_mh_execute_header, v123, (os_log_type_t)v141, "seid: %s, sessionId: %s, activationId: %s, trxCount: %ld\nprefixData: %s, seidData: %s, sessionIdData: %s, activationIdData: %s, trxCountData: %s\nsignedData: %s", (uint8_t *)v78, 0x66u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v137 + 8))(v142, v124);
  a1 = v125;
LABEL_32:
  uint64_t v114 = v135;
  id v115 = sub_100006788(v129, v10[16]);
  __chkstk_darwin(v115, v116);
  *((_OWORD *)&v121 - 4) = xmmword_10018D880;
  *(&v121 - 6) = 0xEE006E6F69746164;
  *(&v121 - 5) = a1;
  *(&v121 - 4) = v136;
  *(&v121 - 3) = v102;
  *(&v121 - 2) = v100;
  *(&v121 - 1) = v117;
  OS_dispatch_queue.sync<A>(execute:)();
  if (v114)
  {
    sub_100006628(v102, v100);
    sub_100006628((uint64_t)v130, v146);
    sub_10000BF70(v144, v145);
    sub_10000BF70(v131, (unint64_t)v132);
    sub_10000BF70(v134, v133);
    sub_10000BF70(v138, v140);
    goto LABEL_22;
  }
  uint64_t v118 = v10 + 29;
  uint64_t v120 = v10[32];
  uint64_t v119 = v10[33];
  sub_100006788(v118, v120);
  sub_1001362E4(39, v120, v119);
  sub_100006628(v102, v100);
  sub_100006628((uint64_t)v130, v146);
  sub_10000BF70(v144, v145);
  sub_10000BF70(v131, (unint64_t)v132);
  sub_10000BF70(v134, v133);
  return sub_10000BF70(v138, v140);
}

uint64_t sub_10012220C(uint64_t a1, uint64_t a2)
{
  v417 = v3;
  v418 = (void *)__chkstk_darwin(a1, a2);
  v425 = v2;
  unint64_t v421 = v4;
  uint64_t v414 = v5;
  unint64_t v419 = v6;
  uint64_t v7 = type metadata accessor for HPKE.Sender();
  uint64_t v389 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v403 = (char *)&v366 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for HPKE.AEAD();
  unint64_t v401 = *(void *)(v10 - 8);
  uint64_t v402 = v10;
  __chkstk_darwin(v10, v11);
  v400 = (char *)&v366 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for HPKE.KDF();
  uint64_t v397 = *(void *)(v13 - 8);
  uint64_t v398 = v13;
  __chkstk_darwin(v13, v14);
  v399 = (char *)&v366 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for HPKE.KEM();
  uint64_t v393 = *(void *)(v16 - 8);
  uint64_t v394 = v16;
  __chkstk_darwin(v16, v17);
  v395 = (char *)&v366 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for HPKE.Ciphersuite();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  v396 = (char *)&v366 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  *(void *)&long long v406 = (char *)&v366 - v25;
  uint64_t v407 = type metadata accessor for P256.KeyAgreement.PublicKey();
  unint64_t v26 = *(void *)(v407 - 8);
  uint64_t v28 = __chkstk_darwin(v407, v27);
  v392 = (char *)&v366 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  unint64_t v32 = (char *)&v366 - v31;
  uint64_t v412 = type metadata accessor for String.Encoding();
  unint64_t v415 = *(void *)(v412 - 8);
  __chkstk_darwin(v412, v33);
  v413 = (char *)&v366 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v424 = type metadata accessor for OSSignpostID();
  uint64_t v35 = *(void *)(v424 - 8);
  uint64_t v37 = __chkstk_darwin(v424, v36);
  uint64_t v39 = (char *)&v366 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v40);
  uint64_t v42 = (char *)&v366 - v41;
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v404 = v20;
  uint64_t v405 = v19;
  unint64_t v408 = v26;
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v391 = sub_100003E78(v43, (uint64_t)qword_1001DE9E0);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "generateSecureReaderBlob(trxBlob:pinBlob:)", v46, 2u);
    swift_slowDealloc();
  }

  if (qword_1001D92F0 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for OSSignposter();
  sub_100003E78(v47, (uint64_t)qword_1001DE9F8);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v48 = OSSignposter.logHandle.getter();
  os_signpost_type_t v49 = static os_signpost_type_t.begin.getter();
  char v50 = OS_os_log.signpostsEnabled.getter();
  uint64_t v422 = v35;
  v423 = v42;
  v409 = v32;
  uint64_t v390 = v7;
  if (v50)
  {
    unint64_t v51 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
    unint64_t v52 = v42;
    uint64_t v53 = v424;
    v51(v39, v52, v424);
    id v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v54 = 0;
    os_signpost_id_t v55 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v48, v49, v55, "reader-getSecureBlob", "begin generateSecureReaderBlob", v54, 2u);
    uint64_t v56 = v425;
    swift_slowDealloc();

    uint64_t v57 = v53;
    uint64_t v42 = v423;
    (*(void (**)(char *, uint64_t))(v422 + 8))(v39, v57);
  }
  else
  {

    unint64_t v51 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
    uint64_t v57 = v424;
    uint64_t v56 = v425;
  }
  v51(v39, v42, v57);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v416 = OSSignpostIntervalState.init(id:isOpen:)();
  unint64_t v58 = v56[34];
  uint64_t v59 = *(void *)(v58 + 56);
  unint64_t v60 = (os_unfair_lock_s *)(v59 + 32);
  uint64_t v61 = (uint64_t *)(v59 + 16);
  v442[0] = 12;
  __chkstk_darwin(v416, v62);
  uint64_t v63 = &v366 - 4;
  v364 = v442;
  os_unfair_lock_lock(v60);
  unint64_t v64 = v417;
  sub_100132008(v61);
  if (v64)
  {
LABEL_117:
    os_unfair_lock_unlock(v60);
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100130B24((uint64_t)v442, sub_1001304EC);
    __break(1u);
    goto LABEL_121;
  }
  os_unfair_lock_unlock(v60);
  uint64_t v67 = 1;
  unint64_t v420 = v58;
  unint64_t v68 = *(os_unfair_lock_s **)(v58 + 56);
  uint64_t v69 = v68 + 8;
  uint64_t v70 = (uint64_t)&v68[4];
  unint64_t v71 = &byte_1001C60A8;
  do
  {
    char v72 = *v71++;
    v442[0] = v72;
    __chkstk_darwin(v65, v66);
    v364 = v442;
    os_unfair_lock_lock(v69);
    sub_100130494(v70);
    os_unfair_lock_unlock(v69);
    --v67;
  }
  while (v67);
  unint64_t v73 = v421 >> 60;
  *(unsigned char *)(v420 + 130) = v421 >> 60 != 15;
  sub_10012DA98((uint64_t)v418, v419, v443);
  unint64_t v384 = 0;
  memcpy(v454, v443, sizeof(v454));
  uint64_t v77 = *((void *)&v454[16] + 1);
  v380 = *(void **)&v454[16];
  uint64_t v78 = v443[36];
  uint64_t v79 = v443[37];
  uint64_t v80 = v443[38];
  LODWORD(v381) = v445[16];
  v387 = (void *)v443[42];
  *(void *)&long long v388 = v443[43];
  v411 = (void *)v443[46];
  v418 = (void *)v443[47];
  unint64_t v419 = v443[39];
  v386 = (void *)v443[40];
  unint64_t v81 = v443[41];
  sub_100029CEC((uint64_t)v445, (uint64_t)v453, &qword_1001DA138);
  v417 = (void *)v443[35];
  uint64_t v410 = v79;
  uint64_t v382 = v78;
  v383 = (uint64_t *)v443[45];
  uint64_t v375 = v443[44];
  uint64_t v376 = v443[34];
  *(void *)&long long v385 = v77;
  if (v73 >= 0xF)
  {
    sub_1001304B4(v441);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v378 = (long long *)v80;
    sub_1000065D0(v80, v419);
    swift_bridgeObjectRetain();
    Swift::String v92 = v387;
    uint64_t v91 = v388;
    sub_1000065D0((uint64_t)v387, v388);
    sub_1000065D0((uint64_t)v411, (unint64_t)v418);
    uint64_t v93 = (uint64_t)v386;
    sub_1000065D0((uint64_t)v386, v81);
    sub_10002A408((uint64_t)v453);
    swift_bridgeObjectRetain();
    sub_100029CEC((uint64_t)v441, (uint64_t)v442, &qword_1001DEBE0);
    unint64_t v94 = v425;
    uint64_t v95 = v81;
    goto LABEL_19;
  }
  v429[1] = v454[0];
  v429[2] = v454[1];
  uint64_t v379 = *((void *)&v454[2] + 1);
  unint64_t v373 = *(void *)&v454[2];
  long long v430 = v454[1];
  long long v431 = v454[0];
  v455[3] = v454[6];
  v455[2] = v454[5];
  v455[1] = v454[4];
  v455[0] = v454[3];
  long long v458 = v454[10];
  long long v457 = v454[9];
  long long v456 = v454[8];
  v455[4] = v454[7];
  long long v462 = v454[14];
  long long v461 = v454[13];
  long long v460 = v454[12];
  long long v459 = v454[11];
  unint64_t v377 = v81;
  v378 = &v462;
  v374 = &v461;
  long long v428 = v454[4];
  v429[0] = v454[3];
  long long v427 = v454[5];
  unint64_t v82 = v419;
  sub_100029CEC((uint64_t)&v456, (uint64_t)v469, &qword_1001DA138);
  sub_100029CEC((uint64_t)&v457, (uint64_t)v468, &qword_1001DA138);
  sub_100029CEC((uint64_t)&v458, (uint64_t)v467, &qword_1001DA138);
  sub_100029CEC((uint64_t)&v459, (uint64_t)v466, &qword_1001DA138);
  sub_100029CEC((uint64_t)&v460, (uint64_t)v465, &qword_1001DA138);
  sub_100029CEC((uint64_t)v374, (uint64_t)v464, &qword_1001DA138);
  sub_100029CEC((uint64_t)v378, (uint64_t)v463, &qword_1001DA138);
  long long v83 = v454[15];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_1000065D0(v80, v82);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v84 = v80;
  swift_bridgeObjectRetain();
  sub_1000065D0(v80, v82);
  unint64_t v85 = v421;
  swift_bridgeObjectRetain();
  sub_10002A408((uint64_t)&v431);
  sub_10002A408((uint64_t)&v430);
  swift_bridgeObjectRetain();
  sub_10002A408((uint64_t)v429);
  sub_10002A408((uint64_t)&v428);
  sub_10002A408((uint64_t)&v427);
  sub_10002A408((uint64_t)v469);
  sub_10002A408((uint64_t)v468);
  sub_10002A408((uint64_t)v467);
  sub_10002A408((uint64_t)v466);
  sub_10002A408((uint64_t)v465);
  sub_10002A408((uint64_t)v464);
  sub_10002A408((uint64_t)v463);
  v374 = (long long *)*((void *)&v83 + 1);
  sub_1000065D0(v83, *((unint64_t *)&v83 + 1));
  sub_1000065D0((uint64_t)v387, v388);
  sub_1000065D0((uint64_t)v411, (unint64_t)v418);
  unint64_t v86 = v377;
  sub_1000065D0((uint64_t)v386, v377);
  sub_10002A408((uint64_t)v453);
  swift_bridgeObjectRetain();
  uint64_t v87 = v414;
  sub_100038D8C(v414, v85);
  unint64_t v88 = v384;
  sub_10012EE10(v87, v85, v446);
  if (v88)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    unint64_t v89 = v419;
    sub_100006628(v84, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002A434((uint64_t)v453);
    sub_100006628((uint64_t)v386, v86);
    sub_100006628((uint64_t)v411, (unint64_t)v418);
    sub_100006628((uint64_t)v387, v388);
    sub_100006628(v84, v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006628(v83, (unint64_t)v374);
    sub_10002A434((uint64_t)v463);
    sub_10002A434((uint64_t)v464);
    sub_10002A434((uint64_t)v465);
    sub_10002A434((uint64_t)v466);
    sub_10002A434((uint64_t)v467);
    sub_10002A434((uint64_t)v468);
    sub_10002A434((uint64_t)v469);
    sub_10002A434((uint64_t)&v427);
    sub_10002A434((uint64_t)&v428);
    sub_10002A434((uint64_t)v429);
    swift_bridgeObjectRelease();
    sub_10002A434((uint64_t)&v430);
    sub_10002A434((uint64_t)&v431);
    *(void *)(v420 + 160) = 4032;
    swift_willThrow();
    sub_100130720(v443);
    sub_10000BF70(v87, v421);
    uint64_t countAndFlagsBits = v416;
    sub_100125D28(v416, (uint64_t)v425);
    swift_release();
    uint64_t v75 = v422;
    unint64_t v76 = v423;
LABEL_79:
    uint64_t v74 = v424;
    goto LABEL_80;
  }
  v378 = (long long *)v84;
  unint64_t v384 = 0;
  memcpy(v441, v446, sizeof(v441));
  unint64_t v132 = *((void *)&v431 + 1);
  unint64_t v133 = v431;
  BitString.init(data:unusedBits:)(v441);
  sub_100130914(v446);
  sub_100068C50((uint64_t)v454);
  swift_bridgeObjectRelease();
  unint64_t v134 = (unint64_t)v374;
  sub_100006628(v83, (unint64_t)v374);
  sub_10002A434((uint64_t)v463);
  sub_10002A434((uint64_t)v464);
  sub_10002A434((uint64_t)v465);
  sub_10002A434((uint64_t)v466);
  sub_10002A434((uint64_t)v467);
  sub_10002A434((uint64_t)v468);
  sub_10002A434((uint64_t)v469);
  sub_10002A434((uint64_t)&v427);
  sub_10002A434((uint64_t)&v428);
  sub_10002A434((uint64_t)v429);
  uint64_t v135 = v379;
  swift_bridgeObjectRelease();
  sub_10002A434((uint64_t)&v430);
  sub_10002A434((uint64_t)&v431);
  memcpy(v451, v446, sizeof(v451));
  long long v136 = v451[1];
  uint64_t v137 = *((void *)&v451[2] + 1);
  *((void *)&v372 + 1) = *(void *)&v451[2];
  uint64_t v138 = (uint64_t)v386;
  if (__PAIR128__(v132, v133) != v451[0] && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || v430 != v136 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_70;
  }
  if (v135)
  {
    if (!v137
      || (v373 != *((void *)&v372 + 1) || v135 != v137) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_70;
    }
  }
  else if (v137)
  {
LABEL_70:
    sub_100062020((uint64_t)v454);
    uint64_t v75 = v422;
    unint64_t v76 = v423;
    goto LABEL_71;
  }
  v452[8] = v451[11];
  v452[9] = v451[12];
  v452[10] = v451[13];
  v452[11] = v451[14];
  v452[4] = v451[7];
  v452[5] = v451[8];
  v452[6] = v451[9];
  v452[7] = v451[10];
  v452[0] = v451[3];
  v452[1] = v451[4];
  v452[2] = v451[5];
  v452[3] = v451[6];
  if (!sub_1000EDF20((uint64_t)v455, (uint64_t)v452)) {
    goto LABEL_70;
  }
  unint64_t v215 = *((void *)&v451[15] + 1);
  uint64_t v214 = *(void *)&v451[15];
  sub_100068C50((uint64_t)v451);
  LOBYTE(v214) = sub_10014C798(v83, v134, v214, v215);
  sub_100062020((uint64_t)v451);
  sub_100062020((uint64_t)v454);
  uint64_t v75 = v422;
  unint64_t v76 = v423;
  if ((v214 & 1) == 0)
  {
LABEL_71:
    sub_100130D64(v446);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v218 = (uint64_t)v378;
    unint64_t v219 = v419;
    sub_100006628((uint64_t)v378, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002A434((uint64_t)v453);
    sub_100006628(v138, v377);
    sub_100006628((uint64_t)v411, (unint64_t)v418);
    sub_100006628((uint64_t)v387, v388);
    sub_100006628(v218, v219);
    swift_bridgeObjectRelease();
    *(void *)(v420 + 160) = 4000;
    uint64_t v220 = 0xD000000000000032;
    uint64_t v221 = "sessionToken from trxBlob and pinBlob not the same";
LABEL_72:
    unint64_t v222 = (void *)((unint64_t)(v221 - 32) | 0x8000000000000000);
LABEL_73:
    sub_10002A544(4000, v220, v222, 0);
    swift_willThrow();
    sub_100130D64(v446);
    sub_100130720(v443);
    sub_10000BF70(v414, v421);
    uint64_t countAndFlagsBits = v416;
    sub_100125D28(v416, (uint64_t)v425);
    swift_release();
    goto LABEL_79;
  }
  unint64_t v216 = v419;
  if (v382 == v446[34] && v410 == v446[35])
  {
    swift_bridgeObjectRelease();
    uint64_t v217 = v418;
  }
  else
  {
    char v252 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v217 = v418;
    if ((v252 & 1) == 0)
    {
      sub_100130D64(v446);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v271 = (uint64_t)v378;
      sub_100006628((uint64_t)v378, v216);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002A434((uint64_t)v453);
      sub_100006628(v138, v377);
      sub_100006628((uint64_t)v411, (unint64_t)v217);
      sub_100006628((uint64_t)v387, v388);
      sub_100006628(v271, v216);
      *(void *)(v420 + 160) = 4000;
      unint64_t v222 = (void *)0x800000010019B2B0;
      uint64_t v220 = 0xD000000000000033;
      goto LABEL_73;
    }
  }
  if (v446[43])
  {
    unint64_t v367 = v446[37];
    uint64_t v368 = v446[36];
    uint64_t v253 = v446[38];
    unint64_t v254 = v446[39];
    unint64_t v255 = v446[40];
    unint64_t v256 = v446[41];
    v371 = (void (*)(char *, uint64_t))v446[42];
    *(void *)&long long v372 = v446[43];
    uint64_t v257 = v446[44];
    unint64_t v258 = v446[45];
    sub_1000065D0(v446[36], v446[37]);
    uint64_t v379 = v253;
    v374 = (long long *)v254;
    sub_1000065D0(v253, v254);
    *((void *)&v372 + 1) = v256;
    unint64_t v373 = v255;
    uint64_t v259 = v255;
    unint64_t v260 = v367;
    uint64_t v261 = v368;
    unint64_t v262 = v256;
    uint64_t v263 = v372;
    sub_1000065D0(v259, v262);
    swift_bridgeObjectRetain();
    unint64_t v369 = v258;
    uint64_t v370 = v257;
    sub_1000065D0(v257, v258);
    uint64_t v264 = (uint64_t)v378;
    unint64_t v265 = v419;
    unint64_t v266 = v260;
    LOBYTE(v260) = sub_10014C798((uint64_t)v378, v419, v261, v260);
    sub_100006628(v264, v265);
    sub_100130D64(v446);
    if ((v260 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_100006628(v264, v265);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002A434((uint64_t)v453);
      sub_100006628(v138, v377);
      sub_100006628((uint64_t)v411, (unint64_t)v418);
      sub_100006628((uint64_t)v387, v388);
      *(void *)(v420 + 160) = 4000;
      sub_10002A544(4000, 0xD000000000000035, (void *)0x800000010019B330, 0);
      swift_willThrow();
      sub_100130D64(v446);
      sub_100130720(v443);
      sub_100130690(v261, v266, v379, (unint64_t)v374, v373, *((unint64_t *)&v372 + 1), (uint64_t)v371, v263, v370, v369);
      sub_10000BF70(v414, v421);
LABEL_78:
      uint64_t countAndFlagsBits = v416;
      sub_100125D28(v416, (uint64_t)v425);
      swift_release();
      uint64_t v75 = v422;
      goto LABEL_79;
    }
    sub_100130690(v261, v266, v379, (unint64_t)v374, v373, *((unint64_t *)&v372 + 1), (uint64_t)v371, v263, v370, v369);
  }
  else
  {
    uint64_t v269 = (uint64_t)v378;
    unint64_t v270 = v419;
    sub_100006628((uint64_t)v378, v419);
    sub_100130D64(v446);
    if ((v381 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_100006628(v269, v270);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002A434((uint64_t)v453);
      sub_100006628(v138, v377);
      sub_100006628((uint64_t)v411, (unint64_t)v217);
      sub_100006628((uint64_t)v387, v388);
      uint64_t v220 = 0xD00000000000003FLL;
      uint64_t v221 = "trxBlob: isPINBypassEnabled false but pinBlob: isPinBypass true";
      goto LABEL_72;
    }
  }
  sub_10000BF70(v414, v421);
  sub_100029CEC((uint64_t)v441, (uint64_t)v442, &qword_1001DEBE0);
  unint64_t v94 = v425;
  Swift::String v92 = v387;
  uint64_t v91 = v388;
  uint64_t v93 = v138;
  uint64_t v95 = v377;
LABEL_19:
  uint64_t v97 = v94[27];
  uint64_t v96 = v94[28];
  sub_100006788(v94 + 24, v97);
  (*(void (**)(uint64_t))(*(void *)(v96 + 8) + 24))(v97);
  uint64_t v379 = Double.description.getter();
  unint64_t v377 = v98;
  uint64_t v99 = type metadata accessor for TLV();
  v387 = TLVTag.asn1Sequence.unsafeMutableAddressor();
  unint64_t v100 = (void *)*v387;
  uint64_t v414 = sub_100003EB0((uint64_t *)&unk_1001DA5A0);
  uint64_t v101 = swift_allocObject();
  long long v388 = xmmword_100189F90;
  *(_OWORD *)(v101 + 16) = xmmword_100189F90;
  uint64_t v102 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
  *(void *)(v101 + 32) = TLV.__allocating_init(tag:value:)(v102, (uint64_t)v92, v91);
  uint64_t v103 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
  *(void *)(v101 + 40) = TLV.__allocating_init(tag:value:)(v103, (uint64_t)v411, (uint64_t)v418);
  uint64_t v104 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
  *(void *)(v101 + 48) = TLV.__allocating_init(tag:value:)(v104, v93, v95);
  uint64_t v432 = v101;
  specialized Array._endMutation()();
  unint64_t v105 = TLV.__allocating_init(tag:children:)((uint64_t)v100, v432);
  sub_100029CEC((uint64_t)v442, (uint64_t)v441, &qword_1001DEBE0);
  int v106 = sub_100029A28((uint64_t)v441);
  unint64_t v107 = 0;
  v418 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  v386 = v105;
  unint64_t v421 = v99;
  unint64_t v60 = (os_unfair_lock_s *)v385;
  if (v106 != 1)
  {
    uint64_t v110 = *((void *)&v441[21] + 1);
    if (*((void *)&v441[21] + 1))
    {
      unint64_t v111 = *((void *)&v441[22] + 1);
      unint64_t v373 = *((void *)&v441[22] + 1);
      uint64_t v112 = *(void *)&v441[22];
      v374 = *(long long **)&v441[21];
      unint64_t v113 = *((void *)&v441[20] + 1);
      v411 = *(void **)&v441[20];
      unint64_t v369 = *((void *)&v441[19] + 1);
      uint64_t v114 = *(void *)&v441[19];
      unint64_t v115 = *((void *)&v441[18] + 1);
      uint64_t v116 = *(void *)&v441[18];
      v371 = (void (*)(char *, uint64_t))*((void *)&v441[20] + 1);
      long long v372 = v441[18];
      v418 = (void *)*v387;
      uint64_t v117 = swift_allocObject();
      *(_OWORD *)(v117 + 16) = v388;
      sub_100130B24((uint64_t)v442, sub_100130BC0);
      unint64_t v365 = v111;
      unint64_t v118 = v115;
      unint64_t v119 = v369;
      uint64_t v120 = v411;
      sub_100130A94(v116, v118, v114, v369, (uint64_t)v411, v113, (uint64_t)v374, v110, v112, v365);
      swift_bridgeObjectRetain();
      sub_1000065D0((uint64_t)v120, v113);
      uint64_t v121 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)&long long v388 = v110;
      *(void *)(v117 + 32) = TLV.__allocating_init(tag:value:)(v121, (uint64_t)v120, v113);
      uint64_t v370 = v112;
      uint64_t v122 = v373;
      sub_1000065D0(v112, v373);
      uint64_t v123 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v117 + 40) = TLV.__allocating_init(tag:value:)(v123, v112, v122);
      sub_1000065D0(v114, v119);
      uint64_t v124 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      uint64_t v125 = v114;
      *(void *)(v117 + 48) = TLV.__allocating_init(tag:value:)(v124, v114, v119);
      uint64_t v432 = v117;
      specialized Array._endMutation()();
      char v126 = TLV.__allocating_init(tag:children:)((uint64_t)v418, v432);
      uint64_t v127 = TLVTag.init(contextSpecific:isConstructed:)(1uLL, 1);
      uint64_t v128 = swift_allocObject();
      *(_OWORD *)(v128 + 16) = xmmword_100189F80;
      *(void *)(v128 + 32) = v126;
      uint64_t v432 = v128;
      specialized Array._endMutation()();
      uint64_t v129 = v432;
      swift_retain();
      unint64_t v60 = (os_unfair_lock_s *)v385;
      unint64_t v105 = v386;
      v418 = TLV.__allocating_init(tag:children:)(v127, v129);
      uint64_t v130 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
      unint64_t v107 = TLV.__allocating_init(tag:BOOLean:)(v130, 0);
      swift_release();
      uint64_t v109 = v388;
      uint64_t v131 = v125;
      uint64_t v108 = (uint64_t)v374;
      sub_100130690(v372, *((unint64_t *)&v372 + 1), v131, v119, (uint64_t)v411, (unint64_t)v371, (uint64_t)v374, v388, v370, v373);
      sub_100130B24((uint64_t)v442, sub_1001304EC);
    }
    else
    {
      sub_100029CEC((uint64_t)v442, (uint64_t)&v432, &qword_1001DEBE0);
      sub_100130914(&v432);
      uint64_t v139 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
      unint64_t v107 = TLV.__allocating_init(tag:BOOLean:)(v139, 1);
      sub_100130B24((uint64_t)v442, sub_1001304EC);
      v418 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = 0;
    }
  }
  v374 = (long long *)v108;
  *(void *)&long long v388 = v109;
  sub_100029CEC((uint64_t)v453, (uint64_t)v470, &qword_1001DA138);
  if (v470[1])
  {
    unint64_t v140 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
    uint64_t v141 = TLV.__allocating_init(tag:string:)(*v140);
    uint64_t v142 = TLVTag.init(contextSpecific:isConstructed:)(3uLL, 1);
    uint64_t v143 = swift_allocObject();
    *(_OWORD *)(v143 + 16) = xmmword_100189F80;
    *(void *)(v143 + 32) = v141;
    uint64_t v432 = v143;
    specialized Array._endMutation()();
    v411 = TLV.__allocating_init(tag:children:)(v142, v432);
  }
  else
  {
    v411 = 0;
  }
  char v144 = v444;
  uint64_t v145 = swift_allocObject();
  *(_OWORD *)(v145 + 16) = xmmword_10018D890;
  unint64_t v146 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
  *(void *)(v145 + 32) = TLV.__allocating_init(tag:string:)(*v146);
  *(void *)(v145 + 40) = TLV.__allocating_init(tag:string:)(*v146);
  *(void *)(v145 + 48) = TLV.__allocating_init(tag:string:)(*v146);
  uint64_t v147 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
  *(void *)(v145 + 56) = TLV.__allocating_init(tag:BOOLean:)(v147, v144);
  uint64_t v148 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
  *(void *)(v145 + 64) = TLV.__allocating_init(tag:value:)(v148, (uint64_t)v378, v419);
  *(void *)(v145 + 72) = v105;
  *(void *)&long long v372 = v146;
  uint64_t v149 = *v146;
  sub_100006788(v425 + 7, v425[10]);
  swift_retain();
  sub_1000D4970(v447);
  sub_100029CEC((uint64_t)v447, (uint64_t)v450, &qword_1001DA130);
  sub_100029CEC((uint64_t)v450, (uint64_t)v471, &qword_1001DA130);
  if (sub_100029A28((uint64_t)v471) != 1) {
    swift_bridgeObjectRetain();
  }
  uint64_t v150 = v418;
  *(void *)(v145 + 80) = TLV.__allocating_init(tag:string:)(v149);
  uint64_t v432 = v145;
  specialized Array._endMutation()();
  uint64_t v426 = v432;
  if (v150)
  {
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v426 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v426 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if ((v381 & 1) == 0)
  {
    v380 = 0;
    if (!v411) {
      goto LABEL_54;
    }
    goto LABEL_51;
  }
  uint64_t v151 = v411;
  if (v107)
  {
    unint64_t v152 = v107;
    uint64_t v153 = v107;
  }
  else
  {
    unint64_t v152 = 0;
    uint64_t v154 = default argument 0 of IteratorProtocol<>.nextBoolean(tag:)();
    uint64_t v153 = TLV.__allocating_init(tag:BOOLean:)(v154, 0);
  }
  swift_retain();
  uint64_t v155 = TLVTag.init(contextSpecific:isConstructed:)(2uLL, 1);
  uint64_t v156 = swift_allocObject();
  *(_OWORD *)(v156 + 16) = xmmword_100189F80;
  *(void *)(v156 + 32) = v153;
  uint64_t v432 = v156;
  specialized Array._endMutation()();
  uint64_t v157 = v432;
  swift_retain();
  unint64_t v158 = TLV.__allocating_init(tag:children:)(v155, v157);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v426 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v426 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  v380 = v158;
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  unint64_t v107 = v152;
  if (v151)
  {
LABEL_51:
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v426 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v426 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
LABEL_54:
  v381 = v107;
  uint64_t v159 = *v387;
  uint64_t v160 = v426;
  swift_bridgeObjectRetain();
  char v161 = TLV.__allocating_init(tag:children:)(v159, v160);
  uint64_t v63 = (uint64_t *)v413;
  static String.Encoding.utf8.getter();
  uint64_t v162 = String.data(using:allowLossyConversion:)();
  unint64_t v164 = v163;
  unint64_t v165 = *(void (**)(char *, uint64_t))(v415 + 8);
  v415 += 8;
  v371 = v165;
  uint64_t v166 = ((uint64_t (*)(uint64_t *, uint64_t))v165)(v63, v412);
  if (v164 >> 60 == 15)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100130B24((uint64_t)v442, sub_1001304EC);
    __break(1u);
    goto LABEL_117;
  }
  uint64_t v167 = (*(uint64_t (**)(uint64_t))(*v161 + 168))(v166);
  unint64_t v169 = v168;
  uint64_t v432 = v162;
  unint64_t v433 = v164;
  sub_1000065D0(v162, v164);
  sub_100147328(v167, v169);
  sub_100006628(v167, v169);
  sub_10000BF70(v162, v164);
  uint64_t v170 = v432;
  unint64_t v171 = v433;
  uint64_t v172 = Data.sha256Digest.getter(v432, v433);
  uint64_t v174 = v173;
  sub_100006628(v170, v171);
  sub_100006788(v425 + 19, v425[22]);
  sub_10013E5B0(201, 0x726564616572, 0xE600000000000000, 4);
  uint64_t v176 = v175;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)&long long v385 = &v366;
  unint64_t v377 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v179);
  unint64_t v419 = (unint64_t)v161;
  unint64_t v181 = (char *)&v366 - v180;
  v378 = (long long *)v172;
  uint64_t v379 = v174;
  uint64_t v182 = v384;
  uint64_t v183 = sub_100132D4C((uint64_t)&v366 - v180, v172, v174, 1u, ObjectType, v176);
  if (v182)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v420 + 160) = 4048;
    swift_errorRetain();
    sub_10002A544(4048, 0xD00000000000001ALL, (void *)0x800000010019B130, v182);
    swift_errorRelease();
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    sub_100130B24((uint64_t)v442, sub_1001304EC);
    swift_release();
    sub_100130720(v443);
    swift_release();
    swift_release();
    sub_100006628((uint64_t)v378, v379);
    swift_errorRelease();
    uint64_t countAndFlagsBits = v416;
    sub_100125D28(v416, (uint64_t)v425);
LABEL_14:
    swift_release();
    uint64_t v74 = v424;
    uint64_t v75 = v422;
    unint64_t v76 = v423;
LABEL_80:
    (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v74);
    return countAndFlagsBits;
  }
  uint64_t v434 = AssociatedTypeWitness;
  *((void *)&v372 + 1) = v183;
  unint64_t v373 = v184;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v435 = AssociatedConformanceWitness;
  uint64_t v186 = sub_10008CDF4(&v432);
  (*(void (**)(uint64_t *, char *, uint64_t))(v377 + 32))(v186, v181, AssociatedTypeWitness);
  swift_unknownObjectRelease();
  uint64_t v187 = swift_allocObject();
  *(_OWORD *)(v187 + 16) = xmmword_100189F80;
  unint64_t v188 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  sub_1000065D0(*((uint64_t *)&v372 + 1), v373);
  uint64_t v189 = v188(AssociatedTypeWitness, AssociatedConformanceWitness);
  TLV.__allocating_init(dataRepresentation:)(v189, v190);
  *(void *)(v187 + 32) = v191;
  *(void *)&long long v438 = v187;
  specialized Array._endMutation()();
  *(void *)&long long v436 = v438;
  uint64_t v192 = v434;
  uint64_t v193 = v435;
  sub_100006788(&v432, v434);
  uint64_t v194 = (*(uint64_t (**)(uint64_t, uint64_t))(v193 + 56))(v192, v193);
  uint64_t v195 = *(void *)(v194 + 16);
  *(void *)&long long v385 = v194;
  if (v195)
  {
    uint64_t v196 = (unint64_t *)(v194 + 40);
    do
    {
      uint64_t v197 = *(v196 - 1);
      unint64_t v198 = *v196;
      sub_1000065D0(v197, *v196);
      sub_1000065D0(v197, v198);
      TLV.__allocating_init(dataRepresentation:)(v197, v198);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v436 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v436 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v196 += 2;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100006628(v197, v198);
      --v195;
    }
    while (v195);
  }
  swift_bridgeObjectRelease();
  uint64_t v199 = v387;
  uint64_t v200 = *v387;
  uint64_t v201 = swift_allocObject();
  *(_OWORD *)(v201 + 16) = xmmword_100189A20;
  *(void *)(v201 + 32) = TLV.__allocating_init(tag:string:)(*(void *)v372);
  *(void *)(v201 + 40) = v419;
  swift_retain();
  variable initialization expression of PrimaryAccountWatcher.isSandboxAccount();
  uint64_t v202 = BitString.init(data:unusedBits:)(*((void *)&v372 + 1));
  unint64_t v204 = v203;
  char v206 = v205;
  uint64_t v207 = default argument 0 of IteratorProtocol<>.nextBitString(tag:)();
  *(void *)(v201 + 48) = TLV.__allocating_init(tag:bitString:)(v207, v202, v204, v206);
  *(void *)(v201 + 56) = TLV.__allocating_init(tag:children:)(*v199, v436);
  *(void *)&long long v438 = v201;
  specialized Array._endMutation()();
  double v208 = TLV.__allocating_init(tag:children:)(v200, v438);
  uint64_t v209 = (*(uint64_t (**)(void))(*v208 + 168))();
  unint64_t v211 = v210;
  unint64_t v377 = sub_100003EB0(&qword_1001DEBE8);
  uint64_t v212 = swift_allocObject();
  long long v385 = xmmword_100186100;
  *(_OWORD *)(v212 + 16) = xmmword_100186100;
  *(void *)&long long v438 = 0;
  *((void *)&v438 + 1) = 0xE000000000000000;
  sub_1000065D0(v209, v211);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  strcpy((char *)&v438, "payloadData[");
  BYTE13(v438) = 0;
  HIWORD(v438) = -5120;
  uint64_t v213 = 0;
  switch(v211 >> 62)
  {
    case 1uLL:
      LODWORD(v213) = HIDWORD(v209) - v209;
      if (__OFSUB__(HIDWORD(v209), v209))
      {
        __break(1u);
LABEL_115:
        __break(1u);
      }
      uint64_t v213 = (int)v213;
LABEL_77:
      *(void *)&long long v440 = v213;
      v226._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v226);
      swift_bridgeObjectRelease();
      v227._uint64_t countAndFlagsBits = 15709;
      v227._object = (void *)0xE200000000000000;
      String.append(_:)(v227);
      Swift::String v228 = Data.hexString()();
      String.append(_:)(v228);
      swift_bridgeObjectRelease();
      long long v229 = v438;
      *(void *)(v212 + 56) = &type metadata for String;
      *(_OWORD *)(v212 + 32) = v229;
      print(_:separator:terminator:)();
      swift_release();
      swift_bridgeObjectRelease();
      sub_100006788(v425 + 13, v425[16]);
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v370 = v209;
      sub_1000E29F8(v438);
      unint64_t v369 = v211;
      swift_bridgeObjectRelease();
      uint64_t v232 = P256.KeyAgreement.PublicKey.x963Representation.getter();
      unint64_t v234 = v233;
      uint64_t v235 = Data.sha256Digest.getter(v232, v233);
      unint64_t v384 = v236;
      sub_100006628(v232, v234);
      *(void *)&long long v438 = 0xD000000000000024;
      *((void *)&v438 + 1) = 0x800000010019AFB0;
      v237._uint64_t countAndFlagsBits = v376;
      v237._object = v417;
      String.append(_:)(v237);
      swift_bridgeObjectRelease();
      unint64_t v238 = v413;
      static String.Encoding.utf8.getter();
      uint64_t v239 = String.data(using:allowLossyConversion:)();
      unint64_t v241 = v240;
      swift_bridgeObjectRelease();
      v371(v238, v412);
      if (v241 >> 60 == 15)
      {
        uint64_t v242 = v409;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100006628(v370, v369);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v243 = Logger.logObject.getter();
        os_log_type_t v244 = static os_log_type_t.error.getter();
        BOOL v245 = os_log_type_enabled(v243, v244);
        uint64_t v246 = v407;
        unint64_t v247 = v408;
        if (v245)
        {
          long long v248 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v248 = 0;
          _os_log_impl((void *)&_mh_execute_header, v243, v244, "Error converting senderInfo to Data", v248, 2u);
          swift_slowDealloc();
        }

        unint64_t v415 = sub_10002A544(4000, 0, 0, 0);
        swift_willThrow();
        sub_100006628(v235, v384);
        (*(void (**)(char *, uint64_t))(v247 + 8))(v242, v246);
        unint64_t v76 = v423;
        unint64_t v249 = v379;
        unint64_t v250 = v369;
        uint64_t v251 = v370;
        *(void *)(v420 + 160) = 4048;
        uint64_t v230 = v415;
        swift_errorRetain();
        sub_10002A544(4048, 0xD000000000000021, (void *)0x800000010019B190, v230);
        swift_errorRelease();
        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_100130B24((uint64_t)v442, sub_1001304EC);
        sub_100006628(v251, v250);
        sub_100006628(*((uint64_t *)&v372 + 1), v373);
        sub_100130720(v443);
        swift_release();
        swift_release();
        sub_100006628((uint64_t)v378, v249);
        swift_errorRelease();
        sub_100006520((uint64_t)&v432);
        goto LABEL_78;
      }
      *(void *)&long long v438 = v239;
      *((void *)&v438 + 1) = v241;
      uint64_t v368 = v235;
      Data.append(_:)();
      (*(void (**)(char *, void, uint64_t))(v393 + 104))(v395, enum case for HPKE.KEM.P256_HKDF_SHA256(_:), v394);
      (*(void (**)(char *, void, uint64_t))(v397 + 104))(v399, enum case for HPKE.KDF.HKDF_SHA256(_:), v398);
      (*(void (**)(char *, void, uint64_t))(v401 + 104))(v400, enum case for HPKE.AEAD.AES_GCM_128(_:), v402);
      uint64_t v267 = v406;
      HPKE.Ciphersuite.init(kem:kdf:aead:)();
      (*(void (**)(char *, char *, uint64_t))(v408 + 16))(v392, v409, v407);
      (*(void (**)(char *, uint64_t, uint64_t))(v404 + 16))(v396, v267, v405);
      sub_1000065D0(v438, *((unint64_t *)&v438 + 1));
      uint64_t v268 = v403;
      HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
      uint64_t v272 = v368;
      unint64_t v274 = v369;
      uint64_t v273 = v370;
      *(void *)&long long v436 = v370;
      *((void *)&v436 + 1) = v369;
      long long v440 = xmmword_100189A30;
      sub_1000DF2B0();
      uint64_t v275 = HPKE.Sender.seal<A, B>(_:authenticating:)();
      unint64_t v415 = 0;
      unint64_t v401 = v276;
      uint64_t v402 = v275;
      sub_100006628(v273, v274);
      uint64_t v412 = *v387;
      uint64_t v277 = swift_allocObject();
      *(_OWORD *)(v277 + 16) = xmmword_10018D8A0;
      unint64_t v278 = v384;
      uint64_t v279 = (uint64_t *)v372;
      *(void *)(v277 + 32) = TLV.__allocating_init(tag:string:)(*(void *)v372);
      uint64_t v280 = v272;
      sub_1000065D0(v272, v278);
      uint64_t v281 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v277 + 40) = TLV.__allocating_init(tag:value:)(v281, v272, v278);
      *(void *)(v277 + 48) = TLV.__allocating_init(tag:string:)(*v279);
      *(void *)(v277 + 56) = TLV.__allocating_init(tag:string:)(*v279);
      unint64_t v283 = v401;
      uint64_t v282 = v402;
      sub_1000065D0(v402, v401);
      uint64_t v284 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v277 + 64) = TLV.__allocating_init(tag:value:)(v284, v282, v283);
      uint64_t v285 = HPKE.Sender.encapsulatedKey.getter();
      uint64_t v287 = v286;
      uint64_t v288 = default argument 0 of IteratorProtocol<>.nextOctetString(tag:)();
      *(void *)(v277 + 72) = TLV.__allocating_init(tag:value:)(v288, v285, v287);
      *(void *)&long long v436 = v277;
      specialized Array._endMutation()();
      uint64_t v289 = TLV.__allocating_init(tag:children:)(v412, v436);
      sub_100006628(v282, v283);
      sub_100006628(v280, v384);
      (*(void (**)(char *, uint64_t))(v389 + 8))(v268, v390);
      (*(void (**)(void, uint64_t))(v404 + 8))(v406, v405);
      sub_100006628(v438, *((unint64_t *)&v438 + 1));
      (*(void (**)(char *, uint64_t))(v408 + 8))(v409, v407);
      swift_retain();
      uint64_t v63 = v383;
      uint64_t v290 = Data.init(base64Encoded:options:)();
      unint64_t v292 = v291;
      swift_bridgeObjectRelease();
      if (v292 >> 60 == 15) {
        goto LABEL_120;
      }
      unint64_t v293 = v415;
      sub_10012FB14(v290, v292, v448);
      uint64_t v63 = (uint64_t *)v293;
      if (v293)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000BF70(v290, v292);
        uint64_t v74 = v424;
        swift_bridgeObjectRelease_n();
        swift_release();
        *(void *)(v420 + 160) = 4047;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_100130B24((uint64_t)v442, sub_1001304EC);
        swift_release();
        sub_100006628(v370, v369);
        sub_100006628(*((uint64_t *)&v372 + 1), v373);
        sub_100130720(v443);
        swift_release();
        swift_release();
        sub_100006628((uint64_t)v378, v379);
        unint64_t v76 = v423;
        sub_100006520((uint64_t)&v432);
        uint64_t countAndFlagsBits = v416;
        sub_100125D28(v416, (uint64_t)v425);
        swift_release();
        uint64_t v75 = v422;
        goto LABEL_80;
      }
      v417 = v289;
      sub_10000BF70(v290, v292);
      unint64_t v294 = v448[0];
      unint64_t v295 = v448[1];
      uint64_t v296 = v448[2];
      unint64_t v297 = v448[3];
      uint64_t v298 = v448[4];
      unint64_t v299 = v448[5];
      uint64_t v407 = sub_100003EB0(&qword_1001D8A20);
      uint64_t v300 = swift_allocObject();
      long long v406 = xmmword_100189B70;
      *(_OWORD *)(v300 + 16) = xmmword_100189B70;
      *(void *)(v300 + 32) = 0x687469726F676C61;
      *(void *)(v300 + 40) = 0xE90000000000006DLL;
      *(void *)(v300 + 48) = v294;
      *(void *)(v300 + 56) = v295;
      *(void *)(v300 + 64) = 30313;
      *(void *)(v300 + 72) = 0xE200000000000000;
      v409 = (char *)v295;
      swift_bridgeObjectRetain();
      sub_1000065D0(v296, v297);
      sub_1000065D0(v298, v299);
      Swift::String v301 = Data.base64EncodedString(options:)(0);
      uint64_t v414 = v296;
      unint64_t v408 = v297;
      sub_100006628(v296, v297);
      *(Swift::String *)(v300 + 80) = v301;
      strcpy((char *)(v300 + 96), "cipheredData");
      *(unsigned char *)(v300 + 109) = 0;
      *(_WORD *)(v300 + 110) = -5120;
      Swift::String v302 = Data.base64EncodedString(options:)(0);
      unint64_t v415 = v298;
      uint64_t v412 = v299;
      sub_100006628(v298, v299);
      *(Swift::String *)(v300 + 112) = v302;
      unint64_t v303 = sub_100004C48(v300);
      sub_100003EB0(&qword_1001DA140);
      uint64_t v304 = swift_allocObject();
      *(_OWORD *)(v304 + 16) = v385;
      *(void *)(v304 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v304 + 40) = v305;
      uint64_t v306 = sub_100003EB0(&qword_1001DEBD0);
      *(void *)(v304 + 72) = v306;
      *(void *)(v304 + 48) = v303;
      unint64_t v421 = sub_100004D6C(v304);
      if ((void)v388)
      {
        uint64_t v307 = Data.init(base64Encoded:options:)();
        unint64_t v309 = v308;
        swift_bridgeObjectRelease();
        if (v309 >> 60 != 15)
        {
          sub_10012FB14(v307, v309, v449);
          unint64_t v384 = 0;
          sub_10000BF70(v307, v309);
          uint64_t v310 = swift_allocObject();
          *(_OWORD *)(v310 + 16) = v406;
          *(void *)(v310 + 32) = 0x687469726F676C61;
          *(void *)(v310 + 40) = 0xE90000000000006DLL;
          unint64_t v311 = v449[1];
          *(void *)(v310 + 48) = v449[0];
          *(void *)(v310 + 56) = v311;
          *(void *)(v310 + 64) = 1953259891;
          *(void *)(v310 + 72) = 0xE400000000000000;
          swift_bridgeObjectRetain();
          *(Swift::String *)(v310 + 80) = Data.base64EncodedString(options:)(0);
          *(void *)(v310 + 96) = 0x6B636F6C426E6970;
          *(void *)(v310 + 104) = 0xE800000000000000;
          *(Swift::String *)(v310 + 112) = Data.base64EncodedString(options:)(0);
          unint64_t v312 = sub_100004C48(v310);
          uint64_t v437 = v306;
          *(void *)&long long v436 = v312;
          uint64_t v313 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v315 = v314;
          unint64_t v316 = v421;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v440 = v316;
          sub_10012B59C(&v436, v313, v315, isUniquelyReferenced_nonNull_native, &v438);
          unint64_t v421 = v440;
          swift_bridgeObjectRelease();
          sub_1001308B8(v449);
          swift_bridgeObjectRelease();
          sub_10005F4F8((uint64_t)&v438, &qword_1001DD3F0);
          goto LABEL_103;
        }
LABEL_121:
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_100130B24((uint64_t)v442, sub_1001304EC);
        __break(1u);
        goto LABEL_122;
      }
      unint64_t v384 = 0;
LABEL_103:
      uint64_t v318 = swift_allocObject();
      *(_OWORD *)(v318 + 16) = xmmword_10018A620;
      *(void *)(v318 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v318 + 40) = v319;
      *(void *)(v318 + 72) = &type metadata for String;
      *(void *)(v318 + 48) = 3235636;
      *(void *)(v318 + 56) = 0xE300000000000000;
      *(void *)(v318 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v318 + 88) = v320;
      uint64_t v321 = (*(uint64_t (**)(void))(*(void *)v417 + 168))();
      unint64_t v323 = v322;
      swift_release();
      Swift::String v324 = Data.base64EncodedString(options:)(0);
      sub_100006628(v321, v323);
      *(void *)(v318 + 120) = &type metadata for String;
      *(Swift::String *)(v318 + 96) = v324;
      *(void *)(v318 + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v318 + 136) = v325;
      uint64_t v326 = sub_100003EB0(&qword_1001DABD8);
      *(void *)(v318 + 168) = v326;
      *(void *)(v318 + 144) = v421;
      *(void *)(v318 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v318 + 184) = v327;
      *(void *)(v318 + 216) = &type metadata for String;
      uint64_t v328 = v410;
      *(void *)(v318 + 192) = v382;
      *(void *)(v318 + 200) = v328;
      swift_bridgeObjectRetain();
      uint64_t countAndFlagsBits = sub_100004D6C(v318);
      uint64_t v439 = v326;
      *(void *)&long long v438 = countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t v329 = v384;
      uint64_t v330 = sub_10005F8A8(&v438, 8, 0);
      if (v329)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100006520((uint64_t)&v438);
        *(void *)(v420 + 160) = 4048;
        swift_errorRetain();
        sub_10002A544(4048, 0xD00000000000002ELL, (void *)0x800000010019B1C0, v329);
        swift_errorRelease();
        swift_willThrow();
        sub_100130720(v443);
        swift_release();
        sub_100006628(v370, v369);
        sub_100006628(*((uint64_t *)&v372 + 1), v373);
        sub_100006628((uint64_t)v378, v379);
        swift_errorRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_100130B24((uint64_t)v442, sub_1001304EC);
        sub_1001308B8(v448);
        sub_100006520((uint64_t)&v432);
        sub_100125D28(v416, (uint64_t)v425);
        goto LABEL_14;
      }
      uint64_t v332 = v330;
      unint64_t v333 = v331;
      sub_100006520((uint64_t)&v438);
      v334 = self;
      sub_1000065D0(v332, v333);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      *(void *)&long long v438 = 0;
      id v336 = [v334 dataWithJSONObject:isa options:9 error:&v438];

      uint64_t v63 = (uint64_t *)v438;
      if (!v336)
      {
LABEL_122:
        v363 = v63;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_100130B24((uint64_t)v442, sub_1001304EC);
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x100125D08);
      }
      unint64_t v420 = v333 >> 62;
      id v337 = (id)v438;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v338 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v340 = v339;

      static String.Encoding.utf8.getter();
      unint64_t v421 = v338;
      unint64_t v415 = v340;
      uint64_t v341 = String.init(data:encoding:)();
      if (v342)
      {
        uint64_t v343 = v341;
        v344 = v342;
        uint64_t v345 = swift_allocObject();
        *(_OWORD *)(v345 + 16) = v385;
        *(void *)&long long v438 = 0;
        *((void *)&v438 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(53);
        v346._object = (void *)0x800000010019B230;
        v346._uint64_t countAndFlagsBits = 0xD000000000000033;
        String.append(_:)(v346);
        v347._uint64_t countAndFlagsBits = v343;
        v347._object = v344;
        String.append(_:)(v347);
        swift_bridgeObjectRelease();
        long long v348 = v438;
        *(void *)(v345 + 56) = &type metadata for String;
        *(_OWORD *)(v345 + 32) = v348;
        print(_:separator:terminator:)();
        swift_bridgeObjectRelease();
      }
      uint64_t v349 = swift_allocObject();
      *(_OWORD *)(v349 + 16) = v385;
      *(void *)&long long v438 = 0;
      *((void *)&v438 + 1) = 0xE000000000000000;
      uint64_t v63 = (uint64_t *)&v438;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      *(void *)&long long v438 = 0xD000000000000013;
      *((void *)&v438 + 1) = 0x800000010019B210;
      uint64_t v350 = 0;
      switch((int)v420)
      {
        case 1:
          LODWORD(v350) = HIDWORD(v332) - v332;
          if (__OFSUB__(HIDWORD(v332), v332)) {
            goto LABEL_118;
          }
          uint64_t v350 = (int)v350;
LABEL_113:
          *(void *)&long long v436 = v350;
          v353._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v353);
          swift_bridgeObjectRelease();
          v354._uint64_t countAndFlagsBits = 15709;
          v354._object = (void *)0xE200000000000000;
          String.append(_:)(v354);
          Swift::String v355 = Data.hexString()();
          String.append(_:)(v355);
          swift_bridgeObjectRelease();
          long long v356 = v438;
          *(void *)(v349 + 56) = &type metadata for String;
          *(_OWORD *)(v349 + 32) = v356;
          print(_:separator:terminator:)();
          swift_bridgeObjectRelease();
          sub_100006628(v421, v415);
          v357 = v425;
          uint64_t v358 = v425[32];
          uint64_t v359 = v425[33];
          sub_100006788(v425 + 29, v358);
          sub_100003EB0(&qword_1001D9B20);
          uint64_t v360 = swift_allocObject();
          *(_OWORD *)(v360 + 16) = v385;
          strcpy((char *)(v360 + 32), "transactionId");
          *(_WORD *)(v360 + 46) = -4864;
          *(void *)(v360 + 72) = &type metadata for String;
          *(void *)(v360 + 80) = &protocol witness table for String;
          uint64_t v361 = v410;
          *(void *)(v360 + 48) = v382;
          *(void *)(v360 + 56) = v361;
          unint64_t v362 = sub_100104AF4(v360);
          sub_100136224(28, v362, v358, v359);
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
          sub_100130720(v443);
          swift_release();
          sub_100006628(v370, v369);
          sub_100006628(*((uint64_t *)&v372 + 1), v373);
          sub_100006628((uint64_t)v378, v379);
          swift_release();
          swift_release();
          sub_100006628(v332, v333);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          sub_100130B24((uint64_t)v442, sub_1001304EC);
          sub_100006628(v332, v333);
          sub_1001308B8(v448);
          sub_100006520((uint64_t)&v432);
          sub_100125D28(v416, (uint64_t)v357);
          swift_release();
          (*(void (**)(char *, uint64_t))(v422 + 8))(v423, v424);
          break;
        case 2:
          uint64_t v352 = *(void *)(v332 + 16);
          uint64_t v351 = *(void *)(v332 + 24);
          BOOL v225 = __OFSUB__(v351, v352);
          uint64_t v350 = v351 - v352;
          if (!v225) {
            goto LABEL_113;
          }
          goto LABEL_119;
        case 3:
          goto LABEL_113;
        default:
          uint64_t v350 = BYTE6(v333);
          goto LABEL_113;
      }
      return countAndFlagsBits;
    case 2uLL:
      uint64_t v224 = *(void *)(v209 + 16);
      uint64_t v223 = *(void *)(v209 + 24);
      BOOL v225 = __OFSUB__(v223, v224);
      uint64_t v213 = v223 - v224;
      if (!v225) {
        goto LABEL_77;
      }
      goto LABEL_115;
    case 3uLL:
      goto LABEL_77;
    default:
      uint64_t v213 = BYTE6(v211);
      goto LABEL_77;
  }
}

void sub_100125D28(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v13);
  uint64_t v15 = &v28[-v14];
  if (qword_1001D92F0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for OSSignposter();
  sub_100003E78(v16, (uint64_t)qword_1001DE9F8);
  uint64_t v17 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v29 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(unsigned char *, uint64_t))(v3 + 88))(v6, v2) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v18 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
      uint64_t v18 = "end generateSecureReaderBlob";
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v12, v15, v7);
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, (os_signpost_type_t)v29, v22, "reader-getSecureBlob", v18, v21, 2u);
    swift_slowDealloc();

    uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
    v23(v15, v7);
    uint64_t v19 = ((uint64_t (*)(unsigned char *, uint64_t))v23)(v12, v7);
  }
  else
  {

    uint64_t v19 = (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v15, v7);
  }
  uint64_t v24 = *(void *)(v30 + 272);
  char v31 = 11;
  __chkstk_darwin(v19, v20);
  *(void *)&v28[-16] = &v31;
  unint64_t v26 = (uint64_t *)&v25[4];
  uint64_t v27 = v25 + 8;
  os_unfair_lock_lock(v25 + 8);
  sub_100132008(v26);
  os_unfair_lock_unlock(v27);
  sub_100058BDC();
  sub_100006788((void *)(v24 + 16), *(void *)(v24 + 40));
  sub_100042F68((uint64_t)&off_1001C6060);
}

void sub_1001260C0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v8 = a1;
    swift_unknownObjectRetain();
    sub_100003EB0(&qword_1001DEBD8);
    uint64_t v1 = String.init<A>(describing:)();
    unint64_t v3 = v2;
  }
  else
  {
    unint64_t v3 = 0xE400000000000000;
    uint64_t v1 = 1701736302;
  }
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DE9E0);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_100005EB8(v1, v3, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "deprecated Reader.cancelRead(callback: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10011E9BC();
}

unint64_t sub_1001262C4(unint64_t a1, unint64_t a2)
{
  sub_100006788((void *)(v2 + 104), *(void *)(v2 + 128));
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v6 = sub_100126530(a1, a2, v7);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_100126530(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v252 = a1;
  uint64_t v7 = type metadata accessor for HPKE.Sender();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v228 = v7;
  uint64_t v229 = v8;
  __chkstk_darwin(v7, v9);
  unint64_t v241 = (char *)&v198 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for HPKE.AEAD();
  uint64_t v239 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  unint64_t v238 = (char *)&v198 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for HPKE.KDF();
  uint64_t v235 = *(void *)(v14 - 8);
  uint64_t v236 = v14;
  __chkstk_darwin(v14, v15);
  Swift::String v237 = (char *)&v198 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for HPKE.KEM();
  uint64_t v231 = *(void *)(v17 - 8);
  uint64_t v232 = v17;
  __chkstk_darwin(v17, v18);
  unint64_t v233 = (char *)&v198 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for HPKE.Ciphersuite();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  unint64_t v234 = (char *)&v198 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v242 = (char *)&v198 - v26;
  uint64_t object = type metadata accessor for SHA256();
  unint64_t v249 = *(void *)(object - 8);
  uint64_t v28 = __chkstk_darwin(object, v27);
  os_log_type_t v244 = (char *)&v198 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v30);
  unint64_t v251 = (unint64_t)&v198 - v31;
  *(void *)&long long v246 = type metadata accessor for SHA256Digest();
  uint64_t v248 = *(void *)(v246 - 8);
  uint64_t v33 = __chkstk_darwin(v246, v32);
  uint64_t v240 = (uint64_t)&v198 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v35);
  uint64_t v245 = (uint64_t)&v198 - v36;
  uint64_t v254 = type metadata accessor for String.Encoding();
  uint64_t v37 = *(void *)(v254 - 8);
  __chkstk_darwin(v254, v38);
  uint64_t v253 = (char *)&v198 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v42 = __chkstk_darwin(v40, v41);
  __chkstk_darwin(v42, v43);
  unint64_t v256 = (char *)&v198 - v44;
  uint64_t v250 = v45;
  uint64_t v243 = v20;
  uint64_t v230 = v46;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_54;
    }
    id v47 = *(id *)(a3 + 32);
  }
  uint64_t v48 = v47;
  SecKeyRef v49 = SecCertificateRef.publicKey.getter();

  CFErrorRef v268 = 0;
  if (!v49) {
    __break(1u);
  }
  SecKeyRef v257 = v49;
  CFDataRef v50 = SecKeyCopyExternalRepresentation(v49, &v268);
  if (v50)
  {
    uint64_t v226 = v21;
    CFDataRef v51 = v50;
    uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t countAndFlagsBits = v53;

    *(void *)&long long v263 = v52;
    *((void *)&v263 + 1) = countAndFlagsBits;
    sub_1000065D0(v52, countAndFlagsBits);
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
    if (v3)
    {

      sub_100006628(v52, countAndFlagsBits);
      return countAndFlagsBits;
    }
    unint64_t v222 = countAndFlagsBits;
    CFDataRef v223 = v51;
    uint64_t v219 = v11;
    unint64_t v224 = v40;
    unint64_t v225 = a2;
    uint64_t v227 = 0;
    uint64_t v221 = v52;
    uint64_t v64 = v255[27];
    uint64_t v63 = v255[28];
    sub_100006788(v255 + 24, v64);
    (*(void (**)(uint64_t))(*(void *)(v63 + 8) + 24))(v64);
    uint64_t v65 = Double.description.getter();
    uint64_t v67 = v66;
    unint64_t v68 = v253;
    static String.Encoding.utf8.getter();
    uint64_t v69 = String.data(using:allowLossyConversion:)();
    unint64_t v71 = v70;
    unint64_t v73 = *(void (**)(char *, uint64_t))(v37 + 8);
    v37 += 8;
    char v72 = v73;
    uint64_t v74 = v254;
    v73(v68, v254);
    if (v71 >> 60 != 15)
    {
      uint64_t v266 = v69;
      unint64_t v267 = v71;
      static String.Encoding.utf8.getter();
      uint64_t v218 = v65;
      uint64_t v220 = v67;
      uint64_t v75 = String.data(using:allowLossyConversion:)();
      unint64_t v76 = v68;
      unint64_t v78 = v77;
      v72(v76, v74);
      if (v78 >> 60 != 15)
      {
        unint64_t countAndFlagsBits = (unint64_t)&v266;
        Data.append(_:)();
        sub_10000BF70(v75, v78);
        static String.Encoding.utf8.getter();
        uint64_t v79 = String.data(using:allowLossyConversion:)();
        unint64_t v81 = v80;
        v72(v76, v74);
        if (v81 >> 60 == 15)
        {
          swift_bridgeObjectRelease();
          sub_10002A544(4000, 0xD00000000000002ELL, (void *)0x800000010019AF80, 0);
          swift_willThrow();
          sub_100006628(v221, v222);

          sub_100006628(v266, v267);
          (*(void (**)(char *, unint64_t))(v250 + 8))(v256, v224);
          return countAndFlagsBits;
        }
        a2 = (unint64_t)v72;
        uint64_t v216 = v79;
        unint64_t v217 = v81;
        Data.append(_:)();
        uint64_t v83 = v266;
        unint64_t v84 = v267;
        sub_1000065D0(v266, v267);
        uint64_t v20 = sub_100131054(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
        uint64_t v85 = object;
        dispatch thunk of HashFunction.init()();
        uint64_t v213 = (void (*)(char *, uint64_t))a2;
        uint64_t v214 = v37;
        uint64_t v215 = v20;
        switch(v84 >> 62)
        {
          case 1uLL:
            unint64_t countAndFlagsBits = (int)v83;
            if (v83 >> 32 < (int)v83)
            {
              __break(1u);
              goto LABEL_69;
            }
            sub_1000065D0(v83, v84);
            unint64_t v91 = v251;
            uint64_t v92 = v227;
            sub_10012B4BC((int)v83, v83 >> 32);
            uint64_t v227 = v92;
            sub_100006628(v83, v84);
            uint64_t v89 = v246;
            uint64_t v90 = v248;
LABEL_28:
            uint64_t v93 = v245;
            dispatch thunk of HashFunction.finalize()();
            unint64_t v94 = *(void (**)(char *, uint64_t))(v249 + 8);
            v249 += 8;
            unint64_t v211 = v94;
            v94((char *)v91, v85);
            sub_100006628(v83, v84);
            uint64_t v264 = v89;
            uint64_t v95 = sub_100131054(&qword_1001DCDE0, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
            uint64_t AssociatedConformanceWitness = v95;
            uint64_t v96 = sub_10008CDF4((uint64_t *)&v263);
            uint64_t v209 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v90 + 16);
            uint64_t v210 = v90 + 16;
            v209(v96, v93, v89);
            sub_100006788(&v263, v264);
            uint64_t v97 = v227;
            uint64_t v212 = v95;
            dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
            uint64_t v248 = v97;
            uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
            uint64_t v98 = v90 + 8;
            double v208 = v99;
            v99(v93, v89);
            unint64_t v251 = *((void *)&v259 + 1);
            uint64_t v100 = v259;
            sub_100006520((uint64_t)&v263);
            sub_100006788(v255 + 19, v255[22]);
            unint64_t countAndFlagsBits = (unint64_t)sub_10013E5B0(201, 0x726564616572, 0xE600000000000000, 4);
            uint64_t v102 = v101;
            uint64_t ObjectType = swift_getObjectType();
            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
            unint64_t v255 = &v198;
            uint64_t v245 = *(void *)(AssociatedTypeWitness - 8);
            __chkstk_darwin(AssociatedTypeWitness, v105);
            unint64_t v107 = (char *)&v198 - v106;
            uint64_t v108 = v100;
            uint64_t v109 = v100;
            unint64_t v110 = v251;
            uint64_t v111 = v248;
            uint64_t v112 = sub_100132D4C((uint64_t)&v198 - v106, v109, v251, 1u, ObjectType, v102);
            uint64_t v227 = v111;
            if (v111)
            {
              swift_bridgeObjectRelease();
              sub_100006628(v108, v110);
              sub_10000BF70(v216, v217);
              swift_unknownObjectRelease();
              sub_100006628(v221, v222);

              sub_100006628(v266, v267);
              (*(void (**)(char *, unint64_t))(v250 + 8))(v256, v224);
              return countAndFlagsBits;
            }
            uint64_t v248 = v98;
            uint64_t v205 = v112;
            unint64_t v206 = v113;
            uint64_t v204 = v108;
            unint64_t v207 = countAndFlagsBits;
            uint64_t v264 = AssociatedTypeWitness;
            uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            uint64_t v114 = sub_10008CDF4((uint64_t *)&v263);
            (*(void (**)(uint64_t *, char *, uint64_t))(v245 + 32))(v114, v107, AssociatedTypeWitness);
            unint64_t v115 = v253;
            static String.Encoding.utf8.getter();
            uint64_t v245 = String.data(using:allowLossyConversion:)();
            unint64_t v117 = v116;
            v213(v115, v254);
            unint64_t v255 = (uint64_t *)v117;
            unint64_t countAndFlagsBits = (unint64_t)v256;
            if (v117 >> 60 == 15) {
              goto LABEL_90;
            }
            swift_bridgeObjectRetain();
            uint64_t v118 = Data.init(base64urlEncoded:)();
            uint64_t v4 = v227;
            unint64_t v120 = v251;
            if (v119 >> 60 == 15)
            {
              swift_bridgeObjectRelease();
              uint64_t v121 = v250;
              CFDataRef v122 = v223;
LABEL_43:
              uint64_t v133 = v221;
              sub_10002A544(4000, 0xD000000000000033, (void *)0x800000010019AFE0, 0);
              swift_willThrow();
              sub_10000BF70(v245, (unint64_t)v255);
              sub_100006628(v205, v206);
              sub_100006628(v204, v120);
              sub_10000BF70(v216, v217);
              swift_unknownObjectRelease();
              sub_100006628(v133, v222);

              sub_100006628(v266, v267);
              (*(void (**)(unint64_t, unint64_t))(v121 + 8))(countAndFlagsBits, v224);
              goto LABEL_44;
            }
            uint64_t v123 = v118;
            a2 = v119;
            uint64_t v124 = self;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            *(void *)&long long v259 = 0;
            id v126 = [v124 JSONObjectWithData:isa options:0 error:&v259];

            uint64_t v127 = v250;
            if (!v126)
            {
              unint64_t countAndFlagsBits = (unint64_t)(id)v259;
              swift_bridgeObjectRelease();
              _convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10000BF70(v123, a2);
              sub_10000BF70(v245, (unint64_t)v255);
              sub_100006628(v205, v206);
              sub_100006628(v204, v120);
              sub_10000BF70(v216, v217);
              swift_unknownObjectRelease();
              sub_100006628(v221, v222);

              sub_100006628(v266, v267);
              (*(void (**)(char *, unint64_t))(v127 + 8))(v256, v224);
LABEL_44:
              sub_100006520((uint64_t)&v263);
              return countAndFlagsBits;
            }
            uint64_t v37 = v123;
            id v128 = (id)v259;
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            sub_100003EB0(&qword_1001DABD8);
            if ((swift_dynamicCast() & 1) == 0)
            {
              sub_10000BF70(v123, a2);
              swift_bridgeObjectRelease();
              unint64_t countAndFlagsBits = (unint64_t)v256;
              CFDataRef v122 = v223;
              uint64_t v121 = v250;
              unint64_t v120 = v251;
              goto LABEL_43;
            }
            uint64_t v20 = v262;
            char v129 = sub_10012FFEC(v262);
            unint64_t countAndFlagsBits = (unint64_t)v256;
            if ((v129 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v134 = 0xD00000000000001ELL;
              uint64_t v135 = "txnBlob field missing or empty";
LABEL_49:
              sub_10002A544(4000, v134, (void *)((unint64_t)(v135 - 32) | 0x8000000000000000), 0);
              swift_willThrow();
              sub_10000BF70(v123, a2);
              sub_10000BF70(v245, (unint64_t)v255);
              sub_100006628(v205, v206);
              sub_100006628(v204, v251);
              sub_10000BF70(v216, v217);
              swift_unknownObjectRelease();
              goto LABEL_50;
            }
            if (!*(void *)(v20 + 16)) {
              goto LABEL_46;
            }
            unint64_t v130 = sub_10000C4B0(0x546E6F6973736573, 0xEC0000006E656B6FLL);
            if (v131)
            {
              sub_100006570(*(void *)(v20 + 56) + 32 * v130, (uint64_t)&v259);
              char v132 = swift_dynamicCast();
              unint64_t countAndFlagsBits = (unint64_t)v256;
              if (v132)
              {
                sub_1000EE43C(v262, *((uint64_t *)&v262 + 1), v269);
                if (v4)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_errorRetain();
                  sub_10002A544(4000, 0x206E6F6973736573, (void *)0xED00006E656B6F74, v4);
                  swift_errorRelease();
                  swift_willThrow();
                  sub_10000BF70(v123, a2);
                  sub_10000BF70(v245, (unint64_t)v255);
                  sub_100006628(v205, v206);
                  sub_100006628(v204, v251);
                  sub_10000BF70(v216, v217);
                  swift_unknownObjectRelease();
                  swift_errorRelease();
LABEL_50:
                  sub_100006628(v221, v222);

                  sub_100006628(v266, v267);
                  long long v136 = *(void (**)(char *, unint64_t))(v250 + 8);
                  uint64_t v137 = (char *)countAndFlagsBits;
LABEL_51:
                  v136(v137, v224);
                  goto LABEL_44;
                }
LABEL_54:
                uint64_t v200 = v269[10];
                uint64_t v203 = v269[11];
                swift_bridgeObjectRetain();
                uint64_t v227 = P256.KeyAgreement.PublicKey.x963Representation.getter();
                unint64_t v139 = v138;
                dispatch thunk of HashFunction.init()();
                unint64_t v201 = v139;
                switch(v139 >> 62)
                {
                  case 1uLL:
                    uint64_t v202 = v4;
                    uint64_t v146 = (int)v227;
                    if (v227 >> 32 < (int)v227) {
                      goto LABEL_91;
                    }
                    uint64_t v147 = v227 >> 32;
                    unint64_t v148 = v139;
                    unint64_t v199 = v139 & 0x3FFFFFFFFFFFFFFFLL;
                    uint64_t v149 = v227;
                    sub_1000065D0(v227, v148);
                    uint64_t v150 = v146;
                    uint64_t v141 = v244;
                    uint64_t v151 = v202;
                    sub_10012B4BC(v150, v147);
                    uint64_t v202 = v151;
                    uint64_t v142 = v149;
                    unint64_t v143 = v148;
LABEL_61:
                    sub_100006628(v142, v143);
                    uint64_t v145 = v240;
                    break;
                  case 2uLL:
                    uint64_t v202 = *(void *)(v227 + 16);
                    unint64_t v199 = *(void *)(v227 + 24);
                    sub_1000065D0(v227, v139);
                    swift_retain();
                    swift_retain();
                    sub_10012B4BC(v202, v199);
                    uint64_t v202 = v4;
                    if (v4) {
                      goto LABEL_95;
                    }
                    swift_release();
                    uint64_t v144 = v227;
                    swift_release();
                    sub_100006628(v144, v201);
                    uint64_t v145 = v240;
                    uint64_t v141 = v244;
                    break;
                  case 3uLL:
                    uint64_t v202 = v4;
                    *(void *)((char *)&v259 + 6) = 0;
                    *(void *)&long long v259 = 0;
                    uint64_t v141 = v244;
                    dispatch thunk of HashFunction.update(bufferPointer:)();
                    uint64_t v142 = v227;
                    unint64_t v143 = v139;
                    goto LABEL_61;
                  default:
                    uint64_t v202 = v4;
                    uint64_t v140 = v227;
                    *(void *)&long long v259 = v227;
                    WORD4(v259) = v139;
                    BYTE10(v259) = BYTE2(v139);
                    BYTE11(v259) = BYTE3(v139);
                    BYTE12(v259) = BYTE4(v139);
                    BYTE13(v259) = BYTE5(v139);
                    uint64_t v141 = v244;
                    dispatch thunk of HashFunction.update(bufferPointer:)();
                    uint64_t v142 = v140;
                    unint64_t v143 = v139;
                    goto LABEL_61;
                }
                uint64_t v152 = object;
                dispatch thunk of HashFunction.finalize()();
                v211(v141, v152);
                sub_100006628(v227, v201);
                uint64_t v153 = v246;
                *((void *)&v260 + 1) = v246;
                uint64_t v261 = v212;
                uint64_t v154 = sub_10008CDF4((uint64_t *)&v259);
                v209(v154, v145, v153);
                sub_100006788(&v259, *((uint64_t *)&v260 + 1));
                uint64_t v155 = v202;
                dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
                uint64_t object = v155;
                v208(v145, v153);
                unint64_t v249 = *((void *)&v262 + 1);
                uint64_t v156 = v262;
                sub_100006520((uint64_t)&v259);
                long long v246 = xmmword_100189A30;
                long long v262 = xmmword_100189A30;
                Data.append(_:)();
                uint64_t v157 = v253;
                static String.Encoding.utf8.getter();
                uint64_t v158 = String.data(using:allowLossyConversion:)();
                unint64_t v160 = v159;
                v213(v157, v254);
                if (v160 >> 60 != 15)
                {
                  Data.append(_:)();
                  sub_10000BF70(v158, v160);
                  uint64_t v248 = v156;
                  Data.append(_:)();
                  (*(void (**)(char *, void, uint64_t))(v231 + 104))(v233, enum case for HPKE.KEM.P256_HKDF_SHA256(_:), v232);
                  (*(void (**)(char *, void, uint64_t))(v235 + 104))(v237, enum case for HPKE.KDF.HKDF_SHA256(_:), v236);
                  (*(void (**)(char *, void, uint64_t))(v239 + 104))(v238, enum case for HPKE.AEAD.AES_GCM_128(_:), v219);
                  char v161 = v242;
                  HPKE.Ciphersuite.init(kem:kdf:aead:)();
                  (*(void (**)(uint64_t, char *, unint64_t))(v250 + 16))(v230, v256, v224);
                  (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v234, v161, v243);
                  sub_1000065D0(v262, *((unint64_t *)&v262 + 1));
                  unint64_t countAndFlagsBits = v224;
                  uint64_t v162 = object;
                  HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
                  if (v162)
                  {
                    swift_bridgeObjectRelease();
                    sub_10000BF70(v37, a2);
                    swift_bridgeObjectRelease();
                    sub_100062020((uint64_t)v269);
                    sub_100006628(v248, v249);
                    sub_10000BF70(v245, (unint64_t)v255);
                    sub_100006628(v205, v206);
                    sub_100006628(v204, v251);
                    sub_10000BF70(v216, v217);
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();
                    sub_100006628(v221, v222);

                    (*(void (**)(char *, uint64_t))(v226 + 8))(v242, v243);
                    sub_100006628(v262, *((unint64_t *)&v262 + 1));
                    sub_100006628(v266, v267);
                    (*(void (**)(char *, unint64_t))(v250 + 8))(v256, countAndFlagsBits);
                    goto LABEL_44;
                  }
                  os_log_type_t v244 = (char *)sub_100003EB0(&qword_1001D8A20);
                  uint64_t v163 = swift_allocObject();
                  uint64_t v227 = 0;
                  unint64_t v164 = (Swift::String *)v163;
                  *(_OWORD *)(v163 + 16) = xmmword_10018A620;
                  strcpy((char *)(v163 + 32), "deviceCpuTime");
                  *(_WORD *)(v163 + 46) = -4864;
                  uint64_t v165 = v220;
                  *(void *)(v163 + 48) = v218;
                  *(void *)(v163 + 56) = v165;
                  *(void *)(v163 + 64) = 0xD000000000000012;
                  *(void *)(v163 + 72) = 0x800000010019B080;
                  uint64_t v166 = v264;
                  uint64_t v167 = AssociatedConformanceWitness;
                  sub_100006788(&v263, v264);
                  uint64_t v168 = (*(uint64_t (**)(uint64_t, uint64_t))(v167 + 48))(v166, v167);
                  unint64_t v170 = v169;
                  Swift::String v171 = Data.base64EncodedString(options:)(0);
                  uint64_t object = (uint64_t)v171._object;
                  sub_100006628(v168, v170);
                  uint64_t v172 = object;
                  v164[5]._unint64_t countAndFlagsBits = v171._countAndFlagsBits;
                  v164[5]._uint64_t object = (void *)v172;
                  v164[6]._unint64_t countAndFlagsBits = 0x727574616E676973;
                  v164[6]._uint64_t object = (void *)0xE900000000000065;
                  v164[7] = Data.base64EncodedString(options:)(0);
                  v164[8]._unint64_t countAndFlagsBits = 0x626F6C426E7874;
                  v164[8]._uint64_t object = (void *)0xE700000000000000;
                  uint64_t v173 = (void *)v225;
                  v164[9]._unint64_t countAndFlagsBits = v252;
                  v164[9]._uint64_t object = v173;
                  swift_bridgeObjectRetain();
                  unint64_t countAndFlagsBits = sub_100004C48((uint64_t)v164);
                  uint64_t v83 = sub_100003EB0(&qword_1001DEBD0);
                  *((void *)&v260 + 1) = v83;
                  *(void *)&long long v259 = countAndFlagsBits;
                  uint64_t v174 = v227;
                  uint64_t object = sub_10005F8A8(&v259, 8, 0);
                  unint64_t v252 = v175;
                  if (v174)
                  {
                    sub_10000BF70(v37, a2);
                    swift_bridgeObjectRelease();
                    sub_100062020((uint64_t)v269);
                    sub_100006628(v248, v249);
                    sub_10000BF70(v245, (unint64_t)v255);
                    sub_100006628(v205, v206);
                    sub_100006628(v204, v251);
                    sub_10000BF70(v216, v217);
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();
                    sub_100006628(v221, v222);

                    (*(void (**)(char *, uint64_t))(v229 + 8))(v241, v228);
                    (*(void (**)(char *, uint64_t))(v226 + 8))(v242, v243);
                    sub_100006628(v262, *((unint64_t *)&v262 + 1));
                    sub_100006628(v266, v267);
                    (*(void (**)(char *, unint64_t))(v250 + 8))(v256, v224);
                    sub_100006520((uint64_t)&v259);
                    sub_100006520((uint64_t)&v263);
                    return countAndFlagsBits;
                  }
                  sub_100006520((uint64_t)&v259);
                  *(void *)&long long v259 = object;
                  *((void *)&v259 + 1) = v252;
                  long long v258 = v246;
                  sub_1000DF2B0();
                  unint64_t countAndFlagsBits = (unint64_t)v241;
                  uint64_t v240 = HPKE.Sender.seal<A, B>(_:authenticating:)();
                  *(void *)&long long v246 = v176;
                  uint64_t v227 = 0;
LABEL_69:
                  if (*(void *)(v20 + 16)
                    && (unint64_t countAndFlagsBits = v20,
                        unint64_t v177 = sub_10000C4B0(0x746361736E617274, 0xED000064496E6F69),
                        (v178 & 1) != 0))
                  {
                    sub_100006570(*(void *)(v20 + 56) + 32 * v177, (uint64_t)&v259);
                  }
                  else
                  {
                    long long v259 = 0u;
                    long long v260 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  if (*((void *)&v260 + 1))
                  {
                    if (swift_dynamicCast())
                    {
                      uint64_t v179 = HIBYTE(*((void *)&v258 + 1)) & 0xFLL;
                      uint64_t v239 = v258;
                      if ((*((void *)&v258 + 1) & 0x2000000000000000) == 0) {
                        uint64_t v179 = v258 & 0xFFFFFFFFFFFFLL;
                      }
                      if (v179)
                      {
                        uint64_t v180 = swift_allocObject();
                        *(_OWORD *)(v180 + 16) = xmmword_10018D8B0;
                        *(void *)(v180 + 32) = 0x496E6F6973726576;
                        *(void *)(v180 + 40) = 0xE900000000000064;
                        *(void *)(v180 + 48) = 3235634;
                        *(void *)(v180 + 56) = 0xE300000000000000;
                        *(void *)(v180 + 64) = 0x6172656D65687065;
                        *(void *)(v180 + 72) = 0xEB000000006B506CLL;
                        uint64_t v181 = HPKE.Sender.encapsulatedKey.getter();
                        unint64_t v183 = v182;
                        Swift::String v184 = Data.base64EncodedString(options:)(0);
                        os_log_type_t v244 = (char *)v184._object;
                        sub_100006628(v181, v183);
                        uint64_t v185 = v244;
                        *(void *)(v180 + 80) = v184._countAndFlagsBits;
                        *(void *)(v180 + 88) = v185;
                        *(void *)(v180 + 96) = 0xD00000000000001CLL;
                        *(void *)(v180 + 104) = 0x800000010019B0D0;
                        *(Swift::String *)(v180 + 112) = Data.hexString()();
                        *(void *)(v180 + 128) = 0x496E6F6973736573;
                        *(void *)(v180 + 136) = 0xE900000000000064;
                        uint64_t v186 = v203;
                        *(void *)(v180 + 144) = v200;
                        *(void *)(v180 + 152) = v186;
                        strcpy((char *)(v180 + 160), "securePayload");
                        *(_WORD *)(v180 + 174) = -4864;
                        *(Swift::String *)(v180 + 176) = Data.base64EncodedString(options:)(0);
                        strcpy((char *)(v180 + 192), "transactionId");
                        *(_WORD *)(v180 + 206) = -4864;
                        uint64_t v187 = v253;
                        static String.Encoding.utf8.getter();
                        uint64_t v188 = String.data(using:allowLossyConversion:)();
                        unint64_t countAndFlagsBits = v189;
                        swift_bridgeObjectRelease();
                        v213(v187, v254);
                        if (countAndFlagsBits >> 60 != 15)
                        {
                          NSDataBase64EncodingOptions v190 = variable initialization expression of PrimaryAccountWatcher.store();
                          Swift::String v191 = Data.base64urlEncodedString(options:)(v190);
                          sub_10000BF70(v188, countAndFlagsBits);
                          *(Swift::String *)(v180 + 208) = v191;
                          unint64_t v192 = sub_100004C48(v180);
                          *((void *)&v260 + 1) = v83;
                          *(void *)&long long v259 = v192;
                          uint64_t v193 = v227;
                          uint64_t v194 = sub_10005F8A8(&v259, 8, 0);
                          if (!v193)
                          {
                            uint64_t v196 = v194;
                            unint64_t v197 = v195;
                            sub_100006520((uint64_t)&v259);
                            unint64_t countAndFlagsBits = Data.base64EncodedString(options:)(0)._countAndFlagsBits;
                            sub_10000BF70(v37, a2);
                            sub_100062020((uint64_t)v269);
                            sub_100006628(v196, v197);
                            sub_100006628(v240, v246);
                            sub_100006628(object, v252);
                            sub_100006628(v248, v249);
                            sub_10000BF70(v245, (unint64_t)v255);
                            sub_100006628(v205, v206);
                            sub_100006628(v204, v251);
                            sub_10000BF70(v216, v217);
                            swift_unknownObjectRelease();
                            sub_100006628(v221, v222);

                            (*(void (**)(char *, uint64_t))(v229 + 8))(v241, v228);
                            (*(void (**)(char *, uint64_t))(v226 + 8))(v242, v243);
                            sub_100006628(v262, *((unint64_t *)&v262 + 1));
                            sub_100006628(v266, v267);
                            (*(void (**)(char *, unint64_t))(v250 + 8))(v256, v224);
                            sub_100006520((uint64_t)&v263);
                            return countAndFlagsBits;
                          }
                          sub_10000BF70(v37, a2);
                          sub_100062020((uint64_t)v269);
                          sub_100006628(v240, v246);
                          sub_100006628(object, v252);
                          sub_100006628(v248, v249);
                          sub_10000BF70(v245, (unint64_t)v255);
                          sub_100006628(v205, v206);
                          sub_100006628(v204, v251);
                          sub_10000BF70(v216, v217);
                          swift_unknownObjectRelease();
                          sub_100006628(v221, v222);

                          (*(void (**)(char *, uint64_t))(v229 + 8))(v241, v228);
                          (*(void (**)(char *, uint64_t))(v226 + 8))(v242, v243);
                          sub_100006628(v262, *((unint64_t *)&v262 + 1));
                          sub_100006628(v266, v267);
                          (*(void (**)(char *, unint64_t))(v250 + 8))(v256, v224);
                          sub_100006520((uint64_t)&v259);
                          goto LABEL_44;
                        }
LABEL_94:
                        __break(1u);
LABEL_95:
                        swift_release();
                        swift_release();
                        __break(1u);
                        JUMPOUT(0x1001288F0);
                      }
                      swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    sub_10005F4F8((uint64_t)&v259, &qword_1001DD3F0);
                  }
                  sub_10002A544(4000, 0xD00000000000002ELL, (void *)0x800000010019B0A0, 0);
                  swift_willThrow();
                  sub_10000BF70(v37, a2);
                  sub_100062020((uint64_t)v269);
                  sub_100006628(v240, v246);
                  sub_100006628(object, v252);
                  sub_100006628(v248, v249);
                  sub_10000BF70(v245, (unint64_t)v255);
                  sub_100006628(v205, v206);
                  sub_100006628(v204, v251);
                  sub_10000BF70(v216, v217);
                  swift_unknownObjectRelease();
                  sub_100006628(v221, v222);

                  (*(void (**)(char *, uint64_t))(v229 + 8))(v241, v228);
                  (*(void (**)(char *, uint64_t))(v226 + 8))(v242, v243);
                  sub_100006628(v262, *((unint64_t *)&v262 + 1));
                  sub_100006628(v266, v267);
                  long long v136 = *(void (**)(char *, unint64_t))(v250 + 8);
                  uint64_t v137 = v256;
                  goto LABEL_51;
                }
                goto LABEL_92;
              }
LABEL_46:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t countAndFlagsBits = (unint64_t)v256;
            }
            uint64_t v134 = 0xD000000000000033;
            uint64_t v135 = "Error obtaining sessionTokenString from txnBlobJson";
            goto LABEL_49;
          case 2uLL:
            uint64_t v87 = *(void *)(v83 + 16);
            uint64_t v86 = *(void *)(v83 + 24);
            sub_1000065D0(v83, v84);
            swift_retain();
            swift_retain();
            uint64_t v88 = v227;
            sub_10012B4BC(v87, v86);
            uint64_t v227 = v88;
            if (v88) {
              goto LABEL_93;
            }
            swift_release();
            swift_release();
            sub_100006628(v83, v84);
            uint64_t v89 = v246;
            uint64_t v90 = v248;
            unint64_t v91 = v251;
            goto LABEL_28;
          case 3uLL:
            *(void *)((char *)&v263 + 6) = 0;
            *(void *)&long long v263 = 0;
            goto LABEL_25;
          default:
            *(void *)&long long v263 = v83;
            WORD4(v263) = v84;
            BYTE10(v263) = BYTE2(v84);
            BYTE11(v263) = BYTE3(v84);
            BYTE12(v263) = BYTE4(v84);
            BYTE13(v263) = BYTE5(v84);
LABEL_25:
            unint64_t v91 = v251;
            dispatch thunk of HashFunction.update(bufferPointer:)();
            sub_100006628(v83, v84);
            uint64_t v89 = v246;
            uint64_t v90 = v248;
            goto LABEL_28;
        }
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      swift_release();
      swift_release();
      __break(1u);
      goto LABEL_94;
    }
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  CFErrorRef v55 = v268;
  if (!v268)
  {
    __break(1u);
    goto LABEL_88;
  }
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  sub_100003E78(v56, (uint64_t)qword_1001DE9E0);
  uint64_t v57 = v55;
  unint64_t countAndFlagsBits = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)countAndFlagsBits, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v263 = swift_slowAlloc();
    *(_DWORD *)uint64_t v59 = 136315138;
    unint64_t v256 = (char *)(v59 + 4);
    *(void *)&long long v259 = v57;
    type metadata accessor for CFError(0);
    unint64_t v60 = v57;
    uint64_t v61 = String.init<A>(describing:)();
    *(void *)&long long v259 = sub_100005EB8(v61, v62, (uint64_t *)&v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)countAndFlagsBits, v58, "Error on SecKeyCopyExternalRepresentation: %s", v59, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10002A544(4000, 0xD000000000000029, (void *)0x800000010019AF50, 0);
  swift_willThrow();

  return countAndFlagsBits;
}

uint64_t sub_100128910(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 == 0) == (a2 == 0))
  {
    __break(1u);
LABEL_15:
    swift_once();
LABEL_4:
    sub_100003E78(v8, (uint64_t)qword_1001DE9E0);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "NFSecureElementReaderSession started", v16, 2u);
      swift_slowDealloc();
    }
    else
    {
    }
    return OS_dispatch_semaphore.signal()();
  }
  if (a1)
  {
    swift_beginAccess();
    uint64_t v13 = *(void **)(a3 + 16);
    *(void *)(a3 + 16) = a1;
    a2 = a1;

    if (qword_1001D92E8 == -1) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100003E78(v8, (uint64_t)qword_1001DE9E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v17, v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v18, v19))
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return OS_dispatch_semaphore.signal()();
  }
  v24[1] = a4;
  uint64_t v20 = (uint8_t *)swift_slowAlloc();
  uint64_t result = swift_slowAlloc();
  v25[0] = result;
  *(_DWORD *)uint64_t v20 = 136315138;
  if (a2)
  {
    uint64_t v26 = (uint64_t)a2;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v26 = sub_100005EB8(v22, v23, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error from startSecureElementReaderSession: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return OS_dispatch_semaphore.signal()();
  }
  __break(1u);
  return result;
}

uint64_t sub_100128CD8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = (void *)v1[12];
  if ([v5 operationCount])
  {
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003E78(v6, (uint64_t)qword_1001DE9E0);
    swift_retain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134217984;
      id v31 = [v5 operationCount];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%ld operations in Reader OperationQueue", v9, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v22 = (void *)0x800000010019AF30;
    uint64_t v23 = 4019;
    uint64_t v24 = 0xD00000000000001FLL;
    goto LABEL_16;
  }
  sub_100006788(v1 + 2, v1[5]);
  uint64_t result = sub_10010F4B0(a1);
  if ((result & 1) == 0)
  {
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100003E78(v11, (uint64_t)qword_1001DE9E0);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Not attested", v14, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = v3[5];
    uint64_t v15 = v3[6];
    sub_100006788(v3 + 2, v16);
    (*(void (**)(uint64_t))(*(void *)(v15 + 8) + 8))(v16);
    if (v2)
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
        id v31 = (id)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v19 = 136315138;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v20 = String.init<A>(describing:)();
        sub_100005EB8(v20, v21, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to send MPOC logs to get a new token: %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    sub_100006788(v3 + 2, v3[5]);
    uint64_t result = sub_10010F4B0(a1);
    if ((result & 1) == 0)
    {
      sub_100006788(v3 + 7, v3[10]);
      sub_1000D4970(v25);
      sub_100029CEC((uint64_t)&v26, (uint64_t)v27, &qword_1001DE480);
      sub_100029CEC((uint64_t)v27, (uint64_t)&v28, &qword_1001DE480);
      if ((v30 & 1) == 0)
      {
        sub_1000474D8(v28, v29);
        return swift_willThrow();
      }
      uint64_t v23 = 4023;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
LABEL_16:
      sub_10002A544(v23, v24, v22, 0);
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1001291A4(uint64_t a1)
{
  uint64_t v103 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v94 = *(void *)(v3 - 8);
  uint64_t v95 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)v88 - v9;
  uint64_t v104 = type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate();
  uint64_t v91 = *(void *)(v104 - 8);
  __chkstk_darwin(v104, v11);
  os_log_type_t v13 = (char *)v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v98 = (uint64_t)v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v99 = *(void *)(v17 - 8);
  uint64_t v100 = v17;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  unint64_t v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v105 = (uint64_t)v88 - v23;
  uint64_t v102 = v1;
  int v96 = *(unsigned __int8 *)(*sub_100006788(v1 + 2, v1[5]) + 40);
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v97 = sub_100003E78(v24, (uint64_t)qword_1001DE9E0);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v101 = v2;
  uint64_t v92 = v10;
  uint64_t v93 = v7;
  uint64_t v90 = v21;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v106 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    uint64_t v113 = sub_100005EB8(0xD00000000000001BLL, 0x800000010019AF10, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2080;
    if (v96) {
      uint64_t v29 = 0x656E696C66666FLL;
    }
    else {
      uint64_t v29 = 0x656E696C6E6FLL;
    }
    if (v96) {
      unint64_t v30 = 0xE700000000000000;
    }
    else {
      unint64_t v30 = 0xE600000000000000;
    }
    uint64_t v113 = sub_100005EB8(v29, v30, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s, MPOCOperationMode: %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  v88[1] = v102[18];
  sub_1000C86E4(v103 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_tpid, &v106);
  uint64_t v31 = v109;
  uint64_t v32 = v110;
  if (v107)
  {
    uint64_t v33 = v106;
    uint64_t v34 = (uint64_t)v107;
  }
  else
  {
    UUID.uuidString.getter();
    uint64_t v35 = v101;
    uint64_t v33 = sub_100117604();
    uint64_t v101 = v35;
  }
  uint64_t v36 = v103;
  uint64_t v37 = (uint64_t *)(v103 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
  *uint64_t v37 = v33;
  v37[1] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v89 = OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs;
  *(void *)(v36 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs) = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs;
  *(void *)(v36 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs) = v32;
  swift_bridgeObjectRelease();
  uint64_t v39 = v36 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID;
  uint64_t v40 = v98;
  sub_100068DC4(v39, v98);
  uint64_t v42 = v99;
  uint64_t v41 = v100;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v40, 1, v100) == 1)
  {
    sub_10005F4F8(v40, (uint64_t *)&unk_1001DF8D0);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    uint64_t v46 = v101;
    if (v45)
    {
      id v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "saftpid not present. Using tpid as profileID", v47, 2u);
      swift_slowDealloc();
    }

    memcpy(v112, (const void *)(v103 + 168), 0x120uLL);
    uint64_t v48 = v102[27];
    uint64_t v49 = v102[28];
    sub_100006788(v102 + 24, v48);
    uint64_t v50 = *(void *)(v49 + 8);
    CFDataRef v51 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    sub_100068C50((uint64_t)v112);
    uint64_t v52 = (uint64_t)v93;
    v51(v48, v50);
    sub_100147B74(v52);
    if (v46)
    {
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v52, v95);
      return sub_100062020((uint64_t)v112);
    }
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v52, v95);
    uint64_t result = sub_100062020((uint64_t)v112);
    if ((v96 & 1) == 0) {
      return result;
    }
LABEL_35:
    int v77 = 0;
    goto LABEL_41;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v105, v40, v41);
  uint64_t v54 = *(void *)(*sub_100006788(v102 + 45, v102[48]) + 72);
  uint64_t v55 = *(void *)(v54 + 16);
  if (v55)
  {
    uint64_t v56 = v54 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
    uint64_t v57 = *(void *)(v91 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      char v58 = static UUID.== infix(_:_:)();
      sub_10012D668(v56, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
      if (v58)
      {
        char v59 = v13[*(int *)(v104 + 20)];
        sub_10012D6D0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
        if (v59)
        {
          swift_bridgeObjectRelease();
          *(unsigned char *)(v103 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF) = 1;
          uint64_t v60 = v105;
          sub_1000C86E4(v105, &v106);
          uint64_t v61 = v106;
          uint64_t v62 = (uint64_t)v107;
          uint64_t v63 = v108;
          uint64_t v95 = v109;
          uint64_t v64 = v110;
          uint64_t v65 = v90;
          (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v90, v60, v100);
          uint64_t v102 = v64;
          uint64_t v98 = v63;
          if (v62)
          {
            uint64_t v66 = v62;
          }
          else
          {
            UUID.uuidString.getter();
            uint64_t v61 = sub_100117604();
            uint64_t v66 = v78;
          }
          uint64_t v79 = *(void (**)(char *, uint64_t))(v99 + 8);
          swift_bridgeObjectRetain();
          uint64_t v104 = (uint64_t)v79;
          v79(v65, v100);
          *uint64_t v37 = v61;
          v37[1] = v66;
          swift_bridgeObjectRelease();
          uint64_t v80 = v103;
          *(void *)(v103 + v89) = v95;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v80 + v38) = v102;
          swift_bridgeObjectRelease();
          unint64_t v81 = Logger.logObject.getter();
          os_log_type_t v82 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v81, v82))
          {
            uint64_t v83 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v83 = 0;
            _os_log_impl((void *)&_mh_execute_header, v81, v82, "saftpid present and isInSAFMode. Using saftpid as profileID", v83, 2u);
            swift_slowDealloc();
          }

          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v104)(v105, v100);
          if ((v96 & 1) == 0)
          {
            int v77 = 1;
LABEL_41:
            uint64_t v106 = 0;
            unint64_t v107 = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(60);
            v84._unint64_t countAndFlagsBits = 0xD00000000000003ALL;
            v84._uint64_t object = (void *)0x800000010019AED0;
            String.append(_:)(v84);
            if (v77) {
              uint64_t v85 = 0x656E696C66666FLL;
            }
            else {
              uint64_t v85 = 0x656E696C6E6FLL;
            }
            if (v77) {
              unint64_t v86 = 0xE700000000000000;
            }
            else {
              unint64_t v86 = 0xE600000000000000;
            }
            unint64_t v87 = v86;
            String.append(_:)(*(Swift::String *)&v85);
            swift_bridgeObjectRelease();
            sub_10002A544(4000, v106, v107, 0);
            return swift_willThrow();
          }
          return result;
        }
      }
      else
      {
        sub_10012D6D0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
      }
      v56 += v57;
      if (!--v55)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  BOOL v69 = os_log_type_enabled(v67, v68);
  uint64_t v70 = v101;
  uint64_t v71 = (uint64_t)v92;
  if (v69)
  {
    char v72 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "saftpid present but NOT isInSAFMode. Using tpid as profileID", v72, 2u);
    swift_slowDealloc();
  }

  memcpy(v111, (const void *)(v103 + 168), sizeof(v111));
  uint64_t v73 = v102[27];
  uint64_t v74 = v102[28];
  sub_100006788(v102 + 24, v73);
  uint64_t v75 = *(void *)(v74 + 8);
  unint64_t v76 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  sub_100068C50((uint64_t)v111);
  v76(v73, v75);
  sub_100147B74(v71);
  if (v70)
  {
    sub_100062020((uint64_t)v111);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v71, v95);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v105, v100);
  }
  sub_100062020((uint64_t)v111);
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v71, v95);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 8))(v105, v100);
  if (v96) {
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_100129CB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 272);
  uint64_t v4 = OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF;
  *(unsigned char *)(v3 + 134) = *(unsigned char *)(a1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF);
  uint64_t v45 = *(void *)(a1 + 16);
  *(unsigned char *)(v3 + 168) = v45;
  int v5 = *(unsigned __int8 *)(a1 + 72);
  *(unsigned char *)(v3 + 169) = v5;
  *(_WORD *)(v3 + 170) = Data.toUInt16(endianness:)(1, *(void *)(a1 + 56), *(void *)(a1 + 64));
  sub_100003EB0((uint64_t *)&unk_1001DD390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100189E90;
  *(unsigned char *)(inited + 32) = 7;
  UUID.uuidString.getter();
  uint64_t v7 = sub_100117604();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 48) = v8;
  *(unsigned char *)(inited + 72) = 8;
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(inited + 104) = &type metadata for Int;
  *(void *)(inited + 80) = v10;
  *(unsigned char *)(inited + 112) = 17;
  uint64_t v11 = *(void *)(a1 + 112);
  *(void *)(inited + 144) = &type metadata for Int;
  *(void *)(inited + 120) = v11;
  *(unsigned char *)(inited + 152) = 18;
  uint64_t v12 = *(void *)(a1 + 120);
  *(void *)(inited + 184) = &type metadata for Int;
  *(void *)(inited + 160) = v12;
  *(unsigned char *)(inited + 192) = 23;
  uint64_t v13 = *(void *)(a1 + 144);
  if (v13)
  {
    int v44 = v5;
    int64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v43 = v4;
      swift_bridgeObjectRetain();
      sub_10014B9C4(0, v14, 0);
      uint64_t v15 = (unint64_t *)(v13 + 40);
      do
      {
        uint64_t v16 = *(v15 - 1);
        unint64_t v17 = *v15;
        sub_1000065D0(v16, *v15);
        Swift::String v18 = Data.hexString()();
        sub_100006628(v16, v17);
        unint64_t v20 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1) {
          sub_10014B9C4(v19 > 1, v20 + 1, 1);
        }
        v15 += 2;
        _swiftEmptyArrayStorage[2] = v20 + 1;
        *(Swift::String *)&_swiftEmptyArrayStorage[2 * v20 + 4] = v18;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      uint64_t v4 = v43;
    }
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    sub_100038F5C((unint64_t *)&qword_1001DD3B0, (uint64_t *)&unk_1001DA570);
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    *(void *)(inited + 224) = &type metadata for String;
    *(void *)(inited + 200) = v21;
    *(void *)(inited + 208) = v23;
    int v5 = v44;
  }
  else
  {
    *(_OWORD *)(inited + 200) = 0u;
    *(_OWORD *)(inited + 216) = 0u;
  }
  unint64_t v24 = sub_1001052FC(inited);
  __chkstk_darwin(v24, v25);
  BOOL v27 = (uint64_t *)&v26[4];
  uint64_t v28 = v26 + 8;
  os_unfair_lock_lock(v26 + 8);
  sub_10005A488(v27);
  os_unfair_lock_unlock(v28);
  swift_bridgeObjectRelease();
  if ((unint64_t)(v45 - 2) < 2)
  {
    unint64_t v30 = sub_10015B004(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v32 = v30[2];
    unint64_t v34 = v30[3];
    unint64_t v33 = v32 + 1;
    if (v32 >= v34 >> 1) {
      unint64_t v30 = sub_10015B004((void *)(v34 > 1), v32 + 1, 1, v30);
    }
    char v29 = 3;
  }
  else if (v45 == 1)
  {
    unint64_t v30 = sub_10015B004(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v32 = v30[2];
    unint64_t v35 = v30[3];
    unint64_t v33 = v32 + 1;
    if (v32 >= v35 >> 1) {
      unint64_t v30 = sub_10015B004((void *)(v35 > 1), v32 + 1, 1, v30);
    }
    char v29 = 2;
  }
  else if (v45)
  {
    unint64_t v30 = sub_10015B004(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v32 = v30[2];
    unint64_t v36 = v30[3];
    unint64_t v33 = v32 + 1;
    if (v32 >= v36 >> 1) {
      unint64_t v30 = sub_10015B004((void *)(v36 > 1), v32 + 1, 1, v30);
    }
    char v29 = 4;
  }
  else
  {
    char v29 = 1;
    unint64_t v30 = sub_10015B004(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v32 = v30[2];
    unint64_t v31 = v30[3];
    unint64_t v33 = v32 + 1;
    if (v32 >= v31 >> 1)
    {
      char v29 = 1;
      unint64_t v30 = sub_10015B004((void *)(v31 > 1), v32 + 1, 1, v30);
    }
  }
  v30[2] = v33;
  *((unsigned char *)v30 + v32 + 32) = v29;
  if (v5 == 32)
  {
    unint64_t v37 = v30[3];
    int64_t v38 = v33 + 1;
    char v39 = 6;
  }
  else
  {
    unint64_t v37 = v30[3];
    int64_t v38 = v33 + 1;
    if (v5) {
      char v39 = 7;
    }
    else {
      char v39 = 5;
    }
  }
  if (v33 >= v37 >> 1) {
    unint64_t v30 = sub_10015B004((void *)(v37 > 1), v38, 1, v30);
  }
  v30[2] = v38;
  *((unsigned char *)v30 + v33 + 32) = v39;
  if (*(unsigned char *)(a1 + v4) == 1)
  {
    unint64_t v41 = v30[2];
    unint64_t v40 = v30[3];
    if (v41 >= v40 >> 1) {
      unint64_t v30 = sub_10015B004((void *)(v40 > 1), v41 + 1, 1, v30);
    }
    v30[2] = v41 + 1;
    *((unsigned char *)v30 + v41 + 32) = 39;
  }
  sub_100006788((void *)(v3 + 16), *(void *)(v3 + 40));
  sub_100042F68((uint64_t)v30);
  return swift_bridgeObjectRelease();
}

void sub_10012A284()
{
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v1 + 144) = 4013;
  *(_WORD *)(v1 + 121) = 0;
  *(unsigned char *)(v1 + 127) = 1;
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 56);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = (uint64_t *)&v2[4];
  os_unfair_lock_lock(v2 + 8);
  sub_10012D648(v4);
  os_unfair_lock_unlock(v3);
  __chkstk_darwin(v5, v6);
  os_unfair_lock_lock(v3);
  sub_10012D648(v4);
  os_unfair_lock_unlock(v3);
  sub_100006788((void *)(v1 + 16), *(void *)(v1 + 40));
  sub_100042F68((uint64_t)&off_1001C5D18);
}

id sub_10012A3A0(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v75 = a3;
  unint64_t v76 = a4;
  id v66 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v73 = *(void *)(v5 - 8);
  uint64_t v74 = v5;
  __chkstk_darwin(v5, v6);
  char v72 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DE9E0);
  id v9 = a2;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  int v12 = v11;
  p_ivar_lyt = &GlobalState.ivar_lyt;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v14 = swift_slowAlloc();
    LODWORD(v69) = v12;
    uint64_t v15 = v14;
    uint64_t v70 = swift_slowAlloc();
    v77[0] = v70;
    *(_DWORD *)uint64_t v15 = 136315906;
    id v16 = [v9 transactionId];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v78 = sub_100005EB8(v17, v19, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 1024;
    unsigned int v20 = [v9 isPINBypassAllowed];

    LODWORD(v78) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v15 + 18) = 2080;
    id v21 = [v9 fingerprint];
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    Swift::String v25 = Data.hexString()();
    sub_100006628(v22, v24);
    p_ivar_lyt = (void **)(&GlobalState + 16);
    uint64_t v78 = sub_100005EB8(v25._countAndFlagsBits, (unint64_t)v25._object, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 28) = 2080;
    id v26 = [v9 pinKekId];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    swift_bridgeObjectRelease();
    uint64_t v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      uint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
    }
    if (v30) {
      uint64_t v31 = 0x746E6573657270;
    }
    else {
      uint64_t v31 = 0x7974706D65;
    }
    if (v30) {
      unint64_t v32 = 0xE700000000000000;
    }
    else {
      unint64_t v32 = 0xE500000000000000;
    }
    uint64_t v78 = sub_100005EB8(v31, v32, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v69, "onSuccessWithInternalTransactionData, transactionId: %s, isPINBypassAllowed: %{BOOL}d, fingerprint: %s, pinKekId: %s", (uint8_t *)v15, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v33 = [v9 pinKekId:v66];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v34 = Data.init(hexString:)();
  if (v35 >> 60 == 15) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v34;
  }
  if (v35 >> 60 == 15) {
    unint64_t v37 = 0xC000000000000000;
  }
  else {
    unint64_t v37 = v35;
  }
  LODWORD(v70) = [v9 pinRequired];
  id v38 = [v9 p_ivar_lyt[303]];
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  uint64_t v41 = v75;
  unint64_t v42 = v76;
  sub_1000065D0(v75, v76);
  sub_1000065D0(v36, v37);
  unsigned int v68 = [v9 isPINBypassAllowed];
  id v67 = v9;
  id v43 = [v9 fingerprint];
  uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v46 = v45;

  id v47 = (void *)v71[34];
  uint64_t v48 = sub_100006788(v71 + 35, v71[38]);
  v77[3] = (uint64_t)&type metadata for InternalTransactionData;
  uint64_t v49 = swift_allocObject();
  v77[0] = v49;
  *(unsigned char *)(v49 + 16) = v70;
  *(void *)(v49 + 24) = v69;
  *(void *)(v49 + 32) = v40;
  *(void *)(v49 + 40) = v41;
  *(void *)(v49 + 48) = v42;
  *(void *)(v49 + 56) = v36;
  *(void *)(v49 + 64) = v37;
  *(unsigned char *)(v49 + 72) = v68;
  *(void *)(v49 + 80) = v44;
  *(void *)(v49 + 88) = v46;
  uint64_t v50 = (void *)*v48;
  CFDataRef v51 = (void *)v50[3];
  uint64_t v70 = v40;
  uint64_t v71 = v51;
  swift_bridgeObjectRetain();
  unint64_t v52 = v42;
  unint64_t v53 = v37;
  uint64_t v54 = v36;
  sub_1000065D0(v41, v52);
  sub_1000065D0(v36, v53);
  uint64_t v69 = v44;
  sub_1000065D0(v44, v46);
  swift_retain();
  uint64_t v55 = v72;
  uint64_t v56 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v56, v57);
  *(&v66 - 6) = v50;
  *((unsigned char *)&v66 - 40) = 0;
  *(&v66 - 4) = v77;
  *(&v66 - 3) = (id)0x404E000000000000;
  *(&v66 - 2) = sub_10012D640;
  *(&v66 - 1) = v47;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v74);
  swift_release();
  sub_100006520((uint64_t)v77);
  if (qword_1001D9410 != -1) {
    swift_once();
  }
  uint64_t v58 = static GlobalState.shared;
  id result = [*(id *)(static GlobalState.shared + 72) lock];
  uint64_t v60 = *(void *)(v58 + 96);
  BOOL v61 = __OFADD__(v60, 1);
  uint64_t v62 = v60 + 1;
  if (v61)
  {
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  *(void *)(v58 + 96) = v62;
  id v63 = v67;
  while (*(uint64_t *)(v58 + 88) > 0 || *(unsigned char *)(v58 + 80) == 1)
    id result = [*(id *)(v58 + 72) wait];
  uint64_t v64 = *(void *)(v58 + 96);
  BOOL v61 = __OFSUB__(v64, 1);
  uint64_t v65 = v64 - 1;
  if (v61) {
    goto LABEL_32;
  }
  *(void *)(v58 + 96) = v65;
  *(unsigned char *)(v58 + 80) = 1;
  [*(id *)(v58 + 72) unlock];
  *(unsigned char *)(v58 + 33) = 1;
  sub_1001661D8();
  [*(id *)(v58 + 72) lock];
  *(unsigned char *)(v58 + 80) = 0;
  [*(id *)(v58 + 72) broadcast];
  [*(id *)(v58 + 72) unlock];
  if ([v66 respondsToSelector:"onSuccessWithTransactionData:"])
  {
    [(id)swift_unknownObjectRetain() onSuccessWithTransactionData:v63];
    sub_100006628(v54, v53);
    swift_bridgeObjectRelease();
    sub_100006628(v75, v76);
    sub_100006628(v54, v53);
    sub_100006628(v69, v46);
    return (id)swift_unknownObjectRelease();
  }
  else
  {
    sub_100006628(v54, v53);
    swift_bridgeObjectRelease();
    sub_100006628(v75, v76);
    sub_100006628(v54, v53);
    return (id)sub_100006628(v69, v46);
  }
}

void sub_10012AB98()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3, v6);
  uint64_t v8 = &v15[-v7];
  static DispatchTime.now()();
  + infix(_:_:)();
  id v9 = *(void (**)(unsigned char *, uint64_t))(v1 + 8);
  v9(v5, v0);
  char v10 = sub_10004BFF4();
  v9(v8, v0);
  if ((v10 & 1) == 0)
  {
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100003E78(v11, (uint64_t)qword_1001DE9E0);
    int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "failed to obtain session to clear PAN after a readCard", v14, 2u);
      swift_slowDealloc();
    }
  }
  sub_100058EEC();
}

void sub_10012ADA0()
{
  if (qword_1001D9350 != -1) {
    swift_once();
  }
  NFSecureElementManagerSession.select(_:)(AID_PIN_APPLET, *(unint64_t *)algn_1001E1198);
  if (v0)
  {
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100003E78(v1, (uint64_t)qword_1001DE9E0);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "failed to select PIN applet to clear PAN in NVM", v4, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();
  }
  else
  {
    sub_100142940();
  }
}

void *sub_10012AEE4(void *a1)
{
  return sub_100117C08(a1);
}

uint64_t sub_10012AF08(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100117E6C(a1, a2, a3, a4);
}

void sub_10012AF2C()
{
}

uint64_t sub_10012AF50(uint64_t a1, uint64_t a2)
{
  return sub_10012220C(a1, a2);
}

uint64_t sub_10012AF74(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  return sub_10011ED7C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_10012AFB0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  return sub_100120E74(a1, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_10012AFD4(unint64_t a1, unint64_t a2)
{
  return sub_1001262C4(a1, a2);
}

void sub_10012AFF8(uint64_t a1)
{
}

char *sub_10012B01C(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_100189A30;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      id result = sub_10012B408((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        uint64_t *v5 = v4;
        goto LABEL_19;
      }
      uint64_t *v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      id result = sub_10012B408(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      id result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      id result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        id result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *sub_10012B320@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    id result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    id result = (unsigned char *)sub_10012C890(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    id result = (unsigned char *)sub_10012C954((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    id result = (unsigned char *)sub_10012C9D0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_10012B398(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    id result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  id result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_10012B408(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  id result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  id result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  id result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_10012B4BC(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_100131054(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_OWORD *sub_10012B59C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = sub_10000C4B0(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a4 & 1) == 0)
  {
    if (v19 >= v17 && (a4 & 1) == 0)
    {
      sub_10000D200();
      goto LABEL_7;
    }
    sub_10000C9FC(v17, a4 & 1);
    unint64_t v23 = sub_10000C4B0(a2, a3);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      unsigned int v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unsigned int v20 = *v6;
  if (v18)
  {
LABEL_8:
    sub_100006510((_OWORD *)(v20[7] + 32 * v14), a5);
    id v21 = (_OWORD *)(v20[7] + 32 * v14);
    return sub_100006510(a1, v21);
  }
LABEL_13:
  sub_10000CFD8(v14, a2, a3, a1, v20);
  *a5 = 0u;
  a5[1] = 0u;

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_10012B714@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10012B7A0(uint64_t *a1, unsigned __int8 *a2)
{
  return sub_1001171E0(a1, *a2);
}

uint64_t sub_10012B7BC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1001160FC(a1, *a2);
}

uint64_t sub_10012B7D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v99 = type metadata accessor for MPOCDefaultMonitorManager();
  uint64_t v100 = &off_1001CAE10;
  *(void *)&long long v98 = a1;
  uint64_t v96 = type metadata accessor for MPOCDefaultAttestationManager();
  uint64_t v97 = &off_1001C9838;
  *(void *)&long long v95 = a2;
  uint64_t v93 = type metadata accessor for CertificateManager();
  uint64_t v94 = &off_1001C6308;
  *(void *)&long long v92 = a4;
  uint64_t v90 = type metadata accessor for SignerFactory();
  uint64_t v91 = &off_1001CB9D0;
  *(void *)&long long v89 = a6;
  uint64_t v88 = &off_1001C84C8;
  uint64_t v87 = type metadata accessor for DefaultSecureTimeKeeper();
  *(void *)&long long v86 = a7;
  uint64_t v85 = &off_1001C96D8;
  uint64_t v84 = type metadata accessor for DefaultManagedDictionary();
  *(void *)&long long v83 = a10;
  os_log_type_t v82 = &off_1001CB4C8;
  uint64_t v81 = type metadata accessor for SystemInfo();
  *(void *)&long long v80 = a11;
  uint64_t v79 = &off_1001CC7B8;
  uint64_t v78 = type metadata accessor for SecureElement();
  *(void *)&long long v77 = a12;
  unint64_t v76 = &off_1001CC120;
  uint64_t v75 = type metadata accessor for StoreAndForwardSelector();
  *(void *)&long long v74 = a14;
  *(void *)(a15 + 448) = 0;
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  char v20 = a13;
  uint64_t v21 = type metadata accessor for Logger();
  sub_100003E78(v21, (uint64_t)qword_1001DE9E0);
  sub_100009300((uint64_t)&v98, (uint64_t)v73);
  sub_100009300((uint64_t)&v95, (uint64_t)v72);
  sub_100009300((uint64_t)&v92, (uint64_t)v71);
  sub_100009300((uint64_t)&v89, (uint64_t)v70);
  sub_100009300((uint64_t)&v86, (uint64_t)v69);
  uint64_t v22 = (long long *)a8;
  sub_100009300(a8, (uint64_t)v68);
  sub_100009300((uint64_t)&v83, (uint64_t)v67);
  sub_100009300((uint64_t)&v80, (uint64_t)v66);
  sub_100009300((uint64_t)&v77, (uint64_t)v65);
  sub_100009300((uint64_t)&v74, (uint64_t)v64);
  id v23 = a3;
  uint64_t v24 = a9;
  swift_retain_n();
  id v25 = v23;
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136318210;
    sub_100009300((uint64_t)v73, (uint64_t)v62);
    sub_100003EB0(&qword_1001DB7D0);
    uint64_t v29 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v29, v30, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v73);
    *(_WORD *)(v28 + 12) = 2080;
    sub_100009300((uint64_t)v72, (uint64_t)v62);
    sub_100003EB0(&qword_1001DC8F0);
    uint64_t v31 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v31, v32, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v72);
    *(_WORD *)(v28 + 22) = 2080;
    id v33 = [v25 description];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;

    uint64_t v37 = v34;
    uint64_t v24 = a9;
    v62[0] = sub_100005EB8(v37, v36, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 32) = 2080;
    sub_100009300((uint64_t)v71, (uint64_t)v62);
    sub_100003EB0(&qword_1001DB7B0);
    uint64_t v38 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v38, v39, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v71);
    *(_WORD *)(v28 + 42) = 2080;
    sub_100009300((uint64_t)v70, (uint64_t)v62);
    sub_100003EB0(&qword_1001DC900);
    uint64_t v40 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v40, v41, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v70);
    *(_WORD *)(v28 + 52) = 2080;
    sub_100009300((uint64_t)v69, (uint64_t)v62);
    sub_100003EB0(&qword_1001DB3D8);
    uint64_t v42 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v42, v43, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v69);
    *(_WORD *)(v28 + 62) = 2080;
    sub_100009300((uint64_t)v68, (uint64_t)v62);
    sub_100003EB0(&qword_1001DB7B8);
    uint64_t v44 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v44, v45, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v68);
    *(_WORD *)(v28 + 72) = 2080;
    v62[0] = a9;
    type metadata accessor for ReaderAnalytics();
    swift_retain();
    uint64_t v46 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v46, v47, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 82) = 2080;
    sub_100009300((uint64_t)v67, (uint64_t)v62);
    sub_100003EB0(&qword_1001DB7C0);
    uint64_t v48 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v48, v49, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v67);
    *(_WORD *)(v28 + 92) = 2080;
    sub_100009300((uint64_t)v66, (uint64_t)v62);
    sub_100003EB0(&qword_1001DB7D8);
    uint64_t v50 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v50, v51, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v66);
    *(_WORD *)(v28 + 102) = 2080;
    sub_100009300((uint64_t)v65, (uint64_t)v62);
    sub_100003EB0(&qword_1001DB7C8);
    uint64_t v52 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v52, v53, &v63);
    char v20 = a13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v65);
    *(_WORD *)(v28 + 112) = 2080;
    if (a13) {
      uint64_t v54 = 1702195828;
    }
    else {
      uint64_t v54 = 0x65736C6166;
    }
    if (a13) {
      unint64_t v55 = 0xE400000000000000;
    }
    else {
      unint64_t v55 = 0xE500000000000000;
    }
    v62[0] = sub_100005EB8(v54, v55, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 122) = 2080;
    sub_100009300((uint64_t)v64, (uint64_t)v62);
    sub_100003EB0(&qword_1001DC8F8);
    uint64_t v56 = String.init<A>(describing:)();
    v62[0] = sub_100005EB8(v56, v57, &v63);
    uint64_t v22 = (long long *)a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v64);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Reader.init(mpocMonitorManager: %s, mpocAttestationManager: %s, queue: %s, certificateManager: %s, signerFactory: %s, secureTimeKeeper: %s, auditor: %s, analytics: %s, managedData: %s, systemInfo: %s, secureElement: %s, enforceJCOPVersion: %s, safSelector: %s)", (uint8_t *)v28, 0x84u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006520((uint64_t)v73);
    sub_100006520((uint64_t)v72);

    sub_100006520((uint64_t)v71);
    sub_100006520((uint64_t)v70);
    sub_100006520((uint64_t)v69);
    sub_100006520((uint64_t)v68);
    swift_release_n();
    sub_100006520((uint64_t)v67);
    sub_100006520((uint64_t)v66);
    sub_100006520((uint64_t)v65);
    sub_100006520((uint64_t)v64);
  }

  sub_10001F1F0(&v98, a15 + 16);
  sub_10001F1F0(&v95, a15 + 56);
  *(void *)(a15 + 96) = v25;
  sub_10001F1F0(&v92, a15 + 104);
  *(void *)(a15 + 144) = a5;
  sub_10001F1F0(&v89, a15 + 152);
  sub_10001F1F0(&v86, a15 + 192);
  sub_10001F1F0(v22, a15 + 232);
  *(void *)(a15 + 272) = v24;
  sub_10001F1F0(&v83, a15 + 280);
  sub_10001F1F0(&v80, a15 + 320);
  sub_10001F1F0(&v77, a15 + 408);
  *(unsigned char *)(a15 + 400) = v20 & 1;
  sub_10001F1F0(&v74, a15 + 360);
  return a15;
}

uint64_t sub_10012C11C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v62 = a5;
  uint64_t v63 = a8;
  BOOL v61 = a3;
  int v59 = a13;
  uint64_t v60 = a9;
  uint64_t v89 = type metadata accessor for MPOCDefaultMonitorManager();
  uint64_t v90 = &off_1001CAE10;
  v88[0] = a1;
  uint64_t v86 = type metadata accessor for MPOCDefaultAttestationManager();
  uint64_t v87 = &off_1001C9838;
  v85[0] = a2;
  uint64_t v83 = type metadata accessor for CertificateManager();
  uint64_t v84 = &off_1001C6308;
  v82[0] = a4;
  uint64_t v80 = type metadata accessor for SignerFactory();
  uint64_t v81 = &off_1001CB9D0;
  v79[0] = a6;
  uint64_t v77 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v78 = &off_1001C84C8;
  v76[0] = a7;
  uint64_t v74 = type metadata accessor for DefaultManagedDictionary();
  uint64_t v75 = &off_1001C96D8;
  v73[0] = a10;
  uint64_t v71 = type metadata accessor for SystemInfo();
  char v72 = &off_1001CB4C8;
  v70[0] = a11;
  uint64_t v68 = type metadata accessor for SecureElement();
  uint64_t v69 = &off_1001CC7B8;
  v67[0] = a12;
  uint64_t v65 = type metadata accessor for StoreAndForwardSelector();
  id v66 = &off_1001CC120;
  v64[0] = a14;
  type metadata accessor for Reader();
  uint64_t v58 = swift_allocObject();
  uint64_t v19 = sub_10001F1A0((uint64_t)v88, v89);
  __chkstk_darwin(v19, v19);
  unint64_t v57 = (uint64_t *)((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void))(v21 + 16))();
  uint64_t v22 = sub_10001F1A0((uint64_t)v85, v86);
  __chkstk_darwin(v22, v22);
  uint64_t v24 = (uint64_t *)((char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_10001F1A0((uint64_t)v82, v83);
  __chkstk_darwin(v26, v26);
  uint64_t v28 = (uint64_t *)((char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = sub_10001F1A0((uint64_t)v79, v80);
  __chkstk_darwin(v30, v30);
  unint64_t v32 = (uint64_t *)((char *)&v56 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  uint64_t v34 = sub_10001F1A0((uint64_t)v76, v77);
  __chkstk_darwin(v34, v34);
  unint64_t v36 = (uint64_t *)((char *)&v56 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  uint64_t v38 = sub_10001F1A0((uint64_t)v73, v74);
  __chkstk_darwin(v38, v38);
  uint64_t v40 = (uint64_t *)((char *)&v56 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v41 + 16))(v40);
  uint64_t v42 = sub_10001F1A0((uint64_t)v70, v71);
  __chkstk_darwin(v42, v42);
  uint64_t v44 = (uint64_t *)((char *)&v56 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v45 + 16))(v44);
  uint64_t v46 = sub_10001F1A0((uint64_t)v67, v68);
  __chkstk_darwin(v46, v46);
  uint64_t v48 = (uint64_t *)((char *)&v56 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v49 + 16))(v48);
  uint64_t v50 = sub_10001F1A0((uint64_t)v64, v65);
  __chkstk_darwin(v50, v50);
  uint64_t v52 = (uint64_t *)((char *)&v56 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v53 + 16))(v52);
  uint64_t v54 = sub_10012B7D8(*v57, *v24, v61, *v28, v62, *v32, *v36, v63, v60, *v40, *v44, *v48, v59, *v52, v58);
  sub_100006520((uint64_t)v64);
  sub_100006520((uint64_t)v67);
  sub_100006520((uint64_t)v70);
  sub_100006520((uint64_t)v73);
  sub_100006520((uint64_t)v76);
  sub_100006520((uint64_t)v79);
  sub_100006520((uint64_t)v82);
  sub_100006520((uint64_t)v85);
  sub_100006520((uint64_t)v88);
  return v54;
}

uint64_t sub_10012C890(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10012C954(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_10012C9D0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *sub_10012CA54(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_10012C890(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_10012C954((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_10012C9D0((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_10012CAB8(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_10012CB58(uint64_t a1)
{
  uint64_t v9 = sub_100003EB0(&qword_1001DC0A8);
  uint64_t v10 = sub_100038F5C((unint64_t *)&qword_1001DC0B0, &qword_1001DC0A8);
  v8[0] = a1;
  uint64_t v2 = sub_100006788(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_10012B320(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100006520((uint64_t)v8);
  return v5;
}

uint64_t sub_10012CC18(uint64_t a1)
{
  uint64_t v3 = a1;
  sub_1000F8B20((uint64_t)v68);
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1000FBF78((uint64_t)v66);
    sub_1000FDF58((uint64_t)v64);
    sub_1000FC4BC((uint64_t)v62);
    uint64_t v4 = sub_1000FDA3C();
    sub_1000FBA34((uint64_t)v61);
    sub_1000F85DC((uint64_t)v60);
    uint64_t v6 = v69;
    uint64_t v7 = v70;
    sub_100006788(v68, v69);
    sub_100134448(4, v6, v7);
    uint64_t v8 = sub_1000FCA00();
    sub_1000FA54C((uint64_t)v58);
    sub_1000FB4F0((uint64_t)v57);
    sub_1000FA008((uint64_t)v56);
    uint64_t v9 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    int v71 = *(unsigned __int8 *)(v9 + *(int *)(type metadata accessor for Settings() + 60));
    sub_1000FE49C((uint64_t)v55);
    id v53 = [objc_allocWithZone((Class)NSOperationQueue) init];
    [v53 setMaxConcurrentOperationCount:1];
    [v53 setQualityOfService:33];
    uint64_t v10 = sub_10001F1A0((uint64_t)v66, v67);
    uint64_t v54 = v40;
    __chkstk_darwin(v10, v10);
    uint64_t v50 = (void *)((char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v12 + 16))();
    uint64_t v13 = sub_10001F1A0((uint64_t)v64, v65);
    uint64_t v52 = v40;
    __chkstk_darwin(v13, v13);
    uint64_t v48 = (void *)((char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v15 + 16))();
    uint64_t v16 = sub_10001F1A0((uint64_t)v62, v63);
    uint64_t v51 = v40;
    __chkstk_darwin(v16, v16);
    uint64_t v46 = (void *)((char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v18 + 16))();
    uint64_t v19 = sub_10001F1A0((uint64_t)v61, v61[3]);
    uint64_t v49 = v40;
    __chkstk_darwin(v19, v19);
    uint64_t v44 = (void *)((char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v21 + 16))();
    uint64_t v22 = sub_10001F1A0((uint64_t)v60, v60[3]);
    uint64_t v47 = v40;
    __chkstk_darwin(v22, v22);
    uint64_t v43 = (void *)((char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v24 + 16))();
    uint64_t v25 = sub_10001F1A0((uint64_t)v58, v58[3]);
    uint64_t v45 = v40;
    __chkstk_darwin(v25, v25);
    uint64_t v41 = (void *)((char *)v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v27 + 16))();
    uint64_t v28 = sub_10001F1A0((uint64_t)v57, v57[3]);
    uint64_t v42 = v40;
    __chkstk_darwin(v28, v28);
    uint64_t v30 = (void *)((char *)v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v31 + 16))(v30);
    uint64_t v32 = sub_10001F1A0((uint64_t)v56, v56[3]);
    v40[1] = v40;
    __chkstk_darwin(v32, v32);
    uint64_t v34 = (void *)((char *)v40 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v35 + 16))(v34);
    uint64_t v36 = sub_10001F1A0((uint64_t)v55, v55[3]);
    v40[0] = v40;
    __chkstk_darwin(v36, v36);
    uint64_t v38 = (void *)((char *)v40 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v39 + 16))(v38);
    uint64_t v3 = sub_10012C11C(*v50, *v48, v53, *v46, v4, *v44, *v43, (uint64_t)&v59, v8, *v41, *v30, *v34, v71, *v38);
    sub_100006520((uint64_t)v55);
    sub_100006520((uint64_t)v56);
    sub_100006520((uint64_t)v57);
    sub_100006520((uint64_t)v58);
    sub_100006520((uint64_t)v60);
    sub_100006520((uint64_t)v61);
    sub_100006520((uint64_t)v62);
    sub_100006520((uint64_t)v64);
    sub_100006520((uint64_t)v66);
    swift_release();
    sub_100006520((uint64_t)v68);
  }
  return v3;
}

uint64_t sub_10012D5F0()
{
  swift_bridgeObjectRelease();
  sub_100006628(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_100006628(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_100006628(*(void *)(v0 + 80), *(void *)(v0 + 88));

  return _swift_deallocObject(v0, 96, 7);
}

void sub_10012D640()
{
}

uint64_t sub_10012D648(uint64_t *a1)
{
  return sub_1001171E0(a1, **(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_10012D668(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10012D6D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10012D730()
{
  uint64_t v0 = type metadata accessor for DispatchTime();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  uint64_t v8 = (char *)aBlock - v7;
  dispatch_semaphore_t v9 = dispatch_semaphore_create(0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  id v11 = [self sharedHardwareManager];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v9;
  aBlock[4] = sub_1001312F8;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005210;
  id aBlock[3] = &unk_1001CB258;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v14 = v9;
  swift_release();
  id v15 = [v11 startSecureElementReaderSession:v13];
  _Block_release(v13);

  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v1 + 8);
  v16(v5, v0);
  OS_dispatch_semaphore.wait(timeout:)();
  v16(v8, v0);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100003E78(v17, (uint64_t)qword_1001DE9E0);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "startReaderSession(): start timed out", v20, 2u);
      swift_slowDealloc();
    }

    [v15 endSession];
    swift_release();
    swift_unknownObjectRelease();
    return 0;
  }
  else
  {
    swift_unknownObjectRelease();

    swift_beginAccess();
    uint64_t v21 = *(void **)(v10 + 16);
    id v22 = v21;
    swift_release();
  }
  return v21;
}

void *sub_10012DA98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = &v112[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v13);
  id v15 = &v112[-v14];
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 == a1 >> 32) {
        goto LABEL_12;
      }
      goto LABEL_7;
    case 2uLL:
      if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_12;
    default:
      if ((a2 & 0xFF000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_7:
      id v128 = a3;
      uint64_t v16 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      v137[0] = 0;
      id v18 = [v16 JSONObjectWithData:isa options:0 error:v137];

      if (!v18)
      {
        id v29 = v137[0];
        _convertNSErrorToError(_:)();

        return (void *)swift_willThrow();
      }
      id v19 = v137[0];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100003EB0(&qword_1001DABD8);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_12:
        if (qword_1001D92E8 != -1) {
          swift_once();
        }
        sub_100003E78(v7, (uint64_t)qword_1001DE9E0);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "trxBlob.isEmpty or could not deserialize trxBlob to JSON", v27, 2u);
          swift_slowDealloc();
        }

        sub_10002A544(4034, 0xD000000000000038, (void *)0x800000010019B5C0, 0);
        return (void *)swift_willThrow();
      }
      uint64_t v127 = v8;
      uint64_t v20 = v135;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v20 + 16) && (unint64_t v23 = sub_10000C4B0(v21, v22), (v24 & 1) != 0)) {
        sub_100006570(*(void *)(v20 + 56) + 32 * v23, (uint64_t)v137);
      }
      else {
        memset(v137, 0, 32);
      }
      swift_bridgeObjectRelease();
      if (v137[3])
      {
        if (swift_dynamicCast())
        {
          uint64_t v31 = *((void *)&v135 + 1);
          uint64_t v30 = v135;
          goto LABEL_25;
        }
      }
      else
      {
        sub_10005F4F8((uint64_t)v137, &qword_1001DD3F0);
      }
      uint64_t v30 = 0;
      uint64_t v31 = 0xE000000000000000;
LABEL_25:
      sub_1000EE43C(v30, v31, v138);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_errorRetain();
        sub_10002A544(4034, 0x546E6F6973736573, (void *)0xEC0000006E656B6FLL, v3);
        swift_errorRelease();
        swift_willThrow();
        return (void *)swift_errorRelease();
      }
      memcpy(v137, v138, sizeof(v137));
      uint64_t v32 = v138[10];
      uint64_t v33 = HIBYTE(v138[11]) & 0xFLL;
      uint64_t v126 = v138[11];
      if ((v138[11] & 0x2000000000000000) == 0) {
        uint64_t v33 = v138[10] & 0xFFFFFFFFFFFFLL;
      }
      if (!v33)
      {
        swift_bridgeObjectRelease();
        uint64_t v40 = 0xD00000000000001BLL;
        uint64_t v41 = (void *)0x800000010019B640;
LABEL_48:
        sub_10002A544(4034, v40, v41, 0);
        swift_willThrow();
        return (void *)sub_100062020((uint64_t)v138);
      }
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;
      if (*(void *)(v20 + 16))
      {
        uint64_t v37 = v34;
        swift_bridgeObjectRetain();
        sub_100068C50((uint64_t)v138);
        unint64_t v38 = sub_10000C4B0(v37, v36);
        if (v39)
        {
          sub_100006570(*(void *)(v20 + 56) + 32 * v38, (uint64_t)&v135);
        }
        else
        {
          long long v135 = 0u;
          long long v136 = 0u;
        }
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
        swift_bridgeObjectRetain();
        sub_100068C50((uint64_t)v138);
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v136 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
LABEL_47:
        uint64_t v40 = 0x746361736E617274;
        uint64_t v41 = (void *)0xED000064496E6F69;
        goto LABEL_48;
      }
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        goto LABEL_47;
      }
      uint64_t v125 = v32;
      unint64_t v42 = v134;
      uint64_t v43 = HIBYTE(v134) & 0xF;
      if ((v134 & 0x2000000000000000) == 0) {
        uint64_t v43 = v133 & 0xFFFFFFFFFFFFLL;
      }
      if (!v43)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
      uint64_t v124 = v133;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v20 + 16))
      {
        unint64_t v46 = sub_10000C4B0(v44, v45);
        if (v47)
        {
          sub_100006570(*(void *)(v20 + 56) + 32 * v46, (uint64_t)&v135);
        }
        else
        {
          long long v135 = 0u;
          long long v136 = 0u;
        }
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v136 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
LABEL_61:
        uint64_t v40 = 0x7472654364736163;
        uint64_t v41 = (void *)0xEF65746163696669;
        goto LABEL_48;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_59;
      }
      uint64_t v48 = HIBYTE(v134) & 0xF;
      if ((v134 & 0x2000000000000000) == 0) {
        uint64_t v48 = v133 & 0xFFFFFFFFFFFFLL;
      }
      if (!v48)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
      uint64_t v49 = Data.init(hexString:)();
      if (v50 >> 60 == 15)
      {
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        goto LABEL_61;
      }
      unint64_t v51 = v50;
      uint64_t v123 = v49;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v54 = *(void *)(v20 + 16);
      unint64_t v122 = v51;
      if (v54)
      {
        unint64_t v55 = sub_10000C4B0(v52, v53);
        if (v56)
        {
          sub_100006570(*(void *)(v20 + 56) + 32 * v55, (uint64_t)&v135);
        }
        else
        {
          long long v135 = 0u;
          long long v136 = 0u;
        }
        unint64_t v51 = v122;
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v136 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
LABEL_79:
        sub_10002A544(4034, 0x7473657474416573, (void *)0xED00006E6F697461, 0);
        swift_willThrow();
        sub_100062020((uint64_t)v138);
        return (void *)sub_10000BF70(v123, v51);
      }
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        goto LABEL_79;
      }
      uint64_t v57 = HIBYTE(v134) & 0xF;
      if ((v134 & 0x2000000000000000) == 0) {
        uint64_t v57 = v133 & 0xFFFFFFFFFFFFLL;
      }
      if (!v57)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        swift_bridgeObjectRelease();
        goto LABEL_78;
      }
      uint64_t v120 = Data.init(base64Encoded:options:)();
      unint64_t v59 = v58;
      swift_bridgeObjectRelease();
      unint64_t v119 = v59;
      if (v59 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
LABEL_78:
        unint64_t v51 = v122;
        goto LABEL_79;
      }
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v121 = v20;
      if (*(void *)(v20 + 16) && (unint64_t v62 = sub_10000C4B0(v60, v61), (v63 & 1) != 0))
      {
        sub_100006570(*(void *)(v121 + 56) + 32 * v62, (uint64_t)&v135);
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v136 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
LABEL_94:
        sub_10002A544(4034, 0x64496B654B6E6170, (void *)0xE800000000000000, 0);
        swift_willThrow();
        sub_100062020((uint64_t)v138);
        sub_10000BF70(v123, v122);
        return (void *)sub_10000BF70(v120, v119);
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_92;
      }
      uint64_t v64 = HIBYTE(v134) & 0xF;
      if ((v134 & 0x2000000000000000) == 0) {
        uint64_t v64 = v133 & 0xFFFFFFFFFFFFLL;
      }
      if (!v64)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        swift_bridgeObjectRelease();
        goto LABEL_94;
      }
      uint64_t v118 = Data.init(hexString:)();
      if (v65 >> 60 == 15)
      {
LABEL_92:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        goto LABEL_94;
      }
      unint64_t v66 = v65;
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v121 + 16) && (unint64_t v69 = sub_10000C4B0(v67, v68), (v70 & 1) != 0))
      {
        sub_100006570(*(void *)(v121 + 56) + 32 * v69, (uint64_t)&v135);
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v136 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
LABEL_118:
        uint64_t v79 = 0xD000000000000015;
        uint64_t v80 = (void *)0x800000010019B600;
LABEL_119:
        sub_10002A544(4034, v79, v80, 0);
        swift_willThrow();
        sub_100062020((uint64_t)v138);
        sub_10000BF70(v123, v122);
        sub_10000BF70(v120, v119);
        return (void *)sub_10000BF70(v118, v66);
      }
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        goto LABEL_118;
      }
      uint64_t v71 = HIBYTE(v134) & 0xF;
      uint64_t v116 = v133;
      unint64_t v117 = v134;
      if ((v134 & 0x2000000000000000) == 0) {
        uint64_t v71 = v133 & 0xFFFFFFFFFFFFLL;
      }
      if (!v71)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        swift_bridgeObjectRelease();
        goto LABEL_118;
      }
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v121 + 16) && (unint64_t v74 = sub_10000C4B0(v72, v73), (v75 & 1) != 0))
      {
        sub_100006570(*(void *)(v121 + 56) + 32 * v74, (uint64_t)&v135);
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v136 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
LABEL_123:
        uint64_t v80 = (void *)0x800000010019B620;
        uint64_t v79 = 0xD000000000000012;
        goto LABEL_119;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_121;
      }
      uint64_t v76 = HIBYTE(v134) & 0xF;
      if ((v134 & 0x2000000000000000) == 0) {
        uint64_t v76 = v133 & 0xFFFFFFFFFFFFLL;
      }
      if (!v76)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        swift_bridgeObjectRelease();
        goto LABEL_123;
      }
      uint64_t v115 = Data.init(base64Encoded:options:)();
      unint64_t v78 = v77;
      swift_bridgeObjectRelease();
      unint64_t v114 = v78;
      if (v78 >> 60 == 15)
      {
LABEL_121:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v138);
        goto LABEL_123;
      }
      uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v121 + 16) && (unint64_t v83 = sub_10000C4B0(v81, v82), (v84 & 1) != 0))
      {
        sub_100006570(*(void *)(v121 + 56) + 32 * v83, (uint64_t)&v135);
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v136 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0 && v132 != 2) {
          goto LABEL_139;
        }
      }
      else
      {
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
      }
      char v132 = 1;
      if (qword_1001D92E8 != -1) {
        swift_once();
      }
      uint64_t v85 = sub_100003E78(v7, (uint64_t)qword_1001DE9E0);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v127 + 16))(v15, v85, v7);
      uint64_t v86 = Logger.logObject.getter();
      int v113 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, (os_log_type_t)v113))
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v87 = 67109120;
        swift_beginAccess();
        if (v132 == 2)
        {
LABEL_171:
          __break(1u);
          goto LABEL_172;
        }
        LODWORD(v135) = v132 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v113, "trxBlob missing isPinSupported. Set to: %{BOOL}d", v87, 8u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v127 + 8))(v15, v7);
LABEL_139:
      uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v121 + 16) && (unint64_t v90 = sub_10000C4B0(v88, v89), (v91 & 1) != 0))
      {
        sub_100006570(*(void *)(v121 + 56) + 32 * v90, (uint64_t)&v135);
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v136 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0 && v131 != 2) {
          goto LABEL_154;
        }
      }
      else
      {
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
      }
      char v131 = 0;
      if (qword_1001D92E8 != -1) {
        swift_once();
      }
      uint64_t v92 = sub_100003E78(v7, (uint64_t)qword_1001DE9E0);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v127 + 16))(v12, v92, v7);
      uint64_t v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        long long v95 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v95 = 67109120;
        swift_beginAccess();
        if (v131 == 2)
        {
LABEL_172:
          __break(1u);
          JUMPOUT(0x10012EE00);
        }
        LODWORD(v135) = v131 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "trxBlob missing isPINBypassEnabled. Set to: %{BOOL}d", v95, 8u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v127 + 8))(v12, v7);
LABEL_154:
      swift_beginAccess();
      char v96 = v132;
      if (v132 == 2)
      {
        __break(1u);
LABEL_170:
        __break(1u);
        goto LABEL_171;
      }
      uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v121 + 16) && (unint64_t v99 = sub_10000C4B0(v97, v98), (v100 & 1) != 0))
      {
        sub_100006570(*(void *)(v121 + 56) + 32 * v99, (uint64_t)&v135);
      }
      else
      {
        long long v135 = 0u;
        long long v136 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v136 + 1))
      {
        int v101 = swift_dynamicCast();
        if (v101) {
          uint64_t v102 = v129;
        }
        else {
          uint64_t v102 = 0;
        }
        if (v101) {
          uint64_t v103 = v130;
        }
        else {
          uint64_t v103 = 0;
        }
      }
      else
      {
        sub_10005F4F8((uint64_t)&v135, &qword_1001DD3F0);
        uint64_t v102 = 0;
        uint64_t v103 = 0;
      }
      swift_beginAccess();
      if (v131 == 2) {
        goto LABEL_170;
      }
      char v104 = v96 & 1;
      char v105 = v131 & 1;
      sub_100062020((uint64_t)v138);
      uint64_t v106 = v128;
      uint64_t result = memcpy(v128, v137, 0x110uLL);
      uint64_t v107 = v126;
      v106[34] = v125;
      v106[35] = v107;
      v106[36] = v124;
      v106[37] = v42;
      unint64_t v108 = v122;
      v106[38] = v123;
      v106[39] = v108;
      unint64_t v109 = v119;
      v106[40] = v120;
      v106[41] = v109;
      v106[42] = v118;
      v106[43] = v66;
      unint64_t v110 = v117;
      v106[44] = v116;
      v106[45] = v110;
      unint64_t v111 = v114;
      v106[46] = v115;
      v106[47] = v111;
      *((unsigned char *)v106 + 384) = v104;
      v106[49] = v102;
      v106[50] = v103;
      *((unsigned char *)v106 + 408) = v105;
      return result;
  }
}

void *sub_10012EE10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 != a1 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 2uLL:
      if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_12;
    default:
      if ((a2 & 0xFF000000000000) == 0) {
        goto LABEL_12;
      }
LABEL_7:
      uint64_t v5 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *(void *)&__dst[0] = 0;
      id v7 = [v5 JSONObjectWithData:isa options:0 error:__dst];

      if (!v7)
      {
        id v19 = *(id *)&__dst[0];
        _convertNSErrorToError(_:)();

        return (void *)swift_willThrow();
      }
      id v8 = *(id *)&__dst[0];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_100003EB0(&qword_1001DABD8);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_12:
        if (qword_1001D92E8 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_100003E78(v14, (uint64_t)qword_1001DE9E0);
        id v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "pinBlob.isEmpty or could not deserialize pinBlob to JSON", v17, 2u);
          swift_slowDealloc();
        }

        sub_10002A544(4032, 0xD000000000000038, (void *)0x800000010019B390, 0);
        return (void *)swift_willThrow();
      }
      uint64_t v9 = v88;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v88 + 16) && (unint64_t v12 = sub_10000C4B0(v10, v11), (v13 & 1) != 0)) {
        sub_100006570(*(void *)(v88 + 56) + 32 * v12, (uint64_t)__dst);
      }
      else {
        memset(__dst, 0, 32);
      }
      swift_bridgeObjectRelease();
      if (*((void *)&__dst[1] + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v21 = *((void *)&v88 + 1);
          uint64_t v20 = v88;
          goto LABEL_25;
        }
      }
      else
      {
        sub_10005F4F8((uint64_t)__dst, &qword_1001DD3F0);
      }
      uint64_t v20 = 0;
      uint64_t v21 = 0xE000000000000000;
LABEL_25:
      sub_1000EE43C(v20, v21, __src);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_errorRetain();
        sub_10002A544(4032, 0x206E6F6973736573, (void *)0xED00006E656B6F74, v3);
        swift_errorRelease();
        swift_willThrow();
        return (void *)swift_errorRelease();
      }
      memcpy(__dst, __src, sizeof(__dst));
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;
      if (*(void *)(v88 + 16))
      {
        uint64_t v25 = v22;
        sub_100068C50((uint64_t)__src);
        unint64_t v26 = sub_10000C4B0(v25, v24);
        if (v27)
        {
          sub_100006570(*(void *)(v88 + 56) + 32 * v26, (uint64_t)&v88);
        }
        else
        {
          long long v88 = 0u;
          long long v89 = 0u;
        }
      }
      else
      {
        long long v88 = 0u;
        long long v89 = 0u;
        sub_100068C50((uint64_t)__src);
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v89 + 1))
      {
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        sub_10005F4F8((uint64_t)&v88, &qword_1001DD3F0);
LABEL_49:
        char v39 = (void *)0x800000010019B3D0;
        uint64_t v40 = 0xD00000000000001ELL;
LABEL_50:
        sub_10002A544(4032, v40, v39, 0);
        swift_willThrow();
        return (void *)sub_100062020((uint64_t)__src);
      }
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        goto LABEL_49;
      }
      uint64_t v28 = HIBYTE(v87) & 0xF;
      if ((v87 & 0x2000000000000000) == 0) {
        uint64_t v28 = v86 & 0xFFFFFFFFFFFFLL;
      }
      if (!v28)
      {
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v9 + 16) && (unint64_t v31 = sub_10000C4B0(v29, v30), (v32 & 1) != 0))
      {
        sub_100006570(*(void *)(v9 + 56) + 32 * v31, (uint64_t)&v88);
      }
      else
      {
        long long v88 = 0u;
        long long v89 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v89 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        sub_10005F4F8((uint64_t)&v88, &qword_1001DD3F0);
LABEL_53:
        uint64_t v40 = 0xD000000000000013;
        uint64_t v41 = "missing isPinBypass";
LABEL_54:
        char v39 = (void *)((unint64_t)(v41 - 32) | 0x8000000000000000);
        goto LABEL_50;
      }
      if (!swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        goto LABEL_53;
      }
      if (v86)
      {
        uint64_t v85 = v86;
        sub_100062020((uint64_t)__src);
        swift_bridgeObjectRelease();
        uint64_t v81 = 0;
        unint64_t v82 = 0;
        unint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        unint64_t v83 = 0;
        uint64_t v84 = 0;
LABEL_47:
        uint64_t result = memcpy(a3, __dst, 0x110uLL);
        a3[34] = v85;
        a3[35] = v87;
        a3[36] = v81;
        a3[37] = v33;
        a3[38] = v34;
        a3[39] = v82;
        a3[40] = v35;
        a3[41] = v36;
        a3[42] = v37;
        a3[43] = v38;
        a3[44] = v84;
        a3[45] = v83;
        return result;
      }
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v9 + 16) && (unint64_t v44 = sub_10000C4B0(v42, v43), (v45 & 1) != 0))
      {
        sub_100006570(*(void *)(v9 + 56) + 32 * v44, (uint64_t)&v88);
      }
      else
      {
        long long v88 = 0u;
        long long v89 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v89 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        sub_10005F4F8((uint64_t)&v88, &qword_1001DD3F0);
        goto LABEL_68;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_65;
      }
      uint64_t v46 = HIBYTE(v87) & 0xF;
      if ((v87 & 0x2000000000000000) == 0) {
        uint64_t v46 = v86 & 0xFFFFFFFFFFFFLL;
      }
      if (!v46)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        swift_bridgeObjectRelease();
        goto LABEL_68;
      }
      uint64_t v47 = Data.init(hexString:)();
      if (v48 >> 60 == 15)
      {
LABEL_65:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
LABEL_68:
        uint64_t v40 = 0xD000000000000019;
        uint64_t v41 = "missing or empty pinKekId";
        goto LABEL_54;
      }
      uint64_t v49 = v47;
      unint64_t v50 = v48;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v79 = v49;
      unint64_t v80 = v50;
      uint64_t v85 = v86;
      if (*(void *)(v9 + 16) && (unint64_t v53 = sub_10000C4B0(v51, v52), (v54 & 1) != 0))
      {
        sub_100006570(*(void *)(v9 + 56) + 32 * v53, (uint64_t)&v88);
      }
      else
      {
        long long v88 = 0u;
        long long v89 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v89 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        sub_10005F4F8((uint64_t)&v88, &qword_1001DD3F0);
LABEL_93:
        char v63 = (void *)0x800000010019B430;
        uint64_t v64 = 0xD00000000000001ELL;
LABEL_94:
        sub_10002A544(4032, v64, v63, 0);
        swift_willThrow();
        sub_100062020((uint64_t)__src);
        return (void *)sub_10000BF70(v49, v80);
      }
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        goto LABEL_93;
      }
      if ((v87 & 0x2000000000000000) != 0) {
        uint64_t v55 = HIBYTE(v87) & 0xF;
      }
      else {
        uint64_t v55 = v86 & 0xFFFFFFFFFFFFLL;
      }
      if (!v55)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        swift_bridgeObjectRelease();
        goto LABEL_93;
      }
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v9 + 16) && (unint64_t v58 = sub_10000C4B0(v56, v57), (v59 & 1) != 0))
      {
        sub_100006570(*(void *)(v9 + 56) + 32 * v58, (uint64_t)&v88);
      }
      else
      {
        long long v88 = 0u;
        long long v89 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v89 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        sub_10005F4F8((uint64_t)&v88, &qword_1001DD3F0);
        goto LABEL_97;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_91;
      }
      uint64_t v60 = HIBYTE(v87) & 0xF;
      if ((v87 & 0x2000000000000000) == 0) {
        uint64_t v60 = v86 & 0xFFFFFFFFFFFFLL;
      }
      if (!v60)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        swift_bridgeObjectRelease();
        goto LABEL_97;
      }
      uint64_t v84 = Data.init(base64Encoded:options:)();
      unint64_t v62 = v61;
      swift_bridgeObjectRelease();
      unint64_t v83 = v62;
      if (v62 >> 60 == 15)
      {
LABEL_91:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
LABEL_97:
        uint64_t v64 = 0xD00000000000001BLL;
        char v63 = (void *)0x800000010019B450;
        goto LABEL_94;
      }
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v9 + 16) && (unint64_t v67 = sub_10000C4B0(v65, v66), (v68 & 1) != 0))
      {
        sub_100006570(*(void *)(v9 + 56) + 32 * v67, (uint64_t)&v88);
      }
      else
      {
        long long v88 = 0u;
        long long v89 = 0u;
      }
      swift_bridgeObjectRelease();
      if (!*((void *)&v89 + 1))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)__src);
        sub_10005F4F8((uint64_t)&v88, &qword_1001DD3F0);
        goto LABEL_111;
      }
      if (swift_dynamicCast())
      {
        uint64_t v69 = HIBYTE(v87) & 0xF;
        if ((v87 & 0x2000000000000000) == 0) {
          uint64_t v69 = v86 & 0xFFFFFFFFFFFFLL;
        }
        if (!v69)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100062020((uint64_t)__src);
          swift_bridgeObjectRelease();
          goto LABEL_111;
        }
        uint64_t v78 = Data.init(base64Encoded:options:)();
        unint64_t v71 = v70;
        swift_bridgeObjectRelease();
        unint64_t v82 = v71;
        if (v71 >> 60 != 15)
        {
          uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          if (*(void *)(v9 + 16) && (unint64_t v74 = sub_10000C4B0(v72, v73), (v75 & 1) != 0))
          {
            sub_100006570(*(void *)(v9 + 56) + 32 * v74, (uint64_t)&v88);
          }
          else
          {
            long long v88 = 0u;
            long long v89 = 0u;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*((void *)&v89 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v76 = HIBYTE(v87) & 0xF;
              if ((v87 & 0x2000000000000000) == 0) {
                uint64_t v76 = v86 & 0xFFFFFFFFFFFFLL;
              }
              if (!v76)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_100062020((uint64_t)__src);
                swift_bridgeObjectRelease();
                goto LABEL_126;
              }
              uint64_t v81 = Data.init(hexString:)();
              if (v77 >> 60 != 15)
              {
                unint64_t v33 = v77;
                sub_100062020((uint64_t)__src);
                unint64_t v38 = v87;
                uint64_t v35 = v79;
                uint64_t v34 = v78;
                uint64_t v37 = v86;
                unint64_t v36 = v80;
                goto LABEL_47;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100062020((uint64_t)__src);
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100062020((uint64_t)__src);
            sub_10005F4F8((uint64_t)&v88, &qword_1001DD3F0);
          }
LABEL_126:
          sub_10002A544(4032, 0xD000000000000020, (void *)0x800000010019B490, 0);
          swift_willThrow();
          sub_100062020((uint64_t)__src);
          sub_10000BF70(v78, v71);
          goto LABEL_112;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100062020((uint64_t)__src);
LABEL_111:
      sub_10002A544(4032, 0xD00000000000001ELL, (void *)0x800000010019B470, 0);
      swift_willThrow();
      sub_100062020((uint64_t)__src);
LABEL_112:
      sub_10000BF70(v49, v80);
      return (void *)sub_10000BF70(v84, v83);
  }
}

void sub_10012FB14(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  type metadata accessor for TLV();
  sub_1000065D0(a1, a2);
  TLV.__allocating_init(dataRepresentation:)(a1, a2);
  if (!v3)
  {
    uint64_t v8 = v7;
    uint64_t v9 = TLVTag.blobInformation.unsafeMutableAddressor();
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)v8 + 200);
    uint64_t v11 = v10(*v9);
    if (v11)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 144))(v11);
      unint64_t v14 = v13;
      swift_release();
      switch(v14 >> 62)
      {
        case 1uLL:
          LODWORD(v15) = HIDWORD(v12) - v12;
          if (__OFSUB__(HIDWORD(v12), v12))
          {
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            JUMPOUT(0x10012FFCCLL);
          }
          uint64_t v15 = (int)v15;
LABEL_8:
          if (v15 != 2)
          {
LABEL_11:
            sub_100006628(v12, v14);
            goto LABEL_12;
          }
          sub_1000065D0(v12, v14);
          uint64_t v19 = sub_100115410(v12, v14);
          unint64_t v44 = v14;
          uint64_t v20 = v12;
          uint64_t v21 = v19;
          unint64_t v23 = v22;
          char v24 = Data.subscript.getter();
          sub_100006628(v21, v23);
          if (v24 < 0)
          {
            uint64_t v43 = v20;
            unint64_t v25 = 0xEA00000000004342;
            unsigned int v26 = (v24 >> 4) & 7;
            if (v26)
            {
              unint64_t v27 = v44;
              if (v26 == 2)
              {
                unint64_t v25 = 0xE500000000000000;
                unint64_t v28 = 0x342D4F5349;
              }
              else if (v26 == 1)
              {
                unint64_t v28 = 0x432D363532534541;
              }
              else
              {
                unint64_t v25 = 0x800000010019B530;
                unint64_t v28 = 0xD000000000000021;
              }
            }
            else
            {
              unint64_t v28 = 0x432D383231534541;
              unint64_t v27 = v44;
            }
            uint64_t v29 = TLVTag.cipherBlobIVOrSalt.unsafeMutableAddressor();
            uint64_t v30 = v10(*v29);
            if (v30)
            {
              unint64_t v42 = v28;
              uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 144))(v30);
              unint64_t v33 = v32;
              swift_release();
              switch(v33 >> 62)
              {
                case 1uLL:
                  LODWORD(v34) = HIDWORD(v31) - v31;
                  if (__OFSUB__(HIDWORD(v31), v31)) {
                    goto LABEL_37;
                  }
                  uint64_t v34 = (int)v34;
LABEL_29:
                  if (v34 != 16)
                  {
LABEL_32:
                    swift_bridgeObjectRelease();
                    sub_100006628(v31, v33);
                    unint64_t v27 = v44;
                    goto LABEL_33;
                  }
                  uint64_t v37 = TLVTag.cipheredData.unsafeMutableAddressor();
                  uint64_t v38 = v10(*v37);
                  if (v38)
                  {
                    uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 144))(v38);
                    unint64_t v41 = v40;
                    swift_release();
                    sub_100006628(v43, v44);
                    swift_release();
                    *a3 = v42;
                    a3[1] = v25;
                    a3[2] = v31;
                    a3[3] = v33;
                    a3[4] = v39;
                    a3[5] = v41;
                    return;
                  }
                  swift_bridgeObjectRelease();
                  sub_10002A544(4047, 0xD000000000000025, (void *)0x800000010019B590, 0);
                  swift_willThrow();
                  sub_100006628(v43, v44);
                  sub_100006628(v31, v33);
                  break;
                case 2uLL:
                  uint64_t v36 = *(void *)(v31 + 16);
                  uint64_t v35 = *(void *)(v31 + 24);
                  BOOL v18 = __OFSUB__(v35, v36);
                  uint64_t v34 = v35 - v36;
                  if (!v18) {
                    goto LABEL_29;
                  }
                  goto LABEL_38;
                case 3uLL:
                  goto LABEL_32;
                default:
                  uint64_t v34 = BYTE6(v33);
                  goto LABEL_29;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
LABEL_33:
              sub_10002A544(4047, 0xD00000000000002BLL, (void *)0x800000010019B560, 0);
              swift_willThrow();
              sub_100006628(v43, v27);
            }
          }
          else
          {
            sub_10002A544(4047, 0xD000000000000035, (void *)0x800000010019B4F0, 0);
            swift_willThrow();
            sub_100006628(v20, v44);
          }
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v12 + 16);
          uint64_t v16 = *(void *)(v12 + 24);
          BOOL v18 = __OFSUB__(v16, v17);
          uint64_t v15 = v16 - v17;
          if (!v18) {
            goto LABEL_8;
          }
          goto LABEL_36;
        case 3uLL:
          goto LABEL_11;
        default:
          uint64_t v15 = BYTE6(v14);
          goto LABEL_8;
      }
    }
    else
    {
LABEL_12:
      sub_10002A544(4047, 0xD00000000000002FLL, (void *)0x800000010019B4C0, 0);
      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_10012FFEC(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_26;
  }
  unint64_t v2 = sub_10000C4B0(0x64496B656BLL, 0xE500000000000000);
  if ((v3 & 1) == 0) {
    goto LABEL_26;
  }
  sub_100006570(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v25);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v4 = *(void *)v23 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
LABEL_26:
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100003E78(v15, (uint64_t)qword_1001DE9E0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_31;
    }
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v18 = 0;
    uint64_t v19 = "Error obtaining kekId from txnBlobJson";
    goto LABEL_30;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_32;
  }
  unint64_t v5 = sub_10000C4B0(0xD000000000000013, 0x800000010019B0F0);
  if ((v6 & 1) == 0) {
    goto LABEL_32;
  }
  sub_100006570(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v25);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_32;
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v7 = *(void *)v23 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
LABEL_32:
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003E78(v20, (uint64_t)qword_1001DE9E0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_31;
    }
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v18 = 0;
    uint64_t v19 = "Error obtaining transactionDataBlob from txnBlobJson";
    goto LABEL_30;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_36;
  }
  unint64_t v8 = sub_10000C4B0(0xD000000000000011, 0x800000010019B110);
  if ((v9 & 1) == 0) {
    goto LABEL_36;
  }
  sub_100006570(*(void *)(a1 + 56) + 32 * v8, (uint64_t)v25);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)v23 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10)
  {
LABEL_36:
    if (qword_1001D92E8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100003E78(v21, (uint64_t)qword_1001DE9E0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17)) {
      goto LABEL_31;
    }
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v18 = 0;
    uint64_t v19 = "Error obtaining seAttestationBlob from txnBlobJson";
    goto LABEL_30;
  }
  if (*(void *)(a1 + 16))
  {
    unint64_t v11 = sub_10000C4B0(0x7472654364736163, 0xEF65746163696669);
    if (v12)
    {
      sub_100006570(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v25);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = HIBYTE(v24) & 0xF;
        if ((v24 & 0x2000000000000000) == 0) {
          uint64_t v13 = *(void *)v23 & 0xFFFFFFFFFFFFLL;
        }
        if (v13) {
          return 1;
        }
      }
    }
  }
  if (qword_1001D92E8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100003E78(v22, (uint64_t)qword_1001DE9E0);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v18 = 0;
    uint64_t v19 = "Error obtaining casdCertificate from txnBlobJson";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
    swift_slowDealloc();
  }
LABEL_31:

  return 0;
}

uint64_t sub_100130478@<X0>(uint64_t *a1@<X8>)
{
  return sub_10000FEAC(a1);
}

uint64_t sub_100130494(uint64_t a1)
{
  return sub_1001160FC(a1, **(unsigned __int8 **)(v1 + 16));
}

double sub_1001304B4(_OWORD *a1)
{
  double result = 0.0;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void sub_1001304EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41,unint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,unint64_t a46)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006628(a31, a32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100130690(a37, a38, a39, a40, a41, a42, a43, a44, a45, a46);
  }
}

uint64_t sub_100130690(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a8)
  {
    sub_100006628(result, a2);
    sub_100006628(a3, a4);
    sub_100006628(a5, a6);
    swift_bridgeObjectRelease();
    return sub_100006628(a9, a10);
  }
  return result;
}

void *sub_100130720(void *a1)
{
  unint64_t v3 = a1[31];
  uint64_t v4 = a1[30];
  unint64_t v5 = a1[39];
  uint64_t v6 = a1[38];
  unint64_t v7 = a1[41];
  uint64_t v8 = a1[40];
  unint64_t v9 = a1[43];
  uint64_t v10 = a1[42];
  unint64_t v11 = a1[47];
  uint64_t v12 = a1[46];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006628(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006628(v6, v5);
  sub_100006628(v8, v7);
  sub_100006628(v10, v9);
  swift_bridgeObjectRelease();
  sub_100006628(v12, v11);
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1001308B8(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  swift_bridgeObjectRelease();
  sub_100006628(v2, v3);
  sub_100006628(v4, v5);
  return a1;
}

void *sub_100130914(void *a1)
{
  uint64_t v4 = a1[30];
  unint64_t v3 = a1[31];
  unint64_t v13 = a1[37];
  uint64_t v14 = a1[36];
  uint64_t v12 = a1[38];
  uint64_t v10 = a1[40];
  unint64_t v11 = a1[39];
  uint64_t v8 = a1[42];
  unint64_t v9 = a1[41];
  uint64_t v7 = a1[43];
  unint64_t v5 = a1[45];
  uint64_t v6 = a1[44];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000065D0(v4, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100130A94(v14, v13, v12, v11, v10, v9, v8, v7, v6, v5);
  return a1;
}

uint64_t sub_100130A94(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a8)
  {
    sub_1000065D0(result, a2);
    sub_1000065D0(a3, a4);
    sub_1000065D0(a5, a6);
    swift_bridgeObjectRetain();
    return sub_1000065D0(a9, a10);
  }
  return result;
}

uint64_t sub_100130B24(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v10 = *(_OWORD *)(a1 + 320);
  long long v11 = *(_OWORD *)(a1 + 336);
  long long v8 = *(_OWORD *)(a1 + 288);
  long long v9 = *(_OWORD *)(a1 + 304);
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    *(void *)(a1 + 352),
    *(void *)(a1 + 360));
  return a1;
}

void sub_100130BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39,unint64_t a40,uint64_t a41,unint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,unint64_t a46)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000065D0(a31, a32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100130A94(a37, a38, a39, a40, a41, a42, a43, a44, a45, a46);
  }
}

void *sub_100130D64(void *a1)
{
  uint64_t v4 = a1[30];
  unint64_t v3 = a1[31];
  unint64_t v13 = a1[37];
  uint64_t v14 = a1[36];
  uint64_t v12 = a1[38];
  uint64_t v10 = a1[40];
  unint64_t v11 = a1[39];
  uint64_t v8 = a1[42];
  unint64_t v9 = a1[41];
  uint64_t v7 = a1[43];
  uint64_t v6 = a1[44];
  unint64_t v5 = a1[45];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006628(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100130690(v14, v13, v12, v11, v10, v9, v8, v7, v6, v5);
  return a1;
}

uint64_t sub_100130EEC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100130F24()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100130F5C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100130F6C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100130FA4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100006520(v0 + 72);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

void sub_100131014(uint64_t a1, uint64_t a2)
{
  sub_10011A95C(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), v2 + 72, *(void *)(v2 + 112));
}

uint64_t sub_100131054(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013109C()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100131104()
{
  return sub_100131210((uint64_t (*)(void, void, void, void, void, void, void))sub_10011CF68);
}

uint64_t sub_10013111C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013112C()
{
  return swift_release();
}

uint64_t sub_100131134()
{
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100131184()
{
  sub_10011C398(*(void *)(v0 + 16), *(unsigned char **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100131190()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001311F8()
{
  return sub_100131210((uint64_t (*)(void, void, void, void, void, void, void))sub_10011B6B0);
}

uint64_t sub_100131210(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

void *sub_10013122C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  uint64_t result = sub_10012B398((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100131298, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_100131298@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10012B714(a1, a2);
}

uint64_t sub_1001312B8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001312F8(void *a1, void *a2)
{
  return sub_100128910(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100131300()
{
  swift_release();
  sub_100006520(v0 + 24);
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100131350()
{
  return sub_10011AF90(*(void *)(v0 + 16), (void *)(v0 + 24), *(void **)(v0 + 64));
}

uint64_t destroy for Reader.PINBlobExtract(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006628(a1[30], a1[31]);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (a1[43])
  {
    sub_100006628(a1[36], a1[37]);
    sub_100006628(a1[38], a1[39]);
    sub_100006628(a1[40], a1[41]);
    swift_bridgeObjectRelease();
    uint64_t v3 = a1[44];
    unint64_t v4 = a1[45];
    return sub_100006628(v3, v4);
  }
  return result;
}

uint64_t initializeWithCopy for Reader.PINBlobExtract(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v14;
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  uint64_t v16 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  unint64_t v17 = *(void *)(a2 + 248);
  uint64_t v32 = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000065D0(v32, v17);
  *(void *)(a1 + 240) = v32;
  *(void *)(a1 + 248) = v17;
  uint64_t v18 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v18;
  uint64_t v19 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v19;
  uint64_t v20 = *(void *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20)
  {
    uint64_t v21 = *(void *)(a2 + 288);
    unint64_t v22 = *(void *)(a2 + 296);
    sub_1000065D0(v21, v22);
    *(void *)(a1 + 288) = v21;
    *(void *)(a1 + 296) = v22;
    uint64_t v23 = *(void *)(a2 + 304);
    unint64_t v24 = *(void *)(a2 + 312);
    sub_1000065D0(v23, v24);
    *(void *)(a1 + 304) = v23;
    *(void *)(a1 + 312) = v24;
    uint64_t v25 = *(void *)(a2 + 320);
    unint64_t v26 = *(void *)(a2 + 328);
    sub_1000065D0(v25, v26);
    *(void *)(a1 + 320) = v25;
    *(void *)(a1 + 328) = v26;
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = v20;
    uint64_t v28 = *(void *)(a2 + 352);
    unint64_t v27 = *(void *)(a2 + 360);
    swift_bridgeObjectRetain();
    sub_1000065D0(v28, v27);
    *(void *)(a1 + 352) = v28;
    *(void *)(a1 + 360) = v27;
  }
  else
  {
    long long v29 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v29;
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    long long v30 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v30;
  }
  return a1;
}

uint64_t assignWithCopy for Reader.PINBlobExtract(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 240);
  unint64_t v6 = *(void *)(a2 + 248);
  sub_1000065D0(v5, v6);
  uint64_t v7 = *(void *)(a1 + 240);
  unint64_t v8 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = v5;
  *(void *)(a1 + 248) = v6;
  sub_100006628(v7, v8);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (_OWORD *)(a1 + 288);
  uint64_t v10 = (_OWORD *)(a2 + 288);
  uint64_t v11 = *(void *)(a2 + 344);
  if (*(void *)(a1 + 344))
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 288);
      unint64_t v13 = *(void *)(a2 + 296);
      sub_1000065D0(v12, v13);
      uint64_t v14 = *(void *)(a1 + 288);
      unint64_t v15 = *(void *)(a1 + 296);
      *(void *)(a1 + 288) = v12;
      *(void *)(a1 + 296) = v13;
      sub_100006628(v14, v15);
      uint64_t v16 = *(void *)(a2 + 304);
      unint64_t v17 = *(void *)(a2 + 312);
      sub_1000065D0(v16, v17);
      uint64_t v18 = *(void *)(a1 + 304);
      unint64_t v19 = *(void *)(a1 + 312);
      *(void *)(a1 + 304) = v16;
      *(void *)(a1 + 312) = v17;
      sub_100006628(v18, v19);
      uint64_t v20 = *(void *)(a2 + 320);
      unint64_t v21 = *(void *)(a2 + 328);
      sub_1000065D0(v20, v21);
      uint64_t v22 = *(void *)(a1 + 320);
      unint64_t v23 = *(void *)(a1 + 328);
      *(void *)(a1 + 320) = v20;
      *(void *)(a1 + 328) = v21;
      sub_100006628(v22, v23);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)(a2 + 352);
      unint64_t v24 = *(void *)(a2 + 360);
      sub_1000065D0(v25, v24);
      uint64_t v26 = *(void *)(a1 + 352);
      unint64_t v27 = *(void *)(a1 + 360);
      *(void *)(a1 + 352) = v25;
      *(void *)(a1 + 360) = v24;
      sub_100006628(v26, v27);
    }
    else
    {
      sub_1001319F4((uint64_t *)(a1 + 288));
      *uint64_t v9 = *v10;
      long long v36 = *(_OWORD *)(a2 + 352);
      long long v38 = *(_OWORD *)(a2 + 304);
      long long v37 = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = v36;
      *(_OWORD *)(a1 + 304) = v38;
      *(_OWORD *)(a1 + 320) = v37;
    }
  }
  else if (v11)
  {
    uint64_t v28 = *(void *)(a2 + 288);
    unint64_t v29 = *(void *)(a2 + 296);
    sub_1000065D0(v28, v29);
    *(void *)(a1 + 288) = v28;
    *(void *)(a1 + 296) = v29;
    uint64_t v30 = *(void *)(a2 + 304);
    unint64_t v31 = *(void *)(a2 + 312);
    sub_1000065D0(v30, v31);
    *(void *)(a1 + 304) = v30;
    *(void *)(a1 + 312) = v31;
    uint64_t v32 = *(void *)(a2 + 320);
    unint64_t v33 = *(void *)(a2 + 328);
    sub_1000065D0(v32, v33);
    *(void *)(a1 + 320) = v32;
    *(void *)(a1 + 328) = v33;
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    uint64_t v35 = *(void *)(a2 + 352);
    unint64_t v34 = *(void *)(a2 + 360);
    swift_bridgeObjectRetain();
    sub_1000065D0(v35, v34);
    *(void *)(a1 + 352) = v35;
    *(void *)(a1 + 360) = v34;
  }
  else
  {
    *uint64_t v9 = *v10;
    long long v39 = *(_OWORD *)(a2 + 304);
    long long v40 = *(_OWORD *)(a2 + 320);
    long long v41 = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v41;
    *(_OWORD *)(a1 + 304) = v39;
    *(_OWORD *)(a1 + 320) = v40;
  }
  return a1;
}

uint64_t *sub_1001319F4(uint64_t *a1)
{
  return a1;
}

void *initializeWithTake for Reader.PINBlobExtract(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t assignWithTake for Reader.PINBlobExtract(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v10 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a1 + 240);
  unint64_t v18 = *(void *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_100006628(v17, v18);
  uint64_t v19 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v20;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 344)) {
    goto LABEL_5;
  }
  uint64_t v21 = *(void *)(a2 + 344);
  if (!v21)
  {
    sub_1001319F4((uint64_t *)(a1 + 288));
LABEL_5:
    long long v30 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v30;
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    long long v31 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v31;
    return a1;
  }
  uint64_t v22 = *(void *)(a1 + 288);
  unint64_t v23 = *(void *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_100006628(v22, v23);
  uint64_t v24 = *(void *)(a1 + 304);
  unint64_t v25 = *(void *)(a1 + 312);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  sub_100006628(v24, v25);
  uint64_t v26 = *(void *)(a1 + 320);
  unint64_t v27 = *(void *)(a1 + 328);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  sub_100006628(v26, v27);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v21;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(a1 + 352);
  unint64_t v29 = *(void *)(a1 + 360);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  sub_100006628(v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for Reader.PINBlobExtract(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 368)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Reader.PINBlobExtract(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 368) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 368) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Reader.PINBlobExtract()
{
  return &type metadata for Reader.PINBlobExtract;
}

uint64_t destroy for Reader.PINBlobExtract.PINDetails(uint64_t *a1)
{
  sub_100006628(*a1, a1[1]);
  sub_100006628(a1[2], a1[3]);
  sub_100006628(a1[4], a1[5]);
  swift_bridgeObjectRelease();
  uint64_t v2 = a1[8];
  unint64_t v3 = a1[9];

  return sub_100006628(v2, v3);
}

uint64_t *initializeWithCopy for Reader.PINBlobExtract.PINDetails(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000065D0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000065D0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000065D0(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  uint64_t v12 = a2[8];
  unint64_t v11 = a2[9];
  swift_bridgeObjectRetain();
  sub_1000065D0(v12, v11);
  a1[8] = v12;
  a1[9] = v11;
  return a1;
}

uint64_t *assignWithCopy for Reader.PINBlobExtract.PINDetails(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000065D0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100006628(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000065D0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100006628(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000065D0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100006628(v14, v15);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a2[8];
  unint64_t v16 = a2[9];
  sub_1000065D0(v17, v16);
  uint64_t v18 = a1[8];
  unint64_t v19 = a1[9];
  a1[8] = v17;
  a1[9] = v16;
  sub_100006628(v18, v19);
  return a1;
}

__n128 initializeWithTake for Reader.PINBlobExtract.PINDetails(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t *assignWithTake for Reader.PINBlobExtract.PINDetails(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100006628(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100006628(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100006628(v8, v9);
  uint64_t v10 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a1[8];
  unint64_t v12 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_100006628(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Reader.PINBlobExtract.PINDetails(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Reader.PINBlobExtract.PINDetails(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Reader.PINBlobExtract.PINDetails()
{
  return &type metadata for Reader.PINBlobExtract.PINDetails;
}

uint64_t sub_100132008(uint64_t *a1)
{
  return sub_10012D648(a1);
}

uint64_t sub_100132020(uint64_t a1)
{
  return sub_100130494(a1);
}

uint64_t sub_100132038@<X0>(_OWORD *a1@<X8>)
{
  return sub_100041644(a1);
}

uint64_t sub_100132050()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DEC08);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DEC08);
  if (qword_1001D9250 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1010);
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100132118()
{
  uint64_t v1 = v0;
  if (qword_1001D92F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DEC08);
  long long v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    sub_100005EB8(0x74696E696564, 0xE600000000000000, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100006520(v1 + 16);
  sub_100006520(v1 + 56);
  swift_release();
  return v1;
}

uint64_t sub_1001322AC()
{
  sub_100132118();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Monitor()
{
  return self;
}

void sub_100132304(int a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v6 = v4;
  if (qword_1001D92F8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003E78(v11, (uint64_t)qword_1001DEC08);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "signal(event:component:origin:details:)", v14, 2u);
    swift_slowDealloc();
  }

  if ((unsigned __int16)a1 < 0x3E9u)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    strcpy((char *)v27, "Event value ");
    BYTE5(v27[1]) = 0;
    HIWORD(v27[1]) = -5120;
    v21._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t object = (void *)0x800000010019B9F0;
    v22._unint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v22);
    uint64_t v28 = 0;
LABEL_16:
    _print_unlocked<A, B>(_:_:)();
    v25._unint64_t countAndFlagsBits = 3026478;
    v25._uint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    _print_unlocked<A, B>(_:_:)();
    v26._unint64_t countAndFlagsBits = 0;
    v26._uint64_t object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    sub_10002B3EC(3200, v27[0], (void *)v27[1], 0);
    swift_willThrow();
    return;
  }
  if (a2 < 0x33u)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v27[0] = 0xD000000000000010;
    v27[1] = 0x800000010019BA10;
LABEL_15:
    v23._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t object = (void *)0x800000010019B9F0;
    v24._unint64_t countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v24);
    uint64_t v28 = 0;
    goto LABEL_16;
  }
  if (a3 < 0x33u)
  {
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    strcpy((char *)v27, "Origin value ");
    HIWORD(v27[1]) = -4864;
    goto LABEL_15;
  }
  uint64_t v15 = (a1 << 16) | (a2 << 8) | a3;
  uint64_t v16 = v6[5];
  uint64_t v17 = v6[6];
  sub_100006788(v6 + 2, v16);
  sub_100006788(v6 + 7, v6[10]);
  if (qword_1001D9218 != -1) {
    swift_once();
  }
  id v18 = sub_1000D422C(byte_1001E0FBF);
  (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t))(v17 + 8))(v15, v18, a4, v16, v17);
  if (v5)
  {
    v27[0] = v5;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    uint64_t v19 = String.init<A>(describing:)();
    sub_10002B3EC(3201, v19, v20, 0);
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    sub_1000488DC(v15, 0, 0);
  }
}

void sub_100132764(int a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
}

uint64_t sub_100132788(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = type metadata accessor for MPOCDefaultAttestationManager();
  uint64_t v16 = &off_1001C9838;
  *(void *)&long long v14 = a2;
  *(_OWORD *)(a4 + 104) = xmmword_10018D980;
  *(_OWORD *)(a4 + 120) = xmmword_10018D990;
  *(_OWORD *)(a4 + 136) = xmmword_10018D990;
  if (qword_1001D92F8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DEC08);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_100005EB8(0xD000000000000038, 0x800000010019B9B0, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10001F1F0(a1, a4 + 16);
  sub_10001F1F0(&v14, a4 + 56);
  *(void *)(a4 + 96) = a3;
  return a4;
}

uint64_t sub_100132970()
{
  sub_100100424((uint64_t)v19);
  if (v0)
  {
    swift_release();
  }
  else
  {
    sub_1000FDF58((uint64_t)v17);
    uint64_t v3 = sub_1000FF9EC();
    uint64_t v4 = sub_10001F1A0((uint64_t)v17, v18);
    __chkstk_darwin(v4, v4);
    uint64_t v6 = (void *)((char *)&v16[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v7 + 16))(v6);
    uint64_t v8 = *v6;
    uint64_t v9 = type metadata accessor for MPOCDefaultAttestationManager();
    v16[3] = v9;
    v16[4] = &off_1001C9838;
    v16[0] = v8;
    type metadata accessor for Monitor();
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = sub_10001F1A0((uint64_t)v16, v9);
    __chkstk_darwin(v11, v11);
    uint64_t v13 = (void *)((char *)&v16[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    uint64_t v1 = sub_100132788(v19, *v13, v3, v10);
    sub_100006520((uint64_t)v16);
    sub_100006520((uint64_t)v17);
    swift_release();
  }
  return v1;
}

uint64_t sub_100132BC4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  unsigned int v23 = a4;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v16);
  uint64_t v18 = &v22[-v17];
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v19(v15, v10);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, uint64_t, uint64_t))(a6 + 32))(a1, a2, a3, v23, v18, v24, a6);
  v19(v18, v10);
  return v20;
}

uint64_t sub_100132D4C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  unsigned int v23 = a4;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v16);
  uint64_t v18 = &v22[-v17];
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v19(v15, v10);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, uint64_t, uint64_t))(a6 + 40))(a1, a2, a3, v23, v18, v24, a6);
  v19(v18, v10);
  return v20;
}

uint64_t sub_100132ED4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DECF0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DECF0);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100132F9C(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 32);
  if (!*(void *)(v6 + 16)) {
    goto LABEL_5;
  }
  sub_1000065D0(a1, a2);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1001618E4(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_100006628(a1, a2);
LABEL_5:
    sub_100029D50(6000, 0xD00000000000002CLL, (void *)0x800000010019BA70, 0);
    swift_willThrow();
    return v3;
  }
  uint64_t v9 = *(void *)(v6 + 56) + 16 * v7;
  uint64_t v3 = *(void *)v9;
  sub_1000065D0(*(void *)v9, *(void *)(v9 + 8));
  swift_bridgeObjectRelease();
  sub_100006628(a1, a2);
  return v3;
}

void sub_1001330A0(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  sub_1000658C8(a1, a2, &v9);
  swift_endAccess();
  unint64_t v4 = *((void *)&v9 + 1);
  sub_10000BF70(v9, *((unint64_t *)&v9 + 1));
  if (v4 >> 60 == 15)
  {
    if (qword_1001D9300 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100003E78(v5, (uint64_t)qword_1001DECF0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "VolatilePersisting.delete: key not present", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001331D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VolatilePersisting()
{
  return self;
}

uint64_t sub_10013323C(uint64_t a1, unint64_t a2)
{
  return sub_100132F9C(a1, a2);
}

uint64_t sub_100133260(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = *v4;
  swift_beginAccess();
  sub_1000065D0(a1, a2);
  sub_1000065D0(a3, a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v9 + 32);
  *(void *)(v9 + 32) = 0x8000000000000000;
  sub_100105D64(a3, a4, a1, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v9 + 32) = v12;
  swift_bridgeObjectRelease();
  sub_100006628(a1, a2);
  return swift_endAccess();
}

void sub_10013333C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100133360@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1001341A4(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    char v8 = &v5[2 * a1];
    long long v10 = *((_OWORD *)v8 + 2);
    uint64_t v9 = v8 + 4;
    *a2 = v10;
    uint64_t v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v9, v9 + 2, 16 * v11);
      long long v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100133440@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1001341B8(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = &v5[5 * a1];
      long long v10 = *((_OWORD *)v9 + 2);
      v9 += 4;
      uint64_t v11 = v9[2];
      long long v13 = *(_OWORD *)(v9 + 3);
      uint64_t result = (uint64_t)memmove(v9, v9 + 5, 40 * v8);
      long long v5[2] = v7;
      *uint64_t v2 = v5;
      *(_OWORD *)a2 = v10;
      *(void *)(a2 + 16) = v11;
      *(_OWORD *)(a2 + 24) = v13;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100133544(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1001341CC(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100133624()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DEE20);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DEE20);
  if (qword_1001D9278 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1088);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001336EC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  if (qword_1001D9308 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DEE20);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    long long v10 = (uint8_t *)swift_slowAlloc();
    v18[4] = v3;
    v18[0] = swift_slowAlloc();
    *(_DWORD *)long long v10 = 136315138;
    sub_100005EB8(0xD000000000000011, 0x800000010019BB80, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "MockPINAppletProxy.%s - NOT FOR RELEASE", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v11 = (void **)(v4 + 32);
  swift_beginAccess();
  if (*(void *)(*(void *)(v4 + 32) + 16) > 0xBuLL)
  {
    sub_10002AFBC(12006, 0, 0, 0);
    return swift_willThrow();
  }
  else
  {
    swift_beginAccess();
    uint64_t v12 = *v11;
    sub_1000065D0(a1, a2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v11 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = sub_10015A580(0, v12[2] + 1, 1, v12);
      *uint64_t v11 = v12;
    }
    unint64_t v15 = v12[2];
    unint64_t v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t v12 = sub_10015A580((void *)(v14 > 1), v15 + 1, 1, v12);
      *uint64_t v11 = v12;
    }
    v12[2] = v15 + 1;
    uint64_t v16 = &v12[2 * v15];
    v16[4] = a1;
    void v16[5] = a2;
    return swift_endAccess();
  }
}

uint64_t sub_100133988()
{
  uint64_t v1 = v0;
  if (qword_1001D9308 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DEE20);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    sub_100005EB8(0xD000000000000011, 0x800000010019BB60, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MockPINAppletProxy.%s - NOT FOR RELEASE", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = v1 + 32;
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 32) + 16))
  {
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)v6 + 16))
    {
      sub_1001341E0(&v10);
      unint64_t v8 = *((void *)&v10 + 1);
      if (*((void *)&v10 + 1) >> 60 == 15)
      {
        sub_100133360(*(void *)(*(void *)v6 + 16) - 1, &v10);
        unint64_t v8 = *((void *)&v10 + 1);
        uint64_t v9 = v10;
      }
      else
      {
        uint64_t v9 = v10;
      }
      swift_endAccess();
      return sub_100006628(v9, v8);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_10002AFBC(12007, 0, 0, 0);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100133BC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D9308 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DEE20);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    unsigned char v28[4] = sub_100005EB8(0xD000000000000012, 0x800000010019BB40, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "MockPINAppletProxy.%s Generating MOCK PIN data - NOT FOR RELEASE", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(*(void *)(v2 + 32) + 16);
  if (v9)
  {
    uint64_t v27 = *(void *)(*(void *)(v2 + 32) + 16);
    type metadata accessor for TLV();
    uint64_t v10 = *(void *)TLVTag.cipherBlob.unsafeMutableAddressor();
    uint64_t v11 = static Data.randomBytes(count:)(0x2AuLL);
    long long v13 = TLV.__allocating_init(tag:value:)(v10, v11, v12);
    uint64_t v14 = *(void *)TLVTag.keyBlob.unsafeMutableAddressor();
    uint64_t v15 = static Data.randomBytes(count:)(0x189uLL);
    uint64_t v17 = TLV.__allocating_init(tag:value:)(v14, v15, v16);
    uint64_t v18 = (*(uint64_t (**)(void))(*v13 + 168))();
    unint64_t v20 = v19;
    uint64_t v21 = (*(uint64_t (**)(void))(*v17 + 168))();
    unint64_t v23 = v22;
    uint64_t v24 = static Data.randomBytes(count:)(0x18uLL);
    unint64_t v26 = v25;
    swift_release();
    uint64_t result = swift_release();
    uint64_t v9 = v27;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v21 = 0;
    uint64_t v24 = 0;
    unint64_t v20 = 0xC000000000000000;
    unint64_t v23 = 0xC000000000000000;
    unint64_t v26 = 0xC000000000000000;
  }
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v26;
  *(unsigned char *)(a1 + 48) = v9 == 0;
  return result;
}

uint64_t sub_100133E9C()
{
  uint64_t v1 = v0;
  if (qword_1001D9308 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DEE20);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    v7[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    sub_100005EB8(0xD000000000000012, 0x800000010019BB20, v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MockPINAppletProxy.%s - NOT FOR RELEASE", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  *(void *)(v1 + 32) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100134044()
{
  sub_10000BF70(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  sub_100006628(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MockPINAppletProxy()
{
  return self;
}

uint64_t sub_1001340B0()
{
  uint64_t result = sub_100134250();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1001340E8(uint64_t a1, unint64_t a2)
{
  return sub_1001336EC(a1, a2);
}

uint64_t sub_10013410C()
{
  return sub_100133988();
}

double sub_100134130@<D0>(uint64_t a1@<X8>)
{
  sub_100133BC8((uint64_t)v7);
  if (!v1)
  {
    double result = *(double *)v7;
    long long v4 = v7[1];
    long long v5 = v7[2];
    char v6 = v8;
    *(_OWORD *)a1 = v7[0];
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    *(unsigned char *)(a1 + 48) = v6;
  }
  return result;
}

uint64_t sub_100134180()
{
  return sub_100133E9C();
}

void *sub_1001341A4(void *a1)
{
  return sub_10015A580(0, a1[2], 0, a1);
}

void *sub_1001341B8(void *a1)
{
  return sub_10015AEAC(0, a1[2], 0, a1);
}

void *sub_1001341CC(void *a1)
{
  return sub_10015A8E0(0, a1[2], 0, a1);
}

uint64_t sub_1001341E0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v5 = v3[2];
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v5 - 1;
      *a1 = *(_OWORD *)&v3[2 * v6 + 4];
      v3[2] = v6;
      *uint64_t v1 = v3;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)sub_1001341A4(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100134250()
{
  uint64_t v1 = v0;
  if (qword_1001D9308 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DEE20);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100005EB8(0xD000000000000022, 0x800000010019BAF0, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MockPINAppletProxy.%s - NOT FOR RELEASE", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  v1[4] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v6 = static Data.randomBytes(count:)(0x140uLL);
  uint64_t v7 = v1[2];
  unint64_t v8 = v1[3];
  v1[2] = v6;
  v1[3] = v9;
  sub_1000065D0(v6, v9);
  sub_10000BF70(v7, v8);
  sub_1000065D0(v1[5], v1[6]);
  return v6;
}

uint64_t sub_100134448(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xEB000000004E4F49;
  unint64_t v5 = 0x5441545345545441;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0xED00004E4F495441;
      unint64_t v5 = 0x52554749464E4F43;
      break;
    case 2:
      unint64_t v4 = 0xEA0000000000474ELL;
      unint64_t v5 = 0x49524F54494E4F4DLL;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000014;
      unint64_t v4 = 0x800000010019BBF0;
      break;
    case 4:
      unint64_t v4 = 0xE600000000000000;
      unint64_t v5 = 0x524544414552;
      break;
    case 5:
      unint64_t v4 = 0xEE004C454E4E4148;
      unint64_t v5 = 0x435F455255434553;
      break;
    case 6:
      unint64_t v4 = 0xEE0052454C4C4F52;
      unint64_t v5 = 0x544E4F435F4E4950;
      break;
    case 7:
      unint64_t v4 = 0x800000010019ABC0;
      unint64_t v5 = 0xD000000000000011;
      break;
    default:
      break;
  }
  (*(void (**)(unint64_t, unint64_t, uint64_t))(a3 + 8))(v5, v4, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001345D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_beginAccess();
  uint64_t v9 = *(void *)(a1 + 112);
  if (!*(void *)(v9 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_10000C4B0(a2, a3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    sub_100009300(a1 + 16, (uint64_t)v33);
    sub_100009300(a1 + 56, (uint64_t)v32);
    uint64_t v29 = *(void *)(a1 + 96);
    uint64_t v13 = sub_10001F1A0((uint64_t)v32, v32[3]);
    long long v30 = &v28;
    __chkstk_darwin(v13, v13);
    uint64_t v15 = (uint64_t *)((char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    uint64_t v34 = v4;
    uint64_t v17 = *v15;
    uint64_t v18 = type metadata accessor for MPOCDefaultAttestationManager();
    v31[3] = v18;
    _OWORD v31[4] = &off_1001C9838;
    v31[0] = v17;
    type metadata accessor for ComponentAuditor();
    unint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = sub_10001F1A0((uint64_t)v31, v18);
    __chkstk_darwin(v20, v20);
    unint64_t v22 = (uint64_t *)((char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v23 + 16))(v22);
    uint64_t v24 = *v22;
    swift_bridgeObjectRetain();
    uint64_t v25 = v29;
    swift_retain();
    uint64_t v12 = sub_100134AF4(a2, a3, v33, v24, v25, v19);
    sub_100006520((uint64_t)v31);
    sub_100006520((uint64_t)v32);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32[0] = *(void *)(a1 + 112);
    *(void *)(a1 + 112) = 0x8000000000000000;
    sub_1001068C4((uint64_t)v12, a2, a3, isUniquelyReferenced_nonNull_native);
    *(void *)(a1 + 112) = v32[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_6;
  }
  uint64_t v12 = *(void **)(*(void *)(v9 + 56) + 8 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t result = type metadata accessor for ComponentAuditor();
  a4[3] = result;
  a4[4] = &off_1001CB510;
  *a4 = v12;
  return result;
}

uint64_t sub_100134930()
{
  sub_100006520(v0 + 16);
  sub_100006520(v0 + 56);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ComponentAuditorFactory()
{
  return self;
}

uint64_t sub_1001349AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *v2;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v13 = v10;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  sub_100003EB0(&qword_1001DB7B8);
  OS_dispatch_queue.sync<A>(flags:execute:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100134AD4@<X0>(void *a1@<X8>)
{
  return sub_1001345D0(v1[2], v1[3], v1[4], a1);
}

void *sub_100134AF4(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v18 = type metadata accessor for MPOCDefaultAttestationManager();
  unint64_t v19 = &off_1001C9838;
  *(void *)&long long v17 = a4;
  if (qword_1001D9328 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001DF210);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "init(componentName:monitorLogger:attestationManager:monitorAnalytics:)", v15, 2u);
    swift_slowDealloc();
  }

  a6[2] = a1;
  a6[3] = a2;
  sub_10001F1F0(a3, (uint64_t)(a6 + 4));
  sub_10001F1F0(&v17, (uint64_t)(a6 + 9));
  a6[14] = a5;
  return a6;
}

void *sub_100134C38()
{
  uint64_t v1 = (void *)type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100100424((uint64_t)v26);
  if (!v0)
  {
    sub_1000FDF58((uint64_t)v24);
    uint64_t v7 = sub_1000FF9EC();
    sub_10001F160();
    (*(void (**)(char *, void, void *))(v2 + 104))(v5, enum case for DispatchQoS.QoSClass.background(_:), v1);
    uint64_t v8 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, void *))(v2 + 8))(v5, v1);
    uint64_t v9 = sub_10001F1A0((uint64_t)v24, v25);
    uint64_t v27 = &v21;
    __chkstk_darwin(v9, v9);
    char v11 = (void *)((char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v12 + 16))(v11);
    uint64_t v13 = *v11;
    uint64_t v14 = type metadata accessor for MPOCDefaultAttestationManager();
    uint64_t v23[3] = v14;
    v23[4] = &off_1001C9838;
    v23[0] = v13;
    type metadata accessor for ComponentAuditorFactory();
    uint64_t v1 = (void *)swift_allocObject();
    uint64_t v15 = sub_10001F1A0((uint64_t)v23, v14);
    __chkstk_darwin(v15, v15);
    long long v17 = (void *)((char *)&v22[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    uint64_t v19 = *v17;
    v22[3] = v14;
    v22[4] = &off_1001C9838;
    v22[0] = v19;
    sub_100009300((uint64_t)v26, (uint64_t)(v1 + 2));
    sub_100009300((uint64_t)v22, (uint64_t)(v1 + 7));
    v1[12] = v7;
    v1[13] = v8;
    type metadata accessor for ComponentAuditor();
    uint64_t v20 = Dictionary.init(minimumCapacity:)();
    sub_100006520((uint64_t)v22);
    sub_100006520((uint64_t)v26);
    v1[14] = v20;
    sub_100006520((uint64_t)v23);
    sub_100006520((uint64_t)v24);
  }
  swift_release();
  return v1;
}

uint64_t sub_100134FCC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DF038);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DF038);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100135094@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D9310 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DF038);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100005EB8(0x64616552656B616DLL, 0xEC00000029287265, &v14);
    uint64_t v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Provider.%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v8 = swift_retain();
  uint64_t result = sub_10012CC18(v8);
  if (!v2)
  {
    uint64_t v10 = result;
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_100005EB8(0x64616552656B616DLL, 0xEC00000029287265, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Provider.%s: done", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t result = type metadata accessor for Reader();
    a1[3] = result;
    a1[4] = (uint64_t)&off_1001CB008;
    *a1 = v10;
  }
  return result;
}

uint64_t sub_10013536C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D9310 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DF038);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100005EB8(0xD000000000000012, 0x800000010019BC50, &v14);
    uint64_t v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Provider.%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v8 = swift_retain();
  uint64_t result = sub_100082448(v8);
  if (!v2)
  {
    uint64_t v10 = result;
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_100005EB8(0xD000000000000012, 0x800000010019BC50, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Provider.%s: done", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t result = type metadata accessor for Configurator();
    a1[3] = result;
    a1[4] = (uint64_t)&off_1001C8890;
    *a1 = v10;
  }
  return result;
}

uint64_t sub_10013563C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D9310 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DF038);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100005EB8(0x696E6F4D656B616DLL, 0xED00002928726F74, &v13);
    uint64_t v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Provider.%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_retain();
  uint64_t result = sub_100132970();
  if (!v2)
  {
    uint64_t v9 = result;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v12 = 136315138;
      sub_100005EB8(0x696E6F4D656B616DLL, 0xED00002928726F74, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Provider.%s: done", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t result = type metadata accessor for Monitor();
    a1[3] = result;
    a1[4] = (uint64_t)&off_1001CB3E8;
    *a1 = v9;
  }
  return result;
}

uint64_t sub_10013591C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D9310 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DF038);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100005EB8(0xD000000000000013, 0x800000010019BC30, &v14);
    uint64_t v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Provider.%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v8 = swift_retain();
  uint64_t result = sub_100056F80(v8);
  if (!v2)
  {
    uint64_t v10 = result;
    os_log_type_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_100005EB8(0xD000000000000013, 0x800000010019BC30, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Provider.%s: done", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t result = type metadata accessor for DefaultPINController();
    a1[3] = result;
    a1[4] = (uint64_t)&off_1001C7EF0;
    *a1 = v10;
  }
  return result;
}

uint64_t sub_100135BEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D9310 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DF038);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100005EB8(0x6552524F656B616DLL, 0xEE00292872656461, &v13);
    uint64_t v2 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Provider.%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_retain();
  uint64_t result = (uint64_t)sub_100040878();
  if (!v2)
  {
    uint64_t v9 = result;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v12 = 136315138;
      sub_100005EB8(0x6552524F656B616DLL, 0xEE00292872656461, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Provider.%s: done", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t result = type metadata accessor for ORReader();
    a1[3] = result;
    a1[4] = (uint64_t)&off_1001C73A0;
    *a1 = v9;
  }
  return result;
}

uint64_t sub_100135ECC()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Provider()
{
  return self;
}

uint64_t sub_100135F28@<X0>(uint64_t *a1@<X8>)
{
  return sub_10013536C(a1);
}

uint64_t sub_100135F4C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10013563C(a1);
}

uint64_t sub_100135F70@<X0>(uint64_t *a1@<X8>)
{
  return sub_100135094(a1);
}

uint64_t sub_100135F94@<X0>(uint64_t *a1@<X8>)
{
  return sub_10013591C(a1);
}

uint64_t sub_100135FB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100135BEC(a1);
}

id sub_100135FDC()
{
  id v0 = [objc_allocWithZone((Class)LAContext) init];
  id result = [v0 setInteractionNotAllowed:1];
  qword_1001E1150 = (uint64_t)v0;
  return result;
}

uint64_t sub_10013602C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SystemInfo()
{
  return self;
}

uint64_t sub_100136060()
{
  unint64_t v0 = sub_100106BA4(&off_1001C4110);
  sub_100003EB0(&qword_1001DF208);
  uint64_t result = swift_arrayDestroy();
  qword_1001E1158 = v0;
  return result;
}

uint64_t sub_1001360B8(uint64_t *a1)
{
  return _sSC16SPRJSONErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC16SPRJSONErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D9320 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E1158;
  if (*(void *)(qword_1001E1158 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0x6F7272454E4F534ALL;
  }
  return v5;
}

unint64_t sub_1001361A4(uint64_t a1)
{
  unint64_t result = sub_1001361CC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001361CC()
{
  unint64_t result = qword_1001D9890;
  if (!qword_1001D9890)
  {
    type metadata accessor for JSONError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9890);
  }
  return result;
}

uint64_t sub_100136224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100136870(a2);
  if (qword_1001D9210 != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, byte_1001E0FBE, v7, a3, a4);

  return swift_release();
}

uint64_t sub_1001362E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1001D9210 != -1) {
    swift_once();
  }
  uint64_t v6 = byte_1001E0FBE;
  unint64_t v7 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 8))(a1, v6, v7, a2, a3);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001363A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DF210);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DF210);
  if (qword_1001D9250 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1010);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100136468(char a1, char a2, uint64_t a3)
{
  char v4 = v3;
  uint64_t v7 = dword_10018DC74[a1] | (sub_1001046D0(v4[2], v4[3]) << 8) | 1u;
  sub_100006788(v4 + 9, v4[12]);
  id v8 = sub_1000D422C(a2);
  uint64_t v9 = v3[7];
  uint64_t v10 = v3[8];
  sub_100006788(v4 + 4, v4[7]);
  (*(void (**)(uint64_t, id, uint64_t, uint64_t, uint64_t))(v10 + 8))(v7, v8, a3, v9, v10);
  sub_1000488DC(v7, (uint64_t)v8, a2);
}

uint64_t sub_1001367D8()
{
  swift_bridgeObjectRelease();
  sub_100006520(v0 + 32);
  sub_100006520(v0 + 72);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ComponentAuditor()
{
  return self;
}

void sub_10013684C(char a1, char a2, uint64_t a3)
{
}

uint64_t sub_100136870(uint64_t a1)
{
  sub_100003EB0((uint64_t *)&unk_1001D8E40);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v33 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  uint64_t v28 = v5;
  int64_t v29 = (unint64_t)(v7 + 63) >> 6;
  long long v30 = (void *)result;
  uint64_t v31 = result + 64;
  if ((v8 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  int64_t v11 = v3;
  for (unint64_t i = v10 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    long long v17 = (uint64_t *)(*(void *)(v33 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    sub_100009300(*(void *)(v33 + 56) + 40 * i, (uint64_t)v32);
    sub_100006788(v32, v32[3]);
    swift_bridgeObjectRetain();
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = v21;
    sub_100006520((uint64_t)v32);
    uint64_t result = (uint64_t)v30;
    *(void *)(v31 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v23 = (void *)(v30[6] + 16 * i);
    *uint64_t v23 = v18;
    v23[1] = v19;
    uint64_t v24 = (uint64_t *)(v30[7] + 16 * i);
    *uint64_t v24 = v20;
    v24[1] = v22;
    uint64_t v25 = v30[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v30[2] = v27;
    int64_t v3 = v11;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v29) {
      return result;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v3 + 1;
    if (!v14)
    {
      int64_t v15 = v3 + 2;
      if (v3 + 2 >= v29) {
        return result;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v3 + 3;
        if (v3 + 3 >= v29) {
          return result;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    int64_t v11 = v15;
  }
  uint64_t v16 = v3 + 4;
  if (v3 + 4 >= v29) {
    return result;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v29) {
      return result;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VolatilePersistenceFactory()
{
  return self;
}

void *sub_100136AD4@<X0>(void *a1@<X8>)
{
  unint64_t v2 = sub_1001049A0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = type metadata accessor for VolatilePersisting();
  uint64_t result = (void *)swift_allocObject();
  result[2] = 0x676E6967676F4CLL;
  result[3] = 0xE700000000000000;
  result[4] = v2;
  a1[3] = v3;
  a1[4] = &off_1001CB3F8;
  *a1 = result;
  return result;
}

unint64_t sub_100136B58()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_100136B74()
{
  unint64_t v0 = sub_100106B64(&off_1001C3988);
  sub_100003EB0(&qword_1001DF3A0);
  uint64_t result = swift_arrayDestroy();
  qword_1001E1160 = v0;
  return result;
}

unint64_t sub_100136BCC(uint64_t *a1)
{
  return _sSC25SPRConfigurationErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC25SPRConfigurationErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D9330 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E1160;
  if (*(void *)(qword_1001E1160 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v6._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0xD000000000000013;
  }
  return v5;
}

unint64_t sub_100136CD4(uint64_t a1)
{
  unint64_t result = sub_100136CFC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100136CFC()
{
  unint64_t result = qword_1001D9858;
  if (!qword_1001D9858)
  {
    type metadata accessor for ConfigurationError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9858);
  }
  return result;
}

uint64_t sub_100136D54(uint64_t a1, char a2)
{
  if (a2)
  {
    switch(a1)
    {
      case 7:
        uint64_t v5 = 2029;
        break;
      case 8:
        uint64_t v5 = 2036;
        break;
      case 9:
        uint64_t v5 = 2037;
        break;
      case 10:
        uint64_t v5 = 2038;
        break;
      default:
        uint64_t v5 = 2023;
        break;
    }
    return sub_10002A974(v5, 0, 0, 0);
  }
  else
  {
    type metadata accessor for ConfigurationError(0);
    sub_100003EB0(&qword_1001DA140);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(void *)(inited + 32) = 0xD000000000000011;
    *(void *)(inited + 40) = 0x8000000100196740;
    *(void *)(inited + 72) = &type metadata for Double;
    *(void *)(inited + 48) = a1;
    sub_100004D6C(inited);
    sub_100136CFC();
    _BridgedStoredNSError.init(_:userInfo:)();
    return v6;
  }
}

uint64_t *AID_PAY_APPLET.unsafeMutableAddressor()
{
  if (qword_1001D9340 != -1) {
    swift_once();
  }
  return &AID_PAY_APPLET;
}

uint64_t *AID_PIN_APPLET.unsafeMutableAddressor()
{
  if (qword_1001D9350 != -1) {
    swift_once();
  }
  return &AID_PIN_APPLET;
}

void sub_100136F44()
{
  qword_1001E1168 = (uint64_t)&off_1001C59F0;
}

uint64_t sub_100136F58()
{
  uint64_t result = sub_10012CB58((uint64_t)&off_1001C4680);
  AID_PAY_APPLET = result;
  *(void *)algn_1001E1178 = v1;
  return result;
}

uint64_t sub_100136F84()
{
  if (qword_1001D9340 != -1) {
    swift_once();
  }
  Swift::String v1 = Data.hexString()();
  uint64_t result = v1._countAndFlagsBits;
  xmmword_1001E1180 = (__int128)v1;
  return result;
}

uint64_t sub_100136FE4()
{
  uint64_t result = sub_10012CB58((uint64_t)&off_1001C46B0);
  AID_PIN_APPLET = result;
  *(void *)algn_1001E1198 = v1;
  return result;
}

uint64_t sub_100137010()
{
  if (qword_1001D9350 != -1) {
    swift_once();
  }
  Swift::String v1 = Data.hexString()();
  uint64_t result = v1._countAndFlagsBits;
  xmmword_1001E11A0 = (__int128)v1;
  return result;
}

uint64_t sub_100137070()
{
  uint64_t result = sub_10012CB58((uint64_t)&off_1001C45B0);
  qword_1001E11B0 = result;
  *(void *)algn_1001E11B8 = v1;
  return result;
}

uint64_t sub_10013709C()
{
  if (qword_1001D9360 != -1) {
    swift_once();
  }
  Swift::String v1 = Data.hexString()();
  uint64_t result = v1._countAndFlagsBits;
  xmmword_1001E11C0 = (__int128)v1;
  return result;
}

uint64_t sub_1001370FC()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  char v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.data(using:allowLossyConversion:)();
  unint64_t v7 = v6;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v7 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1001E11D0 = v5;
    *(void *)algn_1001E11D8 = v7;
  }
  return result;
}

uint64_t sub_10013720C()
{
  uint64_t result = Data.init(hexString:)(825241648, 0xE400000000000000);
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_1001E11E0 = result;
    *(void *)algn_1001E11E8 = v1;
  }
  return result;
}

uint64_t sub_10013724C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TaggedObject()
{
  return self;
}

uint64_t *sub_100137280(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 11, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 11, v7);
    }
  }
  return a1;
}

uint64_t sub_1001373CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 11, v2);
  if (!result)
  {
    char v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_10013749C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 11, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  }
  return a1;
}

void *sub_1001375AC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 11, v6);
  int v10 = v8(a2, 11, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  return a1;
}

void *sub_100137720(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 11, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  }
  return a1;
}

void *sub_100137830(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 11, v6);
  int v10 = v8(a2, 11, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 11, v6);
  return a1;
}

uint64_t sub_1001379A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001379B8);
}

uint64_t sub_1001379B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 0xC) {
    return v5 - 11;
  }
  else {
    return 0;
  }
}

uint64_t sub_100137A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100137A38);
}

uint64_t sub_100137A38(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 11);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_100137ABC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 11, v2);
}

uint64_t sub_100137B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 11, v4);
}

uint64_t type metadata accessor for BackendSetting()
{
  uint64_t result = qword_1001DF4B8;
  if (!qword_1001DF4B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100137BE0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_100137C58()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BackendSetting();
  __chkstk_darwin(v6 - 8, v7);
  int v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10013939C(v0, (uint64_t)v9);
  uint64_t v10 = 0x746C75616665642ELL;
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, 11, v1))
  {
    case 1u:
      return v10;
    case 2u:
      uint64_t v10 = 0x646F72702ELL;
      break;
    case 3u:
      uint64_t v10 = 0x65676174732ELL;
      break;
    case 4u:
      uint64_t v10 = 0x747265632ELL;
      break;
    case 5u:
      uint64_t v10 = 828469550;
      break;
    case 6u:
      uint64_t v10 = 845246766;
      break;
    case 7u:
      uint64_t v10 = 862023982;
      break;
    case 8u:
      uint64_t v10 = 878801198;
      break;
    case 9u:
      uint64_t v10 = 895578414;
      break;
    case 0xAu:
      uint64_t v10 = 912355630;
      break;
    case 0xBu:
      uint64_t v10 = 0x656E696C66666F2ELL;
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v9, v1);
      v14[0] = 0x286C72752ELL;
      v14[1] = 0xE500000000000000;
      sub_100139528();
      v11._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._unint64_t countAndFlagsBits = 41;
      v12._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      uint64_t v10 = v14[0];
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
      break;
  }
  return v10;
}

uint64_t sub_100137F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = URL.scheme.getter();
  if (!v5) {
    goto LABEL_56;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  if (v4 == 1886680168 && v5 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v6 == 0x7370747468 && v7 == 0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a2, a1, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 11, v8);
  }
  if ((v6 != 0x746C7561666564 || v7 != 0xE700000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v6 == 1685025392 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(void *)(v13 - 8);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a2, 2, 11, v13);
    }
    if (v6 == 0x6567617473 && v7 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v15 = type metadata accessor for URL();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, 3, 11, v15);
    }
    if (v6 == 1953654115 && v7 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v17 = type metadata accessor for URL();
      uint64_t v18 = *(void *)(v17 - 8);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, 4, 11, v17);
    }
    if (v6 == 3236209 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v19 = type metadata accessor for URL();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, v19);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a2, 5, 11, v19);
    }
    if (v6 == 3301745 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v21 = type metadata accessor for URL();
      uint64_t v22 = *(void *)(v21 - 8);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, v21);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a2, 6, 11, v21);
    }
    if (v6 == 3367281 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v23 = type metadata accessor for URL();
      uint64_t v24 = *(void *)(v23 - 8);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, v23);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(a2, 7, 11, v23);
    }
    if (v6 == 3432817 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v25 = type metadata accessor for URL();
      uint64_t v26 = *(void *)(v25 - 8);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a1, v25);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(a2, 8, 11, v25);
    }
    if (v6 == 3498353 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v27 = type metadata accessor for URL();
      uint64_t v28 = *(void *)(v27 - 8);
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, v27);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(a2, 9, 11, v27);
    }
    if (v6 == 3563889 && v7 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v29 = type metadata accessor for URL();
      uint64_t v30 = *(void *)(v29 - 8);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a1, v29);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(a2, 10, 11, v29);
    }
    if (v6 == 0x656E696C66666FLL && v7 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_55:
      uint64_t v32 = type metadata accessor for URL();
      uint64_t v33 = *(void *)(v32 - 8);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a1, v32);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(a2, 11, 11, v32);
    }
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_55;
    }
LABEL_56:
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    uint64_t v34 = type metadata accessor for URL();
    sub_100139528();
    v35._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    sub_100029F68(7001, 0xD000000000000015, (void *)0x800000010019BDA0, 0);
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
  }
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 11, v11);
}

uint64_t sub_100138968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BackendSetting();
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v51 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  uint64_t v28 = (char *)&v49 - v27;
  __chkstk_darwin(v26, v29);
  uint64_t v33 = (char *)&v49 - v32;
  if (!*(void *)(a1 + 24))
  {
    sub_10005F4F8(a1, &qword_1001DD3F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(a2, 1, 11, v19);
  }
  uint64_t v49 = v31;
  uint64_t v50 = v30;
  uint64_t v52 = a1;
  sub_10013945C(a1, (uint64_t)&v55);
  if (!v57)
  {
    sub_10005F4F8((uint64_t)&v55, &qword_1001DD3F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
LABEL_8:
    sub_10005F4F8((uint64_t)v18, (uint64_t *)&unk_1001DD410);
    uint64_t v36 = v52;
    sub_10013945C(v52, (uint64_t)&v55);
    if (v57)
    {
      if (swift_dynamicCast())
      {
        uint64_t v39 = v53;
        long long v38 = (void *)v54;
        URL.init(string:)();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) != 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v45 = v50;
          (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v50, v15, v19);
          uint64_t v46 = v49;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v49, v45, v19);
          uint64_t v47 = v51;
          uint64_t v48 = v58;
          sub_100137F18(v46, v51);
          if (v48)
          {
            (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v45, v19);
            return sub_10005F4F8(v36, &qword_1001DD3F0);
          }
          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v45, v19);
          sub_10005F4F8(v36, &qword_1001DD3F0);
          uint64_t v44 = v47;
          return sub_1001394C4(v44, a2);
        }
        sub_10005F4F8((uint64_t)v15, (uint64_t *)&unk_1001DD410);
        unint64_t v55 = 0;
        unint64_t v56 = 0xE000000000000000;
        _StringGuts.grow(_:)(27);
        swift_bridgeObjectRelease();
        unint64_t v55 = 0xD000000000000019;
        unint64_t v56 = 0x800000010019BD80;
        v40._unint64_t countAndFlagsBits = v39;
        v40._uint64_t object = v38;
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        uint64_t v41 = v55;
        unint64_t v42 = (void *)v56;
LABEL_15:
        sub_100029F68(7001, v41, v42, 0);
        swift_willThrow();
        return sub_10005F4F8(v36, &qword_1001DD3F0);
      }
    }
    else
    {
      sub_10005F4F8((uint64_t)&v55, &qword_1001DD3F0);
    }
    unint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    unint64_t v53 = 0xD000000000000019;
    unint64_t v54 = 0x800000010019BD60;
    uint64_t result = sub_10013945C(v36, (uint64_t)&v55);
    if (!v57)
    {
      __break(1u);
      return result;
    }
    v43._unint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    uint64_t v41 = v53;
    unint64_t v42 = (void *)v54;
    goto LABEL_15;
  }
  int v34 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, v34 ^ 1u, 1, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v33, v18, v19);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v28, v33, v19);
  uint64_t v35 = v58;
  sub_100137F18((uint64_t)v28, (uint64_t)v10);
  if (!v35)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, v19);
    sub_10005F4F8(v52, &qword_1001DD3F0);
    uint64_t v44 = (uint64_t)v10;
    return sub_1001394C4(v44, a2);
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v33, v19);
  uint64_t v36 = v52;
  return sub_10005F4F8(v36, &qword_1001DD3F0);
}

uint64_t sub_100138F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BackendSetting();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100003EB0(&qword_1001DF4C8);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 56)];
  sub_10013939C(a1, (uint64_t)v17);
  sub_10013939C(a2, v18);
  uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  switch(v19((uint64_t)v17, 11, v4))
  {
    case 1u:
      if (v19(v18, 11, v4) != 1) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 2u:
      if (v19(v18, 11, v4) != 2) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 3u:
      if (v19(v18, 11, v4) != 3) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 4u:
      if (v19(v18, 11, v4) != 4) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 5u:
      if (v19(v18, 11, v4) != 5) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 6u:
      if (v19(v18, 11, v4) != 6) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 7u:
      if (v19(v18, 11, v4) != 7) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 8u:
      if (v19(v18, 11, v4) != 8) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 9u:
      if (v19(v18, 11, v4) != 9) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 0xAu:
      if (v19(v18, 11, v4) != 10) {
        goto LABEL_25;
      }
      goto LABEL_5;
    case 0xBu:
      if (v19(v18, 11, v4) != 11) {
        goto LABEL_25;
      }
LABEL_5:
      sub_100139400((uint64_t)v17);
      char v20 = 1;
      break;
    default:
      sub_10013939C((uint64_t)v17, (uint64_t)v12);
      if (v19(v18, 11, v4))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
LABEL_25:
        sub_10005F4F8((uint64_t)v17, &qword_1001DF4C8);
        char v20 = 0;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v8, v18, v4);
        char v20 = static URL.== infix(_:_:)();
        uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
        v22(v8, v4);
        v22(v12, v4);
        sub_100139400((uint64_t)v17);
      }
      break;
  }
  return v20 & 1;
}

uint64_t sub_10013939C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BackendSetting();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100139400(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BackendSetting();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013945C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DD3F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001394C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BackendSetting();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100139528()
{
  unint64_t result = qword_1001DCC78;
  if (!qword_1001DCC78)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCC78);
  }
  return result;
}

uint64_t sub_100139580()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DF4D0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DF4D0);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100139648(void *a1)
{
  unint64_t v74 = a1;
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v66 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  uint64_t v65 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v69 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  char v20 = (char *)&v61 - v19;
  __chkstk_darwin(v18, v21);
  unint64_t v70 = (char *)&v61 - v22;
  id v23 = [self current];
  id v24 = [v23 bundle];

  NSString v25 = String._bridgeToObjectiveC()();
  NSString v26 = String._bridgeToObjectiveC()();
  id v71 = v24;
  id v27 = [v24 URLForResource:v25 withExtension:v26];

  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_9;
  }
  uint64_t v64 = v1;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v28(v11, v20, v12);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v29(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
LABEL_9:
    sub_10008CCF8((uint64_t)v11);
    sub_100029D50(6998, 0xD000000000000026, (void *)0x800000010019BE10, 0);
    swift_willThrow();

    goto LABEL_10;
  }
  uint64_t v30 = v12;
  uint64_t v31 = v70;
  v28(v70, v11, v30);
  id v32 = objc_allocWithZone((Class)NSManagedObjectModel);
  URL._bridgeToObjectiveC()(v33);
  uint64_t v35 = v34;
  id v36 = [v32 initWithContentsOfURL:v34];

  if (v36)
  {
    id v62 = v36;
    long long v37 = sub_100006788(v74, v74[3]);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v20, *v37 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v30);
    if (qword_1001D9140 != -1) {
      swift_once();
    }
    sub_100003E78(v30, (uint64_t)qword_1001E0EF8);
    char v38 = static URL.== infix(_:_:)();
    char v63 = *(void (**)(char *, uint64_t))(v13 + 8);
    v63(v20, v30);
    if (v38)
    {
      v29(v65, 1, 1, v30);
      (*(void (**)(char *, void, uint64_t))(v67 + 104))(v66, enum case for URL.DirectoryHint.inferFromPath(_:), v68);
      URL.init(filePath:directoryHint:relativeTo:)();
    }
    else
    {
      sub_100006788(v74, v74[3]);
      URL.appendingPathComponent(_:)();
    }
    id v41 = objc_allocWithZone((Class)NSPersistentStoreDescription);
    URL._bridgeToObjectiveC()(v42);
    uint64_t v44 = v43;
    id v45 = [v41 initWithURL:v43];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v45 setOption:v46 forKey:NSPersistentStoreFileProtectionKey];

    id v47 = objc_allocWithZone((Class)NSPersistentContainer);
    id v48 = v62;
    NSString v49 = String._bridgeToObjectiveC()();
    id v50 = [v47 initWithName:v49 managedObjectModel:v48];

    sub_100003EB0((uint64_t *)&unk_1001DA5A0);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_100189F80;
    *(void *)(v51 + 32) = v45;
    aBlock[0] = v51;
    specialized Array._endMutation()();
    sub_100006680(0, &qword_1001DF5B8);
    id v52 = v45;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v50 setPersistentStoreDescriptions:isa];

    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = 0;
    unint64_t v55 = (uint64_t *)(v54 + 16);
    aBlock[4] = sub_10013A4E8;
    aBlock[5] = v54;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100139F94;
    id aBlock[3] = &unk_1001CB590;
    unint64_t v56 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v50 loadPersistentStoresWithCompletionHandler:v56];
    _Block_release(v56);
    swift_beginAccess();
    uint64_t v57 = *v55;
    if (!*v55)
    {

      char v59 = v63;
      v63(v69, v30);
      v59(v70, v30);
      uint64_t v39 = v72;
      uint64_t v60 = v74;
      sub_100009300((uint64_t)v74, v72 + 16);
      *(void *)(v39 + 56) = v50;
      swift_release();
      sub_100006520((uint64_t)v60);
      return v39;
    }
    swift_errorRetain();
    sub_100029D50(6004, 0, 0, v57);
    swift_willThrow();

    swift_errorRelease();
    uint64_t v58 = v63;
    v63(v69, v30);
    v58(v70, v30);
    swift_release();
  }
  else
  {
    sub_100029D50(6998, 0xD000000000000015, (void *)0x800000010019BE40, 0);
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v31, v30);
  }
LABEL_10:
  type metadata accessor for CoreDataManager();
  uint64_t v39 = v72;
  swift_deallocPartialClassInstance();
  sub_100006520((uint64_t)v74);
  return v39;
}

uint64_t sub_100139F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 16) = a2;
  swift_errorRetain();
  return swift_errorRelease();
}

void sub_100139F94(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t sub_10013A020()
{
  uint64_t v1 = v0;
  p_ivar_lyt = &GlobalState.ivar_lyt;
  id v3 = [*(id *)(v0 + 56) persistentStoreCoordinator];
  id v4 = [v3 persistentStores];

  sub_100006680(0, &qword_1001DF5B0);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6) {
      goto LABEL_18;
    }
  }
  if (v6 < 1) {
    __break(1u);
  }
  uint64_t v7 = 0;
  unint64_t v8 = v5 & 0xC000000000000001;
  uint64_t v9 = &GlobalState.ivar_lyt;
  uint64_t v31 = v6;
  unint64_t v32 = v5;
  unint64_t v35 = v5 & 0xC000000000000001;
  do
  {
    if (v8) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v5 + 8 * v7 + 32);
    }
    uint64_t v12 = v11;
    id v13 = [*(id *)(v1 + 56) p_ivar_lyt[463]];
    id v36 = 0;
    unsigned int v14 = [v13 v9[465] v12, &v36];

    if (v14)
    {
      id v10 = v36;
    }
    else
    {
      id v15 = v36;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1001D9380 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_100003E78(v16, (uint64_t)qword_1001DF4D0);
      id v17 = v12;
      swift_errorRetain();
      id v18 = v17;
      swift_errorRetain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        int v34 = (void *)swift_slowAlloc();
        id v36 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315394;
        uint64_t v22 = p_ivar_lyt;
        id v23 = [v18 debugDescription];
        os_log_t log = v19;
        uint64_t v24 = v1;
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;

        p_ivar_lyt = v22;
        uint64_t v28 = v25;
        uint64_t v1 = v24;
        *(void *)(v21 + 4) = sub_100005EB8(v28, v27, (uint64_t *)&v36);

        unint64_t v5 = v32;
        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2112;
        uint64_t v29 = _convertErrorToNSError(_:)();
        *(void *)(v21 + 14) = v29;
        *int v34 = v29;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v20, "Failed to remove %s: %@", (uint8_t *)v21, 0x16u);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v6 = v31;
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      unint64_t v8 = v35;
      uint64_t v9 = (void **)(&GlobalState + 16);
    }
    ++v7;
  }
  while (v6 != v7);
LABEL_18:
  swift_bridgeObjectRelease();
  sub_100006520(v1 + 16);

  return v1;
}

uint64_t sub_10013A458()
{
  sub_10013A020();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CoreDataManager()
{
  return self;
}

uint64_t sub_10013A4B0()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013A4E8(uint64_t a1, uint64_t a2)
{
  return sub_100139F34(a1, a2, v2);
}

uint64_t sub_10013A4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013A500()
{
  return swift_release();
}

uint64_t sub_10013A508()
{
  unint64_t v0 = sub_100106B44(&off_1001C38C0);
  sub_100003EB0(&qword_1001DF5C0);
  uint64_t result = swift_arrayDestroy();
  qword_1001E11F8 = v0;
  return result;
}

unint64_t sub_10013A560(uint64_t *a1)
{
  return _sSC25SPRSecureChannelErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC25SPRSecureChannelErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D9388 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E11F8;
  if (*(void *)(qword_1001E11F8 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v6._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0xD000000000000013;
  }
  return v5;
}

unint64_t sub_10013A668(uint64_t a1)
{
  unint64_t result = sub_10013A690();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10013A690()
{
  unint64_t result = qword_1001D9820;
  if (!qword_1001D9820)
  {
    type metadata accessor for SecureChannelError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9820);
  }
  return result;
}

uint64_t sub_10013A6E8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
      if (v2 < 0)
      {
        __break(1u);
        goto LABEL_18;
      }
      if ((a1 & 0xC000000000000001) == 0) {
        break;
      }
      uint64_t v4 = 0;
      while (v2 != v4)
      {
        uint64_t v5 = (const void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t result = (uint64_t)CFCopyDescription(v5);
        if (!result) {
          goto LABEL_18;
        }
        swift_unknownObjectRelease();
        ++v4;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v2 == v4) {
          goto LABEL_16;
        }
      }
      __break(1u);
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_16;
      }
    }
    Swift::String v6 = (id *)(a1 + 32);
    while (1)
    {
      id v7 = *v6;
      uint64_t result = (uint64_t)CFCopyDescription(v7);
      if (!result) {
        break;
      }

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      ++v6;
      if (!--v2) {
        goto LABEL_16;
      }
    }
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    type metadata accessor for CFString(0);
    uint64_t v8 = Array.description.getter();
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t sub_10013A8B8(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    sub_10002B658();
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    return v19;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t result = sub_10014B9C4(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = 0;
      do
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v5 = SecCertificateRef.pemRepresentation.getter();
        uint64_t v7 = v6;
        swift_unknownObjectRelease();
        unint64_t v9 = _swiftEmptyArrayStorage[2];
        unint64_t v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1) {
          sub_10014B9C4(v8 > 1, v9 + 1, 1);
        }
        ++v4;
        _swiftEmptyArrayStorage[2] = v9 + 1;
        id v10 = &_swiftEmptyArrayStorage[2 * v9];
        v10[4] = v5;
        v10[5] = v7;
      }
      while (v2 != v4);
    }
    else
    {
      uint64_t v11 = 0;
      do
      {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
        unint64_t v13 = SecCertificateRef.pemRepresentation.getter();
        uint64_t v15 = v14;

        unint64_t v17 = _swiftEmptyArrayStorage[2];
        unint64_t v16 = _swiftEmptyArrayStorage[3];
        if (v17 >= v16 >> 1) {
          sub_10014B9C4(v16 > 1, v17 + 1, 1);
        }
        ++v11;
        _swiftEmptyArrayStorage[2] = v17 + 1;
        id v18 = &_swiftEmptyArrayStorage[2 * v17];
        v18[4] = v13;
        uint64_t v18[5] = v15;
      }
      while (v2 != v11);
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013AAC4(uint64_t *a1, uint64_t *a2)
{
  return sub_10014B4E4(*a1, *a2);
}

uint64_t sub_10013AAD0()
{
  return sub_10013A6E8(*v0);
}

ValueMetadata *type metadata accessor for SPRCertificate()
{
  return &type metadata for SPRCertificate;
}

uint64_t sub_10013AAE8()
{
  uint64_t v1 = 7104878;
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v2._uint64_t object = (void *)0x800000010018DF00;
  v2._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v2);
  v3._uint64_t object = (void *)0x800000010019BEE0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  sub_100029CEC(v0, (uint64_t)v20, &qword_1001DA130);
  sub_100029CEC((uint64_t)v20, (uint64_t)v21, &qword_1001DA130);
  if (sub_100029A28((uint64_t)v21) == 1)
  {
    uint64_t object = (void *)0xE300000000000000;
    uint64_t countAndFlagsBits = 7104878;
  }
  else
  {
    Swift::String v6 = String.redactedToken()();
    uint64_t countAndFlagsBits = v6._countAndFlagsBits;
    uint64_t object = v6._object;
  }
  uint64_t v7 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  v8._uint64_t object = (void *)0x800000010019BF00;
  v8._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v8);
  sub_100029CEC(v0 + 272, (uint64_t)v19, &qword_1001DF5C8);
  sub_100029CEC((uint64_t)v19, (uint64_t)&v22, &qword_1001DF5C8);
  if (v23)
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  else
  {
    uint64_t v24 = v22;
    sub_10013AD14();
    uint64_t v10 = BinaryInteger.description.getter();
    unint64_t v9 = v11;
  }
  unint64_t v12 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000017;
  v13._uint64_t object = (void *)0x8000000100199C10;
  String.append(_:)(v13);
  sub_100029CEC(v0 + 288, (uint64_t)v18, &qword_1001DE478);
  sub_100029CEC((uint64_t)v18, (uint64_t)&v24, &qword_1001DE478);
  if (v24)
  {
    uint64_t v1 = Array.description.getter();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v15 = (void *)0xE300000000000000;
  }
  v16._uint64_t countAndFlagsBits = v1;
  v16._uint64_t object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_10013AD14()
{
  unint64_t result = qword_1001DF5D0;
  if (!qword_1001DF5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF5D0);
  }
  return result;
}

uint64_t sub_10013AD68(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003EB0(&qword_1001DF640);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100006788(a1, a1[3]);
  sub_10013D68C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100029CEC(v3, (uint64_t)v13, &qword_1001DA130);
  sub_100029CEC((uint64_t)v13, (uint64_t)v12, &qword_1001DA130);
  HIBYTE(v11) = 0;
  sub_10013D7BC();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v12[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100029CEC(v3 + 288, (uint64_t)v14, &qword_1001DE478);
    sub_100029CEC((uint64_t)v14, (uint64_t)v12, &qword_1001DE478);
    HIBYTE(v11) = 2;
    sub_100003EB0(&qword_1001DF5F0);
    sub_10013D61C(&qword_1001DF620, (void (*)(void))sub_10008550C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_10013AFB0()
{
  unint64_t v1 = 0x7078456E656B6F74;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_10013B01C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10013D134(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10013B044(uint64_t a1)
{
  unint64_t v2 = sub_10013D68C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013B080(uint64_t a1)
{
  unint64_t v2 = sub_10013D68C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013B0BC()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_10013AAE8();
}

void *sub_10013B0F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10013CD80(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x128uLL);
  }
  return result;
}

uint64_t sub_10013B14C(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_10013AD68(a1);
}

BOOL sub_10013B1A0(void *__src, const void *a2)
{
  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return sub_10013B99C((uint64_t)v4, (uint64_t)__dst);
}

uint64_t sub_10013B1F8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100003EB0(&qword_1001DF618);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006788(a1, a1[3]);
  sub_10013D520();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v12[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100029CEC(v3 + 32, (uint64_t)v13, &qword_1001DE478);
    sub_100029CEC((uint64_t)v13, (uint64_t)v12, &qword_1001DE478);
    v11[15] = 2;
    sub_100003EB0(&qword_1001DF5F0);
    sub_10013D61C(&qword_1001DF620, (void (*)(void))sub_10008550C);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10013B3F8(uint64_t a1)
{
  unint64_t v2 = sub_10013D520();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013B434(uint64_t a1)
{
  unint64_t v2 = sub_10013D520();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10013B470@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10013D2A8(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10013B4B8(void *a1)
{
  return sub_10013B1F8(a1);
}

uint64_t sub_10013B4F4()
{
  _StringGuts.grow(_:)(54);
  v1._uint64_t countAndFlagsBits = 0xD000000000000016;
  v1._uint64_t object = (void *)0x800000010018DF60;
  String.append(_:)(v1);
  v2._uint64_t object = (void *)0x800000010019BF20;
  v2._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  uint64_t v3 = *v0;
  uint64_t v4 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._uint64_t object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x3A65756C6176202CLL;
  v6._uint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  uint64_t v7 = v0[2];
  uint64_t v8 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._uint64_t object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD000000000000013;
  v10._uint64_t object = (void *)0x800000010019BF40;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10013B648(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001DF608);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100006788(a1, a1[3]);
  sub_10013D5C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10013B7D0()
{
  uint64_t v1 = 0x65756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 0x7461636572706564;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7461636572706564;
  }
}

uint64_t sub_10013B830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10013D810(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10013B858(uint64_t a1)
{
  unint64_t v2 = sub_10013D5C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013B894(uint64_t a1)
{
  unint64_t v2 = sub_10013D5C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10013B8D4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10013D9A0(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10013B91C(void *a1)
{
  return sub_10013B648(a1);
}

BOOL sub_10013B934(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_10013BD00(v5, v7);
}

BOOL sub_10013B980(uint64_t a1, uint64_t a2)
{
  return sub_10013BD88(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

BOOL sub_10013B99C(uint64_t a1, uint64_t a2)
{
  sub_100029CEC(a1, (uint64_t)v54, &qword_1001DA130);
  sub_100029CEC(a2, (uint64_t)v55, &qword_1001DA130);
  sub_100029CEC((uint64_t)v54, (uint64_t)v56, &qword_1001DA130);
  if (sub_100029A28((uint64_t)v56) == 1)
  {
    sub_100029CEC((uint64_t)v55, (uint64_t)v50, &qword_1001DA130);
    if (sub_100029A28((uint64_t)v50) == 1) {
      goto LABEL_3;
    }
LABEL_7:
    sub_100029CEC((uint64_t)v54, (uint64_t)v50, &qword_1001DA130);
    sub_100029CEC((uint64_t)v55, (uint64_t)&v51, &qword_1001DA130);
    sub_1000F3554((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
    sub_1000F3554((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
    sub_1000F33C8((uint64_t)v50);
    return 0;
  }
  sub_100029CEC((uint64_t)v55, (uint64_t)v50, &qword_1001DA130);
  if (sub_100029A28((uint64_t)v50) == 1) {
    goto LABEL_7;
  }
  sub_100029CEC((uint64_t)v54, (uint64_t)v20, &qword_1001DA130);
  sub_100029CEC((uint64_t)v55, (uint64_t)v35, &qword_1001DA130);
  uint64_t v6 = v20[2];
  uint64_t v7 = v20[3];
  uint64_t v9 = v20[4];
  uint64_t v8 = v20[5];
  uint64_t v10 = v35[2];
  uint64_t v11 = v35[3];
  uint64_t v13 = v35[4];
  uint64_t v12 = v35[5];
  if ((v20[0] != v35[0] || v20[1] != v35[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (v6 != v10 || v7 != v11) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }
  if (v8)
  {
    if (!v12 || (v9 != v13 || v8 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  v52[8] = v29;
  v52[9] = v30;
  v52[10] = v31;
  v52[11] = v32;
  v52[4] = v25;
  v52[5] = v26;
  v52[6] = v27;
  v52[7] = v28;
  v52[0] = v21;
  v52[1] = v22;
  v52[2] = v23;
  v52[3] = v24;
  v53[8] = v44;
  v53[9] = v45;
  v53[10] = v46;
  v53[11] = v47;
  v53[4] = v40;
  v53[5] = v41;
  v53[6] = v42;
  v53[7] = v43;
  v53[0] = v36;
  v53[1] = v37;
  void v53[2] = v38;
  uint64_t v53[3] = v39;
  if (!sub_1000EDF20((uint64_t)v52, (uint64_t)v53)) {
    return 0;
  }
  uint64_t v16 = v33;
  unint64_t v17 = v34;
  uint64_t v18 = v48;
  unint64_t v19 = v49;
  sub_1000F3554((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
  sub_1000F3554((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
  LOBYTE(v16) = sub_10014C798(v16, v17, v18, v19);
  sub_1000F3554((uint64_t)v55, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100029ABC);
  sub_1000F3554((uint64_t)v54, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100029ABC);
  if ((v16 & 1) == 0) {
    return 0;
  }
LABEL_3:
  char v4 = *(unsigned char *)(a2 + 280);
  if (*(unsigned char *)(a1 + 280))
  {
    if (!*(unsigned char *)(a2 + 280)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 272) != *(void *)(a2 + 272)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  uint64_t v14 = *(void *)(a1 + 288);
  uint64_t v15 = *(void *)(a2 + 288);
  if (v14) {
    return v15 && (sub_10014AA88(v14, v15) & 1) != 0;
  }
  return !v15;
}

BOOL sub_10013BD00(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (a1[2] == a2[2] && a1[3] == a2[3]) {
      return a1[4] == a2[4];
    }
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if (v8) {
      return a1[4] == a2[4];
    }
  }
  return result;
}

BOOL sub_10013BD88(uint64_t a1, char a2, unint64_t a3, char a4)
{
  if (a2)
  {
    switch(a1)
    {
      case 1:
        if ((a4 & 1) == 0 || a3 != 1) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if ((a4 & 1) == 0 || a3 != 2) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if ((a4 & 1) == 0 || a3 != 3) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 4:
        if ((a4 & 1) == 0 || a3 != 4) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 5:
        if ((a4 & 1) == 0 || a3 != 5) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 6:
        if ((a4 & 1) == 0 || a3 != 6) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 7:
        if ((a4 & 1) == 0 || a3 != 7) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 8:
        if ((a4 & 1) == 0 || a3 != 8) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 9:
        if ((a4 & 1) == 0 || a3 != 9) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 10:
        if ((a4 & 1) == 0 || a3 != 10) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 11:
        if ((a4 & 1) == 0 || a3 != 11) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 12:
        if ((a4 & 1) == 0 || a3 != 12) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 13:
        if ((a4 & 1) == 0 || a3 != 13) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 14:
        if ((a4 & 1) == 0 || a3 != 14) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 15:
        if ((a4 & 1) == 0 || a3 <= 0xE) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if ((a4 & 1) == 0 || *(double *)&a3 != 0.0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (a4 & 1) == 0 && *(double *)&a1 == *(double *)&a3;
  }
  return result;
}

void *sub_10013BF50@<X0>(void *a1@<X8>)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10013C0B8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v1) {
    return (void *)swift_release();
  }
  swift_release();
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  char v7 = v16;
  uint64_t v8 = v17;
  sub_100062184(v12);
  if (v5)
  {
    sub_1000EE43C(v4, v5, __src);
    memcpy(v10, __src, 0x110uLL);
    BitString.init(data:unusedBits:)(v10);
    uint64_t v9 = v10;
  }
  else
  {
    uint64_t v9 = v12;
  }
  sub_100029CEC((uint64_t)v9, (uint64_t)v11, &qword_1001DA130);
  sub_100029CEC((uint64_t)v11, (uint64_t)v10, &qword_1001DA130);
  v10[34] = v6;
  LOBYTE(v10[35]) = v7;
  v10[36] = v8;
  return memcpy(a1, v10, 0x128uLL);
}

unint64_t sub_10013C0B8()
{
  unint64_t result = qword_1001DF5D8;
  if (!qword_1001DF5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF5D8);
  }
  return result;
}

uint64_t destroy for MPOCBackendMonitorResponse()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MPOCBackendMonitorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MPOCBackendMonitorResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MPOCBackendMonitorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCBackendMonitorResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCBackendMonitorResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCBackendMonitorResponse()
{
  return &type metadata for MPOCBackendMonitorResponse;
}

uint64_t destroy for MPOCMonitorResponse(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006628(a1[30], a1[31]);
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MPOCMonitorResponse(void *__dst, void *__src)
{
  uint64_t v4 = __src[1];
  if (v4)
  {
    *__dst = *__src;
    __dst[1] = v4;
    uint64_t v5 = __src[3];
    __dst[2] = __src[2];
    __dst[3] = v5;
    uint64_t v6 = __src[5];
    __dst[4] = __src[4];
    __dst[5] = v6;
    uint64_t v7 = __src[7];
    __dst[6] = __src[6];
    __dst[7] = v7;
    uint64_t v8 = __src[9];
    __dst[8] = __src[8];
    __dst[9] = v8;
    uint64_t v9 = __src[11];
    __dst[10] = __src[10];
    __dst[11] = v9;
    *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
    *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
    unsigned char __dst[14] = __src[14];
    uint64_t v10 = __src[17];
    __dst[16] = __src[16];
    _OWORD __dst[17] = v10;
    uint64_t v11 = __src[19];
    __dst[18] = __src[18];
    __dst[19] = v11;
    uint64_t v12 = __src[21];
    __dst[20] = __src[20];
    __dst[21] = v12;
    uint64_t v13 = __src[23];
    __dst[22] = __src[22];
    __dst[23] = v13;
    uint64_t v14 = __src[25];
    __dst[24] = __src[24];
    __dst[25] = v14;
    uint64_t v15 = __src[27];
    __dst[26] = __src[26];
    __dst[27] = v15;
    uint64_t v16 = __src[29];
    __dst[28] = __src[28];
    __dst[29] = v16;
    unint64_t v17 = __src[31];
    uint64_t v20 = __src[30];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000065D0(v20, v17);
    __dst[30] = v20;
    __dst[31] = v17;
    uint64_t v18 = __src[33];
    __dst[32] = __src[32];
    __dst[33] = v18;
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(__dst, __src, 0x110uLL);
  }
  __dst[34] = __src[34];
  *((unsigned char *)__dst + 280) = *((unsigned char *)__src + 280);
  __dst[36] = __src[36];
  swift_bridgeObjectRetain();
  return __dst;
}

void *assignWithCopy for MPOCMonitorResponse(void *__dst, void *__src)
{
  uint64_t v4 = __src[1];
  if (!__dst[1])
  {
    if (v4)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      __dst[6] = __src[6];
      __dst[7] = __src[7];
      __dst[8] = __src[8];
      __dst[9] = __src[9];
      __dst[10] = __src[10];
      __dst[11] = __src[11];
      __dst[12] = __src[12];
      __dst[13] = __src[13];
      uint64_t v10 = __src[14];
      *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
      unsigned char __dst[14] = v10;
      __dst[16] = __src[16];
      _OWORD __dst[17] = __src[17];
      __dst[18] = __src[18];
      __dst[19] = __src[19];
      __dst[20] = __src[20];
      __dst[21] = __src[21];
      __dst[22] = __src[22];
      __dst[23] = __src[23];
      __dst[24] = __src[24];
      __dst[25] = __src[25];
      __dst[26] = __src[26];
      __dst[27] = __src[27];
      __dst[28] = __src[28];
      __dst[29] = __src[29];
      unint64_t v11 = __src[31];
      uint64_t v14 = __src[30];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000065D0(v14, v11);
      __dst[30] = v14;
      __dst[31] = v11;
      __dst[32] = __src[32];
      __dst[33] = __src[33];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_8;
  }
  if (!v4)
  {
    sub_1000F2BFC((uint64_t)__dst);
    goto LABEL_7;
  }
  *__dst = *__src;
  __dst[1] = __src[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[2] = __src[2];
  __dst[3] = __src[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[4] = __src[4];
  __dst[5] = __src[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[6] = __src[6];
  __dst[7] = __src[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[8] = __src[8];
  __dst[9] = __src[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[10] = __src[10];
  __dst[11] = __src[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[12] = __src[12];
  __dst[13] = __src[13];
  uint64_t v5 = __src[14];
  *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
  unsigned char __dst[14] = v5;
  __dst[16] = __src[16];
  _OWORD __dst[17] = __src[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[18] = __src[18];
  __dst[19] = __src[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[20] = __src[20];
  __dst[21] = __src[21];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[22] = __src[22];
  __dst[23] = __src[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[24] = __src[24];
  __dst[25] = __src[25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[26] = __src[26];
  __dst[27] = __src[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst[28] = __src[28];
  __dst[29] = __src[29];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = __src[30];
  unint64_t v7 = __src[31];
  sub_1000065D0(v6, v7);
  uint64_t v8 = __dst[30];
  unint64_t v9 = __dst[31];
  __dst[30] = v6;
  __dst[31] = v7;
  sub_100006628(v8, v9);
  __dst[32] = __src[32];
  __dst[33] = __src[33];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v12 = __src[34];
  *((unsigned char *)__dst + 280) = *((unsigned char *)__src + 280);
  __dst[34] = v12;
  __dst[36] = __src[36];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return __dst;
}

void *initializeWithTake for MPOCMonitorResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x128uLL);
}

void *assignWithTake for MPOCMonitorResponse(void *__dst, void *__src)
{
  if (!__dst[1]) {
    goto LABEL_5;
  }
  uint64_t v4 = __src[1];
  if (!v4)
  {
    sub_1000F2BFC((uint64_t)__dst);
LABEL_5:
    memcpy(__dst, __src, 0x110uLL);
    goto LABEL_6;
  }
  *__dst = *__src;
  __dst[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = __src[3];
  __dst[2] = __src[2];
  __dst[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = __src[5];
  __dst[4] = __src[4];
  __dst[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = __src[7];
  __dst[6] = __src[6];
  __dst[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = __src[9];
  __dst[8] = __src[8];
  __dst[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = __src[11];
  __dst[10] = __src[10];
  __dst[11] = v9;
  swift_bridgeObjectRelease();
  *((_OWORD *)__dst + 6) = *((_OWORD *)__src + 6);
  unsigned char __dst[14] = __src[14];
  *((unsigned char *)__dst + 120) = *((unsigned char *)__src + 120);
  uint64_t v10 = __src[17];
  __dst[16] = __src[16];
  _OWORD __dst[17] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = __src[19];
  __dst[18] = __src[18];
  __dst[19] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = __src[21];
  __dst[20] = __src[20];
  __dst[21] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = __src[23];
  __dst[22] = __src[22];
  __dst[23] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = __src[25];
  __dst[24] = __src[24];
  __dst[25] = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = __src[27];
  __dst[26] = __src[26];
  __dst[27] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = __src[29];
  __dst[28] = __src[28];
  __dst[29] = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = __dst[30];
  unint64_t v18 = __dst[31];
  *((_OWORD *)__dst + 15) = *((_OWORD *)__src + 15);
  sub_100006628(v17, v18);
  uint64_t v19 = __src[33];
  __dst[32] = __src[32];
  __dst[33] = v19;
  swift_bridgeObjectRelease();
LABEL_6:
  __dst[34] = __src[34];
  *((unsigned char *)__dst + 280) = *((unsigned char *)__src + 280);
  __dst[36] = __src[36];
  swift_bridgeObjectRelease();
  return __dst;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 296)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 296) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 296) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorResponse()
{
  return &type metadata for MPOCMonitorResponse;
}

ValueMetadata *type metadata accessor for MPOCMonitorBackendError()
{
  return &type metadata for MPOCMonitorBackendError;
}

void *initializeWithCopy for MPOCDeprecationWarning(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MPOCDeprecationWarning(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for MPOCDeprecationWarning(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for MPOCDeprecationWarning()
{
  return &type metadata for MPOCDeprecationWarning;
}

void *sub_10013CD80@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v15 = sub_100003EB0(&qword_1001DF628);
  uint64_t v4 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100062184(v21);
  sub_100029CEC((uint64_t)v21, (uint64_t)v20, &qword_1001DA130);
  LOBYTE(v20[35]) = 1;
  v20[34] = 0;
  v20[36] = 0;
  sub_100006788(a1, a1[3]);
  sub_10013D68C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100006520((uint64_t)a1);
    memcpy(v19, v20, sizeof(v19));
    return (void *)sub_10013D6E0((uint64_t)v19);
  }
  else
  {
    char v23 = 0;
    sub_10013D768();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100029CEC((uint64_t)&v18, (uint64_t)v17, &qword_1001DA130);
    sub_100029CEC((uint64_t)v17, (uint64_t)v20, &qword_1001DA130);
    v19[0] = 1;
    sub_1000F3554((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100085364);
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v20[34] = v8;
    LOBYTE(v20[35]) = v9 & 1;
    char v10 = v9 & 1;
    sub_100003EB0(&qword_1001DF5F0);
    char v22 = 2;
    sub_10013D61C(&qword_1001DF5F8, (void (*)(void))sub_10013D574);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v15);
    uint64_t v11 = v16[37];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v20[36] = v11;
    sub_100029CEC((uint64_t)v17, (uint64_t)v16, &qword_1001DA130);
    v16[34] = v8;
    LOBYTE(v16[35]) = v10;
    v16[36] = v11;
    sub_1001130F8((uint64_t)v16);
    swift_bridgeObjectRelease();
    sub_1000F3554((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100029ABC);
    sub_100006520((uint64_t)a1);
    memcpy(v19, v20, sizeof(v19));
    sub_10013D6E0((uint64_t)v19);
    return memcpy(v14, v16, 0x128uLL);
  }
}

uint64_t sub_10013D134(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x800000010019BF60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7078456E656B6F74 && a2 == 0xEF6E6F6974617269 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100190520)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10013D2A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DF5E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  char v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_10013D520();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100006520((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = 0;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    char v20 = 1;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v18 = v14;
    v17[0] = v13;
    sub_100003EB0(&qword_1001DF5F0);
    char v19 = 2;
    sub_10013D61C(&qword_1001DF5F8, (void (*)(void))sub_10013D574);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v15 = v17[1];
    uint64_t result = sub_100006520((uint64_t)a1);
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v17[0];
    *(unsigned char *)(a2 + 24) = v18 & 1;
    *(void *)(a2 + 32) = v15;
  }
  return result;
}

unint64_t sub_10013D520()
{
  unint64_t result = qword_1001DF5E8;
  if (!qword_1001DF5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF5E8);
  }
  return result;
}

unint64_t sub_10013D574()
{
  unint64_t result = qword_1001DF600;
  if (!qword_1001DF600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF600);
  }
  return result;
}

unint64_t sub_10013D5C8()
{
  unint64_t result = qword_1001DF610;
  if (!qword_1001DF610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF610);
  }
  return result;
}

uint64_t sub_10013D61C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4(&qword_1001DF5F0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10013D68C()
{
  unint64_t result = qword_1001DF630;
  if (!qword_1001DF630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF630);
  }
  return result;
}

uint64_t sub_10013D6E0(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_100029ABC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10013D768()
{
  unint64_t result = qword_1001DF638;
  if (!qword_1001DF638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF638);
  }
  return result;
}

unint64_t sub_10013D7BC()
{
  unint64_t result = qword_1001DF648;
  if (!qword_1001DF648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF648);
  }
  return result;
}

uint64_t sub_10013D810(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461636572706564 && a2 == 0xEF657079546E6F69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461636572706564 && a2 == 0xEF656D69546E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10013D9A0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DF650);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  char v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_10013D5C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100006520((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v22 = v10;
  char v24 = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v20 = v13;
  char v23 = 2;
  swift_bridgeObjectRetain();
  uint64_t v21 = v15;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_100006520((uint64_t)a1);
  uint64_t v17 = v21;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v22;
  a2[1] = v12;
  a2[2] = v20;
  a2[3] = v17;
  a2[4] = v16;
  return result;
}

ValueMetadata *type metadata accessor for MPOCMonitorResponse.CodingKeys()
{
  return &type metadata for MPOCMonitorResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for MPOCDeprecationWarning.CodingKeys()
{
  return &type metadata for MPOCDeprecationWarning.CodingKeys;
}

unsigned char *_s9SPREngine19MPOCMonitorResponseV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10013DD14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MPOCBackendMonitorResponse.CodingKeys()
{
  return &type metadata for MPOCBackendMonitorResponse.CodingKeys;
}

unint64_t sub_10013DD50()
{
  unint64_t result = qword_1001DF658;
  if (!qword_1001DF658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF658);
  }
  return result;
}

unint64_t sub_10013DDA8()
{
  unint64_t result = qword_1001DF660;
  if (!qword_1001DF660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF660);
  }
  return result;
}

unint64_t sub_10013DE00()
{
  unint64_t result = qword_1001DF668;
  if (!qword_1001DF668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF668);
  }
  return result;
}

unint64_t sub_10013DE58()
{
  unint64_t result = qword_1001DF670;
  if (!qword_1001DF670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF670);
  }
  return result;
}

unint64_t sub_10013DEB0()
{
  unint64_t result = qword_1001DF678;
  if (!qword_1001DF678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF678);
  }
  return result;
}

unint64_t sub_10013DF08()
{
  unint64_t result = qword_1001DF680;
  if (!qword_1001DF680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF680);
  }
  return result;
}

unint64_t sub_10013DF60()
{
  unint64_t result = qword_1001DF688;
  if (!qword_1001DF688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF688);
  }
  return result;
}

unint64_t sub_10013DFB8()
{
  unint64_t result = qword_1001DF690;
  if (!qword_1001DF690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF690);
  }
  return result;
}

unint64_t sub_10013E010()
{
  unint64_t result = qword_1001DF698;
  if (!qword_1001DF698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF698);
  }
  return result;
}

void *sub_10013E06C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v40) = a4;
  uint64_t v44 = a2;
  uint64_t v43 = a1;
  uint64_t v46 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v7);
  char v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v14 = v4[36];
  uint64_t v42 = v4[35];
  sub_100009300((uint64_t)(v4 + 2), (uint64_t)v55);
  uint64_t v16 = v4[10];
  uint64_t v15 = v4[11];
  sub_100006788(v4 + 7, v16);
  uint64_t v41 = v14;
  swift_bridgeObjectRetain();
  uint64_t v45 = a3;
  swift_bridgeObjectRetain();
  sub_100134448(v40, v16, v15);
  sub_100006788(v4 + 12, v4[15]);
  sub_100039D18((uint64_t)v51);
  uint64_t v17 = v4[17];
  sub_100009300((uint64_t)(v4 + 18), (uint64_t)v49);
  sub_100009300((uint64_t)(v4 + 25), (uint64_t)v47);
  uint64_t v18 = v4[24];
  uint64_t v39 = v4[23];
  sub_10001F160();
  uint64_t v40 = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.background.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v46);
  uint64_t v46 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_1001D9428 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_1001D9420;
  id v20 = (id)qword_1001E1240;
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_1001E1238;
  uint64_t v22 = sub_10001F1A0((uint64_t)v49, v50);
  __chkstk_darwin(v22, v22);
  char v24 = (uint64_t *)((char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_10001F1A0((uint64_t)v47, v48);
  __chkstk_darwin(v26, v26);
  long long v28 = (uint64_t *)((char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = *v24;
  uint64_t v31 = *v28;
  uint64_t v32 = v53;
  uint64_t v33 = v54;
  uint64_t v34 = sub_10001F1A0((uint64_t)v52, v53);
  swift_bridgeObjectRetain();
  *((void *)&v38 + 1) = v20;
  *((void *)&v37 + 1) = v18;
  *(void *)&long long v38 = v46;
  *(void *)&long long v37 = v39;
  unint64_t v35 = sub_100156BD4(v42, v41, v43, v44, v45, (uint64_t)v55, v34, (uint64_t)v51, v40, v30, v31, v37, v38, v21, v32, v33);
  sub_100006520((uint64_t)v52);
  sub_100006520((uint64_t)v47);
  sub_100006520((uint64_t)v49);
  sub_10013FF20(&qword_1001DE9D8, (void (*)(uint64_t))type metadata accessor for BAASigner);
  return v35;
}

void *sub_10013E5B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v39) = a4;
  uint64_t v43 = a2;
  uint64_t v42 = a1;
  uint64_t v38 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v7);
  char v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v14 = v4[36];
  uint64_t v41 = v4[35];
  sub_100009300((uint64_t)(v4 + 2), (uint64_t)v51);
  uint64_t v16 = v4[10];
  uint64_t v15 = v4[11];
  sub_100006788(v4 + 7, v16);
  uint64_t v40 = v14;
  swift_bridgeObjectRetain();
  uint64_t v44 = a3;
  swift_bridgeObjectRetain();
  sub_100134448(v39, v16, v15);
  sub_100006788(v4 + 12, v4[15]);
  sub_100039C24((uint64_t)v49);
  uint64_t v17 = v4[17];
  sub_100009300((uint64_t)(v4 + 18), (uint64_t)v47);
  sub_100009300((uint64_t)(v4 + 25), (uint64_t)v45);
  uint64_t v18 = v4[24];
  uint64_t v39 = v4[23];
  sub_10001F160();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.background.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v38);
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_1001D93B0 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1001D93A8;
  id v21 = (id)qword_1001E1208;
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_1001E1200;
  uint64_t v23 = sub_10001F1A0((uint64_t)v47, v48);
  __chkstk_darwin(v23, v23);
  uint64_t v25 = (uint64_t *)((char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_10001F1A0((uint64_t)v45, v46);
  __chkstk_darwin(v27, v27);
  uint64_t v29 = (uint64_t *)((char *)&v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = *v25;
  uint64_t v32 = *v29;
  swift_bridgeObjectRetain();
  *((void *)&v36 + 1) = v21;
  *((void *)&v35 + 1) = v18;
  *(void *)&long long v36 = v19;
  *(void *)&long long v35 = v39;
  uint64_t v33 = sub_10013EB6C(v41, v40, v42, v43, v44, (uint64_t)v51, (uint64_t)v50, (uint64_t)v49, v17, v31, v32, v35, v36, v22);
  sub_100006520((uint64_t)v45);
  sub_100006520((uint64_t)v47);
  sub_10013FF20((unint64_t *)&unk_1001DF7B0, (void (*)(uint64_t))type metadata accessor for SESSigner);
  return v33;
}

uint64_t sub_10013EAB4()
{
  sub_100006520(v0 + 16);
  sub_100006520(v0 + 56);
  sub_100006520(v0 + 96);
  swift_release();
  sub_100006520(v0 + 144);
  swift_bridgeObjectRelease();
  sub_100006520(v0 + 200);
  sub_100006520(v0 + 240);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10013EB14()
{
  sub_10013EAB4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SignerFactory()
{
  return self;
}

void *sub_10013EB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, long long a13, uint64_t a14)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  long long v29 = a13;
  long long v30 = a12;
  uint64_t v39 = type metadata accessor for SystemInfo();
  uint64_t v40 = &off_1001CB4C8;
  v38[0] = a10;
  uint64_t v36 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v37 = &off_1001C84C8;
  v35[0] = a11;
  type metadata accessor for SESSigner();
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = sub_10001F1A0((uint64_t)v38, v39);
  __chkstk_darwin(v19, v19);
  id v21 = (uint64_t *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10001F1A0((uint64_t)v35, v36);
  __chkstk_darwin(v23, v23);
  uint64_t v25 = (uint64_t *)((char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_10013EDB8(a1, a2, a3, a4, v31, v32, v33, v34, a9, *v21, *v25, v30, *((uint64_t *)&v30 + 1), (void *)v29, *((void **)&v29 + 1), a14, v18);
  sub_100006520((uint64_t)v35);
  sub_100006520((uint64_t)v38);
  return v27;
}

void *sub_10013EDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  uint64_t v19 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v19, v20);
  uint64_t v42 = &type metadata for SystemRandomNumberGenerator;
  uint64_t v43 = &protocol witness table for SystemRandomNumberGenerator;
  v40[3] = type metadata accessor for SystemInfo();
  v40[4] = &off_1001CB4C8;
  v40[0] = a10;
  v39[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v39[4] = &off_1001C84C8;
  aBlock[5] = 0;
  v39[0] = a11;
  a17[7] = 0;
  aBlock[4] = BitString.init(data:unusedBits:);
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  id aBlock[3] = &unk_1001CB9F8;
  _Block_copy(aBlock);
  sub_10013FF20((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_1000CF6EC();
  uint64_t v21 = a7;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  a17[44] = DispatchWorkItem.init(flags:block:)();
  a17[45] = 600000;
  a17[2] = a1;
  a17[3] = a2;
  a17[4] = a3;
  a17[5] = a4;
  a17[6] = a5;
  sub_100009300(a6, (uint64_t)(a17 + 8));
  sub_100009300(a7, (uint64_t)(a17 + 13));
  uint64_t v36 = a8;
  sub_100009300(a8, (uint64_t)(a17 + 33));
  a17[38] = a9;
  sub_100009300((uint64_t)v40, (uint64_t)(a17 + 39));
  sub_100009300((uint64_t)v39, (uint64_t)(a17 + 28));
  a17[18] = a14;
  a17[19] = a15;
  a17[20] = a16;
  a17[21] = a12;
  a17[22] = a13;
  sub_100009300((uint64_t)v41, (uint64_t)(a17 + 23));
  swift_retain();
  id v22 = a14;
  id v23 = a15;
  uint64_t v24 = sub_10002586C();
  if (!v24) {
    goto LABEL_7;
  }
  uint64_t v25 = (uint64_t *)v24;
  if ((sub_100148FBC() & 1) == 0)
  {
LABEL_6:
    swift_release();
LABEL_7:
    long long v29 = (uint64_t *)sub_100024FBC();
    sub_10002608C((uint64_t)v29);
    sub_100026C38(v29);
    swift_release();

    swift_release();
    goto LABEL_8;
  }
  uint64_t v26 = v25[3];
  unint64_t v27 = v25[4];
  sub_1000065D0(v26, v27);
  char v28 = sub_100028400();
  sub_100006628(v26, v27);
  if ((v28 & 1) == 0)
  {
    sub_100026774();
    goto LABEL_6;
  }
  a17[7] = v25;
  swift_retain();
  swift_release();
  sub_100026C38(v25);
  swift_release();
  swift_release();

LABEL_8:
  sub_100006520((uint64_t)v41);
  sub_100006520((uint64_t)v39);
  sub_100006520((uint64_t)v40);
  sub_100006520(v36);
  sub_100006520(v21);
  sub_100006520(a6);
  return a17;
}

uint64_t sub_10013F640(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013F650()
{
  return swift_release();
}

void *sub_10013F658(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = type metadata accessor for CertificateVerifierFactory();
  uint64_t v40 = &off_1001C7218;
  v38[0] = a3;
  uint64_t v36 = type metadata accessor for SystemInfo();
  uint64_t v37 = &off_1001CB4C8;
  v35[0] = a5;
  uint64_t v33 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v34 = &off_1001C84C8;
  v32[0] = a8;
  type metadata accessor for SignerFactory();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = sub_10001F1A0((uint64_t)v38, v39);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (void *)((char *)&v32[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_10001F1A0((uint64_t)v35, v36);
  __chkstk_darwin(v21, v21);
  id v23 = (void *)((char *)&v32[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_10001F1A0((uint64_t)v32, v33);
  __chkstk_darwin(v25, v25);
  unint64_t v27 = (void *)((char *)&v32[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  long long v29 = sub_10013F92C(a1, a2, *v19, a4, *v23, a6, a7, *v27, v16);
  sub_100006520((uint64_t)v32);
  sub_100006520((uint64_t)v35);
  sub_100006520((uint64_t)v38);
  return v29;
}

void *sub_10013F92C(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  a9[33] = &type metadata for SystemRandomNumberGenerator;
  a9[34] = &protocol witness table for SystemRandomNumberGenerator;
  a9[15] = type metadata accessor for CertificateVerifierFactory();
  a9[16] = &off_1001C7218;
  a9[12] = a3;
  a9[21] = type metadata accessor for SystemInfo();
  a9[22] = &off_1001CB4C8;
  a9[18] = a5;
  a9[28] = type metadata accessor for DefaultSecureTimeKeeper();
  a9[29] = &off_1001C84C8;
  a9[25] = a8;
  a9[35] = 0xD000000000000017;
  a9[36] = 0x8000000100196850;
  sub_10001F1F0(a1, (uint64_t)(a9 + 2));
  sub_10001F1F0(a2, (uint64_t)(a9 + 7));
  a9[17] = a4;
  a9[23] = a6;
  a9[24] = a7;
  return a9;
}

void *sub_10013FA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v44 = a8;
  uint64_t v50 = a6;
  uint64_t v48 = a4;
  uint64_t v47 = a3;
  uint64_t v45 = a1;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v19 - 8, v20);
  sub_100009300((uint64_t)(a7 + 2), (uint64_t)v56);
  sub_100006788(a7 + 12, a7[15]);
  uint64_t v46 = a2;
  swift_bridgeObjectRetain();
  uint64_t v49 = a5;
  swift_bridgeObjectRetain();
  sub_100039D18((uint64_t)v55);
  uint64_t v21 = a7[17];
  sub_100009300((uint64_t)(a7 + 18), (uint64_t)v53);
  sub_100009300((uint64_t)(a7 + 25), (uint64_t)v51);
  uint64_t v22 = a7[23];
  uint64_t v23 = a7[24];
  uint64_t v42 = v22;
  sub_10001F160();
  uint64_t v43 = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.background.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_1001D9428 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_1001D9420;
  id v26 = (id)qword_1001E1240;
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_1001E1238;
  uint64_t v28 = sub_10001F1A0((uint64_t)v53, v54);
  __chkstk_darwin(v28, v28);
  long long v30 = (uint64_t *)((char *)&v42 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  uint64_t v32 = sub_10001F1A0((uint64_t)v51, v52);
  __chkstk_darwin(v32, v32);
  uint64_t v34 = (uint64_t *)((char *)&v42 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v35 + 16))(v34);
  uint64_t v36 = *v30;
  uint64_t v37 = *v34;
  swift_bridgeObjectRetain();
  *(void *)&long long v41 = v24;
  *((void *)&v41 + 1) = v26;
  *((void *)&v40 + 1) = v23;
  *(void *)&long long v40 = v42;
  uint64_t v38 = sub_100156BD4(v45, v46, v47, v48, v49, (uint64_t)v56, v50, (uint64_t)v55, v43, v36, v37, v40, v41, v27, v44, a9);
  sub_100006520((uint64_t)v51);
  sub_100006520((uint64_t)v53);
  sub_10013FF20(&qword_1001DE9D8, (void (*)(uint64_t))type metadata accessor for BAASigner);
  return v38;
}

uint64_t sub_10013FF20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10013FF68(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v36 = a6;
  uint64_t v45 = a5;
  uint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  sub_100006788(a1, v13);
  (*(void (**)(long long *__return_ptr, void, uint64_t, uint64_t))(v14 + 8))(v44, 0, v13, v14);
  if (v7)
  {
    swift_release();
    sub_100006520(a7);
    sub_100006520(v45);
    sub_100006520((uint64_t)a3);
    sub_100006520(a2);
    sub_100006520((uint64_t)v36);
    sub_100006520((uint64_t)a1);
    return a3;
  }
  uint64_t v33 = a4;
  uint64_t v35 = a2;
  sub_100009300(a2, (uint64_t)v43);
  uint64_t v34 = a3;
  sub_100009300((uint64_t)a3, (uint64_t)v41);
  sub_100009300(v45, (uint64_t)v39);
  uint64_t result = [*(id *)(*sub_100006788(v36, v36[3]) + 16) serialNumber];
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v17;

    sub_100009300(a7, (uint64_t)v37);
    uint64_t v18 = sub_10001F1A0((uint64_t)v41, v42);
    __chkstk_darwin(v18, v18);
    uint64_t v20 = (void *)((char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v21 + 16))(v20);
    uint64_t v22 = sub_10001F1A0((uint64_t)v39, v40);
    v30[1] = v30;
    __chkstk_darwin(v22, v22);
    uint64_t v24 = (void *)((char *)v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v25 + 16))(v24);
    uint64_t v26 = sub_10001F1A0((uint64_t)v37, v38);
    __chkstk_darwin(v26, v26);
    uint64_t v28 = (void *)((char *)v30 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    a3 = sub_10013F658(v44, v43, *v20, v33, *v24, v32, v31, *v28);
    sub_100006520((uint64_t)v37);
    sub_100006520((uint64_t)v39);
    sub_100006520((uint64_t)v41);
    sub_100006520(a7);
    sub_100006520(v45);
    sub_100006520((uint64_t)v34);
    sub_100006520(v35);
    sub_100006520((uint64_t)v36);
    sub_100006520((uint64_t)a1);
    return a3;
  }
  __break(1u);
  return result;
}

void *sub_100140370()
{
  sub_1000F7B54((uint64_t)v9);
  if (v0)
  {
    swift_release();
  }
  else
  {
    sub_1000F8B20((uint64_t)v8);
    sub_1000F8098((uint64_t)v7);
    uint64_t v2 = sub_1000FFF08();
    sub_1000FB4F0((uint64_t)v6);
    sub_1000FA008((uint64_t)v5);
    sub_1000F85DC((uint64_t)v4);
    uint64_t v1 = sub_10013FF68(v9, (uint64_t)v8, v7, v2, (uint64_t)v6, v5, (uint64_t)v4);
    swift_release();
  }
  return v1;
}

void *sub_1001404FC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      unsigned __int16 v4 = WORD2(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_6;
    case 2uLL:
LABEL_6:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      unsigned __int16 v4 = v5 - v6;
      if (__OFSUB__(v5, v6))
      {
        __break(1u);
        JUMPOUT(0x100140E00);
      }
LABEL_7:
      sub_1000065D0(a1, a2);
      break;
    case 3uLL:
      sub_100006628(a1, a2);
      unsigned __int16 v4 = 0;
      break;
    default:
      sub_100006628(a1, a2);
      unsigned __int16 v4 = BYTE6(v2);
      break;
  }
  if (qword_1001D9070 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DBEE8);
  sub_1000065D0(v3, v2);
  sub_1000065D0(v3, v2);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  os_log_t log = v8;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = v3;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    os_log_type_t type = v9;
    unint64_t v12 = ((unint64_t)v4 << 32) | 0xF580;
    uint64_t v13 = sub_10006BD14(v12, v3, v2, 0);
    unint64_t v15 = v14;
    Swift::String v16 = Data.hexString()();
    uint64_t v17 = v13;
    uint64_t v3 = v10;
    sub_100006628(v17, v15);
    sub_100005EB8(v16._countAndFlagsBits, (unint64_t)v16._object, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v10, v2);
    sub_100006628(v10, v2);
    _os_log_impl((void *)&_mh_execute_header, log, type, "C-APDU (INIT PIN): %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(v3, v2);
    sub_100006628(v3, v2);

    unint64_t v12 = ((unint64_t)v4 << 32) | 0xF580;
  }
  sub_1000F61E8(v12, v3, v2, 0, 1, (uint64_t)v50);
  uint64_t v19 = v50[0];
  unint64_t v18 = v50[1];
  uint64_t v20 = v50[3];
  unint64_t v21 = v50[4];
  sub_100038DA0((uint64_t)v50, (uint64_t)v51);
  if (v52 >> 60 != 15)
  {
    int v26 = v53;
    sub_1000065D0(v19, v18);
    sub_1000065D0(v20, v21);
    sub_1000065D0(v19, v18);
    sub_1000065D0(v20, v21);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v47 = v20;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      Swift::String v30 = Data.hexString()();
      sub_100005EB8(v30._countAndFlagsBits, (unint64_t)v30._object, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "R-APDU: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v20 = v47;
      swift_slowDealloc();
    }
    else
    {
      sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
    }

    switch(v26)
    {
      case 27012:
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v34, v35))
        {
LABEL_36:

          uint64_t v40 = 12004;
LABEL_37:
          sub_10002AFBC(v40, 0, 0, 0);
          swift_willThrow();
          sub_100006628(v3, v2);
          return sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
        }
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "transaction id mismatch", v36, 2u);
        break;
      case 27013:
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "missing reader config or PAN", v39, 2u);
          swift_slowDealloc();
        }

        uint64_t v40 = 12003;
        goto LABEL_37;
      case 36864:
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "transaction id matched", v33, 2u);
          swift_slowDealloc();

          sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
          return (void *)sub_100006628(v3, v2);
        }
        else
        {
          sub_100006628(v3, v2);

          return sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
        }
      default:
        sub_1000065D0(v19, v18);
        sub_1000065D0(v20, v21);
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v34, v41))
        {
          sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
          goto LABEL_36;
        }
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        unint64_t v43 = v2;
        uint64_t v44 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 138412290;
        sub_100038E08();
        swift_allocError();
        *uint64_t v45 = v26;
        uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v54 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v44 = v46;
        sub_1000C6D84(v50, (void (*)(void, void, void, void, void))sub_100038E90);
        _os_log_impl((void *)&_mh_execute_header, v34, v41, "unexpected sw: %@", v42, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        unint64_t v2 = v43;
        swift_slowDealloc();
        break;
    }
    swift_slowDealloc();
    goto LABEL_36;
  }
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "no response from INIT PIN", v24, 2u);
    swift_slowDealloc();
  }

  sub_10002AFBC(12004, 0, 0, 0);
  swift_willThrow();
  return (void *)sub_100006628(v3, v2);
}

void *sub_100140E10(uint64_t a1, unint64_t a2)
{
  if (qword_1001D9378 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1001E11E0;
  unint64_t v5 = *(void *)algn_1001E11E8;
  uint64_t v54 = qword_1001E11E0;
  unint64_t v55 = *(void *)algn_1001E11E8;
  sub_1000065D0(qword_1001E11E0, *(unint64_t *)algn_1001E11E8);
  sub_1000065D0(v4, v5);
  sub_1000065D0(a1, a2);
  sub_100147328(a1, a2);
  sub_100006628(a1, a2);
  sub_100006628(v4, v5);
  uint64_t v6 = v54;
  unint64_t v7 = v55;
  switch(v55 >> 62)
  {
    case 1uLL:
      unsigned __int16 v8 = WORD2(v54) - v54;
      if (__OFSUB__(HIDWORD(v54), v54))
      {
        __break(1u);
        goto LABEL_8;
      }
      break;
    case 2uLL:
LABEL_8:
      uint64_t v10 = *(void *)(v54 + 16);
      uint64_t v9 = *(void *)(v54 + 24);
      unsigned __int16 v8 = v9 - v10;
      if (__OFSUB__(v9, v10))
      {
        __break(1u);
        goto LABEL_11;
      }
      break;
    case 3uLL:
LABEL_11:
      sub_100006628(v54, v55);
      unsigned __int16 v8 = 0;
      break;
    default:
      sub_100006628(v54, v55);
      unsigned __int16 v8 = BYTE6(v55);
      break;
  }
  if (qword_1001D9070 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003E78(v11, (uint64_t)qword_1001DBEE8);
  sub_1000065D0(v54, v55);
  sub_1000065D0(v54, v55);
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  os_log_t log = v12;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = v54;
    os_log_type_t type = v13;
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)unint64_t v15 = 136315138;
    unint64_t v16 = ((unint64_t)v8 << 32) | 0xF180;
    uint64_t v17 = sub_10006BD14(v16, v6, v7, 0);
    unint64_t v19 = v18;
    Swift::String v20 = Data.hexString()();
    uint64_t v21 = v17;
    uint64_t v6 = v14;
    sub_100006628(v21, v19);
    uint64_t v60 = sub_100005EB8(v20._countAndFlagsBits, (unint64_t)v20._object, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v14, v7);
    sub_100006628(v14, v7);
    _os_log_impl((void *)&_mh_execute_header, log, type, "C-APDU (ADD PIN DIGIT): %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(v54, v55);
    sub_100006628(v54, v55);

    unint64_t v16 = ((unint64_t)v8 << 32) | 0xF180;
  }
  sub_1000F61E8(v16, v6, v7, 0, 1, (uint64_t)v56);
  uint64_t v22 = v56[0];
  unint64_t v23 = v56[1];
  uint64_t v24 = v56[3];
  unint64_t v25 = v56[4];
  sub_100038DA0((uint64_t)v56, (uint64_t)v57);
  if (v58 >> 60 != 15)
  {
    int v30 = v59;
    sub_1000065D0(v22, v23);
    sub_1000065D0(v24, v25);
    os_log_t loga = (os_log_t)v23;
    sub_1000065D0(v22, v23);
    sub_1000065D0(v24, v25);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      Swift::String v34 = Data.hexString()();
      uint64_t v60 = sub_100005EB8(v34._countAndFlagsBits, (unint64_t)v34._object, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "R-APDU: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
    }

    switch(v30)
    {
      case 26368:
        os_log_type_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "PIN length exceeded", v40, 2u);
          swift_slowDealloc();
        }

        uint64_t v41 = 12006;
        goto LABEL_40;
      case 27013:
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v42, v43))
        {
LABEL_39:

          uint64_t v41 = 12004;
LABEL_40:
          sub_10002AFBC(v41, 0, 0, 0);
          swift_willThrow();
          sub_100006628(v6, v7);
          return sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
        }
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "ADD PIN DIGIT failed", v44, 2u);
        break;
      case 36864:
        os_log_type_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v37 = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "pin digit added", v37, 2u);
          swift_slowDealloc();

          sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
          return (void *)sub_100006628(v6, v7);
        }
        else
        {
          sub_100006628(v6, v7);

          return sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
        }
      default:
        sub_1000065D0(v22, (unint64_t)loga);
        sub_1000065D0(v24, v25);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v42, v45))
        {
          sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
          goto LABEL_39;
        }
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        unint64_t v47 = v7;
        uint64_t v48 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 138412290;
        sub_100038E08();
        swift_allocError();
        *uint64_t v49 = v30;
        uint64_t v50 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v54 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v48 = v50;
        sub_1000C6D84(v56, (void (*)(void, void, void, void, void))sub_100038E90);
        _os_log_impl((void *)&_mh_execute_header, v42, v45, "Unexpected status word: %@", v46, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        unint64_t v7 = v47;
        swift_slowDealloc();
        break;
    }
    swift_slowDealloc();
    goto LABEL_39;
  }
  int v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "no response from applet", v28, 2u);
    swift_slowDealloc();
  }

  sub_10002AFBC(12004, 0, 0, 0);
  swift_willThrow();
  return (void *)sub_100006628(v6, v7);
}

void *sub_1001417B0()
{
  if (qword_1001D9070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DBEE8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v4 = sub_10006BD14(0xF280uLL, 0, 0xC000000000000000, 0);
    unint64_t v6 = v5;
    Swift::String v7 = Data.hexString()();
    sub_100006628(v4, v6);
    sub_100005EB8(v7._countAndFlagsBits, (unint64_t)v7._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "C-APDU (REMOVE PIN DIGIT): %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000F61E8(62080, 0, 0xC000000000000000, 0, 1, (uint64_t)v37);
  uint64_t v8 = v37[0];
  unint64_t v9 = v37[1];
  uint64_t v10 = v37[3];
  unint64_t v11 = v37[4];
  sub_100038DA0((uint64_t)v37, (uint64_t)v38);
  if (v39 >> 60 == 15)
  {
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "no response from applet", v14, 2u);
      swift_slowDealloc();
    }

    sub_10002AFBC(12004, 0, 0, 0);
    return (void *)swift_willThrow();
  }
  int v16 = v40;
  sub_1000065D0(v8, v9);
  sub_1000065D0(v10, v11);
  sub_1000065D0(v8, v9);
  sub_1000065D0(v10, v11);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    int v36 = v16;
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)unint64_t v19 = 136315138;
    Swift::String v20 = Data.hexString()();
    sub_100005EB8(v20._countAndFlagsBits, (unint64_t)v20._object, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "R-APDU: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    int v16 = v36;
    swift_slowDealloc();
  }
  else
  {
    sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
  }

  if (v16 == 26368)
  {
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      int v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Empty buffer", v26, 2u);
      swift_slowDealloc();
    }

    uint64_t v27 = 12007;
    goto LABEL_28;
  }
  if (v16 == 27013)
  {
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v29))
    {
LABEL_27:

      uint64_t v27 = 12004;
LABEL_28:
      sub_10002AFBC(v27, 0, 0, 0);
      swift_willThrow();
      return sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
    }
    int v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "PIN remove failed", v30, 2u);
LABEL_25:
    swift_slowDealloc();
    goto LABEL_27;
  }
  if (v16 != 36864)
  {
    sub_1000065D0(v8, v9);
    sub_1000065D0(v10, v11);
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v28, v31))
    {
      sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
      goto LABEL_27;
    }
    os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v32 = 138412290;
    sub_100038E08();
    swift_allocError();
    *Swift::String v34 = v16;
    uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v41 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v35;
    sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
    _os_log_impl((void *)&_mh_execute_header, v28, v31, "Unexpected status word: %@", v32, 0xCu);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_25;
  }
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "removed last digit", v23, 2u);
    swift_slowDealloc();
  }

  return sub_1000C6D84(v37, (void (*)(void, void, void, void, void))sub_100038E90);
}

uint8_t *sub_100141F4C()
{
  if (qword_1001D9070 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DBEE8);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v0 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v0 = 136315138;
    uint64_t v4 = sub_10006BD14(0xF380uLL, 0, 0xC000000000000000, 0);
    unint64_t v6 = v5;
    Swift::String v7 = Data.hexString()();
    sub_100006628(v4, v6);
    sub_100005EB8(v7._countAndFlagsBits, (unint64_t)v7._object, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "C-APDU (GENERATE PIN BLOB): %s", v0, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000F61E8(62336, 0, 0xC000000000000000, 0, 1, (uint64_t)v51);
  uint64_t v9 = v51[0];
  unint64_t v8 = v51[1];
  uint64_t v10 = v51[3];
  unint64_t v11 = v51[4];
  sub_100038DA0((uint64_t)v51, (uint64_t)&v52);
  unint64_t v12 = v53;
  if (v53 >> 60 == 15)
  {
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No response or error from GENERATE PIN BLOB command", v15, 2u);
      swift_slowDealloc();
    }

    sub_10002AFBC(12004, 0, 0, 0);
    swift_willThrow();
    return v0;
  }
  uint64_t v0 = v52;
  int v16 = v54;
  sub_1000065D0(v9, v8);
  sub_1000065D0(v10, v11);
  unint64_t v50 = v8;
  sub_1000065D0(v9, v8);
  sub_1000065D0(v10, v11);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v49 = v0;
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)unint64_t v19 = 136315138;
    uint64_t v20 = Data.description.getter();
    sub_100005EB8(v20, v21, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "R-APDU: %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v0 = v49;
    swift_slowDealloc();
  }
  else
  {
    sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
    sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
  }

  if (v16 <= 27265)
  {
    switch(v16)
    {
      case 26368:
        int v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Empty Buffer", v38, 2u);
          swift_slowDealloc();
        }

        uint64_t v39 = 12007;
        goto LABEL_49;
      case 27010:
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v24 = 0;
          os_log_type_t v25 = "Security condition not satisfied";
          goto LABEL_37;
        }
LABEL_48:

        uint64_t v39 = 12004;
        goto LABEL_49;
      case 27013:
        os_log_type_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v24 = 0;
          os_log_type_t v25 = "Generation failed";
LABEL_37:
          _os_log_impl((void *)&_mh_execute_header, v22, v23, v25, v24, 2u);
LABEL_46:
          swift_slowDealloc();
          goto LABEL_48;
        }
        goto LABEL_48;
    }
LABEL_44:
    sub_1000065D0(v9, v50);
    sub_1000065D0(v10, v11);
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v22, v44))
    {
      sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
      goto LABEL_48;
    }
    os_log_type_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v45 = 138412290;
    uint64_t v0 = v45 + 12;
    sub_100038E08();
    swift_allocError();
    *unint64_t v47 = v16;
    uint64_t v48 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v55 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v46 = v48;
    sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
    _os_log_impl((void *)&_mh_execute_header, v22, v44, "Unexpected status word: %@", v45, 0xCu);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_46;
  }
  if (v16 == 27266)
  {
    unsigned __int16 v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      os_log_type_t v43 = "PIN KEK hash not found";
LABEL_42:
      _os_log_impl((void *)&_mh_execute_header, v40, v41, v43, v42, 2u);
      swift_slowDealloc();
    }
LABEL_43:

    uint64_t v39 = 12003;
LABEL_49:
    sub_10002AFBC(v39, 0, 0, 0);
    swift_willThrow();
    sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
    return v0;
  }
  if (v16 == 27272)
  {
    unsigned __int16 v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      os_log_type_t v43 = "PAN not found";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (v16 != 36864) {
    goto LABEL_44;
  }
  int v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Received PIN Blobs from applet", v28, 2u);
    swift_slowDealloc();
  }

  if (qword_1001D9410 != -1) {
    swift_once();
  }
  uint64_t v29 = static GlobalState.shared;
  uint64_t result = (uint8_t *)[*(id *)(static GlobalState.shared + 72) lock];
  uint64_t v31 = *(void *)(v29 + 96);
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v29 + 96) = v33;
    while (*(uint64_t *)(v29 + 88) > 0 || *(unsigned char *)(v29 + 80) == 1)
      uint64_t result = (uint8_t *)[*(id *)(v29 + 72) wait];
    uint64_t v34 = *(void *)(v29 + 96);
    BOOL v32 = __OFSUB__(v34, 1);
    uint64_t v35 = v34 - 1;
    if (!v32)
    {
      *(void *)(v29 + 96) = v35;
      *(unsigned char *)(v29 + 80) = 1;
      [*(id *)(v29 + 72) unlock];
      *(unsigned char *)(v29 + 33) = 0;
      sub_1001661D8();
      [*(id *)(v29 + 72) lock];
      *(unsigned char *)(v29 + 80) = 0;
      [*(id *)(v29 + 72) broadcast];
      [*(id *)(v29 + 72) unlock];
      sub_1000065D0((uint64_t)v0, v12);
      sub_1000C6D84(v51, (void (*)(void, void, void, void, void))sub_100038E90);
      return v0;
    }
  }
  __break(1u);
  return result;
}

void sub_100142940()
{
  sub_100142970((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F61E8);
}

void sub_100142958()
{
  sub_100142970((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F4FB4);
}

void sub_100142970(void (*a1)(void *__return_ptr, void, void, void, void, void))
{
  void (*v31)(void *__return_ptr, void, void, void, void, void);
  uint64_t v32;
  void v33[5];
  uint64_t v34[2];
  unsigned __int16 v35;

  if (qword_1001D9070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DBEE8);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v31 = a1;
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    uint64_t v6 = sub_10006BD14(0xF480uLL, 0, 0xC000000000000000, 0);
    unint64_t v8 = v7;
    Swift::String v9 = Data.hexString()();
    unint64_t v10 = v8;
    a1 = v31;
    sub_100006628(v6, v10);
    v33[0] = sub_100005EB8(v9._countAndFlagsBits, (unint64_t)v9._object, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "C-APDU (CANCEL): %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  a1(v33, 62592, 0, 0xC000000000000000, 0, 1);
  uint64_t v11 = v33[0];
  unint64_t v12 = v33[1];
  uint64_t v13 = v33[3];
  unint64_t v14 = v33[4];
  sub_100038DA0((uint64_t)v33, (uint64_t)v34);
  if ((unint64_t)v34[1] >> 60 != 15)
  {
    int v15 = v35;
    sub_1000065D0(v11, v12);
    sub_1000065D0(v13, v14);
    sub_1000065D0(v11, v12);
    sub_1000065D0(v13, v14);
    int v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      BOOL v32 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v18 = 136315138;
      Swift::String v19 = Data.hexString()();
      sub_100005EB8(v19._countAndFlagsBits, (unint64_t)v19._object, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C6D84(v33, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v33, (void (*)(void, void, void, void, void))sub_100038E90);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "R-APDU: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C6D84(v33, (void (*)(void, void, void, void, void))sub_100038E90);
      sub_1000C6D84(v33, (void (*)(void, void, void, void, void))sub_100038E90);
    }

    uint64_t v20 = Logger.logObject.getter();
    if (v15 == 36864)
    {
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "cleared persistent storage in SE", v22, 2u);
        swift_slowDealloc();
      }

      if (qword_1001D9410 != -1) {
        swift_once();
      }
      uint64_t v23 = static GlobalState.shared;
      [*(id *)(static GlobalState.shared + 72) lock];
      uint64_t v24 = *(void *)(v23 + 96);
      BOOL v25 = __OFADD__(v24, 1);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
      }
      else
      {
        *(void *)(v23 + 96) = v26;
        while (*(uint64_t *)(v23 + 88) > 0 || *(unsigned char *)(v23 + 80) == 1)
          [*(id *)(v23 + 72) wait];
        uint64_t v27 = *(void *)(v23 + 96);
        BOOL v25 = __OFSUB__(v27, 1);
        uint64_t v28 = v27 - 1;
        if (!v25)
        {
          *(void *)(v23 + 96) = v28;
          *(unsigned char *)(v23 + 80) = 1;
          [*(id *)(v23 + 72) unlock];
          *(unsigned char *)(v23 + 33) = 0;
          sub_1001661D8();
          [*(id *)(v23 + 72) lock];
          *(unsigned char *)(v23 + 80) = 0;
          [*(id *)(v23 + 72) broadcast];
          [*(id *)(v23 + 72) unlock];
LABEL_23:
          sub_1000C6D84(v33, (void (*)(void, void, void, void, void))sub_100038E90);
          return;
        }
      }
      __break(1u);
    }
    else
    {
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v29))
      {
        int v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v29, "failed to cleared persistent storage in SE", v30, 2u);
        swift_slowDealloc();

        goto LABEL_23;
      }
      sub_1000C6D84(v33, (void (*)(void, void, void, void, void))sub_100038E90);
    }
  }
}

uint64_t sub_100142F28(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  return sub_100142F88(a1, a2, a3, (void (*)(void *__return_ptr, unint64_t, void *, unint64_t, void, uint64_t))sub_1000F4FB4);
}

uint64_t sub_100142F88(unsigned __int8 a1, uint64_t a2, unint64_t a3, void (*a4)(void *__return_ptr, unint64_t, void *, unint64_t, void, uint64_t))
{
  if (qword_1001D9090 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = sub_100003E78(v8, (uint64_t)qword_1001DC090);
  unint64_t v10 = a3 >> 62;
  id v11 = v4;
  sub_1000065D0(a2, a3);
  id v12 = v11;
  sub_1000065D0(a2, a3);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  unsigned __int8 v127 = a1;
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t type = v14;
    uint64_t v15 = swift_slowAlloc();
    id v131 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315906;
    if (a1) {
      uint64_t v16 = 5130576;
    }
    else {
      uint64_t v16 = 0;
    }
    if (a1) {
      unint64_t v17 = 0xE300000000000000;
    }
    else {
      unint64_t v17 = 0xE000000000000000;
    }
    uint64_t v128 = v9;
    sub_100005EB8(v16, v17, (uint64_t *)&v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 15) = 2080;
    Swift::String v18 = Data.hexString()();
    sub_100005EB8(v18._countAndFlagsBits, (unint64_t)v18._object, (uint64_t *)&v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(a2, a3);
    sub_100006628(a2, a3);
    *(_WORD *)(v15 + 25) = 2080;
    id v19 = [v12 description];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    uint64_t v9 = v128;
    uint64_t v23 = v20;
    unint64_t v10 = a3 >> 62;
    sub_100005EB8(v23, v22, (uint64_t *)&v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, type, "get%sKeyAttestation(P1: %hhu, kernelIdentityKeyIdentifier: %s) session: %s", (uint8_t *)v15, 0x23u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100006628(a2, a3);
    sub_100006628(a2, a3);
  }
  switch((int)v10)
  {
    case 1:
      LODWORD(v24) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
      }
      uint64_t v24 = (int)v24;
LABEL_17:
      if ((unint64_t)(v24 - 31) < 0xFFFFFFFFFFFFFFE2)
      {
LABEL_18:
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        uint64_t v30 = v29;
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          BOOL v32 = "wrong length for kernelIdentityKeyIdentifier";
LABEL_28:
          _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v30, v32, v31, 2u);
          swift_slowDealloc();
          goto LABEL_29;
        }
        goto LABEL_29;
      }
      uint64_t v30 = self;
      if (![(id)v30 isFeatureAppleSSESupported])
      {
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.error.getter();
        uint64_t v30 = v42;
        if (os_log_type_enabled(v28, v42))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          BOOL v32 = "SSE feature not supported";
          goto LABEL_28;
        }
        goto LABEL_29;
      }
      uint64_t v33 = self;
      id v131 = 0;
      id v34 = [v33 embeddedSecureElementWithError:&v131];
      if (!v34)
      {
        id v45 = v131;
        _convertNSErrorToError(_:)();

        goto LABEL_30;
      }
      uint64_t v35 = v34;
      id v36 = v131;
      id v37 = [v35 serialNumber];

      if (!v37)
      {
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.error.getter();
        uint64_t v30 = v46;
        if (!os_log_type_enabled(v28, v46)) {
          goto LABEL_29;
        }
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        BOOL v32 = "no seid";
        goto LABEL_28;
      }
      uint64_t v38 = a2;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v39 = Data.init(hexString:)();
      if (v40 >> 60 == 15)
      {
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        uint64_t v30 = v41;
        if (os_log_type_enabled(v28, v41))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          BOOL v32 = "failed to get SEID";
          goto LABEL_28;
        }
LABEL_29:

        sub_100038E08();
        swift_allocError();
        *os_log_type_t v43 = 0;
LABEL_30:
        swift_willThrow();
        return v30;
      }
      uint64_t v47 = v39;
      unint64_t v48 = v40;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v131 = 0;
      id v50 = [(id)v30 getSignedDeviceData:isa error:&v131];

      id v51 = v131;
      if (v50)
      {
        uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v54 = v53;

        switch(v54 >> 62)
        {
          case 1uLL:
            LODWORD(v55) = HIDWORD(v52) - v52;
            if (__OFSUB__(HIDWORD(v52), v52)) {
              goto LABEL_91;
            }
            uint64_t v55 = (int)v55;
LABEL_42:
            if (v55 != 45)
            {
LABEL_45:
              sub_100006628(v52, v54);
              goto LABEL_46;
            }
            unint64_t v121 = v48;
            type metadata accessor for TLV();
            uint64_t v59 = *(void *)TLVTag.kernelIdentityKey.unsafeMutableAddressor();
            sub_1000065D0(v38, a3);
            uint64_t v60 = TLV.__allocating_init(tag:value:)(v59, v38, a3);
            uint64_t v61 = (void *)(*(uint64_t (**)(void *))(*v60 + 168))(v60);
            unint64_t v63 = v62;
            swift_release();
            uint64_t v64 = *(void *)TLVTag.sepData.unsafeMutableAddressor();
            sub_1000065D0(v52, v54);
            uint64_t v65 = TLV.__allocating_init(tag:value:)(v64, v52, v54);
            uint64_t v66 = (*(uint64_t (**)(void *))(*v65 + 168))(v65);
            unint64_t v68 = v67;
            swift_release();
            id v131 = v61;
            unint64_t v132 = v63;
            uint64_t v124 = (uint64_t)v61;
            unint64_t v125 = v63;
            sub_1000065D0((uint64_t)v61, v63);
            sub_1000065D0(v66, v68);
            sub_100147328(v66, v68);
            uint64_t typea = v66;
            sub_100006628(v66, v68);
            uint64_t v69 = v131;
            unint64_t v70 = v132;
            switch(v132 >> 62)
            {
              case 1uLL:
                unsigned __int16 v71 = WORD2(v131) - (_WORD)v131;
                if (__OFSUB__(HIDWORD(v131), v131))
                {
                  __break(1u);
                  goto LABEL_52;
                }
                break;
              case 2uLL:
LABEL_52:
                uint64_t v77 = v69[2];
                uint64_t v76 = v69[3];
                unsigned __int16 v71 = v76 - v77;
                if (__OFSUB__(v76, v77))
                {
                  __break(1u);
                  goto LABEL_55;
                }
                break;
              case 3uLL:
LABEL_55:
                sub_100006628((uint64_t)v69, v70);
                unsigned __int16 v71 = 0;
                break;
              default:
                sub_100006628((uint64_t)v131, v132);
                unsigned __int16 v71 = BYTE6(v70);
                break;
            }
            uint64_t v118 = v52;
            uint64_t v120 = v47;
            sub_1000065D0((uint64_t)v69, v70);
            sub_1000065D0((uint64_t)v69, v70);
            uint64_t v78 = Logger.logObject.getter();
            os_log_type_t v79 = static os_log_type_t.info.getter();
            uint64_t v129 = v9;
            unint64_t v119 = v54;
            unint64_t v117 = v68;
            if (os_log_type_enabled(v78, v79))
            {
              uint64_t v80 = swift_slowAlloc();
              id v131 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v80 = 136315394;
              uint64_t v116 = v78;
              uint64_t v81 = (uint64_t)v69;
              unint64_t v82 = v70;
              if (v127) {
                uint64_t v83 = 542001488;
              }
              else {
                uint64_t v83 = 0;
              }
              if (v127) {
                unint64_t v84 = 0xE400000000000000;
              }
              else {
                unint64_t v84 = 0xE000000000000000;
              }
              os_log_type_t v115 = v79;
              sub_100005EB8(v83, v84, (uint64_t *)&v131);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v80 + 12) = 2080;
              unint64_t v85 = ((unint64_t)v127 << 16) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)v71 << 32) | 0xCE80;
              uint64_t v86 = sub_10006BD14(v85, v81, v70, 0);
              unint64_t v88 = v87;
              Swift::String v89 = Data.hexString()();
              uint64_t v90 = v86;
              unint64_t v70 = v82;
              uint64_t v69 = (void *)v81;
              sub_100006628(v90, v88);
              sub_100005EB8(v89._countAndFlagsBits, (unint64_t)v89._object, (uint64_t *)&v131);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100006628(v81, v70);
              sub_100006628(v81, v70);
              _os_log_impl((void *)&_mh_execute_header, v116, v115, "C-APDU (GET %sKEY ATTESTATION): %s", (uint8_t *)v80, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_100006628((uint64_t)v69, v70);
              sub_100006628((uint64_t)v69, v70);

              unint64_t v85 = ((unint64_t)v127 << 16) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)v71 << 32) | 0xCE80;
            }
            a4(v133, v85, v69, v70, 0, 1);
            uint64_t v91 = v133[0];
            unint64_t v92 = v133[1];
            uint64_t v93 = v133[3];
            unint64_t v94 = v133[4];
            sub_100038DA0((uint64_t)v133, (uint64_t)v134);
            if (*((void *)&v134[0] + 1) >> 60 == 15)
            {
              long long v95 = Logger.logObject.getter();
              os_log_type_t v96 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v95, v96))
              {
                uint64_t v97 = (uint8_t *)swift_slowAlloc();
                id v131 = (id)swift_slowAlloc();
                *(_DWORD *)uint64_t v97 = 136315138;
                if (v127) {
                  uint64_t v98 = 542001488;
                }
                else {
                  uint64_t v98 = 0;
                }
                if (v127) {
                  unint64_t v99 = 0xE400000000000000;
                }
                else {
                  unint64_t v99 = 0xE000000000000000;
                }
                sub_100005EB8(v98, v99, (uint64_t *)&v131);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v95, v96, "failed to get %skey attestation", v97, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }

              uint64_t v30 = v121;
              sub_100038E08();
              swift_allocError();
              *char v100 = 0;
              swift_willThrow();
              sub_100006628((uint64_t)v69, v70);
              sub_100006628(typea, v117);
              sub_100006628(v124, v125);
              sub_100006628(v118, v119);
              sub_10000BF70(v120, v121);
            }
            else
            {
              long long v136 = v134[0];
              long long v137 = v134[1];
              uint64_t v138 = v135;
              sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_1000C6DC0);
              sub_1000065D0(v91, v92);
              sub_1000065D0(v93, v94);
              sub_1000065D0(v91, v92);
              sub_1000065D0(v93, v94);
              sub_1000065D0(v91, v92);
              sub_1000065D0(v93, v94);
              int v101 = Logger.logObject.getter();
              os_log_type_t v102 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v101, v102))
              {
                uint64_t v103 = swift_slowAlloc();
                char v104 = (void *)swift_slowAlloc();
                id v131 = (id)swift_slowAlloc();
                *(_DWORD *)uint64_t v103 = 136315394;
                uint64_t v105 = Data.description.getter();
                sub_100005EB8(v105, v106, (uint64_t *)&v131);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
                *(_WORD *)(v103 + 12) = 2112;
                __int16 v107 = v137;
                sub_100038E08();
                swift_allocError();
                *unint64_t v108 = v107;
                uint64_t v130 = _swift_stdlib_bridgeErrorToNSError();
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *char v104 = v130;
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
                _os_log_impl((void *)&_mh_execute_header, v101, v102, "R-APDU: %s, sw: %@", (uint8_t *)v103, 0x16u);
                sub_100003EB0((uint64_t *)&unk_1001DA540);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
                sub_100006628(v91, v92);
                sub_100006628(v93, v94);
                sub_1000C6A48((uint64_t *)&v136);
              }

              __int16 v109 = v137;
              uint64_t v30 = v129;
              if ((unsigned __int16)v137 == 36864)
              {
                sub_10000BF70(v120, v121);
                sub_100006628(v118, v119);
                sub_100006628((uint64_t)v69, v70);
                sub_100006628(typea, v117);
                sub_100006628(v124, v125);
                uint64_t v30 = v136;
                sub_1000065D0(v136, *((unint64_t *)&v136 + 1));
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
              }
              else
              {
                unint64_t v110 = Logger.logObject.getter();
                os_log_type_t v111 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v110, v111))
                {
                  uint64_t v30 = swift_slowAlloc();
                  id v131 = (id)swift_slowAlloc();
                  *(_DWORD *)uint64_t v30 = 136315138;
                  if (v127) {
                    uint64_t v112 = 542001488;
                  }
                  else {
                    uint64_t v112 = 0;
                  }
                  if (v127) {
                    unint64_t v113 = 0xE400000000000000;
                  }
                  else {
                    unint64_t v113 = 0xE000000000000000;
                  }
                  sub_100005EB8(v112, v113, (uint64_t *)&v131);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v110, v111, "failed to get %skey attestation", (uint8_t *)v30, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }

                sub_100038E08();
                swift_allocError();
                *unint64_t v114 = v109;
                swift_willThrow();
                sub_1000C6D84(v133, (void (*)(void, void, void, void, void))sub_100038E90);
                sub_100006628((uint64_t)v69, v70);
                sub_100006628(typea, v117);
                sub_100006628(v124, v125);
                sub_100006628(v118, v119);
                sub_10000BF70(v120, v121);
              }
            }
            break;
          case 2uLL:
            uint64_t v58 = *(void *)(v52 + 16);
            uint64_t v57 = *(void *)(v52 + 24);
            BOOL v27 = __OFSUB__(v57, v58);
            uint64_t v55 = v57 - v58;
            if (!v27) {
              goto LABEL_42;
            }
            goto LABEL_92;
          case 3uLL:
            goto LABEL_45;
          default:
            uint64_t v55 = BYTE6(v54);
            goto LABEL_42;
        }
      }
      else
      {
        unint64_t v56 = v51;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
LABEL_46:
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.error.getter();
        uint64_t v30 = v73;
        if (os_log_type_enabled(v72, v73))
        {
          unint64_t v74 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v74 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v30, "failed to get signed device data or wrong length", v74, 2u);
          swift_slowDealloc();
        }

        sub_100038E08();
        swift_allocError();
        *char v75 = 0;
        swift_willThrow();
        sub_10000BF70(v47, v48);
      }
      return v30;
    case 2:
      uint64_t v26 = *(void *)(a2 + 16);
      uint64_t v25 = *(void *)(a2 + 24);
      BOOL v27 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v27) {
        goto LABEL_17;
      }
      goto LABEL_90;
    case 3:
      goto LABEL_18;
    default:
      uint64_t v24 = BYTE6(a3);
      goto LABEL_17;
  }
}

uint64_t sub_100144188()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DF7C0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DF7C0);
  if (qword_1001D9278 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1088);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100144250()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession];
  if (v2)
  {
    id v3 = v2;
    if ([v3 isActive])
    {
      if (qword_1001D9390 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_100003E78(v4, (uint64_t)qword_1001DF7C0);
      unint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        unint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Clear PAN in deinit (timeout/crash)", v7, 2u);
        swift_slowDealloc();
      }

      sub_100142970((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F61E8);
      v11[4] = sub_10014441C;
      _OWORD v11[5] = 0;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 1107296256;
      _OWORD v11[2] = sub_1000048D8;
      uint64_t v11[3] = &unk_1001CBC58;
      uint64_t v8 = _Block_copy(v11);
      [v3 endSessionWithCompletion:v8];
      _Block_release(v8);
    }
  }
  uint64_t v9 = (objc_class *)type metadata accessor for DefaultPINAppletProxy();
  v12.receiver = v1;
  v12.super_class = v9;
  return [super dealloc];
}

void sub_10014441C()
{
}

id sub_1001444E0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v93 = *(void *)(v7 - 8);
  id v94 = (id)v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v91 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  unint64_t v92 = (char *)&v81 - v12;
  uint64_t v13 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D9390 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100003E78(v17, (uint64_t)qword_1001DF7C0);
  Swift::String v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v88 = a1;
  unint64_t v89 = a2;
  uint64_t v90 = v3;
  if (v20)
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 136315138;
    uint64_t v95 = sub_100005EB8(0xD000000000000022, 0x800000010019BAF0, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100006788((void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_monitorManager), *(void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_monitorManager + 24));
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v16, 1, 1, v22);
  char v23 = sub_10010F4B0((uint64_t)v16);
  sub_10014754C((uint64_t)v16);
  if ((v23 & 1) == 0)
  {
    BOOL v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    uint64_t v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v29, "Not attested", v30, 2u);
      swift_slowDealloc();
    }

    uint64_t v31 = 0xD000000000000030;
    BOOL v32 = (void *)0x800000010019C1A0;
    uint64_t v33 = 12008;
    goto LABEL_15;
  }
  uint64_t v24 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  uint64_t v25 = *(void **)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (v25)
  {
    [v25 endSession];
    uint64_t v26 = *(void **)(v4 + v24);
  }
  else
  {
    uint64_t v26 = 0;
  }
  *(void *)(v4 + v24) = 0;

  *(void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) = 0;
  id result = [*(id *)(*sub_100006788((void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_secureElement), *(void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_secureElement + 24))+ 24) ecdsaCertificate];
  if (result)
  {
    uint64_t v35 = result;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v36 = Data.init(hexString:)();
    if (v37 >> 60 != 15)
    {
      uint64_t v82 = v24;
      unint64_t v84 = v37;
      uint64_t v86 = v36;
      dispatch_semaphore_t v38 = dispatch_semaphore_create(0);
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = 0;
      uint64_t v83 = (void **)(v39 + 16);
      id v40 = [self sharedHardwareManager];
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v38;
      *(void *)(v41 + 24) = v39;
      char v100 = sub_100147624;
      uint64_t v101 = v41;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v97 = 1107296256;
      uint64_t v98 = sub_100005210;
      unint64_t v99 = &unk_1001CBC08;
      os_log_type_t v42 = _Block_copy(&aBlock);
      unint64_t v87 = v38;
      uint64_t v85 = v39;
      swift_retain();
      swift_release();
      id v43 = [v40 startSecureElementManagerSession:v42];
      _Block_release(v42);

      if (([v43 isFirstInQueue] & 1) == 0)
      {
        os_log_type_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          os_log_type_t v46 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v46 = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "waiting for eSE...", v46, 2u);
          swift_slowDealloc();
        }
      }
      uint64_t v47 = v91;
      static DispatchTime.now()();
      unint64_t v48 = v92;
      + infix(_:_:)();
      id v49 = v94;
      id v50 = *(void (**)(char *, id))(v93 + 8);
      v50(v47, v94);
      OS_dispatch_semaphore.wait(timeout:)();
      v50(v48, v49);
      if (static DispatchTimeoutResult.== infix(_:_:)())
      {
        id v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        BOOL v53 = os_log_type_enabled(v51, v52);
        uint64_t v54 = v86;
        unint64_t v55 = v84;
        unint64_t v56 = v43;
        if (v53)
        {
          uint64_t v57 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "timeout when obtaining session", v57, 2u);
          swift_slowDealloc();
        }

        sub_10002AFBC(12001, 0xD00000000000001ELL, (void *)0x800000010019C220, 0);
        swift_willThrow();
      }
      else
      {
        id v94 = v43;
        uint64_t v58 = v83;
        swift_beginAccess();
        uint64_t v59 = *v58;
        if (*v58)
        {
          uint64_t v60 = qword_1001D9350;
          id v61 = v59;
          if (v60 != -1) {
            swift_once();
          }
          uint64_t v62 = v90;
          NFSecureElementManagerSession.select(_:)(AID_PIN_APPLET, *(unint64_t *)algn_1001E1198);
          if (!v62)
          {
            sub_1001404FC(v88, v89);
            if (qword_1001D9370 != -1) {
              swift_once();
            }
            uint64_t v72 = qword_1001E11D0;
            unint64_t v73 = *(void *)algn_1001E11D8;
            sub_1000065D0(qword_1001E11D0, *(unint64_t *)algn_1001E11D8);
            uint64_t v29 = sub_100142F88(1u, v72, v73, (void (*)(void *__return_ptr, unint64_t, void *, unint64_t, void, uint64_t))sub_1000F61E8);
            sub_100006628(v72, v73);
            char v75 = v61;
            uint64_t v76 = v82;
            uint64_t v77 = *(void **)(v4 + v82);
            *(void *)(v4 + v82) = v59;
            id v78 = v75;

            os_log_type_t v79 = *(void **)(v4 + v76);
            if (v79)
            {
              id v80 = v79;
              [v80 setDelegate:v4];
              swift_release();
            }
            else
            {
              swift_release();
            }
            swift_unknownObjectRelease();

            return (id)v29;
          }
          swift_errorRetain();
          swift_errorRetain();
          unint64_t v63 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v63, v64))
          {
            uint64_t v65 = (uint8_t *)swift_slowAlloc();
            uint64_t v66 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v65 = 138412290;
            swift_errorRetain();
            uint64_t v67 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t aBlock = v67;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v66 = v67;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed to select PIN applet %@", v65, 0xCu);
            sub_100003EB0((uint64_t *)&unk_1001DA540);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
          }
          uint64_t v54 = v86;
          unint64_t v55 = v84;
          unint64_t v56 = v94;

          sub_10002AFBC(12002, 0, 0, 0);
          swift_willThrow();

          swift_errorRelease();
        }
        else
        {
          unint64_t v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.error.getter();
          BOOL v70 = os_log_type_enabled(v68, v69);
          unint64_t v56 = v94;
          if (v70)
          {
            unsigned __int16 v71 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unsigned __int16 v71 = 0;
            _os_log_impl((void *)&_mh_execute_header, v68, v69, "no pending session", v71, 2u);
            swift_slowDealloc();
          }

          sub_10002AFBC(12001, 0xD000000000000012, (void *)0x800000010019C200, 0);
          swift_willThrow();
          uint64_t v54 = v86;
          unint64_t v55 = v84;
        }
      }
      uint64_t v29 = (uint64_t)v87;
      char v100 = sub_100145398;
      uint64_t v101 = 0;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v97 = 1107296256;
      uint64_t v98 = sub_1000048D8;
      unint64_t v99 = &unk_1001CBC30;
      unint64_t v74 = _Block_copy(&aBlock);
      [v56 endSessionWithCompletion:v74];
      _Block_release(v74);
      swift_willThrow();

      swift_release();
      swift_unknownObjectRelease();
      sub_10000BF70(v54, v55);
      return (id)v29;
    }
    uint64_t v31 = 0xD000000000000016;
    BOOL v32 = (void *)0x800000010019C1E0;
    uint64_t v33 = 12003;
LABEL_15:
    sub_10002AFBC(v33, v31, v32, 0);
    swift_willThrow();
    return (id)v29;
  }
  __break(1u);
  return result;
}

Swift::Int sub_1001450B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    if (a1)
    {
      uint64_t v11 = (void **)(a4 + 16);
      swift_beginAccess();
      uint64_t v12 = *v11;
      *uint64_t v11 = a1;
      id v13 = a1;

      return OS_dispatch_semaphore.signal()();
    }
    if (qword_1001D9390 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100003E78(v15, (uint64_t)qword_1001DF7C0);
    unint64_t v5 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v16, "nil session", v17, 2u);
      swift_slowDealloc();
    }
LABEL_9:

    return OS_dispatch_semaphore.signal()();
  }
  swift_errorRetain();
  if (qword_1001D9390 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DF7C0);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v5, v6))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_9;
  }
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  v18[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136315138;
  swift_errorRetain();
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  uint64_t v8 = String.init<A>(describing:)();
  sub_100005EB8(v8, v9, v18);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  return OS_dispatch_semaphore.signal()();
}

void sub_100145398()
{
}

void sub_1001453B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  if (qword_1001D9390 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DF7C0);
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  uint64_t v30 = a1;
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t aBlock[7] = sub_100005EB8(0xD000000000000011, 0x800000010019BB80, aBlock);
    uint64_t v4 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v12 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength;
  if (*(void *)(v2 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) >= *(void *)(v2
                                                                                                  + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_maxPinLength))
  {
    uint64_t v19 = 0xD000000000000013;
    BOOL v20 = (void *)0x800000010019C160;
    uint64_t v21 = 12006;
LABEL_15:
    sub_10002AFBC(v21, v19, v20, 0);
    swift_willThrow();
    return;
  }
  uint64_t v13 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (!v14)
  {
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "no session", v24, 2u);
      swift_slowDealloc();
    }

    uint64_t v19 = 0xD000000000000025;
    BOOL v20 = (void *)0x800000010019C0D0;
    uint64_t v21 = 12010;
    goto LABEL_15;
  }
  id v15 = v14;
  if (![v15 isActive])
  {
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      BOOL v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "session not active", v27, 2u);
      swift_slowDealloc();
    }

    aBlock[4] = (uint64_t)sub_1001457E0;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000048D8;
    id aBlock[3] = (uint64_t)&unk_1001CBB90;
    os_log_type_t v28 = _Block_copy(aBlock);
    [v15 endSessionWithCompletion:v28, v30];
    _Block_release(v28);
    uint64_t v29 = *(void **)(v5 + v13);
    *(void *)(v5 + v13) = 0;

    sub_10002AFBC(12010, 0xD000000000000028, (void *)0x800000010019C100, 0);
    swift_willThrow();
    goto LABEL_19;
  }
  sub_100140E10(v30, a2);
  if (v4)
  {
LABEL_19:

    return;
  }
  uint64_t v16 = *(void *)(v2 + v12);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v2 + v12) = v18;
    goto LABEL_19;
  }
  __break(1u);
}

void sub_1001457E0()
{
}

void sub_100145800()
{
  uint64_t v2 = v0;
  if (qword_1001D9390 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003E78(v3, (uint64_t)qword_1001DF7C0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 136315138;
    v21[7] = sub_100005EB8(0xD000000000000011, 0x800000010019BB60, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v7 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (v8)
  {
    id v9 = v8;
    if ([v9 isActive])
    {
      sub_1001417B0();
      if (!v1)
      {
        uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
        BOOL v11 = v10 < 1;
        uint64_t v12 = v10 - 1;
        if (!v11) {
          *(void *)(v0 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) = v12;
        }
      }
    }
    else
    {
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "session not active", v18, 2u);
        swift_slowDealloc();
      }

      void v21[4] = (uint64_t)sub_1001457E0;
      v21[5] = 0;
      v21[0] = (uint64_t)_NSConcreteStackBlock;
      v21[1] = 1107296256;
      v21[2] = (uint64_t)sub_1000048D8;
      v21[3] = (uint64_t)&unk_1001CBB68;
      uint64_t v19 = _Block_copy(v21);
      [v9 endSessionWithCompletion:v19];
      _Block_release(v19);
      BOOL v20 = *(void **)(v2 + v7);
      *(void *)(v2 + v7) = 0;

      sub_10002AFBC(12010, 0xD000000000000028, (void *)0x800000010019C100, 0);
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "no session", v15, 2u);
      swift_slowDealloc();
    }

    sub_10002AFBC(12010, 0xD000000000000025, (void *)0x800000010019C0D0, 0);
    swift_willThrow();
  }
}

void sub_100145BBC(uint64_t a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (qword_1001D9390 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001DF7C0);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    id aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v103 = sub_100005EB8(0xD000000000000012, 0x800000010019BB40, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_1001D9318 != -1) {
    swift_once();
  }
  if (![(id)qword_1001E1150 canEvaluatePolicy:2 error:0])
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "no passcode when generating PIN block", v21, 2u);
      swift_slowDealloc();
    }

    sub_10002AFBC(12008, 0xD00000000000001BLL, (void *)0x800000010019C0B0, 0);
    swift_willThrow();
    id v9 = (void **)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
    uint64_t v22 = *(void **)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
    if (!v22) {
      goto LABEL_28;
    }
    uint64_t v101 = sub_100147164;
    uint64_t v102 = 0;
    id aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v98 = 1107296256;
    os_log_type_t v23 = &unk_1001CBA78;
    goto LABEL_27;
  }
  id v9 = (void **)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (!*(void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession))
  {
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "no session", v26, 2u);
      swift_slowDealloc();
    }

    sub_10002AFBC(12010, 0xD000000000000025, (void *)0x800000010019C0D0, 0);
    swift_willThrow();
    uint64_t v22 = *v9;
    if (!*v9) {
      goto LABEL_28;
    }
    uint64_t v101 = sub_100147164;
    uint64_t v102 = 0;
    id aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v98 = 1107296256;
    os_log_type_t v23 = &unk_1001CBAA0;
    goto LABEL_27;
  }
  id v10 = *(id *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (![v10 isActive])
  {
    BOOL v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "session not active", v29, 2u);
      swift_slowDealloc();
    }

    sub_10002AFBC(12010, 0xD000000000000028, (void *)0x800000010019C100, 0);
    swift_willThrow();

    uint64_t v22 = *v9;
    if (!*v9) {
      goto LABEL_28;
    }
    uint64_t v101 = sub_100147164;
    uint64_t v102 = 0;
    id aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v98 = 1107296256;
    os_log_type_t v23 = &unk_1001CBAC8;
LABEL_27:
    unint64_t v99 = sub_1000048D8;
    char v100 = v23;
    uint64_t v30 = _Block_copy(&aBlock);
    id v31 = v22;
    [v31 endSessionWithCompletion:v30];
    _Block_release(v30);

LABEL_28:
    BOOL v11 = (void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
LABEL_29:
    *BOOL v11 = 0;
    BOOL v32 = *v9;
    *id v9 = 0;

    return;
  }
  BOOL v11 = (void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength);
  if (v12)
  {
    if (v12 < *(void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_minPinLength))
    {
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "not enough pin digits", v15, 2u);
        swift_slowDealloc();
      }

      uint64_t v16 = (void *)0x800000010019C180;
      uint64_t v17 = 12009;
      uint64_t v18 = 0xD000000000000012;
LABEL_39:
      uint64_t v3 = sub_10002AFBC(v17, v18, v16, 0);
      swift_willThrow();
LABEL_40:
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        id v50 = (uint8_t *)swift_slowAlloc();
        id aBlock = swift_slowAlloc();
        *(_DWORD *)id v50 = 136315138;
        uint64_t v103 = v3;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v51 = String.init<A>(describing:)();
        uint64_t v103 = sub_100005EB8(v51, v52, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%s", v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_willThrow();
      BOOL v53 = *v9;
      if (*v9)
      {
        uint64_t v101 = sub_100147164;
        uint64_t v102 = 0;
        id aBlock = (uint64_t)_NSConcreteStackBlock;
        uint64_t v98 = 1107296256;
        unint64_t v99 = sub_1000048D8;
        char v100 = &unk_1001CBAF0;
        uint64_t v54 = _Block_copy(&aBlock);
        id v55 = v53;
        [v55 endSessionWithCompletion:v54];
        _Block_release(v54);
      }
      goto LABEL_29;
    }
    if (*(void *)(v4 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_maxPinLength) < v12)
    {
      os_log_type_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "pin length exceeded", v47, 2u);
        swift_slowDealloc();
      }

      uint64_t v18 = 0xD000000000000013;
      uint64_t v16 = (void *)0x800000010019C160;
      uint64_t v17 = 12006;
      goto LABEL_39;
    }
    unint64_t v56 = sub_100141F4C();
    if (v2) {
      goto LABEL_40;
    }
    uint64_t v58 = (uint64_t)v56;
    unint64_t v59 = v57;
    type metadata accessor for TLV();
    id v60 = static TLV.decode(from:)(v58, v59);
    uint64_t v61 = v58;
    uint64_t v63 = (uint64_t)v60;
    unint64_t v86 = v59;
    uint64_t v88 = v61;
    id v93 = v10;
    uint64_t v95 = v11;
    id aBlock = (uint64_t)v60;
    TLVTag.cipherBlob.unsafeMutableAddressor();
    sub_100003EB0((uint64_t *)&unk_1001DF8B0);
    sub_1000E6DE8();
    uint64_t v64 = Collection<>.first(tag:)();
    if (v64)
    {
      uint64_t v65 = v64;
      uint64_t v66 = TLVTag.blobDefinition.unsafeMutableAddressor();
      uint64_t v67 = (*(uint64_t (**)(void))(*(void *)v65 + 200))(*v66);
      if (v67)
      {
        uint64_t v85 = v67;
        id aBlock = v63;
        TLVTag.keyBlob.unsafeMutableAddressor();
        uint64_t v68 = Collection<>.first(tag:)();
        swift_bridgeObjectRelease();
        if (v68)
        {
          uint64_t v69 = (*(uint64_t (**)(void))(*(void *)v68 + 200))(*v66);
          if (v69)
          {
            uint64_t v70 = v69;
            if (qword_1001D9370 != -1) {
              swift_once();
            }
            uint64_t v71 = qword_1001E11D0;
            unint64_t v72 = *(void *)algn_1001E11D8;
            sub_1000065D0(qword_1001E11D0, *(unint64_t *)algn_1001E11D8);
            uint64_t v73 = sub_100142F88(2u, v71, v72, (void (*)(void *__return_ptr, unint64_t, void *, unint64_t, void, uint64_t))sub_1000F61E8);
            unint64_t v90 = v78;
            uint64_t v91 = v73;
            uint64_t v79 = sub_100006628(v71, v72);
            uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 168))(v79);
            unint64_t v89 = v81;
            uint64_t v82 = (*(uint64_t (**)(void))(*(void *)v70 + 168))();
            unint64_t v43 = v83;
            swift_release();
            swift_release();
            swift_release();
            swift_release();

            sub_100006628(v88, v86);
            unint64_t v84 = *v9;
            uint64_t v94 = v12;
            if (!*v9)
            {
              uint64_t v39 = v80;
              unint64_t v40 = v90;
              uint64_t v41 = v91;
              uint64_t v44 = v82;
              unint64_t v42 = v89;
              goto LABEL_48;
            }
            unint64_t v87 = v43;
            uint64_t v92 = v82;
            uint64_t v39 = v80;
            uint64_t v101 = sub_100147164;
            uint64_t v102 = 0;
            id aBlock = (uint64_t)_NSConcreteStackBlock;
            uint64_t v98 = 1107296256;
            unint64_t v99 = sub_1000048D8;
            char v100 = &unk_1001CBB18;
            unint64_t v37 = _Block_copy(&aBlock);
            id v38 = v84;
            [v38 endSessionWithCompletion:v37];
            goto LABEL_34;
          }
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
        }
LABEL_58:
        sub_1000065D0(v88, v86);
        sub_1000065D0(v88, v86);
        unint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = (uint8_t *)swift_slowAlloc();
          id aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v76 = 136315138;
          Swift::String v77 = Data.hexString()();
          uint64_t v103 = sub_100005EB8(v77._countAndFlagsBits, (unint64_t)v77._object, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100006628(v88, v86);
          sub_100006628(v88, v86);
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "Error parsing PIN applet response: %s", v76, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100006628(v88, v86);
          sub_100006628(v88, v86);
        }

        id v10 = v93;
        uint64_t v3 = sub_10002AFBC(12003, 0xD000000000000021, (void *)0x800000010019C130, 0);
        swift_willThrow();
        sub_100006628(v88, v86);
        goto LABEL_40;
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "pin bypass", v35, 2u);
    swift_slowDealloc();
  }
  uint64_t v95 = v11;

  uint64_t v36 = *v9;
  uint64_t v94 = 0;
  if (!*v9)
  {
    uint64_t v39 = 0;
    uint64_t v44 = 0;
    uint64_t v41 = 0;
    unint64_t v42 = 0xC000000000000000;
    unint64_t v43 = 0xC000000000000000;
    unint64_t v40 = 0xC000000000000000;
    goto LABEL_48;
  }
  uint64_t v101 = sub_100147164;
  uint64_t v102 = 0;
  id aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v98 = 1107296256;
  unint64_t v99 = sub_1000048D8;
  char v100 = &unk_1001CBB40;
  unint64_t v37 = _Block_copy(&aBlock);
  id v38 = v36;
  [v38 endSessionWithCompletion:v37];
  uint64_t v39 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  unint64_t v87 = 0xC000000000000000;
  unint64_t v89 = 0xC000000000000000;
  unint64_t v90 = 0xC000000000000000;
LABEL_34:
  _Block_release(v37);

  unint64_t v40 = v90;
  uint64_t v41 = v91;
  unint64_t v43 = v87;
  unint64_t v42 = v89;
  uint64_t v44 = v92;
LABEL_48:
  *uint64_t v95 = 0;
  uint64_t v62 = *v9;
  *id v9 = 0;

  *(void *)a1 = v39;
  *(void *)(a1 + 8) = v42;
  *(void *)(a1 + 16) = v44;
  *(void *)(a1 + 24) = v43;
  *(void *)(a1 + 32) = v41;
  *(void *)(a1 + 40) = v40;
  *(unsigned char *)(a1 + 48) = v94 == 0;
}

void sub_100146B34()
{
  uint64_t v1 = v0;
  if (qword_1001D9390 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DF7C0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100005EB8(0xD000000000000012, 0x800000010019BB20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  os_log_type_t v7 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (v7)
  {
    id v8 = v7;
    sub_100142970((void (*)(void *__return_ptr, void, void, void, void, void))sub_1000F61E8);

    id v9 = *(void **)(v1 + v6);
    if (v9)
    {
      aBlock[4] = (uint64_t)sub_100146D98;
      aBlock[5] = 0;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000048D8;
      id aBlock[3] = (uint64_t)&unk_1001CBA50;
      id v10 = _Block_copy(aBlock);
      id v11 = v9;
      [v11 endSessionWithCompletion:v10];
      _Block_release(v10);

      os_log_type_t v7 = *(void **)(v1 + v6);
    }
    else
    {
      os_log_type_t v7 = 0;
    }
  }
  *(void *)(v1 + v6) = 0;

  *(void *)(v1 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength) = 0;
}

void sub_100146D98()
{
}

uint64_t sub_100146DB8(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession;
  os_log_type_t v4 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession);
  if (!v4)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = (void *)result;
  sub_1000AA918();
  id v6 = v5;
  id v7 = v4;
  LOBYTE(v5) = static NSObject.== infix(_:_:)();

  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (qword_1001D9390 != -1) {
LABEL_8:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DF7C0);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "secureElementManagerSessionDidEndUnexpectedly()", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void **)(v2 + v3);
  *(void *)(v2 + v3) = 0;

  uint64_t v13 = (void *)(v2 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_auditor);
  uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_auditor + 24);
  uint64_t v15 = v13[4];
  sub_100006788(v13, v14);
  sub_100003EB0(&qword_1001D9B20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = 0xD000000000000010;
  *(void *)(inited + 40) = 0x8000000100196A80;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = &protocol witness table for String;
  *(void *)(inited + 48) = 0xD00000000000002DLL;
  *(void *)(inited + 56) = 0x800000010019C080;
  unint64_t v17 = sub_100104AF4(inited);
  sub_100136224(27, v17, v14, v15);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for DefaultPINAppletProxy()
{
  return self;
}

id sub_100147070(uint64_t a1, unint64_t a2)
{
  id result = sub_1001444E0(a1, a2);
  if (v2) {
    return (id)v4;
  }
  return result;
}

void sub_1001470A8(uint64_t a1, unint64_t a2)
{
}

void sub_1001470CC()
{
}

double sub_1001470F0@<D0>(uint64_t a1@<X8>)
{
  sub_100145BBC((uint64_t)v7);
  if (!v1)
  {
    double result = *(double *)v7;
    long long v4 = v7[1];
    long long v5 = v7[2];
    char v6 = v8;
    *(_OWORD *)a1 = v7[0];
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    *(unsigned char *)(a1 + 48) = v6;
  }
  return result;
}

void sub_100147140()
{
}

void sub_100147164()
{
}

void sub_100147184(uint64_t (*a1)(void), const char *a2)
{
  if (qword_1001D9390 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DF7C0);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v5 = a1();
  if (os_log_type_enabled(oslog, v5))
  {
    char v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, a2, v6, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10014727C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10014728C()
{
  return swift_release();
}

uint64_t sub_100147294(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100147328(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = sub_100006788(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_1000065D0(a1, a2);
      sub_1000065D0(v5, v6);
      sub_100147294((int)v5, v5 >> 32);
      sub_100006628(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_1000065D0(a1, a2);
      swift_retain();
      swift_retain();
      sub_100147294(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_1000065D0(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return sub_100006520((uint64_t)v10);
}

uint64_t sub_10014754C(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001475AC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001475E4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_100147624(void *a1, uint64_t a2)
{
  return sub_1001450B4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100147684@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v16, v2, 0x110uLL);
  v17[0] = v16[11];
  v17[1] = v16[12];
  void v17[2] = v16[13];
  uint64_t v17[3] = v16[14];
  v16[21] = v16[7];
  v16[22] = v16[8];
  v16[23] = v16[9];
  v16[24] = v16[10];
  v16[17] = v16[3];
  v16[18] = v16[4];
  v16[19] = v16[5];
  v16[20] = v16[6];
  sub_100147B0C((uint64_t)v17, (uint64_t)v18);
  sub_100147B0C((uint64_t)v18, (uint64_t)v19);
  if (!v19[1]) {
    goto LABEL_7;
  }
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10014754C((uint64_t)v7);
LABEL_7:
    uint64_t v14 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v14, 1, v8);
  }
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v13(v12, v7, v8);
  if (sub_100148354())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    goto LABEL_7;
  }
  v13(a1, v12, v8);
  uint64_t v14 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v14, 1, v8);
}

uint64_t sub_1001478C0@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v18, v2, 0x110uLL);
  v18[25] = v18[11];
  v19[0] = v18[12];
  v19[1] = v18[13];
  void v19[2] = v18[14];
  v18[21] = v18[7];
  v18[22] = v18[8];
  v18[23] = v18[9];
  v18[24] = v18[10];
  v18[17] = v18[3];
  v18[18] = v18[4];
  v18[19] = v18[5];
  v18[20] = v18[6];
  sub_100147B0C((uint64_t)v19, (uint64_t)v20);
  sub_100147B0C((uint64_t)v20, (uint64_t)v21);
  if (!v21[1]) {
    goto LABEL_10;
  }
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10014754C((uint64_t)v7);
LABEL_10:
    uint64_t v16 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v16, 1, v8);
  }
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v13(v12, v7, v8);
  char v14 = sub_100148354();
  if (v14 != 2 && (v14 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    goto LABEL_10;
  }
  v13(a1, v12, v8);
  uint64_t v16 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, v16, 1, v8);
}

uint64_t sub_100147B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DA138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100147B74(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v30 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  os_log_type_t v28 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1001D9398 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003E78(v11, (uint64_t)qword_1001DF8E0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  int v14 = v13;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v27 = v1;
    uint64_t v16 = v15;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v33 = v24;
    *(_DWORD *)uint64_t v16 = 136315394;
    int v23 = v14;
    uint64_t v31 = sub_100005EB8(0x65746164696C6176, 0xED0000293A746128, &v33);
    uint64_t v26 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v25 = a1;
    sub_1000EDEC8();
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v31 = sub_100005EB8(v17, v18, &v33);
    uint64_t v3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v23, "KernelToken.%s date: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
  }

  memcpy(v32, v29, sizeof(v32));
  uint64_t v19 = v28;
  sub_1000EC7BC((uint64_t)v28);
  char v20 = DateInterval.contains(_:)();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v30 + 8))(v19, v3);
  if ((v20 & 1) == 0)
  {
    sub_10002A974(2012, 0, 0, 0);
    return swift_willThrow();
  }
  return result;
}