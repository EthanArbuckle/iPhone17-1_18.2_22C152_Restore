int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSString *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  NSString v35;
  id v36;
  NSObject *v37;
  void *v38;
  void *v39;
  char *v40;
  char *v41;
  id *v42;
  void (*v43)(void (*)(), void);
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  id v48;
  Class isa;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  __CFNotificationCenter *v57;
  __CFString *v58;
  char v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  __CFNotificationCenter *v63;
  __CFString *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  int result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *aBlock;
  uint64_t v80;
  void *v81;
  ValueMetadata *v82;
  unint64_t v83;
  uint64_t v84;

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v74 = *(void *)(v3 - 8);
  v75 = v3;
  __chkstk_darwin(v3, v4);
  v73 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v70, v6);
  v7 = type metadata accessor for DispatchQoS();
  v71 = *(void *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7, v8);
  v77 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass();
  v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Logger();
  sub_100003E14(v20, qword_1001D8730);
  v21 = sub_100003E78(v20, (uint64_t)qword_1001D8730);
  v22 = SPRLogger.xpcServer.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v21, v22, v20);
  v76 = v21;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "***** Starting daemon softposreaderd *****", v25, 2u);
    swift_slowDealloc();
  }

  sub_100006680(0, (unint64_t *)&qword_1001DD340);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v10);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  static DispatchQoS.unspecified.getter();
  aBlock = _swiftEmptyArrayStorage;
  sub_1000067CC((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_100006814((unint64_t *)&qword_1001DA500, (uint64_t *)&unk_1001DD350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  qword_1001E0CB0 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (_set_user_dir_suffix())
  {
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      aBlock = (void *)swift_slowAlloc();
      *(_DWORD *)v28 = 136315138;
      v29 = NSTemporaryDirectory();
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      v78 = sub_100005EB8(v30, v32, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Using temporary directory: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    v33 = [self machServiceName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v34 = objc_allocWithZone((Class)NSXPCListener);
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v36 = [v34 initWithMachServiceName:v35];

    qword_1001E0CB8 = (uint64_t)v36;
    qword_1001E0CC0 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for SPRRemoteService()) init];
    [(id)qword_1001E0CB8 setDelegate:qword_1001E0CC0];
    v37 = qword_1001E0CB0;
    v83 = (unint64_t)sub_100003F3C;
    v84 = 0;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_100004854;
    v82 = (ValueMetadata *)&unk_1001C2D80;
    v38 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v37, v38);
    _Block_release(v38);
    sub_100006680(0, &qword_1001D8758);
    qword_1001E0CC8 = static OS_dispatch_source.makeSignalSource(signal:queue:)();
    swift_getObjectType();
    v83 = (unint64_t)sub_1000048CC;
    v84 = 0;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_1000048D8;
    v82 = (ValueMetadata *)&unk_1001C2DA8;
    v39 = _Block_copy(&aBlock);
    v40 = v77;
    static DispatchQoS.unspecified.getter();
    v41 = v73;
    sub_10000491C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v39);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v41, v75);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v40, v72);
    swift_getObjectType();
    OS_dispatch_source.activate()();
    v42 = (id *)PrimaryAccountWatcher.shared.unsafeMutableAddressor();
    v43 = *(void (**)(void (*)(), void))((swift_isaMask & *(void *)*v42) + 0xB0);
    v44 = *v42;
    v43(sub_1000049E4, 0);

    GlobalState.shared.unsafeMutableAddressor();
    swift_retain();
    LOBYTE(v43) = GlobalState.isPANPresent.getter();
    swift_release();
    if (v43)
    {
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "PAN present in NVM upon daemon launch. Clearing PAN now.", v47, 2u);
        swift_slowDealloc();
      }

      v48 = [self sharedHardwareManager];
      sub_100004B04((uint64_t)_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v83 = (unint64_t)sub_100004EA4;
      v84 = 0;
      aBlock = _NSConcreteStackBlock;
      v80 = 1107296256;
      v81 = sub_100005210;
      v82 = (ValueMetadata *)&unk_1001C2DD0;
      v50 = _Block_copy(&aBlock);
      v51 = [v48 startSecureElementManagerSessionWithAttributes:isa completion:v50];
      _Block_release(v50);
      swift_unknownObjectRelease();
    }
    sub_100004650();
    CADailyLogger.shared.unsafeMutableAddressor();
    v52 = qword_1001E0CB0;
    swift_retain();
    CADailyLogger.registerBGSystemTask(queue:)(v52);
    swift_release();
    v82 = &type metadata for SPRFeatures;
    v53 = sub_100004AB0();
    v83 = v53;
    LOBYTE(aBlock) = 0;
    LOBYTE(v52) = isFeatureEnabled(_:)();
    sub_100006520((uint64_t)&aBlock);
    if (v52)
    {
      v54 = Logger.logObject.getter();
      v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Feature Flag Enabled: Manual Post CA Daily", v56, 2u);
        swift_slowDealloc();
      }

      v57 = CFNotificationCenterGetDarwinNotifyCenter();
      v58 = (__CFString *)String._bridgeToObjectiveC()();
      CFNotificationCenterAddObserver(v57, 0, (CFNotificationCallback)sub_100005368, v58, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
    v82 = &type metadata for SPRFeatures;
    v83 = v53;
    LOBYTE(aBlock) = 1;
    v59 = isFeatureEnabled(_:)();
    sub_100006520((uint64_t)&aBlock);
    if (v59)
    {
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Feature Flag Enabled: Manual Send Monitoring Logs", v62, 2u);
        swift_slowDealloc();
      }

      v63 = CFNotificationCenterGetDarwinNotifyCenter();
      v64 = (__CFString *)String._bridgeToObjectiveC()();
      CFNotificationCenterAddObserver(v63, 0, (CFNotificationCallback)sub_100005638, v64, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
    v65 = Logger.logObject.getter();
    v66 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Ready to accept connections", v67, 2u);
      swift_slowDealloc();
    }

    [(id)qword_1001E0CB8 resume];
    dispatch_main();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *sub_100003E14(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100003E78(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100003EB0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100003EF4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void sub_100003F3C(void *a1)
{
  void (*v20)(uint64_t *__return_ptr, uint64_t);
  uint64_t v21;
  void *v22;
  void (*v23)(void *, uint64_t);
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *oslog;
  uint64_t aBlock[3];
  void *v31;
  void (*v32)(void *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t vars8;

  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)&unk_1001D8730);
  if (!TMRTCResetNotification)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (!xpc_dictionary_get_string(a1, _xpc_event_key_name))
  {
LABEL_33:
    __break(1u);
    return;
  }
  uint64_t v7 = String.init(cString:)();
  unint64_t v8 = v6;
  if (v7 == 0xD00000000000001ALL && v6 == 0x8000000100190290
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received MFD event notification", v11, 2u);
      swift_slowDealloc();
    }

    GlobalState.shared.unsafeMutableAddressor();
    swift_retain();
    GlobalState.updateMFDEventTimestamp()();
    swift_release();
    id v12 = [self sharedHardwareManager];
    v32 = sub_1000056E0;
    v33 = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100005210;
    v31 = &unk_1001C2E70;
    v13 = _Block_copy(aBlock);
    id v14 = [v12 startSecureElementManagerSession:v13];
    _Block_release(v13);
    swift_unknownObjectRelease();

    return;
  }
  if (v3 == v7 && v5 == v8)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received TM RTC reset notification", v19, 2u);
      swift_slowDealloc();
    }

    GlobalState.shared.unsafeMutableAddressor();
    swift_retain();
    GlobalState.receiveTMRTCResetNotification()();
    swift_release();
    v20 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)*Primer.shared.unsafeMutableAddressor()
                                                                + 192);
    v21 = swift_retain();
    v20(aBlock, v21);
    swift_release();
    v22 = v31;
    v23 = v32;
    sub_100006788(aBlock, (uint64_t)v31);
    (*((void (**)(void *, void))v23 + 3))(v22, v23);
    sub_100006520((uint64_t)aBlock);
    return;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_16;
  }
  if (v7 == 0xD00000000000002CLL && v8 == 0x80000001001902B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received ApplicationsChanged notification", v26, 2u);
      swift_slowDealloc();
    }

    sub_100004650();
  }
  else
  {
    swift_bridgeObjectRetain();
    oslog = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)v28 = 136315138;
      swift_bridgeObjectRetain();
      v34 = sub_100005EB8(v7, v8, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, oslog, v27, "Ignoring unexpected event: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_100004650()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)&unk_1001D8730);
  GlobalState.shared.unsafeMutableAddressor();
  swift_retain();
  GlobalState.updateNumberOfDeletableClients()(v1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  swift_release();
  if (((v5 | v9) & 1) == 0 && v3 >= 1 && v7 == 0)
  {
    v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134218240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2048;
      v17[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Number of clients changed from %ld to %ld, removing applets now...", (uint8_t *)v13, 0x16u);
      swift_slowDealloc();
    }

    id v14 = [self sharedHardwareManager];
    v17[4] = sub_1000056E0;
    v17[5] = 0;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_100005210;
    v17[3] = &unk_1001C2E20;
    v15 = _Block_copy(v17);
    id v16 = [v14 startSecureElementManagerSession:v15];
    _Block_release(v15);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100004854(uint64_t a1)
{
  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000048B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000048C4()
{
  return swift_release();
}

void sub_1000048CC()
{
}

uint64_t sub_1000048D8(uint64_t a1)
{
  v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10000491C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void sub_1000049E4()
{
}

void sub_1000049F0(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)&unk_1001D8730);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, a1, v5, 2u);
    swift_slowDealloc();
  }

  [(id)qword_1001E0CB8 invalidate];
  usleep(0x7A120u);
  _exit(0);
}

unint64_t sub_100004AB0()
{
  unint64_t result = qword_1001D8760;
  if (!qword_1001D8760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D8760);
  }
  return result;
}

unint64_t sub_100004B04(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001D8788);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100006724(v6, (uint64_t)v15, &qword_1001D8790);
    unint64_t result = sub_10000C46C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100006510(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100004C48(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0((uint64_t *)&unk_1001D8E40);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10000C4B0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100004D6C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003EB0(&qword_1001D8768);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100006724(v6, (uint64_t)&v15, &qword_1001D8770);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10000C4B0(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100006510(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100004EA4(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)&unk_1001D8730);
  if (a1)
  {
    id v5 = a1;
    uint64_t v6 = AID_PIN_APPLET.unsafeMutableAddressor();
    uint64_t v7 = *v6;
    unint64_t v8 = v6[1];
    sub_1000065D0(*v6, v8);
    NFSecureElementManagerSession.select(_:)(v7, v8);
    sub_100006628(v7, v8);
    sub_100006680(0, (unint64_t *)&qword_1001DF8A0);
    sub_1000066BC();
    SecureElementTransceiver.cancelPIN()();
    GlobalState.shared.unsafeMutableAddressor();
    swift_retain();
    GlobalState.isPANPresent.setter(0);
    swift_release();
    aBlock[4] = (uint64_t)sub_100005948;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000048D8;
    aBlock[3] = (uint64_t)&unk_1001C2DF8;
    uint64_t v14 = _Block_copy(aBlock);
    [v5 endSessionWithCompletion:v14];
    _Block_release(v14);
  }
  else
  {
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      char v10 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v10 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v11 = Error.localizedDescription.getter();
        unint64_t v13 = v12;
      }
      else
      {
        unint64_t v13 = 0xE300000000000000;
        uint64_t v11 = 7104878;
      }
      aBlock[11] = sub_100005EB8(v11, v13, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Could not start SecureElementManagerSession to clear PAN: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_100005210(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10000529C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)&unk_1001D8730);
  v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received CFNotification to post the CA daily event now", v3, 2u);
    swift_slowDealloc();
  }

  CADailyLogger.shared.unsafeMutableAddressor();
  swift_retain();
  CADailyLogger.postDailyEvents()();
  return swift_release();
}

void sub_100005368(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_100005380()
{
  void (*v5)(void *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  void v14[3];
  uint64_t v15;
  uint64_t v16;

  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)&unk_1001D8730);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received notification to send the monitoring logs now", v4, 2u);
    swift_slowDealloc();
  }

  id v5 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)*Primer.shared.unsafeMutableAddressor() + 192);
  id v6 = swift_retain();
  v5(v14, v6);
  if (v0)
  {
    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v9 = Logger.logObject.getter();
    char v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      unint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      swift_errorRetain();
      unint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      v14[0] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v12 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error when sending logs: %@", v11, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_release();
    id v7 = v15;
    unint64_t v8 = v16;
    sub_100006788(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    sub_100006520((uint64_t)v14);
  }
}

void sub_100005638(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_100005650(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void))
{
  id v9 = a1;
  id v10 = a3;
  id v12 = a5;
  a6();
}

void sub_1000056E0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)&unk_1001D8730);
  if (a1)
  {
    id v5 = a1;
    NFSecureElementManagerSession.performCleanupScript()();
    aBlock[4] = (uint64_t)sub_100005954;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000048D8;
    aBlock[3] = (uint64_t)&unk_1001C2E48;
    id v6 = _Block_copy(aBlock);
    [v5 endSessionWithCompletion:v6];
    _Block_release(v6);
  }
  else
  {
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v9 = Error.localizedDescription.getter();
        unint64_t v11 = v10;
      }
      else
      {
        unint64_t v11 = 0xE300000000000000;
        uint64_t v9 = 7104878;
      }
      aBlock[10] = sub_100005EB8(v9, v11, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "session not available to remove applets: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_100005948()
{
}

void sub_100005954()
{
}

void sub_100005960(const char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)&unk_1001D8730);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100005A20(uint64_t a1)
{
  uint64_t v2 = sub_1000067CC(&qword_1001D87B0, type metadata accessor for SecurityError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005A8C(uint64_t a1)
{
  uint64_t v2 = sub_1000067CC(&qword_1001D87B0, type metadata accessor for SecurityError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005AFC(uint64_t a1)
{
  uint64_t v2 = sub_1000067CC((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100005B68()
{
  return *v0;
}

uint64_t sub_100005B70@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100005B78()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100005B88()
{
  sub_1000067CC((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100005BF4(uint64_t a1)
{
  uint64_t v2 = sub_1000067CC((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100005C60(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000067CC((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100005CF0()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100005D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000067CC((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100005DA4()
{
  return Hasher._finalize()();
}

void *sub_100005E04@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100005E14(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100005E20()
{
  sub_1000067CC((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

BOOL sub_100005EA4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100005EB8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100005F8C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100006570((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100006570((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100006520((uint64_t)v12);
  return v7;
}

uint64_t sub_100005F8C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100006148(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100006148(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000061E0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000063C0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000063C0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000061E0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100006358(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100006358(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100003EB0(&qword_1001D8778);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000063C0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003EB0(&qword_1001D8778);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *sub_100006510(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100006520(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100006570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000065D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100006628(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100006680(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1000066BC()
{
  unint64_t result = qword_1001D8780;
  if (!qword_1001D8780)
  {
    sub_100006680(255, (unint64_t *)&qword_1001DF8A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D8780);
  }
  return result;
}

uint64_t sub_100006724(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003EB0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *sub_100006788(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000067CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100006814(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for SecurityError(uint64_t a1)
{
}

uint64_t sub_100006878()
{
  return sub_1000067CC(&qword_1001D87A0, type metadata accessor for SecurityError);
}

uint64_t sub_1000068C0()
{
  return sub_1000067CC(&qword_1001D87A8, type metadata accessor for SecurityError);
}

uint64_t sub_100006908()
{
  return sub_1000067CC(&qword_1001D87B0, type metadata accessor for SecurityError);
}

uint64_t sub_100006950()
{
  return sub_1000067CC(&qword_1001D87B8, type metadata accessor for SecurityError);
}

uint64_t sub_100006998()
{
  return sub_1000067CC(&qword_1001D87C0, type metadata accessor for SecurityError);
}

uint64_t sub_1000069E0()
{
  return sub_1000067CC(&qword_1001D87C8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_100006A3C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100006A84()
{
  return sub_1000067CC(&qword_1001D87D0, type metadata accessor for Code);
}

unint64_t sub_100006AD0()
{
  unint64_t result = qword_1001D87D8;
  if (!qword_1001D87D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D87D8);
  }
  return result;
}

uint64_t sub_100006B24()
{
  return sub_1000067CC(&qword_1001D87E0, type metadata accessor for Code);
}

uint64_t sub_100006B6C()
{
  return sub_1000067CC((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);
}

void sub_100006EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

id sub_100006F64()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteOasisRreader();
  return [super dealloc];
}

uint64_t type metadata accessor for RemoteOasisRreader()
{
  return self;
}

uint64_t sub_100006FCC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100007004(uint64_t a1, uint64_t a2)
{
  sub_100006EC4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100007028()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001D8888);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001D8888);
  uint64_t v2 = SPRLogger.xpcServer.unsafeMutableAddressor();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000070B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  int64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000884C(v1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return *(void *)v10;
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v10, v2);
  uint64_t v11 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  return v11;
}

uint64_t sub_100007280()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ClientID(0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (uint64_t *)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  id v11 = [v0 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x65636F7270207B20;
  v16._object = (void *)0xEE00203A44497373;
  String.append(_:)(v16);
  LODWORD(v34) = *(_DWORD *)&v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_processID];
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x746E65696C63202CLL;
  v18._object = (void *)0xEC000000203A4449;
  String.append(_:)(v18);
  sub_10000884C((uint64_t)&v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID], (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v6, v10, v2);
    uint64_t v19 = UUID.uuidString.getter();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    uint64_t v19 = *v10;
    v21 = (void *)v10[1];
  }
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x746E65696C63202CLL;
  v23._object = (void *)0xEE00203A65707954;
  String.append(_:)(v23);
  uint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType];
  if (v24 == 2)
  {
    unint64_t v25 = 0xE700000000000000;
    uint64_t v26 = 0x746E656D796150;
  }
  else if (v24 == 1)
  {
    unint64_t v25 = 0xE90000000000006ELL;
    uint64_t v26 = 0x6F697369766F7250;
  }
  else
  {
    unint64_t v25 = 0xE700000000000000;
    uint64_t v26 = 0x6E776F6E6B6E55;
  }
  unint64_t v27 = v25;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0x76654C697061202CLL;
  v28._object = (void *)0xEC000000203A6C65;
  String.append(_:)(v28);
  uint64_t v29 = 1;
  if (v1[OBJC_IVAR____TtC14softposreaderd10ClientInfo_apiLevel]) {
    uint64_t v29 = 2;
  }
  uint64_t v34 = v29;
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 32032;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  return v35;
}

unsigned char *sub_10000760C(void *a1)
{
  uint64_t v3 = type metadata accessor for ClientID(0);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1;
  unsigned int v8 = [a1 processIdentifier];
  *(_DWORD *)&v7[OBJC_IVAR____TtC14softposreaderd10ClientInfo_processID] = v8;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a1 valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_100008908((uint64_t)&v31, (uint64_t)&v33);
  if (v34)
  {
    if (swift_dynamicCast())
    {
      uint64_t v11 = v29[1];
      uint64_t v12 = &v7[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID];
      *uint64_t v12 = v29[0];
      v12[1] = v11;
      swift_storeEnumTagMultiPayload();
      goto LABEL_9;
    }
  }
  else
  {
    sub_100008970((uint64_t)&v33);
  }
  UUID.init()();
  swift_storeEnumTagMultiPayload();
  sub_1000089D0((uint64_t)v6, (uint64_t)&v7[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID]);
LABEL_9:
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [a1 valueForEntitlement:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100006510(&v31, &v33);
    sub_100006570((uint64_t)&v33, (uint64_t)&v31);
    if (swift_dynamicCast())
    {
      uint64_t v15 = v29[0];
      if (v29[0] == 1)
      {
        int v16 = 0;
      }
      else
      {
        if (v29[0] != 2)
        {
          type metadata accessor for SecurityError(0);
          uint64_t v25 = v24;
          v29[0] = 10003;
          unint64_t v26 = sub_1000088B0();
          NamedError.init(_:reason:error:)((uint64_t)v29, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v25, v26, (uint64_t)&v31);
          swift_willThrow();

          sub_100006520((uint64_t)&v33);
          goto LABEL_36;
        }
        int v16 = 1;
        uint64_t v15 = 1;
      }
    }
    else
    {
      sub_100006570((uint64_t)&v33, (uint64_t)&v31);
      if (swift_dynamicCast())
      {
        uint64_t v15 = LOBYTE(v29[0]);
        if (LOBYTE(v29[0])) {
          int v16 = 0;
        }
        else {
          int v16 = 2;
        }
      }
      else
      {
        uint64_t v15 = 0;
        int v16 = 2;
      }
    }
    sub_100006520((uint64_t)&v33);
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 2;
  }
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [a1 valueForEntitlement:v17];

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  sub_100008908((uint64_t)&v31, (uint64_t)&v33);
  if (v34)
  {
    if (swift_dynamicCast())
    {
      if (v29[0] == 1)
      {
        BOOL v19 = 0;
        goto LABEL_38;
      }
      if (v29[0] == 2)
      {
        BOOL v19 = 1;
LABEL_38:
        uint64_t v20 = v15 | 2;
        goto LABEL_39;
      }
      goto LABEL_34;
    }
  }
  else
  {
    sub_100008970((uint64_t)&v33);
  }
  BOOL v19 = v16 != 0;
  if (v16 != 2 && v15)
  {
    uint64_t v20 = 1;
LABEL_39:
    *(void *)&v7[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType] = v20;
    v7[OBJC_IVAR____TtC14softposreaderd10ClientInfo_apiLevel] = v19;

    unint64_t v27 = (objc_class *)type metadata accessor for ClientInfo(0);
    v30.receiver = v7;
    v30.super_class = v27;
    uint64_t v7 = [super init];

    return v7;
  }
LABEL_34:
  type metadata accessor for SecurityError(0);
  uint64_t v22 = v21;
  *(void *)&long long v31 = 10003;
  unint64_t v23 = sub_1000088B0();
  NamedError.init(_:reason:error:)((uint64_t)&v31, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v22, v23, (uint64_t)&v33);
  swift_willThrow();

LABEL_36:
  sub_100008574((uint64_t)&v7[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID]);

  type metadata accessor for ClientInfo(0);
  swift_deallocPartialClassInstance();
  return v7;
}

uint64_t sub_100007B50(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = 1;
  if (v3[OBJC_IVAR____TtC14softposreaderd10ClientInfo_apiLevel]) {
    unint64_t v4 = 2;
  }
  if (v4 < (result & 1) + 1)
  {
    if (qword_1001D8748 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100003E78(v7, (uint64_t)qword_1001D8888);
    swift_bridgeObjectRetain_n();
    unsigned int v8 = v3;
    NSString v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315394;
      swift_bridgeObjectRetain();
      sub_100005EB8(a2, a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v11 + 12) = 2080;
      id v12 = [v8 debugDescription];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;

      uint64_t v19 = sub_100005EB8(v13, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client not authorized to call %s: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for SecurityError(0);
    uint64_t v17 = v16;
    uint64_t v19 = 10003;
    unint64_t v18 = sub_1000088B0();
    NamedError.init(_:reason:error:)((uint64_t)&v19, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v17, v18, (uint64_t)&v20);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100007E10(uint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & ~*(void *)&v3[OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType]) != 0)
  {
    if (qword_1001D8748 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003E78(v6, (uint64_t)qword_1001D8888);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = v3;
    unsigned int v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      swift_bridgeObjectRetain();
      sub_100005EB8(a2, a3, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v10 + 12) = 2080;
      id v11 = [v7 debugDescription];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      uint64_t v18 = sub_100005EB8(v12, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client not authorized to call %s: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for SecurityError(0);
    uint64_t v16 = v15;
    uint64_t v18 = 10003;
    unint64_t v17 = sub_1000088B0();
    NamedError.init(_:reason:error:)((uint64_t)&v18, 0x6D656C7469746E65, (void *)0xEB00000000746E65, 0, v16, v17, (uint64_t)&v19);
    return swift_willThrow();
  }
  return result;
}

id sub_1000080EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClientInfo(0);
  return [super dealloc];
}

uint64_t sub_100008134()
{
  return type metadata accessor for ClientInfo(0);
}

uint64_t type metadata accessor for ClientInfo(uint64_t a1)
{
  return sub_100008234(a1, (uint64_t *)&unk_1001D88D0);
}

uint64_t sub_10000815C()
{
  uint64_t result = type metadata accessor for ClientID(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ClientID(uint64_t a1)
{
  return sub_100008234(a1, qword_1001D8950);
}

uint64_t sub_100008234(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10000826C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10000836C(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for UUID();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *sub_1000083FC(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_1000084AC(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_100008574((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100008574(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientID(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1000085D0(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100008688(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100008574((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100008750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100008778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000087A8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000087B8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_10000884C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000088B0()
{
  unint64_t result = qword_1001D8988;
  if (!qword_1001D8988)
  {
    type metadata accessor for SecurityError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D8988);
  }
  return result;
}

uint64_t sub_100008908(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DD3F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008970(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001DD3F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000089D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_100008DBC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteConfigurator();
  return [super dealloc];
}

uint64_t type metadata accessor for RemoteConfigurator()
{
  return self;
}

uint64_t sub_100008E24()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100008E5C(uint64_t a1, uint64_t a2)
{
  sub_100006EC4(a1, a2, *(void *)(v2 + 16));
}

void sub_100008E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance + 24);
  uint64_t v12 = *(void *)(a5 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance + 32);
  sub_100006788((void *)(a5 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance), v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8))(a1, a2, a3, a4, v11, v12);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  sub_100003EB0(&qword_1001D8A20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = 0x6E656B6F74;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = v15;
  swift_bridgeObjectRetain();
  sub_100004C48(inited);
  swift_bridgeObjectRelease();
  if (v19)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CCFC(v17, v19, 0xD000000000000013, 0x8000000100190520, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a6 + 16))(a6, isa, 0);
  swift_bridgeObjectRelease();
}

id sub_100009158()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteMonitor();
  return [super dealloc];
}

uint64_t type metadata accessor for RemoteMonitor()
{
  return self;
}

uint64_t sub_1000091C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100009300(a5 + OBJC_IVAR____TtC14softposreaderd13RemoteMonitor_instance, (uint64_t)v16);
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  sub_100006788(v16, v17);
  if (a4) {
    unint64_t v12 = a4;
  }
  else {
    unint64_t v12 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v11 + 8);
  swift_bridgeObjectRetain();
  v13(a1, a2, a3, v12, v10, v11);
  swift_bridgeObjectRelease();
  sub_100006520((uint64_t)v16);
  return (*(uint64_t (**)(uint64_t, void))(a6 + 16))(a6, 0);
}

uint64_t sub_100009300(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_1000099F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemotePINController();
  return [super dealloc];
}

uint64_t type metadata accessor for RemotePINController()
{
  return self;
}

uint64_t sub_100009A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance + 24);
  uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance + 32);
  sub_100006788((void *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance), v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v6, v7);
  unint64_t v10 = v9;
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  *(void *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress) = os_transaction_create();
  swift_unknownObjectRelease();
  sub_1000065D0(v8, v10);
  sub_1000065D0(v12, v14);
  sub_100006628(v12, v14);
  sub_1000065D0(v8, v10);
  sub_1000065D0(v12, v14);
  sub_100006628(v8, v10);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v16 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, Class, void))(a3 + 16))(a3, isa, v16, 0);

  sub_100006628(v12, v14);
  sub_100006628(v8, v10);
  sub_100006628(v8, v10);

  return sub_100006628(v12, v14);
}

uint64_t sub_100009C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  sub_100006788(v4, v5);
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  (*(void (**)(uint64_t, void *, void))(a2 + 16))(a2, v7, 0);

  *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress) = 0;

  return swift_unknownObjectRelease();
}

id sub_100009DB4()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 24];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 32];
  sub_100006788(&v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance], v1);
  (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_isPOS], v1, v2);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for RemotePrimer();
  return [super dealloc];
}

void sub_10000A02C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t type metadata accessor for RemotePrimer()
{
  return self;
}

void sub_10000A0FC(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4, v5);
  id v6 = [self currentConnection];
  if (!v6)
  {
    _Block_release(a2);
    __break(1u);
    goto LABEL_7;
  }
  id v7 = v6;
  id v8 = [v6 userInfo];

  if (!v8)
  {
LABEL_7:
    _Block_release(a2);
    __break(1u);
    return;
  }
  type metadata accessor for ClientInfo(0);
  swift_dynamicCastClassUnconditional();
  sub_100007B50(1, 0xD000000000000019, 0x80000001001906B0);
  swift_unknownObjectRelease();
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 24);
  uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 32);
  sub_100006788((void *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance), v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  v11.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  ((void (**)(void, Class))a2)[2](a2, v11.super.isa);
  swift_bridgeObjectRelease();
}

void sub_10000A4E0(uint64_t a1, const void *a2)
{
  v26[0] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  id v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ClientID(0);
  __chkstk_darwin(v8, v9);
  NSDictionary v11 = (const void **)((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 24);
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance + 32);
  sub_100006788((void *)(a1 + OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance), v12);
  id v14 = [self currentConnection];
  if (!v14)
  {
    _Block_release(v26[0]);
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v15 = v14;
  id v16 = [v14 userInfo];

  if (!v16)
  {
LABEL_8:
    _Block_release(v26[0]);
    __break(1u);
    return;
  }
  type metadata accessor for ClientInfo(0);
  uint64_t v17 = swift_dynamicCastClassUnconditional();
  sub_10000884C(v17 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientID, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, void *, uint64_t))(v4 + 32))(v7, v11, v3);
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v21 = v11[1];
    v28[0] = *v11;
    v28[1] = v21;
    v26[3] = (const void *)95;
    v26[4] = (const void *)0xE100000000000000;
    v26[1] = (const void *)45;
    v26[2] = (const void *)0xE100000000000000;
    sub_10000A87C();
    uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v20 = v22;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48))(v29, v18, v20, v12, v13);
  swift_bridgeObjectRelease();
  sub_100009300((uint64_t)v29, (uint64_t)v28);
  unint64_t v23 = (objc_class *)type metadata accessor for RemoteSecureChannel();
  id v24 = objc_allocWithZone(v23);
  sub_100009300((uint64_t)v28, (uint64_t)v24 + OBJC_IVAR____TtC14softposreaderd19RemoteSecureChannel_instance);
  v27.receiver = v24;
  v27.super_class = v23;
  id v25 = [super init];
  sub_100006520((uint64_t)v28);
  (*((void (**)(const void *, id, void))v26[0] + 2))(v26[0], v25, 0);

  sub_100006520((uint64_t)v29);
}

unint64_t sub_10000A87C()
{
  unint64_t result = qword_1001DD3D0;
  if (!qword_1001DD3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD3D0);
  }
  return result;
}

void sub_10000A948(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

id sub_10000A9F4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteProvider();
  return [super dealloc];
}

uint64_t type metadata accessor for RemoteProvider()
{
  return self;
}

void sub_10000AA5C(uint64_t a1, uint64_t a2)
{
  id v4 = [self currentConnection];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 userInfo];

    if (v6)
    {
      type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional();
      sub_100007E10(2, 0xD000000000000019, 0x80000001001907A0);
      swift_unknownObjectRelease();
      id v7 = (void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      uint64_t v9 = v7[4];
      sub_100006788(v7, v8);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v14, v8, v9);
      uint64_t v10 = (objc_class *)type metadata accessor for RemoteConfigurator();
      id v11 = objc_allocWithZone(v10);
      sub_100009300((uint64_t)v14, (uint64_t)v11 + OBJC_IVAR____TtC14softposreaderd18RemoteConfigurator_instance);
      v13.receiver = v11;
      v13.super_class = v10;
      id v12 = [super init];
      sub_100006520((uint64_t)v14);
      (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v12, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10000AC48(uint64_t a1, uint64_t a2)
{
  id v4 = [self currentConnection];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 userInfo];

    if (v6)
    {
      type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional();
      sub_100007E10(2, 0xD000000000000014, 0x8000000100190780);
      swift_unknownObjectRelease();
      id v7 = (void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      uint64_t v9 = v7[4];
      sub_100006788(v7, v8);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v14, v8, v9);
      uint64_t v10 = (objc_class *)type metadata accessor for RemoteMonitor();
      id v11 = objc_allocWithZone(v10);
      sub_100009300((uint64_t)v14, (uint64_t)v11 + OBJC_IVAR____TtC14softposreaderd13RemoteMonitor_instance);
      v13.receiver = v11;
      v13.super_class = v10;
      id v12 = [super init];
      sub_100006520((uint64_t)v14);
      (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v12, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10000AE34(uint64_t a1, uint64_t a2)
{
  id v4 = [self currentConnection];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 userInfo];

    if (v6)
    {
      type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional();
      sub_100007E10(2, 0xD000000000000013, 0x8000000100190760);
      swift_unknownObjectRelease();
      id v7 = (void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      uint64_t v9 = v7[4];
      sub_100006788(v7, v8);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 24))(v14, v8, v9);
      uint64_t v10 = (objc_class *)type metadata accessor for RemoteReader();
      id v11 = objc_allocWithZone(v10);
      sub_100009300((uint64_t)v14, (uint64_t)v11 + OBJC_IVAR____TtC14softposreaderd12RemoteReader_instance);
      v13.receiver = v11;
      v13.super_class = v10;
      id v12 = [super init];
      sub_100006520((uint64_t)v14);
      (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v12, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10000B020(uint64_t a1, uint64_t a2)
{
  id v4 = [self currentConnection];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 userInfo];

    if (v6)
    {
      type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional();
      sub_100007E10(2, 0xD00000000000001ALL, 0x8000000100190740);
      swift_unknownObjectRelease();
      id v7 = (void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      uint64_t v9 = v7[4];
      sub_100006788(v7, v8);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 32))(v14, v8, v9);
      uint64_t v10 = (objc_class *)type metadata accessor for RemotePINController();
      id v11 = (char *)objc_allocWithZone(v10);
      *(void *)&v11[OBJC_IVAR____TtC14softposreaderd19RemotePINController_captureInProgress] = 0;
      sub_100009300((uint64_t)v14, (uint64_t)&v11[OBJC_IVAR____TtC14softposreaderd19RemotePINController_instance]);
      v13.receiver = v11;
      v13.super_class = v10;
      id v12 = [super init];
      sub_100006520((uint64_t)v14);
      (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v12, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10000B21C(uint64_t a1, uint64_t a2)
{
  id v4 = [self currentConnection];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 userInfo];

    if (v6)
    {
      type metadata accessor for ClientInfo(0);
      swift_dynamicCastClassUnconditional();
      sub_100007E10(1, 0xD000000000000018, 0x8000000100190720);
      swift_unknownObjectRelease();
      id v7 = (void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance);
      uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC14softposreaderd14RemoteProvider_instance + 24);
      uint64_t v9 = v7[4];
      sub_100006788(v7, v8);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 40))(v14, v8, v9);
      uint64_t v10 = (objc_class *)type metadata accessor for RemoteOasisRreader();
      id v11 = objc_allocWithZone(v10);
      sub_100009300((uint64_t)v14, (uint64_t)v11 + OBJC_IVAR____TtC14softposreaderd18RemoteOasisRreader_instance);
      v13.receiver = v11;
      v13.super_class = v10;
      id v12 = [super init];
      sub_100006520((uint64_t)v14);
      (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v12, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10000BEC8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteReader();
  return [super dealloc];
}

uint64_t type metadata accessor for RemoteReader()
{
  return self;
}

unint64_t sub_10000BF30()
{
  unint64_t result = qword_1001D8D08;
  if (!qword_1001D8D08)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001D8D08);
  }
  return result;
}

uint64_t sub_10000BF70(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100006628(a1, a2);
  }
  return a1;
}

uint64_t sub_10000BF84()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

id SPRRemoteService.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

uint64_t sub_10000BFF0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001D8D10);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001D8D10);
  uint64_t v2 = SPRLogger.xpcServer.unsafeMutableAddressor();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_10000C30C()
{
  return sub_10000C434(type metadata accessor for RemoteService);
}

Swift::Bool __swiftcall SPRRemoteService.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return sub_10000DDD8(shouldAcceptNewConnection.super.isa);
}

id SPRRemoteService.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SPRRemoteService();
  return [super init];
}

id sub_10000C3D8(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return [super init];
}

id SPRRemoteService.__deallocating_deinit()
{
  return sub_10000C434(type metadata accessor for SPRRemoteService);
}

id sub_10000C434(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

unint64_t sub_10000C46C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10000C528(a1, v4);
}

unint64_t sub_10000C4B0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10000C5F0(a1, a2, v4);
}

unint64_t sub_10000C528(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10000E278(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10000E2D4((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10000C5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        objc_super v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10000C6D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0((uint64_t *)&unk_1001D8E40);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    id v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    long long v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  id v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10000C9FC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001D8768);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      id v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100006510(v24, v35);
      }
      else
      {
        sub_100006570((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100006510(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10000CCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10000C4B0(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10000D044();
LABEL_7:
    int64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10000C6D4(v17, a5 & 1);
  unint64_t v23 = sub_10000C4B0(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  int64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  unint64_t v26 = (void *)(v20[7] + 16 * v14);
  *unint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_10000CE84(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10000C4B0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10000D200();
      goto LABEL_7;
    }
    sub_10000C9FC(v15, a4 & 1);
    unint64_t v21 = sub_10000C4B0(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100006520((uint64_t)v19);
    return sub_100006510(a1, v19);
  }
LABEL_13:
  sub_10000CFD8(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_10000CFD8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100006510(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_10000D044()
{
  uint64_t v1 = v0;
  sub_100003EB0((uint64_t *)&unk_1001D8E40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    char v24 = (void *)(*(void *)(v4 + 56) + v16);
    *char v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10000D200()
{
  uint64_t v1 = v0;
  sub_100003EB0(&qword_1001D8768);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100006570(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_100006510(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10000D3E8(void (**a1)(void, void))
{
  if (qword_1001D8750 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001D8D10);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100005EB8(0xD000000000000019, 0x8000000100190920, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RemoteService.%s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v6 = [self currentConnection];
  if (v6)
  {
    unint64_t v7 = v6;
    id v8 = [v6 userInfo];

    if (v8)
    {
      type metadata accessor for ClientInfo(0);
      unint64_t v9 = *(void *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType);
      swift_unknownObjectRelease();
      BOOL v10 = (v9 >> 1) & 1;
      uint64_t v11 = *Primer.shared.unsafeMutableAddressor();
      v17[3] = type metadata accessor for Primer();
      v17[4] = (uint64_t)&protocol witness table for Primer;
      v17[0] = v11;
      unint64_t v12 = (objc_class *)type metadata accessor for RemotePrimer();
      id v13 = objc_allocWithZone(v12);
      swift_retain_n();
      unint64_t v14 = v13;
      sub_100104194(v10);
      sub_100009300((uint64_t)v17, (uint64_t)&v14[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance]);
      v14[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_isPOS] = v10;

      v16.receiver = v14;
      v16.super_class = v12;
      id v15 = [super init];
      sub_100006520((uint64_t)v17);
      swift_release();
      ((void (**)(void, id))a1)[2](a1, v15);

      return;
    }
  }
  else
  {
    _Block_release(a1);
    __break(1u);
  }
  _Block_release(a1);
  __break(1u);
}

void sub_10000D6E8(uint64_t a1, void (**a2)(void, void, void, void))
{
  uint64_t v4 = type metadata accessor for Settings();
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  id v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v52 - v10;
  if (qword_1001D8750 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001D8D10);
  swift_bridgeObjectRetain_n();
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(void *)&long long v61 = v55;
    *(_DWORD *)uint64_t v15 = 136315394;
    *(void *)&v65[0] = sub_100005EB8(0xD000000000000021, 0x80000001001908D0, (uint64_t *)&v61);
    v56 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    v59 = a2;
    uint64_t v16 = Dictionary.description.getter();
    uint64_t v17 = v8;
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    *(void *)&v65[0] = sub_100005EB8(v16, v19, (uint64_t *)&v61);
    uint64_t v11 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    id v8 = v17;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RemoteService.%s configuration: %s", (uint8_t *)v15, 0x16u);
    a2 = v59;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v20 = [self currentConnection];
  if (v20)
  {
    uint64_t v21 = v20;
    id v22 = [v20 userInfo];

    if (v22)
    {
      type metadata accessor for ClientInfo(0);
      uint64_t v23 = swift_dynamicCastClassUnconditional();
      sub_100007B50(1, 0xD000000000000021, 0x80000001001908D0);
      uint64_t v24 = *(void *)(v23 + OBJC_IVAR____TtC14softposreaderd10ClientInfo_clientType);
      v66.value._rawValue = (void *)swift_bridgeObjectRetain();
      Settings.init(dictionary:)(v66);
      if (v25)
      {
        swift_unknownObjectRelease();
        swift_errorRetain();
        unint64_t v26 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void, void, void *))a2)[2](a2, 0, 0, v26);

        swift_errorRelease();
        swift_errorRelease();
        return;
      }
      uint64_t v54 = v24 & 2;
      uint64_t v27 = type metadata accessor for Primer();
      BOOL v28 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
      v56 = v11;
      v28(v8, v11, v58);
      uint64_t v29 = (void *)v27;
      uint64_t v30 = Primer.__allocating_init(settings:)((uint64_t)v8);
      uint64_t v31 = *(uint64_t (**)(void))(*(void *)v30 + 144);
      uint64_t v55 = v30;
      uint64_t v32 = v31();
      uint64_t v34 = v33;
      unsigned __int8 v36 = v35;
      uint64_t v37 = StorageSetting.description.getter(v32, v33, v35);
      unint64_t v39 = v38;
      sub_10000E260(v32, v34, v36);
      unint64_t v40 = sub_100004D6C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v41 = *(void *)(a1 + 16);
      v59 = a2;
      if (v41)
      {
        unint64_t v42 = sub_10000C4B0(0xD000000000000015, 0x8000000100190900);
        if (v43)
        {
          sub_100006570(*(void *)(a1 + 56) + 32 * v42, (uint64_t)&v61);
          if (swift_dynamicCast())
          {
            if (v65[0] == __PAIR128__(v39, v37))
            {
              swift_bridgeObjectRelease_n();
              unint64_t v53 = v40;
LABEL_18:
              unint64_t v46 = v54;
              v62 = v29;
              v63 = &protocol witness table for Primer;
              *(void *)&long long v61 = v55;
              v47 = (objc_class *)type metadata accessor for RemotePrimer();
              id v48 = objc_allocWithZone(v47);
              swift_retain();
              v49 = v48;
              sub_100104194(v46 != 0);
              sub_100009300((uint64_t)&v61, (uint64_t)&v49[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_instance]);
              v49[OBJC_IVAR____TtC14softposreaderd12RemotePrimer_isPOS] = v46 >> 1;

              v60.receiver = v49;
              v60.super_class = v47;
              id v50 = [super init];
              sub_100006520((uint64_t)&v61);
              Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
              ((void (**)(void, id, Class, void))v59)[2](v59, v50, isa, 0);
              swift_release();
              swift_unknownObjectRelease();

              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
              return;
            }
            char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v44)
            {
              swift_bridgeObjectRelease();
              unint64_t v53 = v40;
              goto LABEL_18;
            }
          }
        }
      }
      v62 = &type metadata for String;
      *(void *)&long long v61 = v37;
      *((void *)&v61 + 1) = v39;
      sub_100006510(&v61, v65);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v64 = v40;
      sub_10000CE84(v65, 0xD000000000000015, 0x8000000100190900, isUniquelyReferenced_nonNull_native);
      unint64_t v53 = v64;
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  else
  {
    _Block_release(a2);
    __break(1u);
  }
  _Block_release(a2);
  __break(1u);
}

uint64_t sub_10000DDD8(void *a1)
{
  id v2 = [self interface];
  [a1 setExportedInterface:v2];

  id v3 = [objc_allocWithZone((Class)type metadata accessor for RemoteService()) init];
  [a1 setExportedObject:v3];

  id v4 = objc_allocWithZone((Class)type metadata accessor for ClientInfo(0));
  id v5 = a1;
  uint64_t v6 = sub_10000760C(v5);
  if (qword_1001D8750 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001D8D10);
  id v8 = v6;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    id v12 = [v8 debugDescription];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_100005EB8(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SPRRemoteService new client information: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  [v5 setUserInfo:v8];
  [v5 resume];

  return 1;
}

uint64_t type metadata accessor for SPRRemoteService()
{
  return self;
}

uint64_t type metadata accessor for RemoteService()
{
  return self;
}

uint64_t sub_10000E260(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10000E278(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10000E2D4(uint64_t a1)
{
  return a1;
}

id sub_10000E470()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RemoteSecureChannel();
  return [super dealloc];
}

uint64_t type metadata accessor for RemoteSecureChannel()
{
  return self;
}

uint64_t sub_10000E4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100003EB0(&qword_1001D8F40);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  unint64_t v14 = &v25[-v13];
  __chkstk_darwin(v12, v15);
  uint64_t v17 = &v25[-v16];
  unint64_t v18 = (void *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemoteSecureChannel_instance);
  uint64_t v19 = *(void *)(a2 + OBJC_IVAR____TtC14softposreaderd19RemoteSecureChannel_instance + 24);
  uint64_t v20 = v18[4];
  sub_100006788(v18, v19);
  SecureChannelProtocol.securingRequest(_:contentType:)(a1, 0, v19, v20);
  uint64_t v21 = type metadata accessor for URLRequest();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v17, 0, 1, v21);
  sub_10000E810((uint64_t)v17, (uint64_t)v14);
  Class isa = 0;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v14, 1, v21) != 1)
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v14, v21);
  }
  (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);

  return sub_10000E878((uint64_t)v17);
}

uint64_t sub_10000E810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001D8F40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E878(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001D8F40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000E8D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001D8F50);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001D8F50);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10000E9A0(char *a1@<X8>)
{
  sub_1000103E8();
  if (v1)
  {
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003E78(v3, (uint64_t)qword_1001D8F50);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "certificates are revoked", v6, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();
    char v7 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100003E78(v8, (uint64_t)qword_1001D8F50);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v9, "certificates are not revoked", v10, 2u);
      swift_slowDealloc();
    }
    char v7 = 0;
  }

  *a1 = v7;
}

void sub_10000EB84(uint64_t a1@<X0>, BOOL *a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  v80 = a2;
  uint64_t v7 = sub_100003EB0(&qword_1001D9AE8);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  unint64_t v14 = (char *)&v75 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)&v75 - v22;
  __chkstk_darwin(v21, v24);
  unint64_t v26 = (char *)&v75 - v25;
  uint64_t v27 = sub_1000103E8();
  uint64_t v30 = &off_1001D8000;
  if (v3)
  {
    uint64_t v31 = v80;
  }
  else
  {
    uint64_t v32 = v27;
    v78 = v14;
    uint64_t v79 = a1;
    v75 = v19;
    v76 = v11;
    v77 = v26;
    uint64_t v33 = v29;
    uint64_t v34 = v28;
    sub_100003EB0(&qword_1001D9AF0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(void *)(inited + 32) = v32;
    v84 = (void *)inited;
    sub_1000173F4(v34);
    sub_1000173F4(v33);
    unsigned __int8 v36 = v84;
    int64_t v37 = v84[2];
    uint64_t v38 = v82;
    if (v37)
    {
      uint64_t v81 = v15;
      v84 = _swiftEmptyArrayStorage;
      sub_10014BA04(0, v37, 0);
      uint64_t v39 = 0;
      unint64_t v40 = v84;
      do
      {
        unint64_t v83 = v36[v39 + 4];
        uint64_t v41 = v4;
        sub_10000F344(&v83, (uint64_t)v23);
        v84 = v40;
        unint64_t v43 = v40[2];
        unint64_t v42 = v40[3];
        if (v43 >= v42 >> 1)
        {
          sub_10014BA04(v42 > 1, v43 + 1, 1);
          unint64_t v40 = v84;
        }
        ++v39;
        v40[2] = v43 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v82 + 32))((unint64_t)v40+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(void *)(v82 + 72) * v43, v23, v81);
        uint64_t v4 = v41;
      }
      while (v37 != v39);
      swift_bridgeObjectRelease();
      uint64_t v31 = v80;
      uint64_t v44 = v81;
      uint64_t v38 = v82;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v40 = _swiftEmptyArrayStorage;
      uint64_t v31 = v80;
      uint64_t v44 = v15;
    }
    v45 = v78;
    sub_10000F898((uint64_t)v40, v78);
    swift_bridgeObjectRelease();
    unint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
    int v47 = v46(v45, 1, v44);
    uint64_t v48 = v79;
    if (v47 == 1)
    {
      sub_10001EEA8((uint64_t)v45);
      if (qword_1001D8F48 != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      sub_100003E78(v49, (uint64_t)qword_1001D8F50);
      id v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Could not get the minimum expiration date", v52, 2u);
        swift_slowDealloc();
      }

      sub_10001EF08();
      swift_allocError();
      *unint64_t v53 = 5;
      swift_willThrow();
      uint64_t v30 = &off_1001D8000;
    }
    else
    {
      uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      uint64_t v55 = v77;
      v54(v77, v45, v44);
      sub_100006788((void *)(v48 + 72), *(void *)(v48 + 96));
      uint64_t v56 = (uint64_t)v76;
      sub_1000238E4((uint64_t)v76);
      if (v46((char *)v56, 1, v44) != 1)
      {
        v71 = v75;
        v54(v75, (char *)v56, v44);
        Date.timeIntervalSince(_:)();
        double v73 = v72;
        v74 = *(void (**)(char *, uint64_t))(v82 + 8);
        v74(v71, v44);
        v74(v55, v44);
        BOOL v70 = v73 > a3;
        uint64_t v31 = v80;
        goto LABEL_28;
      }
      sub_10001EEA8(v56);
      if (qword_1001D8F48 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_100003E78(v57, (uint64_t)qword_1001D8F50);
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      BOOL v60 = os_log_type_enabled(v58, v59);
      long long v61 = v77;
      uint64_t v31 = v80;
      if (v60)
      {
        v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Could not calculate secure now", v62, 2u);
        swift_slowDealloc();
      }

      sub_10001EF08();
      swift_allocError();
      unsigned char *v63 = 6;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v82 + 8))(v61, v44);
      uint64_t v30 = &off_1001D8000;
    }
  }
  if (v30[489] != (_UNKNOWN *)-1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  sub_100003E78(v64, (uint64_t)qword_1001D8F50);
  swift_errorRetain();
  swift_errorRetain();
  v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc();
    v68 = (void *)swift_slowAlloc();
    uint64_t v82 = 0;
    *(_DWORD *)v67 = 138412290;
    swift_errorRetain();
    uint64_t v69 = _swift_stdlib_bridgeErrorToNSError();
    v84 = (void *)v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v68 = v69;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Certificate(s) invalid or not found: %@", v67, 0xCu);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  BOOL v70 = 0;
LABEL_28:
  *uint64_t v31 = v70;
}

uint64_t sub_10000F344@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v39 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v38 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *a1;
  if ((v14 & 0xC000000000000001) != 0) {
    goto LABEL_19;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_21;
  }
  for (id i = *(id *)(v14 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    uint64_t v16 = i;
    int64_t v37 = v3;
    SecCertificateNotValidAfter();

    Date.init(timeIntervalSinceReferenceDate:)();
    if (qword_1001D8F48 != -1) {
LABEL_21:
    }
      swift_once();
    uint64_t v17 = sub_100003E78(v11, (uint64_t)qword_1001D8F50);
    uint64_t v18 = v38;
    uint64_t v19 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v17, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    int v36 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v20, (os_log_type_t)v36))
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v18, v11);
    }
    os_log_t v34 = v20;
    uint64_t v35 = v11;
    a2 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v41 = v33;
    *(_DWORD *)a2 = 136315394;
    uint64_t v11 = a2 + 4;
    sub_10001AF28((unint64_t *)&qword_1001D9B08, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v40 = (void *)sub_100005EB8(v21, v22, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v7 += 8;
    v23(v10, v6);
    *(_WORD *)(a2 + 12) = 2080;
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        type metadata accessor for CFString(0);
        uint64_t v28 = Array.description.getter();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        unint64_t v40 = (void *)sub_100005EB8(v28, v30, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v31 = v34;
        _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v36, "Expiration date is: %s for certificate with description:\n%s", (uint8_t *)a2, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v38, v35);
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v6) {
        goto LABEL_23;
      }
    }
    unint64_t v40 = _swiftEmptyArrayStorage;
    uint64_t v3 = &v40;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0) {
      break;
    }
    uint64_t v10 = 0;
    while ((char *)v6 != v10)
    {
      if ((v14 & 0xC000000000000001) != 0) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(v14 + 8 * (void)v10 + 32);
      }
      uint64_t v25 = v24;
      CFStringRef v26 = CFCopyDescription(v24);
      if (!v26) {
        goto LABEL_25;
      }
      uint64_t v11 = (uint64_t)v26;
      ++v10;

      uint64_t v3 = &v40;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if ((char *)v6 == v10) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_19:
    ;
  }
  __break(1u);
LABEL_25:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_10000F898@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_100003EB0(&qword_1001D9AE8);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = *(void *)(a1 + 16);
  if (!v21)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v23(v11, 1, 1, v12);
    goto LABEL_5;
  }
  unint64_t v22 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  uint64_t v41 = v13 + 16;
  v40(v11, a1 + v22, v12);
  uint64_t v35 = a1;
  unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v42(v11, 0, 1, v12);
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v39 = v13 + 48;
  if (v38(v11, 1, v12) == 1)
  {
    uint64_t v23 = v42;
LABEL_5:
    sub_10001EEA8((uint64_t)v11);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v23)(a2, 1, 1, v12);
  }
  os_log_t v34 = a2;
  int64_t v37 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v37(v20, v11, v12);
  swift_bridgeObjectRetain();
  uint64_t v25 = v21 - 1;
  if (v25)
  {
    uint64_t v27 = *(void *)(v13 + 72);
    uint64_t v28 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v36 = v27;
    unint64_t v29 = v35 + v27 + v22;
    unint64_t v30 = v37;
    while (1)
    {
      v40(v8, v29, v12);
      v42(v8, 0, 1, v12);
      if (v38(v8, 1, v12) == 1) {
        break;
      }
      v30(v17, v8, v12);
      sub_10001AF28(&qword_1001D9B00, (void (*)(uint64_t))&type metadata accessor for Date);
      char v31 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v32 = *v28;
      if (v31)
      {
        v32(v20, v12);
        v30(v20, v17, v12);
      }
      else
      {
        v32(v17, v12);
      }
      v29 += v36;
      if (!--v25) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    v42(v8, 1, 1, v12);
  }
  swift_bridgeObjectRelease();
  sub_10001EEA8((uint64_t)v8);
  CFStringRef v26 = v34;
  v37(v34, v20, v12);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v42)(v26, 0, 1, v12);
}

void sub_10000FCAC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (uint8_t *)v22 - v10;
  sub_100012B78((uint64_t)v8);
  if (!v1)
  {
    uint64_t v15 = v12;
    uint64_t v16 = v13;
    uint64_t v17 = v14;
    v22[1] = a1;
    (*(void (**)(uint8_t *, char *, uint64_t))(v4 + 32))(v11, v8, v3);
    uint64_t v23 = v16;
    sub_1000173F4(v17);
    uint64_t v18 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = v18;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = sub_10015A354(0, v18[2] + 1, 1, v18);
    }
    unint64_t v21 = v19[2];
    unint64_t v20 = v19[3];
    if (v21 >= v20 >> 1) {
      uint64_t v19 = sub_10015A354((void *)(v20 > 1), v21 + 1, 1, v19);
    }
    v19[2] = v21 + 1;
    v19[v21 + 4] = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000116BC(v11, (uint64_t)v19);
    swift_bridgeObjectRelease();
    (*(void (**)(uint8_t *, uint64_t))(v4 + 8))(v11, v3);
  }
}

uint64_t sub_10000FEAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000106D0(200, 0x702D657275636573uLL, 0xEE0064616F6C7961);
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000FF00()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)(v0 + 200);
  aBlock[4] = sub_10001F158;
  uint64_t v15 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C63C0;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_10001AF28((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100006814((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

uint64_t sub_100010190()
{
  return sub_100010FF4();
}

uint64_t sub_1000103E8()
{
  uint64_t v1 = v0;
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001D8F50);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "loadAllValidCertificates()", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = sub_1000106D0(200, 0x702D657275636573uLL, 0xEE0064616F6C7961);
  if (!v0)
  {
    uint64_t v1 = v6;
    uint64_t v7 = sub_100015B74(300, 0x696C61762D6E6970uLL, 0xEE006E6F69746164);
    if (v7)
    {
      if (v7[2])
      {
        sub_1000107F4((uint64_t)v7, 300, 7596553831663430000, 0xEE006E6F69746164);
        swift_bridgeObjectRelease();
        uint64_t v10 = sub_100015B74(301, 0x696C61762D666173uLL, 0xEE006E6F69746164);
        if (v10)
        {
          if (v10[2])
          {
            sub_1000107F4((uint64_t)v10, 301, 0x696C61762D666173, 0xEE006E6F69746164);
            swift_bridgeObjectRelease();
            return v1;
          }
          swift_bridgeObjectRelease();
        }
        sub_10001EF08();
        swift_allocError();
        unsigned char *v11 = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    sub_10001EF08();
    swift_allocError();
    *uint64_t v8 = 1;
    swift_willThrow();
LABEL_11:
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1000106D0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3;
  unint64_t v7 = sub_10001578C(a1, a2, a3);
  if (!v7)
  {
    sub_10001EF08();
    swift_allocError();
    unsigned char *v11 = 1;
    swift_willThrow();
    return v4;
  }
  unint64_t v8 = v7;
  sub_100003EB0(&qword_1001D9AF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = v8;
  uint64_t v10 = sub_1000107F4(inited, a1, a2, v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v3) {
    return v4;
  }
  if (*(void *)(v10 + 16))
  {
    unint64_t v4 = *(void *)(v10 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v4;
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1000107F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_10001E7B4(v8, a2, a3, a4, v4);
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v9 + 16))
  {
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100003E78(v10, (uint64_t)qword_1001D8F50);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v14 = Array.debugDescription.getter();
      sub_100005EB8(v14, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Valid certificates: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100003E78(v16, (uint64_t)qword_1001D8F50);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No valid certificates", v19, 2u);
      swift_slowDealloc();
    }

    sub_10001EF08();
    swift_allocError();
    unsigned char *v20 = 0;
    swift_willThrow();
  }
  return v9;
}

uint64_t sub_100010AF8(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  unint64_t v9 = *a1;
  if (a2 == 200)
  {
    if (a3 == 0x702D657275636573 && a4 == 0xEE0064616F6C7961
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v10 = a5 + 14;
      uint64_t v11 = a5[17];
      uint64_t v12 = a5[18];
      goto LABEL_15;
    }
  }
  else
  {
    if (a2 == 301)
    {
      if (a3 == 0x696C61762D666173 && a4 == 0xEE006E6F69746164) {
        goto LABEL_14;
      }
    }
    else
    {
      if (a2 != 300) {
        goto LABEL_20;
      }
      if (a3 == 7596553831663430000 && a4 == 0xEE006E6F69746164) {
        goto LABEL_14;
      }
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
LABEL_14:
      uint64_t v10 = a5 + 19;
      uint64_t v11 = a5[22];
      uint64_t v12 = a5[23];
LABEL_15:
      sub_100006788(v10, v11);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16))(v9, v11, v12);
      if (!v5) {
        return 1;
      }
      if (qword_1001D8F48 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100003E78(v13, (uint64_t)qword_1001D8F50);
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315650;
        swift_bridgeObjectRetain();
        sub_100005EB8(a3, a4, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2080;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v17 = String.init<A>(describing:)();
        sub_100005EB8(v17, v18, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v16 + 22) = 2080;
        uint64_t v19 = sub_10013A6E8(v9);
        sub_100005EB8(v19, v20, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Certificate for %s failed verification: %s\nCertificate description: %s", (uint8_t *)v16, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        swift_errorRelease();

        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
  }
LABEL_20:
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100003E78(v21, (uint64_t)qword_1001D8F50);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unexpected CertificateRole", v24, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_100010FF4()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100003EB0(&qword_1001D9AE8);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  unint64_t v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v65 - v9;
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v72 - 8);
  uint64_t v13 = __chkstk_darwin(v72, v12);
  uint64_t v73 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  v68 = (char *)&v65 - v17;
  __chkstk_darwin(v16, v18);
  unint64_t v20 = (uint8_t *)&v65 - v19;
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100003E78(v21, (uint64_t)qword_1001D8F50);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v74 = v2;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "refreshInBackground()", v25, 2u);
    swift_slowDealloc();
  }

  uint64_t v26 = sub_1000103E8();
  BOOL v70 = v28;
  uint64_t v71 = v26;
  if (v1) {
    goto LABEL_6;
  }
  uint64_t v66 = v27;
  v67 = v20;
  uint64_t v32 = v74;
  sub_10001549C((uint64_t)v10);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v34 = v72;
  int v35 = v33(v10, 1, v72);
  uint64_t v69 = v11;
  if (v35 == 1)
  {
    sub_10001EEA8((uint64_t)v10);
    sub_100006788((void *)(v32 + 72), *(void *)(v32 + 96));
    sub_1000238E4((uint64_t)v7);
    if (v33(v7, 1, v34) == 1)
    {
      sub_10001EEA8((uint64_t)v7);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Could not calculate secure now", v38, 2u);
        swift_slowDealloc();
      }

      sub_10001EF08();
      swift_allocError();
      unsigned char *v39 = 4;
      swift_willThrow();
      uint64_t v11 = v69;
      unint64_t v20 = v67;
LABEL_6:
      unint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        char v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "certififcates are not valid, renew...", v31, 2u);
        swift_slowDealloc();
      }

      sub_100012B78(v73);
      uint64_t v41 = v40;
      unint64_t v43 = v42;
      uint64_t v45 = v44;
      swift_errorRelease();
      if (!v1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v69 = v11;
      unint64_t v46 = *(void (**)(uint8_t *, uint64_t, uint64_t))(v11 + 32);
      uint64_t v47 = v72;
      v46(v20, v73, v72);
      uint64_t v48 = v45;
      uint64_t v49 = v41;
      goto LABEL_24;
    }
    id v50 = v68;
    os_log_type_t v51 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    v51(v68, v7, v34);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Could not load certificate rotation date, using secure now", v54, 2u);
      swift_slowDealloc();
    }

    uint64_t v55 = v50;
    uint64_t v47 = v72;
    v51((char *)v67, v55, v72);
  }
  else
  {
    (*(void (**)(uint8_t *, char *, uint64_t))(v11 + 32))(v67, v10, v34);
    uint64_t v47 = v34;
  }
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  uint64_t v49 = v71;
  uint64_t v48 = v66;
  if (v58)
  {
    os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "all certififcates are valid", v59, 2u);
    swift_slowDealloc();
  }

  unint64_t v20 = v67;
  unint64_t v43 = v70;
LABEL_24:
  v75 = v43;
  sub_1000173F4(v48);
  BOOL v60 = v75;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v61 = v60;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v61 = sub_10015A354(0, v60[2] + 1, 1, v60);
  }
  unint64_t v63 = v61[2];
  unint64_t v62 = v61[3];
  if (v63 >= v62 >> 1) {
    long long v61 = sub_10015A354((void *)(v62 > 1), v63 + 1, 1, v61);
  }
  v61[2] = v63 + 1;
  v61[v63 + 4] = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000116BC(v20, (uint64_t)v61);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint8_t *, uint64_t))(v69 + 8))(v20, v47);
}

uint64_t sub_1000116BC(uint8_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = a2;
  uint64_t v5 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v5 - 8, v6);
  BOOL v58 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  BOOL v60 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)v55 - v15;
  uint64_t v18 = __chkstk_darwin(v14, v17);
  long long v61 = (char *)v55 - v19;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)v55 - v21;
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_100003E78(v23, (uint64_t)qword_1001D8F50);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  os_log_type_t v59 = a1;
  v55[1] = v9 + 16;
  os_log_type_t v57 = v25;
  v25(v22, (char *)a1, v8);
  v55[2] = v24;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  v55[3] = v3;
  if (v28)
  {
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v29 = 136315138;
    unint64_t v62 = (void (*)(char *, uint64_t))(v29 + 4);
    sub_10001AF28((unint64_t *)&qword_1001D9B08, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v63 = sub_100005EB8(v30, v31, (uint64_t *)&v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v9 + 8);
    v32(v22, v8);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "scheduleCertsRenewal(rotationDate: %s)", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v33 = v32;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
    v33(v22, v8);
  }

  uint64_t v34 = v56;
  int64_t v35 = *(void *)(v56 + 16);
  uint64_t v36 = _swiftEmptyArrayStorage;
  unint64_t v62 = v33;
  if (v35)
  {
    uint64_t v64 = _swiftEmptyArrayStorage;
    sub_10014BA04(0, v35, 0);
    uint64_t v36 = v64;
    os_log_type_t v37 = (unint64_t *)(v34 + 32);
    do
    {
      uint64_t v63 = *v37;
      sub_100011D80((unint64_t *)&v63, (uint64_t)v16);
      uint64_t v64 = v36;
      unint64_t v39 = v36[2];
      unint64_t v38 = v36[3];
      if (v39 >= v38 >> 1)
      {
        sub_10014BA04(v38 > 1, v39 + 1, 1);
        uint64_t v36 = v64;
      }
      v36[2] = v39 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v36+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v39, v16, v8);
      ++v37;
      --v35;
    }
    while (v35);
    uint64_t v33 = v62;
  }
  uint64_t v40 = v58;
  sub_10000F898((uint64_t)v36, v58);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v40, 1, v8);
  unint64_t v42 = v60;
  unint64_t v43 = v61;
  uint64_t v44 = (char *)v59;
  uint64_t v45 = v57;
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_10001AF28(&qword_1001D9B00, (void (*)(uint64_t))&type metadata accessor for Date);
    if (dispatch thunk of static Comparable.< infix(_:_:)())
    {
      unint64_t v46 = v43;
      uint64_t v47 = v40;
    }
    else
    {
      unint64_t v46 = v43;
      uint64_t v47 = v44;
    }
    v45(v46, v47, v8);
    v33(v40, v8);
    v45(v42, v43, v8);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      id v50 = v42;
      os_log_type_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v51 = 136315138;
      os_log_type_t v59 = v51 + 4;
      sub_10001AF28((unint64_t *)&qword_1001D9B08, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v63 = sub_100005EB8(v52, v53, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v54 = v50;
      uint64_t v33 = v62;
      v62(v54, v8);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "renewalDate is min(rotationDate, expirationDates): %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v33(v42, v8);
    }

    sub_1000120E8();
    return ((uint64_t (*)(char *, uint64_t))v33)(v43, v8);
  }
  return result;
}

void sub_100011D80(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *a1;
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_4:
    uint64_t v12 = v11;
    SecCertificateNotValidAfter();

    Date.init(timeIntervalSinceReferenceDate:)();
    if (qword_1001D8F48 == -1) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v10 + 32);
    goto LABEL_4;
  }
  __break(1u);
LABEL_10:
  swift_once();
LABEL_5:
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003E78(v13, (uint64_t)qword_1001D8F50);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = v2;
    uint64_t v17 = v16;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v26 = v23;
    *(_DWORD *)uint64_t v17 = 136315394;
    v22[1] = v17 + 4;
    sub_10001AF28((unint64_t *)&qword_1001D9B08, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = sub_100005EB8(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v20 = sub_10013A6E8(v10);
    uint64_t v25 = sub_100005EB8(v20, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Expiration date is: %s for certificate with description:\n%s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);

    swift_bridgeObjectRelease_n();
  }
}

void sub_1000120E8()
{
  uint64_t v1 = v0;
  uint64_t v47 = type metadata accessor for DispatchTime();
  uint64_t v45 = *(void *)(v47 - 8);
  uint64_t v3 = __chkstk_darwin(v47, v2);
  unint64_t v46 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  unint64_t v42 = (char *)&v38 - v6;
  uint64_t v43 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v43, v7);
  uint64_t v44 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100003E78(v18, (uint64_t)qword_1001D8F50);
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "scheduleCertsRenewal(renewalDate:)", v21, 2u);
    swift_slowDealloc();
  }

  sub_100006788(v1 + 9, v1[12]);
  sub_1000238E4((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10001EEA8((uint64_t)v12);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to schedule renewal. Could not calculate secure now", v24, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v41 = v17;
    v25(v17, v12, v13);
    Date.timeIntervalSince(_:)();
    uint64_t v27 = v26;
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v28;
    *(void *)(v29 + 24) = v27;
    aBlock[4] = sub_10001F134;
    void aBlock[5] = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    aBlock[3] = &unk_1001C6398;
    unint64_t v38 = _Block_copy(aBlock);
    uint64_t v48 = _swiftEmptyArrayStorage;
    sub_10001AF28((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v40 = v13;
    swift_retain();
    sub_100003EB0((uint64_t *)&unk_1001DA510);
    unint64_t v39 = v1 + 9;
    uint64_t v30 = v45;
    unint64_t v31 = v46;
    uint64_t v32 = v42;
    sub_100006814((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v33 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    v1[24] = v33;
    swift_release();
    uint64_t v35 = v1[12];
    uint64_t v34 = v1[13];
    sub_100006788(v39, v35);
    (*(void (**)(uint64_t))(*(void *)(v34 + 8) + 16))(v35);
    + infix(_:_:)();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v37 = v47;
    v36(v31, v47);
    swift_retain();
    OS_dispatch_queue.asyncAfter(deadline:execute:)();
    swift_release();
    v36(v32, v37);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v41, v40);
  }
}

uint64_t sub_10001270C(double a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v34 - v9;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  if (a1 <= 0.0)
  {
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100003E78(v21, (uint64_t)qword_1001D8F50);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v22)) {
      goto LABEL_12;
    }
    os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v23 = 0;
    uint64_t v16 = "Renewing certificates now";
    uint64_t v17 = v13;
    os_log_type_t v18 = v22;
    unint64_t v19 = v23;
    uint32_t v20 = 2;
  }
  else
  {
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001D8F50);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v14)) {
      goto LABEL_12;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    double v35 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v16 = "Will renew certificates after %f s";
    uint64_t v17 = v13;
    os_log_type_t v18 = v14;
    unint64_t v19 = v15;
    uint32_t v20 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, v19, v20);
  swift_slowDealloc();
LABEL_12:

  sub_100012B78((uint64_t)v7);
  uint64_t v25 = v24;
  double v27 = v26;
  uint64_t v29 = v28;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v7, v2);
  double v35 = v27;
  sub_1000173F4(v29);
  double v30 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  double v31 = v30;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v31 = COERCE_DOUBLE(sub_10015A354(0, *(void *)(*(void *)&v30 + 16) + 1, 1, *(void **)&v30));
  }
  unint64_t v33 = *(void *)(*(void *)&v31 + 16);
  unint64_t v32 = *(void *)(*(void *)&v31 + 24);
  if (v33 >= v32 >> 1) {
    double v31 = COERCE_DOUBLE(sub_10015A354((void *)(v32 > 1), v33 + 1, 1, *(void **)&v31));
  }
  *(void *)(*(void *)&v31 + 16) = v33 + 1;
  *(void *)(*(void *)&v31 + 8 * v33 + 32) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000116BC(v10, *(void *)&v31);
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

void sub_100012B78(uint64_t object)
{
  unint64_t v3 = (unint64_t)v2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v105 = *(void *)(v5 - 8);
  v106 = (long long *)v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (long long *)((char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1001D8F48 != -1) {
    goto LABEL_69;
  }
  while (1)
  {
    *(void *)&long long v107 = v8;
    v111 = v1;
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003E78(v9, (uint64_t)qword_1001D8F50);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "renewCertificates()", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = v111;
    LOBYTE(v117) = 5;
    __chkstk_darwin(v14, v15);
    *(&v101 - 2) = (uint64_t)&v117;
    uint64_t v17 = (uint64_t)&v16[4];
    os_log_type_t v18 = v16 + 8;
    os_unfair_lock_lock(v16 + 8);
    sub_10001F050(v17);
    if (v3) {
      goto LABEL_74;
    }
    os_unfair_lock_unlock(v18);
    char v120 = 0;
    unint64_t v19 = sub_100013AF8();
    uint64_t v21 = v20;
    os_log_type_t v18 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000146EC(v19, 200, 0x702D657275636573uLL, 0xEE0064616F6C7961);
    uint64_t v110 = 0;
    swift_bridgeObjectRelease();
    uint64_t v23 = *((void *)v13 + 29);
    v116 = (long long *)*((void *)v13 + 30);
    v114 = v13 + 13;
    v115 = sub_100006788((void *)v13 + 26, v23);
    uint64_t v113 = sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    long long v112 = xmmword_1001861D0;
    *(_OWORD *)(inited + 16) = xmmword_1001861D0;
    *(void *)(inited + 32) = 1701605234;
    *(void *)(inited + 40) = 0xE400000000000000;
    *(void *)(inited + 72) = &type metadata for Int;
    *(void *)(inited + 80) = &protocol witness table for Int;
    *(void *)(inited + 48) = 200;
    *(void *)(inited + 88) = 0x747365676964;
    *(void *)(inited + 96) = 0xE600000000000000;
    uint64_t v102 = object;
    unint64_t v103 = v19;
    v104 = v18;
    if ((v19 & 0xC000000000000001) != 0)
    {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_8;
    }
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      break;
    }
    id v25 = *(id *)(v19 + 32);
LABEL_8:
    double v26 = v25;
    uint64_t v27 = SecCertificateRef.fingerprint.getter();
    object = v28;

    Swift::String v29 = Data.base64EncodedString(options:)(0);
    sub_100006628(v27, object);
    *(void *)(inited + 128) = &type metadata for String;
    *(void *)(inited + 136) = &protocol witness table for String;
    *(Swift::String *)(inited + 104) = v29;
    unint64_t v30 = sub_100104AF4(inited);
    sub_100136224(9, v30, v23, (uint64_t)v116);
    swift_bridgeObjectRelease();
    uint64_t v31 = v110;
    unint64_t v32 = v111;
    sub_100014B90((uint64_t)v21, 300, 0x696C61762D6E6970uLL, 0xEE006E6F69746164);
    uint64_t v33 = v31;
    if (v31)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v104;
LABEL_19:
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    uint64_t v108 = v21[2];
    v109 = v21;
    if (v108)
    {
      uint64_t v110 = 0;
      swift_bridgeObjectRetain_n();
      object = 0;
      do
      {
        unint64_t v3 = v21[object + 4];
        uint64_t v8 = (long long *)*((void *)v32 + 29);
        uint64_t v1 = (long long *)*((void *)v32 + 30);
        double v35 = sub_100006788(v114, (uint64_t)v8);
        uint64_t v36 = swift_initStackObject();
        *(_OWORD *)(v36 + 16) = v112;
        *(void *)(v36 + 32) = 1701605234;
        *(void *)(v36 + 40) = 0xE400000000000000;
        *(void *)(v36 + 72) = &type metadata for Int;
        *(void *)(v36 + 48) = 300;
        *(void *)(v36 + 80) = &protocol witness table for Int;
        *(void *)(v36 + 88) = 0x747365676964;
        *(void *)(v36 + 96) = 0xE600000000000000;
        v115 = v35;
        v116 = v1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_68;
          }
          uint64_t v37 = *(void **)(v3 + 32);
          swift_bridgeObjectRetain();
          id v38 = v37;
        }
        unint64_t v39 = v38;
        ++object;
        uint64_t v40 = SecCertificateRef.fingerprint.getter();
        unint64_t v42 = v41;

        Swift::String v43 = Data.base64EncodedString(options:)(0);
        sub_100006628(v40, v42);
        *(void *)(v36 + 128) = &type metadata for String;
        *(void *)(v36 + 136) = &protocol witness table for String;
        *(Swift::String *)(v36 + 104) = v43;
        unint64_t v44 = sub_100104AF4(v36);
        sub_100136224(9, v44, (uint64_t)v8, (uint64_t)v116);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = v109;
        unint64_t v32 = v111;
      }
      while (v108 != object);
      swift_bridgeObjectRelease_n();
      uint64_t v33 = v110;
    }
    uint64_t v34 = (uint64_t)v104;
    sub_100014B90((uint64_t)v104, 301, 0x696C61762D666173uLL, 0xEE006E6F69746164);
    if (v33) {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    uint64_t v108 = *(void *)(v34 + 16);
    if (!v108)
    {
LABEL_63:
      uint64_t v100 = v107;
      sub_100015124(v107);
      if (!v33)
      {
        (*(void (**)(uint64_t, uint64_t, long long *))(v105 + 32))(v102, v100, v106);
        sub_1000139B8((uint64_t)v32, &v120);
        return;
      }
LABEL_20:
      uint64_t v45 = v103;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v110 = v33;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        goto LABEL_71;
      }
      goto LABEL_21;
    }
    uint64_t v110 = 0;
    swift_bridgeObjectRetain_n();
    object = 0;
    while (1)
    {
      uint64_t v89 = *(void *)(v34 + 8 * object + 32);
      uint64_t v34 = *((void *)v32 + 29);
      v90 = (long long *)*((void *)v32 + 30);
      v91 = sub_100006788(v114, v34);
      uint64_t v45 = swift_initStackObject();
      *(_OWORD *)(v45 + 16) = v112;
      *(void *)(v45 + 32) = 1701605234;
      *(void *)(v45 + 40) = 0xE400000000000000;
      *(void *)(v45 + 72) = &type metadata for Int;
      *(void *)(v45 + 48) = 301;
      *(void *)(v45 + 80) = &protocol witness table for Int;
      *(void *)(v45 + 88) = 0x747365676964;
      *(void *)(v45 + 96) = 0xE600000000000000;
      v115 = v91;
      v116 = v90;
      if ((v89 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v93 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_60;
      }
      if (!*(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      v92 = *(void **)(v89 + 32);
      swift_bridgeObjectRetain();
      id v93 = v92;
LABEL_60:
      v94 = v93;
      ++object;
      uint64_t v95 = SecCertificateRef.fingerprint.getter();
      unint64_t v97 = v96;

      Swift::String v98 = Data.base64EncodedString(options:)(0);
      sub_100006628(v95, v97);
      *(void *)(v45 + 128) = &type metadata for String;
      *(void *)(v45 + 136) = &protocol witness table for String;
      *(Swift::String *)(v45 + 104) = v98;
      unint64_t v99 = sub_100104AF4(v45);
      sub_100136224(9, v99, v34, (uint64_t)v116);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = v109;
      unint64_t v32 = v111;
      uint64_t v34 = (uint64_t)v104;
      if (v108 == object)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v33 = v110;
        goto LABEL_63;
      }
    }
    __break(1u);
LABEL_71:
    uint64_t v21 = sub_10015A354(0, v21[2] + 1, 1, v21);
LABEL_21:
    unint64_t v48 = v21[2];
    unint64_t v47 = v21[3];
    if (v48 >= v47 >> 1) {
      uint64_t v21 = sub_10015A354((void *)(v47 > 1), v48 + 1, 1, v21);
    }
    v21[2] = v48 + 1;
    v21[v48 + 4] = v45;
    swift_bridgeObjectRelease();
    uint64_t v117 = (uint64_t)v21;
    sub_1000173F4(v34);
    uint64_t v8 = (long long *)v117;
    int64_t v49 = *(void *)(v117 + 16);
    if (!v49)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = (long long *)_swiftEmptyArrayStorage;
      long long v61 = (void *)_swiftEmptyArrayStorage[2];
      if (v61) {
        goto LABEL_34;
      }
LABEL_42:
      swift_bridgeObjectRelease();
      uint64_t v82 = v110;
      _s3__C4CodeOMa_11(0);
      uint64_t v117 = 2034;
      swift_errorRetain();
      sub_10001AF28(&qword_1001D9840, _s3__C4CodeOMa_11);
      char v83 = static _ErrorCodeProtocol.~= infix(_:_:)();
      swift_errorRelease();
      if (v83)
      {
        char v84 = 4;
        goto LABEL_46;
      }
      uint64_t v117 = 2000;
      swift_errorRetain();
      char v85 = static _ErrorCodeProtocol.~= infix(_:_:)();
      swift_errorRelease();
      if (v85)
      {
        char v84 = 1;
LABEL_46:
        char v120 = v84;
LABEL_54:
        swift_willThrow();
        sub_1000139B8((uint64_t)v32, &v120);
        return;
      }
      uint64_t v117 = 2025;
      swift_errorRetain();
      char v86 = static _ErrorCodeProtocol.~= infix(_:_:)();
      swift_errorRelease();
      if (v86)
      {
LABEL_50:
        char v88 = 2;
      }
      else
      {
        uint64_t v117 = v82;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        if (swift_dynamicCast())
        {
          int v87 = v119[294];
          swift_errorRelease();
          if (v87 == 2) {
            goto LABEL_50;
          }
        }
        else
        {
          swift_errorRelease();
        }
        char v88 = 3;
      }
      char v120 = v88;
      goto LABEL_54;
    }
    uint64_t v117 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10014B9C4(0, v49, 0);
    unint64_t v3 = 0;
    uint64_t v1 = (long long *)v117;
    v115 = (void *)v49;
    v116 = v8;
    do
    {
      uint64_t v50 = *((void *)v8 + v3 + 4);
      if ((v50 & 0xC000000000000001) != 0)
      {
        uint64_t v51 = (uint64_t)v1;
        swift_bridgeObjectRetain();
        id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_67;
        }
        uint64_t v51 = (uint64_t)v1;
        uint64_t v52 = *(void **)(v50 + 32);
        swift_bridgeObjectRetain();
        id v53 = v52;
      }
      uint64_t v54 = v53;
      uint64_t v55 = SecCertificateRef.fingerprint.getter();
      unint64_t v57 = v56;

      Swift::String v58 = Data.base64EncodedString(options:)(0);
      object = (uint64_t)v58._object;
      sub_100006628(v55, v57);
      swift_bridgeObjectRelease();
      uint64_t v1 = (long long *)v51;
      uint64_t v117 = v51;
      unint64_t v60 = *(void *)(v51 + 16);
      unint64_t v59 = *(void *)(v51 + 24);
      if (v60 >= v59 >> 1)
      {
        sub_10014B9C4(v59 > 1, v60 + 1, 1);
        uint64_t v1 = (long long *)v117;
      }
      ++v3;
      *((void *)v1 + 2) = v60 + 1;
      v1[v60 + 2] = (__int128)v58;
      uint64_t v8 = v116;
    }
    while (v115 != (void *)v3);
    swift_bridgeObjectRelease();
    unint64_t v32 = v111;
    long long v61 = (void *)*((void *)v1 + 2);
    if (!v61) {
      goto LABEL_42;
    }
LABEL_34:
    v109 = v32 + 13;
    uint64_t v108 = sub_100003EB0(&qword_1001D9B28);
    v116 = (long long *)v119;
    v106 = v1;
    uint64_t v8 = (long long *)((char *)v1 + 40);
    long long v107 = xmmword_1001861D0;
    while (1)
    {
      v115 = v61;
      unint64_t v3 = *((void *)v8 - 1);
      uint64_t v62 = *(void *)v8;
      uint64_t v63 = (void *)*((void *)v32 + 29);
      uint64_t v113 = *((void *)v32 + 30);
      v114 = v63;
      *(void *)&long long v112 = sub_100006788(v109, (uint64_t)v63);
      sub_100003EB0(&qword_1001D9B20);
      uint64_t v64 = swift_initStackObject();
      *(_OWORD *)(v64 + 16) = v107;
      *(void *)(v64 + 32) = 0x747365676964;
      *(void *)(v64 + 72) = &type metadata for String;
      *(void *)(v64 + 80) = &protocol witness table for String;
      *(void *)(v64 + 40) = 0xE600000000000000;
      *(void *)(v64 + 48) = v3;
      *(void *)(v64 + 56) = v62;
      *(void *)(v64 + 88) = 0x726F727265;
      object = v64 + 88;
      *(void *)(v64 + 96) = 0xE500000000000000;
      uint64_t v117 = v110;
      swift_bridgeObjectRetain();
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v65 = String.init<A>(describing:)();
      *(void *)(v64 + 128) = &type metadata for String;
      *(void *)(v64 + 136) = &protocol witness table for String;
      *(void *)(v64 + 104) = v65;
      *(void *)(v64 + 112) = v66;
      v67 = (long long *)static _DictionaryStorage.allocate(capacity:)();
      sub_10001EFE8(v64 + 32, (uint64_t)&v117);
      uint64_t v68 = v117;
      uint64_t v69 = v118;
      uint64_t v1 = v67;
      unint64_t v70 = sub_10000C4B0(v117, v118);
      if (v71) {
        break;
      }
      unint64_t v3 = (unint64_t)(v67 + 4);
      *(void *)((char *)v67 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v70;
      uint64_t v72 = (uint64_t *)(*((void *)v67 + 6) + 16 * v70);
      *uint64_t v72 = v68;
      v72[1] = v69;
      sub_10001F1F0(v116, *((void *)v67 + 7) + 40 * v70);
      uint64_t v73 = *((void *)v67 + 2);
      BOOL v74 = __OFADD__(v73, 1);
      uint64_t v75 = v73 + 1;
      if (v74) {
        goto LABEL_66;
      }
      *((void *)v67 + 2) = v75;
      sub_10001EFE8(object, (uint64_t)&v117);
      uint64_t v76 = v117;
      object = v118;
      uint64_t v1 = v67;
      unint64_t v77 = sub_10000C4B0(v117, v118);
      if (v78) {
        break;
      }
      *(void *)(v3 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v77;
      uint64_t v79 = (uint64_t *)(*((void *)v67 + 6) + 16 * v77);
      *uint64_t v79 = v76;
      v79[1] = object;
      sub_10001F1F0(v116, *((void *)v67 + 7) + 40 * v77);
      uint64_t v80 = *((void *)v67 + 2);
      BOOL v74 = __OFADD__(v80, 1);
      uint64_t v81 = v80 + 1;
      if (v74) {
        goto LABEL_66;
      }
      ++v8;
      *((void *)v67 + 2) = v81;
      swift_bridgeObjectRelease();
      sub_100136224(10, (uint64_t)v67, (uint64_t)v114, v113);
      swift_release();
      long long v61 = (void *)((char *)v115 - 1);
      unint64_t v32 = v111;
      if (v115 == (void *)1) {
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    swift_once();
  }
  __break(1u);
LABEL_74:
  os_unfair_lock_unlock(v18);
  __break(1u);
}

void sub_1000139B8(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(a1 + 248);
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 56);
  uint64_t v5 = (uint64_t *)&v4[4];
  uint64_t v6 = v4 + 8;
  os_unfair_lock_lock(v4 + 8);
  sub_10001F06C(v5);
  os_unfair_lock_unlock(v6);
  sub_100003EB0(&qword_1001D9B38);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = 19;
  uint64_t v8 = qword_100189998[*a2];
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 40) = v8;
  sub_100104C38(inited);
  uint64_t v9 = *(os_unfair_lock_s **)(v3 + 56);
  uint64_t v10 = (uint64_t *)&v9[4];
  os_log_type_t v11 = v9 + 8;
  os_unfair_lock_lock(v9 + 8);
  sub_10001F088(v10);
  os_unfair_lock_unlock(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(os_unfair_lock_s **)(v3 + 56);
  uint64_t v13 = (uint64_t *)&v12[4];
  uint64_t v14 = v12 + 8;
  os_unfair_lock_lock(v12 + 8);
  sub_10001F0A4(v13);
  os_unfair_lock_unlock(v14);
}

uint64_t sub_100013AF8()
{
  countAndFlagsBits = v0;
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[36];
  sub_100006788(v0 + 32, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  if (!v1)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    type metadata accessor for SecCertificate(0);
    unint64_t inited = (unint64_t)static SecCertificateRef.parseList(pemRepresentation:)();
    swift_bridgeObjectRelease();
    if (inited)
    {
      os_log_type_t v11 = (void **)(inited & 0xFFFFFFFFFFFFFF8);
      if (inited >> 62) {
        goto LABEL_83;
      }
      if (*(void *)((inited & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          uint64_t v94 = v9;
          uint64_t v12 = countAndFlagsBits[29];
          unint64_t v96 = countAndFlagsBits;
          v104 = (long long *)countAndFlagsBits[30];
          uint64_t v95 = countAndFlagsBits + 26;
          sub_100006788(countAndFlagsBits + 26, v12);
          sub_100003EB0(&qword_1001D9B20);
          uint64_t result = swift_initStackObject();
          uint64_t v13 = result;
          *(_OWORD *)(result + 16) = xmmword_1001861D0;
          *(void *)(result + 32) = 1701605234;
          *(void *)(result + 40) = 0xE400000000000000;
          *(void *)(result + 72) = &type metadata for Int;
          *(void *)(result + 80) = &protocol witness table for Int;
          *(void *)(result + 48) = 200;
          *(void *)(result + 88) = 0x747365676964;
          *(void *)(result + 96) = 0xE600000000000000;
          unint64_t v93 = inited;
          if ((inited & 0xC000000000000001) != 0)
          {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!v11[2])
            {
              __break(1u);
              return result;
            }
            id v14 = *(id *)(inited + 32);
          }
          uint64_t v15 = v14;
          uint64_t v16 = SecCertificateRef.fingerprint.getter();
          unint64_t v18 = v17;

          Swift::String v19 = Data.base64EncodedString(options:)(0);
          sub_100006628(v16, v18);
          *(void *)(v13 + 128) = &type metadata for String;
          *(void *)(v13 + 136) = &protocol witness table for String;
          *(Swift::String *)(v13 + 104) = v19;
          unint64_t v20 = sub_100104AF4(v13);
          sub_100136224(8, v20, v12, (uint64_t)v104);
          swift_bridgeObjectRelease();
          countAndFlagsBits = (void *)v8[2];
          uint64_t v21 = _swiftEmptyArrayStorage;
          if (countAndFlagsBits)
          {
            swift_bridgeObjectRetain();
            os_log_type_t v22 = v8 + 5;
            uint64_t v23 = _swiftEmptyArrayStorage;
            while (1)
            {
              swift_bridgeObjectRetain();
              unint64_t v24 = (unint64_t)static SecCertificateRef.parseList(pemRepresentation:)();
              swift_bridgeObjectRelease();
              if (v24)
              {
                if (v24 >> 62)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (v27)
                  {
LABEL_15:
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v23 = sub_10015A354(0, v23[2] + 1, 1, v23);
                    }
                    unint64_t v26 = v23[2];
                    unint64_t v25 = v23[3];
                    if (v26 >= v25 >> 1) {
                      uint64_t v23 = sub_10015A354((void *)(v25 > 1), v26 + 1, 1, v23);
                    }
                    v23[2] = v26 + 1;
                    v23[v26 + 4] = v24;
                    uint64_t v21 = _swiftEmptyArrayStorage;
                    goto LABEL_11;
                  }
                }
                else if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  goto LABEL_15;
                }
                swift_bridgeObjectRelease();
              }
LABEL_11:
              v22 += 2;
              countAndFlagsBits = (void *)((char *)countAndFlagsBits - 1);
              if (!countAndFlagsBits)
              {
                swift_bridgeObjectRelease();
                goto LABEL_25;
              }
            }
          }
          uint64_t v23 = _swiftEmptyArrayStorage;
LABEL_25:
          uint64_t v28 = v94;
          swift_bridgeObjectRelease();
          int64_t v29 = v23[2];
          if (v29)
          {
            uint64_t v101 = _swiftEmptyArrayStorage;
            os_log_type_t v11 = &v101;
            sub_10014B9C4(0, v29, 0);
            uint64_t v21 = v101;
            unint64_t inited = (unint64_t)(v23 + 4);
            do
            {
              uint64_t v9 = *(void *)inited;
              if ((*(void *)inited & 0xC000000000000001) != 0)
              {
                swift_bridgeObjectRetain();
                uint64_t v31 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_81;
                }
                unint64_t v30 = *(void **)(v9 + 32);
                swift_bridgeObjectRetain();
                uint64_t v31 = v30;
              }
              os_log_type_t v11 = v31;
              uint64_t v32 = SecCertificateRef.fingerprint.getter();
              unint64_t v34 = v33;

              Swift::String v35 = Data.base64EncodedString(options:)(0);
              countAndFlagsBits = (void *)v35._countAndFlagsBits;
              sub_100006628(v32, v34);
              swift_bridgeObjectRelease();
              uint64_t v101 = v21;
              unint64_t v37 = v21[2];
              unint64_t v36 = v21[3];
              uint64_t v8 = (void *)(v37 + 1);
              if (v37 >= v36 >> 1)
              {
                os_log_type_t v11 = &v101;
                sub_10014B9C4(v36 > 1, v37 + 1, 1);
                uint64_t v21 = v101;
              }
              v21[2] = v8;
              *(Swift::String *)&v21[2 * v37 + 4] = v35;
              inited += 8;
              --v29;
            }
            while (v29);
          }
          else
          {
            uint64_t v8 = (void *)_swiftEmptyArrayStorage[2];
            if (!v8) {
              goto LABEL_43;
            }
          }
          sub_100003EB0(&qword_1001D9B28);
          v104 = (long long *)v103;
          id v38 = v21 + 5;
          do
          {
            uint64_t v39 = *(v38 - 1);
            uint64_t v40 = *v38;
            uint64_t v41 = v96[29];
            uint64_t v97 = v96[30];
            unint64_t v99 = v8;
            sub_100006788(v95, v41);
            unint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1001861D0;
            *(void *)(inited + 32) = 1701605234;
            *(void *)(inited + 72) = &type metadata for Int;
            *(void *)(inited + 80) = &protocol witness table for Int;
            *(void *)(inited + 88) = 0x747365676964;
            uint64_t v9 = inited + 88;
            *(void *)(inited + 40) = 0xE400000000000000;
            *(void *)(inited + 48) = 300;
            *(void *)(inited + 128) = &type metadata for String;
            *(void *)(inited + 136) = &protocol witness table for String;
            *(void *)(inited + 96) = 0xE600000000000000;
            *(void *)(inited + 104) = v39;
            *(void *)(inited + 112) = v40;
            unint64_t v42 = (void *)static _DictionaryStorage.allocate(capacity:)();
            swift_bridgeObjectRetain();
            sub_10001EFE8(inited + 32, (uint64_t)&v101);
            countAndFlagsBits = v101;
            uint64_t v43 = (uint64_t)v102;
            os_log_type_t v11 = (void **)v42;
            unint64_t v44 = sub_10000C4B0((uint64_t)v101, (uint64_t)v102);
            if (v45) {
              goto LABEL_77;
            }
            uint64_t v8 = v42 + 8;
            *(void *)((char *)v42 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v44;
            unint64_t v46 = (void *)(v42[6] + 16 * v44);
            *unint64_t v46 = countAndFlagsBits;
            v46[1] = v43;
            sub_10001F1F0(v104, v42[7] + 40 * v44);
            uint64_t v47 = v42[2];
            BOOL v48 = __OFADD__(v47, 1);
            uint64_t v49 = v47 + 1;
            if (v48) {
              goto LABEL_78;
            }
            v42[2] = v49;
            sub_10001EFE8(v9, (uint64_t)&v101);
            uint64_t v9 = (uint64_t)v101;
            countAndFlagsBits = v102;
            os_log_type_t v11 = (void **)v42;
            unint64_t v50 = sub_10000C4B0((uint64_t)v101, (uint64_t)v102);
            if (v51)
            {
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            *(void *)((char *)v8 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
            uint64_t v52 = (uint64_t *)(v42[6] + 16 * v50);
            *uint64_t v52 = v9;
            v52[1] = (uint64_t)countAndFlagsBits;
            sub_10001F1F0(v104, v42[7] + 40 * v50);
            uint64_t v53 = v42[2];
            BOOL v48 = __OFADD__(v53, 1);
            uint64_t v54 = v53 + 1;
            if (v48) {
              goto LABEL_78;
            }
            v38 += 2;
            v42[2] = v54;
            swift_bridgeObjectRelease();
            sub_100136224(8, (uint64_t)v42, v41, v97);
            swift_release();
            uint64_t v8 = (void *)((char *)v99 - 1);
          }
          while (v99 != (void *)1);
          uint64_t v28 = v94;
LABEL_43:
          swift_bridgeObjectRelease();
          uint64_t v8 = *(void **)(v28 + 16);
          uint64_t v55 = _swiftEmptyArrayStorage;
          if (v8)
          {
            swift_bridgeObjectRetain();
            countAndFlagsBits = (void *)(v28 + 40);
            unint64_t v56 = _swiftEmptyArrayStorage;
            while (1)
            {
              swift_bridgeObjectRetain();
              unint64_t v57 = (unint64_t)static SecCertificateRef.parseList(pemRepresentation:)();
              swift_bridgeObjectRelease();
              if (v57)
              {
                if (v57 >> 62)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (v60)
                  {
LABEL_50:
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      unint64_t v56 = sub_10015A354(0, v56[2] + 1, 1, v56);
                    }
                    unint64_t v59 = v56[2];
                    unint64_t v58 = v56[3];
                    if (v59 >= v58 >> 1) {
                      unint64_t v56 = sub_10015A354((void *)(v58 > 1), v59 + 1, 1, v56);
                    }
                    v56[2] = v59 + 1;
                    v56[v59 + 4] = v57;
                    goto LABEL_46;
                  }
                }
                else if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  goto LABEL_50;
                }
                swift_bridgeObjectRelease();
              }
LABEL_46:
              countAndFlagsBits += 2;
              uint64_t v8 = (void *)((char *)v8 - 1);
              if (!v8)
              {
                swift_bridgeObjectRelease();
                goto LABEL_59;
              }
            }
          }
          unint64_t v56 = _swiftEmptyArrayStorage;
LABEL_59:
          swift_bridgeObjectRelease();
          int64_t v61 = v56[2];
          if (v61)
          {
            uint64_t v101 = _swiftEmptyArrayStorage;
            os_log_type_t v11 = &v101;
            sub_10014B9C4(0, v61, 0);
            uint64_t v55 = v101;
            unint64_t inited = (unint64_t)(v56 + 4);
            do
            {
              uint64_t v9 = *(void *)inited;
              if ((*(void *)inited & 0xC000000000000001) != 0)
              {
                uint64_t v62 = v55;
                swift_bridgeObjectRetain();
                uint64_t v64 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_82;
                }
                uint64_t v62 = v55;
                uint64_t v63 = *(void **)(v9 + 32);
                swift_bridgeObjectRetain();
                uint64_t v64 = v63;
              }
              os_log_type_t v11 = v64;
              uint64_t v65 = SecCertificateRef.fingerprint.getter();
              unint64_t v67 = v66;

              Swift::String v68 = Data.base64EncodedString(options:)(0);
              uint64_t v8 = (void *)v68._countAndFlagsBits;
              countAndFlagsBits = v68._object;
              sub_100006628(v65, v67);
              swift_bridgeObjectRelease();
              uint64_t v55 = v62;
              uint64_t v101 = v62;
              unint64_t v70 = v62[2];
              unint64_t v69 = v62[3];
              unint64_t v71 = v70 + 1;
              if (v70 >= v69 >> 1)
              {
                os_log_type_t v11 = &v101;
                sub_10014B9C4(v69 > 1, v70 + 1, 1);
                uint64_t v55 = v101;
              }
              v55[2] = v71;
              *(Swift::String *)&v55[2 * v70 + 4] = v68;
              inited += 8;
              --v61;
            }
            while (v61);
          }
          else
          {
            unint64_t v71 = _swiftEmptyArrayStorage[2];
            if (!v71)
            {
LABEL_76:
              swift_bridgeObjectRelease();
              return v93;
            }
          }
          sub_100003EB0(&qword_1001D9B28);
          v104 = (long long *)v103;
          uint64_t v8 = v55 + 5;
          while (1)
          {
            unint64_t v100 = v71;
            uint64_t v72 = *(v8 - 1);
            uint64_t v73 = *v8;
            uint64_t v74 = v96[29];
            uint64_t v98 = v96[30];
            sub_100006788(v95, v74);
            unint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1001861D0;
            *(void *)(inited + 32) = 1701605234;
            *(void *)(inited + 72) = &type metadata for Int;
            *(void *)(inited + 80) = &protocol witness table for Int;
            *(void *)(inited + 88) = 0x747365676964;
            uint64_t v9 = inited + 88;
            *(void *)(inited + 40) = 0xE400000000000000;
            *(void *)(inited + 48) = 301;
            *(void *)(inited + 128) = &type metadata for String;
            *(void *)(inited + 136) = &protocol witness table for String;
            *(void *)(inited + 96) = 0xE600000000000000;
            *(void *)(inited + 104) = v72;
            *(void *)(inited + 112) = v73;
            uint64_t v75 = (void *)static _DictionaryStorage.allocate(capacity:)();
            swift_bridgeObjectRetain();
            sub_10001EFE8(inited + 32, (uint64_t)&v101);
            countAndFlagsBits = v101;
            uint64_t v76 = (uint64_t)v102;
            os_log_type_t v11 = (void **)v75;
            unint64_t v77 = sub_10000C4B0((uint64_t)v101, (uint64_t)v102);
            if (v78) {
              break;
            }
            *(void *)((char *)v75 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v77;
            uint64_t v79 = (void *)(v75[6] + 16 * v77);
            *uint64_t v79 = countAndFlagsBits;
            v79[1] = v76;
            sub_10001F1F0(v104, v75[7] + 40 * v77);
            uint64_t v80 = v75[2];
            BOOL v48 = __OFADD__(v80, 1);
            uint64_t v81 = v80 + 1;
            if (v48) {
              goto LABEL_80;
            }
            v75[2] = v81;
            sub_10001EFE8(v9, (uint64_t)&v101);
            uint64_t v9 = (uint64_t)v101;
            countAndFlagsBits = v102;
            os_log_type_t v11 = (void **)v75;
            unint64_t v82 = sub_10000C4B0((uint64_t)v101, (uint64_t)v102);
            if (v83) {
              break;
            }
            *(void *)((char *)v75 + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v82;
            char v84 = (uint64_t *)(v75[6] + 16 * v82);
            uint64_t *v84 = v9;
            v84[1] = (uint64_t)countAndFlagsBits;
            sub_10001F1F0(v104, v75[7] + 40 * v82);
            uint64_t v85 = v75[2];
            BOOL v48 = __OFADD__(v85, 1);
            uint64_t v86 = v85 + 1;
            if (v48) {
              goto LABEL_80;
            }
            v8 += 2;
            v75[2] = v86;
            swift_bridgeObjectRelease();
            sub_100136224(8, (uint64_t)v75, v74, v98);
            swift_release();
            unint64_t v71 = v100 - 1;
            if (v100 == 1) {
              goto LABEL_76;
            }
          }
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          swift_bridgeObjectRetain();
          uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        while (v87);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    sub_100003E78(v88, (uint64_t)qword_1001D8F50);
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Certificate for encrypting payloads is not in PEM representation", v91, 2u);
      swift_slowDealloc();
    }

    sub_10001EF08();
    swift_allocError();
    unsigned char *v92 = 2;
    return swift_willThrow();
  }
  return result;
}

void sub_1000146EC(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v11 = v4[7];
  uint64_t v10 = v4[8];
  sub_100006788(v4 + 4, v11);
  uint64_t v29 = a3;
  uint64_t v12 = sub_100168438(a2, a3, a4);
  unint64_t v14 = v13;
  uint64_t v15 = sub_10013A8B8(a1);
  sub_1000D4FA4(v12, v14, v15, v16, v11, v10);
  if (v5)
  {
    swift_bridgeObjectRelease();
    sub_100006628(v12, v14);
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100003E78(v17, (uint64_t)qword_1001D8F50);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      sub_100005EB8(v29, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v21 = String.init<A>(describing:)();
      sub_100005EB8(v21, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "error persisting %s certificate: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100006628(v12, v14);
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100003E78(v23, (uint64_t)qword_1001D8F50);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      sub_100005EB8(v29, a4, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2080;
      uint64_t v27 = sub_10013A6E8(a1);
      sub_100005EB8(v27, v28, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Saved %s certificate: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_100014B90(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v6 = a4;
  uint64_t v7 = a2;
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    sub_10014B9C4(0, v8, 0);
    uint64_t v9 = _swiftEmptyArrayStorage;
    uint64_t v11 = a1 + 32;
    do
    {
      unint64_t v12 = swift_bridgeObjectRetain();
      uint64_t v13 = sub_10013A8B8(v12);
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
      uint64_t v41 = v9;
      unint64_t v17 = v9[2];
      unint64_t v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        sub_10014B9C4(v16 > 1, v17 + 1, 1);
        uint64_t v9 = v41;
      }
      v9[2] = v17 + 1;
      unint64_t v18 = &v9[2 * v17];
      v18[4] = v13;
      v18[5] = v15;
      v11 += 8;
      --v8;
    }
    while (v8);
    uint64_t v7 = a2;
    unint64_t v6 = a4;
  }
  uint64_t v19 = *(void *)(v4 + 56);
  uint64_t v20 = *(void *)(v4 + 64);
  sub_100006788((void *)(v5 + 32), *(void *)(v5 + 56));
  uint64_t v21 = sub_100168438(v7, a3, v6);
  unint64_t v23 = v22;
  uint64_t v41 = v9;
  uint64_t v24 = sub_100003EB0((uint64_t *)&unk_1001DA570);
  sub_10001EF84(&qword_1001D9B18);
  sub_1000D5134(v21, v23, (uint64_t)&v41, v19, v24, v20);
  if (v39)
  {
    sub_100006628(v21, v23);
    swift_bridgeObjectRelease();
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100003E78(v25, (uint64_t)qword_1001D8F50);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      sub_100005EB8(a3, v6, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v29 = String.init<A>(describing:)();
      sub_100005EB8(v29, v30, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "error persisting %s certificates: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
  }
  else
  {
    sub_100006628(v21, v23);
    swift_bridgeObjectRelease();
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100003E78(v31, (uint64_t)qword_1001D8F50);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_bridgeObjectRetain();
      sub_100005EB8(a3, v6, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v35 = Array.debugDescription.getter();
      sub_100005EB8(v35, v36, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Saved %s certificates: %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_100015124@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(v1 + 9, v1[12]);
  sub_1000238E4((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10001EEA8((uint64_t)v7);
    if (qword_1001D8F48 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001D8F50);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to schedule renewal. Could not calculate secure now", v16, 2u);
      swift_slowDealloc();
    }

    sub_10001EF08();
    swift_allocError();
    unsigned char *v17 = 6;
    return swift_willThrow();
  }
  else
  {
    uint64_t v27 = a1;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    Date.timeIntervalSinceReferenceDate.getter();
    double v29 = v19 + 604800.0;
    uint64_t v20 = sub_100115354((uint64_t)&v29, (uint64_t)&v30);
    uint64_t v28 = v2;
    uint64_t v21 = v20;
    unint64_t v23 = v22;
    uint64_t v25 = v1[7];
    uint64_t v24 = v1[8];
    sub_100006788(v1 + 4, v25);
    uint64_t v26 = v28;
    (*(void (**)(void, void, uint64_t, unint64_t, uint64_t, uint64_t))(v24 + 40))(v1[2], v1[3], v21, v23, v25, v24);
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return sub_100006628(v21, v23);
    }
    else
    {
      Date.init(timeIntervalSinceReferenceDate:)();
      sub_100006628(v21, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
  }
}

uint64_t sub_10001549C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[7];
  uint64_t v4 = v1[8];
  sub_100006788(v1 + 4, v3);
  uint64_t v5 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v4 + 32))(v1[2], v1[3], v3, v4);
  unint64_t v7 = v6;
  uint64_t v8 = v5;
  switch(v6 >> 62)
  {
    case 1uLL:
      if ((int)v5 > v5 >> 32)
      {
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      swift_retain();
      if (!__DataStorage._bytes.getter())
      {
LABEL_17:
        __DataStorage._length.getter();
        __break(1u);
LABEL_18:
        __DataStorage._length.getter();
        __break(1u);
        JUMPOUT(0x10001577CLL);
      }
      if (__OFSUB__((int)v8, __DataStorage._offset.getter()))
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      __DataStorage._length.getter();
LABEL_9:
      sub_100006628(v8, v7);
LABEL_11:
      Date.init(timeIntervalSinceReferenceDate:)();
      sub_100006628(v8, v7);
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      return v11(a1, 0, 1, v10);
    case 2uLL:
      uint64_t v9 = *(void *)(v5 + 16);
      sub_1000065D0(v5, v6);
      swift_retain();
      swift_retain();
      if (!__DataStorage._bytes.getter()) {
        goto LABEL_18;
      }
      if (__OFSUB__(v9, __DataStorage._offset.getter())) {
        goto LABEL_15;
      }
      __DataStorage._length.getter();
      swift_release();
      swift_release();
      goto LABEL_9;
    default:
      sub_100006628(v5, v6);
      goto LABEL_11;
  }
}

unint64_t sub_10001578C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v9 = v3[8];
  sub_100006788(v3 + 4, v3[7]);
  uint64_t v10 = sub_100168438(a1, a2, a3);
  unint64_t v12 = v11;
  uint64_t v13 = (*(uint64_t (**)(void))(v9 + 32))();
  unint64_t v15 = v14;
  sub_100006628(v10, v12);
  sub_1000065D0(v13, v15);
  static String.Encoding.utf8.getter();
  String.init(data:encoding:)();
  uint64_t v17 = v16;
  sub_100006628(v13, v15);
  if (v17)
  {
    type metadata accessor for SecCertificate(0);
    unint64_t v18 = (unint64_t)static SecCertificateRef.parseList(pemRepresentation:)();
    swift_bridgeObjectRelease();
    if (v18)
    {
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_5;
        }
      }
      else if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_5:
        sub_100006628(v13, v15);
        return v18;
      }
      swift_bridgeObjectRelease();
    }
  }
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003E78(v20, (uint64_t)qword_1001D8F50);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "malformed certificate", v23, 2u);
    swift_slowDealloc();
  }
  sub_100006628(v13, v15);

  return 0;
}

void *sub_100015B74(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = v3 + 4;
  uint64_t v9 = v3[7];
  uint64_t v8 = v3[8];
  sub_100006788(v7, v9);
  uint64_t v10 = sub_100168438(a1, a2, a3);
  unint64_t v12 = v11;
  uint64_t v13 = sub_100003EB0((uint64_t *)&unk_1001DA570);
  sub_10001EF84(&qword_1001D9B10);
  sub_1000D52CC(v10, v12, v9, v13, v8);
  sub_100006628(v10, v12);
  uint64_t v14 = *(void *)(v22 + 16);
  if (!v14)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  type metadata accessor for SecCertificate(0);
  swift_bridgeObjectRetain();
  uint64_t v15 = v22 + 40;
  uint64_t v16 = _swiftEmptyArrayStorage;
  do
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = (unint64_t)static SecCertificateRef.parseList(pemRepresentation:)();
    swift_bridgeObjectRelease();
    if (v17)
    {
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v20)
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }
      else if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_3;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = sub_10015A354(0, v16[2] + 1, 1, v16);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        uint64_t v16 = sub_10015A354((void *)(v18 > 1), v19 + 1, 1, v16);
      }
      v16[2] = v19 + 1;
      v16[v19 + 4] = v17;
    }
LABEL_4:
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
LABEL_17:
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_100015F0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003E78(v11, (uint64_t)qword_1001D8F50);
  swift_bridgeObjectRetain_n();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v33 = a1;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    sub_100005EB8(a2, a3, &v39);
    uint64_t v8 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "CertificateManager.verifySignature for %s certificate", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v33;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_10001E92C();
  if (!v8)
  {
    uint64_t v19 = result;
    unint64_t v20 = v16;
    unint64_t v21 = v18;
    uint64_t v22 = v17;
    uint64_t v36 = Data.sha256Digest.getter(a6, a7);
    unint64_t v24 = v23;
    unint64_t v25 = a2;
    unint64_t v38 = v21;
    uint64_t v26 = (__SecKey *)(id)sub_10001630C(a1, v25, a3, v19, v20, v22, v21);
    CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
    CFDataRef v28 = Data._bridgeToObjectiveC()().super.isa;
    LODWORD(v21) = SecKeyVerifySignature(v26, kSecKeyAlgorithmECDSASignatureDigestX962SHA256, isa, v28, 0);

    if (v21)
    {

      uint64_t v29 = v36;
    }
    else
    {
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Signature verification failed", v32, 2u);
        swift_slowDealloc();
      }

      sub_10002A180(10009, 0xD00000000000001CLL, (void *)0x8000000100193B70, 0);
      swift_willThrow();

      uint64_t v29 = v36;
    }
    sub_100006628(v29, v24);
    sub_100006628(v19, v20);
    return sub_100006628(v22, v38);
  }
  return result;
}

uint64_t sub_10001630C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100003E78(v14, (uint64_t)qword_1001D8F50);
  sub_1000065D0(a4, a5);
  sub_1000065D0(a6, a7);
  sub_1000065D0(a4, a5);
  sub_1000065D0(a6, a7);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  uint64_t v112 = a6;
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v113 = a7;
    uint64_t v17 = swift_slowAlloc();
    __s1[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    sub_100005EB8(0xD000000000000021, 0x8000000100193C30, __s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    Swift::String v18 = Data.hexString()();
    uint64_t __s2 = sub_100005EB8(v18._countAndFlagsBits, (unint64_t)v18._object, __s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(a4, a5);
    sub_100006628(a6, v113);
    sub_100006628(a4, a5);
    sub_100006628(a6, v113);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s token.keyIdentifier: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a7 = v113;
    uint64_t v8 = v7;
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(a4, a5);
    sub_100006628(a6, a7);
    sub_100006628(a4, a5);
    sub_100006628(a6, a7);
  }

  uint64_t v19 = sub_100015B74(a1, a2, a3);
  if (!v19) {
    goto LABEL_15;
  }
  if (!v19[2])
  {
    swift_bridgeObjectRelease();
LABEL_15:
    sub_10001EF08();
    swift_allocError();
    char v24 = 1;
LABEL_16:
    *unint64_t v23 = v24;
    swift_willThrow();
    return a6;
  }
  uint64_t v20 = sub_1000107F4((uint64_t)v19, a1, a2, a3);
  swift_bridgeObjectRelease();
  if (v8) {
    return a6;
  }
  uint64_t v107 = *(void *)(v20 + 16);
  if (!v107)
  {
LABEL_133:
    swift_bridgeObjectRelease();
    os_log_type_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v90, v91))
    {
LABEL_139:

      sub_10001EF08();
      swift_allocError();
      char v24 = 3;
      goto LABEL_16;
    }
    v92 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v92 = 0;
    unint64_t v93 = "No stored public key matches input token keyIdentifier";
LABEL_138:
    _os_log_impl((void *)&_mh_execute_header, v90, v91, v93, v92, 2u);
    swift_slowDealloc();
    goto LABEL_139;
  }
  uint64_t v21 = 0;
  unint64_t v99 = HIDWORD(a6);
  BOOL v22 = __OFSUB__(HIDWORD(a6), a6);
  BOOL v105 = v22;
  size_t __na = BYTE6(a7);
  unint64_t v111 = a7 >> 62;
  uint64_t v106 = v20;
  uint64_t v103 = (int)a6;
  size_t v104 = HIDWORD(a6) - (int)a6;
  uint64_t v97 = (a6 >> 32) - (int)a6;
  uint64_t v98 = a6 >> 32;
  unint64_t v114 = a7;
  while (2)
  {
    uint64_t v26 = *(void *)(v20 + 8 * v21 + 32);
    if ((v26 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
      }
      uint64_t v27 = *(void **)(v26 + 32);
      swift_bridgeObjectRetain();
      id v28 = v27;
    }
    uint64_t v29 = v28;
    a6 = (uint64_t)SecCertificateRef.publicKey.getter();
    swift_bridgeObjectRelease();

    if (!a6) {
      goto LABEL_136;
    }
    CFDataRef v30 = SecKeyCopyExternalRepresentation((SecKeyRef)a6, 0);
    if (!v30)
    {

LABEL_136:
      swift_bridgeObjectRelease();
      os_log_type_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v90, v91)) {
        goto LABEL_139;
      }
      v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v92 = 0;
      unint64_t v93 = "Could not get public key from certificate";
      goto LABEL_138;
    }
    CFDataRef v31 = v30;
    ++v21;
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;
    uint64_t v35 = Data.sha256Digest.getter(v32, v33);
    unint64_t v37 = v36;
    sub_100006628(v32, v34);
    uint64_t v38 = 0;
    switch(v37 >> 62)
    {
      case 1uLL:
        LODWORD(v38) = HIDWORD(v35) - v35;
        if (__OFSUB__(HIDWORD(v35), v35)) {
          goto LABEL_143;
        }
        uint64_t v38 = (int)v38;
        break;
      case 2uLL:
        uint64_t v40 = *(void *)(v35 + 16);
        uint64_t v39 = *(void *)(v35 + 24);
        BOOL v41 = __OFSUB__(v39, v40);
        uint64_t v38 = v39 - v40;
        if (!v41) {
          break;
        }
        goto LABEL_144;
      case 3uLL:
        break;
      default:
        uint64_t v38 = BYTE6(v37);
        break;
    }
    size_t v42 = __na;
    switch((int)v111)
    {
      case 1:
        size_t v42 = v104;
        if (v105) {
          goto LABEL_145;
        }
        goto LABEL_35;
      case 2:
        uint64_t v44 = *(void *)(v112 + 16);
        uint64_t v43 = *(void *)(v112 + 24);
        BOOL v41 = __OFSUB__(v43, v44);
        size_t v42 = v43 - v44;
        if (!v41) {
          goto LABEL_35;
        }
        goto LABEL_146;
      case 3:
        if (v38) {
          goto LABEL_19;
        }
        goto LABEL_140;
      default:
LABEL_35:
        if (v38 != v42)
        {
LABEL_19:

          sub_100006628(v35, v37);
          goto LABEL_20;
        }
        if (v38 >= 1)
        {
          switch(v37 >> 62)
          {
            case 1uLL:
              if ((int)v35 > v35 >> 32) {
                goto LABEL_147;
              }
              sub_1000065D0(v35, v37);
              uint64_t v49 = (char *)__DataStorage._bytes.getter();
              if (!v49) {
                goto LABEL_49;
              }
              uint64_t v50 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v35, v50)) {
                goto LABEL_149;
              }
              v49 += (int)v35 - v50;
LABEL_49:
              a7 = v114;
              __DataStorage._length.getter();
              if (!v111)
              {
                LODWORD(__s1[0]) = v112;
                BYTE4(__s1[0]) = v99;
                *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v112 + 5);
                HIBYTE(__s1[0]) = HIBYTE(v112);
                LODWORD(__s1[1]) = v114;
                WORD2(__s1[1]) = WORD2(v114);
                if (!v49) {
                  goto LABEL_177;
                }
                int v55 = memcmp(v49, __s1, __na);
LABEL_115:
                uint64_t v67 = v35;
                unint64_t v68 = v37;
LABEL_116:
                sub_100006628(v67, v68);
LABEL_117:

LABEL_118:
                sub_100006628(v35, v37);
                if (!v55) {
                  goto LABEL_141;
                }
                break;
              }
              if (v111 == 1)
              {
                if (v98 < v103) {
                  goto LABEL_158;
                }
                swift_retain();
                char v51 = (char *)__DataStorage._bytes.getter();
                if (v51)
                {
                  uint64_t v52 = __DataStorage._offset.getter();
                  if (__OFSUB__(v103, v52)) {
                    goto LABEL_165;
                  }
                  v51 += v103 - v52;
                }
                uint64_t v53 = __DataStorage._length.getter();
                size_t v54 = v97;
                if (v53 < v97) {
                  size_t v54 = v53;
                }
                if (!v49) {
                  goto LABEL_167;
                }
                if (!v51) {
                  goto LABEL_168;
                }
                int v55 = memcmp(v49, v51, v54);
                a7 = v114;
                sub_100006628(v112, v114);
                goto LABEL_115;
              }
              unint64_t v96 = v49;
              uint64_t v84 = *(void *)(v112 + 16);
              uint64_t v102 = *(void *)(v112 + 24);
              swift_retain();
              swift_retain();
              uint64_t v85 = (char *)__DataStorage._bytes.getter();
              if (v85)
              {
                uint64_t v86 = __DataStorage._offset.getter();
                if (__OFSUB__(v84, v86)) {
                  goto LABEL_164;
                }
                v85 += v84 - v86;
              }
              BOOL v41 = __OFSUB__(v102, v84);
              int64_t v87 = v102 - v84;
              if (v41) {
                goto LABEL_159;
              }
              uint64_t v88 = __DataStorage._length.getter();
              if (v88 >= v87) {
                size_t v89 = v87;
              }
              else {
                size_t v89 = v88;
              }
              if (!v96) {
                goto LABEL_178;
              }
              if (!v85) {
                goto LABEL_179;
              }
              int v77 = memcmp(v96, v85, v89);
              swift_release();
              swift_release();
              sub_100006628(v35, v37);

              goto LABEL_130;
            case 2uLL:
              uint64_t v56 = *(void *)(v35 + 16);
              swift_retain();
              swift_retain();
              unint64_t v57 = (char *)__DataStorage._bytes.getter();
              if (!v57) {
                goto LABEL_63;
              }
              uint64_t v58 = __DataStorage._offset.getter();
              if (__OFSUB__(v56, v58)) {
                goto LABEL_148;
              }
              v57 += v56 - v58;
LABEL_63:
              a7 = v114;
              __DataStorage._length.getter();
              if (!v111)
              {
                LODWORD(__s1[0]) = v112;
                BYTE4(__s1[0]) = v99;
                *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v112 + 5);
                HIBYTE(__s1[0]) = HIBYTE(v112);
                LODWORD(__s1[1]) = v114;
                WORD2(__s1[1]) = WORD2(v114);
                if (!v57) {
                  goto LABEL_174;
                }
                int v55 = memcmp(v57, __s1, __na);
LABEL_101:

                swift_release();
                swift_release();
                goto LABEL_118;
              }
              if (v111 == 1)
              {
                if (v98 < v103) {
                  goto LABEL_152;
                }
                swift_retain();
                unint64_t v59 = (char *)__DataStorage._bytes.getter();
                if (v59)
                {
                  uint64_t v60 = __DataStorage._offset.getter();
                  if (__OFSUB__(v103, v60)) {
                    goto LABEL_163;
                  }
                  v59 += v103 - v60;
                }
                uint64_t v61 = __DataStorage._length.getter();
                size_t v62 = v97;
                if (v61 < v97) {
                  size_t v62 = v61;
                }
                if (!v57) {
                  goto LABEL_169;
                }
                if (!v59) {
                  goto LABEL_170;
                }
                int v55 = memcmp(v57, v59, v62);
                a7 = v114;
                sub_100006628(v112, v114);
                goto LABEL_101;
              }
              uint64_t v94 = v57;
              uint64_t v78 = *(void *)(v112 + 16);
              uint64_t v95 = *(char **)(v112 + 24);
              swift_retain();
              swift_retain();
              uint64_t v79 = (char *)__DataStorage._bytes.getter();
              if (v79)
              {
                uint64_t v80 = __DataStorage._offset.getter();
                if (__OFSUB__(v78, v80)) {
                  goto LABEL_162;
                }
                v79 += v78 - v80;
              }
              BOOL v41 = __OFSUB__(v95, v78);
              uint64_t v81 = &v95[-v78];
              if (v41) {
                goto LABEL_157;
              }
              uint64_t v82 = __DataStorage._length.getter();
              if (v82 >= (uint64_t)v81) {
                size_t v83 = (size_t)v81;
              }
              else {
                size_t v83 = v82;
              }
              if (!v94) {
                goto LABEL_175;
              }
              if (!v79) {
                goto LABEL_176;
              }
              int v77 = memcmp(v94, v79, v83);

              swift_release();
              swift_release();
LABEL_112:
              swift_release();
              swift_release();
LABEL_130:
              sub_100006628(v35, v37);
              a7 = v114;
              if (!v77) {
                goto LABEL_141;
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              if (!v111) {
                goto LABEL_83;
              }
              if (v111 == 1)
              {
                if (v98 < v103) {
                  goto LABEL_151;
                }
                sub_1000065D0(v112, a7);
                uint64_t v63 = __DataStorage._bytes.getter();
                if (!v63) {
                  goto LABEL_171;
                }
                uint64_t v46 = v63;
                uint64_t v64 = __DataStorage._offset.getter();
                uint64_t v48 = v103 - v64;
                if (__OFSUB__(v103, v64)) {
                  goto LABEL_156;
                }
LABEL_79:
                uint64_t v65 = __DataStorage._length.getter();
                if (v65 >= v97) {
                  size_t v66 = v97;
                }
                else {
                  size_t v66 = v65;
                }
                int v55 = memcmp(__s1, (const void *)(v46 + v48), v66);
                uint64_t v67 = v112;
                a7 = v114;
                unint64_t v68 = v114;
                goto LABEL_116;
              }
              uint64_t v74 = *(void *)(v112 + 16);
              uint64_t v101 = *(void *)(v112 + 24);
              swift_retain();
              swift_retain();
              unint64_t v70 = (char *)__DataStorage._bytes.getter();
              if (v70)
              {
                uint64_t v75 = __DataStorage._offset.getter();
                if (__OFSUB__(v74, v75)) {
                  goto LABEL_161;
                }
                v70 += v74 - v75;
              }
              BOOL v41 = __OFSUB__(v101, v74);
              int64_t v72 = v101 - v74;
              if (v41) {
                goto LABEL_154;
              }
              uint64_t v73 = __DataStorage._length.getter();
              if (!v70) {
                goto LABEL_173;
              }
LABEL_95:
              if (v73 >= v72) {
                size_t v76 = v72;
              }
              else {
                size_t v76 = v73;
              }
              int v77 = memcmp(__s1, v70, v76);

              goto LABEL_112;
            default:
              __s1[0] = v35;
              LOWORD(__s1[1]) = v37;
              BYTE2(__s1[1]) = BYTE2(v37);
              BYTE3(__s1[1]) = BYTE3(v37);
              BYTE4(__s1[1]) = BYTE4(v37);
              BYTE5(__s1[1]) = BYTE5(v37);
              if (!v111)
              {
LABEL_83:
                LODWORD(__s2) = v112;
                BYTE4(__s2) = v99;
                *(_WORD *)((char *)&__s2 + 5) = *(_WORD *)((char *)&v112 + 5);
                HIBYTE(__s2) = HIBYTE(v112);
                __int16 v116 = a7;
                char v117 = BYTE2(a7);
                char v118 = BYTE3(a7);
                char v119 = BYTE4(a7);
                char v120 = BYTE5(a7);
                int v55 = memcmp(__s1, &__s2, __na);
                goto LABEL_117;
              }
              if (v111 == 1)
              {
                if (v98 < v103) {
                  goto LABEL_150;
                }
                sub_1000065D0(v112, a7);
                uint64_t v45 = __DataStorage._bytes.getter();
                if (!v45)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
                  JUMPOUT(0x1000170CCLL);
                }
                uint64_t v46 = v45;
                uint64_t v47 = __DataStorage._offset.getter();
                uint64_t v48 = v103 - v47;
                if (__OFSUB__(v103, v47)) {
                  goto LABEL_155;
                }
                goto LABEL_79;
              }
              uint64_t v69 = *(void *)(v112 + 16);
              uint64_t v100 = *(void *)(v112 + 24);
              swift_retain();
              swift_retain();
              unint64_t v70 = (char *)__DataStorage._bytes.getter();
              if (v70)
              {
                uint64_t v71 = __DataStorage._offset.getter();
                if (__OFSUB__(v69, v71)) {
                  goto LABEL_160;
                }
                v70 += v69 - v71;
              }
              BOOL v41 = __OFSUB__(v100, v69);
              int64_t v72 = v100 - v69;
              if (v41) {
                goto LABEL_153;
              }
              uint64_t v73 = __DataStorage._length.getter();
              if (!v70) {
                goto LABEL_172;
              }
              goto LABEL_95;
          }
LABEL_20:

          uint64_t v20 = v106;
          if (v107 == v21) {
            goto LABEL_133;
          }
          continue;
        }
LABEL_140:

        sub_100006628(v35, v37);
LABEL_141:
        swift_bridgeObjectRelease();
        return a6;
    }
  }
}

BOOL sub_1000170FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100017114()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001715C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100017188()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000171CC()
{
  if (*v0) {
    return 0x746E65644979656BLL;
  }
  else {
    return 0x727574616E676973;
  }
}

uint64_t sub_100017218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000202E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100017240()
{
  return 0;
}

void sub_10001724C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100017258(uint64_t a1)
{
  unint64_t v2 = sub_10002060C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100017294(uint64_t a1)
{
  unint64_t v2 = sub_10002060C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000172D0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100020404(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100017300()
{
  sub_100006628(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_100006520(v0 + 32);
  sub_100006520(v0 + 72);
  sub_100006520(v0 + 112);
  sub_100006520(v0 + 152);
  swift_release();

  sub_100006520(v0 + 208);
  swift_release();
  sub_100006520(v0 + 256);
  return v0;
}

uint64_t sub_100017368()
{
  sub_100017300();

  return swift_deallocClassInstance();
}

BOOL sub_10001739C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t default argument 0 of IteratorProtocol<>.nextInteger(tag:)()
{
  return 2;
}

uint64_t variable initialization expression of CADailyLogger.lockedState()
{
  sub_100003EB0(&qword_1001D94A0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1000173F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10015A354(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100017548(char *result, char *a2)
{
  int64_t v5 = a2 - result;
  if (result) {
    int64_t v6 = a2 - result;
  }
  else {
    int64_t v6 = 0;
  }
  uint64_t v7 = *(void **)v2;
  int64_t v8 = *(void *)(*(void *)v2 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v3 = a2;
  int64_t v4 = result;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || (int64_t v10 = v7[3] >> 1, v10 < v9))
  {
    if (v8 <= v9) {
      int64_t v11 = v8 + v6;
    }
    else {
      int64_t v11 = v8;
    }
    uint64_t result = (char *)sub_10015A690(result, v11, 1, v7);
    uint64_t v7 = result;
    int64_t v10 = *((void *)result + 3) >> 1;
  }
  uint64_t v12 = v7[2];
  int64_t v13 = v10 - v12;
  int64_t v14 = 0;
  if (v4 && v3 && v4 < v3 && v10 != v12)
  {
    if (v5 >= v13) {
      int64_t v14 = v10 - v12;
    }
    else {
      int64_t v14 = v5;
    }
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t result = (char *)memmove((char *)v7 + v12 + 32, v4, v14);
    v4 += v14;
  }
  if (v14 < v6) {
    goto LABEL_27;
  }
  if (v14)
  {
    uint64_t v15 = v7[2];
    BOOL v16 = __OFADD__(v15, v14);
    int64_t v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_33;
    }
    v7[2] = v17;
  }
  if (v14 != v13) {
    goto LABEL_25;
  }
LABEL_28:
  int64_t v17 = v7[2];
  if (!v4)
  {
LABEL_33:
    if (!v3) {
      goto LABEL_25;
    }
    int64_t v4 = 0;
    goto LABEL_35;
  }
  if (!v3 || v4 != v3)
  {
LABEL_35:
    char v20 = *v4;
    Swift::String v18 = v4 + 1;
    char v19 = v20;
    while (1)
    {
      while (1)
      {
        unint64_t v21 = v7[3];
        int64_t v22 = v21 >> 1;
        uint64_t v23 = v17 + 1;
        if ((uint64_t)(v21 >> 1) >= v17 + 1) {
          break;
        }
        uint64_t v26 = v7;
        int64_t v27 = v17;
        uint64_t result = (char *)sub_10015A690((void *)(v21 > 1), v17 + 1, 1, v26);
        int64_t v17 = v27;
        uint64_t v7 = result;
        int64_t v22 = *((void *)result + 3) >> 1;
        if (v17 < v22) {
          goto LABEL_39;
        }
LABEL_36:
        v7[2] = v17;
      }
      if (v17 >= v22) {
        goto LABEL_36;
      }
LABEL_39:
      *((unsigned char *)v7 + v17 + 32) = v19;
      if (v3 && v3 == v18)
      {
LABEL_49:
        v7[2] = v23;
        break;
      }
      uint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = (uint64_t)&v18[v24 + 1];
        char v19 = v18[v24];
        if (~v17 + v22 == v24) {
          break;
        }
        *((unsigned char *)v7 + v17 + v24++ + 33) = v19;
        if (v3 && (char *)v25 == v3)
        {
          uint64_t v23 = v17 + v24 + 1;
          goto LABEL_49;
        }
      }
      v18 += v24 + 1;
      int64_t v17 = v22;
      v7[2] = v22;
    }
  }
LABEL_25:
  *(void *)uint64_t v2 = v7;
  return result;
}

uint64_t sub_100017750(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10015A8E0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000178A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_10015AFD0(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for KernelTokenHostConfigurationMapping() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t variable initialization expression of Primer.lockedAttachCount()
{
  sub_100003EB0(&qword_1001D94A8);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

id variable initialization expression of GlobalState.condition()
{
  id v0 = objc_allocWithZone((Class)NSCondition);

  return [v0 init];
}

uint64_t variable initialization expression of PrimaryAccountWatcher.isSandboxAccount()
{
  return 0;
}

uint64_t variable initialization expression of PrimaryAccountWatcher.store()
{
  return 0;
}

uint64_t variable initialization expression of PrimaryAccountWatcher.changeHandler()
{
  return 0;
}

uint64_t type metadata accessor for CertificateManager()
{
  return self;
}

void type metadata accessor for DepotError(uint64_t a1)
{
}

void type metadata accessor for SecureChannelError(uint64_t a1)
{
}

void type metadata accessor for ConfigurationError(uint64_t a1)
{
}

void type metadata accessor for JSONError(uint64_t a1)
{
}

void type metadata accessor for ProviderError(uint64_t a1)
{
}

void type metadata accessor for PersistenceError(uint64_t a1)
{
}

void type metadata accessor for AttestationError(uint64_t a1)
{
}

void type metadata accessor for PINControllerError(uint64_t a1)
{
}

void type metadata accessor for ReadError(uint64_t a1)
{
}

void type metadata accessor for ORError(uint64_t a1)
{
}

void type metadata accessor for MonitorError(uint64_t a1)
{
}

void type metadata accessor for PINAppletProxyError(uint64_t a1)
{
}

void type metadata accessor for PrimerError(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_100017C0C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9978, type metadata accessor for ReadError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100017C78(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9978, type metadata accessor for ReadError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100017CE4(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100017D50(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D99A8, type metadata accessor for ORError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100017DBC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D99A8, type metadata accessor for ORError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100017E28(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

unsigned __int8 *sub_100017E94@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100017EA4(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void sub_100017EB8()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_100017EE4(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9940, type metadata accessor for PINControllerError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100017F50(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9940, type metadata accessor for PINControllerError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100017FBC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100018028(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9A10, type metadata accessor for PINAppletProxyError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100018094(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9A10, type metadata accessor for PINAppletProxyError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100018100(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001816C(uint64_t a1, uint64_t a2)
{
  return sub_10001DC98(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100018190(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9828, type metadata accessor for ConfigurationError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000181FC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9828, type metadata accessor for ConfigurationError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100018268(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000182D4(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9860, type metadata accessor for JSONError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100018340(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9860, type metadata accessor for JSONError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000183AC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100018420(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D97F0, type metadata accessor for SecureChannelError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001848C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D97F0, type metadata accessor for SecureChannelError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000184F8(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100018564(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9CF8, type metadata accessor for SPRHTTPError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000185D0(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9CF8, type metadata accessor for SPRHTTPError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001863C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000186A8(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100018720(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000187A0@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000187E4(uint64_t a1, uint64_t a2)
{
  return sub_10001DC98(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000187FC()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_100018848()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_1000188A0()
{
  return sub_10001DC34();
}

uint64_t sub_1000188B8(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D98D0, type metadata accessor for PersistenceError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100018924(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D98D0, type metadata accessor for PersistenceError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100018990(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000189FC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D97B8, type metadata accessor for DepotError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100018A68(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D97B8, type metadata accessor for DepotError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100018AD4(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100018B40(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D99D8, type metadata accessor for MonitorError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100018BAC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D99D8, type metadata accessor for MonitorError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100018C18(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

Swift::Int sub_100018C84()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100018CCC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100018D10()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100018D7C()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_100018DE8()
{
  sub_10001AF28((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100018E54(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100018EC0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100018F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100018FD0()
{
  sub_10001AF28((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_10001903C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000190A8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100019138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000191B4()
{
  sub_10001AF28((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100019220(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001928C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001931C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100019398()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000193A8()
{
  sub_10001AF28((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100019414(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019480(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100019510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001958C()
{
  sub_10001AF28(&qword_1001D9A78, type metadata accessor for PrimerError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_1000195F8(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9A78, type metadata accessor for PrimerError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019664(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D9A78, type metadata accessor for PrimerError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000196F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D9A78, type metadata accessor for PrimerError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100019770()
{
  sub_10001AF28((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_1000197DC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019848(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000198D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100019954()
{
  sub_10001AF28((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_1000199C0(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019A2C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100019ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100019B38()
{
  sub_10001AF28((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100019BA4(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019C10(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100019CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100019D1C()
{
  sub_10001AF28(&qword_1001D9938, type metadata accessor for AttestationError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100019D88(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9938, type metadata accessor for AttestationError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019DF4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D9938, type metadata accessor for AttestationError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100019E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D9938, type metadata accessor for AttestationError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100019F00()
{
  sub_10001AF28((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_100019F6C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100019FD8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001A068(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001A0E8()
{
  sub_10001AF28((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_10001A154(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001A1C0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001A250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001A2CC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10001A2DC()
{
  sub_10001AF28(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_10001A348(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001A3B4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001A444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001A4C0()
{
  sub_10001AF28((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_10001A52C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001A598(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001A628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001A6A4()
{
  sub_10001AF28(&qword_1001D98C8, type metadata accessor for ProviderError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_10001A710(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D98C8, type metadata accessor for ProviderError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10001A77C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D98C8, type metadata accessor for ProviderError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10001A80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10001AF28(&qword_1001D98C8, type metadata accessor for ProviderError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10001A88C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9D48, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_10001AF28(&qword_1001D9D50, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001A948()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10001A994()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10001A9EC()
{
  return sub_10001DC34();
}

uint64_t sub_10001AA04()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10001AA50()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10001AAA8()
{
  return sub_10001DC34();
}

uint64_t sub_10001AAC0()
{
  sub_10001AF28((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001AB44()
{
  sub_10001AF28((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001ABC8()
{
  sub_10001AF28((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001AC4C()
{
  sub_10001AF28((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001ACD0(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9A48, type metadata accessor for PrimerError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001AD3C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9A48, type metadata accessor for PrimerError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001ADA8(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9A78, type metadata accessor for PrimerError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001AE14()
{
  sub_10001AF28(&qword_1001D9A78, type metadata accessor for PrimerError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001AE98()
{
  return sub_10001AF28(&qword_1001D96D8, type metadata accessor for PrimerError);
}

uint64_t sub_10001AEE0()
{
  return sub_10001AF28(&qword_1001D96E0, type metadata accessor for PrimerError);
}

uint64_t sub_10001AF28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001AF70()
{
  sub_10001AF28((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001AFF4()
{
  return sub_10001AF28(&qword_1001D96E8, type metadata accessor for PINAppletProxyError);
}

uint64_t sub_10001B03C()
{
  return sub_10001AF28(&qword_1001D96F0, type metadata accessor for PINAppletProxyError);
}

uint64_t sub_10001B084()
{
  sub_10001AF28((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001B108()
{
  return sub_10001AF28(&qword_1001D96F8, type metadata accessor for MonitorError);
}

uint64_t sub_10001B150()
{
  return sub_10001AF28(&qword_1001D9700, type metadata accessor for MonitorError);
}

uint64_t sub_10001B198()
{
  return sub_10001AF28(&qword_1001D9708, type metadata accessor for ORError);
}

uint64_t sub_10001B1E0()
{
  return sub_10001AF28(&qword_1001D9710, type metadata accessor for ORError);
}

uint64_t sub_10001B228()
{
  return sub_10001AF28(&qword_1001D9718, type metadata accessor for ReadError);
}

uint64_t sub_10001B270()
{
  return sub_10001AF28(&qword_1001DD420, type metadata accessor for ReadError);
}

uint64_t sub_10001B2B8()
{
  sub_10001AF28((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001B33C()
{
  return sub_10001AF28(&qword_1001D9720, type metadata accessor for PINControllerError);
}

uint64_t sub_10001B384()
{
  return sub_10001AF28(&qword_1001D9728, type metadata accessor for PINControllerError);
}

uint64_t sub_10001B3CC(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9D38, type metadata accessor for Name);
  uint64_t v3 = sub_10001AF28(&qword_1001D9D40, type metadata accessor for Name);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001B488(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9908, type metadata accessor for AttestationError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001B4F4(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9908, type metadata accessor for AttestationError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001B560(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9938, type metadata accessor for AttestationError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001B5CC()
{
  sub_10001AF28(&qword_1001D9938, type metadata accessor for AttestationError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001B650()
{
  return sub_10001AF28(&qword_1001D9730, type metadata accessor for AttestationError);
}

uint64_t sub_10001B698()
{
  return sub_10001AF28(&qword_1001D9738, type metadata accessor for AttestationError);
}

uint64_t sub_10001B6E0()
{
  return sub_10001AF28(&qword_1001D9740, type metadata accessor for PersistenceError);
}

uint64_t sub_10001B728()
{
  return sub_10001AF28(&qword_1001D9748, type metadata accessor for PersistenceError);
}

uint64_t sub_10001B770()
{
  sub_10001AF28((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001B7F4(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9D68, type metadata accessor for SPRConfigurationStatusKey);
  uint64_t v3 = sub_10001AF28(&qword_1001D9D70, type metadata accessor for SPRConfigurationStatusKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001B8B0()
{
  sub_10001AF28((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001B934()
{
  sub_10001AF28(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001B9B8@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10001BA00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001BA2C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9D58, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_10001AF28(&qword_1001D9D60, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001BAE8()
{
  sub_10001AF28((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001BB6C(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9898, type metadata accessor for ProviderError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001BBD8(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D9898, type metadata accessor for ProviderError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001BC44(uint64_t a1)
{
  uint64_t v2 = sub_10001AF28(&qword_1001D98C8, type metadata accessor for ProviderError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001BCB0()
{
  sub_10001AF28(&qword_1001D98C8, type metadata accessor for ProviderError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10001BD34()
{
  return sub_10001AF28(&qword_1001D9750, type metadata accessor for ProviderError);
}

uint64_t sub_10001BD7C()
{
  return sub_10001AF28(&qword_1001D9758, type metadata accessor for ProviderError);
}

uint64_t sub_10001BDC4()
{
  return sub_10001AF28(&qword_1001D9760, type metadata accessor for JSONError);
}

uint64_t sub_10001BE0C()
{
  return sub_10001AF28(&qword_1001D9768, type metadata accessor for JSONError);
}

uint64_t sub_10001BE54()
{
  return sub_10001AF28(&qword_1001D9770, type metadata accessor for ConfigurationError);
}

uint64_t sub_10001BE9C()
{
  return sub_10001AF28(&qword_1001D9778, type metadata accessor for ConfigurationError);
}

uint64_t sub_10001BEE4()
{
  return sub_10001AF28(&qword_1001D9780, type metadata accessor for SecureChannelError);
}

uint64_t sub_10001BF2C()
{
  return sub_10001AF28(&qword_1001D9788, type metadata accessor for SecureChannelError);
}

uint64_t sub_10001BF74()
{
  return sub_10001AF28(&qword_1001D9790, type metadata accessor for DepotError);
}

uint64_t sub_10001BFBC()
{
  return sub_10001AF28(&qword_1001D9798, type metadata accessor for DepotError);
}

uint64_t sub_10001C004()
{
  return sub_10001AF28(&qword_1001D97B8, type metadata accessor for DepotError);
}

uint64_t sub_10001C04C()
{
  return sub_10001AF28(&qword_1001D97C0, type metadata accessor for DepotError);
}

uint64_t sub_10001C094()
{
  return sub_10001AF28(&qword_1001D97C8, type metadata accessor for DepotError);
}

uint64_t sub_10001C0DC()
{
  return sub_10001AF28(&qword_1001D97D0, _s3__C4CodeOMa_13);
}

void _s3__C4CodeOMa_13(uint64_t a1)
{
}

uint64_t sub_10001C138()
{
  return sub_10001AF28(&qword_1001D97D8, _s3__C4CodeOMa_13);
}

uint64_t sub_10001C180()
{
  return sub_10001AF28(&qword_1001D97E0, _s3__C4CodeOMa_13);
}

uint64_t sub_10001C1C8()
{
  return sub_10001AF28((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);
}

uint64_t sub_10001C210()
{
  return sub_10001AF28(&qword_1001D97F0, type metadata accessor for SecureChannelError);
}

uint64_t sub_10001C258()
{
  return sub_10001AF28(&qword_1001D97F8, type metadata accessor for SecureChannelError);
}

uint64_t sub_10001C2A0()
{
  return sub_10001AF28(&qword_1001D9800, type metadata accessor for SecureChannelError);
}

uint64_t sub_10001C2E8()
{
  return sub_10001AF28(&qword_1001D9808, _s3__C4CodeOMa_12);
}

void _s3__C4CodeOMa_12(uint64_t a1)
{
}

uint64_t sub_10001C344()
{
  return sub_10001AF28(&qword_1001D9810, _s3__C4CodeOMa_12);
}

uint64_t sub_10001C38C()
{
  return sub_10001AF28(&qword_1001D9818, _s3__C4CodeOMa_12);
}

uint64_t sub_10001C3D4()
{
  return sub_10001AF28((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);
}

uint64_t sub_10001C41C()
{
  return sub_10001AF28(&qword_1001D9828, type metadata accessor for ConfigurationError);
}

uint64_t sub_10001C464()
{
  return sub_10001AF28(&qword_1001D9830, type metadata accessor for ConfigurationError);
}

uint64_t sub_10001C4AC()
{
  return sub_10001AF28(&qword_1001D9838, type metadata accessor for ConfigurationError);
}

uint64_t sub_10001C4F4()
{
  return sub_10001AF28(&qword_1001D9840, _s3__C4CodeOMa_11);
}

void _s3__C4CodeOMa_11(uint64_t a1)
{
}

uint64_t sub_10001C550()
{
  return sub_10001AF28(&qword_1001D9848, _s3__C4CodeOMa_11);
}

uint64_t sub_10001C598()
{
  return sub_10001AF28(&qword_1001D9850, _s3__C4CodeOMa_11);
}

uint64_t sub_10001C5E0()
{
  return sub_10001AF28((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
}

uint64_t sub_10001C628()
{
  return sub_10001AF28(&qword_1001D9860, type metadata accessor for JSONError);
}

uint64_t sub_10001C670()
{
  return sub_10001AF28(&qword_1001D9868, type metadata accessor for JSONError);
}

uint64_t sub_10001C6B8()
{
  return sub_10001AF28(&qword_1001D9870, type metadata accessor for JSONError);
}

uint64_t sub_10001C700()
{
  return sub_10001AF28(&qword_1001D9878, _s3__C4CodeOMa_10);
}

void _s3__C4CodeOMa_10(uint64_t a1)
{
}

uint64_t sub_10001C75C()
{
  return sub_10001AF28(&qword_1001D9880, _s3__C4CodeOMa_10);
}

uint64_t sub_10001C7A4()
{
  return sub_10001AF28(&qword_1001D9888, _s3__C4CodeOMa_10);
}

uint64_t sub_10001C7EC()
{
  return sub_10001AF28((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);
}

uint64_t sub_10001C834()
{
  return sub_10001AF28(&qword_1001D9898, type metadata accessor for ProviderError);
}

uint64_t sub_10001C87C()
{
  return sub_10001AF28(&qword_1001D98A0, type metadata accessor for ProviderError);
}

uint64_t sub_10001C8C4()
{
  return sub_10001AF28(&qword_1001D98A8, type metadata accessor for ProviderError);
}

uint64_t sub_10001C90C()
{
  return sub_10001AF28(&qword_1001D98B0, _s3__C4CodeOMa_9);
}

void _s3__C4CodeOMa_9(uint64_t a1)
{
}

uint64_t sub_10001C968()
{
  return sub_10001AF28(&qword_1001D98B8, _s3__C4CodeOMa_9);
}

uint64_t sub_10001C9B0()
{
  return sub_10001AF28(&qword_1001D98C0, _s3__C4CodeOMa_9);
}

uint64_t sub_10001C9F8()
{
  return sub_10001AF28(&qword_1001D98C8, type metadata accessor for ProviderError);
}

uint64_t sub_10001CA40()
{
  return sub_10001AF28(&qword_1001D98D0, type metadata accessor for PersistenceError);
}

uint64_t sub_10001CA88()
{
  return sub_10001AF28(&qword_1001D98D8, type metadata accessor for PersistenceError);
}

uint64_t sub_10001CAD0()
{
  return sub_10001AF28(&qword_1001D98E0, type metadata accessor for PersistenceError);
}

uint64_t sub_10001CB18()
{
  return sub_10001AF28((unint64_t *)&qword_1001D98E8, _s3__C4CodeOMa_8);
}

void _s3__C4CodeOMa_8(uint64_t a1)
{
}

uint64_t sub_10001CB74()
{
  return sub_10001AF28(&qword_1001D98F0, _s3__C4CodeOMa_8);
}

uint64_t sub_10001CBBC()
{
  return sub_10001AF28(&qword_1001D98F8, _s3__C4CodeOMa_8);
}

uint64_t sub_10001CC04()
{
  return sub_10001AF28((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);
}

uint64_t sub_10001CC4C()
{
  return sub_10001AF28(&qword_1001D9908, type metadata accessor for AttestationError);
}

uint64_t sub_10001CC94()
{
  return sub_10001AF28(&qword_1001D9910, type metadata accessor for AttestationError);
}

uint64_t sub_10001CCDC()
{
  return sub_10001AF28(&qword_1001D9918, type metadata accessor for AttestationError);
}

uint64_t sub_10001CD24()
{
  return sub_10001AF28(&qword_1001D9920, _s3__C4CodeOMa_7);
}

void _s3__C4CodeOMa_7(uint64_t a1)
{
}

uint64_t sub_10001CD80()
{
  return sub_10001AF28(&qword_1001D9928, _s3__C4CodeOMa_7);
}

uint64_t sub_10001CDC8()
{
  return sub_10001AF28(&qword_1001D9930, _s3__C4CodeOMa_7);
}

uint64_t sub_10001CE10()
{
  return sub_10001AF28(&qword_1001D9938, type metadata accessor for AttestationError);
}

uint64_t sub_10001CE58()
{
  return sub_10001AF28(&qword_1001D9940, type metadata accessor for PINControllerError);
}

uint64_t sub_10001CEA0()
{
  return sub_10001AF28(&qword_1001D9948, type metadata accessor for PINControllerError);
}

uint64_t sub_10001CEE8()
{
  return sub_10001AF28(&qword_1001D9950, type metadata accessor for PINControllerError);
}

uint64_t sub_10001CF30()
{
  return sub_10001AF28(&qword_1001D9958, _s3__C4CodeOMa_6);
}

void _s3__C4CodeOMa_6(uint64_t a1)
{
}

uint64_t sub_10001CF8C()
{
  return sub_10001AF28(&qword_1001D9960, _s3__C4CodeOMa_6);
}

uint64_t sub_10001CFD4()
{
  return sub_10001AF28(&qword_1001D9968, _s3__C4CodeOMa_6);
}

uint64_t sub_10001D01C()
{
  return sub_10001AF28((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
}

uint64_t sub_10001D064()
{
  return sub_10001AF28(&qword_1001D9978, type metadata accessor for ReadError);
}

uint64_t sub_10001D0AC()
{
  return sub_10001AF28(&qword_1001D9980, type metadata accessor for ReadError);
}

uint64_t sub_10001D0F4()
{
  return sub_10001AF28(&qword_1001D9988, type metadata accessor for ReadError);
}

uint64_t sub_10001D13C()
{
  return sub_10001AF28(&qword_1001D9990, _s3__C4CodeOMa_5);
}

void _s3__C4CodeOMa_5(uint64_t a1)
{
}

uint64_t sub_10001D198()
{
  return sub_10001AF28(&qword_1001D9998, _s3__C4CodeOMa_5);
}

uint64_t sub_10001D1E0()
{
  return sub_10001AF28(&qword_1001D99A0, _s3__C4CodeOMa_5);
}

uint64_t sub_10001D228()
{
  return sub_10001AF28((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
}

uint64_t sub_10001D270()
{
  return sub_10001AF28(&qword_1001D99A8, type metadata accessor for ORError);
}

uint64_t sub_10001D2B8()
{
  return sub_10001AF28(&qword_1001D99B0, type metadata accessor for ORError);
}

uint64_t sub_10001D300()
{
  return sub_10001AF28(&qword_1001D99B8, type metadata accessor for ORError);
}

uint64_t sub_10001D348()
{
  return sub_10001AF28(&qword_1001D99C0, _s3__C4CodeOMa_4);
}

void _s3__C4CodeOMa_4(uint64_t a1)
{
}

uint64_t sub_10001D3A4()
{
  return sub_10001AF28(&qword_1001D99C8, _s3__C4CodeOMa_4);
}

uint64_t sub_10001D3EC()
{
  return sub_10001AF28(&qword_1001D99D0, _s3__C4CodeOMa_4);
}

uint64_t sub_10001D434()
{
  return sub_10001AF28((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);
}

uint64_t sub_10001D47C()
{
  return sub_10001AF28(&qword_1001D99D8, type metadata accessor for MonitorError);
}

uint64_t sub_10001D4C4()
{
  return sub_10001AF28(&qword_1001D99E0, type metadata accessor for MonitorError);
}

uint64_t sub_10001D50C()
{
  return sub_10001AF28(&qword_1001D99E8, type metadata accessor for MonitorError);
}

uint64_t sub_10001D554()
{
  return sub_10001AF28(&qword_1001D99F0, _s3__C4CodeOMa_3);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
}

uint64_t sub_10001D5B0()
{
  return sub_10001AF28(&qword_1001D99F8, _s3__C4CodeOMa_3);
}

uint64_t sub_10001D5F8()
{
  return sub_10001AF28(&qword_1001D9A00, _s3__C4CodeOMa_3);
}

uint64_t sub_10001D640()
{
  return sub_10001AF28((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);
}

uint64_t sub_10001D688()
{
  return sub_10001AF28(&qword_1001D9A10, type metadata accessor for PINAppletProxyError);
}

uint64_t sub_10001D6D0()
{
  return sub_10001AF28(&qword_1001D9A18, type metadata accessor for PINAppletProxyError);
}

uint64_t sub_10001D718()
{
  return sub_10001AF28(&qword_1001D9A20, type metadata accessor for PINAppletProxyError);
}

uint64_t sub_10001D760()
{
  return sub_10001AF28(&qword_1001D9A28, _s3__C4CodeOMa_2);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
}

uint64_t sub_10001D7BC()
{
  return sub_10001AF28(&qword_1001D9A30, _s3__C4CodeOMa_2);
}

uint64_t sub_10001D804()
{
  return sub_10001AF28(&qword_1001D9A38, _s3__C4CodeOMa_2);
}

uint64_t sub_10001D84C()
{
  return sub_10001AF28((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);
}

uint64_t sub_10001D894()
{
  return sub_10001AF28(&qword_1001D9A48, type metadata accessor for PrimerError);
}

uint64_t sub_10001D8DC()
{
  return sub_10001AF28(&qword_1001D9A50, type metadata accessor for PrimerError);
}

uint64_t sub_10001D924()
{
  return sub_10001AF28(&qword_1001D9A58, type metadata accessor for PrimerError);
}

uint64_t sub_10001D96C()
{
  return sub_10001AF28(&qword_1001D9A60, _s3__C4CodeOMa_1);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

uint64_t sub_10001D9C8()
{
  return sub_10001AF28(&qword_1001D9A68, _s3__C4CodeOMa_1);
}

uint64_t sub_10001DA10()
{
  return sub_10001AF28(&qword_1001D9A70, _s3__C4CodeOMa_1);
}

uint64_t sub_10001DA58()
{
  return sub_10001AF28(&qword_1001D9A78, type metadata accessor for PrimerError);
}

uint64_t sub_10001DAA0()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_10001DB0C()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_10001DB78()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10001DBC4()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10001DC1C()
{
  return sub_10001DC34();
}

Swift::Int sub_10001DC34()
{
  return Hasher._finalize()();
}

uint64_t sub_10001DC98(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10001DCDC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001DD30()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001DDA4()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10001DE30(long long *a1, long long *a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, long long *a7, uint64_t a8, void *a9)
{
  int64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v13, v14);
  uint64_t v15 = type metadata accessor for String.Encoding();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DefaultSecureTimeKeeper();
  unint64_t v33 = &off_1001C84C8;
  *(void *)&long long v31 = a4;
  static String.Encoding.utf8.getter();
  uint64_t v20 = String.data(using:allowLossyConversion:)();
  unint64_t v22 = v21;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v22 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    a9[2] = v20;
    a9[3] = v22;
    aBlock[4] = BitString.init(data:unusedBits:);
    void aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    aBlock[3] = &unk_1001C63E8;
    _Block_copy(aBlock);
    uint64_t v29 = _swiftEmptyArrayStorage;
    sub_10001AF28((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100003EB0((uint64_t *)&unk_1001DA510);
    sub_100006814((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    a9[24] = DispatchWorkItem.init(flags:block:)();
    sub_10001F1F0(a1, (uint64_t)(a9 + 4));
    sub_10001F1F0(a2, (uint64_t)(a9 + 14));
    sub_10001F1F0(a3, (uint64_t)(a9 + 19));
    sub_10001F1F0(&v31, (uint64_t)(a9 + 9));
    sub_10001F1F0(v25, (uint64_t)(a9 + 26));
    uint64_t v24 = v27;
    a9[31] = v26;
    sub_10001F1F0(v24, (uint64_t)(a9 + 32));
    a9[25] = v28;
    return (uint64_t)a9;
  }
  return result;
}

uint64_t sub_10001E134(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = a6;
  uint64_t v41 = a5;
  uint64_t v52 = a4;
  uint64_t v44 = a3;
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v39, v9);
  uint64_t v40 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v38 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  size_t v42 = a1;
  uint64_t v19 = sub_100006788(a1, v17);
  uint64_t v20 = v17;
  uint64_t v21 = (uint64_t)v19;
  sub_100021C74(v20, v18);
  if (v6)
  {
    swift_release();
  }
  else
  {
    sub_100006788(a2, a2[3]);
    sub_10003969C((uint64_t)v50);
    sub_100006788(a2, a2[3]);
    sub_100039948((uint64_t)v49);
    sub_100009300(v44, (uint64_t)v48);
    uint64_t v37 = 0;
    uint64_t v22 = v52[3];
    uint64_t v23 = v52[4];
    sub_100006788(v52, v22);
    sub_100134448(1, v22, v23);
    sub_100009300(v43, (uint64_t)v46);
    sub_10001F160();
    static DispatchQoS.background.getter();
    (*(void (**)(char *, void, uint64_t))(v38 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
    v45[0] = _swiftEmptyArrayStorage;
    sub_10001AF28((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_100003EB0((uint64_t *)&unk_1001DD350);
    sub_100006814((unint64_t *)&qword_1001DA500, (uint64_t *)&unk_1001DD350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v25 = sub_10001F1A0((uint64_t)v48, v48[3]);
    __chkstk_darwin(v25, v25);
    int64_t v27 = (uint64_t *)((char *)&v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v28 + 16))(v27);
    uint64_t v29 = *v27;
    uint64_t v30 = type metadata accessor for DefaultSecureTimeKeeper();
    v45[3] = v30;
    v45[4] = &off_1001C84C8;
    v45[0] = v29;
    type metadata accessor for CertificateManager();
    long long v31 = (void *)swift_allocObject();
    uint64_t v32 = sub_10001F1A0((uint64_t)v45, v30);
    __chkstk_darwin(v32, v32);
    unint64_t v34 = (uint64_t *)((char *)&v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v35 + 16))(v34);
    uint64_t v21 = sub_10001DE30(v51, v50, v49, *v34, &v47, v41, v46, v24, v31);
    sub_100006520((uint64_t)v45);
    sub_100006520((uint64_t)v48);
  }
  sub_100006520(v43);
  sub_100006520(v44);
  sub_100006520((uint64_t)v52);
  sub_100006520((uint64_t)a2);
  sub_100006520((uint64_t)v42);
  return v21;
}

uint64_t sub_10001E668()
{
  sub_1000F7B54((uint64_t)v8);
  if (v0)
  {
    swift_release();
  }
  else
  {
    sub_1000F8098((uint64_t)v7);
    sub_1000F85DC((uint64_t)v6);
    sub_1000F8B20((uint64_t)v5);
    uint64_t v2 = sub_1000F9064();
    sub_1000F9580((uint64_t)v4);
    uint64_t v1 = sub_10001E134(v8, v7, (uint64_t)v6, v5, v2, (uint64_t)v4);
    swift_release();
  }
  return v1;
}

uint64_t sub_10001E7B4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v8 = a5;
    unint64_t v9 = a4;
    unint64_t v11 = 0;
    uint64_t v12 = _swiftEmptyArrayStorage;
    while (v11 < *(void *)(v6 + 16))
    {
      unint64_t v13 = *(void *)(v6 + 8 * v11 + 32);
      unint64_t v20 = v13;
      swift_bridgeObjectRetain();
      char v14 = sub_100010AF8(&v20, a2, a3, v9, v8);
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v14)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v21 = v12;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_10014B9E4(0, v12[2] + 1, 1);
          uint64_t v12 = v21;
        }
        unint64_t v16 = v12[2];
        unint64_t v15 = v12[3];
        if (v16 >= v15 >> 1)
        {
          uint64_t result = sub_10014B9E4(v15 > 1, v16 + 1, 1);
          uint64_t v12 = v21;
        }
        v12[2] = v16 + 1;
        v12[v16 + 4] = v13;
        unint64_t v9 = a4;
        uint64_t v8 = a5;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
      }
      if (v7 == ++v11) {
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  return result;
}

uint64_t sub_10001E92C()
{
  uint64_t v1 = v0;
  uint64_t v2 = Data.init(base64Encoded:options:)();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (v4 >> 60 != 15)
  {
    type metadata accessor for JSONDecoder();
    sub_10001EE54();
    default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
    if (v0)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      if (qword_1001D8F48 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100003E78(v9, (uint64_t)qword_1001D8F50);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      uint64_t v1 = v11;
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v1, "ValidationToken.init: Input not decodable to JSON", v12, 2u);
        swift_slowDealloc();
      }

      unint64_t v13 = (void *)0x8000000100193BB0;
      uint64_t v14 = 0xD00000000000001BLL;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v15 = Data.init(hexString:)();
      if (v16 >> 60 != 15)
      {
        uint64_t v1 = v15;
        unint64_t v22 = v16;
        swift_bridgeObjectRetain();
        Data.init(hexString:)();
        unint64_t v24 = v23;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v24 >> 60 == 15)
        {
          if (qword_1001D8F48 != -1) {
            swift_once();
          }
          uint64_t v25 = type metadata accessor for Logger();
          sub_100003E78(v25, (uint64_t)qword_1001D8F50);
          uint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v28 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v28 = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "ValidationToken.init: keyIdentifier not decodable from hexString", v28, 2u);
            swift_slowDealloc();
          }

          sub_10002A180(10005, 0xD00000000000002ALL, (void *)0x8000000100193C00, 0);
          swift_willThrow();
          sub_10000BF70(v1, v22);
        }
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1001D8F48 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100003E78(v17, (uint64_t)qword_1001D8F50);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      uint64_t v1 = v19;
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v1, "ValidationToken.init: signature not decodable from hexString", v20, 2u);
        swift_slowDealloc();
      }

      uint64_t v14 = 0xD000000000000026;
      unint64_t v13 = (void *)0x8000000100193BD0;
    }
    sub_10002A180(10005, v14, v13, 0);
    swift_willThrow();
LABEL_20:
    sub_10000BF70(v2, v4);
    return v1;
  }
  if (qword_1001D8F48 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001D8F50);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "ValidationToken.init: Input not decodable from Base64", v8, 2u);
    swift_slowDealloc();
  }

  sub_10002A180(10005, 0xD00000000000001FLL, (void *)0x8000000100193B90, 0);
  swift_willThrow();
  return v1;
}

unint64_t sub_10001EE54()
{
  unint64_t result = qword_1001D9AE0;
  if (!qword_1001D9AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9AE0);
  }
  return result;
}

uint64_t sub_10001EEA8(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001D9AE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001EF08()
{
  unint64_t result = qword_1001D9AF8;
  if (!qword_1001D9AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9AF8);
  }
  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

uint64_t sub_10001EF84(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4((uint64_t *)&unk_1001DA570);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001EFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001D9B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001F050(uint64_t a1)
{
  return sub_1000A6B64(a1, *(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_10001F06C(uint64_t *a1)
{
  return sub_1000A6B48(a1, *(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_10001F088(uint64_t *a1)
{
  return sub_10006D318(a1, *(void *)(v1 + 16));
}

uint64_t sub_10001F0A4(uint64_t *a1)
{
  return sub_10006EA50(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_10001F0C4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001F0FC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001F134()
{
  return sub_10001270C(*(double *)(v0 + 24));
}

uint64_t sub_10001F140(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001F150()
{
  return swift_release();
}

uint64_t sub_10001F158()
{
  return sub_100010190();
}

unint64_t sub_10001F160()
{
  unint64_t result = qword_1001DD340;
  if (!qword_1001DD340)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001DD340);
  }
  return result;
}

uint64_t sub_10001F1A0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10001F1F0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for SecPolicy(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

unsigned char *initializeBufferWithCopyOfBuffer for CertificateManagerError(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CertificateManagerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CertificateManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001F39CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_10001F3C4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10001F3CC(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CertificateManagerError()
{
  return &type metadata for CertificateManagerError;
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for SPRConfigurationStatusKey(uint64_t a1)
{
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void type metadata accessor for SPRHTTPError(uint64_t a1)
{
}

__n128 sub_10001F448(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_10001F45C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10001F47C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for Decimal(uint64_t a1)
{
}

void type metadata accessor for SPRTransactionOutcomeStatus(uint64_t a1)
{
}

void type metadata accessor for SPRTransactionMessage(uint64_t a1)
{
}

void type metadata accessor for SPRTransactionCVMType(uint64_t a1)
{
}

void type metadata accessor for SPRCardExpirationState(uint64_t a1)
{
}

void type metadata accessor for SPRCardEffectiveState(uint64_t a1)
{
}

void type metadata accessor for SPRPayAppletStatus(uint64_t a1)
{
}

void type metadata accessor for SPRReaderMode(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for CertificateManager.RawValidationToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for CertificateManager.RawValidationToken()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CertificateManager.RawValidationToken(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CertificateManager.RawValidationToken(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CertificateManager.RawValidationToken(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for CertificateManager.RawValidationToken(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CertificateManager.RawValidationToken(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CertificateManager.RawValidationToken(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CertificateManager.RawValidationToken()
{
  return &type metadata for CertificateManager.RawValidationToken;
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
}

uint64_t sub_10001F790()
{
  return sub_10001AF28(&qword_1001D97E0, _s3__C4CodeOMa_13);
}

uint64_t sub_10001F7D8()
{
  return sub_10001AF28(&qword_1001D9818, _s3__C4CodeOMa_12);
}

uint64_t sub_10001F820()
{
  return sub_10001AF28(&qword_1001D9850, _s3__C4CodeOMa_11);
}

uint64_t sub_10001F868()
{
  return sub_10001AF28(&qword_1001D9888, _s3__C4CodeOMa_10);
}

uint64_t sub_10001F8B0()
{
  return sub_10001AF28(&qword_1001D87E0, type metadata accessor for Code);
}

uint64_t sub_10001F8F8()
{
  return sub_10001AF28(&qword_1001D98C0, _s3__C4CodeOMa_9);
}

uint64_t sub_10001F940()
{
  return sub_10001AF28(&qword_1001D98F8, _s3__C4CodeOMa_8);
}

uint64_t sub_10001F988()
{
  return sub_10001AF28(&qword_1001D9930, _s3__C4CodeOMa_7);
}

uint64_t sub_10001F9D0()
{
  return sub_10001AF28(&qword_1001D9968, _s3__C4CodeOMa_6);
}

uint64_t sub_10001FA18()
{
  return sub_10001AF28(&qword_1001D99A0, _s3__C4CodeOMa_5);
}

uint64_t sub_10001FA60()
{
  return sub_10001AF28(&qword_1001D99D0, _s3__C4CodeOMa_4);
}

uint64_t sub_10001FAA8()
{
  return sub_10001AF28(&qword_1001D9A00, _s3__C4CodeOMa_3);
}

uint64_t sub_10001FAF0()
{
  return sub_10001AF28(&qword_1001D9C48, type metadata accessor for SecCertificate);
}

uint64_t sub_10001FB38()
{
  return sub_10001AF28(&qword_1001D9C50, type metadata accessor for SecCertificate);
}

uint64_t sub_10001FB80()
{
  return sub_10001AF28(&qword_1001D9C58, type metadata accessor for SecKey);
}

uint64_t sub_10001FBC8()
{
  return sub_10001AF28(&qword_1001D9C60, type metadata accessor for SPRHTTPError);
}

uint64_t sub_10001FC10()
{
  return sub_10001AF28(&qword_1001D9C68, type metadata accessor for SPRHTTPError);
}

uint64_t sub_10001FC58()
{
  return sub_10001AF28(&qword_1001D9C70, type metadata accessor for SPRConfigurationStatusKey);
}

uint64_t sub_10001FCA0()
{
  return sub_10001AF28(&qword_1001D9C78, type metadata accessor for SPRConfigurationStatusKey);
}

uint64_t sub_10001FCE8()
{
  return sub_10001AF28(&qword_1001D9C80, type metadata accessor for SPRConfigurationStatusKey);
}

uint64_t sub_10001FD30()
{
  return sub_10001AF28(&qword_1001D9C88, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10001FD78()
{
  return sub_10001AF28(&qword_1001D9C90, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10001FDC0()
{
  return sub_10001AF28(&qword_1001D9C98, type metadata accessor for FileProtectionType);
}

uint64_t sub_10001FE08()
{
  return sub_10001AF28(&qword_1001D9CA0, type metadata accessor for FileProtectionType);
}

uint64_t sub_10001FE50()
{
  return sub_10001AF28(&qword_1001D9CA8, type metadata accessor for FileProtectionType);
}

unint64_t sub_10001FE9C()
{
  unint64_t result = qword_1001D9CB0;
  if (!qword_1001D9CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9CB0);
  }
  return result;
}

uint64_t sub_10001FEF0()
{
  return sub_10001AF28(&qword_1001D9CB8, type metadata accessor for CFString);
}

uint64_t sub_10001FF38()
{
  return sub_10001AF28(&qword_1001D9CC0, type metadata accessor for CFString);
}

uint64_t sub_10001FF80()
{
  return sub_10001AF28(&qword_1001D9CC8, type metadata accessor for Name);
}

uint64_t sub_10001FFC8()
{
  return sub_10001AF28(&qword_1001D9CD0, type metadata accessor for Name);
}

uint64_t sub_100020010()
{
  return sub_10001AF28(&qword_1001D9CD8, type metadata accessor for Name);
}

uint64_t sub_100020058()
{
  return sub_10001AF28(&qword_1001D9CE0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1000200A0()
{
  return sub_10001AF28(&qword_1001D9CE8, _s3__C4CodeOMa_0);
}

uint64_t sub_1000200E8()
{
  return sub_10001AF28(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);
}

uint64_t sub_100020130()
{
  return sub_10001AF28(&qword_1001D9CF8, type metadata accessor for SPRHTTPError);
}

uint64_t sub_100020178()
{
  return sub_10001AF28(&qword_1001D9D00, type metadata accessor for SPRHTTPError);
}

uint64_t sub_1000201C0()
{
  return sub_10001AF28(&qword_1001D9D08, type metadata accessor for SPRHTTPError);
}

uint64_t sub_100020208()
{
  return sub_10001AF28(&qword_1001D9D10, _s3__C4CodeOMa_0);
}

uint64_t sub_100020250()
{
  return sub_10001AF28(&qword_1001D9D18, _s3__C4CodeOMa_0);
}

uint64_t sub_100020298()
{
  return sub_10001AF28(&qword_1001D9D20, type metadata accessor for SecKey);
}

uint64_t sub_1000202E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x727574616E676973 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65644979656BLL && a2 == 0xED00007265696669)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100020404(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001D9D28);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  BOOL v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[4];
  sub_100006788(a1, a1[3]);
  sub_10002060C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100006520((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    char v11 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRetain();
    sub_100006520((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_10002060C()
{
  unint64_t result = qword_1001D9D30;
  if (!qword_1001D9D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9D30);
  }
  return result;
}

void type metadata accessor for CFData(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CertificateManager.RawValidationToken.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CertificateManager.RawValidationToken.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000207D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000207F8(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CertificateManager.RawValidationToken.CodingKeys()
{
  return &type metadata for CertificateManager.RawValidationToken.CodingKeys;
}

unint64_t sub_100020818()
{
  unint64_t result = qword_1001D9D80;
  if (!qword_1001D9D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9D80);
  }
  return result;
}

uint64_t sub_10002086C()
{
  return sub_10001AF28(&qword_1001D9D88, type metadata accessor for CFData);
}

uint64_t sub_1000208B4()
{
  return sub_10001AF28(&qword_1001D9D90, type metadata accessor for CFData);
}

unint64_t sub_100020900()
{
  unint64_t result = qword_1001D9D98;
  if (!qword_1001D9D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9D98);
  }
  return result;
}

unint64_t sub_100020958()
{
  unint64_t result = qword_1001D9DA0;
  if (!qword_1001D9DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9DA0);
  }
  return result;
}

void *sub_1000209E8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = sub_100081380(v1);
    int v6 = v5;
    uint64_t v7 = v1 + 64;
    unint64_t result = (void *)type metadata accessor for TLV();
    uint64_t v8 = 0;
    uint64_t v20 = v1 + 80;
    uint64_t v23 = v1;
    int v21 = v6;
    uint64_t v22 = v1 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(v1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if ((*(void *)(v7 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v24 = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v25 = *(void *)TLVTag.asn1Sequence.unsafeMutableAddressor();
      sub_100003EB0((uint64_t *)&unk_1001DA5A0);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_100189A10;
      char v12 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
      uint64_t v13 = *v12;
      swift_bridgeObjectRetain();
      *(void *)(v11 + 32) = TLV.__allocating_init(tag:string:)(v13);
      uint64_t v14 = *v12;
      swift_bridgeObjectRetain();
      *(void *)(v11 + 40) = TLV.__allocating_init(tag:string:)(v14);
      specialized Array._endMutation()();
      TLV.__allocating_init(tag:children:)(v25, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v1 = v23;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v9 = 1 << *(unsigned char *)(v23 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v7 = v22;
      uint64_t v15 = *(void *)(v22 + 8 * v10);
      if ((v15 & (1 << v4)) == 0) {
        goto LABEL_25;
      }
      int v6 = v21;
      if (*(_DWORD *)(v23 + 36) != v21) {
        goto LABEL_26;
      }
      unint64_t v16 = v15 & (-2 << (v4 & 0x3F));
      if (v16)
      {
        int64_t v9 = __clz(__rbit64(v16)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v17 = v10 + 1;
        unint64_t v18 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v18)
        {
          unint64_t v19 = *(void *)(v22 + 8 * v17);
          if (v19)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v19)) + (v17 << 6);
          }
          else
          {
            while (v18 - 2 != v10)
            {
              unint64_t v19 = *(void *)(v20 + 8 * v10++);
              if (v19)
              {
                unint64_t v17 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v8 = v24 + 1;
      uint64_t v4 = v9;
      if (v24 + 1 == v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_100020CBC(unsigned int a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_1000209E8(a3);
  type metadata accessor for TLV();
  uint64_t v15 = *(void *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  sub_100003EB0((uint64_t *)&unk_1001DA5A0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100189A20;
  v16[0] = a1;
  unint64_t v9 = sub_100006AD0();
  sub_100021C20();
  uint64_t v10 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(void *)(v8 + 32) = TLV.__allocating_init<A>(tag:integer:)(v10, (char *)v16, &type metadata for Int, v9);
  v16[0] = 0;
  uint64_t v11 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(void *)(v8 + 40) = TLV.__allocating_init<A>(tag:integer:)(v11, (char *)v16, &type metadata for Int, v9);
  char v12 = (uint64_t *)TLVTag.asn1OctetString.unsafeMutableAddressor();
  *(void *)(v8 + 48) = TLV.__allocating_init(tag:uint64:)(*v12, a2);
  uint64_t v13 = (uint64_t *)TLVTag.asn1Set.unsafeMutableAddressor();
  *(void *)(v8 + 56) = TLV.__allocating_init(tag:children:)(*v13, (uint64_t)v7);
  v16[0] = v8;
  specialized Array._endMutation()();
  TLV.__allocating_init(tag:children:)(v15, v16[0]);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v4 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v4 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return swift_release();
}

void *sub_100020E94()
{
  uint64_t v1 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 16);
  if (!(v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    return 0;
  }
LABEL_3:
  type metadata accessor for TLV();
  uint64_t v3 = *(void *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain();
  int v5 = TLV.__allocating_init(tag:children:)(v3, v4);
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_100020FA8()
{
  uint64_t v1 = (void *)(v0 + 16);
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 16);
  long long v28 = xmmword_100189A30;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    uint64_t v29 = 0;
    unint64_t v10 = 0xC000000000000000;
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v3) {
    goto LABEL_11;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v2 + 8 * v5 + 32);
      swift_retain();
    }
    ++v5;
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 168))();
    unint64_t v9 = v8;
    Data.append(_:)();
    sub_100006628(v7, v9);
    swift_release();
  }
  while (v3 != v5);
  swift_bridgeObjectRelease_n();
  unint64_t v10 = *((void *)&v28 + 1);
  uint64_t v29 = v28;
LABEL_12:
  unint64_t v27 = v10;
  sub_100003EB0((uint64_t *)&unk_1001DA5A0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100189A10;
  type metadata accessor for TLV();
  char v12 = (uint64_t *)TLVTag.asn1Sequence.unsafeMutableAddressor();
  uint64_t v13 = *v12;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100189A10;
  uint64_t v15 = (uint64_t *)TLVTag.asn1IA5String.unsafeMutableAddressor();
  *(void *)(v14 + 32) = TLV.__allocating_init(tag:string:)(*v15);
  *(void *)(v14 + 40) = TLV.__allocating_init(tag:string:)(*v15);
  *(void *)&long long v28 = v14;
  specialized Array._endMutation()();
  *(void *)(v11 + 32) = TLV.__allocating_init(tag:children:)(v13, v14);
  uint64_t v16 = *v12;
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100189A10;
  *(void *)(v17 + 32) = TLV.__allocating_init(tag:string:)(*v15);
  uint64_t v18 = *v15;
  Data.base64EncodedString(options:)(0);
  *(void *)(v17 + 40) = TLV.__allocating_init(tag:string:)(v18);
  specialized Array._endMutation()();
  *(void *)(v11 + 40) = TLV.__allocating_init(tag:children:)(v16, v17);
  *(void *)&long long v28 = v11;
  specialized Array._endMutation()();
  uint64_t v19 = v11;
  uint64_t v20 = *v12;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100189A20;
  *(void *)&long long v28 = 4064001;
  unint64_t v22 = sub_100006AD0();
  sub_100021C20();
  uint64_t v23 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(void *)(v21 + 32) = TLV.__allocating_init<A>(tag:integer:)(v23, (char *)&v28, &type metadata for Int, v22);
  *(void *)&long long v28 = 0;
  uint64_t v24 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
  *(void *)(v21 + 40) = TLV.__allocating_init<A>(tag:integer:)(v24, (char *)&v28, &type metadata for Int, v22);
  uint64_t v25 = (uint64_t *)TLVTag.asn1OctetString.unsafeMutableAddressor();
  *(void *)(v21 + 48) = TLV.__allocating_init(tag:uint64:)(*v25, 0);
  uint64_t v26 = (uint64_t *)TLVTag.asn1Set.unsafeMutableAddressor();
  *(void *)(v21 + 56) = TLV.__allocating_init(tag:children:)(*v26, v19);
  *(void *)&long long v28 = v21;
  specialized Array._endMutation()();
  TLV.__allocating_init(tag:children:)(v20, v28);
  void *v1 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_release();
  return sub_100006628(v29, v27);
}

uint64_t sub_10002141C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MPOCVolatileMonitorLogger()
{
  return self;
}

uint64_t sub_100021478(unsigned int a1, unint64_t a2, uint64_t a3)
{
  return sub_100020CBC(a1, a2, a3);
}

void *sub_10002149C()
{
  return sub_100020E94();
}

uint64_t sub_1000214C0(uint64_t a1, uint64_t a2)
{
  return sub_100021870(a2);
}

uint64_t sub_1000214E8()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  *(void *)(v1 + 16) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100021540()
{
  return sub_100020FA8();
}

uint64_t sub_100021564(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  uint64_t v13 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for TLV();
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_100021870(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + 16);
  uint64_t result = swift_beginAccess();
  if (!a1) {
    return swift_endAccess();
  }
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5 < 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*v3 >> 62) {
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5 < 0)
  {
LABEL_6:
    sub_100021564(0, a1);
    return swift_endAccess();
  }
LABEL_5:
  if (v5 >= a1) {
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002193C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_10015A8E0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100021AA8(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_10015AEAC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (void *)&v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100021C20()
{
  unint64_t result = qword_1001D9EA0;
  if (!qword_1001D9EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9EA0);
  }
  return result;
}

uint64_t sub_100021C74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(1, a1);
}

const char *SPRFeatures.domain.getter()
{
  return "SoftPOSReader";
}

const char *SPRFeatures.feature.getter(char a1)
{
  if (a1) {
    return "ManualSendMonitoringLogs";
  }
  else {
    return "ManualPostCADaily";
  }
}

BOOL static SPRFeatures.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SPRFeatures.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int SPRFeatures.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

unint64_t sub_100021D6C()
{
  unint64_t result = qword_1001D9EA8;
  if (!qword_1001D9EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9EA8);
  }
  return result;
}

const char *sub_100021DC0()
{
  if (*v0) {
    return "ManualSendMonitoringLogs";
  }
  else {
    return "ManualPostCADaily";
  }
}

unsigned char *storeEnumTagSinglePayload for SPRFeatures(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100021EBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SPRFeatures()
{
  return &type metadata for SPRFeatures;
}

uint64_t sub_100021EF4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001D9EB0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001D9EB0);
  if (qword_1001D9238 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FC8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

NSObject *sub_100021FBC(uint64_t a1, NSObject *a2, void *a3)
{
  if (!a2[2].isa
    || (int v3 = a2, v6 = sub_10000C4B0(0xD00000000000001CLL, 0x8000000100193D90), (v7 & 1) == 0)
    || (sub_100006570((uint64_t)a2[7].isa + 32 * v6, (uint64_t)&v161), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002A544(4012, 0xD000000000000020, (void *)0x8000000100193DB0, 0);
    swift_willThrow();

    return v3;
  }
  int v3 = *((void *)&v164[0] + 1);
  uint64_t v8 = *(void *)&v164[0];
  if (!a2[2].isa
    || (v157 = *((void *)&v164[0] + 1), unint64_t v9 = sub_10000C4B0(0xD000000000000010, 0x8000000100193DE0), (v10 & 1) == 0)
    || (sub_100006570((uint64_t)a2[7].isa + 32 * v9, (uint64_t)&v161), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10002A544(4012, 0xD000000000000016, (void *)0x8000000100193E00, 0);
    swift_willThrow();

    uint64_t v25 = v8;
    unint64_t v26 = (unint64_t)v3;
LABEL_21:
    sub_100006628(v25, v26);
    return v3;
  }
  long long v156 = v164[0];
  if (!a2[2].isa) {
    goto LABEL_22;
  }
  unint64_t v11 = sub_10000C4B0(0x61486B654B787274, 0xEA00000000006873);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v3 = v157;
    goto LABEL_24;
  }
  sub_100006570((uint64_t)a2[7].isa + 32 * v11, (uint64_t)&v161);
  int v3 = v157;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v27 = 0x61486B654B787274;
    long long v28 = (void *)0xEE006C696E206873;
LABEL_25:
    sub_10002A544(4012, v27, v28, 0);
    swift_willThrow();

    sub_100006628(v8, (unint64_t)v3);
    unint64_t v26 = *((void *)&v156 + 1);
    uint64_t v25 = v156;
    goto LABEL_21;
  }
  if (!a2[2].isa
    || (v13 = sub_10000C4B0(0x746361736E617274, 0xED000064496E6F69), int v3 = v157, (v14 & 1) == 0)
    || (sub_100006570((uint64_t)a2[7].isa + 32 * v13, (uint64_t)&v161), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = 0xD000000000000011;
    long long v28 = (void *)0x8000000100193E20;
    goto LABEL_25;
  }
  uint64_t v15 = Data.init(hexString:)();
  if (v16 >> 60 == 15) {
    goto LABEL_180;
  }
  uint64_t v165 = v15;
  unint64_t v166 = v16;
  if (a2[2].isa)
  {
    unint64_t v17 = sub_10000C4B0(0x6B6361626C6C6166, 0xEE00746E756F6D41);
    if (v18)
    {
      sub_100006570((uint64_t)a2[7].isa + 32 * v17, (uint64_t)&v161);
      sub_100006510(&v161, v164);
      sub_100006570((uint64_t)v164, (uint64_t)&v161);
      type metadata accessor for Decimal(0);
      swift_dynamicCast();
      int v158 = v160[0];
      long long v159 = *(_OWORD *)((char *)v160 + 4);
      id v19 = [objc_allocWithZone((Class)NSDecimalNumber) initWithDecimal:&v158];
      id v151 = [v19 integerValue];

      uint64_t v152 = sub_100062D30((uint64_t)v151);
      unint64_t v144 = v20;
      uint64_t v148 = sub_100063000(v152, v20);
      unint64_t v22 = v21;
      sub_100006628(v152, v144);
      unint64_t v142 = v22;
      uint64_t v145 = 0;
      switch(v22 >> 62)
      {
        case 1uLL:
          LODWORD(v23) = HIDWORD(v148) - v148;
          if (!__OFSUB__(HIDWORD(v148), v148))
          {
            uint64_t v23 = (int)v23;
LABEL_30:
            uint64_t v145 = v23;
LABEL_32:
            v153 = (uint64_t *)TLVTag.TAG_9F02_LENGTH.unsafeMutableAddressor();
            if (*v153 >= v145)
            {
              uint64_t v146 = v165;
              unint64_t v140 = v166;
              sub_1000065D0(v148, v22);
              sub_100006628(v146, v140);
              uint64_t v34 = v148;
              uint64_t v165 = v148;
              unint64_t v166 = v22;
              while (1)
              {
                switch(v22 >> 62)
                {
                  case 1uLL:
                    BOOL v36 = __OFSUB__(HIDWORD(v34), v34);
                    LODWORD(v34) = HIDWORD(v34) - v34;
                    if (!v36)
                    {
                      uint64_t v34 = (int)v34;
                      goto LABEL_39;
                    }
                    __break(1u);
                    goto LABEL_176;
                  case 2uLL:
                    uint64_t v39 = v34 + 16;
                    uint64_t v37 = *(void *)(v34 + 16);
                    uint64_t v38 = *(void *)(v39 + 8);
                    BOOL v36 = __OFSUB__(v38, v37);
                    uint64_t v34 = v38 - v37;
                    if (!v36) {
                      goto LABEL_39;
                    }
LABEL_176:
                    __break(1u);
                    goto LABEL_177;
                  case 3uLL:
                    if (*v153 <= 0) {
                      goto LABEL_48;
                    }
                    goto LABEL_40;
                  default:
                    uint64_t v34 = BYTE6(v22);
LABEL_39:
                    if (v34 >= *v153)
                    {
LABEL_48:
                      sub_100006520((uint64_t)v164);
                      sub_100006628(v148, v142);
                      goto LABEL_49;
                    }
LABEL_40:
                    uint64_t v35 = sub_100003EB0((uint64_t *)&unk_1001DA5B0);
                    *((void *)&v162 + 1) = v35;
                    unint64_t v163 = sub_100023888();
                    LOBYTE(v161) = 0;
                    LOBYTE(v160[0]) = *(unsigned char *)sub_100006788(&v161, v35);
                    Data._Representation.replaceSubrange(_:with:count:)();
                    sub_100006520((uint64_t)&v161);
                    uint64_t v34 = v165;
                    unint64_t v22 = v166;
                    break;
                }
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (qword_1001D8F68 != -1) {
LABEL_177:
            }
              swift_once();
            uint64_t v31 = type metadata accessor for Logger();
            sub_100003E78(v31, (uint64_t)qword_1001D9EB0);
            int v3 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v3, v32))
            {
              uint64_t v33 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v33 = 0;
              _os_log_impl((void *)&_mh_execute_header, v3, v32, "Bad fallbackAmount length", v33, 2u);
              swift_slowDealloc();
            }

            sub_10002A544(4012, 0xD00000000000002DLL, (void *)0x8000000100193FA0, 0);
            swift_willThrow();
            sub_100006628(v8, v157);
            sub_100006628(v156, *((unint64_t *)&v156 + 1));

            sub_100006628(v148, v142);
            sub_100006520((uint64_t)v164);
            uint64_t v25 = v165;
            unint64_t v26 = v166;
            goto LABEL_21;
          }
          __break(1u);
LABEL_179:
          __break(1u);
          break;
        case 2uLL:
          uint64_t v30 = *(void *)(v148 + 16);
          uint64_t v29 = *(void *)(v148 + 24);
          uint64_t v145 = v29 - v30;
          if (!__OFSUB__(v29, v30)) {
            goto LABEL_32;
          }
          goto LABEL_179;
        case 3uLL:
          goto LABEL_32;
        default:
          uint64_t v23 = BYTE6(v22);
          goto LABEL_30;
      }
LABEL_180:
      __break(1u);
      JUMPOUT(0x10002352CLL);
    }
  }
LABEL_49:
  sub_1000237F0();
  v136.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a2[2].isa
    && (unint64_t v40 = sub_10000C4B0(0x6568706943787274, 0xED0000626F6C4272), (v41 & 1) != 0)
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v40, (uint64_t)&v161), swift_dynamicCast()))
  {
    unint64_t v43 = *((void *)&v164[0] + 1);
    uint64_t v42 = *(void *)&v164[0];
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0xC000000000000000;
  }
  v135.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006628(v42, v43);
  if (a2[2].isa
    && (unint64_t v44 = sub_10000C4B0(0x6C4279654B787274, 0xEA0000000000626FLL), (v45 & 1) != 0)
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v44, (uint64_t)&v161), swift_dynamicCast()))
  {
    unint64_t v47 = *((void *)&v164[0] + 1);
    uint64_t v46 = *(void *)&v164[0];
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0xC000000000000000;
  }
  v134.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006628(v46, v47);
  if (a2[2].isa)
  {
    unint64_t v48 = sub_10000C4B0(0x6B726F7774656ELL, 0xE700000000000000);
    if (v49)
    {
      sub_100006570((uint64_t)a2[7].isa + 32 * v48, (uint64_t)&v161);
      swift_dynamicCast();
    }
  }
  NSString v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v133 = v50;
  if (a2[2].isa)
  {
    unint64_t v51 = sub_10000C4B0(0x53656D6F6374756FLL, 0xED00007375746174);
    if ((v52 & 1) != 0
      && (sub_100006570((uint64_t)a2[7].isa + 32 * v51, (uint64_t)&v161),
          type metadata accessor for SPRTransactionOutcomeStatus(0),
          swift_dynamicCast()))
    {
      unsigned int v130 = LOBYTE(v164[0]);
    }
    else
    {
      unsigned int v130 = 0;
    }
    if (a2[2].isa)
    {
      unint64_t v53 = sub_10000C4B0(0xD000000000000019, 0x8000000100193E40);
      if (v54)
      {
        sub_100006570((uint64_t)a2[7].isa + 32 * v53, (uint64_t)&v161);
        if (swift_dynamicCast())
        {
          unint64_t v56 = *((void *)&v164[0] + 1);
          uint64_t v55 = *(void *)&v164[0];
          goto LABEL_73;
        }
      }
    }
  }
  else
  {
    unsigned int v130 = 0;
  }
  uint64_t v55 = 0;
  unint64_t v56 = 0xC000000000000000;
LABEL_73:
  v132.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006628(v55, v56);
  if (!a2[2].isa)
  {
    char v129 = 0;
LABEL_83:
    uint64_t v63 = 0;
    unint64_t v64 = 0xC000000000000000;
    char v128 = -1;
    goto LABEL_90;
  }
  unint64_t v57 = sub_10000C4B0(0xD000000000000019, 0x8000000100193E60);
  if ((v58 & 1) != 0
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v57, (uint64_t)&v161),
        type metadata accessor for SPRTransactionMessage(0),
        swift_dynamicCast()))
  {
    char v59 = v164[0];
  }
  else
  {
    char v59 = 0;
  }
  char v129 = v59;
  if (!a2[2].isa) {
    goto LABEL_83;
  }
  unint64_t v60 = sub_10000C4B0(0x657079546D7663, 0xE700000000000000);
  if ((v61 & 1) != 0
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v60, (uint64_t)&v161),
        type metadata accessor for SPRTransactionCVMType(0),
        swift_dynamicCast()))
  {
    char v62 = v164[0];
  }
  else
  {
    char v62 = -1;
  }
  char v128 = v62;
  if (a2[2].isa
    && (unint64_t v65 = sub_10000C4B0(0x6C757365526D7663, 0xE900000000000074), (v66 & 1) != 0)
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v65, (uint64_t)&v161), swift_dynamicCast()))
  {
    unint64_t v64 = *((void *)&v164[0] + 1);
    uint64_t v63 = *(void *)&v164[0];
  }
  else
  {
    uint64_t v63 = 0;
    unint64_t v64 = 0xC000000000000000;
  }
LABEL_90:
  v154.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006628(v63, v64);
  if (a2[2].isa
    && (unint64_t v67 = sub_10000C4B0(0xD000000000000014, 0x8000000100193E80), (v68 & 1) != 0)
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v67, (uint64_t)&v161), swift_dynamicCast()))
  {
    unint64_t v70 = *((void *)&v164[0] + 1);
    uint64_t v69 = *(void *)&v164[0];
  }
  else
  {
    uint64_t v69 = 0;
    unint64_t v70 = 0xC000000000000000;
  }
  v149.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006628(v69, v70);
  if (a2[2].isa && (unint64_t v71 = sub_10000C4B0(0x69757165526E6970, 0xEB00000000646572), (v72 & 1) != 0))
  {
    sub_100006570((uint64_t)a2[7].isa + 32 * v71, (uint64_t)&v161);
    if (swift_dynamicCast()) {
      char v127 = v164[0];
    }
    else {
      char v127 = 0;
    }
  }
  else
  {
    char v127 = 0;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v143.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v147 = isa;
  if (a2[2].isa
    && (unint64_t v74 = sub_10000C4B0(0xD000000000000015, 0x8000000100193EA0), (v75 & 1) != 0)
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v74, (uint64_t)&v161), swift_dynamicCast()))
  {
    unint64_t v77 = *((void *)&v164[0] + 1);
    uint64_t v76 = *(void *)&v164[0];
  }
  else
  {
    uint64_t v76 = 0;
    unint64_t v77 = 0xC000000000000000;
  }
  v141.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006628(v76, v77);
  NSString v78 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a2[2].isa)
  {
    unint64_t v79 = sub_10000C4B0(0x61486B654B6E6970, 0xEA00000000006873);
    if (v80)
    {
      sub_100006570((uint64_t)a2[7].isa + 32 * v79, (uint64_t)&v161);
      swift_dynamicCast();
    }
  }
  NSString v155 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v150 = v78;
  if (a2[2].isa)
  {
    unint64_t v81 = sub_10000C4B0(0x7075536E69507369, 0xEE00646574726F70);
    if ((v82 & 1) != 0
      && (sub_100006570((uint64_t)a2[7].isa + 32 * v81, (uint64_t)&v161), swift_dynamicCast()))
    {
      char v126 = v164[0];
    }
    else
    {
      char v126 = 0;
    }
    if (a2[2].isa)
    {
      unint64_t v83 = sub_10000C4B0(0xD000000000000012, 0x8000000100193EC0);
      if (v84)
      {
        sub_100006570((uint64_t)a2[7].isa + 32 * v83, (uint64_t)&v161);
        if (swift_dynamicCast())
        {
          unint64_t v86 = *((void *)&v164[0] + 1);
          uint64_t v85 = *(void *)&v164[0];
          goto LABEL_119;
        }
      }
    }
  }
  else
  {
    char v126 = 0;
  }
  uint64_t v85 = 0;
  unint64_t v86 = 0xC000000000000000;
LABEL_119:
  v139.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100006628(v85, v86);
  NSString v138 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&long long v161 = a3;
  type metadata accessor for ReadError(0);
  sub_100023830();
  _BridgedStoredNSError.code.getter();
  uint64_t v131 = v160[0];
  if (!a2[2].isa)
  {
    char v125 = 0;
LABEL_129:
    char v124 = 0;
    goto LABEL_130;
  }
  unint64_t v87 = sub_10000C4B0(0xD000000000000014, 0x8000000100193EE0);
  if ((v88 & 1) != 0
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v87, (uint64_t)&v161),
        type metadata accessor for SPRPayAppletStatus(0),
        swift_dynamicCast()))
  {
    char v125 = v164[0];
  }
  else
  {
    char v125 = 0;
  }
  if (!a2[2].isa) {
    goto LABEL_129;
  }
  unint64_t v89 = sub_10000C4B0(0xD000000000000012, 0x8000000100193F00);
  if ((v90 & 1) != 0
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v89, (uint64_t)&v161), swift_dynamicCast()))
  {
    char v124 = v164[0];
  }
  else
  {
    char v124 = 0;
  }
  if (!a2[2].isa)
  {
    char v120 = 0;
    goto LABEL_142;
  }
  unint64_t v93 = sub_10000C4B0(0xD000000000000012, 0x8000000100193F20);
  if ((v94 & 1) == 0
    || (sub_100006570((uint64_t)a2[7].isa + 32 * v93, (uint64_t)&v161), !swift_dynamicCast()))
  {
LABEL_130:
    char v120 = 0;
    if (!a2[2].isa) {
      goto LABEL_142;
    }
    goto LABEL_131;
  }
  char v120 = v164[0];
  if (!a2[2].isa) {
    goto LABEL_142;
  }
LABEL_131:
  unint64_t v91 = sub_10000C4B0(0x626C6C6146726F66, 0xEB000000006B6361);
  if (v92)
  {
    sub_100006570((uint64_t)a2[7].isa + 32 * v91, (uint64_t)&v161);
    if (swift_dynamicCast())
    {
      char v123 = v164[0];
      goto LABEL_143;
    }
  }
LABEL_142:
  char v123 = 0;
LABEL_143:
  uint64_t v95 = v165;
  unint64_t v96 = v166;
  sub_1000065D0(v165, v166);
  Data.hexString()();
  sub_100006628(v95, v96);
  NSString v97 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v137 = v97;
  if (!a2[2].isa)
  {
    char v122 = 0;
LABEL_153:
    char v121 = 0;
LABEL_154:
    char v119 = 0;
    if (!a2[2].isa) {
      goto LABEL_164;
    }
LABEL_155:
    unint64_t v102 = sub_10000C4B0(0x7954707041796170, 0xEA00000000006570);
    if (v103)
    {
      sub_100006570((uint64_t)a2[7].isa + 32 * v102, (uint64_t)&v161);
      swift_dynamicCast();
    }
    goto LABEL_164;
  }
  unint64_t v98 = sub_10000C4B0(0xD00000000000001DLL, 0x8000000100193F40);
  if ((v99 & 1) != 0
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v98, (uint64_t)&v161), swift_dynamicCast()))
  {
    char v122 = v164[0];
  }
  else
  {
    char v122 = 0;
  }
  if (!a2[2].isa) {
    goto LABEL_153;
  }
  unint64_t v100 = sub_10000C4B0(0xD000000000000013, 0x8000000100193F60);
  if ((v101 & 1) != 0
    && (sub_100006570((uint64_t)a2[7].isa + 32 * v100, (uint64_t)&v161),
        type metadata accessor for SPRCardExpirationState(0),
        swift_dynamicCast()))
  {
    char v121 = v164[0];
  }
  else
  {
    char v121 = 0;
  }
  if (!a2[2].isa)
  {
    char v119 = 0;
    goto LABEL_164;
  }
  unint64_t v104 = sub_10000C4B0(0xD000000000000012, 0x8000000100193F80);
  if ((v105 & 1) == 0) {
    goto LABEL_154;
  }
  sub_100006570((uint64_t)a2[7].isa + 32 * v104, (uint64_t)&v161);
  type metadata accessor for SPRCardEffectiveState(0);
  if (!swift_dynamicCast()) {
    goto LABEL_154;
  }
  char v119 = v164[0];
  if (a2[2].isa) {
    goto LABEL_155;
  }
LABEL_164:
  NSString v106 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a2[2].isa && (unint64_t v107 = sub_10000C4B0(0x4641537369, 0xE500000000000000), (v108 & 1) != 0))
  {
    sub_100006570((uint64_t)a2[7].isa + 32 * v107, (uint64_t)&v161);
  }
  else
  {
    long long v161 = 0u;
    long long v162 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v162 + 1))
  {
    char v109 = v126;
    if (swift_dynamicCast()) {
      char v110 = v164[0];
    }
    else {
      char v110 = 0;
    }
    Class v111 = v136.super.isa;
    char v112 = v127;
  }
  else
  {
    sub_100008970((uint64_t)&v161);
    char v110 = 0;
    Class v111 = v136.super.isa;
    char v109 = v126;
    char v112 = v127;
  }
  LOBYTE(v118) = v110;
  BYTE2(v117) = v119;
  BYTE1(v117) = v121;
  LOBYTE(v117) = v122;
  BYTE3(v116) = v123;
  BYTE2(v116) = v120;
  BYTE1(v116) = v124;
  LOBYTE(v116) = v125;
  LOBYTE(v115) = v109;
  LOBYTE(v114) = v112;
  BYTE1(v113) = v128;
  LOBYTE(v113) = v129;
  int v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithVasResponses:transactionCipherBlob:transactionKeyBlob:network:outcomeStatus:errorIndicationStatusWord:errorIndicationMsgOnError:cvmType:cvmResult:merchantCategoryCode:pinRequired:kernelIdentityKeyAttestation:ecdsaCertificate:transactionResultData:kekId:pinKekId:isPinSupported:languagePreference:transactionId:readError:payAppletFinalStatus:isPINBypassEnabled:isPINBypassAllowed:forFallback:fallbackAmount:switchInterfaceOrNoCVMSuccess:cardExpirationState:cardEffectiveState:payAppType:isSAF:", v111, v135.super.isa, v134.super.isa, v133, v130, v132.super.isa, v113, v154.super.isa, v149.super.isa, v114, v147, v143.super.isa, v141.super.isa,
                     v150,
                     v155,
                     v115,
                     v139.super.isa,
                     v138,
                     v131,
                     v116,
                     v137,
                     v117,
                     v106,
                     v118);

  sub_100006628(v8, v157);
  sub_100006628(v156, *((unint64_t *)&v156 + 1));

  sub_100006628(v165, v166);
  return v3;
}

id sub_10002354C(uint64_t a1, void *a2)
{
  id v26 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_1000237F0();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v24 = Data._bridgeToObjectiveC()().super.isa;
  Class v22 = Data._bridgeToObjectiveC()().super.isa;
  NSString v21 = String._bridgeToObjectiveC()();
  Class v20 = Data._bridgeToObjectiveC()().super.isa;
  Class v19 = Data._bridgeToObjectiveC()().super.isa;
  Class v27 = Data._bridgeToObjectiveC()().super.isa;
  Class v2 = Data._bridgeToObjectiveC()().super.isa;
  Class v13 = Data._bridgeToObjectiveC()().super.isa;
  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  NSString v16 = String._bridgeToObjectiveC()();
  Class v17 = Data._bridgeToObjectiveC()().super.isa;
  NSString v18 = String._bridgeToObjectiveC()();
  type metadata accessor for ReadError(0);
  sub_100023830();
  _BridgedStoredNSError.code.getter();
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  LOBYTE(v12) = 0;
  BYTE2(v11) = 0;
  LOWORD(v11) = 0;
  LODWORD(v10) = 0;
  LOBYTE(v9) = 0;
  LOBYTE(v8) = 0;
  LOWORD(v7) = -256;
  id v5 = objc_msgSend(v26, "initWithVasResponses:transactionCipherBlob:transactionKeyBlob:network:outcomeStatus:errorIndicationStatusWord:errorIndicationMsgOnError:cvmType:cvmResult:merchantCategoryCode:pinRequired:kernelIdentityKeyAttestation:ecdsaCertificate:transactionResultData:kekId:pinKekId:isPinSupported:languagePreference:transactionId:readError:payAppletFinalStatus:isPINBypassEnabled:isPINBypassAllowed:forFallback:fallbackAmount:switchInterfaceOrNoCVMSuccess:cardExpirationState:cardEffectiveState:payAppType:isSAF:", isa, v24, v22, v21, 0, v20, v7, v19, v27, v8, v2, v13, v14,
         v15,
         v16,
         v9,
         v17,
         v18,
         v28,
         v10,
         v3,
         v11,
         v4,
         v12);

  return v5;
}

unint64_t sub_1000237F0()
{
  unint64_t result = qword_1001D9EC8;
  if (!qword_1001D9EC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001D9EC8);
  }
  return result;
}

unint64_t sub_100023830()
{
  unint64_t result = qword_1001DD3E0;
  if (!qword_1001DD3E0)
  {
    type metadata accessor for ReadError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD3E0);
  }
  return result;
}

unint64_t sub_100023888()
{
  unint64_t result = qword_1001DD3A0;
  if (!qword_1001DD3A0)
  {
    sub_100003EF4((uint64_t *)&unk_1001DA5B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD3A0);
  }
  return result;
}

uint64_t sub_1000238E4@<X0>(uint64_t a1@<X8>)
{
  sub_100060998((uint64_t)v10);
  sub_100029CEC((uint64_t)v10, (uint64_t)__src, &qword_1001DA130);
  if (sub_100029A28((uint64_t)__src) == 1)
  {
    if (qword_1001D90A8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003E78(v3, (uint64_t)qword_1001DC308);
    NSString v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No time token", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_100029714((uint64_t)__dst, (void *)(v1 + 64));
    sub_100029A40((uint64_t)v10);
    uint64_t v7 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
}

uint64_t sub_100023C40()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001D9ED0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001D9ED0);
  if (qword_1001D9268 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1058);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100023D08()
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x203A656C6F72202CLL;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  uint64_t v6 = v0[5];
  os_log_type_t v5 = (void *)v0[6];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v6;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD000000000000011;
}

uint64_t sub_100023DE8()
{
  uint64_t v1 = v0;
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001D9ED0);
  Swift::String v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136315138;
    sub_100005EB8(0x656E676953534553, 0xE900000000000072, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s deinit", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  uint64_t v6 = *(void *)(v1 + 88);
  uint64_t v7 = *(void *)(v1 + 96);
  sub_100006788((void *)(v1 + 64), v6);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7)) {
    sub_100026774();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100006520(v1 + 64);
  sub_100006520(v1 + 104);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006520(v1 + 184);
  sub_100006520(v1 + 224);
  sub_100006520(v1 + 264);
  swift_release();
  sub_100006520(v1 + 312);
  swift_release();
  return v1;
}

uint64_t sub_10002403C()
{
  sub_100023DE8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SESSigner()
{
  return self;
}

void sub_100024094(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t (*a6)(void, void, void)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9 = v7;
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14)
  {
    swift_retain();
    if (sub_100148FBC())
    {
      os_log_type_t v32 = a6;
      uint64_t v33 = a4;
      NSString v15 = a7;
      uint64_t v16 = *(void *)(v14 + 24);
      unint64_t v17 = *(void *)(v14 + 32);
      sub_1000065D0(v16, v17);
      char v18 = sub_100028400();
      sub_100006628(v16, v17);
      if (v18)
      {
        a6 = v32;
        uint64_t v19 = v32(a2, a3, v33);
        a7 = v15;
        if (!v7)
        {
          uint64_t *v15 = v19;
          v15[1] = v20;
          _OWORD v15[2] = v14;
          return;
        }
        type metadata accessor for Code(0);
        swift_errorRetain();
        sub_10002B8E0(&qword_1001D87C8, type metadata accessor for Code);
        char v21 = static _ErrorCodeProtocol.~= infix(_:_:)();
        swift_errorRelease();
        if ((v21 & 1) == 0 || (a5 & 1) == 0)
        {
          swift_release();
          return;
        }
        swift_errorRelease();
        if (qword_1001D8F70 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_100003E78(v22, (uint64_t)qword_1001D9ED0);
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        a4 = v33;
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Recoverable signature failure", v25, 2u);
          a6 = v32;
          swift_slowDealloc();
        }

        uint64_t v9 = 0;
      }
      else
      {
        a7 = v15;
        a6 = v32;
        a4 = v33;
      }
      sub_100026774();
    }
    swift_release();
  }
  if (a5)
  {
    uint64_t v26 = sub_100024FBC();
    if (!v9)
    {
      Class v27 = (uint64_t *)v26;
      uint64_t v28 = a7;
      uint64_t v29 = a6(a2, a3, a4);
      uint64_t v31 = v30;
      sub_10002608C((uint64_t)v27);
      sub_100026C38(v27);
      *uint64_t v28 = v29;
      v28[1] = v31;
      v28[2] = (uint64_t)v27;
    }
  }
  else
  {
    sub_10002A180(10006, 0, 0, 0);
    swift_willThrow();
  }
}

void sub_1000243B0(void *a1@<X0>, BOOL *a2@<X8>, double a3@<D0>)
{
  uint64_t v7 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v13 = __chkstk_darwin(v11, v12);
  NSString v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = (__SecCertificate *)__chkstk_darwin(v13, v16);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = a1[7];
  if (!v21) {
    goto LABEL_10;
  }
  uint64_t v48 = v18;
  SecCertificateRef v49 = v17;
  swift_retain();
  if ((sub_100148FBC() & 1) == 0) {
    goto LABEL_9;
  }
  type metadata accessor for SecCertificate(0);
  NSString v50 = a2;
  uint64_t v22 = *(void *)(v21 + 24);
  unint64_t v23 = *(void *)(v21 + 32);
  sub_1000065D0(v22, v23);
  SecCertificateRef v24 = static SecCertificateRef.parse(derRepresentation:)();
  uint64_t v25 = v22;
  a2 = v50;
  sub_100006628(v25, v23);
  if (!v24)
  {
LABEL_9:
    swift_release();
LABEL_10:
    BOOL v34 = 0;
    goto LABEL_11;
  }
  unint64_t v47 = v20;
  uint64_t v26 = a1[36];
  uint64_t v27 = a1[37];
  sub_100006788(a1 + 33, v26);
  (*(void (**)(SecCertificateRef, uint64_t, uint64_t))(v27 + 8))(v24, v26, v27);
  if (v3)
  {
    SecCertificateRef v49 = v24;
    if (qword_1001D8F70 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100003E78(v28, (uint64_t)qword_1001D9ED0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v51 = v3;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v51 = sub_100005EB8(v32, v33, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Certificate verification failed: %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_errorRelease();
    }
    else
    {

      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    BOOL v34 = 0;
    a2 = v50;
  }
  else
  {
    SecCertificateRef v35 = v24;
    SecCertificateNotValidAfter();
    BOOL v36 = v47;
    Date.init(timeIntervalSinceReferenceDate:)();
    sub_100006788(a1 + 28, a1[31]);
    sub_1000238E4((uint64_t)v10);
    uint64_t v38 = v48;
    SecCertificateRef v37 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, SecCertificateRef))(v48 + 48))(v10, 1, v49) == 1)
    {
      sub_10001EEA8((uint64_t)v10);
      if (qword_1001D8F70 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100003E78(v39, (uint64_t)qword_1001D9ED0);
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Could not calculate secure now", v42, 2u);
        swift_slowDealloc();
      }

      swift_release();
      (*(void (**)(char *, SecCertificateRef))(v48 + 8))(v36, v49);
      BOOL v34 = 0;
      a2 = v50;
    }
    else
    {
      (*(void (**)(char *, char *, SecCertificateRef))(v38 + 32))(v15, v10, v37);
      Date.timeIntervalSince(_:)();
      double v44 = v43;

      swift_release();
      char v45 = *(void (**)(char *, SecCertificateRef))(v38 + 8);
      v45(v15, v37);
      v45(v36, v37);
      BOOL v34 = v44 > a3;
      a2 = v50;
    }
  }
LABEL_11:
  *a2 = v34;
}

void sub_100024950(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v32 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100003E78(v12, (uint64_t)qword_1001D9ED0);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v30 = v9;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = v7;
    unint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = v13;
    uint64_t v34 = v18;
    *(_DWORD *)unint64_t v17 = 136315138;
    uint64_t v33 = sub_100005EB8(0x656E676953534553, 0xE900000000000072, &v34);
    uint64_t v9 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s.renewImmediately()", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v1;
    swift_slowDealloc();
    uint64_t v7 = v29;
    swift_slowDealloc();
  }

  uint64_t v19 = a1[7];
  if (v19)
  {
    swift_retain();
    if (sub_100148FBC())
    {
      sub_100006788(a1 + 28, a1[31]);
      sub_1000238E4((uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
      {
        uint64_t v27 = v32;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v32, v7, v8);
        sub_10002706C(*(void *)(v19 + 16), v27, 0);
        swift_release();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v8);
        return;
      }
      swift_release();
      sub_10001EEA8((uint64_t)v7);
    }
    else
    {
      swift_release();
    }
  }
  sub_100026774();
  uint64_t v20 = sub_100024FBC();
  if (v2)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136315138;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      uint64_t v33 = sub_100005EB8(v24, v25, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error creating identity: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v26 = (uint64_t *)v20;
    sub_10002608C(v20);
    sub_100026C38(v26);
    swift_release();
  }
}

uint64_t sub_100024FBC()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001D9ED0);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_retain();
    unint64_t v8 = sub_100023D08();
    unint64_t v10 = v9;
    swift_release();
    uint64_t v69 = sub_100005EB8(v8, v10, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s.createIdentity()", v7, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v1;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v11 = *(void *)(v3 + 24);
  uint64_t v67 = *(void *)(v3 + 16);
  uint64_t v68 = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v14 = *(void *)(v3 + 40);
  uint64_t v13 = *(void **)(v3 + 48);
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v14;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v67;
  uint64_t v17 = v68;
  uint64_t v18 = *(void *)(v3 + 160);
  id v19 = *(id *)(v3 + 152);
  swift_bridgeObjectRetain();
  uint64_t v20 = static Data.randomBytes(count:)(0x10uLL);
  uint64_t v22 = sub_10014CBF8(v16, v17, (uint64_t)v19, v18, v20, v21);
  uint64_t v23 = v22;
  if (!v2)
  {
    uint64_t v36 = *(void *)(v22 + 24);
    unint64_t v37 = *(void *)(v22 + 32);
    sub_1000065D0(v36, v37);
    sub_100028754(v36, v37);
    sub_100006628(v36, v37);
    uint64_t v38 = *(void *)(v3 + 128);
    uint64_t v66 = *(void *)(v3 + 136);
    sub_100006788((void *)(v3 + 104), v38);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001861D0;
    *(void *)(inited + 32) = 1701605234;
    *(void *)(inited + 40) = 0xE400000000000000;
    uint64_t v40 = *(void *)(v3 + 32);
    *(void *)(inited + 72) = &type metadata for Int;
    *(void *)(inited + 80) = &protocol witness table for Int;
    *(void *)(inited + 48) = v40;
    *(void *)(inited + 88) = 0x747365676964;
    *(void *)(inited + 96) = 0xE600000000000000;
    uint64_t v41 = *(void *)(v23 + 24);
    unint64_t v42 = *(void *)(v23 + 32);
    swift_retain();
    sub_1000065D0(v41, v42);
    uint64_t v43 = Data.sha256Digest.getter(v41, v42);
    unint64_t v45 = v44;
    sub_100006628(v41, v42);
    Swift::String v46 = Data.base64EncodedString(options:)(0);
    sub_100006628(v43, v45);
    swift_release();
    *(void *)(inited + 128) = &type metadata for String;
    *(void *)(inited + 136) = &protocol witness table for String;
    *(Swift::String *)(inited + 104) = v46;
    unint64_t v47 = sub_100104AF4(inited);
    sub_100136224(8, v47, v38, v66);
    swift_bridgeObjectRelease();
    return v23;
  }
  uint64_t v24 = *(void *)(v3 + 128);
  uint64_t v25 = *(void *)(v3 + 136);
  sub_100006788((void *)(v3 + 104), v24);
  sub_100003EB0(&qword_1001D9B20);
  uint64_t v26 = swift_initStackObject();
  *(_OWORD *)(v26 + 16) = xmmword_1001861D0;
  *(void *)(v26 + 32) = 1701605234;
  *(void *)(v26 + 40) = 0xE400000000000000;
  uint64_t v27 = *(void *)(v3 + 32);
  *(void *)(v26 + 72) = &type metadata for Int;
  *(void *)(v26 + 80) = &protocol witness table for Int;
  *(void *)(v26 + 48) = v27;
  *(void *)(v26 + 88) = 0x726F727265;
  *(void *)(v26 + 96) = 0xE500000000000000;
  uint64_t v67 = v2;
  swift_errorRetain();
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  uint64_t v28 = String.init<A>(describing:)();
  *(void *)(v26 + 128) = &type metadata for String;
  *(void *)(v26 + 136) = &protocol witness table for String;
  *(void *)(v26 + 104) = v28;
  *(void *)(v26 + 112) = v29;
  unint64_t v30 = sub_100104AF4(v26);
  sub_100136224(10, v30, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t v67 = v2;
  swift_errorRetain();
  type metadata accessor for SecurityError(0);
  if (swift_dynamicCast())
  {
    uint64_t v31 = v69;
    sub_10002B8E0((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);
    _BridgedStoredNSError.code.getter();
    if (v67 == 10002)
    {
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "seabaas certificate creation failed, increase validity for next attempt", v34, 2u);
        swift_slowDealloc();
        SecCertificateRef v35 = v31;
      }
      else
      {
        SecCertificateRef v35 = v32;
        uint64_t v32 = v31;
      }

      uint64_t v48 = *(void *)(v3 + 360);
      BOOL v49 = __OFADD__(v48, 86400);
      uint64_t v50 = v48 + 86400;
      if (v49)
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v50 <= 600000) {
        *(void *)(v3 + 360) = v50;
      }
    }
    else
    {
    }
  }
  uint64_t v51 = (void *)_convertErrorToNSError(_:)();
  id v52 = [v51 domain];

  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v55 = v54;

  if (v53 == String.init(cString:)() && v55 == v56)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
    {
LABEL_26:
      swift_willThrow();
      return v23;
    }
  }
  char v58 = (void *)_convertErrorToNSError(_:)();
  unint64_t v59 = (unint64_t)[v58 code];

  if ((v59 & 0x8000000000000000) == 0 && !HIDWORD(v59))
  {
    if (v59 == 8)
    {
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, v61))
      {
        char v62 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = (void *)swift_slowAlloc();
        *(_DWORD *)char v62 = 138412290;
        swift_errorRetain();
        uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v67 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v63 = v64;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "security violation in hardware: %@", v62, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_10002A180(10017, 0, 0, 0);
      swift_willThrow();
      swift_errorRelease();
      return v23;
    }
    goto LABEL_26;
  }
LABEL_31:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10002586C()
{
  uint64_t v1 = v0;
  uint64_t v30 = type metadata accessor for String.Encoding();
  uint64_t v2 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v3);
  uint64_t v29 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = sub_100003E78(v5, (uint64_t)qword_1001D9ED0);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  v26[3] = v6;
  uint64_t v28 = v2;
  if (v9)
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315138;
    swift_retain();
    unint64_t v11 = sub_100023D08();
    unint64_t v13 = v12;
    swift_release();
    uint64_t v32 = sub_100005EB8(v11, v13, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s.loadIdentity()", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v14 = v1[11];
  uint64_t v27 = v1[12];
  v26[1] = v1 + 8;
  sub_100006788(v1 + 8, v14);
  uint64_t v15 = v1[3];
  v26[0] = v1[2];
  v31[0] = v26[0];
  v31[1] = v15;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 58;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  uint64_t v17 = v1[5];
  uint64_t v18 = (void *)v1[6];
  swift_bridgeObjectRetain();
  _OWORD v26[2] = v17;
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = v29;
  static String.Encoding.utf8.getter();
  uint64_t v21 = String.data(using:allowLossyConversion:)();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(v28 + 8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v20, v30);
  if (v23 >> 60 == 15)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    uint64_t v25 = sub_100003EB0(&qword_1001DA168);
    sub_10002B83C();
    sub_1000D52CC(v21, v23, v14, v25, v27);
    sub_10000BF70(v21, v23);
    return v32;
  }
  return result;
}

uint64_t sub_10002608C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  os_log_type_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v59 = (void *)type metadata accessor for JSONEncoder.OutputFormatting();
  uint64_t v58 = *(v59 - 1);
  __chkstk_darwin(v59, v9);
  unint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001D9ED0);
  swift_retain_n();
  swift_retain_n();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  char v57 = (void *)v4;
  uint64_t v56 = v5;
  if (v15)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v55 = v8;
    uint64_t v17 = v16;
    uint64_t v54 = swift_slowAlloc();
    v61[0] = v54;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_retain();
    unint64_t v18 = sub_100023D08();
    unint64_t v20 = v19;
    swift_release();
    uint64_t v62 = sub_100005EB8(v18, v20, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v21 = v2;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v22 = sub_100149BF0();
    uint64_t v62 = sub_100005EB8(v22, v23, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s.saveIdentity(identity: %s)", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    os_log_type_t v8 = v55;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    uint64_t v21 = v1;
    swift_release_n();
  }
  type metadata accessor for JSONEncoder();
  v61[0] = a1;
  type metadata accessor for SESSigningIdentity();
  sub_10002B8E0(&qword_1001DA160, (void (*)(uint64_t))type metadata accessor for SESSigningIdentity);
  default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
  unint64_t v24 = v60;
  static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)v61, (uint64_t)v11);
  if (v24) {
    return (*(uint64_t (**)(char *, void *))(v58 + 8))(v11, v59);
  }
  uint64_t v28 = v25;
  unint64_t v60 = v26;
  uint64_t v55 = (char *)a1;
  (*(void (**)(char *, void *))(v58 + 8))(v11, v59);
  uint64_t v29 = v21;
  uint64_t v30 = v21 + 8;
  uint64_t v31 = v21[11];
  uint64_t v32 = v29[12];
  sub_100006788(v30, v31);
  uint64_t v33 = v29[3];
  v61[0] = v29[2];
  v61[1] = v33;
  swift_bridgeObjectRetain();
  v34._countAndFlagsBits = 58;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  unint64_t v59 = v29;
  uint64_t v36 = v29[5];
  SecCertificateRef v35 = (void *)v29[6];
  swift_bridgeObjectRetain();
  v37._countAndFlagsBits = v36;
  v37._object = v35;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v38 = v8;
  uint64_t v39 = String.data(using:allowLossyConversion:)();
  unint64_t v41 = v40;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, void *))(v56 + 8))(v38, v57);
  if (v41 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v32 + 40))(v39, v41, v28, v60, v31, v32);
    sub_10000BF70(v39, v41);
    unint64_t v42 = v59;
    uint64_t v43 = v59[16];
    uint64_t v58 = v59[17];
    char v57 = sub_100006788(v59 + 13, v43);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001861D0;
    *(void *)(inited + 32) = 1701605234;
    *(void *)(inited + 40) = 0xE400000000000000;
    uint64_t v45 = v42[4];
    *(void *)(inited + 72) = &type metadata for Int;
    *(void *)(inited + 80) = &protocol witness table for Int;
    *(void *)(inited + 48) = v45;
    *(void *)(inited + 88) = 0x747365676964;
    *(void *)(inited + 96) = 0xE600000000000000;
    Swift::String v46 = v55;
    uint64_t v56 = v28;
    uint64_t v47 = *((void *)v55 + 3);
    unint64_t v48 = *((void *)v55 + 4);
    swift_retain();
    sub_1000065D0(v47, v48);
    uint64_t v49 = Data.sha256Digest.getter(v47, v48);
    unint64_t v51 = v50;
    sub_100006628(v47, v48);
    Swift::String v52 = Data.base64EncodedString(options:)(0);
    sub_100006628(v49, v51);
    swift_release();
    *(void *)(inited + 128) = &type metadata for String;
    *(void *)(inited + 136) = &protocol witness table for String;
    *(Swift::String *)(inited + 104) = v52;
    unint64_t v53 = sub_100104AF4(inited);
    sub_100136224(9, v53, v43, v58);
    sub_100006628(v56, v60);
    swift_bridgeObjectRelease();
    v42[7] = v46;
    swift_retain();
    return swift_release();
  }
  return result;
}

void sub_100026774()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v25 = *(void *)(v2 - 8);
  uint64_t v26 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = sub_100003E78(v6, (uint64_t)qword_1001D9ED0);
  swift_retain_n();
  v24[1] = v7;
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_retain();
    unint64_t v11 = sub_100023D08();
    unint64_t v13 = v12;
    swift_release();
    uint64_t v27 = sub_100005EB8(v11, v13, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s.deleteIdentity()", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v1[7]) {
      return;
    }
  }
  else
  {

    swift_release_n();
    if (!v1[7]) {
      return;
    }
  }
  uint64_t v14 = v1[11];
  uint64_t v15 = v1[12];
  sub_100006788(v1 + 8, v14);
  uint64_t v16 = v1[3];
  v28[0] = v1[2];
  v28[1] = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = 58;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  uint64_t v18 = v1[5];
  unint64_t v19 = (void *)v1[6];
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v21 = String.data(using:allowLossyConversion:)();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v26);
  if (v23 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v15 + 48))(v21, v23, v14, v15);
    sub_10000BF70(v21, v23);
    sub_100149510();
    swift_release();
    v1[7] = 0;
    swift_release();
  }
}

void sub_100026C38(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  os_log_type_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_100003E78(v9, (uint64_t)qword_1001D9ED0);
  swift_retain();
  uint64_t v31 = v10;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v30 = a1;
    uint64_t v28 = v14;
    uint64_t v33 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v29 = v8;
    uint64_t v32 = sub_100005EB8(0x656E676953534553, 0xE900000000000072, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v15 = v5;
    uint64_t v16 = v4;
    uint64_t v18 = *(void *)(v2 + 40);
    unint64_t v17 = *(void *)(v2 + 48);
    swift_bridgeObjectRetain();
    uint64_t v19 = v18;
    uint64_t v4 = v16;
    uint64_t v5 = v15;
    uint64_t v32 = sub_100005EB8(v19, v17, &v33);
    os_log_type_t v8 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "scheduleRenewal of %s for %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    a1 = v30;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  type metadata accessor for SecCertificate(0);
  uint64_t v20 = a1[3];
  unint64_t v21 = a1[4];
  sub_1000065D0(v20, v21);
  SecCertificateRef v22 = static SecCertificateRef.parse(derRepresentation:)();
  sub_100006628(v20, v21);
  if (v22)
  {
    SecCertificateNotValidAfter();
    Date.init(timeIntervalSinceReferenceDate:)();
    sub_10002706C(a1[2], v8, 0);

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    swift_retain_n();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v26 = sub_100149BF0();
      uint64_t v32 = sub_100005EB8(v26, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Invalid X.509 format (SEABAAS). Not renewing: %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

void sub_10002706C(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v100 = a3;
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v105 = *(void *)(v7 - 8);
  uint64_t v106 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  char v103 = &v90[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9, v11);
  unint64_t v104 = &v90[-v12];
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v13 - 8, v14);
  char v101 = &v90[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v16 - 8, v17);
  Class v111 = &v90[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  char v99 = &v90[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = __chkstk_darwin(v22, v24);
  unint64_t v96 = &v90[-v26];
  uint64_t v28 = __chkstk_darwin(v25, v27);
  NSString v97 = &v90[-v29];
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v33 = &v90[-v32];
  uint64_t v98 = v34;
  __chkstk_darwin(v31, v35);
  Swift::String v37 = &v90[-v36];
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v39 = sub_100003E78(v38, (uint64_t)qword_1001D9ED0);
  unint64_t v107 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 16);
  uint64_t v108 = v20 + 16;
  v107(v37, a2, v19);
  uint64_t v109 = v39;
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  char v110 = v33;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v102 = a1;
    uint64_t v44 = v43;
    char v94 = (void (*)(unsigned char *, unsigned char *, uint64_t))swift_slowAlloc();
    aBlock[0] = (uint64_t)v94;
    *(_DWORD *)uint64_t v44 = 136315394;
    uint64_t v112 = sub_100005EB8(0x656E676953534553, 0xE900000000000072, aBlock);
    uint64_t v95 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2080;
    sub_10002B8E0((unint64_t *)&qword_1001D9B08, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v112 = sub_100005EB8(v45, v46, aBlock);
    uint64_t v4 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = v37;
    unint64_t v48 = *(void **)(v20 + 8);
    ((void (*)(unsigned char *, uint64_t))v48)(v47, v19);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s.scheduleRenewal using expirationDate: %s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    uint64_t v33 = v110;
    swift_slowDealloc();
    a1 = v102;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v49 = v37;
    unint64_t v48 = *(void **)(v20 + 8);
    ((void (*)(unsigned char *, uint64_t))v48)(v49, v19);
  }

  sub_100006788(v4 + 28, v4[31]);
  unint64_t v50 = v111;
  sub_1000238E4((uint64_t)v111);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v50, 1, v19) == 1)
  {
    sub_10001EEA8((uint64_t)v50);
    unint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v53 = 134217984;
      aBlock[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Aborting identity #%lld renewal. Could not calculate secure now", v53, 0xCu);
      swift_slowDealloc();
    }

    return;
  }
  char v94 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32);
  v94(v33, v50, v19);
  Date.timeIntervalSince(_:)();
  if ((~*(void *)&v54 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v54 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v54 >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    return;
  }
  unint64_t v93 = v4 + 28;
  Class v111 = a2;
  uint64_t v55 = 86400;
  uint64_t v95 = v48;
  if ((uint64_t)v54 <= 86400 && (uint64_t v55 = (uint64_t)v54, (uint64_t)v54 < 301))
  {
    swift_retain();
    char v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      unint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v102 = a1;
      aBlock[0] = v75;
      uint64_t v109 = v20;
      *(_DWORD *)unint64_t v74 = 136315138;
      NSString v97 = v74 + 4;
      uint64_t v76 = v4[5];
      unint64_t v77 = v4[6];
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_100005EB8(v76, v77, aBlock);
      uint64_t v20 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Certificate for %s will be renewed immediately", v74, 0xCu);
      swift_arrayDestroy();
      a1 = v102;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v92 = v20 + 32;
    uint64_t v112 = 300;
    uint64_t v113 = v55;
    swift_beginAccess();
    sub_10001F1A0((uint64_t)(v4 + 23), v4[26]);
    sub_100006AD0();
    static FixedWidthInteger.random<A>(in:using:)();
    swift_endAccess();
    uint64_t v56 = v97;
    Date.addingTimeInterval(_:)();
    Date.timeIntervalSince(_:)();
    uint64_t v58 = v57;
    unint64_t v59 = v96;
    v107(v96, v56, v19);
    swift_retain_n();
    unint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    int v62 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v63 = swift_slowAlloc();
      int v91 = v62;
      uint64_t v64 = v63;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 136315650;
      uint64_t v102 = a1;
      uint64_t v109 = v20;
      uint64_t v65 = v19;
      uint64_t v66 = v4[5];
      unint64_t v67 = v4[6];
      swift_bridgeObjectRetain();
      uint64_t v112 = sub_100005EB8(v66, v67, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v64 + 12) = 2080;
      sub_10002B8E0((unint64_t *)&qword_1001D9B08, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v112 = sub_100005EB8(v68, v69, aBlock);
      uint64_t v19 = v65;
      uint64_t v20 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v70 = v59;
      unint64_t v71 = (void (*)(unsigned char *, uint64_t))v95;
      ((void (*)(unsigned char *, uint64_t))v95)(v70, v19);
      *(_WORD *)(v64 + 22) = 2048;
      uint64_t v112 = v58;
      a1 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v91, "Certificate for %s will be renewed on %s (in %f seconds)", (uint8_t *)v64, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v71(v56, v19);
    }
    else
    {

      ((void (*)(unsigned char *, uint64_t))v48)(v59, v19);
      swift_release_n();
      ((void (*)(unsigned char *, uint64_t))v48)(v56, v19);
    }
  }
  swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v78 = swift_allocObject();
  swift_weakInit();
  unint64_t v79 = v99;
  v107(v99, v111, v19);
  unint64_t v80 = (*(unsigned __int8 *)(v20 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v81 = (void *)swift_allocObject();
  v81[2] = v78;
  v81[3] = a1;
  v81[4] = v58;
  v81[5] = v100;
  v94((unsigned char *)v81 + v80, v79, v19);
  aBlock[4] = (uint64_t)sub_10002B7B8;
  void aBlock[5] = (uint64_t)v81;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000048D8;
  aBlock[3] = (uint64_t)&unk_1001C6BF8;
  _Block_copy(aBlock);
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  swift_retain();
  uint64_t v82 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  v4[44] = v82;
  swift_release();
  uint64_t v84 = v4[31];
  uint64_t v83 = v4[32];
  sub_100006788(v93, v84);
  uint64_t v85 = v103;
  (*(void (**)(uint64_t))(*(void *)(v83 + 8) + 16))(v84);
  unint64_t v86 = v104;
  + infix(_:_:)();
  unint64_t v87 = *(void (**)(unsigned char *, uint64_t))(v105 + 8);
  char v88 = v85;
  uint64_t v89 = v106;
  v87(v88, v106);
  swift_retain();
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();
  v87(v86, v89);
  ((void (*)(unsigned char *, uint64_t))v95)(v110, v19);
}

void sub_100027DD8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = *(void *)(Strong + 56);
    if (v4 && *(void *)(v4 + 16) == a2)
    {
      if (qword_1001D8F70 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100003E78(v5, (uint64_t)qword_1001D9ED0);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v8 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "renew identity #%lld after %fs", (uint8_t *)v8, 0x16u);
        swift_slowDealloc();
      }

      sub_100026774();
      uint64_t v9 = sub_100024FBC();
      sub_10002608C(v9);
      sub_100026C38(v9);
      swift_release();
      swift_release();
      return;
    }
    swift_release();
  }
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001D9ED0);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "identity mismatch, abort renewal", v13, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100028400()
{
  type metadata accessor for SecCertificate(0);
  SecCertificateRef v1 = static SecCertificateRef.parse(derRepresentation:)();
  if (v1)
  {
    SecCertificateRef v2 = v1;
    if (!sub_10002905C())
    {
      uint64_t v7 = v0[36];
      uint64_t v8 = v0[37];
      sub_100006788(v0 + 33, v7);
      (*(void (**)(SecCertificateRef, uint64_t, uint64_t))(v8 + 8))(v2, v7, v8);

      return 1;
    }
    swift_willThrow();
  }
  else
  {
    if (qword_1001D8F70 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003E78(v3, (uint64_t)qword_1001D9ED0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Invalid X.509 format (SEABAAS)", v6, 2u);
      swift_slowDealloc();
    }

    sub_10002A180(10005, 0, 0, 0);
    swift_willThrow();
  }
  if (qword_1001D8F70 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100003E78(v9, (uint64_t)qword_1001D9ED0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v12 = 136315138;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    uint64_t v13 = String.init<A>(describing:)();
    sub_100005EB8(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Certificate verification failed: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

uint64_t sub_100028754(uint64_t a1, unint64_t a2)
{
  uint64_t v39 = _swiftEmptyArrayStorage;
  type metadata accessor for SecCertificate(0);
  os_log_type_t v5 = static SecCertificateRef.parse(derRepresentation:)();
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = SecCertificateCopyKey(v5);
    if (v7)
    {
      uint64_t v8 = v7;
      if (!SecKeyIsAlgorithmSupported(v7, kSecKeyOperationTypeVerify, kSecKeyAlgorithmECDSASignatureMessageX962SHA1))
      {
        sub_10002A180(10005, 0xD00000000000001CLL, (void *)0x8000000100194210, 0);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v39[2] >= v39[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    else
    {
      sub_10002A180(10005, 0x696C627570206F4ELL, (void *)0xED000079656B2063, 0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v39[2] >= v39[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    uint64_t v10 = (void *)sub_10002905C();
    if (v10)
    {
      id v11 = v10;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v39[2] >= v39[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    sub_1000ACE30(&v35);
    uint64_t v12 = v37;
    uint64_t v13 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v15 = *(void *)(v2 + 168);
      unint64_t v14 = *(void **)(v2 + 176);
      if (v12 == v15 && v13 == v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      uint64_t v35 = 0;
      uint64_t v36 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      uint64_t v35 = 0xD000000000000015;
      uint64_t v36 = (void *)0x80000001001941F0;
      v19._countAndFlagsBits = v12;
      v19._object = v13;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 0x203A64696573202CLL;
      v20._object = (void *)0xE800000000000000;
      String.append(_:)(v20);
      swift_bridgeObjectRetain();
      v21._countAndFlagsBits = v15;
      v21._object = v14;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      uint64_t v16 = v35;
      uint64_t v17 = v36;
      uint64_t v18 = 10010;
    }
    else
    {
      uint64_t v16 = 0xD00000000000001ELL;
      uint64_t v17 = (void *)0x8000000100194160;
      uint64_t v18 = 10005;
    }
    sub_10002A180(v18, v16, v17, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v39[2] >= v39[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_30:
    uint64_t v22 = sub_1000AD2A0();
    if (v23 & 1) != 0 || (uint64_t v24 = v22, sub_1000AD2A0(), (v26))
    {
      uint64_t v33 = (void *)0x8000000100194180;
      uint64_t v34 = 10005;
      uint64_t v32 = 0xD00000000000001ALL;
    }
    else
    {
      uint64_t v27 = v25;
      if (v24)
      {
        uint64_t v35 = 0;
        uint64_t v36 = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(49);
        swift_bridgeObjectRelease();
        uint64_t v35 = 0xD000000000000022;
        uint64_t v36 = (void *)0x80000001001941A0;
        v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._countAndFlagsBits = 0x746365707865202CLL;
        v29._object = (void *)0xED000030203A6465;
        String.append(_:)(v29);
        sub_10002A180(10010, v35, v36, 0);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v39[2] >= v39[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v27 == 1) {
        goto LABEL_42;
      }
      uint64_t v35 = 0;
      uint64_t v36 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      uint64_t v35 = 0xD00000000000001DLL;
      uint64_t v36 = (void *)0x80000001001941D0;
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 0x746365707865202CLL;
      v31._object = (void *)0xED000031203A6465;
      String.append(_:)(v31);
      uint64_t v32 = v35;
      uint64_t v33 = v36;
      uint64_t v34 = 10010;
    }
    sub_10002A180(v34, v32, v33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v39[2] >= v39[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_42:

    sub_100028DC0((uint64_t)&v39, v2, a1, a2);
    return swift_bridgeObjectRelease();
  }
  sub_10002A180(10005, 0xD00000000000001ALL, (void *)0x8000000100194140, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v39[2] >= v39[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_100028DC0((uint64_t)&v39, v2, a1, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100028DC0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(void *)(*(void *)result + 16))
  {
    uint64_t v7 = result;
    sub_100009300(a2 + 104, (uint64_t)v26);
    uint64_t v8 = v27;
    uint64_t v9 = v28;
    sub_100006788(v26, v27);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100189B70;
    *(void *)(inited + 32) = 1701605234;
    *(void *)(inited + 40) = 0xE400000000000000;
    uint64_t v11 = *(void *)(a2 + 32);
    *(void *)(inited + 72) = &type metadata for Int;
    *(void *)(inited + 80) = &protocol witness table for Int;
    *(void *)(inited + 48) = v11;
    *(void *)(inited + 88) = 0x747365676964;
    *(void *)(inited + 96) = 0xE600000000000000;
    uint64_t v12 = Data.sha256Digest.getter(a3, a4);
    uint64_t v14 = v13;
    *(void *)(inited + 128) = &type metadata for Data;
    unint64_t v15 = sub_10002B604();
    *(void *)(inited + 104) = v12;
    *(void *)(inited + 112) = v14;
    *(void *)(inited + 136) = v15;
    *(void *)(inited + 144) = 0x73726F727265;
    uint64_t v25 = (void *)inited;
    *(void *)(inited + 152) = 0xE600000000000000;
    int64_t v16 = *(void *)(*(void *)v7 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain();
      sub_10014B9C4(0, v16, 0);
      type metadata accessor for SecurityError(0);
      uint64_t v17 = 0;
      do
      {
        _print_unlocked<A, B>(_:_:)();
        unint64_t v19 = _swiftEmptyArrayStorage[2];
        unint64_t v18 = _swiftEmptyArrayStorage[3];
        if (v19 >= v18 >> 1) {
          sub_10014B9C4(v18 > 1, v19 + 1, 1);
        }
        ++v17;
        _swiftEmptyArrayStorage[2] = v19 + 1;
        Swift::String v20 = &_swiftEmptyArrayStorage[2 * v19];
        v20[4] = 0;
        v20[5] = 0xE000000000000000;
      }
      while (v16 != v17);
      swift_bridgeObjectRelease();
    }
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    sub_10002B658();
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    v25[23] = &type metadata for String;
    v25[24] = &protocol witness table for String;
    v25[20] = v21;
    v25[21] = v23;
    unint64_t v24 = sub_100104AF4((uint64_t)v25);
    sub_100136224(41, v24, v8, v9);
    swift_bridgeObjectRelease();
    return sub_100006520((uint64_t)v26);
  }
  return result;
}

uint64_t sub_10002905C()
{
  sub_1000AD688((uint64_t)&v24);
  uint64_t v2 = v24;
  SecCertificateRef v1 = (void *)v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    uint64_t v19 = 0xD00000000000001DLL;
    Swift::String v20 = (void *)0x80000001001940A0;
LABEL_13:
    uint64_t v21 = 10005;
    return sub_10002A180(v21, v19, v20, 0);
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_100094E08(v2, (unint64_t)v1);
  if (v6)
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v24 = 0xD000000000000020;
    unint64_t v25 = 0x80000001001940C0;
    v22._countAndFlagsBits = v2;
    v22._object = v1;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    uint64_t v19 = v24;
    Swift::String v20 = (void *)v25;
    goto LABEL_13;
  }
  uint64_t v7 = v3;
  uint64_t v8 = v4;
  uint64_t v9 = v5;
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_100006788((void *)(v0 + 312), *(void *)(v0 + 336));
  if (v7 == *(void *)(*v10 + 16) && v8 == *(void *)(*v10 + 24) && v9 == *(void *)(*v10 + 32)) {
    return 0;
  }
  unint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  v13._countAndFlagsBits = 0xD00000000000002CLL;
  v13._object = (void *)0x80000001001940F0;
  String.append(_:)(v13);
  v14._countAndFlagsBits = sub_100093280(v7, v8, v9);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x8000000100194120;
  v15._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v15);
  int64_t v16 = sub_100006788((void *)(v0 + 312), *(void *)(v0 + 336));
  v17._countAndFlagsBits = sub_100093280(*(void *)(*v16 + 16), *(void *)(*v16 + 24), *(void *)(*v16 + 32));
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  uint64_t v19 = v24;
  Swift::String v20 = (void *)v25;
  uint64_t v21 = 10010;
  return sub_10002A180(v21, v19, v20, 0);
}

uint64_t sub_10002927C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000292D4(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_10002A4F0);
}

uint64_t sub_1000292A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000292D4(a1, a2, a3, a4, a5, a6, a7, (uint64_t)sub_10002A4C4);
}

uint64_t sub_1000292D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v21[0] = a1;
  v21[1] = a8;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  Swift::String v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v22 = v8;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a5;
  char v26 = a4;
  sub_100003EB0(&qword_1001DA150);
  uint64_t v18 = v29;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  uint64_t v19 = (uint64_t (**)(char *, uint64_t))(v14 + 8);
  if (v18) {
    return (*v19)(v17, v13);
  }
  (*v19)(v17, v13);
  uint64_t result = v27;
  *(void *)v21[0] = v28;
  return result;
}

uint64_t sub_100029440(double a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v10 = v1;
  double v11 = a1;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  return v12;
}

uint64_t sub_10002955C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v9 = v0;
  uint64_t v10 = v1;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
}

unint64_t sub_10002968C()
{
  return sub_100023D08();
}

uint64_t sub_1000296B0()
{
  return sub_10002B8E0(&qword_1001DA0E8, (void (*)(uint64_t))type metadata accessor for SESSigningIdentity);
}

void sub_1000296F8()
{
  sub_100024950(*(void **)(v0 + 16));
}

uint64_t sub_100029714(uint64_t a1, void *a2)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  v20[0] = *(_OWORD *)(a1 + 208);
  v20[1] = v3;
  sub_100029CEC((uint64_t)v20, (uint64_t)v21, &qword_1001DA138);
  uint64_t v4 = sub_100029CEC((uint64_t)v21, (uint64_t)&v22, &qword_1001DA138);
  uint64_t v6 = v23;
  if (!v23) {
    goto LABEL_13;
  }
  uint64_t v7 = v22;
  uint64_t v8 = __chkstk_darwin(v4, v5);
  if ((v6 & 0x1000000000000000) != 0 || !(v6 & 0x2000000000000000 | v7 & 0x1000000000000000))
  {
    sub_10002A408((uint64_t)v21);
    _StringGuts._slowWithCString<A>(_:)();
    sub_10002A434((uint64_t)v21);
    if ((v19 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  __chkstk_darwin(v8, v9);
  if ((v6 & 0x2000000000000000) != 0)
  {
    if (v7 <= 0x20u && ((1 << v7) & 0x100003E01) != 0)
    {
      sub_10002A408((uint64_t)v21);
LABEL_12:
      sub_10002A434((uint64_t)v21);
      goto LABEL_13;
    }
    sub_10002A408((uint64_t)v21);
    uint64_t v16 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
    if (!v16) {
      goto LABEL_12;
    }
    int v17 = *v16;
    sub_10002A434((uint64_t)v21);
    if (v17) {
      goto LABEL_13;
    }
LABEL_8:
    uint64_t v13 = a2[3];
    uint64_t v14 = a2[4];
    sub_100006788(a2, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    return Date.init(timeIntervalSince1970:)();
  }
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v10 = _StringObject.sharedUTF8.getter();
    uint64_t v11 = v18;
  }
  sub_10002A408((uint64_t)v21);
  char v12 = sub_100029C48(v10, v11, (void (*)(uint64_t *__return_ptr))sub_10002A460);
  sub_10002A434((uint64_t)v21);
  if (v12) {
    goto LABEL_8;
  }
LABEL_13:
  sub_10002A180(10007, 0xD000000000000022, (void *)0x8000000100194070, 0);
  return swift_willThrow();
}

uint64_t sub_100029A28(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100029A40(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_100029ABC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  return a1;
}

uint64_t sub_100029ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006628(a31, a32);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *sub_100029BDC@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100029C48(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

void *sub_100029CA8@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100029CEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100003EB0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100029D50(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v23 = _sSC23SPRPersistenceErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for PersistenceError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D9900, type metadata accessor for PersistenceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_100029F68(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v23 = _sSC17SPRDepotErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for DepotError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D97E8, type metadata accessor for DepotError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002A180(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v23 = _sSC20SPRSecurityErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for SecurityError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D87E8, type metadata accessor for SecurityError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

unsigned char *sub_10002A398@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10002A408(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002A434(uint64_t a1)
{
  return a1;
}

void *sub_10002A460@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void sub_10002A4A4(BOOL *a1@<X8>)
{
  sub_1000243B0(*(void **)(v1 + 16), a1, *(double *)(v1 + 24));
}

void sub_10002A4C4(uint64_t *a1@<X8>)
{
}

void sub_10002A4F0(uint64_t *a1@<X8>)
{
}

void sub_10002A51C(uint64_t (*a1)(void, void, void)@<X0>, uint64_t *a2@<X8>)
{
  sub_100024094(*(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned char *)(v2 + 48), a1, a2);
}

uint64_t sub_10002A544(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v23 = _sSC16SPRReadErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for ReadError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001DD3E0, type metadata accessor for ReadError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002A75C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v23 = _sSC25SPRSecureChannelErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for SecureChannelError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D9820, type metadata accessor for SecureChannelError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002A974(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v23 = _sSC25SPRConfigurationErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for ConfigurationError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002AB8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v23 = _sSC11ORErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for ORError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002ADA4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v23 = _sSC21SPRPINControllerErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for PINControllerError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002AFBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v23 = _sSC22SPRPINAppletProxyErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for PINAppletProxyError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002B1D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v23 = _sSC16SPRJSONErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for JSONError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D9890, type metadata accessor for JSONError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

uint64_t sub_10002B3EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v23 = _sSC19SPRMonitorErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(a1);
  uint64_t v24 = v8;
  if (a3)
  {
    *(void *)&long long v21 = 8250;
    *((void *)&v21 + 1) = 0xE200000000000000;
    v9._countAndFlagsBits = a2;
    v9._object = a3;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 8250;
    v10._object = (void *)0xE200000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
  }
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 72) = sub_100006680(0, &qword_1001DA148);
  *(void *)(inited + 48) = v13;
  sub_100004D6C(inited);
  if (a4)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v22 = sub_100006680(0, (unint64_t *)&qword_1001DA530);
    *(void *)&long long v21 = v17;
    sub_100006510(&v21, v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000CE84(v20, v14, v16, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  type metadata accessor for MonitorError(0);
  *(void *)&v20[0] = a1;
  sub_10002B8E0((unint64_t *)&qword_1001D9A08, type metadata accessor for MonitorError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v21;
}

unint64_t sub_10002B604()
{
  unint64_t result = qword_1001DA158;
  if (!qword_1001DA158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA158);
  }
  return result;
}

unint64_t sub_10002B658()
{
  unint64_t result = qword_1001DD3B0;
  if (!qword_1001DD3B0)
  {
    sub_100003EF4((uint64_t *)&unk_1001DA570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DD3B0);
  }
  return result;
}

uint64_t sub_10002B6B4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002B6EC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10002B7B8()
{
  type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);

  sub_100027DD8(v1, v2);
}

uint64_t sub_10002B824(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002B834()
{
  return swift_release();
}

unint64_t sub_10002B83C()
{
  unint64_t result = qword_1001DA170;
  if (!qword_1001DA170)
  {
    sub_100003EF4(&qword_1001DA168);
    sub_10002B8E0(&qword_1001DA178, (void (*)(uint64_t))type metadata accessor for SESSigningIdentity);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA170);
  }
  return result;
}

uint64_t sub_10002B8E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002B928(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x44496769666E6F63;
      break;
    case 4:
      unint64_t result = 0xD000000000000019;
      break;
    case 5:
      unint64_t result = 0x79636E6572727563;
      break;
    case 6:
      unint64_t result = 0x696C6C6F50766D65;
      break;
    case 7:
      unint64_t result = 0x646F43726F727265;
      break;
    case 8:
      unint64_t result = 0x646E49726F727265;
      break;
    case 9:
      unint64_t result = 0x746361466D726F66;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
    case 14:
    case 16:
    case 19:
      unint64_t result = 0xD000000000000013;
      break;
    case 12:
      unint64_t result = 0x44496C656E72656BLL;
      break;
    case 13:
      unint64_t result = 0x664F7265626D756ELL;
      break;
    case 15:
      unint64_t result = 0xD000000000000016;
      break;
    case 17:
      unint64_t result = 0x5041527472617473;
      break;
    case 18:
      unint64_t result = 0x6574726F70707573;
      break;
    case 20:
      unint64_t result = 0x7272456B63617274;
      break;
    case 21:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002BBB8(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10002B928(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10002B928(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10002BC44()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10002B928(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10002BCA8()
{
  sub_10002B928(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002BCFC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10002B928(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10002BD5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10002C7B8();
  *a1 = result;
  return result;
}

unint64_t sub_10002BD8C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10002B928(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10002BDB8(void *a1@<X8>)
{
  *a1 = &off_1001C44D0;
}

uint64_t sub_10002BDC8(unsigned __int8 *a1, char *a2)
{
  return sub_1000478D0(*a1, *a2);
}

Swift::Int sub_10002BDD4()
{
  return sub_100047D40();
}

uint64_t sub_10002BDDC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002BEBC()
{
  return sub_1000483AC();
}

unint64_t sub_10002BEC4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10002C80C(*a1);
  *a2 = result;
  return result;
}

void sub_10002BEF4(uint64_t a1@<X8>)
{
  unint64_t v2 = 0x8000000100192EE0;
  unint64_t v3 = 0xD000000000000012;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEB00000000564D45;
      unint64_t v3 = 0x656D695464616572;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6D69546C61746F74;
      *(void *)(a1 + 8) = 0xE900000000000065;
      break;
    case 3:
      strcpy((char *)a1, "pollingTimeVAS");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_10002BFAC(void *a1@<X8>)
{
  *a1 = &off_1001C4588;
}

uint64_t sub_10002BFBC(unsigned int a1)
{
  if (a1 != 2)
  {
    sub_10002C874();
    if (a1) {
      UnsignedInteger.setBit(_:)(0);
    }
    else {
      UnsignedInteger.clearBit(_:)(0);
    }
  }
  if ((a1 & 0xFF00) != 0x200)
  {
    sub_10002C874();
    if ((a1 & 0x100) != 0) {
      UnsignedInteger.setBit(_:)(1);
    }
    else {
      UnsignedInteger.clearBit(_:)(1);
    }
  }
  if ((a1 & 0xFF0000) != 0x20000)
  {
    sub_10002C874();
    if ((a1 & 0x10000) != 0) {
      UnsignedInteger.setBit(_:)(2);
    }
    else {
      UnsignedInteger.clearBit(_:)(2);
    }
  }
  if (HIBYTE(a1) != 2)
  {
    sub_10002C874();
    if ((a1 & 0x1000000) != 0) {
      UnsignedInteger.setBit(_:)(3);
    }
    else {
      UnsignedInteger.clearBit(_:)(3);
    }
  }
  return 0;
}

void sub_10002C0BC()
{
  uint64_t v1 = v0;
  sub_100003EB0(&qword_1001DA340);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = 21;
  char v3 = sub_10002BFBC(*(_DWORD *)(v1 + 64));
  *(void *)(inited + 64) = &type metadata for UInt8;
  *(unsigned char *)(inited + 40) = v3;
  sub_1001051A8(inited);
  unint64_t v4 = *(os_unfair_lock_s **)(v1 + 56);
  uint64_t v5 = (uint64_t *)&v4[4];
  uint64_t v6 = v4 + 8;
  os_unfair_lock_lock(v4 + 8);
  sub_10002C858(v5);
  os_unfair_lock_unlock(v6);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v6);
  sub_10001F0A4(v5);
  os_unfair_lock_unlock(v6);
  *(_DWORD *)(v1 + 64) = 33686018;
}

uint64_t sub_10002C1B4()
{
  sub_100006520(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ProvisionAnalytics()
{
  uint64_t result = qword_1001DA1A8;
  if (!qword_1001DA1A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002C240()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for ProvisionAnalytics.PerformanceField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ProvisionAnalytics.PerformanceField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002C3E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvisionAnalytics.PerformanceField()
{
  return &type metadata for ProvisionAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for ProvisionAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ProvisionAnalytics.AnalyticsField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *uint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002C574);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvisionAnalytics.AnalyticsField()
{
  return &type metadata for ProvisionAnalytics.AnalyticsField;
}

uint64_t sub_10002C5AC()
{
  return sub_10002C654(&qword_1001DA2F8, &qword_1001DA300);
}

unint64_t sub_10002C5D8()
{
  unint64_t result = qword_1001DA308;
  if (!qword_1001DA308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA308);
  }
  return result;
}

uint64_t sub_10002C62C()
{
  return sub_10002C654(&qword_1001DA310, &qword_1001DA318);
}

uint64_t sub_10002C654(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002C6A8()
{
  unint64_t result = qword_1001DA320;
  if (!qword_1001DA320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA320);
  }
  return result;
}

uint64_t sub_10002C6FC(uint64_t a1, uint64_t a2)
{
  v9[3] = type metadata accessor for CALogger();
  v9[4] = &off_1001C7558;
  v9[0] = a1;
  *(_DWORD *)(a2 + 64) = 33686018;
  sub_100009300((uint64_t)v9, (uint64_t)v8);
  unint64_t v4 = sub_100104EA4((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v5 = sub_100104FC0((uint64_t)_swiftEmptyArrayStorage);
  sub_100003EB0((uint64_t *)&unk_1001DA350);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  *(void *)(a2 + 56) = v6;
  sub_10001F1F0(v8, a2 + 16);
  sub_100006520((uint64_t)v9);
  return a2;
}

uint64_t sub_10002C7B8()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x16) {
    return 22;
  }
  else {
    return v0;
  }
}

unint64_t sub_10002C80C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C4508, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10002C858(uint64_t *a1)
{
  return sub_10006DAD0(a1, *(void *)(v1 + 16));
}

unint64_t sub_10002C874()
{
  unint64_t result = qword_1001DA348;
  if (!qword_1001DA348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA348);
  }
  return result;
}

uint64_t sub_10002C8C8(uint64_t a1)
{
  sub_1000F9AC4((uint64_t)v16);
  if (!v1)
  {
    uint64_t v3 = sub_10001F1A0((uint64_t)v16, v17);
    __chkstk_darwin(v3, v3);
    unint64_t v5 = (void *)((char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = *v5;
    uint64_t v8 = type metadata accessor for CALogger();
    v15[3] = v8;
    v15[4] = &off_1001C7558;
    v15[0] = v7;
    type metadata accessor for ProvisionAnalytics();
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = sub_10001F1A0((uint64_t)v15, v8);
    __chkstk_darwin(v10, v10);
    uint64_t v12 = (void *)((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    a1 = sub_10002C6FC(*v12, v9);
    sub_100006520((uint64_t)v15);
    sub_100006520((uint64_t)v16);
  }
  return a1;
}

uint64_t sub_10002CAB8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DA360);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DA360);
  if (qword_1001D9290 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10002CB80()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DA378);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DA378);
  if (qword_1001D9020 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D88);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10002CEC8(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v115 = a6;
  uint64_t v117 = a4;
  id v113 = a2;
  os_log_t v108 = a1;
  uint64_t v112 = (void **)type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v112, v11);
  Class v111 = (char *)v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t object = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(object, v13);
  uint64_t countAndFlagsBits = (uint64_t)v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v107 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v15 = *(void *)(v107 - 8);
  __chkstk_darwin(v107, v16);
  uint64_t v18 = (char *)v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v21 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_lockedState;
  sub_100003EB0((uint64_t *)&unk_1001DA4E0);
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 20) = 0;
  uint64_t v102 = v21;
  *(void *)&v7[v21] = v22;
  *(_WORD *)(v22 + 16) = 0;
  v7[OBJC_IVAR____TtC9SPREngine15ORReadOperation__isFinished] = 0;
  *(void *)&v7[OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState] = 0;
  uint64_t v23 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionReadResult;
  uint64_t v24 = v7;
  unint64_t v25 = sub_100004D6C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v105 = v7;
  uint64_t v104 = v23;
  *(void *)&v7[v23] = v25;
  uint64_t v103 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError;
  *(void *)&v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError] = 0;
  uint64_t v98 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession;
  os_log_t v26 = v108;
  *(void *)&v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession] = v108;
  uint64_t v100 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate;
  *(void *)&v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate] = a3;
  char v101 = &v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData];
  sub_100009300(v117, (uint64_t)&v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData]);
  uint64_t v27 = &v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_completion];
  *(void *)uint64_t v27 = v115;
  *((void *)v27 + 1) = a7;
  v96[1] = v27;
  uint64_t v97 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_parameters;
  id v28 = v113;
  *(void *)&v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_parameters] = v113;
  uint64_t v99 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics;
  *(void *)&v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics] = a5;
  uint64_t v106 = sub_100006680(0, (unint64_t *)&qword_1001DD340);
  uint64_t v114 = a3;
  swift_unknownObjectRetain();
  uint64_t v115 = a7;
  swift_retain();
  id v113 = v28;
  uint64_t v116 = a5;
  swift_retain();
  os_log_t v108 = v26;
  static DispatchQoS.userInteractive.getter();
  (*(void (**)(char *, void, unint64_t))(v15 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v107);
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_100038FC8((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_100038F5C((unint64_t *)&qword_1001DA500, (uint64_t *)&unk_1001DD350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v30 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_queue;
  *(void *)&v24[OBJC_IVAR____TtC9SPREngine15ORReadOperation_queue] = v29;
  char v124 = BitString.init(data:unusedBits:);
  uint64_t v125 = 0;
  aBlock = _NSConcreteStackBlock;
  unint64_t v121 = 1107296256;
  char v122 = sub_1000048D8;
  char v123 = &unk_1001C6DB8;
  _Block_copy(&aBlock);
  char v119 = (os_unfair_lock_s *)_swiftEmptyArrayStorage;
  sub_100038FC8((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  Swift::String v31 = v24;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v32 = DispatchWorkItem.init(flags:block:)();
  uint64_t v33 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem;
  *(void *)&v31[OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem] = v32;
  if (qword_1001D8F80 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for OSSignposter();
  sub_100003E78(v34, (uint64_t)qword_1001DA378);
  uint64_t v35 = v108;
  sub_100044AEC("ttp-preprocessing", 17, 2, (uint64_t)v35, 0xD000000000000017, 0x8000000100194530);

  sub_100003EB0((uint64_t *)&unk_1001DA520);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_100186100;
  if (qword_1001D9368 != -1) {
    swift_once();
  }
  uint64_t v37 = *((void *)&xmmword_1001E11C0 + 1);
  *(void *)(v36 + 32) = xmmword_1001E11C0;
  *(void *)(v36 + 40) = v37;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  aBlock = 0;
  unsigned int v39 = [v35 selectApplets:isa error:&aBlock];

  if (!v39)
  {
    unint64_t v59 = aBlock;
    unint64_t v60 = (void **)_convertNSErrorToError(_:)();

    swift_willThrow();
    aBlock = v60;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    sub_100006680(0, (unint64_t *)&qword_1001DA530);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_25:
      swift_errorRelease();
      aBlock = 0;
      unint64_t v121 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      aBlock = (void **)0xD00000000000001DLL;
      unint64_t v121 = 0x8000000100194550;
      char v119 = (os_unfair_lock_s *)v60;
      swift_errorRetain();
      v70._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      sub_10002AB8C(20002, (uint64_t)aBlock, (void *)v121, 0);
      swift_willThrow();

      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      swift_errorRelease();
      sub_100006520(v117);
      goto LABEL_31;
    }
    uint64_t v112 = (void **)v33;
    uint64_t v61 = v30;
    Class v111 = v31;
    int v62 = v119;
    id v63 = [(os_unfair_lock_s *)v119 domain];
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;

    if (v64 == String.init(cString:)() && v66 == v67)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v30 = v61;
    }
    else
    {
      char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v30 = v61;
      if ((v68 & 1) == 0)
      {
LABEL_24:

        Swift::String v31 = v111;
        goto LABEL_25;
      }
    }
    unint64_t v69 = (unint64_t)[(os_unfair_lock_s *)v62 code];
    if ((v69 & 0x8000000000000000) != 0 || HIDWORD(v69))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      os_unfair_lock_unlock(v62);
      __break(1u);
      return;
    }
    if (v69 == 64)
    {
      swift_errorRelease();
      sub_10002AB8C(20005, 0xD000000000000051, (void *)0x8000000100194570, 0);
      swift_willThrow();

      swift_unknownObjectRelease();
      swift_release();
      swift_release();

      sub_100006520(v117);
      swift_errorRelease();
      Swift::String v31 = v111;
LABEL_31:
      swift_release();

      swift_unknownObjectRelease();
      swift_release();
      sub_100006520((uint64_t)v101);

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v76 = *(void **)&v31[v103];

      type metadata accessor for ORReadOperation();
      swift_deallocPartialClassInstance();
      return;
    }
    goto LABEL_24;
  }
  uint64_t v112 = (void **)v33;
  uint64_t v40 = qword_1001D93D0;
  os_log_type_t v41 = aBlock;
  if (v40 != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  sub_100003E78(v42, (uint64_t)qword_1001DFC18);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "getProvisionVersion()", v45, 2u);
    swift_slowDealloc();
  }

  unint64_t v46 = (uint64_t *)TLVTag.provisionAppletVersionInfo.unsafeMutableAddressor();
  uint64_t v47 = (os_unfair_lock_s *)v96[0];
  uint64_t v48 = sub_1000B3298(*v46);
  if (v47)
  {
    aBlock = 0;
    unint64_t v121 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD00000000000002CLL;
    unint64_t v121 = 0x80000001001945D0;
    char v119 = v47;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    v75._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    sub_10002AB8C(20003, (uint64_t)aBlock, (void *)v121, 0);
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_errorRelease();
    sub_100006520(v117);
    goto LABEL_31;
  }
  uint64_t v50 = v48;
  unint64_t v51 = v49;
  Swift::String v52 = Data.hexString()();
  uint64_t countAndFlagsBits = v52._countAndFlagsBits;
  sub_100006628(v50, v51);
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  unint64_t v53 = sub_100003E78(v42, (uint64_t)qword_1001DA360);
  swift_bridgeObjectRetain_n();
  os_log_t v108 = v53;
  double v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  BOOL v56 = os_log_type_enabled(v54, v55);
  uint64_t object = (uint64_t)v52._object;
  if (v56)
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = (void **)swift_slowAlloc();
    Class v111 = v31;
    aBlock = v58;
    unint64_t v107 = v30;
    *(_DWORD *)uint64_t v57 = 136315138;
    uint64_t v106 = (uint64_t)(v57 + 4);
    swift_bridgeObjectRetain();
    char v119 = (os_unfair_lock_s *)sub_100005EB8(countAndFlagsBits, (unint64_t)v52._object, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "applet version: %s", v57, 0xCu);
    swift_arrayDestroy();
    Swift::String v31 = v111;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v71, v72))
  {
    os_log_type_t v73 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v73 = 0;
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "getProvisionConfigID()", v73, 2u);
    swift_slowDealloc();
  }

  unint64_t v74 = (uint64_t *)TLVTag.provisionAppletConfigID.unsafeMutableAddressor();
  uint64_t v77 = sub_1000B3298(*v74);
  unint64_t v79 = v78;
  Class v111 = v31;

  sub_1000065D0(v77, v79);
  sub_1000065D0(v77, v79);
  unint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.default.getter();
  BOOL v82 = os_log_type_enabled(v80, v81);
  unint64_t v107 = v79;
  if (v82)
  {
    uint64_t v83 = swift_slowAlloc();
    os_log_t v108 = v80;
    uint64_t v84 = (uint8_t *)v83;
    uint64_t v112 = (void **)swift_slowAlloc();
    aBlock = v112;
    *(_DWORD *)uint64_t v84 = 136315138;
    Swift::String v85 = Data.hexString()();
    char v119 = (os_unfair_lock_s *)sub_100005EB8(v85._countAndFlagsBits, (unint64_t)v85._object, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v77, v79);
    sub_100006628(v77, v79);
    os_log_t v86 = v108;
    _os_log_impl((void *)&_mh_execute_header, v108, v81, "Config ID: %s", v84, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(v77, v79);
    sub_100006628(v77, v79);
  }
  uint64_t v87 = object;
  sub_100003EB0(&qword_1001DA340);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001861D0;
  *(unsigned char *)(inited + 32) = 3;
  Swift::String v89 = Data.hexString()();
  *(void *)(inited + 64) = &type metadata for String;
  *(Swift::String *)(inited + 40) = v89;
  *(unsigned char *)(inited + 72) = 15;
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 80) = countAndFlagsBits;
  *(void *)(inited + 88) = v87;
  unint64_t v90 = sub_1001051A8(inited);
  __chkstk_darwin(v90, v91);
  unint64_t v93 = (uint64_t *)&v92[4];
  char v94 = v92 + 8;
  os_unfair_lock_lock(v92 + 8);
  sub_10002C858(v93);
  os_unfair_lock_unlock(v94);
  swift_bridgeObjectRelease();
  sub_100006628(v77, v107);
  uint64_t v95 = (objc_class *)type metadata accessor for ORReadOperation();
  v118.receiver = v111;
  v118.super_class = v95;
  [&v118 init];

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  sub_100006520(v117);
}

uint64_t sub_10002E16C(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 == 0) == (a2 == 0))
  {
    __break(1u);
LABEL_15:
    swift_once();
LABEL_4:
    sub_100003E78(v8, (uint64_t)qword_1001DA360);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "NFSecureElementReaderSession started", v16, 2u);
      swift_slowDealloc();
    }
    else
    {
    }
    return OS_dispatch_semaphore.signal()();
  }
  if (a1)
  {
    swift_beginAccess();
    uint64_t v13 = *(void **)(a3 + 16);
    *(void *)(a3 + 16) = a1;
    a2 = a1;

    if (qword_1001D8F78 == -1) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100003E78(v8, (uint64_t)qword_1001DA360);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v17, v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v18, v19))
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return OS_dispatch_semaphore.signal()();
  }
  v24[1] = a4;
  uint64_t v20 = (uint8_t *)swift_slowAlloc();
  uint64_t result = swift_slowAlloc();
  v25[0] = result;
  *(_DWORD *)uint64_t v20 = 136315138;
  if (a2)
  {
    uint64_t v26 = (uint64_t)a2;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v26 = sub_100005EB8(v22, v23, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error from startSecureElementReaderSession: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return OS_dispatch_semaphore.signal()();
  }
  __break(1u);
  return result;
}

id sub_10002E534()
{
  uint64_t v1 = v0;
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DA360);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ORReadOperation deinit", v5, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for ORReadOperation();
  return [super dealloc];
}

uint64_t sub_10002E758()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  unint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (objc_class *)type metadata accessor for ORReadOperation();
  v18.receiver = v0;
  v18.super_class = v11;
  [super cancel];
  v16[0] = *(void *)&v0[OBJC_IVAR____TtC9SPREngine15ORReadOperation_queue];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v0;
  aBlock[4] = sub_100038FA0;
  void aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C7150;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v0;
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_100038FC8((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

uint64_t sub_10002EA30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
  uint64_t v3 = &off_1001D8000;
  if (v2)
  {
    uint64_t v4 = qword_1001D8F78;
    id v5 = v2;
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003E78(v6, (uint64_t)qword_1001DA360);
    id v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      type metadata accessor for ORError(0);
      id v11 = v7;
      uint64_t v12 = String.init<A>(describing:)();
      Swift::String v31 = (void *)sub_100005EB8(v12, v13, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      uint64_t v3 = &off_1001D8000;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  if (v3[495] != (_UNKNOWN *)-1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100003E78(v14, (uint64_t)qword_1001DA360);
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "ORReadOperation onUpdate(with: .cancelled)", v17, 2u);
    swift_slowDealloc();
  }

  objc_super v18 = *(void **)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
  if (v18) {
    [v18 onUpdateWithEvent:2];
  }
  sub_10002EF98();
  os_log_type_t v19 = sub_100006788((void *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData), *(void *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_managedData + 24));
  __chkstk_darwin(v19, v20);
  sub_100003EB0(&qword_1001DD3F0);
  OS_dispatch_queue.sync<A>(execute:)();
  if (!v32[3]) {
    return sub_100008970((uint64_t)v32);
  }
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    sub_100003EB0(&qword_1001DA340);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(unsigned char *)(inited + 32) = 7;
    v32[0] = (uint64_t)v31;
    swift_errorRetain();
    type metadata accessor for ORError(0);
    if (swift_dynamicCast())
    {
      sub_100038FC8((unint64_t *)&qword_1001DA5C0, type metadata accessor for ORError);
      _BridgedStoredNSError.code.getter();

      unint64_t v23 = v31;
      uint64_t v24 = &type metadata for Int;
    }
    else
    {
      uint64_t v24 = 0;
      unint64_t v23 = 0;
      *(void *)(inited + 48) = 0;
      *(void *)(inited + 56) = 0;
    }
    *(void *)(inited + 64) = v24;
    *(void *)(inited + 40) = v23;
    unint64_t v25 = sub_1001051A8(inited);
    __chkstk_darwin(v25, v26);
    id v28 = (uint64_t *)&v27[4];
    uint64_t v29 = v27 + 8;
    os_unfair_lock_lock(v27 + 8);
    sub_100039240(v28);
    os_unfair_lock_unlock(v29);
    swift_bridgeObjectRelease();
    sub_10002C0BC();
    uint64_t v30 = *(void (**)(void, void *))(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_completion);
    swift_errorRetain();
    v30(0, v31);
    swift_errorRelease();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10002EF98()
{
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DA360);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "ORReadOperation internalCancel()", v4, 2u);
    swift_slowDealloc();
  }

  if ([v0 isExecuting])
  {
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "ORReadOperation isExecuting", v7, 2u);
      swift_slowDealloc();
    }

    return sub_10002F134(0);
  }
  else
  {
    return sub_10002FED8();
  }
}

uint64_t sub_10002F134(char a1)
{
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003E78(v3, (uint64_t)qword_1001DA360);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ORReadOperation closeReadingEMV()", v6, 2u);
    swift_slowDealloc();
  }

  id v7 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession);
  id v16 = 0;
  if ([v7 stop:&v16])
  {
    id v8 = v16;
    if (a1) {
      return sub_10002F428();
    }
    return sub_10002FED8();
  }
  id v9 = v16;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    id v16 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    uint64_t v13 = String.init<A>(describing:)();
    sub_100005EB8(v13, v14, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error from NFSecureElementReaderSession.stop(): %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    if ((a1 & 1) == 0) {
      return sub_10002FED8();
    }
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    if ((a1 & 1) == 0) {
      return sub_10002FED8();
    }
  }
  return sub_10002F428();
}

uint64_t sub_10002F428()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  os_log_type_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v7);
  id v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DA360);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "clearDataAndCompleteOperation()", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  aBlock[4] = sub_100038D84;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C7088;
  os_log_type_t v15 = _Block_copy(aBlock);
  v1;
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_100038FC8((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v18);
  swift_release();
  return sub_10002FED8();
}

uint64_t sub_10002F7AC(uint64_t a1)
{
  uint64_t v55 = a1;
  uint64_t v1 = type metadata accessor for OSSignpostError();
  uint64_t v50 = *(void *)(v1 - 8);
  uint64_t v51 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  double v54 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v47 - v12;
  __chkstk_darwin(v11, v14);
  id v16 = (char *)&v47 - v15;
  if (qword_1001D8F80 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSSignposter();
  uint64_t v18 = sub_100003E78(v17, (uint64_t)qword_1001DA378);
  static OSSignpostID.exclusive.getter();
  uint64_t v52 = v18;
  uint64_t v19 = OSSignposter.logHandle.getter();
  os_signpost_type_t v20 = static os_signpost_type_t.begin.getter();
  char v21 = OS_os_log.signpostsEnabled.getter();
  unint64_t v49 = v4;
  if (v21)
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v22(v13, v16, v5);
    uint64_t v23 = v5;
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, v20, v25, "ttp-clear-data", "begin ttp clear data", v24, 2u);
    uint64_t v5 = v23;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v23);
  }
  else
  {

    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  }
  uint64_t v48 = v22;
  v22(v13, v16, v5);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v26 = OSSignpostIntervalState.init(id:isOpen:)();
  unint64_t v53 = *(void (**)(char *, uint64_t))(v6 + 8);
  v53(v16, v5);
  uint64_t v27 = qword_1001D93D0;
  id v28 = *(id *)(v55 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession);
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100003E78(v29, (uint64_t)qword_1001DFC18);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "clearProvisionData()", v32, 2u);
    swift_slowDealloc();
  }

  sub_1000377A8(1u, 0, 0xF000000000000000);
  uint64_t v33 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v34 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v35 = v5;
    swift_retain();
    uint64_t v36 = v26;
    uint64_t v37 = v49;
    checkForErrorAndConsumeState(state:)();
    uint64_t v55 = v36;
    swift_release();
    uint64_t v39 = v50;
    uint64_t v38 = v51;
    if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v37, v51) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v40 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
      uint64_t v40 = "end ttp clear data";
    }
    uint64_t v42 = v54;
    v48(v13, v54, v35);
    uint64_t v43 = v42;
    os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v44 = 0;
    os_signpost_id_t v45 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, v34, v45, "ttp-clear-data", v40, v44, 2u);
    swift_slowDealloc();

    unint64_t v46 = (uint64_t (*)(char *, uint64_t))v53;
    v53(v43, v35);
    swift_release();
    return v46(v13, v35);
  }
  else
  {

    v53(v54, v5);
    return swift_release();
  }
}

uint64_t sub_10002FED8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v19[0] - 8);
  __chkstk_darwin(v19[0], v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100003E78(v11, (uint64_t)qword_1001DA360);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "completeOperation()", v14, 2u);
    swift_slowDealloc();
  }

  [v1 setExecuting:0];
  [v1 setFinished:1];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  aBlock[4] = sub_100038D74;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C6FE8;
  id v16 = _Block_copy(aBlock);
  id v17 = v1;
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_100038FC8((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, void))(v7 + 8))(v10, v19[0]);
  return swift_release();
}

void sub_100030274(char *a1)
{
  uint64_t v2 = *(void **)&a1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  v6[4] = sub_100038D7C;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000048D8;
  v6[3] = &unk_1001C7038;
  uint64_t v4 = _Block_copy(v6);
  uint64_t v5 = a1;
  swift_release();
  [v2 endSessionWithCompletion:v4];
  _Block_release(v4);
}

id sub_100030358(uint64_t a1)
{
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DA360);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NF SE Reader Session ended, onUpdate(with: .closed)", v5, 2u);
    swift_slowDealloc();
  }

  id result = *(id *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
  if (result)
  {
    return [result onUpdateWithEvent:3];
  }
  return result;
}

uint64_t sub_100030470()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(char **)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)v80 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11, v12);
  os_log_type_t v13 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession];
  [v13 setDelegate:v1];
  [v13 setSessionDelegate:v1];
  if ([v1 isCancelled])
  {
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100003E78(v14, (uint64_t)qword_1001DA360);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "ORReadOperation cancelled before start()", v17, 2u);
      swift_slowDealloc();
    }

    return sub_10002EF98();
  }
  uint64_t v86 = v2;
  uint64_t v87 = v3;
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v82 = v11;
  id v83 = v13;
  uint64_t v84 = v7;
  uint64_t v19 = type metadata accessor for Logger();
  v80[1] = sub_100003E78(v19, (uint64_t)qword_1001DA360);
  os_signpost_type_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "ORReadOperation start()", v22, 2u);
    swift_slowDealloc();
  }
  Swift::String v85 = v10;

  uint64_t v23 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_parameters];
  double v89 = (double)(uint64_t)[v23 provisionReadTimeout];
  if ((uint64_t)[v23 provisionReadTimeout] < 1
    || (uint64_t)[v23 provisionReadTimeout] >= 41)
  {
    uint64_t v24 = v1;
    os_signpost_id_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 134218240;
      aBlock[0] = [v23 provisionReadTimeout];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v27 + 12) = 2048;
      aBlock[0] = 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Input provisionReadTimeout of %ld was invalid. Using maxPollingTime of %ld.", (uint8_t *)v27, 0x16u);
      swift_slowDealloc();
    }
    else
    {
    }
    double v89 = 40.0;
  }
  uint64_t v81 = *(void *)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics];
  *(unsigned char *)(v81 + 64) = 0;
  uint64_t v28 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_timeoutWorkItem;
  swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  uint64_t v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  double v30 = v89;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v29;
  *(double *)(v31 + 24) = v30;
  aBlock[4] = sub_100038F50;
  void aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C7100;
  _Block_copy(aBlock);
  unint64_t v90 = _swiftEmptyArrayStorage;
  sub_100038FC8((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100038F5C((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v32 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(void *)&v1[v28] = v32;
  swift_release();
  uint64_t v33 = v84;
  static DispatchTime.now()();
  swift_beginAccess();
  os_signpost_type_t v34 = v85;
  + infix(_:_:)();
  uint64_t v35 = v86;
  uint64_t v36 = (void (*)(char *, uint64_t))*((void *)v87 + 1);
  v36(v33, v86);
  uint64_t v87 = v1;
  swift_retain();
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();
  v36(v34, v35);
  id v37 = v83;
  [v23 amount];
  LODWORD(v86) = v92;
  uint64_t v39 = v90;
  uint64_t v38 = v91;
  id v40 = [v23 transactionId];
  uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v43 = v42;

  id v44 = [v23 unpredictableNumber];
  uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  id v48 = [v23 currencyCode];
  id v79 = [v23 countryCode];
  sub_10003156C(v39, v38, v86, v41, v43, v45, v47, (uint64_t)v48, (uint64_t)v79);
  sub_100006628(v45, (unint64_t)v47);
  sub_100006628(v41, v43);

  sub_100003EB0(&qword_1001DA340);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = 17;
  *(void *)(inited + 64) = &type metadata for UInt16;
  *(_WORD *)(inited + 40) = -28672;
  unint64_t v50 = sub_1001051A8(inited);
  __chkstk_darwin(v50, v51);
  unint64_t v53 = (uint64_t *)&v52[4];
  double v54 = v52 + 8;
  os_unfair_lock_lock(v52 + 8);
  sub_100039240(v53);
  os_unfair_lock_unlock(v54);
  swift_bridgeObjectRelease();
  unint64_t v90 = 0;
  if (![v37 start:&v90])
  {
    uint64_t v61 = v90;
    int v62 = (uint64_t *)_convertNSErrorToError(_:)();

    swift_willThrow();
    unint64_t v90 = v62;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    sub_100006680(0, (unint64_t *)&qword_1001DA530);
    int v63 = swift_dynamicCast();
    uint64_t v64 = v87;
    if (!v63)
    {
LABEL_36:
      swift_errorRelease();
      unint64_t v90 = 0;
      uint64_t v91 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v75._uint64_t countAndFlagsBits = 0xD000000000000031;
      v75._uint64_t object = (void *)0x8000000100194890;
      String.append(_:)(v75);
      char v88 = v62;
      swift_errorRetain();
      v76._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      uint64_t v77 = sub_10002AB8C(20001, (uint64_t)v90, v91, 0);
      unint64_t v78 = *(void **)((char *)v64 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
      *(void *)((char *)v64 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = v77;

      sub_10002EF98();
      return swift_errorRelease();
    }
    uint64_t v65 = v88;
    id v66 = [v88 domain];
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v68;

    if (v67 == String.init(cString:)() && v69 == v70)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v71 & 1) == 0)
      {
LABEL_35:

        goto LABEL_36;
      }
    }
    unint64_t v72 = (unint64_t)[v65 code];
    if ((v72 & 0x8000000000000000) != 0 || HIDWORD(v72))
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v72 == 47)
    {
      swift_errorRelease();
      uint64_t v73 = sub_10002AB8C(20006, 0xD000000000000044, (void *)0x80000001001948D0, 0);
      unint64_t v74 = *(void **)((char *)v64 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
      *(void *)((char *)v64 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = v73;

      sub_10002EF98();
      return swift_errorRelease();
    }
    goto LABEL_35;
  }
  uint64_t v55 = v90;
  BOOL v56 = v87;
  [v87 setExecuting:1];
  if (qword_1001D8F80 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for OSSignposter();
  sub_100003E78(v57, (uint64_t)qword_1001DA378);
  sub_100044E30("ttp-preprocessing", 17, 2, (uint64_t)v37, 0xD000000000000015, 0x8000000100194920);
  uint64_t result = (uint64_t)[v56 isCancelled];
  if (result)
  {
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      unint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "ORReadOperation is cancelled after start()", v60, 2u);
      swift_slowDealloc();
    }

    return sub_10002EF98();
  }
  return result;
}

void sub_10003141C()
{
  swift_beginAccess();
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (([Strong isCancelled] & 1) == 0
      && ([v1 isFinished] & 1) == 0)
    {
      if ([v1 isExecuting])
      {
        _StringGuts.grow(_:)(34);
        v2._uint64_t object = (void *)0x8000000100194940;
        v2._uint64_t countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v2);
        Double.write<A>(to:)();
        v3._uint64_t countAndFlagsBits = 0x64657370616C6520;
        v3._uint64_t object = (void *)0xE800000000000000;
        String.append(_:)(v3);
        uint64_t v4 = sub_10002AB8C(20004, 0, (void *)0xE000000000000000, 0);
        uint64_t v5 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError];
        *(void *)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError] = v4;

        *(unsigned char *)(*(void *)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics] + 64) = 1;
        [v1 cancel];
      }
    }
  }
}

uint64_t sub_10003156C(uint64_t *a1, void *a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v120 = a8;
  char v124 = a7;
  unint64_t v123 = a6;
  unint64_t v122 = a5;
  unint64_t v121 = a4;
  LODWORD(v9) = a3;
  uint64_t v12 = type metadata accessor for Locale();
  *(void *)&long long v128 = *(void *)(v12 - 8);
  *((void *)&v128 + 1) = v12;
  __chkstk_darwin(v12, v13);
  char v127 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v125 = *(void *)(v15 - 8);
  uint64_t v126 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D93D0 != -1) {
LABEL_37:
  }
    swift_once();
  unsigned int v130 = v18;
  uint64_t v119 = a9;
  uint64_t v19 = type metadata accessor for Logger();
  sub_100003E78(v19, (uint64_t)qword_1001DFC18);
  os_signpost_type_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "startProvision(amount:transactionID:unpredictableNumber:currencyCode:countryCode:)", v22, 2u);
    swift_slowDealloc();
  }
  DWORD2(v129) = WORD1(v9);
  __int16 v23 = v9;
  unint64_t v9 = (unint64_t)a1 >> 48;

  id v24 = objc_allocWithZone((Class)NSDecimalNumber);
  uint64_t v131 = a1;
  unint64_t v132 = (unint64_t)a2;
  __int16 v133 = v23;
  __int16 v134 = WORD4(v129);
  id v25 = [v24 initWithDecimal:&v131];
  id v26 = [v25 integerValue];

  uint64_t v27 = sub_100062D30((uint64_t)v26);
  unint64_t v29 = v28;
  uint64_t v18 = (char *)sub_100063000(v27, v28);
  unint64_t v31 = v30;
  sub_100006628(v27, v29);
  unint64_t v140 = v18;
  unint64_t v141 = v31;
  a2 = &unk_1001DA5B0;
  a1 = &qword_1001DD3A0;
  uint64_t v32 = v130;
  while (1)
  {
    uint64_t v33 = 0;
    switch(v31 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v18), v18))
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v33 = HIDWORD(v18) - (int)v18;
        break;
      case 2uLL:
        uint64_t v35 = *((void *)v18 + 2);
        uint64_t v34 = *((void *)v18 + 3);
        uint64_t v33 = v34 - v35;
        if (__OFSUB__(v34, v35))
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        break;
      case 3uLL:
        break;
      default:
        uint64_t v33 = BYTE6(v31);
        break;
    }
    if (v33 >= *(void *)TLVTag.TAG_9F02_LENGTH.unsafeMutableAddressor()) {
      break;
    }
    uint64_t v36 = sub_100003EB0((uint64_t *)&unk_1001DA5B0);
    uint64_t v135 = v36;
    uint64_t v136 = sub_100038F5C((unint64_t *)&qword_1001DD3A0, (uint64_t *)&unk_1001DA5B0);
    LOBYTE(v131) = 0;
    LOBYTE(v138) = *(unsigned char *)sub_100006788(&v131, v36);
    Data._Representation.replaceSubrange(_:with:count:)();
    sub_100006520((uint64_t)&v131);
    uint64_t v18 = v140;
    unint64_t v31 = v141;
  }
  Date.init()();
  id v37 = [objc_allocWithZone((Class)NSDateFormatter) init];
  uint64_t v38 = v127;
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, void))(v128 + 8))(v38, *((void *)&v128 + 1));
  [v37 setLocale:isa];

  NSString v40 = String._bridgeToObjectiveC()();
  [v37 setDateFormat:v40];

  Class v41 = Date._bridgeToObjectiveC()().super.isa;
  id v42 = [v37 stringFromDate:v41];

  unint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v45 = v44;

  uint64_t v131 = (uint64_t *)sub_100114E24(v43, v45);
  unint64_t v132 = v46;
  uint64_t v47 = v129;
  sub_1000C6038((uint64_t *)&v131);
  if (!v47)
  {
    NSString v48 = String._bridgeToObjectiveC()();
    [v37 setDateFormat:v48];

    Class v49 = Date._bridgeToObjectiveC()().super.isa;
    id v50 = [v37 stringFromDate:v49];

    unint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v53 = v52;

    uint64_t v138 = sub_100114E24(v51, v53);
    unint64_t v139 = v54;
    sub_1000C6038(&v138);
    char v127 = 0;
    uint64_t v58 = sub_100062D30(v120);
    unint64_t v60 = v59;
    uint64_t v61 = sub_100063000(v58, v59);
    unint64_t v63 = v62;
    sub_100006628(v58, v60);
    uint64_t v64 = (uint64_t *)TLVTag.TAG_5F2A_LENGTH.unsafeMutableAddressor();
    sub_1000DD0B8(*v64, v61, v63, (uint64_t *)&v137);
    long long v129 = v137;
    uint64_t v65 = sub_100062D30(v119);
    unint64_t v67 = v66;
    uint64_t v68 = sub_100063000(v65, v66);
    unint64_t v70 = v69;
    sub_100006628(v65, v67);
    char v71 = (uint64_t *)TLVTag.TAG_9F1A_LENGTH.unsafeMutableAddressor();
    sub_1000DD0B8(*v71, v68, v70, (uint64_t *)&v137);
    long long v128 = v137;
    sub_100003EB0((uint64_t *)&unk_1001DA5A0);
    uint64_t v72 = swift_allocObject();
    *(_OWORD *)(v72 + 16) = xmmword_100189E80;
    type metadata accessor for TLV();
    uint64_t v73 = *(void *)TLVTag.authorizedAmount.unsafeMutableAddressor();
    uint64_t v74 = (uint64_t)v140;
    uint64_t v75 = v141;
    sub_1000065D0((uint64_t)v140, v141);
    *(void *)(v72 + 32) = TLV.__allocating_init(tag:value:)(v73, v74, v75);
    uint64_t v76 = *(void *)TLVTag.provisionDataTransactionId.unsafeMutableAddressor();
    uint64_t v77 = v121;
    uint64_t v78 = v122;
    sub_1000065D0(v121, v122);
    *(void *)(v72 + 40) = TLV.__allocating_init(tag:value:)(v76, v77, v78);
    uint64_t v79 = *(void *)TLVTag.unpredictableNumber.unsafeMutableAddressor();
    uint64_t v80 = v123;
    uint64_t v81 = v124;
    sub_1000065D0(v123, (unint64_t)v124);
    *(void *)(v72 + 48) = TLV.__allocating_init(tag:value:)(v79, v80, (uint64_t)v81);
    uint64_t v82 = *(void *)TLVTag.otherAmount.unsafeMutableAddressor();
    id v83 = TLVTag.TAG_9F03_DEFAULT.unsafeMutableAddressor();
    uint64_t v84 = *v83;
    unint64_t v85 = v83[1];
    sub_1000065D0(*v83, v85);
    *(void *)(v72 + 56) = TLV.__allocating_init(tag:value:)(v82, v84, v85);
    uint64_t v86 = *(void *)TLVTag.transactionType.unsafeMutableAddressor();
    sub_100003EB0(&qword_1001D8778);
    uint64_t v87 = swift_allocObject();
    *(_OWORD *)(v87 + 16) = xmmword_100186100;
    *(unsigned char *)(v87 + 32) = 0;
    uint64_t v88 = sub_10012CB58(v87);
    uint64_t v90 = v89;
    swift_bridgeObjectRelease();
    *(void *)(v72 + 64) = TLV.__allocating_init(tag:value:)(v86, v88, v90);
    *(void *)&long long v137 = v72;
    specialized Array._endMutation()();
    unint64_t v91 = v137;
    uint64_t v92 = *(void *)TLVTag.transactionDate.unsafeMutableAddressor();
    uint64_t v94 = (uint64_t)v131;
    unint64_t v93 = v132;
    sub_1000065D0((uint64_t)v131, v132);
    uint64_t v95 = sub_100063000(v94, v93);
    uint64_t v97 = v96;
    unint64_t v122 = v94;
    unint64_t v123 = v93;
    sub_100006628(v94, v93);
    char v124 = TLV.__allocating_init(tag:value:)(v92, v95, v97);
    uint64_t v98 = *(void *)TLVTag.transactionTime.unsafeMutableAddressor();
    uint64_t v100 = v138;
    unint64_t v99 = v139;
    sub_1000065D0(v138, v139);
    uint64_t v101 = sub_100063000(v100, v99);
    uint64_t v103 = v102;
    uint64_t v120 = v100;
    unint64_t v121 = v99;
    sub_100006628(v100, v99);
    TLV.__allocating_init(tag:value:)(v98, v101, v103);
    uint64_t v104 = *(void *)TLVTag.transactionCurrencyCode.unsafeMutableAddressor();
    long long v105 = v129;
    sub_1000065D0(v129, *((unint64_t *)&v129 + 1));
    TLV.__allocating_init(tag:value:)(v104, v105, *((uint64_t *)&v105 + 1));
    uint64_t v106 = *(void *)TLVTag.terminalCountryCode.unsafeMutableAddressor();
    long long v107 = v128;
    sub_1000065D0(v128, *((unint64_t *)&v128 + 1));
    TLV.__allocating_init(tag:value:)(v106, v107, *((uint64_t *)&v107 + 1));
    *(void *)&long long v137 = v91;
    if (v91 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v108 = *(void *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (__OFADD__(v108, 4))
    {
      __break(1u);
    }
    else
    {
      sub_100037D44(v108 + 4);
      specialized Array._endMutation()();
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_20;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_20:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    unint64_t v109 = v137;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    long long v137 = xmmword_100189A30;
    if (v109 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v110 = _CocoaArrayWrapper.endIndex.getter();
      if (v110) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v110 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v110)
      {
LABEL_28:
        if (v110 < 1) {
          __break(1u);
        }
        uint64_t v111 = 0;
        do
        {
          if ((v109 & 0xC000000000000001) != 0)
          {
            uint64_t v112 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v112 = *(void *)(v109 + 8 * v111 + 32);
            swift_retain();
          }
          ++v111;
          uint64_t v113 = (*(uint64_t (**)(void))(*(void *)v112 + 168))();
          unint64_t v115 = v114;
          Data.append(_:)();
          sub_100006628(v113, v115);
          swift_release();
        }
        while (v110 != v111);
        swift_bridgeObjectRelease_n();
        unint64_t v117 = *((void *)&v137 + 1);
        uint64_t v116 = v137;
        uint64_t v32 = v130;
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v116 = 0;
    unint64_t v117 = 0xC000000000000000;
LABEL_43:
    sub_1000065D0(v116, v117);
    sub_1000377A8(0, v116, v117);
    sub_100006628(v116, v117);

    sub_100006628(v116, v117);
    sub_100006628(v128, *((unint64_t *)&v128 + 1));
    sub_100006628(v129, *((unint64_t *)&v129 + 1));
    sub_100006628(v120, v121);
    uint64_t v55 = v122;
    unint64_t v56 = v123;
    goto LABEL_15;
  }

  uint64_t v55 = (uint64_t)v131;
  unint64_t v56 = v132;
LABEL_15:
  sub_100006628(v55, v56);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v32, v126);
  return sub_100006628((uint64_t)v140, v141);
}

uint64_t sub_10003222C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001DA360);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "handleSessionReachedTimeLimit()", v15, 2u);
    swift_slowDealloc();
  }

  static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v1;
  aBlock[4] = sub_100038D50;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C6F98;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v1;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release();
}

uint64_t sub_100032550(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  if (static NSObject.== infix(_:_:)())
  {
    if (qword_1001D8F78 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger();
  sub_100003E78(v15, (uint64_t)qword_1001DA360);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = v10;
    uint64_t v19 = v5;
    os_signpost_type_t v20 = v18;
    *(_DWORD *)id v18 = 67109120;
    LODWORD(aBlock[0]) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "didReceiveThermalIndication %{BOOL}d", v20, 8u);
    uint64_t v5 = v19;
    uint64_t v10 = v26;
    swift_slowDealloc();
  }

  static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v3;
  *(unsigned char *)(v21 + 24) = a2 & 1;
  aBlock[4] = sub_100038D24;
  void aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C6F48;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v3;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

void sub_100032924(char a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10002AB8C(20006, 0xD00000000000001ELL, (void *)0x8000000100192710, 0);
    uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
    *(void *)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = v2;

    if (qword_1001D8F80 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for OSSignposter();
    sub_100003E78(v4, (uint64_t)qword_1001DA378);
    uint64_t v5 = sub_100044E30("ttp-reader-mode-polling", 23, 2, *(void *)(v1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession), 0xD000000000000027, 0x80000001001947E0);
    __chkstk_darwin(v5, v6);
    uint64_t v8 = (uint64_t *)&v7[4];
    uint64_t v9 = v7 + 8;
    os_unfair_lock_lock(v7 + 8);
    sub_100039258(v8);
    os_unfair_lock_unlock(v9);
    sub_10002FED8();
  }
  else
  {
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100003E78(v10, (uint64_t)qword_1001DA360);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v11, "Reader Mode may be restarted", v12, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100032B6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  os_log_type_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  if (static NSObject.== infix(_:_:)())
  {
    if (qword_1001D8F78 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001DA360);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "secureElementReaderSessionDidEndUnexpectedly()", v15, 2u);
    swift_slowDealloc();
  }

  static DispatchQoS.userInitiated.getter();
  static DispatchWorkItemFlags.enforceQoS.getter();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v1;
  aBlock[4] = sub_1000391CC;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C6EF8;
  os_log_type_t v17 = _Block_copy(aBlock);
  id v18 = v1;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release();
}

uint64_t sub_100032EF0()
{
  uint64_t v1 = sub_10002AB8C(20001, 0xD00000000000002FLL, (void *)0x80000001001947B0, 0);
  uint64_t v2 = OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError];
  *(void *)&v0[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError] = v1;

  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DA360);
  uint64_t v5 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v18 = *(void **)&v0[v2];
    uint64_t v19 = v9;
    id v10 = v18;
    sub_100003EB0(&qword_1001DA588);
    uint64_t v11 = String.init<A>(describing:)();
    sub_100005EB8(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "ORReadOperation onUpdate(with: .closed)", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = *(void **)&v5[OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate];
  if (v16) {
    [v16 onUpdateWithEvent:3];
  }
  return sub_10002FED8();
}

uint64_t sub_10003317C(uint64_t a1, uint64_t a2)
{
  return sub_1000338E0(a1, a2, (uint64_t)&unk_1001C6E90, (uint64_t)sub_100038CC4, (uint64_t)&unk_1001C6EA8);
}

void sub_1000331BC(uint64_t a1)
{
  uint64_t v2 = v1;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v4 = sub_10000C46C((uint64_t)v44), (v5 & 1) != 0))
  {
    sub_100006570(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v45);
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  sub_10000E2D4((uint64_t)v44);
  if (!*((void *)&v46 + 1))
  {
    sub_100008970((uint64_t)&v45);
    goto LABEL_24;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_24;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    swift_bridgeObjectRelease();
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003E78(v6, (uint64_t)qword_1001DA360);
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Type A polling didStart", v9, 2u);
      swift_slowDealloc();
    }

    id v10 = (atomic_uint *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState);
    swift_beginAccess();
    if (v10[1] >= *v10) {
      atomic_fetch_add_explicit(v10, 1u, memory_order_relaxed);
    }
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      goto LABEL_24;
    }
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001DA360);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Type B polling didStart", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = (_DWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState);
    swift_beginAccess();
    if (*v16 >= v16[1]) {
      atomic_fetch_add_explicit(v16 + 1, 1u, memory_order_relaxed);
    }
  }
  swift_endAccess();
LABEL_24:
  os_log_type_t v17 = (_DWORD *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_pollingState);
  swift_beginAccess();
  int v18 = v17[1];
  if (*v17 == 1 && v18 == 1)
  {
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100003E78(v31, (uint64_t)qword_1001DA360);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "ORReadOperation onUpdate(with: .ready)", v34, 2u);
      swift_slowDealloc();
    }

    uint64_t v35 = *(void **)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
    if (v35) {
      [v35 onUpdateWithEvent:0];
    }
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "--- --- ---> EMV-type polling started, tap a card to provision", v38, 2u);
      swift_slowDealloc();
    }

    if (qword_1001D8F80 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for OSSignposter();
    sub_100003E78(v39, (uint64_t)qword_1001DA378);
    uint64_t v40 = sub_100044AEC("ttp-reader-mode-polling", 23, 2, *(void *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession), 0xD000000000000011, 0x8000000100194790);
    LOBYTE(v45) = 3;
    __chkstk_darwin(v40, v41);
    uint64_t v43 = (uint64_t)&v42[4];
    unint64_t v30 = v42 + 8;
    os_unfair_lock_lock(v42 + 8);
    sub_100039270(v43);
  }
  else
  {
    if (*v17 != v18) {
      return;
    }
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003E78(v20, (uint64_t)qword_1001DA360);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "ORReadOperation onUpdate(with: .cardTear)", v23, 2u);
      swift_slowDealloc();
    }

    id v24 = *(void **)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
    if (v24) {
      [v24 onUpdateWithEvent:5];
    }
    uint64_t v25 = *(void **)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
    *(void *)(v2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError) = 0;

    LOBYTE(v45) = 13;
    __chkstk_darwin(v26, v27);
    unint64_t v29 = (uint64_t *)&v28[4];
    unint64_t v30 = v28 + 8;
    os_unfair_lock_lock(v28 + 8);
    sub_100038C60(v29);
  }
  os_unfair_lock_unlock(v30);
}

uint64_t sub_1000338B8(uint64_t a1, uint64_t a2)
{
  return sub_1000338E0(a1, a2, (uint64_t)&unk_1001C6E40, (uint64_t)sub_1000389B0, (uint64_t)&unk_1001C6E58);
}

uint64_t sub_1000338E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  uint64_t result = static NSObject.== infix(_:_:)();
  if (result)
  {
    static DispatchQoS.userInitiated.getter();
    static DispatchWorkItemFlags.enforceQoS.getter();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v5;
    *(void *)(v18 + 24) = a2;
    aBlock[4] = v21;
    void aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    aBlock[3] = v22;
    uint64_t v19 = _Block_copy(aBlock);
    id v20 = v5;
    swift_bridgeObjectRetain();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100033B60(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, uint64_t))
{
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  a5(v9, v8);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100033C00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v25 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  os_log_type_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006680(0, (unint64_t *)&qword_1001DA580);
  uint64_t result = static NSObject.== infix(_:_:)();
  if (result)
  {
    static DispatchQoS.userInitiated.getter();
    static DispatchWorkItemFlags.enforceQoS.getter();
    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = v5;
    v19[3] = a2;
    v19[4] = a3;
    v19[5] = a4;
    uint64_t v23 = v13;
    v19[6] = v24;
    aBlock[4] = sub_10003897C;
    void aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    aBlock[3] = &unk_1001C6E08;
    id v20 = _Block_copy(aBlock);
    id v21 = v5;
    sub_1000065D0(a2, a3);
    swift_bridgeObjectRetain();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v25);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v23);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100033F6C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 != a1 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
        goto LABEL_8;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
LABEL_3:
        if (sub_1000AEB5C())
        {
          type metadata accessor for TLV();
          sub_1000065D0(a1, a2);
          TLV.__allocating_init(dataRepresentation:)(a1, a2);
          uint64_t v18 = v17;
          uint64_t isa = (uint64_t)v17[2].isa;
          v216._uint64_t countAndFlagsBits = *(void *)TLVTag.eventStatus.unsafeMutableAddressor();
          uint64_t v215 = isa;
          sub_1000388E0();
          char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          if (v20)
          {
            id v21 = (uint64_t (*)(void))*((void *)v18->isa + 16);
            uint64_t v22 = ((char *)v18->isa + 128);
            if ((v21() | 2) == 3)
            {
              os_log_t v214 = v22;
              uint64_t v23 = (uint64_t (*)(void))*((void *)v18->isa + 18);
              uint64_t v211 = (uint64_t)v18->isa + 144;
              *(void *)&long long v212 = v23;
              uint64_t v24 = v23();
              unint64_t v26 = v25;
              __int16 v27 = sub_1000D8294(v24, v25);
              sub_100006628(v24, v26);
              if ((v27 & 0x100) == 0)
              {
                switch((char)v27)
                {
                  case 6:
                    if (qword_1001D8F78 != -1) {
                      swift_once();
                    }
                    uint64_t v28 = type metadata accessor for Logger();
                    sub_100003E78(v28, (uint64_t)qword_1001DA360);
                    sub_1000065D0(a1, a2);
                    sub_1000065D0(a1, a2);
                    unint64_t v29 = Logger.logObject.getter();
                    os_log_type_t v30 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v29, v30))
                    {
                      os_log_t v213 = v18;
                      uint64_t v31 = (uint8_t *)swift_slowAlloc();
                      os_log_t v214 = (os_log_t)swift_slowAlloc();
                      v216._uint64_t countAndFlagsBits = (uint64_t)v214;
                      *(_DWORD *)uint64_t v31 = 136315138;
                      Swift::String v32 = Data.hexString()();
                      uint64_t v215 = sub_100005EB8(v32._countAndFlagsBits, (unint64_t)v32._object, &v216._countAndFlagsBits);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                      _os_log_impl((void *)&_mh_execute_header, v29, v30, "HCI event: Status: Transaction Complete (%s) <--- --- ---", v31, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                    }

                    char v168 = 6;
                    goto LABEL_101;
                  case 7:
                    if (qword_1001D8F78 != -1) {
                      swift_once();
                    }
                    uint64_t v117 = type metadata accessor for Logger();
                    sub_100003E78(v117, (uint64_t)qword_1001DA360);
                    sub_1000065D0(a1, a2);
                    sub_1000065D0(a1, a2);
                    uint64_t v118 = Logger.logObject.getter();
                    os_log_type_t v119 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v118, v119))
                    {
                      os_log_t v213 = v18;
                      uint64_t v120 = (uint8_t *)swift_slowAlloc();
                      os_log_t v214 = (os_log_t)swift_slowAlloc();
                      v216._uint64_t countAndFlagsBits = (uint64_t)v214;
                      *(_DWORD *)uint64_t v120 = 136315138;
                      Swift::String v121 = Data.hexString()();
                      uint64_t v215 = sub_100005EB8(v121._countAndFlagsBits, (unint64_t)v121._object, &v216._countAndFlagsBits);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                      _os_log_impl((void *)&_mh_execute_header, v118, v119, "HCI event: Status: Transaction Error (%s) <--- --- ---", v120, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                    }

                    char v168 = 7;
LABEL_101:
                    sub_100036320(v168);
                    goto LABEL_102;
                  case 21:
                    if (qword_1001D8F78 != -1) {
                      swift_once();
                    }
                    uint64_t v127 = type metadata accessor for Logger();
                    sub_100003E78(v127, (uint64_t)qword_1001DA360);
                    sub_1000065D0(a1, a2);
                    sub_1000065D0(a1, a2);
                    uint64_t v61 = Logger.logObject.getter();
                    os_log_type_t v123 = static os_log_type_t.default.getter();
                    if (!os_log_type_enabled(v61, v123)) {
                      goto LABEL_84;
                    }
                    os_log_t v213 = v18;
                    char v124 = (uint8_t *)swift_slowAlloc();
                    v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                    *(_DWORD *)char v124 = 136315138;
                    Swift::String v128 = Data.hexString()();
                    uint64_t v215 = sub_100005EB8(v128._countAndFlagsBits, (unint64_t)v128._object, &v216._countAndFlagsBits);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_100006628(a1, a2);
                    sub_100006628(a1, a2);
                    uint64_t v126 = "HCI event: Status: Remove Card (%s)";
                    goto LABEL_79;
                  case 30:
                    if (qword_1001D8F78 != -1) {
                      swift_once();
                    }
                    uint64_t v129 = type metadata accessor for Logger();
                    uint64_t v130 = sub_100003E78(v129, (uint64_t)qword_1001DA360);
                    sub_1000065D0(a1, a2);
                    sub_1000065D0(a1, a2);
                    uint64_t v131 = Logger.logObject.getter();
                    os_log_type_t v132 = static os_log_type_t.default.getter();
                    v209 = (void *)v130;
                    if (os_log_type_enabled(v131, v132))
                    {
                      os_log_t v213 = v131;
                      __int16 v133 = (uint8_t *)swift_slowAlloc();
                      v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                      v208 = v133;
                      *(_DWORD *)__int16 v133 = 136315138;
                      v207[1] = v133 + 4;
                      Swift::String v134 = Data.hexString()();
                      uint64_t v215 = sub_100005EB8(v134._countAndFlagsBits, (unint64_t)v134._object, &v216._countAndFlagsBits);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                      _os_log_impl((void *)&_mh_execute_header, v213, v132, "HCI event: Status: Target Discovered (%s)", v208, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                    }
                    v210 = v21;
                    id v169 = *(id *)(v5 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate);
                    if (v169) {
                      id v169 = [v169 onUpdateWithEvent:1];
                    }
                    os_log_t v213 = v18;
                    uint64_t v170 = *(void *)(v5 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics);
                    uint64_t v171 = *(void *)(v170 + 56);
                    v172 = (os_unfair_lock_s *)(v171 + 32);
                    v173 = (uint64_t *)(v171 + 16);
                    LOBYTE(v216._countAndFlagsBits) = 3;
                    __chkstk_darwin(v169, v135);
                    os_unfair_lock_lock(v172);
                    sub_100039258(v173);
                    os_unfair_lock_unlock(v172);
                    uint64_t v176 = 1;
                    v208 = (uint8_t *)v170;
                    v177 = *(os_unfair_lock_s **)(v170 + 56);
                    v178 = v177 + 8;
                    uint64_t v179 = (uint64_t)&v177[4];
                    v180 = &byte_1001C4650;
                    do
                    {
                      char v181 = *v180++;
                      LOBYTE(v216._countAndFlagsBits) = v181;
                      __chkstk_darwin(v174, v175);
                      os_unfair_lock_lock(v178);
                      sub_100039270(v179);
                      os_unfair_lock_unlock(v178);
                      --v176;
                    }
                    while (v176);
                    if (qword_1001D8F80 == -1) {
                      goto LABEL_109;
                    }
                    goto LABEL_134;
                  default:
                    if (qword_1001D8F78 != -1) {
                      swift_once();
                    }
                    uint64_t v122 = type metadata accessor for Logger();
                    sub_100003E78(v122, (uint64_t)qword_1001DA360);
                    sub_1000065D0(a1, a2);
                    sub_1000065D0(a1, a2);
                    uint64_t v61 = Logger.logObject.getter();
                    os_log_type_t v123 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v61, v123))
                    {
                      os_log_t v213 = v18;
                      char v124 = (uint8_t *)swift_slowAlloc();
                      v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                      *(_DWORD *)char v124 = 136315138;
                      Swift::String v125 = Data.hexString()();
                      uint64_t v215 = sub_100005EB8(v125._countAndFlagsBits, (unint64_t)v125._object, &v216._countAndFlagsBits);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                      uint64_t v126 = "HCI event: Unknown Status (%s)";
LABEL_79:
                      _os_log_impl((void *)&_mh_execute_header, v61, v123, v126, v124, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
LABEL_84:
                      sub_100006628(a1, a2);
                      sub_100006628(a1, a2);
                    }
                    break;
                }
                goto LABEL_54;
              }
              if (qword_1001D8F78 != -1) {
                swift_once();
              }
              uint64_t v60 = type metadata accessor for Logger();
              sub_100003E78(v60, (uint64_t)qword_1001DA360);
              uint64_t v61 = Logger.logObject.getter();
              os_log_type_t v62 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v61, v62)) {
                goto LABEL_54;
              }
              unint64_t v63 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v63 = 0;
              _os_log_impl((void *)&_mh_execute_header, v61, v62, "Could not get status byte from HCI event: Status", v63, 2u);
              goto LABEL_53;
            }
            Class v49 = (uint64_t (*)(void))*((void *)v18->isa + 18);
            os_log_t v213 = v18;
            uint64_t v50 = v49();
            sub_1000F3910(2, v50, v51, &v216._countAndFlagsBits);
            uint64_t countAndFlagsBits = v216._countAndFlagsBits;
            unint64_t object = (unint64_t)v216._object;
            if (qword_1001D8F78 != -1) {
              swift_once();
            }
            os_log_t v214 = 0;
            uint64_t v54 = type metadata accessor for Logger();
            sub_100003E78(v54, (uint64_t)qword_1001DA360);
            sub_1000065D0(countAndFlagsBits, object);
            sub_1000065D0(countAndFlagsBits, object);
            uint64_t v55 = Logger.logObject.getter();
            os_log_type_t v56 = static os_log_type_t.default.getter();
            *(void *)&long long v212 = countAndFlagsBits;
            if (os_log_type_enabled(v55, v56))
            {
              unint64_t v57 = object;
              uint64_t v58 = (uint8_t *)swift_slowAlloc();
              v216._uint64_t countAndFlagsBits = swift_slowAlloc();
              *(_DWORD *)uint64_t v58 = 136315138;
              Swift::String v59 = Data.hexString()();
              uint64_t v215 = sub_100005EB8(v59._countAndFlagsBits, (unint64_t)v59._object, &v216._countAndFlagsBits);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t countAndFlagsBits = v212;
              swift_bridgeObjectRelease();
              sub_100006628(v212, v57);
              sub_100006628(v212, v57);
              _os_log_impl((void *)&_mh_execute_header, v55, v56, "HCI event: Status: PPSE Response: %s", v58, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              unint64_t object = v57;
              swift_slowDealloc();
            }
            else
            {
              sub_100006628(countAndFlagsBits, object);
              sub_100006628(countAndFlagsBits, object);
            }

            uint64_t v82 = sub_1000E2D60(countAndFlagsBits, object);
            id v83 = *(uint64_t (**)(void))(v5 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics);
            sub_100003EB0(&qword_1001DA340);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_100186100;
            *(unsigned char *)(inited + 32) = 18;
            int64_t v85 = v82[2];
            if (v85)
            {
              v210 = v83;
              uint64_t v211 = object;
              v216._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
              sub_10014B9C4(0, v85, 0);
              uint64_t v86 = (void *)v216._countAndFlagsBits;
              v209 = v82;
              uint64_t v87 = v82 + 5;
              do
              {
                uint64_t v88 = *(v87 - 1);
                unint64_t v89 = *v87;
                sub_1000065D0(v88, *v87);
                Swift::String v90 = Data.hexString()();
                sub_100006628(v88, v89);
                v216._uint64_t countAndFlagsBits = (uint64_t)v86;
                unint64_t v92 = v86[2];
                unint64_t v91 = v86[3];
                if (v92 >= v91 >> 1)
                {
                  sub_10014B9C4(v91 > 1, v92 + 1, 1);
                  uint64_t v86 = (void *)v216._countAndFlagsBits;
                }
                v87 += 2;
                v86[2] = v92 + 1;
                *(Swift::String *)&v86[2 * v92 + 4] = v90;
                --v85;
              }
              while (v85);
              swift_bridgeObjectRelease();
              unint64_t object = v211;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v86 = _swiftEmptyArrayStorage;
            }
            v216._uint64_t countAndFlagsBits = (uint64_t)v86;
            sub_100003EB0((uint64_t *)&unk_1001DA570);
            sub_100038F5C((unint64_t *)&qword_1001DD3B0, (uint64_t *)&unk_1001DA570);
            uint64_t v109 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v111 = v110;
            swift_bridgeObjectRelease();
            *(void *)(inited + 64) = &type metadata for String;
            *(void *)(inited + 40) = v109;
            *(void *)(inited + 48) = v111;
            unint64_t v112 = sub_1001051A8(inited);
            __chkstk_darwin(v112, v113);
            unint64_t v115 = (uint64_t *)&v114[4];
            uint64_t v116 = v114 + 8;
            os_unfair_lock_lock(v114 + 8);
            sub_100039240(v115);
            os_unfair_lock_unlock(v116);
            swift_bridgeObjectRelease();
            swift_release();
            sub_100006628(v212, object);
          }
          else
          {
            v216._uint64_t countAndFlagsBits = *(void *)TLVTag.eventOutcome.unsafeMutableAddressor();
            uint64_t v215 = isa;
            if (dispatch thunk of static Equatable.== infix(_:_:)())
            {
              if (qword_1001D8F78 != -1) {
                swift_once();
              }
              os_log_t v214 = 0;
              uint64_t v33 = type metadata accessor for Logger();
              uint64_t v34 = sub_100003E78(v33, (uint64_t)qword_1001DA360);
              swift_retain_n();
              uint64_t v35 = Logger.logObject.getter();
              uint64_t v36 = v18;
              os_log_type_t v37 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v35, v37))
              {
                os_log_t v213 = v34;
                uint64_t v38 = (uint8_t *)swift_slowAlloc();
                v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                *(_DWORD *)uint64_t v38 = 136315138;
                *(void *)&long long v212 = v38 + 4;
                uint64_t v39 = (*((uint64_t (**)(void))v36->isa + 19))();
                uint64_t v215 = sub_100005EB8(v39, v40, &v216._countAndFlagsBits);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v35, v37, "HCI event: Outcome Parameter Set: %s", v38, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_release_n();
              }
              sub_100003EB0(&qword_1001DA340);
              uint64_t v64 = swift_initStackObject();
              *(_OWORD *)(v64 + 16) = xmmword_100186100;
              *(unsigned char *)(v64 + 32) = 14;
              uint64_t v65 = (*((uint64_t (**)(void))v36->isa + 30))();
              if (v66)
              {
                unint64_t v67 = 0;
                uint64_t v65 = 0;
                *(void *)(v64 + 48) = 0;
                *(void *)(v64 + 56) = 0;
              }
              else
              {
                unint64_t v67 = &type metadata for UInt64;
              }
              *(void *)(v64 + 64) = v67;
              *(void *)(v64 + 40) = v65;
              unint64_t v68 = sub_1001051A8(v64);
              __chkstk_darwin(v68, v69);
              char v71 = (uint64_t *)&v70[4];
              uint64_t v72 = v70 + 8;
              os_unfair_lock_lock(v70 + 8);
              sub_100039240(v71);
              os_unfair_lock_unlock(v72);
              uint64_t v73 = swift_bridgeObjectRelease();
              uint64_t v74 = (*((uint64_t (**)(uint64_t))v36->isa + 18))(v73);
              unint64_t v76 = v75;
              __int16 v77 = sub_1000E328C(v74, v75);
              sub_100006628(v74, v76);
              if ((v77 & 0x100) == 0)
              {
                uint64_t v61 = Logger.logObject.getter();
                os_log_type_t v78 = static os_log_type_t.default.getter();
                if (!os_log_type_enabled(v61, v78))
                {
LABEL_54:
                  swift_release();

                  return;
                }
                uint64_t v79 = (uint8_t *)swift_slowAlloc();
                v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                *(_DWORD *)uint64_t v79 = 136315138;
                uint64_t v80 = SPRTransactionOutcomeStatus.description.getter();
                uint64_t v215 = sub_100005EB8(v80, v81, &v216._countAndFlagsBits);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v61, v78, "OPS Status: %s", v79, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
LABEL_53:
                swift_slowDealloc();
                goto LABEL_54;
              }
            }
            else
            {
              v216._uint64_t countAndFlagsBits = *(void *)TLVTag.eventErrorIndication.unsafeMutableAddressor();
              uint64_t v215 = isa;
              if (dispatch thunk of static Equatable.== infix(_:_:)())
              {
                if (qword_1001D8F78 != -1) {
                  swift_once();
                }
                os_log_t v214 = 0;
                uint64_t v41 = type metadata accessor for Logger();
                uint64_t v42 = sub_100003E78(v41, (uint64_t)qword_1001DA360);
                swift_retain_n();
                uint64_t v211 = v42;
                uint64_t v43 = Logger.logObject.getter();
                unint64_t v44 = v18;
                os_log_type_t v45 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v43, v45))
                {
                  uint64_t v46 = swift_slowAlloc();
                  v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                  *(_DWORD *)uint64_t v46 = 136315138;
                  os_log_t v213 = (os_log_t)(v46 + 4);
                  uint64_t v47 = (*((uint64_t (**)(void))v44->isa + 19))();
                  uint64_t v215 = sub_100005EB8(v47, v48, &v216._countAndFlagsBits);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v43, v45, "HCI event: Error Indication: %s", (uint8_t *)v46, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  swift_release_n();
                }
                sub_100003EB0(&qword_1001DA340);
                uint64_t v93 = swift_initStackObject();
                long long v212 = xmmword_100186100;
                *(_OWORD *)(v93 + 16) = xmmword_100186100;
                *(unsigned char *)(v93 + 32) = 8;
                uint64_t v94 = (uint64_t (*)(void))*((void *)v44->isa + 18);
                uint64_t v95 = v94();
                unint64_t v97 = v96;
                unint64_t v98 = Data.toUInt64(endianness:)(1, v95, v96);
                sub_100006628(v95, v97);
                *(void *)(v93 + 64) = &type metadata for UInt64;
                *(void *)(v93 + 40) = v98;
                unint64_t v99 = sub_1001051A8(v93);
                os_log_t v213 = (os_log_t)v207;
                __chkstk_darwin(v99, v100);
                uint64_t v102 = (uint64_t *)&v101[4];
                uint64_t v103 = v101 + 8;
                os_unfair_lock_lock(v101 + 8);
                sub_100039240(v102);
                os_unfair_lock_unlock(v103);
                uint64_t v104 = swift_bridgeObjectRelease();
                os_log_t v213 = v44;
                unint64_t v105 = ((uint64_t (*)(uint64_t))v94)(v104);
                uint64_t v107 = v105;
                unint64_t v108 = v106;
                switch(v106 >> 62)
                {
                  case 1uLL:
                    unint64_t v136 = HIDWORD(v105);
                    sub_100006628(v105, v106);
                    if (!__OFSUB__(v136, v107))
                    {
                      unint64_t v108 = (int)v136 - (int)v107;
                      goto LABEL_91;
                    }
                    __break(1u);
LABEL_134:
                    swift_once();
LABEL_109:
                    uint64_t v182 = type metadata accessor for OSSignposter();
                    sub_100003E78(v182, (uint64_t)qword_1001DA378);
                    uint64_t v183 = sub_1000452F0("ttp-reader-mode-reading", 23, 2, 0x7474206E69676562, 0xEE00646165722070, (unint64_t)"ttp-reader-mode-polling", 23, 2, 0x2070747420646E65uLL, 0xEF676E696C6C6F70);
                    if (((uint64_t (*)(uint64_t))v210)(v183) != 3) {
                      break;
                    }
                    uint64_t v184 = ((uint64_t (*)(void))v212)();
                    unint64_t v186 = v185;
                    uint64_t v187 = Data.at(index:)(2, v184, v185);
                    unint64_t v189 = v188;
                    sub_100006628(v184, v186);
                    if (v189 >> 60 == 15) {
                      goto LABEL_116;
                    }
                    Swift::UInt8 v190 = Data.toUInt8()();
                    sub_10000BF70(v187, v189);
                    switch(v190)
                    {
                      case 0xFFu:
                        int v191 = 2;
                        break;
                      case 0x13u:
                        int v191 = 0;
                        break;
                      case 0x11u:
                        int v191 = 1;
                        break;
                      default:
LABEL_116:
                        uint64_t v61 = Logger.logObject.getter();
                        os_log_type_t v192 = static os_log_type_t.error.getter();
                        if (os_log_type_enabled(v61, v192))
                        {
                          v193 = (uint8_t *)swift_slowAlloc();
                          *(_WORD *)v193 = 0;
                          _os_log_impl((void *)&_mh_execute_header, v61, v192, "Unexpected polling type in HCI event", v193, 2u);
                          swift_slowDealloc();
                        }
                        goto LABEL_54;
                    }
                    v194 = Logger.logObject.getter();
                    os_log_type_t v195 = static os_log_type_t.debug.getter();
                    if (os_log_type_enabled(v194, v195))
                    {
                      v196 = (uint8_t *)swift_slowAlloc();
                      v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                      *(_DWORD *)v196 = 136315138;
                      unint64_t v197 = 0xE100000000000000;
                      uint64_t v198 = 66;
                      if (v191 != 1)
                      {
                        uint64_t v198 = 0x6E776F6E6B6E75;
                        unint64_t v197 = 0xE700000000000000;
                      }
                      if (v191) {
                        uint64_t v199 = v198;
                      }
                      else {
                        uint64_t v199 = 65;
                      }
                      if (v191) {
                        unint64_t v200 = v197;
                      }
                      else {
                        unint64_t v200 = 0xE100000000000000;
                      }
                      uint64_t v215 = sub_100005EB8(v199, v200, &v216._countAndFlagsBits);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v194, v195, "pollingType is: %s", v196, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                    }
                    sub_100003EB0(&qword_1001DA340);
                    uint64_t v201 = swift_initStackObject();
                    *(_OWORD *)(v201 + 16) = xmmword_100186100;
                    *(unsigned char *)(v201 + 32) = 6;
                    *(void *)(v201 + 64) = &type metadata for UInt8;
                    *(unsigned char *)(v201 + 40) = 0xFF1113u >> (8 * v191);
                    unint64_t v202 = sub_1001051A8(v201);
                    __chkstk_darwin(v202, v203);
                    v205 = (uint64_t *)&v204[4];
                    v206 = v204 + 8;
                    os_unfair_lock_lock(v204 + 8);
                    sub_100039240(v205);
                    os_unfair_lock_unlock(v206);
                    swift_bridgeObjectRelease();
                    swift_release();
                    return;
                  case 2uLL:
                    uint64_t v138 = *(void *)(v105 + 16);
                    uint64_t v137 = *(void *)(v105 + 24);
                    sub_100006628(v105, v106);
                    unint64_t v108 = v137 - v138;
                    if (!__OFSUB__(v137, v138)) {
                      goto LABEL_91;
                    }
                    __break(1u);
LABEL_90:
                    sub_100006628(v107, v108);
                    unint64_t v108 = 0;
LABEL_91:
                    if (v108 == *(void *)TLVTag.TAG_DF8115_LENGTH.unsafeMutableAddressor())
                    {
                      uint64_t v139 = v94();
                      unint64_t v141 = v140;
                      TLVTag.OFFSET_ERROR_INDICATION_L2.unsafeMutableAddressor();
                      char v142 = Data.subscript.getter();
                      uint64_t v143 = sub_100006628(v139, v141);
                      uint64_t v144 = ((uint64_t (*)(uint64_t))v94)(v143);
                      unint64_t v146 = v145;
                      Class v147 = (uint64_t *)TLVTag.OFFSET_ERROR_INDICATION_SW12.unsafeMutableAddressor();
                      uint64_t v148 = sub_1000E3544(*v147, v147[1], v144, v146);
                      unint64_t v150 = v149;
                      sub_100006628(v144, v146);
                      LOWORD(v146) = Data.toUInt16(endianness:)(1, v148, v150);
                      sub_100006628(v148, v150);
                      v216._uint64_t countAndFlagsBits = 0;
                      v216._unint64_t object = (void *)0xE000000000000000;
                      _StringGuts.grow(_:)(33);
                      swift_bridgeObjectRelease();
                      v216._uint64_t countAndFlagsBits = 0xD000000000000015;
                      v216._unint64_t object = (void *)0x8000000100194700;
                      sub_100003EB0((uint64_t *)&unk_1001DD3C0);
                      uint64_t v151 = swift_allocObject();
                      *(_OWORD *)(v151 + 16) = v212;
                      *(void *)(v151 + 56) = &type metadata for UInt8;
                      *(void *)(v151 + 64) = &protocol witness table for UInt8;
                      *(unsigned char *)(v151 + 32) = v142;
                      v152._uint64_t countAndFlagsBits = String.init(format:_:)();
                      String.append(_:)(v152);
                      swift_bridgeObjectRelease();
                      v153._uint64_t countAndFlagsBits = 0x203A32315753202CLL;
                      v153._unint64_t object = (void *)0xE800000000000000;
                      String.append(_:)(v153);
                      uint64_t v154 = swift_allocObject();
                      *(_OWORD *)(v154 + 16) = v212;
                      *(void *)(v154 + 56) = &type metadata for UInt16;
                      *(void *)(v154 + 64) = &protocol witness table for UInt16;
                      *(_WORD *)(v154 + 32) = v146;
                      v155._uint64_t countAndFlagsBits = String.init(format:_:)();
                      String.append(_:)(v155);
                      uint64_t v156 = swift_bridgeObjectRelease();
                      Swift::String v218 = v216;
                      uint64_t v157 = ((uint64_t (*)(uint64_t))v94)(v156);
                      unint64_t v159 = v158;
                      TLVTag.OFFSET_ERROR_INDICATION_MSG_ON_ERROR.unsafeMutableAddressor();
                      uint64_t v160 = Data._Representation.subscript.getter();
                      unint64_t v162 = v161;
                      sub_100006628(v157, v159);
                      Data.toUInt8()();
                      sub_100006628(v160, v162);
                      v216._uint64_t countAndFlagsBits = 0;
                      v216._unint64_t object = (void *)0xE000000000000000;
                      _StringGuts.grow(_:)(18);
                      swift_bridgeObjectRelease();
                      v216._uint64_t countAndFlagsBits = 0xD000000000000010;
                      v216._unint64_t object = (void *)0x8000000100194720;
                      v163._uint64_t countAndFlagsBits = SPRTransactionMessage.description.getter();
                      String.append(_:)(v163);
                      swift_bridgeObjectRelease();
                      String.append(_:)(v216);
                      swift_bridgeObjectRelease();
                      Swift::String v164 = v218;
                      swift_bridgeObjectRetain_n();
                      uint64_t v165 = Logger.logObject.getter();
                      os_log_type_t v166 = static os_log_type_t.default.getter();
                      if (os_log_type_enabled(v165, v166))
                      {
                        v167 = (uint8_t *)swift_slowAlloc();
                        v216._uint64_t countAndFlagsBits = swift_slowAlloc();
                        *(_DWORD *)v167 = 136315138;
                        swift_bridgeObjectRetain();
                        uint64_t v215 = sub_100005EB8(v164._countAndFlagsBits, (unint64_t)v164._object, &v216._countAndFlagsBits);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease_n();
                        _os_log_impl((void *)&_mh_execute_header, v165, v166, "%s", v167, 0xCu);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        swift_slowDealloc();
                      }
                      else
                      {

                        swift_bridgeObjectRelease_n();
                      }
                      swift_beginAccess();
                      v217 = &type metadata for String;
                      Swift::String v216 = v218;
                      swift_beginAccess();
                      sub_1001058E0((uint64_t)&v216, 0xD000000000000015, 0x80000001001946E0);
                      swift_endAccess();
                    }
                    break;
                  case 3uLL:
                    goto LABEL_90;
                  default:
                    sub_100006628(v105, v106);
                    unint64_t v108 = BYTE6(v108);
                    goto LABEL_91;
                }
              }
            }
LABEL_102:
            swift_release();
          }
        }
        else
        {
          if (qword_1001D8F78 != -1) {
            swift_once();
          }
          uint64_t v13 = type metadata accessor for Logger();
          sub_100003E78(v13, (uint64_t)qword_1001DA360);
          swift_bridgeObjectRetain_n();
          uint64_t v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v14, v15))
          {
            uint64_t v16 = (uint8_t *)swift_slowAlloc();
            v216._uint64_t countAndFlagsBits = swift_slowAlloc();
            *(_DWORD *)uint64_t v16 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v215 = sub_100005EB8(a3, a4, &v216._countAndFlagsBits);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v14, v15, "receivedData from unrecognized applet: %s", v16, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
      }
      else
      {
LABEL_8:
        if (qword_1001D8F78 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_100003E78(v10, (uint64_t)qword_1001DA360);
        os_log_t v214 = (os_log_t)Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v214, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          v216._uint64_t countAndFlagsBits = swift_slowAlloc();
          *(_DWORD *)uint64_t v12 = 136315138;
          uint64_t v215 = sub_100005EB8(0xD000000000000021, 0x8000000100194760, &v216._countAndFlagsBits);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v214, v11, "%s receivedData isEmpty", v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      return;
  }
}

uint64_t sub_100036320(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_analytics];
  uint64_t v5 = *(os_unfair_lock_s **)(v4 + 56);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = (uint64_t *)&v5[4];
  LOBYTE(v139) = 1;
  os_unfair_lock_lock(v5 + 8);
  sub_1000388A8(v7);
  os_unfair_lock_unlock(v6);
  if (qword_1001D8F80 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for OSSignposter();
  sub_100003E78(v8, (uint64_t)qword_1001DA378);
  uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession];
  uint64_t v10 = sub_1000452F0("ttp-postprocessing", 18, 2, 0xD000000000000019, 0x8000000100194620, (unint64_t)"ttp-reader-mode-reading", 23, 2, 0x2070747420646E65uLL, 0xEC00000064616572);
  unint64_t v136 = v1;
  os_log_type_t v11 = *(os_unfair_lock_s **)(v4 + 56);
  uint64_t v12 = v11 + 8;
  uint64_t v13 = (uint64_t)&v11[4];
  LOBYTE(v139) = 0;
  __chkstk_darwin(v10, v14);
  os_unfair_lock_lock(v12);
  sub_1000388C4(v13);
  os_unfair_lock_unlock(v12);
  *(unsigned char *)(v4 + 66) = a1 == 6;
  *(unsigned char *)(v4 + 67) = a1 == 7;
  if (([v1 isCancelled] & 1) == 0)
  {
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003E78(v20, (uint64_t)qword_1001DA360);
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "ORReadOperation onUpdate(with: .complete)", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v24 = *(void **)&v2[OBJC_IVAR____TtC9SPREngine15ORReadOperation_delegate];
    if (v24) {
      [v24 onUpdateWithEvent:9];
    }
    uint64_t v25 = qword_1001D93D0;
    id v26 = v9;
    if (v25 != -1) {
      swift_once();
    }
    sub_100003E78(v20, (uint64_t)qword_1001DFC18);
    __int16 v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "getAnalyticsData()", v29, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v30 = (uint64_t *)TLVTag.provisionAppletAnalytics.unsafeMutableAddressor();
    uint64_t v31 = sub_1000B3298(*v30);
    unint64_t v33 = v32;
    uint64_t v134 = v31;

    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "analyticsData received", v36, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for TLV();
    id v68 = static TLV.decode(from:)(v134, v33);
    unint64_t v132 = v33;
    sub_100003EB0(&qword_1001DA340);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100189E90;
    *(unsigned char *)(inited + 32) = 0;
    id v133 = v68;
    *(void *)&long long v139 = v68;
    TLVTag.applicationIdentifier.unsafeMutableAddressor();
    sub_100003EB0((uint64_t *)&unk_1001DF8B0);
    sub_100038F5C((unint64_t *)&qword_1001DA550, (uint64_t *)&unk_1001DF8B0);
    uint64_t v70 = Collection<>.first(tag:)();
    if (v70)
    {
      uint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 152))(v70);
      uint64_t v73 = v72;
      swift_release();
      uint64_t v74 = &type metadata for String;
    }
    else
    {
      uint64_t v71 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      *(void *)(inited + 56) = 0;
    }
    *(void *)(inited + 40) = v71;
    *(void *)(inited + 48) = v73;
    *(void *)(inited + 64) = v74;
    *(unsigned char *)(inited + 72) = 1;
    *(void *)&long long v139 = v68;
    TLVTag.applicationLabel.unsafeMutableAddressor();
    uint64_t v82 = Collection<>.first(tag:)();
    if (v82
      && (uint64_t v83 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 296))(v82), v85 = v84, swift_release(), v85))
    {
      *(void *)(inited + 104) = &type metadata for String;
      *(void *)(inited + 80) = v83;
      *(void *)(inited + 88) = v85;
    }
    else
    {
      *(_OWORD *)(inited + 80) = 0u;
      *(_OWORD *)(inited + 96) = 0u;
    }
    *(unsigned char *)(inited + 112) = 4;
    *(void *)&long long v139 = v68;
    TLVTag.cryptogramInformationData.unsafeMutableAddressor();
    uint64_t v86 = Collection<>.first(tag:)();
    if (!v86
      || (__int16 v87 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 216))(v86), swift_release(), (v87 & 0x100) != 0))
    {
      *(_OWORD *)(inited + 120) = 0u;
      *(_OWORD *)(inited + 136) = 0u;
    }
    else
    {
      *(void *)(inited + 144) = &type metadata for UInt8;
      *(unsigned char *)(inited + 120) = v87;
    }
    *(unsigned char *)(inited + 152) = 10;
    *(void *)&long long v139 = v68;
    TLVTag.issuerApplicationData.unsafeMutableAddressor();
    uint64_t v88 = Collection<>.first(tag:)();
    if (v88)
    {
      uint64_t v89 = (*(uint64_t (**)(void))(*(void *)v88 + 152))();
      uint64_t v91 = v90;
      swift_release();
      unint64_t v92 = &type metadata for String;
    }
    else
    {
      uint64_t v89 = 0;
      uint64_t v91 = 0;
      unint64_t v92 = 0;
      *(void *)(inited + 176) = 0;
    }
    *(void *)(inited + 160) = v89;
    *(void *)(inited + 168) = v91;
    *(void *)(inited + 184) = v92;
    uint64_t v131 = (_OWORD *)(inited + 200);
    *(unsigned char *)(inited + 192) = 9;
    *(void *)&long long v139 = v133;
    TLVTag.thirdPartyData.unsafeMutableAddressor();
    uint64_t v93 = Collection<>.first(tag:)();
    if (v93)
    {
      uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v93 + 152))(v93);
      uint64_t v96 = v95;
      swift_release();
      *((void *)&v140 + 1) = &type metadata for String;
      swift_bridgeObjectRelease();
      *(void *)&long long v139 = v94;
      *((void *)&v139 + 1) = v96;
      sub_100006510(&v139, v131);
    }
    else
    {
      *(void *)&long long v139 = v133;
      TLVTag.cardInterfaceCapabilities.unsafeMutableAddressor();
      uint64_t v97 = Collection<>.first(tag:)();
      uint64_t v98 = swift_bridgeObjectRelease();
      if (v97)
      {
        uint64_t v99 = (*(uint64_t (**)(uint64_t))(*(void *)v97 + 152))(v98);
        uint64_t v101 = v100;
        swift_release();
        *(void *)(inited + 224) = &type metadata for String;
        *(void *)(inited + 200) = v99;
        *(void *)(inited + 208) = v101;
      }
      else
      {
        *uint64_t v131 = 0u;
        *(_OWORD *)(inited + 216) = 0u;
      }
    }
    unint64_t v115 = sub_1001051A8(inited);
    __chkstk_darwin(v115, v116);
    uint64_t v118 = (uint64_t *)&v117[4];
    os_log_type_t v119 = v117 + 8;
    os_unfair_lock_lock(v117 + 8);
    sub_100039240(v118);
    os_unfair_lock_unlock(v119);
    swift_bridgeObjectRelease();
    sub_100006628(v134, v132);
    uint64_t v55 = v136;
    id v37 = v26;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    if (a1 == 7)
    {
      if (v40)
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "getProvisionTrackError()", v41, 2u);
        swift_slowDealloc();
      }

      uint64_t v42 = (uint64_t *)TLVTag.provisionAppletTrackError.unsafeMutableAddressor();
      uint64_t v43 = sub_1000B3298(*v42);
      unint64_t v45 = v44;

      switch(v45 >> 62)
      {
        case 1uLL:
          uint64_t v102 = (int)v43;
          uint64_t v103 = v43 >> 32;
          goto LABEL_61;
        case 2uLL:
          uint64_t v102 = *(void *)(v43 + 16);
          uint64_t v103 = *(void *)(v43 + 24);
LABEL_61:
          if (v102 == v103) {
            goto LABEL_62;
          }
          goto LABEL_31;
        case 3uLL:
          goto LABEL_62;
        default:
          if ((v45 & 0xFF000000000000) != 0)
          {
LABEL_31:
            sub_100003EB0(&qword_1001DA340);
            uint64_t v48 = swift_initStackObject();
            *(_OWORD *)(v48 + 16) = xmmword_100186100;
            *(unsigned char *)(v48 + 32) = 20;
            Swift::String v49 = Data.hexString()();
            *(void *)(v48 + 64) = &type metadata for String;
            *(Swift::String *)(v48 + 40) = v49;
            unint64_t v50 = sub_1001051A8(v48);
            __chkstk_darwin(v50, v51);
            unint64_t v53 = (uint64_t *)&v52[4];
            uint64_t v54 = v52 + 8;
            os_unfair_lock_lock(v52 + 8);
            sub_100039240(v53);
            os_unfair_lock_unlock(v54);
            sub_100006628(v43, v45);
            swift_bridgeObjectRelease();
            uint64_t v55 = v136;
          }
          else
          {
LABEL_62:
            sub_100006628(v43, v45);
          }
          uint64_t v104 = &v55[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionReadResult];
          swift_beginAccess();
          uint64_t v105 = *(void *)v104;
          if (*(void *)(v105 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v106 = sub_10000C4B0(0xD000000000000015, 0x80000001001946E0);
            if (v107)
            {
              sub_100006570(*(void *)(v105 + 56) + 32 * v106, (uint64_t)&v139);
            }
            else
            {
              long long v139 = 0u;
              long long v140 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v140 + 1))
            {
              if (swift_dynamicCast())
              {
                uint64_t v108 = v137;
                uint64_t v109 = v138;
                goto LABEL_73;
              }
LABEL_72:
              uint64_t v108 = 0;
              uint64_t v109 = (void *)0xE000000000000000;
LABEL_73:
              uint64_t v110 = sub_10002AB8C(20007, v108, v109, 0);
              uint64_t v111 = *(void **)&v55[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError];
              *(void *)&v55[OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError] = v110;

              char v75 = 0;
              return sub_10002F134(v75);
            }
          }
          else
          {
            long long v139 = 0u;
            long long v140 = 0u;
          }
          sub_100008970((uint64_t)&v139);
          goto LABEL_72;
      }
    }
    if (v40)
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "getProvisionDataBlob()", v46, 2u);
      swift_slowDealloc();
    }

    uint64_t v47 = (uint64_t *)TLVTag.provisionAppletDataBlob.unsafeMutableAddressor();
    uint64_t v56 = sub_1000B3298(*v47);
    unint64_t v58 = v57;

    Swift::String v59 = Logger.logObject.getter();
    uint64_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, (os_log_type_t)v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v60, "provisionDataBlob received", v61, 2u);
      swift_slowDealloc();
    }

    *((void *)&v140 + 1) = &type metadata for Data;
    *(void *)&long long v139 = v56;
    *((void *)&v139 + 1) = v58;
    swift_beginAccess();
    sub_1000065D0(v56, v58);
    sub_1001058E0((uint64_t)&v139, 0xD000000000000011, 0x8000000100194690);
    swift_endAccess();
    type metadata accessor for TLV();
    *(void *)&long long v139 = static TLV.decode(from:)(v56, v58);
    TLVTag.blobDefinition.unsafeMutableAddressor();
    sub_100003EB0((uint64_t *)&unk_1001DF8B0);
    sub_100038F5C((unint64_t *)&qword_1001DA550, (uint64_t *)&unk_1001DF8B0);
    uint64_t v76 = Collection<>.first(tag:)();
    uint64_t v77 = swift_bridgeObjectRelease();
    if (v76)
    {
      uint64_t v135 = v76;
      uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 144))(v77);
      unint64_t v80 = v79;
      id v81 = static TLV.decode(from:)(v78, v79);
      sub_100006628(v78, v80);
      sub_100003EB0(&qword_1001DA340);
      uint64_t v120 = swift_initStackObject();
      *(_OWORD *)(v120 + 16) = xmmword_1001861D0;
      *(unsigned char *)(v120 + 32) = 2;
      *(void *)&long long v139 = v81;
      TLVTag.provisionDataCipherText.unsafeMutableAddressor();
      uint64_t v121 = Collection<>.first(tag:)();
      uint64_t v122 = swift_bridgeObjectRelease();
      if (v121)
      {
        uint64_t v123 = (*(uint64_t (**)(uint64_t))(*(void *)v121 + 128))(v122);
        uint64_t v122 = swift_release();
        char v124 = &type metadata for Int;
      }
      else
      {
        uint64_t v123 = 0;
        char v124 = 0;
        *(void *)(v120 + 48) = 0;
        *(void *)(v120 + 56) = 0;
      }
      *(void *)(v120 + 40) = v123;
      *(void *)(v120 + 64) = v124;
      *(unsigned char *)(v120 + 72) = 16;
      uint64_t v125 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 128))(v122);
      *(void *)(v120 + 104) = &type metadata for Int;
      *(void *)(v120 + 80) = v125;
      unint64_t v126 = sub_1001051A8(v120);
      __chkstk_darwin(v126, v127);
      uint64_t v129 = (uint64_t *)&v128[4];
      uint64_t v130 = v128 + 8;
      os_unfair_lock_lock(v128 + 8);
      sub_100039240(v129);
      os_unfair_lock_unlock(v130);
      sub_100006628(v56, v58);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v112 = Logger.logObject.getter();
      os_log_type_t v113 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v112, v113))
      {
        unint64_t v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v114 = 0;
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "cannot parse provisionDataBlob for analytics", v114, 2u);
        swift_slowDealloc();
      }

      sub_10002AB8C(20008, 0xD00000000000002CLL, (void *)0x80000001001946B0, 0);
      swift_willThrow();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        uint64_t v65 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v64 = 138412290;
        swift_errorRetain();
        uint64_t v66 = v56;
        uint64_t v67 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v139 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v65 = v67;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "cannot parse provisionDataBlob for analytics. %@", v64, 0xCu);
        sub_100003EB0((uint64_t *)&unk_1001DA540);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        sub_100006628(v66, v58);
      }
      else
      {
        sub_100006628(v56, v58);
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    char v75 = 1;
    return sub_10002F134(v75);
  }
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100003E78(v15, (uint64_t)qword_1001DA360);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "ORReadOperation cancelled before postProvisionReadProcessing", v18, 2u);
    swift_slowDealloc();
  }

  return sub_10002EF98();
}

uint64_t type metadata accessor for ORReadOperation()
{
  return self;
}

uint64_t sub_1000377A8(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  sub_100038D8C(a2, a3);
  unint64_t v6 = sub_10006C6A0(0xA0u, 0x72u, a1, 0, a2, a3);
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  __int16 v12 = v11;
  if (qword_1001D93D0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003E78(v13, (uint64_t)qword_1001DFC18);
  sub_1000065D0(v8, v10);
  sub_1000065D0(v8, v10);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t type = v15;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    if (a1) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = 0x41545320524F4620;
    }
    if (a1) {
      unint64_t v18 = 0xE000000000000000;
    }
    else {
      unint64_t v18 = 0xEA00000000005452;
    }
    sub_100005EB8(v17, v18, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    log = v14;
    uint64_t v19 = v8;
    uint64_t v20 = sub_10006C13C(v6 & 0xFFFFFFFFFFFFLL, v8, v10, v12);
    unint64_t v21 = v10;
    unint64_t v23 = v22;
    Swift::String v24 = Data.hexString()();
    uint64_t v25 = v20;
    uint64_t v8 = v19;
    unint64_t v26 = v23;
    unint64_t v10 = v21;
    sub_100006628(v25, v26);
    sub_100005EB8(v24._countAndFlagsBits, (unint64_t)v24._object, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v19, v21);
    sub_100006628(v19, v21);
    _os_log_impl((void *)&_mh_execute_header, log, type, "CAPDU (MANAGE TAP)%s: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v27 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    sub_100006628(v8, v10);
    sub_100006628(v8, v10);

    unint64_t v27 = v6 & 0xFFFFFFFFFFFFLL;
  }
  sub_1000F4FB4(v27, v8, v10, v12, 1, (uint64_t)v45);
  uint64_t v28 = v45[0];
  unint64_t v29 = v45[1];
  uint64_t v30 = v45[3];
  unint64_t v31 = v45[4];
  sub_100038DA0((uint64_t)v45, (uint64_t)v46);
  if (v47 >> 60 == 15)
  {
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error from transceive", v34, 2u);
      swift_slowDealloc();
    }

    sub_100038E08();
    swift_allocError();
    *os_log_type_t v35 = 0;
    swift_willThrow();
  }
  else
  {
    int v44 = v48;
    sub_1000065D0(v28, v29);
    sub_1000065D0(v30, v31);
    sub_1000065D0(v28, v29);
    sub_1000065D0(v30, v31);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      Swift::String v39 = Data.hexString()();
      sub_100005EB8(v39._countAndFlagsBits, (unint64_t)v39._object, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100038E5C((uint64_t)v45);
      sub_100038E5C((uint64_t)v45);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "RAPDU: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100038E5C((uint64_t)v45);
      sub_100038E5C((uint64_t)v45);
    }

    if (v44 != 36864)
    {
      sub_100038E08();
      swift_allocError();
      *BOOL v40 = v44;
      swift_willThrow();
    }
    sub_100038E5C((uint64_t)v45);
  }
  return sub_100006628(v8, v10);
}

uint64_t sub_100037D44(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t *v1 = result;
  }
  return result;
}

id sub_100037E04(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v92 = a5;
  uint64_t v109 = a4;
  uint64_t v104 = a2;
  id v100 = a1;
  uint64_t v89 = type metadata accessor for OSSignpostError();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89, v8);
  __int16 v87 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v96 = *(void *)(v10 - 8);
  uint64_t v97 = v10;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v94 = (char *)v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v95 = (char *)v85 - v15;
  uint64_t v106 = type metadata accessor for OSSignpostID();
  uint64_t v16 = *(void *)(v106 - 8);
  uint64_t v18 = __chkstk_darwin(v106, v17);
  uint64_t v99 = (char *)v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  char v107 = (char *)v85 - v22;
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (char *)v85 - v24;
  dispatch_semaphore_t v26 = dispatch_semaphore_create(0);
  uint64_t v27 = swift_allocObject();
  uint64_t v103 = v27;
  *(void *)(v27 + 16) = 0;
  uint64_t v98 = (void **)(v27 + 16);
  if (qword_1001D8F80 != -1) {
    swift_once();
  }
  uint64_t v101 = a6;
  uint64_t v28 = type metadata accessor for OSSignposter();
  uint64_t v29 = sub_100003E78(v28, (uint64_t)qword_1001DA378);
  static OSSignpostID.exclusive.getter();
  uint64_t v91 = v29;
  uint64_t v30 = OSSignposter.logHandle.getter();
  os_signpost_type_t v31 = static os_signpost_type_t.begin.getter();
  char v32 = OS_os_log.signpostsEnabled.getter();
  uint64_t v102 = a3;
  if (v32)
  {
    os_log_type_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v34 = (void *)((v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    os_log_type_t v35 = v107;
    uint64_t v105 = (uint64_t)v26;
    uint64_t v36 = v16;
    uint64_t v37 = v106;
    v33(v107, v25, v106);
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    os_signpost_id_t v39 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, v31, v39, "ttp-session-start", "begin pending session for ttp", v38, 2u);
    BOOL v40 = v35;
    swift_slowDealloc();

    uint64_t v41 = v37;
    uint64_t v16 = v36;
    dispatch_semaphore_t v26 = (dispatch_semaphore_t)v105;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v35, v41);
  }
  else
  {

    os_log_type_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v34 = (void *)((v16 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000);
    uint64_t v41 = v106;
    BOOL v40 = v107;
  }
  uint64_t v86 = v33;
  v85[1] = v34;
  v33(v40, v25, v41);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v105 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v90 = *(void (**)(char *, uint64_t))(v16 + 8);
  v90(v25, v41);
  id v42 = [self sharedHardwareManager];
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v103;
  *(void *)(v43 + 24) = v26;
  aBlock[4] = sub_100038888;
  void aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005210;
  aBlock[3] = &unk_1001C6D90;
  int v44 = _Block_copy(aBlock);
  swift_retain();
  unint64_t v45 = v26;
  swift_release();
  id v46 = [v42 startSecureElementReaderSession:v44];
  _Block_release(v44);

  unint64_t v47 = v94;
  static DispatchTime.now()();
  unsigned __int16 v48 = v95;
  + infix(_:_:)();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v96 + 8);
  unint64_t v50 = v47;
  uint64_t v51 = v97;
  v49(v50, v97);
  OS_dispatch_semaphore.wait(timeout:)();
  v49(v48, v51);
  char v52 = static DispatchTimeoutResult.== infix(_:_:)();
  id v53 = v109;
  uint64_t v54 = v104;
  if (v52)
  {
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100003E78(v55, (uint64_t)qword_1001DA360);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "startSecureElementReaderSession() TIMED OUT", v58, 2u);
      swift_slowDealloc();
    }

    [v46 endSession];
    id v53 = v109;
  }
  Swift::String v59 = v98;
  swift_beginAccess();
  uint64_t v60 = *v59;
  uint64_t v61 = v99;
  if (v60)
  {
    uint64_t v97 = (uint64_t)v46;
    os_log_type_t v62 = v60;
    os_log_type_t v63 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    LODWORD(v96) = static os_signpost_type_t.end.getter();
    char v64 = OS_os_log.signpostsEnabled.getter();
    v85[0] = v45;
    uint64_t v98 = v62;
    if (v64)
    {
      swift_retain();
      uint64_t v65 = v87;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v66 = v88;
      uint64_t v67 = v89;
      if ((*(unsigned int (**)(char *, uint64_t))(v88 + 88))(v65, v89) == enum case for OSSignpostError.doubleEnd(_:))
      {
        id v68 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
        id v68 = "end obtained session for ttp";
      }
      uint64_t v70 = v90;
      os_signpost_type_t v71 = v96;
      uint64_t v72 = v61;
      uint64_t v73 = v61;
      uint64_t v74 = v106;
      v86(v107, v72, v106);
      char v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v75 = 0;
      os_signpost_id_t v76 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, v71, v76, "ttp-session-start", v68, v75, 2u);
      swift_slowDealloc();

      uint64_t v77 = v107;
      v70(v73, v74);
      uint64_t v54 = v104;
      v70(v77, v74);
    }
    else
    {

      v90(v61, v106);
    }
    uint64_t v69 = v102;
    sub_100009300(v102, (uint64_t)aBlock);
    id v53 = objc_allocWithZone((Class)type metadata accessor for ORReadOperation());
    swift_unknownObjectRetain();
    uint64_t v78 = (uint64_t)v109;
    swift_retain();
    uint64_t v79 = v101;
    swift_retain();
    unint64_t v80 = v98;
    id v81 = v100;
    uint64_t v82 = v93;
    sub_10002CEC8(v80, v81, v54, (uint64_t)aBlock, v78, v92, v79);
    if (!v82)
    {
      id v53 = v83;

      swift_unknownObjectRelease();
      swift_release();
      swift_release();

      swift_unknownObjectRelease();
      swift_release();

      sub_100006520(v69);
      swift_release();
      return v53;
    }
    [v80 endSession];
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_release();

    swift_unknownObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    sub_10002AB8C(20001, 0xD000000000000029, (void *)0x80000001001944A0, 0);
    swift_willThrow();

    swift_unknownObjectRelease();
    swift_release();

    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v69 = v102;
  }
  sub_100006520(v69);
  swift_release();
  return v53;
}

uint64_t sub_100038810()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038848()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100038888(void *a1, void *a2)
{
  return sub_10002E16C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100038890(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000388A0()
{
  return swift_release();
}

uint64_t sub_1000388A8(uint64_t *a1)
{
  return sub_100040644(a1, *(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_1000388C4(uint64_t a1)
{
  return sub_100040660(a1, *(unsigned __int8 **)(v1 + 16));
}

unint64_t sub_1000388E0()
{
  unint64_t result = qword_1001DA560;
  if (!qword_1001DA560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA560);
  }
  return result;
}

uint64_t sub_100038934()
{
  sub_100006628(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_10003897C()
{
  sub_100033F6C(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

void sub_1000389B0()
{
  sub_1000389B8(*(void *)(v0 + 24));
}

void sub_1000389B8(uint64_t a1)
{
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v2 = sub_10000C46C((uint64_t)v11), (v3 & 1) != 0))
  {
    sub_100006570(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v12);
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  sub_10000E2D4((uint64_t)v11);
  if (!*((void *)&v13 + 1))
  {
    sub_100008970((uint64_t)&v12);
    return;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    swift_bridgeObjectRelease();
    if (qword_1001D8F78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003E78(v4, (uint64_t)qword_1001DA360);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    uint64_t v8 = "Type A polling didEnd";
    goto LABEL_19;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0) {
    return;
  }
  if (qword_1001D8F78 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DA360);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    uint64_t v8 = "Type B polling didEnd";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
    swift_slowDealloc();
  }
LABEL_20:
}

uint64_t sub_100038C60(uint64_t *a1)
{
  return sub_1000AF7B0(a1, **(unsigned __int8 **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100038C84()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100038CC4()
{
  sub_1000331BC(*(void *)(v0 + 24));
}

uint64_t sub_100038CEC()
{
  return _swift_deallocObject(v0, 25, 7);
}

void sub_100038D24()
{
  sub_100032924(*(unsigned char *)(v0 + 24));
}

uint64_t sub_100038D50()
{
  return sub_100032EF0();
}

void sub_100038D74()
{
  sub_100030274(*(char **)(v0 + 16));
}

id sub_100038D7C()
{
  return sub_100030358(*(void *)(v0 + 16));
}

uint64_t sub_100038D84()
{
  return sub_10002F7AC(*(void *)(v0 + 16));
}

uint64_t sub_100038D8C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000065D0(a1, a2);
  }
  return a1;
}

uint64_t sub_100038DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DA590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100038E08()
{
  unint64_t result = qword_1001DF8C0;
  if (!qword_1001DF8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DF8C0);
  }
  return result;
}

uint64_t sub_100038E5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100038E90(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a2 >> 60 != 15)
  {
    sub_100006628(result, a2);
    return sub_100006628(a4, a5);
  }
  return result;
}

uint64_t sub_100038EE0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100038F18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100038F50()
{
}

uint64_t sub_100038F5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100003EF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100038FA0()
{
  return sub_10002EA30(*(void *)(v0 + 16));
}

double sub_100038FA8@<D0>(_OWORD *a1@<X8>)
{
  return sub_1000CE2E8(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_100038FC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for ORReadOperation.State(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ORReadOperation.State(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ORReadOperation.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003918CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ORReadOperation.State()
{
  return &type metadata for ORReadOperation.State;
}

uint64_t sub_100039240(uint64_t *a1)
{
  return sub_10002C858(a1);
}

uint64_t sub_100039258(uint64_t *a1)
{
  return sub_1000388A8(a1);
}

uint64_t sub_100039270(uint64_t a1)
{
  return sub_1000388C4(a1);
}

uint64_t sub_100039288()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DA5D0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DA5D0);
  if (qword_1001D9250 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1010);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100039350()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NullAuditor()
{
  return self;
}

uint64_t type metadata accessor for NullAuditorFactory()
{
  return self;
}

uint64_t sub_1000393AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NullAuditor();
  uint64_t result = swift_initStaticObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1001C7208;
  *a1 = result;
  return result;
}

void sub_1000393F0()
{
  if (qword_1001D8F88 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DA5D0);
  swift_bridgeObjectRetain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 33555202;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 6) = 256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 9) = 2080;
    uint64_t v4 = Dictionary.description.getter();
    sub_100005EB8(v4, v5, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "NullAuditor.audit(event: %hu, attestationOptions: %hhu, userInfo: %s)", (uint8_t *)v3, 0x13u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100039600()
{
  sub_100003EB0(&qword_1001DA8B8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001861D0;
  *(void *)(v0 + 32) = SecPolicyCreateBasicX509();
  *(void *)(v0 + 40) = SecPolicyCreateRevocation(3uLL);
  specialized Array._endMutation()();
  sub_100003EB0(&qword_1001DA8C0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t result = swift_bridgeObjectRelease();
  qword_1001E0CE8 = (uint64_t)isa;
  return result;
}

void sub_10003969C(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 56;
  swift_beginAccess();
  sub_100039F54(v1 + 56, (uint64_t)&v18);
  if (v19)
  {
LABEL_13:
    sub_10001F1F0(&v18, a1);
    return;
  }
  sub_100039FBC((uint64_t)&v18);
  sub_100009300(v1 + 232, (uint64_t)v17);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t ApplePinned = SecPolicyCreateApplePinned();

  if (ApplePinned)
  {
    int v8 = *(unsigned __int8 *)(v1 + 272);
    sub_100003EB0((uint64_t *)&unk_1001DA5A0);
    if (v8 == 1)
    {
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_100189A10;
      if (qword_1001D8FA0 != -1) {
        swift_once();
      }
      uint64_t v10 = (void *)qword_1001E0CF8;
      *(void *)(v9 + 32) = qword_1001E0CF8;
      uint64_t v11 = qword_1001D8F98;
      id v12 = v10;
      if (v11 != -1) {
        swift_once();
      }
      long long v13 = (void *)qword_1001E0CF0;
      *(void *)(v9 + 40) = qword_1001E0CF0;
    }
    else
    {
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_100189F80;
      if (qword_1001D8F98 != -1) {
        swift_once();
      }
      long long v13 = (void *)qword_1001E0CF0;
      *(void *)(v9 + 32) = qword_1001E0CF0;
    }
    *(void *)&long long v18 = v9;
    specialized Array._endMutation()();
    uint64_t v14 = v18;
    id v15 = v13;
    uint64_t v19 = &type metadata for CertificateTrustVerifier;
    uint64_t v20 = &off_1001CC0F0;
    uint64_t v16 = (void *)swift_allocObject();
    *(void *)&long long v18 = v16;
    sub_10001F1F0(v17, (uint64_t)(v16 + 2));
    v16[7] = ApplePinned;
    v16[8] = v14;
    v16[9] = 0;
    sub_100009300((uint64_t)&v18, (uint64_t)v17);
    swift_beginAccess();
    sub_10003A054((uint64_t)v17, v3);
    swift_endAccess();
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_100039948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 96;
  swift_beginAccess();
  sub_100039F54(v1 + 96, (uint64_t)&v26);
  if (!v27)
  {
    sub_100039FBC((uint64_t)&v26);
    sub_100009300(v1 + 232, (uint64_t)v25);
    if (qword_1001D8F90 != -1) {
      swift_once();
    }
    NSString v4 = (void *)qword_1001E0CE8;
    int v5 = *(unsigned __int8 *)(v1 + 272);
    sub_100003EB0((uint64_t *)&unk_1001DA5A0);
    if (v5 == 1)
    {
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_100189F90;
      uint64_t v7 = qword_1001D8FA0;
      id v8 = v4;
      if (v7 != -1) {
        swift_once();
      }
      uint64_t v9 = (void *)qword_1001E0CF8;
      *(void *)(v6 + 32) = qword_1001E0CF8;
      uint64_t v10 = qword_1001D8FA8;
      id v11 = v9;
      if (v10 != -1) {
        swift_once();
      }
      id v12 = (void *)qword_1001E0D00;
      *(void *)(v6 + 40) = qword_1001E0D00;
      uint64_t v13 = qword_1001D8F98;
      id v14 = v12;
      if (v13 != -1) {
        swift_once();
      }
      id v15 = (void *)qword_1001E0CF0;
      *(void *)(v6 + 48) = qword_1001E0CF0;
    }
    else
    {
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_100189A10;
      uint64_t v16 = qword_1001D8FA8;
      id v17 = v4;
      if (v16 != -1) {
        swift_once();
      }
      long long v18 = (void *)qword_1001E0D00;
      *(void *)(v6 + 32) = qword_1001E0D00;
      uint64_t v19 = qword_1001D8F98;
      id v20 = v18;
      if (v19 != -1) {
        swift_once();
      }
      id v15 = (void *)qword_1001E0CF0;
      *(void *)(v6 + 40) = qword_1001E0CF0;
    }
    *(void *)&long long v26 = v6;
    specialized Array._endMutation()();
    uint64_t v21 = v26;
    id v22 = v15;
    uint64_t v27 = &type metadata for CertificateTrustVerifier;
    uint64_t v28 = &off_1001CC0F0;
    uint64_t v23 = (void *)swift_allocObject();
    *(void *)&long long v26 = v23;
    sub_10001F1F0(v25, (uint64_t)(v23 + 2));
    v23[7] = v4;
    v23[8] = v21;
    v23[9] = 0;
    sub_100009300((uint64_t)&v26, (uint64_t)v25);
    swift_beginAccess();
    sub_10003A054((uint64_t)v25, v3);
    swift_endAccess();
  }
  return sub_10001F1F0(&v26, a1);
}

uint64_t sub_100039C24@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  sub_100039F54(v1 + 136, (uint64_t)&v6);
  if (!v7)
  {
    sub_100039FBC((uint64_t)&v6);
    uint64_t v7 = &type metadata for CertificateTimeVerifier;
    id v8 = &off_1001CC108;
    uint64_t v3 = swift_allocObject();
    *(void *)&long long v6 = v3;
    sub_100009300(v1 + 232, v3 + 24);
    *(void *)(v3 + 16) = *(void *)(v1 + 216);
    sub_100009300((uint64_t)&v6, (uint64_t)v5);
    swift_beginAccess();
    sub_10003A054((uint64_t)v5, v1 + 136);
    swift_endAccess();
  }
  return sub_10001F1F0(&v6, a1);
}

uint64_t sub_100039D18@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  sub_100039F54(v1 + 176, (uint64_t)&v6);
  if (!v7)
  {
    sub_100039FBC((uint64_t)&v6);
    uint64_t v7 = &type metadata for CertificateTimeVerifier;
    id v8 = &off_1001CC108;
    uint64_t v3 = swift_allocObject();
    *(void *)&long long v6 = v3;
    sub_100009300(v1 + 232, v3 + 24);
    *(void *)(v3 + 16) = *(void *)(v1 + 224);
    sub_100009300((uint64_t)&v6, (uint64_t)v5);
    swift_beginAccess();
    sub_10003A054((uint64_t)v5, v1 + 176);
    swift_endAccess();
  }
  return sub_10001F1F0(&v6, a1);
}

SecCertificateRef sub_100039E0C(uint64_t a1)
{
  return sub_100039E78(a1, 0xD000000000000318, 0x8000000100194E30, (SecCertificateRef *)&qword_1001E0CF0);
}

SecCertificateRef sub_100039E30(uint64_t a1)
{
  return sub_100039E78(a1, 0xD000000000000324, 0x8000000100194B00, (SecCertificateRef *)&qword_1001E0CF8);
}

SecCertificateRef sub_100039E54(uint64_t a1)
{
  return sub_100039E78(a1, 0xD000000000000318, 0x8000000100195150, (SecCertificateRef *)&qword_1001E0D00);
}

SecCertificateRef sub_100039E78(uint64_t a1, uint64_t a2, uint64_t a3, SecCertificateRef *a4)
{
  type metadata accessor for SecCertificate(0);
  SecCertificateRef result = static SecCertificateRef.parse(base64Encoded:)();
  if (result) {
    *a4 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_100039ED0()
{
  sub_100039FBC(v0 + 16);
  sub_100039FBC(v0 + 56);
  sub_100039FBC(v0 + 96);
  sub_100039FBC(v0 + 136);
  sub_100039FBC(v0 + 176);
  sub_100006520(v0 + 232);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CertificateVerifierFactory()
{
  return self;
}

uint64_t sub_100039F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DA8B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039FBC(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001DA8B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003A01C()
{
  sub_100006520(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10003A054(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DA8B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003A0BC()
{
  sub_100006520(v0 + 16);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10003A104(uint64_t a1)
{
  sub_1000F85DC((uint64_t)v21);
  if (!v1)
  {
    uint64_t v3 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    uint64_t v4 = (int *)type metadata accessor for Settings();
    char v5 = *(unsigned char *)(v3 + v4[7]);
    uint64_t v6 = *(void *)(v3 + v4[11]);
    uint64_t v7 = *(void *)(v3 + v4[12]);
    uint64_t v8 = sub_10001F1A0((uint64_t)v21, v22);
    __chkstk_darwin(v8, v8);
    uint64_t v10 = (void *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v11 + 16))(v10);
    uint64_t v12 = *v10;
    uint64_t v13 = type metadata accessor for DefaultSecureTimeKeeper();
    v20[3] = v13;
    v20[4] = &off_1001C84C8;
    v20[0] = v12;
    type metadata accessor for CertificateVerifierFactory();
    a1 = swift_allocObject();
    uint64_t v14 = sub_10001F1A0((uint64_t)v20, v13);
    __chkstk_darwin(v14, v14);
    uint64_t v16 = (void *)((char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    uint64_t v18 = *v16;
    *(void *)(a1 + 256) = v13;
    *(void *)(a1 + 264) = &off_1001C84C8;
    *(void *)(a1 + 232) = v18;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(void *)(a1 + 208) = 0;
    *(unsigned char *)(a1 + 272) = (v5 & 1) == 0;
    *(void *)(a1 + 216) = v6;
    *(void *)(a1 + 224) = v7;
    sub_100006520((uint64_t)v20);
    sub_100006520((uint64_t)v21);
  }
  return a1;
}

uint64_t type metadata accessor for DefaultTimeKeeper()
{
  return self;
}

id sub_10003A388()
{
  if (qword_1001D9410 != -1) {
    swift_once();
  }
  uint64_t v0 = static GlobalState.shared;
  id result = [*(id *)(static GlobalState.shared + 72) lock];
  while (*(uint64_t *)(v0 + 96) > 0 || *(unsigned char *)(v0 + 80) == 1)
    id result = [*(id *)(v0 + 72) wait];
  uint64_t v2 = *(void *)(v0 + 88);
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  *(void *)(v0 + 88) = v4;
  [*(id *)(v0 + 72) unlock];
  unsigned int v5 = *(_DWORD *)(v0 + 52);
  int v6 = *(unsigned __int8 *)(v0 + 56);
  id result = [*(id *)(v0 + 72) lock];
  uint64_t v7 = *(void *)(v0 + 88);
  BOOL v3 = __OFSUB__(v7, 1);
  uint64_t v8 = v7 - 1;
  if (v3)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  *(void *)(v0 + 88) = v8;
  if (!v8) {
    [*(id *)(v0 + 72) broadcast];
  }
  if (v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v5;
  }
  [*(id *)(v0 + 72) unlock];
  return (id)v9;
}

uint64_t sub_10003A4A4()
{
  unint64_t v0 = sub_100106C04(&off_1001C4030);
  sub_100003EB0(&qword_1001DA998);
  uint64_t result = swift_arrayDestroy();
  qword_1001E0D08 = v0;
  return result;
}

unint64_t sub_10003A4FC(uint64_t *a1)
{
  return _sSC22SPRPINAppletProxyErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC22SPRPINAppletProxyErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D8FB0 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E0D08;
  if (*(void *)(qword_1001E0D08 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0xD000000000000014;
  }
  return v5;
}

unint64_t sub_10003A604(uint64_t a1)
{
  unint64_t result = sub_10003A62C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003A62C()
{
  unint64_t result = qword_1001D9A40;
  if (!qword_1001D9A40)
  {
    type metadata accessor for PINAppletProxyError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9A40);
  }
  return result;
}

uint64_t sub_10003A684()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DA9A0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DA9A0);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_10003A74C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1;
  if (v1 == (void *)1)
  {
    uint64_t v2 = sub_10003A7AC(v0);
    uint64_t v3 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v2;
    id v4 = v2;
    sub_10003C5F8(v3);
  }
  sub_10003C608(v1);
  return v2;
}

void *sub_10003A7AC(uint64_t a1)
{
  uint64_t v28 = a1;
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  Swift::String v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v27 - v8;
  dispatch_semaphore_t v10 = dispatch_semaphore_create(0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  uint64_t v12 = (void **)(v11 + 16);
  id v13 = [self sharedHardwareManager];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v10;
  *(void *)(v14 + 24) = v11;
  os_log_type_t v33 = sub_10003C690;
  uint64_t v34 = v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  os_signpost_type_t v31 = sub_100005210;
  char v32 = &unk_1001C7328;
  uint64_t v15 = _Block_copy(&aBlock);
  uint64_t v16 = v10;
  swift_retain();
  swift_release();
  id v17 = [v13 startSecureElementManagerSession:v15];
  _Block_release(v15);

  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v2 + 8);
  v18(v6, v1);
  OS_dispatch_semaphore.wait(timeout:)();
  v18(v9, v1);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1001D8FB8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100003E78(v19, (uint64_t)qword_1001DA9A0);
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "timeout to get session for status inspector", v22, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v33 = sub_10003ADAC;
    uint64_t v34 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v30 = 1107296256;
    os_signpost_type_t v31 = sub_1000048D8;
    char v32 = &unk_1001C7350;
    uint64_t v23 = _Block_copy(&aBlock);
    [v17 endSessionWithCompletion:v23];
    swift_unknownObjectRelease();

    _Block_release(v23);
  }
  else
  {
    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  uint64_t v24 = *v12;
  if (*v12)
  {
    *(unsigned char *)(v28 + 32) = 1;
    id v25 = v24;
  }
  swift_release();
  return v24;
}

Swift::Int sub_10003AB8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    swift_beginAccess();
    Swift::String v6 = *(void **)(a4 + 16);
    *(void *)(a4 + 16) = a1;
    id v7 = a1;
  }
  else
  {
    if (qword_1001D8FB8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003E78(v9, (uint64_t)qword_1001DA9A0);
    swift_errorRetain();
    swift_errorRetain();
    dispatch_semaphore_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v17[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v13 = Error.localizedDescription.getter();
        unint64_t v15 = v14;
      }
      else
      {
        unint64_t v15 = 0xE900000000000072;
        uint64_t v13 = 0x6F727265206C696ELL;
      }
      v17[7] = sub_100005EB8(v13, v15, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "failed to obtain session %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return OS_dispatch_semaphore.signal()();
}

void sub_10003ADAC()
{
}

void *sub_10003ADC4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1;
  if (v1 == (void *)1)
  {
    uint64_t v2 = sub_10003AE24();
    uint64_t v3 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v2;
    id v4 = v2;
    sub_10003C5F8(v3);
  }
  sub_10003C608(v1);
  return v2;
}

void *sub_10003AE24()
{
  uint64_t v0 = sub_10003A74C();
  if (v0)
  {
    uint64_t v1 = v0;
    if (qword_1001D9340 != -1) {
      swift_once();
    }
    NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001E1178);
  }
  return sub_10003A74C();
}

void sub_10003B090()
{
}

void sub_10003B0A8(uint64_t (*a1)(void))
{
  if (qword_1001D8FB8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DA9A0);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = a1();
  if (os_log_type_enabled(oslog, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "session ended in status inspector", v4, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10003B198()
{
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    *(unsigned char *)(v0 + 32) = 0;
    uint64_t v1 = sub_10003A74C();
    if (v1)
    {
      uint64_t v2 = v1;
      v5[4] = sub_10003B090;
      void v5[5] = 0;
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 1107296256;
      v5[2] = sub_1000048D8;
      v5[3] = &unk_1001C7378;
      os_log_type_t v3 = _Block_copy(v5);
      [v2 endSessionWithCompletion:v3];
      _Block_release(v3);
    }
  }
  sub_10003C5F8(*(id *)(v0 + 16));
  sub_10003C5F8(*(id *)(v0 + 24));
  sub_10003C590(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10003C570(*(void *)(v0 + 56));
  sub_10003C590(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10003C570(*(void *)(v0 + 80));
  return v0;
}

uint64_t sub_10003B298()
{
  sub_10003B198();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StatusInspector()
{
  return self;
}

uint64_t sub_10003B2F0()
{
  int v1 = *(unsigned __int8 *)(v0 + 35);
  if (v1 == 2)
  {
    char v2 = sub_10003B32C();
    *(unsigned char *)(v0 + 35) = v2 & 1;
  }
  else
  {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

uint64_t sub_10003B32C()
{
  uint64_t v0 = sub_10003A74C();
  if (v0)
  {
    int v1 = v0;
    char v6 = sub_1000F457C();
  }
  else
  {
    if (qword_1001D8FB8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100003E78(v2, (uint64_t)qword_1001DA9A0);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "can't validate SE-SEP Pairing, check it next time.", v5, 2u);
      swift_slowDealloc();
    }

    char v6 = 1;
  }
  return v6 & 1;
}

uint64_t sub_10003B844()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 36);
  if (result == 3)
  {
    if (sub_10003B2F0())
    {
      if (*(unsigned char *)(v0 + 32) == 1)
      {
        uint64_t v2 = sub_10003ADC4();
        os_log_type_t v3 = v2;
        if (v2) {

        }
        uint64_t result = v3 == 0;
      }
      else
      {
        uint64_t result = 2;
      }
    }
    else
    {
      uint64_t result = 1;
    }
    *(unsigned char *)(v0 + 36) = result;
  }
  return result;
}

uint8_t *sub_10003B8AC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  os_log_type_t v3 = (uint8_t *)v1;
  if (v2 == 1)
  {
    os_log_type_t v3 = sub_10003B934();
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v5 = *(void *)(v0 + 48);
    *(void *)(v0 + 40) = v3;
    *(void *)(v0 + 48) = v6;
    swift_bridgeObjectRetain();
    sub_10003C590(v4, v5);
  }
  sub_10003C5A4(v1, v2);
  return v3;
}

uint8_t *sub_10003B934()
{
  uint64_t v0 = 0;
  if (sub_10003B2F0())
  {
    uint64_t v1 = sub_10003ADC4();
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v0 = sub_1000AECC4();
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

void *sub_10003BB68()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = (void *)v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_10003BBC8();
    uint64_t v3 = *(void *)(v0 + 56);
    *(void *)(v0 + 56) = v2;
    swift_bridgeObjectRetain();
    sub_10003C570(v3);
  }
  sub_10003C580(v1);
  return v2;
}

void *sub_10003BBC8()
{
  uint64_t v0 = 0;
  if (sub_10003B2F0())
  {
    uint64_t v1 = sub_10003ADC4();
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v0 = sub_10006CB20();
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

uint64_t sub_10003BDE8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v3 = sub_10003BE70();
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = *(void *)(v0 + 72);
    *(void *)(v0 + 64) = v3;
    *(void *)(v0 + 72) = v6;
    swift_bridgeObjectRetain();
    sub_10003C590(v4, v5);
  }
  sub_10003C5A4(v1, v2);
  return v3;
}

uint64_t sub_10003BE70()
{
  uint64_t v0 = 0;
  if (sub_10003B2F0())
  {
    uint64_t v1 = sub_10003ADC4();
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v0 = sub_1000AF634();
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

uint64_t sub_10003C1C4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v2 = sub_10003C224();
    uint64_t v3 = *(void *)(v0 + 80);
    *(void *)(v0 + 80) = v2;
    swift_bridgeObjectRetain();
    sub_10003C570(v3);
  }
  sub_10003C580(v1);
  return v2;
}

uint64_t sub_10003C224()
{
  uint64_t v0 = sub_10003A74C();
  if (!v0
    || (v1 = v0, id v2 = [v0 stateInformation], v1, !v2))
  {
    long long v6 = 0u;
    long long v7 = 0u;
    goto LABEL_10;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v3 + 16))
  {
    long long v6 = 0u;
    long long v7 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_100006570(v3 + 32, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  if (!*((void *)&v7 + 1))
  {
LABEL_10:
    sub_100008970((uint64_t)&v6);
    return 0;
  }
  sub_100003EB0(&qword_1001DABD8);
  if (swift_dynamicCast()) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_10003C31C()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 88);
  if (result == 3)
  {
    uint64_t result = sub_10003C348();
    *(unsigned char *)(v0 + 88) = result;
  }
  return result;
}

uint64_t sub_10003C348()
{
  if ((sub_10003B2F0() & 1) == 0) {
    return 1;
  }
  uint64_t v0 = sub_10003A74C();
  if (!v0) {
    return 2;
  }
  uint64_t v1 = v0;
  if (qword_1001D9350 != -1) {
    swift_once();
  }
  NFSecureElementManagerSession.select(_:)(AID_PIN_APPLET, *(unint64_t *)algn_1001E1198);

  return 0;
}

int64x2_t sub_10003C52C()
{
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(v0 + 16) = result;
  *(_DWORD *)(v0 + 32) = 0x2000000;
  *(unsigned char *)(v0 + 36) = 3;
  *(_OWORD *)(v0 + 40) = xmmword_10018A0C0;
  *(_OWORD *)(v0 + 56) = xmmword_10018A0D0;
  *(int64x2_t *)(v0 + 72) = result;
  *(unsigned char *)(v0 + 88) = 3;
  return result;
}

uint64_t sub_10003C570(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003C580(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003C590(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10003C5A4(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_10003C5B8()
{
  unint64_t result = qword_1001DA530;
  if (!qword_1001DA530)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001DA530);
  }
  return result;
}

void sub_10003C5F8(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_10003C608(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_10003C618()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003C650()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_10003C690(void *a1, uint64_t a2)
{
  return sub_10003AB8C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10003C698(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003C6A8()
{
  return swift_release();
}

uint64_t sub_10003C6C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DABE0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DABE0);
  if (qword_1001D9290 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10003C788()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DABF8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DABF8);
  if (qword_1001D9020 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D88);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10003C850()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  long long v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1001D8FC0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DABE0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    dispatch_semaphore_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)dispatch_semaphore_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "deinit", v10, 2u);
    swift_slowDealloc();
  }

  if ((uint64_t)[*(id *)(v0 + 96) operationCount] >= 1)
  {
    os_log_type_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "ORReader deinit but operation in progress: client must have crashed", v13, 2u);
      swift_slowDealloc();
    }

    unint64_t v14 = sub_100006788((void *)(v1 + 56), *(void *)(v1 + 80));
    type metadata accessor for ORError(0);
    v21[3] = v15;
    v21[0] = sub_10002AB8C(20902, 0, 0, 0);
    uint64_t v16 = *v14;
    uint64_t v17 = static DispatchWorkItemFlags.barrier.getter();
    __chkstk_darwin(v17, v18);
    *(void *)&v20[-48] = v16;
    v20[-40] = 1;
    *(void *)&v20[-32] = v21;
    *(void *)&v20[-24] = 0;
    *(void *)&v20[-16] = 0;
    *(void *)&v20[-8] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
    sub_100006520((uint64_t)v21);
    [*(id *)(v1 + 96) cancelAllOperations];
  }
  sub_100006520(v1 + 16);
  sub_100006520(v1 + 56);

  swift_release();
  return v1;
}

uint64_t sub_10003CB44()
{
  sub_10003C850();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ORReader()
{
  return self;
}

void sub_10003CB9C(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v141 = a4;
  uint64_t v136 = a2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  os_log_type_t v12 = (char *)v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v134 = *(void *)(v13 - 8);
  uint64_t v135 = v13;
  __chkstk_darwin(v13, v14);
  id v133 = (char *)v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OSSignpostID();
  uint64_t v137 = *(void **)(v16 - 8);
  uint64_t v138 = (void (*)(void, void))v16;
  uint64_t v18 = __chkstk_darwin(v16, v17);
  unint64_t v132 = (char *)v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)v125 - v21;
  if (qword_1001D8FC0 != -1) {
    swift_once();
  }
  uint64_t v131 = v8;
  uint64_t v23 = sub_100003E78(v8, (uint64_t)qword_1001DABE0);
  id v24 = a1;
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  int v27 = v26;
  *(void *)&long long v140 = v25;
  BOOL v28 = os_log_type_enabled(v25, v26);
  uint64_t v129 = v12;
  uint64_t v130 = v9;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v127 = swift_slowAlloc();
    v142[0] = v127;
    *(_DWORD *)uint64_t v29 = 136315394;
    Swift::String v128 = v22;
    uint64_t v143 = sub_100005EB8(0xD00000000000002ELL, 0x8000000100195950, v142);
    long long v139 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 12) = 2080;
    v125[1] = (id)(v29 + 14);
    id v30 = v24;
    id v31 = [v30 description];
    int v126 = v27;
    id v32 = v24;
    os_log_type_t v33 = a3;
    id v34 = v31;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v37 = v36;

    a3 = v33;
    id v24 = v32;
    uint64_t v143 = sub_100005EB8(v35, v37, v142);
    uint64_t v5 = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v22 = v128;
    swift_bridgeObjectRelease();
    uint64_t v38 = (void *)v140;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v140, (os_log_type_t)v126, "%s, ORProvisionParameters: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_100040B8C();
  os_signpost_id_t v39 = (char *)v5[12];
  if ([v39 operationCount])
  {
    BOOL v40 = (id)sub_10002AB8C(20010, 0xD000000000000021, (void *)0x80000001001958C0, 0);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    *(void *)&long long v140 = v40;
    if (v43)
    {
      int v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v137 = (void *)swift_slowAlloc();
      *(_DWORD *)int v44 = 138412290;
      uint64_t v138 = a3;
      unint64_t v45 = v40;
      long long v139 = v5;
      id v46 = v45;
      uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
      v142[0] = v47;
      a3 = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v137 = v47;

      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Error: %@", v44, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v41 = v40;
    }

    sub_100003EB0(&qword_1001DA340);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(unsigned char *)(inited + 32) = 7;
    uint64_t v49 = (void *)v140;
    uint64_t v143 = v140;
    type metadata accessor for ORError(0);
    sub_100040E90();
    _BridgedStoredNSError.code.getter();
    uint64_t v50 = v142[0];
    *(void *)(inited + 64) = &type metadata for Int;
    *(void *)(inited + 40) = v50;
    unint64_t v51 = sub_1001051A8(inited);
    v125[-2] = (id)__chkstk_darwin(v51, v52);
    uint64_t v54 = (uint64_t *)&v53[4];
    uint64_t v55 = v53 + 8;
    os_unfair_lock_lock(v53 + 8);
    sub_100039240(v54);
    os_unfair_lock_unlock(v55);
    swift_bridgeObjectRelease();
    sub_10002C0BC();
    id v56 = v49;
    a3(0, v49);

    goto LABEL_12;
  }
  sub_100040EE8(v24);
  sub_100041248();
  v125[0] = v24;
  long long v139 = (void *)v23;
  if (qword_1001D8FC8 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for OSSignposter();
  sub_100003E78(v57, (uint64_t)qword_1001DABF8);
  static OSSignpostID.exclusive.getter();
  unint64_t v58 = OSSignposter.logHandle.getter();
  int v59 = static os_signpost_type_t.begin.getter();
  char v60 = OS_os_log.signpostsEnabled.getter();
  Swift::String v128 = v39;
  if (v60)
  {
    LODWORD(v140) = v59;
    uint64_t v61 = (void (*)(char *, char *, void (*)(void, void)))v137[2];
    os_log_type_t v62 = v132;
    v61(v132, v22, v138);
    os_log_type_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v63 = 0;
    os_signpost_id_t v64 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, (os_signpost_type_t)v140, v64, "ttp-total-time", "begin total time for ttp", v63, 2u);
    uint64_t v65 = v137;
    swift_slowDealloc();

    uint64_t v66 = (uint64_t)v138;
    ((void (*)(char *, uint64_t))v65[1])(v62, (uint64_t)v138);
  }
  else
  {

    uint64_t v65 = v137;
    uint64_t v66 = (uint64_t)v138;
    uint64_t v61 = (void (*)(char *, char *, void (*)(void, void)))v137[2];
    os_log_type_t v62 = v132;
  }
  uint64_t v138 = a3;
  v61(v62, v22, (void (*)(void, void))v66);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v137 = (void *)OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v67 = ((uint64_t (*)(char *, uint64_t))v65[1])(v22, v66);
  id v68 = (void *)v5[13];
  LOBYTE(v142[0]) = 2;
  __chkstk_darwin(v67, v69);
  v125[-2] = v142;
  os_signpost_type_t v71 = v70 + 4;
  uint64_t v72 = v70 + 8;
  os_unfair_lock_lock(v70 + 8);
  uint64_t v73 = (uint64_t)v71;
  id v74 = 0;
  sub_100041624(v73);
  os_unfair_lock_unlock(v72);
  unint64_t v132 = (char *)sub_100003EB0(&qword_1001DA340);
  uint64_t v75 = swift_initStackObject();
  *(_OWORD *)(v75 + 16) = xmmword_100189B70;
  *(unsigned char *)(v75 + 32) = 5;
  sub_100003EB0((uint64_t *)&unk_1001DD3C0);
  uint64_t v76 = swift_allocObject();
  long long v140 = xmmword_100186100;
  *(_OWORD *)(v76 + 16) = xmmword_100186100;
  id v77 = v125[0];
  id v78 = [v125[0] currencyCode];
  *(void *)(v76 + 56) = &type metadata for Int;
  *(void *)(v76 + 64) = &protocol witness table for Int;
  *(void *)(v76 + 32) = v78;
  uint64_t v79 = String.init(format:_:)();
  *(void *)(v75 + 64) = &type metadata for String;
  *(void *)(v75 + 40) = v79;
  *(void *)(v75 + 48) = v80;
  *(unsigned char *)(v75 + 72) = 19;
  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = v140;
  id v82 = [v77 countryCode];
  *(void *)(v81 + 56) = &type metadata for Int;
  *(void *)(v81 + 64) = &protocol witness table for Int;
  *(void *)(v81 + 32) = v82;
  uint64_t v83 = String.init(format:_:)();
  *(void *)(v75 + 104) = &type metadata for String;
  *(void *)(v75 + 80) = v83;
  *(void *)(v75 + 88) = v84;
  *(unsigned char *)(v75 + 112) = 11;
  id v85 = [*(id *)(*sub_100006788(v5 + 2, v5[5]) + 24) sequenceCounter];
  if (v85)
  {
    uint64_t v86 = v85;
    unsigned __int16 v87 = (unsigned __int16)[v85 unsignedShortValue];

    *(void *)(v75 + 144) = &type metadata for UInt16;
    *(_WORD *)(v75 + 120) = v87;
    unint64_t v88 = sub_1001051A8(v75);
    v125[-2] = (id)__chkstk_darwin(v88, v89);
    uint64_t v91 = (uint64_t *)&v90[4];
    uint64_t v92 = v90 + 8;
    os_unfair_lock_lock(v90 + 8);
    sub_100039240(v91);
    os_unfair_lock_unlock(v92);
    swift_bridgeObjectRelease();
    uint64_t v93 = (void *)*sub_100006788(v5 + 7, v5[10]);
    uint64_t v94 = v133;
    uint64_t v95 = static DispatchWorkItemFlags.barrier.getter();
    __chkstk_darwin(v95, v96);
    LOBYTE(v125[-2]) = 1;
    v125[-1] = v93;
    sub_100003EB0(&qword_1001DD3F0);
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v94, v135);
    sub_100008970((uint64_t)v142);
    sub_100009300((uint64_t)(v5 + 7), (uint64_t)v142);
    uint64_t v97 = v136;
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v98 = v141;
    swift_retain();
    id v99 = v125[0];
    uint64_t v100 = (uint64_t)v138;
    id v101 = sub_100037E04(v99, v97, (uint64_t)v142, v68, (uint64_t)v138, v98);
    NSString v102 = String._bridgeToObjectiveC()();
    [v101 setName:v102];

    uint64_t v104 = v129;
    uint64_t v103 = v130;
    uint64_t v105 = v131;
    (*(void (**)(char *, void *, uint64_t))(v130 + 16))(v129, v139, v131);
    id v74 = v101;
    uint64_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v106, v107))
    {

      (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v105);
      unint64_t v114 = v137;
      goto LABEL_23;
    }
    long long v139 = v5;
    uint64_t v108 = (uint8_t *)swift_slowAlloc();
    v142[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v108 = 136315138;
    id v109 = [v74 name];
    if (v109)
    {
      uint64_t v110 = v109;
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v113 = v112;

      uint64_t v143 = sub_100005EB8(v111, v113, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "%s", v108, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v130 + 8))(v129, v131);
      uint64_t v100 = (uint64_t)v138;
      unint64_t v114 = v137;
LABEL_23:
      uint64_t v115 = swift_allocObject();
      swift_weakInit();
      uint64_t v116 = (void *)swift_allocObject();
      v116[2] = v115;
      v116[3] = v74;
      v116[4] = v114;
      v116[5] = v100;
      v116[6] = v141;
      v142[4] = (uint64_t)sub_1000416EC;
      v142[5] = (uint64_t)v116;
      v142[0] = (uint64_t)_NSConcreteStackBlock;
      v142[1] = 1107296256;
      v142[2] = (uint64_t)sub_1000048D8;
      v142[3] = (uint64_t)&unk_1001C7500;
      uint64_t v117 = _Block_copy(v142);
      uint64_t v118 = self;
      swift_retain();
      id v56 = v74;
      swift_retain();
      swift_retain();
      id v119 = [v118 blockOperationWithBlock:v117];
      _Block_release(v117);
      swift_release();
      swift_release();
      id v120 = v119;
      NSString v121 = String._bridgeToObjectiveC()();
      [v120 setName:v121];

      [v120 addDependency:v56];
      sub_100003EB0((uint64_t *)&unk_1001DA5A0);
      uint64_t v122 = swift_allocObject();
      *(_OWORD *)(v122 + 16) = xmmword_100189A10;
      *(void *)(v122 + 32) = v56;
      *(void *)(v122 + 40) = v120;
      v142[0] = v122;
      specialized Array._endMutation()();
      sub_100006680(0, &qword_1001DACF8);
      id v123 = v120;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v128 addOperations:isa waitUntilFinished:0];

      swift_release();
LABEL_12:

      return;
    }
  }
  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_10003E23C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void *))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    id v8 = [*(id *)(*sub_100006788((void *)(Strong + 16), *(void *)(Strong + 40)) + 24) ecdsaCertificate];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      uint64_t v13 = Data.init(hexString:)(v10, v12);
      if (v14 >> 60 == 15)
      {
        long long v53 = 0u;
        long long v54 = 0u;
      }
      else
      {
        *((void *)&v54 + 1) = &type metadata for Data;
        *(void *)&long long v53 = v13;
        *((void *)&v53 + 1) = v14;
      }
      swift_beginAccess();
      sub_1001058E0((uint64_t)&v53, 0x7472654364736163, 0xEF65746163696669);
      swift_endAccess();
      uint64_t v19 = *(void **)(a2 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_provisionError);
      if (v19)
      {
        uint64_t v20 = qword_1001D8FC0;
        id v21 = v19;
        if (v20 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_100003E78(v22, (uint64_t)qword_1001DABE0);
        uint64_t v23 = v21;
        id v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        unint64_t v51 = a4;
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v48 = a2;
          os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
          int v27 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v26 = 138412290;
          BOOL v28 = v23;
          uint64_t v29 = v23;
          uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)&long long v53 = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *int v27 = v30;
          uint64_t v23 = v29;

          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error: %@", v26, 0xCu);
          sub_100003EB0((uint64_t *)&unk_1001DA540);
          swift_arrayDestroy();
          swift_slowDealloc();
          a2 = v48;
          swift_slowDealloc();
        }
        else
        {

          id v24 = v23;
        }

        sub_100003EB0(&qword_1001DA340);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100186100;
        *(unsigned char *)(inited + 32) = 7;
        type metadata accessor for ORError(0);
        sub_100040E90();
        swift_retain();
        _BridgedStoredNSError.code.getter();
        uint64_t v33 = v53;
        *(void *)(inited + 64) = &type metadata for Int;
        *(void *)(inited + 40) = v33;
        unint64_t v34 = sub_1001051A8(inited);
        __chkstk_darwin(v34, v35);
        unint64_t v37 = (uint64_t *)&v36[4];
        uint64_t v38 = v36 + 8;
        os_unfair_lock_lock(v36 + 8);
        sub_100039240(v37);
        os_unfair_lock_unlock(v38);
        swift_release();
        swift_bridgeObjectRelease();
        os_signpost_id_t v39 = v23;
        v51(0, v19);
      }
      else
      {
        uint64_t v50 = v7;
        sub_100006680(0, &qword_1001DAD00);
        id v31 = swift_bridgeObjectRetain();
        BOOL v40 = sub_10004193C(v31);
        if (qword_1001D8FC0 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        sub_100003E78(v41, (uint64_t)qword_1001DABE0);
        os_log_type_t v42 = v40;
        BOOL v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          unint64_t v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v49 = (void *)swift_slowAlloc();
          *(_DWORD *)unint64_t v45 = 138412290;
          *(void *)&long long v53 = v42;
          id v46 = a4;
          uint64_t v47 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v49 = v42;

          a4 = v46;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "ORProvisionResult: %@", v45, 0xCu);
          sub_100003EB0((uint64_t *)&unk_1001DA540);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v7 = v50;
        os_signpost_id_t v39 = v42;
        a4(v42, 0);
      }

      sub_10003EC10(a2, a3, v7);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1001D8FC0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100003E78(v15, (uint64_t)qword_1001DABE0);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "ORReader deinit before start afterProvisionReadOperation", v18, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10003EC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v33 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v33 - v15;
  if (qword_1001D8FC8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSSignposter();
  sub_100003E78(v17, (uint64_t)qword_1001DABF8);
  sub_100044E30("ttp-postprocessing", 18, 2, *(void *)(a1 + OBJC_IVAR____TtC9SPREngine15ORReadOperation_nfSEReaderSession), 0xD000000000000017, 0x8000000100195980);
  uint64_t v18 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v19 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v20 = v33;
    if ((*(unsigned int (**)(char *, uint64_t))(v33 + 88))(v7, v4) == enum case for OSSignpostError.doubleEnd(_:))
    {
      id v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v4);
      id v21 = "end ttp total time";
    }
    uint64_t v24 = v34;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v16, v8);
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v25 = 0;
    os_signpost_id_t v26 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v26, "ttp-total-time", v21, v25, 2u);
    swift_slowDealloc();

    int v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v16, v8);
    uint64_t v22 = ((uint64_t (*)(char *, uint64_t))v27)(v13, v8);
  }
  else
  {

    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    uint64_t v24 = v34;
  }
  uint64_t v28 = *(void *)(*(void *)(v24 + 104) + 56);
  uint64_t v29 = (os_unfair_lock_s *)(v28 + 32);
  uint64_t v30 = (uint64_t *)(v28 + 16);
  char v35 = 2;
  __chkstk_darwin(v22, v23);
  *(&v33 - 2) = (uint64_t)&v35;
  os_unfair_lock_lock(v29);
  sub_1000416FC(v30);
  os_unfair_lock_unlock(v29);
  char v35 = 0;
  __chkstk_darwin(v31, v32);
  *(&v33 - 2) = (uint64_t)&v35;
  os_unfair_lock_lock(v29);
  sub_1000416FC(v30);
  os_unfair_lock_unlock(v29);
  sub_10002C0BC();
}

void sub_10003F03C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D8FC0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DABE0);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ORReader.cancelProvision()", v10, 2u);
    swift_slowDealloc();
  }

  uint64_t v11 = (void *)v1[12];
  if ((uint64_t)[v11 operationCount] < 1)
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v20, "No Operation to cancel", v21, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v12 = sub_100006788(v1 + 7, v1[10]);
    type metadata accessor for ORError(0);
    v22[3] = v13;
    v22[0] = sub_10002AB8C(20009, 0, 0, 0);
    uint64_t v14 = *v12;
    uint64_t v15 = static DispatchWorkItemFlags.barrier.getter();
    __chkstk_darwin(v15, v16);
    v22[-6] = v14;
    LOBYTE(v22[-5]) = 1;
    v22[-4] = v22;
    v22[-3] = 0;
    v22[-2] = 0;
    v22[-1] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    sub_100006520((uint64_t)v22);
    *(unsigned char *)(v1[13] + 65) = 1;
    [v11 cancelAllOperations];
    [v11 waitUntilAllOperationsAreFinished];
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_signpost_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_signpost_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "All Operations are cancelled", v19, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10003F3BC(uint64_t a1, uint64_t a2)
{
  if (qword_1001D8FC0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DABE0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "checkStatus(completion:)", v7, 2u);
    swift_slowDealloc();
  }

  sub_100040B8C();
  sub_100041248();
  id v8 = [self sharedHardwareManager];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  aBlock[4] = sub_1000415EC;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005210;
  aBlock[3] = &unk_1001C73E8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v11 = [v8 startSecureElementManagerSession:v10];
  _Block_release(v10);

  if (([v11 isFirstInQueue] & 1) == 0)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "waiting for NFSession ...", v14, 2u);
      swift_slowDealloc();
    }
  }
  self;
  uint64_t v15 = (void *)swift_dynamicCastObjCClass();
  if (v15) {
    [v15 setSessionTimeLimit:7.0];
  }
  return swift_unknownObjectRelease();
}

void sub_10003F8FC(void *a1, uint64_t a2, void (*a3)(id, void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v13 = qword_1001D9360;
    id v14 = a1;
    if (v13 != -1) {
      swift_once();
    }
    NFSecureElementManagerSession.select(_:)(qword_1001E11B0, *(unint64_t *)algn_1001E11B8);
    if (qword_1001D93D0 != -1) {
      swift_once();
    }
    sub_100003E78(v8, (uint64_t)qword_1001DFC18);
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "getProvisionVersion()", v22, 2u);
      swift_slowDealloc();
    }

    uint64_t v23 = (uint64_t *)TLVTag.provisionAppletVersionInfo.unsafeMutableAddressor();
    uint64_t v24 = sub_1000B32C4(*v23);
    unint64_t v26 = v25;
    uint64_t v37 = a4;
    uint64_t v38 = a3;
    Swift::String v27 = Data.hexString()();
    sub_100006628(v24, v26);
    if (qword_1001D8FC0 != -1) {
      swift_once();
    }
    sub_100003E78(v8, (uint64_t)qword_1001DABE0);
    swift_bridgeObjectRetain_n();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100005EB8(v27._countAndFlagsBits, (unint64_t)v27._object, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "applet version: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v31 = objc_allocWithZone((Class)ORProvisionAppletData);
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v33 = [v31 initWithProvisionAppletVersion:v32];

    v38(v33, 0);
    aBlock[4] = (uint64_t)sub_10004055C;
    void aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000048D8;
    aBlock[3] = (uint64_t)&unk_1001C7488;
    uint64_t v34 = _Block_copy(aBlock);
    [v14 endSessionWithCompletion:v34];
    _Block_release(v34);
    goto LABEL_23;
  }
  if (qword_1001D8FC0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_100003E78(v8, (uint64_t)qword_1001DABE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v15, v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    goto LABEL_16;
  }
  uint64_t v37 = a4;
  uint64_t v38 = a3;
  uint64_t v18 = swift_slowAlloc();
  char v35 = (void *)swift_slowAlloc();
  uint64_t v36 = swift_slowAlloc();
  aBlock[0] = v36;
  *(_DWORD *)uint64_t v18 = 136315394;
  uint64_t v40 = sub_100005EB8(0xD000000000000018, 0x80000001001957A0, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v18 + 12) = 2112;
  if (a2)
  {
    swift_errorRetain();
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v40 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v35 = v19;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "no session in %s: %@", (uint8_t *)v18, 0x16u);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    a3 = v38;
LABEL_16:
    id v14 = (id)sub_10002AB8C(20001, 0xD000000000000017, (void *)0x8000000100195780, 0);
    a3(0, v14);
LABEL_23:

    return;
  }
  __break(1u);
}

void sub_1000404F0(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
}

void sub_100040514()
{
}

uint64_t sub_100040538(uint64_t a1, uint64_t a2)
{
  return sub_10003F3BC(a1, a2);
}

void sub_10004055C()
{
  if (qword_1001D8FC0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DABE0);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Session ended", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100040644(uint64_t *a1, unsigned __int8 *a2)
{
  return sub_100116C04(a1, *a2);
}

uint64_t sub_100040660(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100115CB0(a1, *a2);
}

void *sub_10004067C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SecureElement();
  uint64_t v25[3] = v8;
  v25[4] = &off_1001CC7B8;
  v25[0] = a1;
  uint64_t v9 = type metadata accessor for DefaultManagedDictionary();
  uint64_t v23 = v9;
  uint64_t v24 = &off_1001C96D8;
  v22[0] = a2;
  type metadata accessor for ORReader();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = sub_10001F1A0((uint64_t)v25, v8);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_10001F1A0((uint64_t)v22, v23);
  __chkstk_darwin(v15, v15);
  os_log_type_t v17 = (void *)((char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = *v13;
  uint64_t v20 = *v17;
  v10[5] = v8;
  v10[6] = &off_1001CC7B8;
  v10[2] = v19;
  v10[10] = v9;
  v10[11] = &off_1001C96D8;
  v10[7] = v20;
  v10[12] = a4;
  v10[13] = a3;
  sub_100006520((uint64_t)v22);
  sub_100006520((uint64_t)v25);
  return v10;
}

void *sub_100040878()
{
  os_log_type_t v1 = String._bridgeToObjectiveC()();
  int v2 = MGGetSInt32Answer();

  if (v2 != 1)
  {
    sub_10002AB8C(20903, 0, 0, 0);
    swift_willThrow();
    goto LABEL_5;
  }
  sub_1000FA008((uint64_t)v16);
  if (v0)
  {
LABEL_5:
    swift_release();
    return v1;
  }
  sub_1000FA54C((uint64_t)v14);
  uint64_t v4 = sub_1000FAA90();
  id v5 = [objc_allocWithZone((Class)NSOperationQueue) init];
  [v5 setMaxConcurrentOperationCount:1];
  [v5 setQualityOfService:33];
  uint64_t v6 = sub_10001F1A0((uint64_t)v16, v17);
  __chkstk_darwin(v6, v6);
  uint64_t v8 = (uint64_t *)&v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_10001F1A0((uint64_t)v14, v15);
  __chkstk_darwin(v10, v10);
  uint64_t v12 = (uint64_t *)&v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  os_log_type_t v1 = sub_10004067C(*v8, *v12, v4, (uint64_t)v5);
  sub_100006520((uint64_t)v14);
  sub_100006520((uint64_t)v16);
  swift_release();
  return v1;
}

uint64_t sub_100040B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
LABEL_9:
    __break(1u);
    return static String._fromUTF8Repairing(_:)(a1, a2);
  }
  uint64_t v3 = a1;
  int v4 = *(unsigned __int8 *)(a1 + 32);
  a1 += 32;
  if (v4)
  {
    a2 = 0;
    uint64_t v5 = v2 - 1;
    uint64_t v6 = v3 + 33;
    while (v5 != a2)
    {
      if (!*(unsigned __int8 *)(v6 + a2++)) {
        return static String._fromUTF8Repairing(_:)(a1, a2);
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  a2 = 0;
  return static String._fromUTF8Repairing(_:)(a1, a2);
}

uint64_t sub_100040B8C()
{
  size_t v11 = 0;
  sysctlbyname("hw.machine", 0, &v11, 0, 0);
  size_t v0 = v11;
  if ((v11 & 0x8000000000000000) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (v11)
    {
      os_log_type_t v1 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v1[2] = v0;
      bzero(v1 + 4, v0);
    }
    else
    {
      os_log_type_t v1 = _swiftEmptyArrayStorage;
    }
    sysctlbyname("hw.machine", v1 + 4, &v11, 0, 0);
    uint64_t v3 = sub_100040B44((uint64_t)v1, v2);
    unint64_t v5 = v4;
    swift_bridgeObjectRelease();
    if (sub_1000AEB5C())
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1001D8FC0 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100003E78(v7, (uint64_t)qword_1001DABE0);
      swift_bridgeObjectRetain();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v12 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        swift_bridgeObjectRetain();
        sub_100005EB8(v3, v5, &v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalid platform: (%s)", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10002AB8C(20903, 0xD000000000000017, (void *)0x8000000100192830, 0);
      return swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_100040E90()
{
  unint64_t result = qword_1001DA5C0;
  if (!qword_1001DA5C0)
  {
    type metadata accessor for ORError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA5C0);
  }
  return result;
}

uint64_t sub_100040EE8(void *a1)
{
  [a1 amount];
  if ((NSDecimal.isSignMinus.getter() & 1) != 0
    || ([a1 amount],
        NSDecimal.init(integerLiteral:)(v2, 10),
        pow(_:_:)(v5, v3, v4),
        (static NSDecimal.< infix(_:_:)() & 1) == 0)
    || ([a1 amount], NSDecimal.exponent.getter() < 0))
  {
    uint64_t v10 = 0xD00000000000003BLL;
    size_t v11 = "Amount was negative, too many digits, or not a whole number";
LABEL_7:
    uint64_t v12 = (void *)((unint64_t)(v11 - 32) | 0x8000000000000000);
    goto LABEL_8;
  }
  id v6 = [a1 unpredictableNumber];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  switch(v9 >> 62)
  {
    case 1uLL:
      sub_100006628(v7, v9);
      if (__OFSUB__(HIDWORD(v7), v7))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x100041228);
      }
      unint64_t v9 = HIDWORD(v7) - (int)v7;
      break;
    case 2uLL:
      uint64_t v15 = *(void *)(v7 + 16);
      uint64_t v14 = *(void *)(v7 + 24);
      sub_100006628(v7, v9);
      unint64_t v9 = v14 - v15;
      if (__OFSUB__(v14, v15))
      {
        __break(1u);
        goto LABEL_15;
      }
      break;
    case 3uLL:
LABEL_15:
      sub_100006628(v7, v9);
      unint64_t v9 = 0;
      break;
    default:
      sub_100006628(v7, v9);
      unint64_t v9 = BYTE6(v9);
      break;
  }
  if (v9 != *(void *)TLVTag.TAG_9F37_LENGTH.unsafeMutableAddressor())
  {
    uint64_t v10 = 0xD000000000000022;
    size_t v11 = "unpredictableNumber invalid length";
    goto LABEL_7;
  }
  id v16 = [a1 transactionId];
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  switch(v19 >> 62)
  {
    case 1uLL:
      sub_100006628(v17, v19);
      LODWORD(v20) = HIDWORD(v17) - v17;
      if (__OFSUB__(HIDWORD(v17), v17)) {
        goto LABEL_33;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v20 != 16)
      {
LABEL_28:
        uint64_t v10 = 0xD00000000000001CLL;
        size_t v11 = "transactionId invalid length";
        goto LABEL_7;
      }
      if (((unint64_t)[a1 currencyCode] & 0x8000000000000000) != 0
        || (uint64_t)[a1 currencyCode] > 999)
      {
        uint64_t v10 = 0xD000000000000014;
        size_t v11 = "currencyCode invalid";
        goto LABEL_7;
      }
      if (((unint64_t)[a1 countryCode] & 0x8000000000000000) == 0)
      {
        uint64_t result = (uint64_t)[a1 countryCode];
        if (result <= 999) {
          return result;
        }
      }
      uint64_t v12 = (void *)0x8000000100195A30;
      uint64_t v10 = 0xD000000000000013;
      break;
    case 2uLL:
      uint64_t v22 = *(void *)(v17 + 16);
      uint64_t v21 = *(void *)(v17 + 24);
      sub_100006628(v17, v19);
      uint64_t v20 = v21 - v22;
      if (!__OFSUB__(v21, v22)) {
        goto LABEL_23;
      }
      goto LABEL_34;
    case 3uLL:
      sub_100006628(v17, v19);
      goto LABEL_28;
    default:
      sub_100006628(v17, v19);
      uint64_t v20 = BYTE6(v19);
      goto LABEL_23;
  }
LABEL_8:
  sub_10002AB8C(20000, v10, v12, 0);
  return swift_willThrow();
}

void sub_100041248()
{
  uint64_t v14 = 0;
  id v0 = [self sharedHardwareManager];
  id v1 = [v0 getRadioEnabledState:&v14];

  if (v1)
  {
    if (qword_1001D8FC0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100003E78(v2, (uint64_t)qword_1001DABE0);
    id v3 = v1;
    Swift::Int v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)id v6 = 136315138;
      id v7 = v3;
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v8 = String.init<A>(describing:)();
      sub_100005EB8(v8, v9, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "getRadioEnabledState failed: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10002AB8C(20904, 0xD00000000000001BLL, (void *)0x8000000100195840, 0);
    swift_willThrow();
  }
  else if (v14 != 1)
  {
    if (qword_1001D8FC0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100003E78(v10, (uint64_t)qword_1001DABE0);
    size_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "NFRadioState .disabled", v13, 2u);
      swift_slowDealloc();
    }

    sub_10002AB8C(20904, 0xD000000000000016, (void *)0x8000000100195820, 0);
    swift_willThrow();
  }
}

uint64_t sub_1000415B4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000415EC(void *a1, uint64_t a2)
{
  sub_10003F8FC(a1, a2, *(void (**)(id, void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000415F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100041604()
{
  return swift_release();
}

void sub_10004160C()
{
}

uint64_t sub_100041624(uint64_t a1)
{
  return sub_100115CB0(a1, **(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_100041644@<X0>(_OWORD *a1@<X8>)
{
  return sub_1000CF08C(*(unsigned char *)(v1 + 16), a1);
}

uint64_t sub_100041664()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004169C()
{
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000416EC()
{
  sub_10003E23C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void, void *))(v0 + 40));
}

uint64_t sub_1000416FC(uint64_t *a1)
{
  return sub_100116C04(a1, **(unsigned __int8 **)(v1 + 16));
}

void sub_10004171C()
{
  sub_1000CE370(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 48), *(void *)(v0 + 56), *(double *)(v0 + 40));
}

uint64_t sub_100041770()
{
  unint64_t v0 = sub_100106BC4(&off_1001C4148);
  sub_100003EB0(&qword_1001DAD08);
  uint64_t result = swift_arrayDestroy();
  qword_1001E0D10 = v0;
  return result;
}

uint64_t sub_1000417C8(uint64_t *a1)
{
  return _sSC19SPRMonitorErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC19SPRMonitorErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D8FD0 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E0D10;
  if (*(void *)(qword_1001E0D10 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    strcpy((char *)v8, "MonitorError#");
    HIWORD(v8[1]) = -4864;
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v8[0];
  }
  return v5;
}

unint64_t sub_1000418BC(uint64_t a1)
{
  unint64_t result = sub_1000418E4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000418E4()
{
  unint64_t result = qword_1001D9A08;
  if (!qword_1001D9A08)
  {
    type metadata accessor for MonitorError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9A08);
  }
  return result;
}

NSObject *sub_10004193C(NSObject *a1)
{
  if (qword_1001D8FD8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DAD10);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v16 = sub_100005EB8(0xD00000000000001ALL, 0x8000000100195AA0, (uint64_t *)&v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ORProvisionResult %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a1[2].isa)
  {
    uint64_t v3 = a1;
    unint64_t v6 = sub_10000C4B0(0xD000000000000011, 0x8000000100194690);
    if (v7)
    {
      sub_100006570((uint64_t)a1[7].isa + 32 * v6, (uint64_t)&v18);
      if (swift_dynamicCast())
      {
        v8.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        if (a1[2].isa && (unint64_t v9 = sub_10000C4B0(0x7472654364736163, 0xEF65746163696669), (v10 & 1) != 0))
        {
          sub_100006570((uint64_t)a1[7].isa + 32 * v9, (uint64_t)&v18);
        }
        else
        {
          long long v18 = 0u;
          long long v19 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v19 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v12 = v16;
            unint64_t v13 = v17;
LABEL_19:
            id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100006628(v12, v13);
            uint64_t v3 = [v14 initWithProvisionDataBlob:v8.super.isa casdCertificate:isa];
            sub_100006628(v16, v17);

            return v3;
          }
        }
        else
        {
          sub_100008970((uint64_t)&v18);
        }
        uint64_t v12 = 0;
        unint64_t v13 = 0xC000000000000000;
        goto LABEL_19;
      }
    }
  }
  swift_bridgeObjectRelease();
  sub_10002AB8C(20008, 0xD00000000000002BLL, (void *)0x8000000100195A70, 0);
  swift_willThrow();
  return v3;
}

uint64_t sub_100041C94()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DAD10);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DAD10);
  if (qword_1001D9290 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100041D5C()
{
  unint64_t v0 = sub_100106B84(&off_1001C3D08);
  sub_100003EB0(&qword_1001DAD28);
  uint64_t result = swift_arrayDestroy();
  qword_1001E0D18 = v0;
  return result;
}

uint64_t sub_100041DB4(uint64_t *a1)
{
  return _sSC11ORErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC11ORErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D8FE0 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E0D18;
  if (*(void *)(qword_1001E0D18 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0x23726F727245524FLL;
  }
  return v5;
}

unint64_t sub_100041E9C(uint64_t a1)
{
  unint64_t result = sub_100040E90();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100041EC4()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v0 - 8, v1);
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  if (!URLRequest.allHTTPHeaderFields.getter()) {
    sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  }
  v2._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x203A79646F620ALL;
  v3._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  uint64_t v4 = URLRequest.httpBody.getter();
  if (v5 >> 60 == 15) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v5 >> 60 == 15) {
    unint64_t v7 = 0xC000000000000000;
  }
  else {
    unint64_t v7 = v5;
  }
  static String.Encoding.utf8.getter();
  uint64_t v8 = String.init(data:encoding:)();
  unint64_t v10 = v9;
  sub_100006628(v6, v7);
  if (v10) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0x64696C61766E693CLL;
  }
  if (v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = 0xEE003E79646F625FLL;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  return 0x3A73726564616568;
}

uint64_t sub_10004206C()
{
  Swift::Int v0 = sub_10016D944((uint64_t)&off_1001C3880);
  uint64_t result = swift_arrayDestroy();
  qword_1001E0D20 = v0;
  return result;
}

uint64_t sub_1000420B8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DAD30);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DAD30);
  if (qword_1001D9260 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1040);
  Swift::String v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100042180(char a1)
{
  uint64_t result = 0x65526C65636E6143;
  switch(a1)
  {
    case 1:
      return 0x54746E656D796150;
    case 2:
      return 0x706154736156;
    case 3:
      return 0x6156646E41796150;
    case 4:
      return 0x546E776F6E6B6E55;
    case 5:
      return 0x6573616863727550;
    case 6:
      return 0x7254646E75666552;
    case 7:
      return 0x546E776F6E6B6E55;
    case 8:
      unsigned int v3 = 1383686480;
      return v3 | 0x64616500000000;
    case 9:
      unsigned int v3 = 1383293270;
      return v3 | 0x64616500000000;
    case 10:
      unsigned int v4 = 1181966678;
      goto LABEL_15;
    case 11:
      unsigned int v4 = 1182359888;
LABEL_15:
      uint64_t result = v4 | 0x526C696100000000;
      break;
    case 12:
      uint64_t result = 0xD000000000000012;
      break;
    case 13:
      uint64_t result = 0xD000000000000013;
      break;
    case 14:
      uint64_t result = 0x5065727574706143;
      break;
    case 15:
      uint64_t result = 0xD00000000000001ELL;
      break;
    case 16:
      uint64_t result = 0xD00000000000001ELL;
      break;
    case 17:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 18:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 19:
      uint64_t result = 0xD000000000000018;
      break;
    case 20:
      uint64_t result = 0xD000000000000014;
      break;
    case 21:
      uint64_t result = 0xD000000000000014;
      break;
    case 22:
      uint64_t result = 0xD000000000000015;
      break;
    case 23:
      uint64_t result = 0x6E4964656C696146;
      break;
    case 24:
      uint64_t result = 0xD000000000000013;
      break;
    case 25:
      uint64_t result = 0xD000000000000013;
      break;
    case 26:
    case 27:
    case 32:
    case 41:
      uint64_t result = 0xD000000000000011;
      break;
    case 28:
      uint64_t result = 0xD000000000000017;
      break;
    case 29:
      uint64_t result = 0xD000000000000016;
      break;
    case 30:
    case 34:
    case 35:
      uint64_t result = 0x6C75736552796150;
      break;
    case 31:
      uint64_t result = 0xD000000000000013;
      break;
    case 33:
      uint64_t result = 0xD00000000000001CLL;
      break;
    case 36:
      uint64_t result = 0xD000000000000010;
      break;
    case 37:
      uint64_t result = 0x7265746E45464153;
      break;
    case 38:
      uint64_t result = 0x74697845464153;
      break;
    case 39:
      uint64_t result = 0x706154464153;
      break;
    case 40:
      uint64_t result = 0x6176616E55464153;
      break;
    case 42:
      uint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100042664(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_100042180(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100042180(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000426F0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100042180(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100042754()
{
  sub_100042180(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000427A8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100042180(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100042808@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100043578();
  *a1 = result;
  return result;
}

uint64_t sub_100042838@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100042180(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100042864(void *a1@<X8>)
{
  *a1 = &off_1001C4B30;
}

void sub_100042874(char a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  swift_bridgeObjectRetain();
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  aBlock[0] = a2;
  *(void *)(v4 + 16) = 0x8000000000000000;
  sub_100106008((uint64_t)isa, 0xD000000000000017, 0x8000000100195B20, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 16) = aBlock[0];
  swift_bridgeObjectRelease();
  if (qword_1001D8FF0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DAD30);
  swift_retain_n();
  char v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = 0xD000000000000024;
    char v12 = a1;
    unint64_t v13 = 0x8000000100195CC0;
    char v29 = v12;
    switch(v12)
    {
      case 1:
        id v14 = "com.apple.softposreader.configureReaderEvent";
        goto LABEL_12;
      case 2:
        uint64_t v11 = 0xD000000000000032;
        uint64_t v15 = "com.apple.softposreader.configureReaderStatusEvent";
        goto LABEL_14;
      case 3:
        uint64_t v11 = 0xD00000000000002DLL;
        uint64_t v15 = "com.apple.softposreader.payloadCertRenewEvent";
        goto LABEL_14;
      case 4:
        uint64_t v11 = 0xD000000000000025;
        uint64_t v15 = "com.apple.softposreader.cardReadEvent";
        goto LABEL_14;
      case 5:
        uint64_t v11 = 0xD000000000000026;
        uint64_t v15 = "com.apple.softposreader.provisionEvent";
        goto LABEL_14;
      case 6:
        id v14 = "com.apple.softposreader.monitoringAddedEvent";
LABEL_12:
        unint64_t v13 = (unint64_t)(v14 - 32) | 0x8000000000000000;
        uint64_t v11 = 0xD00000000000002CLL;
        break;
      case 7:
        uint64_t v11 = 0xD00000000000002BLL;
        uint64_t v15 = "com.apple.softposreader.monitoringSentEvent";
LABEL_14:
        unint64_t v13 = (unint64_t)(v15 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    sub_100005EB8(v11, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    swift_beginAccess();
    sub_1000432DC();
    swift_bridgeObjectRetain();
    uint64_t v16 = Dictionary.description.getter();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    sub_100005EB8(v16, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "CALogger.postCAEvent(event: %s, eventInput: %s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v29;
  }
  else
  {

    swift_release_n();
  }
  uint64_t v19 = 0xD000000000000024;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      aBlock[4] = (uint64_t)sub_100043298;
      void aBlock[5] = v4;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100063C14;
      aBlock[3] = (uint64_t)&unk_1001C75A0;
      uint64_t v21 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      char v22 = AnalyticsSendEventLazy();
      _Block_release(v21);

      if (v22)
      {
        swift_release();
      }
      else
      {
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          unint64_t v25 = (uint8_t *)swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v25 = 136315138;
          unint64_t v26 = 0x8000000100195CC0;
          switch(a1)
          {
            case 0:
              goto LABEL_30;
            case 1:
              Swift::String v27 = "com.apple.softposreader.configureReaderEvent";
              goto LABEL_27;
            case 2:
              uint64_t v19 = 0xD000000000000032;
              uint64_t v28 = "com.apple.softposreader.configureReaderStatusEvent";
              goto LABEL_29;
            case 3:
              uint64_t v19 = 0xD00000000000002DLL;
              uint64_t v28 = "com.apple.softposreader.payloadCertRenewEvent";
              goto LABEL_29;
            case 4:
              uint64_t v19 = 0xD000000000000025;
              uint64_t v28 = "com.apple.softposreader.cardReadEvent";
              goto LABEL_29;
            case 5:
              uint64_t v19 = 0xD000000000000026;
              uint64_t v28 = "com.apple.softposreader.provisionEvent";
              goto LABEL_29;
            case 6:
              Swift::String v27 = "com.apple.softposreader.monitoringAddedEvent";
LABEL_27:
              unint64_t v26 = (unint64_t)(v27 - 32) | 0x8000000000000000;
              uint64_t v19 = 0xD00000000000002CLL;
              goto LABEL_30;
            case 7:
              uint64_t v19 = 0xD00000000000002BLL;
              uint64_t v28 = "com.apple.softposreader.monitoringSentEvent";
LABEL_29:
              unint64_t v26 = (unint64_t)(v28 - 32) | 0x8000000000000000;
LABEL_30:
              sub_100005EB8(v19, v26, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v23, v24, "CoreAnalytics rejected event %s", v25, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              break;
            default:
              goto LABEL_32;
          }
        }
        swift_release();
      }
      return;
    default:
LABEL_32:
      JUMPOUT(0);
  }
}

void sub_100042F68(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 17) == 1)
  {
    if (qword_1001D90A0 != -1) {
      swift_once();
    }
    sub_100063CEC(a1, *(unsigned __int8 *)(v1 + 16));
  }
  else
  {
    if (qword_1001D8FF0 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100003E78(v3, (uint64_t)qword_1001DAD30);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "CALogger.incrementEventCount - daily collection disabled", v5, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1000430BC(char a1, uint64_t a2, unint64_t a3)
{
  if (*(unsigned char *)(v3 + 17) == 1)
  {
    if (qword_1001D90A0 != -1) {
      swift_once();
    }
    sub_100064244(a1, a2, a3, *(unsigned __int8 *)(v3 + 16));
  }
  else
  {
    if (qword_1001D8FF0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100003E78(v7, (uint64_t)qword_1001DAD30);
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "CALogger.cumulateEvent - daily collection disabled", v9, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10004322C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CALogger()
{
  return self;
}

uint64_t sub_100043260()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100043298()
{
  sub_1000435CC(v0);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000432C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000432D4()
{
  return swift_release();
}

unint64_t sub_1000432DC()
{
  unint64_t result = qword_1001DA580;
  if (!qword_1001DA580)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001DA580);
  }
  return result;
}

uint64_t sub_10004331C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = type metadata accessor for Environment();
  uint64_t v16 = &off_1001C8D80;
  v14[0] = a1;
  *(unsigned char *)(a3 + 16) = *(unsigned char *)(*sub_100006788(v14, v15)
                                 + OBJC_IVAR____TtC9SPREngine11Environment_isProductionEnvironment);
  *(unsigned char *)(a3 + 17) = *(unsigned char *)(a2 + *(int *)(type metadata accessor for Settings() + 64));
  if (qword_1001D8FF0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DAD30);
  swift_retain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v9 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "isProductionAnalytics: %{BOOL}d", v9, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    char v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v12 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "isDailyCollectionEnabled: %{BOOL}d", v12, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  sub_100043980(a2);
  sub_100006520((uint64_t)v14);
  return a3;
}

uint64_t sub_100043578()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x2B) {
    return 43;
  }
  else {
    return v0;
  }
}

uint64_t sub_1000435CC(uint64_t a1)
{
  if (qword_1001D8FF0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DAD30);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "post CA event", v5, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  return *(void *)(a1 + 16);
}

uint64_t sub_1000436C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Settings();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FAFAC((uint64_t)v20);
  if (!v1)
  {
    sub_10004391C(a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings, (uint64_t)v6);
    uint64_t v7 = sub_10001F1A0((uint64_t)v20, v21);
    __chkstk_darwin(v7, v7);
    os_log_type_t v9 = (void *)((char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    uint64_t v11 = *v9;
    uint64_t v12 = type metadata accessor for Environment();
    v19[3] = v12;
    v19[4] = &off_1001C8D80;
    v19[0] = v11;
    type metadata accessor for CALogger();
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = sub_10001F1A0((uint64_t)v19, v12);
    __chkstk_darwin(v14, v14);
    uint64_t v16 = (void *)((char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    a1 = sub_10004331C(*v16, (uint64_t)v6, v13);
    sub_100006520((uint64_t)v19);
    sub_100006520((uint64_t)v20);
  }
  return a1;
}

uint64_t sub_10004391C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Settings();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100043980(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Settings();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CADailyEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xD6) {
    goto LABEL_17;
  }
  if (a2 + 42 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 42) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 42;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 42;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2B;
  int v8 = v6 - 43;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CADailyEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 42 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 42) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD5)
  {
    unsigned int v6 = ((a2 - 214) >> 8) + 1;
    *unint64_t result = a2 + 42;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100043B38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 42;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CADailyEvent()
{
  return &type metadata for CADailyEvent;
}

unint64_t sub_100043B74()
{
  unint64_t result = qword_1001DAE20;
  if (!qword_1001DAE20)
  {
    sub_100003EF4(&qword_1001DAE28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DAE20);
  }
  return result;
}

unint64_t sub_100043BD4()
{
  unint64_t result = qword_1001DAE30;
  if (!qword_1001DAE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DAE30);
  }
  return result;
}

uint64_t sub_100043C28()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DAE38);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DAE38);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100043CF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v41 = a1;
  uint64_t v42 = a7;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  unint64_t v45 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46, v18);
  BOOL v43 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v20 - 8, v21);
  if (qword_1001D8FF8 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100003E78(v22, (uint64_t)qword_1001DAE38);
  swift_bridgeObjectRetain();
  sub_1000065D0(a3, a4);
  swift_bridgeObjectRetain();
  sub_1000065D0(a3, a4);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  int v40 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v39 = v15;
    uint64_t v26 = v25;
    uint64_t v37 = swift_slowAlloc();
    aBlock[0] = v37;
    *(_DWORD *)uint64_t v26 = 136315394;
    uint64_t v38 = a8;
    Swift::String v27 = String.redactedToken()();
    os_log_t v36 = v23;
    uint64_t v48 = (void *)sub_100005EB8(v27._countAndFlagsBits, (unint64_t)v27._object, aBlock);
    uint64_t v41 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    static String.Encoding.utf8.getter();
    uint64_t v28 = String.init(data:encoding:)();
    if (v29)
    {
      unint64_t v30 = v29;
    }
    else
    {
      uint64_t v28 = 4271950;
      unint64_t v30 = 0xE300000000000000;
    }
    uint64_t v48 = (void *)sub_100005EB8(v28, v30, aBlock);
    a8 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(a3, a4);
    sub_100006628(a3, a4);
    uint64_t v23 = v36;
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v40, "OfflineConfiguratorBackend.postOTA(token: %s, payload: %s, progressHandler: <block>, completion: <block>)", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v15 = v39;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100006628(a3, a4);
    sub_100006628(a3, a4);
  }

  id v31 = (void *)swift_allocObject();
  uint64_t v31[2] = a5;
  v31[3] = a6;
  v31[4] = v42;
  v31[5] = a8;
  aBlock[4] = (uint64_t)sub_10004487C;
  void aBlock[5] = (uint64_t)v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000048D8;
  aBlock[3] = (uint64_t)&unk_1001C7698;
  NSString v32 = _Block_copy(aBlock);
  sub_1000448A0(a5);
  swift_retain();
  id v33 = v43;
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_100044918((unint64_t *)&qword_1001DD360, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100003EB0((uint64_t *)&unk_1001DA510);
  sub_100006814((unint64_t *)&qword_1001DD370, (uint64_t *)&unk_1001DA510);
  uint64_t v34 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v15);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v46);
  return swift_release();
}

uint64_t sub_100044270(void (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(unsigned char *, void))
{
  if (a1)
  {
    a1(33);
    a1(66);
    a1(100);
  }
  long long v6 = xmmword_10018A340;
  uint64_t v7 = 0x6C61626F6C67;
  unint64_t v8 = 0xE600000000000000;
  long long v9 = xmmword_10018A340;
  uint64_t v10 = 0x72656E74726170;
  unint64_t v11 = 0xE700000000000000;
  long long v12 = xmmword_10018A340;
  uint64_t v13 = 1;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  BitString.init(data:unusedBits:)(&v6);
  sub_1000448B0((uint64_t)&v6, (uint64_t)v20);
  return a3(v20, 0);
}

uint64_t sub_10004436C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OfflineConfiguratorBackend()
{
  return self;
}

uint64_t sub_1000443C8()
{
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  int v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F160();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchQoS.QoSClass.background(_:), v0);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  static DispatchQoS.unspecified.getter();
  v11[1] = &_swiftEmptyArrayStorage;
  sub_100044918((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_100006814((unint64_t *)&qword_1001DA500, (uint64_t *)&unk_1001DD350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v9 = v11[0];
  *(void *)(v11[0] + 16) = v8;
  return v9;
}

unint64_t sub_1000446DC()
{
  unint64_t result = sub_10004472C();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100044708(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100043CF0(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_10004472C()
{
  if (qword_1001D8FF8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DAE38);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "OfflineConfiguratorBackend.getCertificates()", v3, 2u);
    swift_slowDealloc();
  }

  return 0xD0000000000009E5;
}

uint64_t sub_100044834()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004487C()
{
  return sub_100044270(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(unsigned char *, void))(v0 + 32));
}

uint64_t sub_100044888(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100044898()
{
  return swift_release();
}

uint64_t sub_1000448A0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000448B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DAF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044918(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t (*sub_100044960(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = -1;
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a2;
  v6[3] = v5;
  v6[4] = v2;
  v6[5] = a1;
  swift_unknownObjectRetain();
  return sub_100044AE0;
}

uint64_t sub_1000449F8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100044A08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(a2 + 16);
  uint64_t result = swift_beginAccess();
  if (*(void *)(a2 + 16) < a1)
  {
    [a3 onUpdateWithEvent:a4 progress:a1];
    uint64_t result = swift_beginAccess();
    *uint64_t v8 = a1;
  }
  return result;
}

uint64_t sub_100044AA0()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100044AE0(uint64_t a1)
{
  return sub_100044A08(a1, *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100044AEC(const char *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v27 = a5;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  long long v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  long long v17 = (char *)&v23 - v16;
  OSSignposter.logHandle.getter();
  swift_unknownObjectRetain();
  OSSignpostID.init(log:object:)();
  swift_bridgeObjectRetain_n();
  long long v18 = OSSignposter.logHandle.getter();
  int v19 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
LABEL_11:
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    OSSignpostIntervalState.init(id:isOpen:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  }
  int v26 = v19;
  if (a3)
  {
    if ((unint64_t)a1 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (a1 >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (a1 >> 16 <= 0x10)
      {
        uint64_t v23 = &v30;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  if (a1)
  {
    uint64_t v23 = a1;
LABEL_10:
    os_log_type_t v24 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v24(v14, v17, v9);
    uint64_t v25 = v9;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_100005EB8(v27, a6, &v29);
    uint64_t v9 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v26, v21, v23, "%s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v24(v14, v17, v9);
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = swift_bridgeObjectRelease_n();
  __break(1u);
  return result;
}

uint64_t sub_100044E30(const char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v49 = a5;
  LODWORD(v50) = a3;
  uint64_t v52 = (char *)a1;
  uint64_t v7 = type metadata accessor for OSSignpostError();
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  __chkstk_darwin(v7, v8);
  unint64_t v51 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  int v19 = (char *)&v42 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v42 - v21;
  OSSignposter.logHandle.getter();
  swift_unknownObjectRetain();
  OSSignpostID.init(log:object:)();
  unint64_t v45 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v45(v19, v22, v10);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v23 = v15;
  unint64_t v24 = a6;
  OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v22, v10);
  swift_bridgeObjectRetain_n();
  int v26 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v46 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  os_log_t v44 = v26;
  if ((v50 & 1) == 0)
  {
    uint64_t v28 = v51;
    if (!v52)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_5:

      swift_bridgeObjectRelease_n();
      v25(v23, v10);
      return swift_release();
    }
    goto LABEL_10;
  }
  uint64_t v28 = v51;
  if ((unint64_t)v52 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v52 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v52 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v52 = &v55;
LABEL_10:
  unint64_t v51 = v23;
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v29 = v47;
  char v30 = v28;
  id v31 = v28;
  uint64_t v32 = v48;
  int v33 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v30, v48);
  uint64_t v42 = v25;
  unint64_t v43 = v24;
  if (v33 == enum case for OSSignpostError.doubleEnd(_:))
  {
    char v35 = 0;
    char v34 = 0;
    uint64_t v50 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v32);
    uint64_t v50 = "%s";
    char v34 = 2;
    char v35 = 1;
  }
  os_log_t v36 = v51;
  v45(v22, v51, v10);
  uint64_t v37 = swift_slowAlloc();
  uint64_t v54 = swift_slowAlloc();
  *(unsigned char *)uint64_t v37 = v34;
  *(unsigned char *)(v37 + 1) = v35;
  *(_WORD *)(v37 + 2) = 2080;
  unint64_t v38 = v43;
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_100005EB8(v49, v38, &v54);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_signpost_id_t v39 = OSSignpostID.rawValue.getter();
  os_log_t v40 = v44;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, (os_signpost_type_t)v46, v39, v52, v50, (uint8_t *)v37, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v41 = (uint64_t (*)(char *, uint64_t))v42;
  v42(v36, v10);
  swift_release();
  return v41(v22, v10);
}

uint64_t sub_1000452F0(const char *a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, int a8, unint64_t a9, unint64_t a10)
{
  int v51 = a3;
  int v52 = a8;
  unint64_t v54 = a6;
  unint64_t v61 = a5;
  uint64_t v49 = a4;
  int v59 = (char *)a1;
  uint64_t v50 = type metadata accessor for OSSignpostError();
  uint64_t v53 = *(const char **)(v50 - 8);
  __chkstk_darwin(v50, v11);
  uint64_t v13 = &v47[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  int v19 = &v47[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = &v47[-v22];
  __chkstk_darwin(v21, v24);
  int v26 = &v47[-v25];
  OSSignposter.logHandle.getter();
  swift_unknownObjectRetain();
  OSSignpostID.init(log:object:)();
  uint64_t v27 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 16);
  uint64_t v57 = v26;
  uint64_t v62 = v15 + 16;
  os_log_type_t v63 = v27;
  v27(v23, v26, v14);
  uint64_t v56 = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v28 = OSSignpostIntervalState.init(id:isOpen:)();
  swift_bridgeObjectRetain_n();
  uint64_t v58 = v10;
  uint64_t v29 = OSSignposter.logHandle.getter();
  uint64_t v60 = v28;
  OSSignpostIntervalState.signpostID.getter();
  int v30 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  uint64_t v55 = v15;
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  int v48 = v30;
  if (v52)
  {
    uint64_t v32 = v53;
    if (HIDWORD(v54))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v54 >> 11 == 27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (WORD1(v54) > 0x10u) {
      goto LABEL_27;
    }
    int v33 = &v66;
  }
  else
  {
    uint64_t v32 = v53;
    int v33 = (const char *)v54;
    if (!v54)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_5:

      swift_bridgeObjectRelease_n();
      char v34 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
      v34(v19, v14);
      goto LABEL_14;
    }
  }
  unint64_t v54 = a9;
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v35 = v50;
  if ((*((unsigned int (**)(unsigned char *, uint64_t))v32 + 11))(v13, v50) == enum case for OSSignpostError.doubleEnd(_:))
  {
    char v36 = 0;
    char v37 = 0;
    uint64_t v53 = "[Error] Interval already ended";
  }
  else
  {
    (*((void (**)(unsigned char *, uint64_t))v32 + 1))(v13, v35);
    uint64_t v53 = "%s";
    char v37 = 2;
    char v36 = 1;
  }
  v63(v23, v19, v14);
  uint64_t v38 = swift_slowAlloc();
  uint64_t v65 = swift_slowAlloc();
  *(unsigned char *)uint64_t v38 = v37;
  *(unsigned char *)(v38 + 1) = v36;
  *(_WORD *)(v38 + 2) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v64 = sub_100005EB8(v54, a10, &v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_signpost_id_t v39 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, (os_signpost_type_t)v48, v39, v33, v53, (uint8_t *)v38, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  char v34 = *(void (**)(unsigned char *, uint64_t))(v55 + 8);
  v34(v19, v14);
  v34(v23, v14);
LABEL_14:
  swift_bridgeObjectRetain_n();
  os_log_t v40 = OSSignposter.logHandle.getter();
  int v41 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();

    uint64_t v42 = v57;
LABEL_24:
    v63(v23, v42, v14);
    swift_allocObject();
    OSSignpostIntervalState.init(id:isOpen:)();
    swift_release();
    swift_release();
    return ((uint64_t (*)(unsigned char *, uint64_t))v34)(v42, v14);
  }
  LODWORD(v58) = v41;
  if ((v51 & 1) == 0)
  {
    if (!v59)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
      goto LABEL_18;
    }
LABEL_23:
    uint64_t v42 = v57;
    v63(v23, v57, v14);
    unint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)unint64_t v43 = 136315138;
    uint64_t v44 = v14;
    unint64_t v45 = v61;
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_100005EB8(v49, v45, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v14 = v44;
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v46 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, (os_signpost_type_t)v58, v46, v59, "%s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v34(v23, v44);
    goto LABEL_24;
  }
  if ((unint64_t)v59 >> 32) {
    goto LABEL_26;
  }
  if (v59 >> 11 != 27)
  {
    if (v59 >> 16 <= 0x10)
    {
      int v59 = &v67;
      goto LABEL_23;
    }
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000459DC(uint64_t a1)
{
  return sub_100045AB8(a1, qword_1001E0D28, &qword_1001D9238, (uint64_t)qword_1001E0FC8);
}

uint64_t sub_100045A08(uint64_t a1)
{
  return sub_100045AB8(a1, qword_1001E0D40, &qword_1001D9240, (uint64_t)qword_1001E0FE0);
}

uint64_t sub_100045A34(uint64_t a1)
{
  return sub_100045AB8(a1, qword_1001E0D58, &qword_1001D9270, (uint64_t)qword_1001E1070);
}

uint64_t sub_100045A60(uint64_t a1)
{
  return sub_100045AB8(a1, qword_1001E0D70, &qword_1001D9250, (uint64_t)qword_1001E1010);
}

uint64_t sub_100045A8C(uint64_t a1)
{
  return sub_100045AB8(a1, qword_1001E0D88, &qword_1001D9290, (uint64_t)qword_1001E10D0);
}

uint64_t sub_100045AB8(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OSSignposter();
  sub_100003E14(v12, a2);
  sub_100003E78(v12, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_100003E78(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v13, v7);
  return OSSignposter.init(logger:)();
}

uint64_t sub_100045BEC(uint64_t a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8)
{
  uint64_t v58 = a1;
  uint64_t v59 = a7;
  LODWORD(v60) = a6;
  char v66 = (char *)a4;
  uint64_t v62 = a2;
  unint64_t v63 = a3;
  uint64_t v64 = (const char *)type metadata accessor for OSSignpostError();
  uint64_t v61 = *((void *)v64 - 1);
  __chkstk_darwin(v64, v10);
  uint64_t v12 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)v57 - v21;
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)v57 - v24;
  OSSignposter.logHandle.getter();
  swift_unknownObjectRetain();
  OSSignpostID.init(log:object:)();
  int v26 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v65 = v25;
  uint64_t v27 = v25;
  unint64_t v28 = a8;
  uint64_t v72 = v13;
  uint64_t v70 = v26;
  v26(v22, v27, v13);
  uint64_t v68 = type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v29 = OSSignpostIntervalState.init(id:isOpen:)();
  swift_bridgeObjectRetain_n();
  uint64_t v69 = v8;
  int v30 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v31 = static os_signpost_type_t.end.getter();
  char v32 = OS_os_log.signpostsEnabled.getter();
  os_signpost_type_t v71 = v22;
  uint64_t v67 = v14 + 16;
  v57[1] = v29;
  if ((v32 & 1) == 0) {
    goto LABEL_5;
  }
  LODWORD(v57[0]) = v31;
  if (v60)
  {
    int v33 = v64;
    uint64_t v34 = v61;
    if ((unint64_t)v66 >> 32) {
      goto LABEL_32;
    }
    if (v66 >> 11 == 27) {
      goto LABEL_34;
    }
    if (v66 >> 16 > 0x10) {
      goto LABEL_33;
    }
    char v66 = &v76;
    goto LABEL_10;
  }
  int v33 = v64;
  uint64_t v34 = v61;
  if (v66)
  {
LABEL_10:
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(char *, const char *))(v34 + 88))(v12, v33) == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v35 = 0;
      char v36 = 0;
      uint64_t v64 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, const char *))(v34 + 8))(v12, v33);
      uint64_t v64 = "%s";
      char v36 = 2;
      char v35 = 1;
    }
    uint64_t v37 = v72;
    v70(v22, v18, v72);
    uint64_t v38 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(unsigned char *)uint64_t v38 = v36;
    *(unsigned char *)(v38 + 1) = v35;
    *(_WORD *)(v38 + 2) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v73 = sub_100005EB8(v59, v28, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v39 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, v57[0], v39, v66, v64, (uint8_t *)v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_t v40 = *(const char **)(v14 + 8);
    ((void (*)(char *, uint64_t))v40)(v18, v37);
    uint64_t v64 = v40;
    ((void (*)(char *, uint64_t))v40)(v71, v37);
    goto LABEL_14;
  }
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_5:

  swift_bridgeObjectRelease_n();
  uint64_t v64 = *(const char **)(v14 + 8);
  ((void (*)(char *, uint64_t))v64)(v18, v72);
LABEL_14:
  uint64_t v41 = *(void *)(v58 + 16);
  if (!v41)
  {
LABEL_28:
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v64)(v65, v72);
  }
  v57[0] = v14;
  uint64_t v61 = v14 + 8;
  uint64_t v42 = (unsigned char *)(swift_bridgeObjectRetain() + 48);
  *(void *)&long long v43 = 136315138;
  long long v60 = v43;
  uint64_t v59 = (uint64_t)&type metadata for Any + 8;
  uint64_t v44 = v65;
  while (1)
  {
    uint64_t v47 = (char *)*((void *)v42 - 2);
    char v48 = *v42;
    swift_bridgeObjectRetain_n();
    uint64_t v49 = OSSignposter.logHandle.getter();
    os_signpost_type_t v50 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter()) {
      break;
    }
    swift_bridgeObjectRelease_n();

    os_signpost_id_t v46 = v70;
    unint64_t v45 = v71;
LABEL_17:
    v42 += 24;
    v46(v45, v44, v72);
    swift_allocObject();
    OSSignpostIntervalState.init(id:isOpen:)();
    swift_release();
    if (!--v41)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  if ((v48 & 1) == 0)
  {
    if (!v47) {
      goto LABEL_35;
    }
    char v66 = v47;
LABEL_26:
    int v51 = v71;
    os_signpost_id_t v46 = v70;
    v70(v71, v44, v72);
    uint64_t v52 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = v60;
    unint64_t v53 = v63;
    swift_bridgeObjectRetain();
    *(void *)(v52 + 4) = sub_100005EB8(v62, v53, &v74);
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v54 = OSSignpostID.rawValue.getter();
    os_signpost_type_t v55 = v50;
    unint64_t v45 = v51;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, v55, v54, v66, "%s", (uint8_t *)v52, 0xCu);
    swift_arrayDestroy();
    uint64_t v44 = v65;
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v64)(v51, v72);
    goto LABEL_17;
  }
  if (!((unint64_t)v47 >> 32))
  {
    if (v47 >> 11 == 27) {
      goto LABEL_31;
    }
    if (v47 > 0x10FFFF) {
      goto LABEL_30;
    }
    char v66 = &v75;
    goto LABEL_26;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  uint64_t result = swift_bridgeObjectRelease_n();
  __break(1u);
  return result;
}

unint64_t sub_10004632C(char a1)
{
  unint64_t result = 0x4C536C656E72654BLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x53656C69666F7250;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x44496C61626F6C47;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x655674656C707041;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x7250646564616F4CLL;
      break;
    case 8:
      unint64_t result = 0x646F43726F727245;
      break;
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0x637465464D414C53;
      break;
    case 11:
      unint64_t result = 0x7245726576726553;
      break;
    case 12:
      unint64_t result = 0xD000000000000014;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 14:
      unint64_t result = 0xD000000000000015;
      break;
    case 15:
      unint64_t result = 0x654E6C656E72654BLL;
      break;
    case 16:
    case 18:
      unint64_t result = 0xD000000000000012;
      break;
    case 17:
      unint64_t result = 0x4E656C69666F7250;
      break;
    case 19:
      unint64_t result = 0x5374736575716552;
      break;
    case 20:
      unint64_t result = 0x726F727245464153;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100046610(char a1)
{
  uint64_t result = 0x637465464D414C53;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000012;
      break;
    case 2:
      uint64_t result = 0xD000000000000018;
      break;
    case 3:
      uint64_t result = 0xD000000000000013;
      break;
    case 4:
      uint64_t result = 0xD000000000000011;
      break;
    case 5:
      uint64_t v3 = 0x736575716552;
      goto LABEL_10;
    case 6:
      uint64_t result = 0x7265746E45464153;
      break;
    case 7:
      uint64_t v3 = 0x697845464153;
LABEL_10:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x5474000000000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100046734(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10004632C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10004632C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000467C0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004632C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100046824()
{
  sub_10004632C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100046878()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10004632C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000468D8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100046E8C();
  *a1 = result;
  return result;
}

unint64_t sub_100046908@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10004632C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100046934(unsigned __int8 *a1, char *a2)
{
  return sub_100047630(*a1, *a2);
}

Swift::Int sub_100046940()
{
  return sub_100048244();
}

uint64_t sub_10004694C()
{
  return sub_100047FE0();
}

Swift::Int sub_100046954()
{
  return sub_100048244();
}

unint64_t sub_10004695C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100046EE0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004698C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100046610(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000469B8@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10004735C(*a1);
  *a2 = result;
  return result;
}

void sub_1000469E4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000469F0()
{
  sub_100006520(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ConfiguratorAnalytics()
{
  uint64_t result = qword_1001DAF48;
  if (!qword_1001DAF48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100046A7C()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for ConfiguratorAnalytics.PerformanceField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConfiguratorAnalytics.PerformanceField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100046C10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfiguratorAnalytics.PerformanceField()
{
  return &type metadata for ConfiguratorAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for ConfiguratorAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConfiguratorAnalytics.AnalyticsField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *uint64_t result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100046DA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 20;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfiguratorAnalytics.AnalyticsField()
{
  return &type metadata for ConfiguratorAnalytics.AnalyticsField;
}

unint64_t sub_100046DE0()
{
  unint64_t result = qword_1001DB080;
  if (!qword_1001DB080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DB080);
  }
  return result;
}

unint64_t sub_100046E38()
{
  unint64_t result = qword_1001DB088;
  if (!qword_1001DB088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DB088);
  }
  return result;
}

uint64_t sub_100046E8C()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x15) {
    return 21;
  }
  else {
    return v0;
  }
}

unint64_t sub_100046EE0(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C4D98, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_100046F2C(uint64_t a1)
{
  sub_1000F9AC4((uint64_t)v21);
  if (!v1)
  {
    uint64_t v3 = sub_10001F1A0((uint64_t)v21, v22);
    __chkstk_darwin(v3, v3);
    uint64_t v5 = (void *)((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = *v5;
    uint64_t v8 = type metadata accessor for CALogger();
    v20[3] = v8;
    v20[4] = &off_1001C7558;
    v20[0] = v7;
    type metadata accessor for ConfiguratorAnalytics();
    a1 = swift_allocObject();
    uint64_t v9 = sub_10001F1A0((uint64_t)v20, v8);
    __chkstk_darwin(v9, v9);
    uint64_t v11 = (void *)((char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v12 + 16))(v11);
    uint64_t v13 = *v11;
    v19[3] = v8;
    v19[4] = &off_1001C7558;
    v19[0] = v13;
    sub_100009300((uint64_t)v19, a1 + 16);
    unint64_t v14 = sub_100104EA4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v15 = sub_100104FC0((uint64_t)_swiftEmptyArrayStorage);
    sub_100003EB0(&qword_1001DB0A8);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 32) = 0;
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v15;
    *(void *)(a1 + 56) = v16;
    sub_100006520((uint64_t)v19);
    sub_100006520((uint64_t)v20);
    sub_100006520((uint64_t)v21);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfiguratorAnalytics.LoadStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConfiguratorAnalytics.LoadStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000472CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfiguratorAnalytics.LoadStatus()
{
  return &type metadata for ConfiguratorAnalytics.LoadStatus;
}

unint64_t sub_100047308()
{
  unint64_t result = qword_1001DB0B0;
  if (!qword_1001DB0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DB0B0);
  }
  return result;
}

unint64_t sub_10004735C(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_10004736C()
{
  unint64_t v0 = sub_100106B24(&off_1001C33E0);
  sub_100003EB0(&qword_1001DB0B8);
  uint64_t result = swift_arrayDestroy();
  qword_1001E0DA0 = v0;
  return result;
}

uint64_t sub_1000473C4(uint64_t *a1)
{
  return _sSC16SPRReadErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

uint64_t _sSC16SPRReadErrorCodeLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D9028 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E0DA0;
  if (*(void *)(qword_1001E0DA0 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0x6F72724564616552;
  }
  return v5;
}

unint64_t sub_1000474B0(uint64_t a1)
{
  unint64_t result = sub_100023830();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000474D8(uint64_t a1, char a2)
{
  if (a2)
  {
    switch(a1)
    {
      case 7:
        uint64_t v5 = 4023;
        break;
      case 8:
        uint64_t v5 = 4050;
        break;
      case 9:
        uint64_t v5 = 4051;
        break;
      case 10:
        uint64_t v5 = 4052;
        break;
      default:
        uint64_t v5 = 4053;
        break;
    }
    return sub_10002A544(v5, 0, 0, 0);
  }
  else
  {
    type metadata accessor for ReadError(0);
    sub_100003EB0(&qword_1001DA140);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(void *)(inited + 32) = 0xD000000000000011;
    *(void *)(inited + 40) = 0x8000000100196740;
    *(void *)(inited + 72) = &type metadata for Double;
    *(void *)(inited + 48) = a1;
    sub_100004D6C(inited);
    sub_100023830();
    _BridgedStoredNSError.init(_:userInfo:)();
    return v6;
  }
}

uint64_t sub_100047630(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED0000656D695468;
  uint64_t v3 = 0x637465464D414C53;
  uint64_t v4 = a1;
  uint64_t v5 = 0x637465464D414C53;
  unint64_t v6 = 0xED0000656D695468;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0xD000000000000012;
      BOOL v7 = "KernelSLAMLoadTime";
      goto LABEL_5;
    case 2:
      uint64_t v5 = 0xD000000000000018;
      BOOL v7 = "GlobalConfigSLAMLoadTime";
      goto LABEL_5;
    case 3:
      uint64_t v5 = 0xD000000000000013;
      BOOL v7 = "ProfileSLAMLoadTime";
LABEL_5:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v6 = 0x80000001001934D0;
      uint64_t v5 = 0xD000000000000011;
      break;
    case 5:
      uint64_t v8 = 0x736575716552;
      goto LABEL_10;
    case 6:
      uint64_t v5 = 0x7265746E45464153;
      unint64_t v6 = 0xEC000000656D6954;
      break;
    case 7:
      uint64_t v8 = 0x697845464153;
LABEL_10:
      uint64_t v5 = v8 & 0xFFFFFFFFFFFFLL | 0x5474000000000000;
      unint64_t v6 = 0xEB00000000656D69;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 0xD000000000000012;
      uint64_t v9 = "KernelSLAMLoadTime";
      goto LABEL_15;
    case 2:
      uint64_t v3 = 0xD000000000000018;
      uint64_t v9 = "GlobalConfigSLAMLoadTime";
      goto LABEL_15;
    case 3:
      uint64_t v3 = 0xD000000000000013;
      uint64_t v9 = "ProfileSLAMLoadTime";
LABEL_15:
      unint64_t v2 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v2 = 0x80000001001934D0;
      uint64_t v3 = 0xD000000000000011;
      break;
    case 5:
      uint64_t v10 = 0x736575716552;
      goto LABEL_20;
    case 6:
      uint64_t v3 = 0x7265746E45464153;
      unint64_t v2 = 0xEC000000656D6954;
      break;
    case 7:
      uint64_t v10 = 0x697845464153;
LABEL_20:
      uint64_t v3 = v10 & 0xFFFFFFFFFFFFLL | 0x5474000000000000;
      unint64_t v2 = 0xEB00000000656D69;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_1000478D0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x8000000100192EE0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x656D695464616572;
      unint64_t v3 = 0xEB00000000564D45;
      break;
    case 2:
      unint64_t v5 = 0x6D69546C61746F74;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 3:
      unint64_t v5 = 0x54676E696C6C6F70;
      unint64_t v3 = 0xEE00534156656D69;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x8000000100192EE0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEB00000000564D45;
      if (v5 == 0x656D695464616572) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x6D69546C61746F74;
      unint64_t v6 = 0xE900000000000065;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEE00534156656D69;
      if (v5 == 0x54676E696C6C6F70) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100047A8C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 1701080909;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1701080909;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x746942746E657645;
      unint64_t v3 = 0xEB0000000070616DLL;
      break;
    case 2:
      unint64_t v3 = 0x8000000100193520;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000018;
      unint64_t v3 = 0x8000000100193540;
      break;
    case 4:
      unint64_t v5 = 0x7A69536863746142;
      goto LABEL_7;
    case 5:
      unint64_t v5 = 0x646F43726F727245;
LABEL_7:
      unint64_t v3 = 0xE900000000000065;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x746942746E657645;
      unint64_t v6 = 0xEB0000000070616DLL;
      break;
    case 2:
      unint64_t v6 = 0x8000000100193520;
      unint64_t v2 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v2 = 0xD000000000000018;
      unint64_t v6 = 0x8000000100193540;
      break;
    case 4:
      unint64_t v2 = 0x7A69536863746142;
      goto LABEL_14;
    case 5:
      unint64_t v2 = 0x646F43726F727245;
LABEL_14:
      unint64_t v6 = 0xE900000000000065;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100047C94(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000018;
  }
  else {
    unint64_t v3 = 0xD000000000000010;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100193A20;
  }
  else {
    unint64_t v4 = 0x8000000100193A40;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000018;
  }
  else {
    unint64_t v5 = 0xD000000000000010;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100193A40;
  }
  else {
    unint64_t v6 = 0x8000000100193A20;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

Swift::Int sub_100047D40()
{
  return Hasher._finalize()();
}

Swift::Int sub_100047E38()
{
  return Hasher._finalize()();
}

Swift::Int sub_100047F58()
{
  return Hasher._finalize()();
}

uint64_t sub_100047FE0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100048138()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100048244()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000483AC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000484A0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000485BC()
{
  return Hasher._finalize()();
}

unint64_t sub_100048640(char a1)
{
  unint64_t result = 1701080909;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746942746E657645;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0x7A69536863746142;
      break;
    case 5:
      unint64_t result = 0x646F43726F727245;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100048718(unsigned __int8 *a1, char *a2)
{
  return sub_100047A8C(*a1, *a2);
}

Swift::Int sub_100048724()
{
  return sub_100047E38();
}

uint64_t sub_10004872C()
{
  return sub_100048138();
}

Swift::Int sub_100048734()
{
  return sub_1000484A0();
}

unint64_t sub_10004873C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000491D8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10004876C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100048640(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t default argument 0 of IteratorProtocol<>.nextBoolean(tag:)()
{
  return 1;
}

Swift::Int sub_1000487A0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000487F8()
{
  return String.hash(into:)();
}

Swift::Int sub_100048814()
{
  return Hasher._finalize()();
}

uint64_t sub_100048868@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C4F28, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1000488BC(void *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x8000000100193570;
}

void sub_1000488DC(int a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_100003EB0(&qword_1001DB278);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10018A620;
  *(unsigned char *)(inited + 32) = 0;
  char v9 = *(unsigned char *)(v4 + 64);
  *(void *)(inited + 64) = &type metadata for UInt8;
  *(unsigned char *)(inited + 40) = v9;
  *(unsigned char *)(inited + 72) = 1;
  *(void *)(inited + 104) = &type metadata for UInt32;
  *(_DWORD *)(inited + 80) = a1;
  *(unsigned char *)(inited + 112) = 2;
  *(void *)(inited + 144) = &type metadata for UInt64;
  *(void *)(inited + 120) = a2;
  *(unsigned char *)(inited + 152) = 3;
  *(void *)(inited + 184) = &type metadata for UInt8;
  *(unsigned char *)(inited + 160) = a3;
  sub_100104ACC(inited);
  uint64_t v10 = *(os_unfair_lock_s **)(v4 + 56);
  char v11 = (uint64_t *)&v10[4];
  uint64_t v12 = v10 + 8;
  os_unfair_lock_lock(v10 + 8);
  sub_100049258(v11);
  os_unfair_lock_unlock(v12);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v12);
  sub_100049240(v11);
  os_unfair_lock_unlock(v12);
}

void sub_100048A08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100003EB0(&qword_1001DB278);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001861D0;
  *(unsigned char *)(inited + 32) = 4;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 40) = a1;
  *(unsigned char *)(inited + 72) = 5;
  *(void *)(inited + 104) = &type metadata for Int;
  *(void *)(inited + 80) = a2;
  sub_100104ACC(inited);
  char v7 = *(os_unfair_lock_s **)(v3 + 56);
  uint64_t v8 = (uint64_t *)&v7[4];
  char v9 = v7 + 8;
  os_unfair_lock_lock(v7 + 8);
  sub_100049224(v8);
  os_unfair_lock_unlock(v9);
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v9);
  sub_10001F0A4(v8);
  os_unfair_lock_unlock(v9);
}

uint64_t sub_100048AF8()
{
  sub_100006520(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MonitorAnalytics()
{
  uint64_t result = qword_1001DB0E8;
  if (!qword_1001DB0E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100048B84()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for MonitorAnalytics.PerformanceField(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for MonitorAnalytics.PerformanceField(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100048CBCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MonitorAnalytics.PerformanceField()
{
  return &type metadata for MonitorAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for MonitorAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MonitorAnalytics.AnalyticsField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100048E50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MonitorAnalytics.AnalyticsField()
{
  return &type metadata for MonitorAnalytics.AnalyticsField;
}

unint64_t sub_100048E8C()
{
  unint64_t result = qword_1001DB250;
  if (!qword_1001DB250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DB250);
  }
  return result;
}

unint64_t sub_100048EE4()
{
  unint64_t result = qword_1001DB258;
  if (!qword_1001DB258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DB258);
  }
  return result;
}

uint64_t sub_100048F38(uint64_t a1, uint64_t a2)
{
  v9[3] = type metadata accessor for CALogger();
  v9[4] = &off_1001C7558;
  v9[0] = a1;
  *(unsigned char *)(a2 + 64) = 0;
  sub_100009300((uint64_t)v9, (uint64_t)v8);
  unint64_t v4 = sub_100104EA4((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v5 = sub_100104FC0((uint64_t)_swiftEmptyArrayStorage);
  sub_100003EB0(&qword_1001DB280);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 32) = 0;
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  *(void *)(a2 + 56) = v6;
  sub_10001F1F0(v8, a2 + 16);
  sub_100006520((uint64_t)v9);
  return a2;
}

uint64_t sub_100048FF0(uint64_t a1)
{
  sub_1000F9AC4((uint64_t)v16);
  if (!v1)
  {
    uint64_t v3 = sub_10001F1A0((uint64_t)v16, v17);
    __chkstk_darwin(v3, v3);
    unint64_t v5 = (void *)((char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = *v5;
    uint64_t v8 = type metadata accessor for CALogger();
    v15[3] = v8;
    v15[4] = &off_1001C7558;
    v15[0] = v7;
    type metadata accessor for MonitorAnalytics();
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = sub_10001F1A0((uint64_t)v15, v8);
    __chkstk_darwin(v10, v10);
    uint64_t v12 = (void *)((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    a1 = sub_100048F38(*v12, v9);
    sub_100006520((uint64_t)v15);
    sub_100006520((uint64_t)v16);
  }
  return a1;
}

unint64_t sub_1000491D8(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C4E78, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t sub_100049224(uint64_t *a1)
{
  return sub_10006CDCC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100049240(uint64_t *a1)
{
  return sub_10001F0A4(a1);
}

uint64_t sub_100049258(uint64_t *a1)
{
  return sub_100049224(a1);
}

uint64_t sub_100049270()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DB288);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DB288);
  if (qword_1001D9268 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1058);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100049338@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  sub_100049CAC(v1 + 184, (uint64_t)&v4);
  if (v5) {
    return sub_10001F1F0(&v4, (uint64_t)a1);
  }
  sub_100049D14((uint64_t)&v4);
  sub_100049500(0xD000000000000017, 0x8000000100196850, (void *)(v1 + 136), a1);
  sub_100009300((uint64_t)a1, (uint64_t)&v4);
  swift_beginAccess();
  sub_100049D74((uint64_t)&v4, v1 + 184);
  return swift_endAccess();
}

uint64_t sub_100049404@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  sub_100049CAC(v1 + 224, (uint64_t)&v6);
  if (v7) {
    return sub_10001F1F0(&v6, (uint64_t)a1);
  }
  sub_100049D14((uint64_t)&v6);
  uint64_t v4 = type metadata accessor for NullAuditor();
  uint64_t inited = swift_initStaticObject();
  uint64_t v7 = v4;
  uint64_t v8 = &off_1001C7208;
  *(void *)&long long v6 = inited;
  sub_100049500(0xD000000000000017, 0x8000000100196850, &v6, a1);
  sub_100006520((uint64_t)&v6);
  sub_100009300((uint64_t)a1, (uint64_t)&v6);
  swift_beginAccess();
  sub_100049D74((uint64_t)&v6, v1 + 224);
  return swift_endAccess();
}

uint64_t sub_100049500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = a3[3];
  uint64_t v11 = a3[4];
  sub_100006788(a3, v10);
  sub_1001362E4(1, v10, v11);
  uint64_t v12 = *(os_unfair_lock_s **)(v5 + 176);
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = v5;
  char v36 = a3;
  uint64_t v13 = (uint64_t *)&v12[4];
  unint64_t v14 = v12 + 6;
  os_unfair_lock_lock(v12 + 6);
  sub_100049DDC(v13, &v38);
  os_unfair_lock_unlock(v14);
  uint64_t v15 = *((void *)&v38 + 1);
  sub_100009300(v5 + 56, (uint64_t)&v38);
  uint64_t v16 = sub_10001F1A0((uint64_t)&v38, v39);
  __chkstk_darwin(v16, v16);
  uint64_t v18 = (uint64_t *)&v32[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = *v18;
  uint64_t v21 = type metadata accessor for DefaultSecureTimeKeeper();
  v37[3] = v21;
  v37[4] = &off_1001C84C8;
  v37[0] = v20;
  uint64_t v22 = type metadata accessor for SecureChannel();
  uint64_t v23 = (void *)swift_allocObject();
  uint64_t v24 = sub_10001F1A0((uint64_t)v37, v21);
  __chkstk_darwin(v24, v24);
  int v26 = (uint64_t *)&v32[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  uint64_t v28 = *v26;
  uint64_t v29 = swift_unknownObjectRetain();
  int v30 = sub_10004A1F8(v29, v15, v28, v23, 600.0);
  swift_unknownObjectRelease();
  sub_100006520((uint64_t)v37);
  sub_100006520((uint64_t)&v38);
  a4[3] = v22;
  a4[4] = &off_1001C8B08;
  uint64_t result = swift_unknownObjectRelease();
  *a4 = v30;
  return result;
}

void sub_10004979C(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v12 = *a1;
  if (*(void *)(*a1 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_10000C4B0(a2, a3);
    if (v14)
    {
      long long v32 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v13);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      if (qword_1001D9030 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100003E78(v15, (uint64_t)qword_1001DB288);
      swift_bridgeObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        swift_bridgeObjectRetain();
        sub_100005EB8(a2, a3, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Reusing signer for %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      long long v19 = v32;
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_1001D9030 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003E78(v20, (uint64_t)qword_1001DB288);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain();
    sub_100005EB8(a2, a3, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Creating new signer for %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v24 = (void *)*sub_100006788((void *)(a4 + 96), *(void *)(a4 + 120));
  uint64_t v25 = a5[3];
  uint64_t v26 = a5[4];
  uint64_t v27 = sub_100006788(a5, v25);
  uint64_t v28 = sub_10013FA28(a2, a3, 400, 0x632D657275636573, 0xEE006C656E6E6168, (uint64_t)v27, v24, v25, v26);
  uint64_t v30 = v29;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v33 = *a1;
  *a1 = 0x8000000000000000;
  sub_1001062AC((uint64_t)v28, v30, a2, a3, isUniquelyReferenced_nonNull_native);
  *a1 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v19 = v28;
  *((void *)&v19 + 1) = v30;
LABEL_15:
  *a6 = v19;
}

uint64_t sub_100049C20()
{
  sub_100006520(v0 + 16);
  sub_100006520(v0 + 56);
  sub_100006520(v0 + 96);
  sub_100006520(v0 + 136);
  swift_release();
  sub_100049D14(v0 + 184);
  sub_100049D14(v0 + 224);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureChannelFactory()
{
  return self;
}

uint64_t sub_100049CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DB3C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100049D14(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001DB3C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100049D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DB3C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100049DDC(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10004979C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t sub_100049DFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v18[3] = type metadata accessor for SystemInfo();
  v18[4] = &off_1001CB4C8;
  v18[0] = a1;
  v17[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v17[4] = &off_1001C84C8;
  v17[0] = a2;
  uint64_t v16[3] = type metadata accessor for SignerFactory();
  v16[4] = &off_1001CB9D0;
  v16[0] = a3;
  unint64_t v10 = sub_1001051D0((uint64_t)_swiftEmptyArrayStorage);
  sub_100003EB0(&qword_1001DB3E0);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 16) = v10;
  *(void *)(a5 + 176) = v11;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_OWORD *)(a5 + 248) = 0u;
  sub_100009300((uint64_t)v18, a5 + 16);
  sub_100009300((uint64_t)v17, a5 + 56);
  sub_100009300((uint64_t)v16, a5 + 96);
  uint64_t v12 = a4[3];
  uint64_t v13 = a4[4];
  sub_100006788(a4, v12);
  sub_100134448(5, v12, v13);
  sub_100006520((uint64_t)v16);
  sub_100006520((uint64_t)v17);
  sub_100006520((uint64_t)v18);
  sub_10001F1F0(&v15, a5 + 136);
  sub_100006520((uint64_t)a4);
  return a5;
}

uint64_t sub_100049F58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = type metadata accessor for SystemInfo();
  long long v32 = &off_1001CB4C8;
  v30[0] = a1;
  uint64_t v28 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v29 = &off_1001C84C8;
  v27[0] = a2;
  uint64_t v25 = type metadata accessor for SignerFactory();
  uint64_t v26 = &off_1001CB9D0;
  v24[0] = a3;
  type metadata accessor for SecureChannelFactory();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_10001F1A0((uint64_t)v30, v31);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_10001F1A0((uint64_t)v27, v28);
  __chkstk_darwin(v13, v13);
  long long v15 = (void *)((char *)&v24[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_10001F1A0((uint64_t)v24, v25);
  __chkstk_darwin(v17, v17);
  long long v19 = (void *)((char *)&v24[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_100049DFC(*v11, *v15, *v19, a4, v8);
  sub_100006520((uint64_t)v24);
  sub_100006520((uint64_t)v27);
  sub_100006520((uint64_t)v30);
  return v21;
}

void *sub_10004A1F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  uint64_t v25[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v25[4] = &off_1001C84C8;
  v25[0] = a3;
  if (qword_1001D90E0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DCB58);
  sub_100009300((uint64_t)v25, (uint64_t)v24);
  swift_unknownObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    v22[1] = a2;
    swift_unknownObjectRetain();
    sub_100003EB0(&qword_1001DB3D0);
    uint64_t v14 = String.init<A>(describing:)();
    v22[0] = sub_100005EB8(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    sub_100009300((uint64_t)v24, (uint64_t)v22);
    sub_100003EB0(&qword_1001DB3D8);
    uint64_t v16 = String.init<A>(describing:)();
    v22[0] = sub_100005EB8(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v24);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SecureChannel.init(signer: %s, secureTimeKeeper: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
    sub_100006520((uint64_t)v24);
  }

  a4[2] = a1;
  a4[3] = a2;
  sub_100009300((uint64_t)v25, (uint64_t)(a4 + 4));
  uint64_t v18 = self;
  swift_unknownObjectRetain();
  id v19 = [v18 ephemeralSessionConfiguration];
  [v19 setTimeoutIntervalForResource:a5];
  [v19 setTLSMinimumSupportedProtocolVersion:771];
  id v20 = [self sessionWithConfiguration:v19];

  sub_100006520((uint64_t)v25);
  a4[9] = v20;
  return a4;
}

uint64_t sub_10004A508()
{
  sub_1000FB4F0((uint64_t)v20);
  if (v0)
  {
    swift_release();
  }
  else
  {
    sub_1000F85DC((uint64_t)v18);
    sub_1000FBA34((uint64_t)v16);
    sub_1000F8B20((uint64_t)v15);
    uint64_t v3 = sub_10001F1A0((uint64_t)v20, v21);
    __chkstk_darwin(v3, v3);
    uint64_t v5 = (void *)((char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = sub_10001F1A0((uint64_t)v18, v19);
    __chkstk_darwin(v7, v7);
    uint64_t v9 = (void *)((char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    uint64_t v11 = sub_10001F1A0((uint64_t)v16, v17);
    __chkstk_darwin(v11, v11);
    uint64_t v13 = (void *)((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    uint64_t v1 = sub_100049F58(*v5, *v9, *v13, v15);
    sub_100006520((uint64_t)v16);
    sub_100006520((uint64_t)v18);
    sub_100006520((uint64_t)v20);
    swift_release();
  }
  return v1;
}

uint64_t sub_10004A804()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DB3E8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DB3E8);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Int sub_10004A8CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003E78(v4, (uint64_t)qword_1001DB3E8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      v15[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      sub_100003EB0(&qword_1001DB498);
      uint64_t v8 = Optional.debugDescription.getter();
      sub_100005EB8(v8, v9, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error creating SEManagerSession: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v12 = *(void **)(a4 + 16);
    *(void *)(a4 + 16) = a1;
    id v13 = a1;
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t type metadata accessor for NFSESessionBlock()
{
  return self;
}

void sub_10004AAF4()
{
  if (qword_1001D9038 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DB3E8);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "NF SE Manager Session ended in runWithManagerBlock()", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10004ABDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  uint64_t v7 = (id *)(v6 + 16);
  id v8 = [self sharedHardwareManager];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v6;
  unint64_t v45 = (void (*)())sub_10004CE10;
  uint64_t v46 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  long long v43 = sub_100005210;
  uint64_t v44 = &unk_1001C7B58;
  uint64_t v10 = _Block_copy(&aBlock);
  uint64_t v11 = v5;
  swift_retain();
  swift_release();
  id v12 = [v8 startSecureElementManagerSession:v10];
  _Block_release(v10);

  if (([v12 isFirstInQueue] & 1) == 0)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001DB3E8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "waiting for NFSecureElementManagerSession ...", v16, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v17 = v11;
  OS_dispatch_semaphore.wait(timeout:)();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100003E78(v18, (uint64_t)qword_1001DB3E8);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "timeout, fail to obtain manager session", v21, 2u);
      swift_slowDealloc();
    }

    unint64_t v45 = sub_10004AAF4;
    uint64_t v46 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    os_log_type_t v22 = &unk_1001C7BF8;
LABEL_25:
    long long v43 = sub_1000048D8;
    uint64_t v44 = v22;
    uint64_t v34 = _Block_copy(&aBlock);
    LOBYTE(v23) = 0;
LABEL_26:
    [v12 endSessionWithCompletion:v34, a2, a3, a4, a5];
    _Block_release(v34);
    swift_release();
    swift_unknownObjectRelease();

    return v23 & 1;
  }
  swift_beginAccess();
  if (!*v7)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100003E78(v30, (uint64_t)qword_1001DB3E8);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "SE Manager Session fails", v33, 2u);
      swift_slowDealloc();
    }

    unint64_t v45 = sub_10004AAF4;
    uint64_t v46 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    os_log_type_t v22 = &unk_1001C7B80;
    goto LABEL_25;
  }
  uint64_t v23 = qword_1001D9038;
  id v24 = *v7;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100003E78(v25, (uint64_t)qword_1001DB3E8);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "NF SE Manager Session started from runWithManagerBlock()", v28, 2u);
    uint64_t v17 = v11;
    swift_slowDealloc();
  }

  sub_10014A1D8((uint64_t)v24, a2, a3, a4, a5);
  if (!v40)
  {

    unint64_t v45 = sub_10004AAF4;
    uint64_t v46 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    long long v43 = sub_1000048D8;
    uint64_t v44 = &unk_1001C7BD0;
    uint64_t v34 = _Block_copy(&aBlock);
    LOBYTE(v23) = 1;
    goto LABEL_26;
  }

  unint64_t v45 = sub_10004AAF4;
  uint64_t v46 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  long long v43 = sub_1000048D8;
  uint64_t v44 = &unk_1001C7BA8;
  uint64_t v29 = _Block_copy(&aBlock);
  [v12 endSessionWithCompletion:v29];
  _Block_release(v29);

  swift_release();
  swift_unknownObjectRelease();
  return v23 & 1;
}

uint64_t sub_10004B274()
{
  dispatch_semaphore_t v0 = dispatch_semaphore_create(0);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  uint64_t v2 = (id *)(v1 + 16);
  id v3 = [self sharedHardwareManager];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v1;
  char v36 = (void (*)())sub_10004CE10;
  uint64_t v37 = v4;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256;
  uint64_t v34 = sub_100005210;
  uint64_t v35 = &unk_1001C7E28;
  dispatch_semaphore_t v5 = _Block_copy(&aBlock);
  uint64_t v6 = v0;
  swift_retain();
  swift_release();
  id v7 = [v3 startSecureElementManagerSession:v5];
  _Block_release(v5);

  if (([v7 isFirstInQueue] & 1) == 0)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100003E78(v8, (uint64_t)qword_1001DB3E8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "waiting for NFSecureElementManagerSession ...", v11, 2u);
      swift_slowDealloc();
    }
  }
  id v12 = v6;
  OS_dispatch_semaphore.wait(timeout:)();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001DB3E8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "timeout, fail to obtain manager session", v16, 2u);
      swift_slowDealloc();
    }

    char v36 = sub_10004AAF4;
    uint64_t v37 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v17 = &unk_1001C7EC8;
LABEL_25:
    uint64_t v34 = sub_1000048D8;
    uint64_t v35 = v17;
    uint64_t v29 = _Block_copy(&aBlock);
    LOBYTE(v18) = 0;
LABEL_26:
    [v7 endSessionWithCompletion:v29];
    _Block_release(v29);
    swift_release();
    swift_unknownObjectRelease();

    return v18 & 1;
  }
  swift_beginAccess();
  if (!*v2)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100003E78(v25, (uint64_t)qword_1001DB3E8);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "SE Manager Session fails", v28, 2u);
      swift_slowDealloc();
    }

    char v36 = sub_10004AAF4;
    uint64_t v37 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v17 = &unk_1001C7E50;
    goto LABEL_25;
  }
  uint64_t v18 = qword_1001D9038;
  id v19 = *v2;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003E78(v20, (uint64_t)qword_1001DB3E8);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "NF SE Manager Session started from runWithManagerBlock()", v23, 2u);
    id v12 = v6;
    swift_slowDealloc();
  }

  sub_1000AE714();
  if (!v31)
  {

    char v36 = sub_10004AAF4;
    uint64_t v37 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v34 = sub_1000048D8;
    uint64_t v35 = &unk_1001C7EA0;
    uint64_t v29 = _Block_copy(&aBlock);
    LOBYTE(v18) = 1;
    goto LABEL_26;
  }

  char v36 = sub_10004AAF4;
  uint64_t v37 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256;
  uint64_t v34 = sub_1000048D8;
  uint64_t v35 = &unk_1001C7E78;
  id v24 = _Block_copy(&aBlock);
  [v7 endSessionWithCompletion:v24];
  _Block_release(v24);

  swift_release();
  swift_unknownObjectRelease();
  return v18 & 1;
}

uint64_t sub_10004B8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  id v7 = (id *)(v6 + 16);
  id v8 = [self sharedHardwareManager];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v5;
  *(void *)(v9 + 24) = v6;
  unint64_t v45 = sub_10004BFD0;
  uint64_t v46 = v9;
  aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  long long v43 = sub_100005210;
  uint64_t v44 = &unk_1001C7A68;
  os_log_type_t v10 = _Block_copy(&aBlock);
  uint64_t v11 = v5;
  swift_retain();
  swift_release();
  id v12 = [v8 startSecureElementManagerSession:v10];
  _Block_release(v10);

  if (([v12 isFirstInQueue] & 1) == 0)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001DB3E8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "waiting for NFSecureElementManagerSession ...", v16, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v17 = v11;
  OS_dispatch_semaphore.wait(timeout:)();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100003E78(v18, (uint64_t)qword_1001DB3E8);
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "timeout, fail to obtain manager session", v21, 2u);
      swift_slowDealloc();
    }

    unint64_t v45 = sub_10004AAF4;
    uint64_t v46 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    os_log_type_t v22 = &unk_1001C7B08;
LABEL_25:
    long long v43 = sub_1000048D8;
    uint64_t v44 = v22;
    uint64_t v34 = _Block_copy(&aBlock);
    LOBYTE(v23) = 0;
LABEL_26:
    [v12 endSessionWithCompletion:v34, a2, a3, a4, a5];
    _Block_release(v34);
    swift_release();
    swift_unknownObjectRelease();

    return v23 & 1;
  }
  swift_beginAccess();
  if (!*v7)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100003E78(v30, (uint64_t)qword_1001DB3E8);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "SE Manager Session fails", v33, 2u);
      swift_slowDealloc();
    }

    unint64_t v45 = sub_10004AAF4;
    uint64_t v46 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    os_log_type_t v22 = &unk_1001C7A90;
    goto LABEL_25;
  }
  uint64_t v23 = qword_1001D9038;
  id v24 = *v7;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100003E78(v25, (uint64_t)qword_1001DB3E8);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "NF SE Manager Session started from runWithManagerBlock()", v28, 2u);
    uint64_t v17 = v11;
    swift_slowDealloc();
  }

  sub_10014A258((uint64_t)v24, a2, a3, a4, a5);
  if (!v40)
  {

    unint64_t v45 = sub_10004AAF4;
    uint64_t v46 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v42 = 1107296256;
    long long v43 = sub_1000048D8;
    uint64_t v44 = &unk_1001C7AE0;
    uint64_t v34 = _Block_copy(&aBlock);
    LOBYTE(v23) = 1;
    goto LABEL_26;
  }

  unint64_t v45 = sub_10004AAF4;
  uint64_t v46 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v42 = 1107296256;
  long long v43 = sub_1000048D8;
  uint64_t v44 = &unk_1001C7AB8;
  uint64_t v29 = _Block_copy(&aBlock);
  [v12 endSessionWithCompletion:v29];
  _Block_release(v29);

  swift_release();
  swift_unknownObjectRelease();
  return v23 & 1;
}

uint64_t sub_10004BF94()
{
  return _swift_deallocObject(v0, 24, 7);
}

Swift::Int sub_10004BFD0(void *a1, uint64_t a2)
{
  return sub_10004A8CC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10004BFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004BFE8()
{
  return swift_release();
}

uint64_t sub_10004BFF4()
{
  dispatch_semaphore_t v0 = dispatch_semaphore_create(0);
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  uint64_t v2 = (id *)(v1 + 16);
  id v3 = [self sharedHardwareManager];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v0;
  *(void *)(v4 + 24) = v1;
  char v36 = (void (*)())sub_10004CE10;
  uint64_t v37 = v4;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256;
  uint64_t v34 = sub_100005210;
  uint64_t v35 = &unk_1001C7C48;
  dispatch_semaphore_t v5 = _Block_copy(&aBlock);
  uint64_t v6 = v0;
  swift_retain();
  swift_release();
  id v7 = [v3 startSecureElementManagerSession:v5];
  _Block_release(v5);

  if (([v7 isFirstInQueue] & 1) == 0)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100003E78(v8, (uint64_t)qword_1001DB3E8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "waiting for NFSecureElementManagerSession ...", v11, 2u);
      swift_slowDealloc();
    }
  }
  id v12 = v6;
  OS_dispatch_semaphore.wait(timeout:)();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100003E78(v13, (uint64_t)qword_1001DB3E8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "timeout, fail to obtain manager session", v16, 2u);
      swift_slowDealloc();
    }

    char v36 = sub_10004AAF4;
    uint64_t v37 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v17 = &unk_1001C7CE8;
LABEL_25:
    uint64_t v34 = sub_1000048D8;
    uint64_t v35 = v17;
    uint64_t v29 = _Block_copy(&aBlock);
    LOBYTE(v18) = 0;
LABEL_26:
    [v7 endSessionWithCompletion:v29];
    _Block_release(v29);
    swift_release();
    swift_unknownObjectRelease();

    return v18 & 1;
  }
  swift_beginAccess();
  if (!*v2)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100003E78(v25, (uint64_t)qword_1001DB3E8);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "SE Manager Session fails", v28, 2u);
      swift_slowDealloc();
    }

    char v36 = sub_10004AAF4;
    uint64_t v37 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v17 = &unk_1001C7C70;
    goto LABEL_25;
  }
  uint64_t v18 = qword_1001D9038;
  id v19 = *v2;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003E78(v20, (uint64_t)qword_1001DB3E8);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "NF SE Manager Session started from runWithManagerBlock()", v23, 2u);
    id v12 = v6;
    swift_slowDealloc();
  }

  sub_10012ADA0();
  if (!v31)
  {

    char v36 = sub_10004AAF4;
    uint64_t v37 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v34 = sub_1000048D8;
    uint64_t v35 = &unk_1001C7CC0;
    uint64_t v29 = _Block_copy(&aBlock);
    LOBYTE(v18) = 1;
    goto LABEL_26;
  }

  char v36 = sub_10004AAF4;
  uint64_t v37 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256;
  uint64_t v34 = sub_1000048D8;
  uint64_t v35 = &unk_1001C7C98;
  id v24 = _Block_copy(&aBlock);
  [v7 endSessionWithCompletion:v24];
  _Block_release(v24);

  swift_release();
  swift_unknownObjectRelease();
  return v18 & 1;
}

uint64_t sub_10004C680(uint64_t a1, void (*a2)(id), uint64_t a3)
{
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  dispatch_semaphore_t v5 = (id *)(v4 + 16);
  id v6 = [self sharedHardwareManager];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v4;
  uint64_t v40 = (void (*)())sub_10004CE10;
  uint64_t v41 = v7;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  long long v38 = sub_100005210;
  uint64_t v39 = &unk_1001C7D38;
  uint64_t v8 = _Block_copy(&aBlock);
  uint64_t v9 = v3;
  swift_retain();
  swift_release();
  id v10 = [v6 startSecureElementManagerSession:v8];
  _Block_release(v8);

  if (([v10 isFirstInQueue] & 1) == 0)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100003E78(v11, (uint64_t)qword_1001DB3E8);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "waiting for NFSecureElementManagerSession ...", v14, 2u);
      swift_slowDealloc();
    }
  }
  OS_dispatch_semaphore.wait(timeout:)();
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100003E78(v15, (uint64_t)qword_1001DB3E8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "timeout, fail to obtain manager session", v18, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = sub_10004AAF4;
    uint64_t v41 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256;
    id v19 = &unk_1001C7DD8;
LABEL_25:
    long long v38 = sub_1000048D8;
    uint64_t v39 = v19;
    uint64_t v31 = _Block_copy(&aBlock);
    LOBYTE(v20) = 0;
LABEL_26:
    [v10 endSessionWithCompletion:v31 a3:a2];
    _Block_release(v31);
    swift_release();
    swift_unknownObjectRelease();

    return v20 & 1;
  }
  swift_beginAccess();
  if (!*v5)
  {
    if (qword_1001D9038 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100003E78(v27, (uint64_t)qword_1001DB3E8);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "SE Manager Session fails", v30, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = sub_10004AAF4;
    uint64_t v41 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256;
    id v19 = &unk_1001C7D60;
    goto LABEL_25;
  }
  uint64_t v20 = qword_1001D9038;
  id v21 = *v5;
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100003E78(v22, (uint64_t)qword_1001DB3E8);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "NF SE Manager Session started from runWithManagerBlock()", v25, 2u);
    swift_slowDealloc();
  }

  a2(v21);
  if (!v35)
  {

    uint64_t v40 = sub_10004AAF4;
    uint64_t v41 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256;
    long long v38 = sub_1000048D8;
    uint64_t v39 = &unk_1001C7DB0;
    uint64_t v31 = _Block_copy(&aBlock);
    LOBYTE(v20) = 1;
    goto LABEL_26;
  }

  uint64_t v40 = sub_10004AAF4;
  uint64_t v41 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  long long v38 = sub_1000048D8;
  uint64_t v39 = &unk_1001C7D88;
  uint64_t v26 = _Block_copy(&aBlock);
  [v10 endSessionWithCompletion:v26];
  _Block_release(v26);

  swift_release();
  swift_unknownObjectRelease();
  return v20 & 1;
}

uint64_t sub_10004CD10()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004CE14()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DB4A0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DB4A0);
  if (qword_1001D9270 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1070);
  dispatch_semaphore_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10004CEDC()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DB4B8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DB4B8);
  if (qword_1001D9010 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D58);
  dispatch_semaphore_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10004CFA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  aBlock[4] = BitString.init(data:unusedBits:);
  void aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000048D8;
  aBlock[3] = &unk_1001C8048;
  id v12 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ();
  sub_10000491C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v12);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_getObjectType();
  swift_unknownObjectRetain();
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease();
  if ((*(unsigned char *)(v0 + 272) & 1) == 0)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease();
  }
  sub_100054954();
  sub_1000578E4();
  id v13 = [self defaultCenter];
  uint64_t v14 = AVSystemController_RecordingStateDidChangeNotification;
  id v15 = [self sharedInstance];
  [v13 removeObserver:v1 name:v14 object:v15];

  sub_100006520(v1 + 16);
  sub_100057750(*(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 128));
  sub_10000BF70(*(void *)(v1 + 136), *(void *)(v1 + 144));
  sub_100006520(v1 + 160);
  sub_100006520(v1 + 200);
  sub_100057838(*(void *)(v1 + 248));
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  sub_100006520(v1 + 304);
  sub_100006520(v1 + 344);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10004D330()
{
  sub_10004CFA4();

  return swift_deallocClassInstance();
}

void sub_10004D364(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostError();
  uint64_t v274 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  v262 = (char *)&v239 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  v268 = (uint64_t *)((char *)&v239 - v10);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  v259 = (char *)&v239 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  v276 = (char *)&v239 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  v258 = (char *)&v239 - v19;
  __chkstk_darwin(v18, v20);
  v257 = (char *)&v239 - v21;
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v264 = *(void *)(v22 - 8);
  uint64_t v265 = v22;
  __chkstk_darwin(v22, v23);
  v263 = (char *)&v239 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v281 = type metadata accessor for OSSignpostID();
  uint64_t v283 = *(void *)(v281 - 8);
  uint64_t v26 = __chkstk_darwin(v281, v25);
  uint64_t v28 = (char *)&v239 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v26, v29);
  v271 = (char *)&v239 - v31;
  uint64_t v33 = __chkstk_darwin(v30, v32);
  v261 = ((char *)&v239 - v34);
  uint64_t v36 = __chkstk_darwin(v33, v35);
  os_log_t v279 = (os_log_t)((char *)&v239 - v37);
  uint64_t v39 = __chkstk_darwin(v36, v38);
  v260 = (char *)&v239 - v40;
  uint64_t v42 = __chkstk_darwin(v39, v41);
  v266 = (char *)&v239 - v43;
  uint64_t v45 = __chkstk_darwin(v42, v44);
  uint64_t v47 = (char *)&v239 - v46;
  uint64_t v49 = __chkstk_darwin(v45, v48);
  int v51 = (char *)&v239 - v50;
  __chkstk_darwin(v49, v52);
  v282 = (char *)&v239 - v53;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  uint64_t v55 = sub_100003E78(v54, (uint64_t)qword_1001DB4A0);
  uint64_t v56 = a1;
  uint64_t v278 = v55;
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  BOOL v59 = os_log_type_enabled(v57, v58);
  v280 = v51;
  uint64_t v284 = v2;
  v272 = v47;
  uint64_t v273 = v4;
  v267 = v28;
  v275 = v56;
  if (v59)
  {
    long long v60 = (uint8_t *)swift_slowAlloc();
    v270 = (void (*)(char *, uint64_t))swift_slowAlloc();
    *(_DWORD *)long long v60 = 138412290;
    v286 = v56;
    uint64_t v61 = v56;
    int v51 = v280;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)v270 = v56;

    _os_log_impl((void *)&_mh_execute_header, v57, v58, "capturePIN(parameters: %@)", v60, 0xCu);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v284;
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v62 = v282;
  if ((*(unsigned char *)(v2 + 152) & 1) == 0)
  {
    if (qword_1001D9048 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for OSSignposter();
    uint64_t v67 = sub_100003E78(v66, (uint64_t)qword_1001DB4B8);
    static OSSignpostID.exclusive.getter();
    uint64_t v269 = v67;
    uint64_t v68 = OSSignposter.logHandle.getter();
    os_signpost_type_t v69 = static os_signpost_type_t.begin.getter();
    char v70 = OS_os_log.signpostsEnabled.getter();
    uint64_t v71 = v283;
    if (v70)
    {
      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v283 + 16);
      unint64_t v73 = (v283 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v74 = v62;
      uint64_t v75 = v281;
      v72(v51, v74, v281);
      char v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v76 = 0;
      os_signpost_id_t v77 = OSSignpostID.rawValue.getter();
      os_signpost_type_t v78 = v69;
      uint64_t v79 = v75;
      uint64_t v62 = v282;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v68, v78, v77, "pin-captureStart", "begin capture pin initialization", v76, 2u);
      uint64_t v71 = v283;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v71 + 8))(v51, v79);
    }
    else
    {

      uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
      unint64_t v73 = (v71 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v79 = v281;
    }
    unint64_t v255 = v73;
    v256 = v72;
    v72(v51, v62, v79);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    v282 = (char *)OSSignpostIntervalState.init(id:isOpen:)();
    uint64_t v80 = *(void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v283 = v71 + 8;
    v80(v62, v79);
    uint64_t v81 = (void *)v284;
    id v82 = sub_100006788((void *)(v284 + 304), *(void *)(v284 + 328));
    __chkstk_darwin(v82, v83);
    uint64_t v84 = sub_100003EB0(&qword_1001DD3F0);
    id v85 = v277;
    OS_dispatch_queue.sync<A>(execute:)();
    v270 = v80;
    if (v296[3])
    {
      v254 = v81 + 38;
      char v86 = swift_dynamicCast();
      os_log_t v87 = v279;
      if (v86)
      {
        uint64_t v239 = v84;
        uint64_t v89 = v287;
        unint64_t v88 = v288;
        v249 = v85;
        uint64_t v90 = v289;
        uint64_t v91 = v290;
        uint64_t v93 = v291;
        unint64_t v92 = v292;
        uint64_t v94 = v293;
        uint64_t v96 = v294;
        unint64_t v95 = v295;
        uint64_t v248 = v81[7];
        uint64_t v247 = v81[8];
        uint64_t v246 = v81[9];
        uint64_t v245 = v81[10];
        unint64_t v244 = v81[11];
        uint64_t v243 = *(void *)(v284 + 96);
        unint64_t v242 = *(void *)(v284 + 104);
        uint64_t v97 = *(void *)(v284 + 112);
        uint64_t v240 = v287;
        uint64_t v241 = v97;
        uint64_t v98 = *(void *)(v284 + 120);
        unint64_t v99 = *(void *)(v284 + 128);
        *(void *)(v284 + 56) = v286;
        *(void *)(v284 + 64) = v89;
        *(void *)(v284 + 72) = v88;
        *(void *)(v284 + 80) = v90;
        *(void *)(v284 + 88) = v91;
        *(void *)(v284 + 96) = v93;
        *(void *)(v284 + 104) = v92;
        *(void *)(v284 + 112) = v94;
        *(void *)(v284 + 120) = v96;
        *(void *)(v284 + 128) = v95;
        v276 = v88;
        swift_bridgeObjectRetain();
        v277 = v90;
        os_log_t v279 = v91;
        sub_1000065D0((uint64_t)v90, (unint64_t)v91);
        uint64_t v250 = v93;
        unint64_t v251 = v92;
        sub_1000065D0(v93, v92);
        uint64_t v252 = v96;
        unint64_t v253 = v95;
        sub_1000065D0(v96, v95);
        uint64_t v238 = v98;
        uint64_t v100 = v284;
        sub_100057750(v248, v247, v246, v245, v244, v243, v242, v241, v238, v99);
        uint64_t v101 = (uint64_t)v249;
        sub_10004F110(v275);
        if (!v101)
        {
          OSSignposter.logHandle.getter();
          uint64_t v122 = v272;
          OSSignpostID.init(log:)();
          id v123 = OSSignposter.logHandle.getter();
          os_signpost_type_t v124 = static os_signpost_type_t.begin.getter();
          char v125 = OS_os_log.signpostsEnabled.getter();
          int v126 = v280;
          if (v125)
          {
            uint64_t v127 = v256;
            v256(v280, v122, v281);
            Swift::String v128 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)Swift::String v128 = 0;
            os_signpost_id_t v129 = OSSignpostID.rawValue.getter();
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v123, v124, v129, "pin-totalCaptureTime", "begin pin capture", v128, 2u);
            int v126 = v280;
            swift_slowDealloc();

            uint64_t v130 = v281;
            uint64_t v131 = v127;
            uint64_t v100 = v284;
            v270(v126, v281);
            unint64_t v132 = v272;
          }
          else
          {

            uint64_t v130 = v281;
            unint64_t v132 = v122;
            uint64_t v131 = v256;
          }
          v131(v126, v132, v130);
          swift_allocObject();
          *(void *)(v100 + 280) = OSSignpostIntervalState.init(id:isOpen:)();
          swift_release();
          id v145 = [v275 pinToken];
          id v146 = v145;
          if (v145) {

          }
          Class v147 = *(char **)(v100 + 296);
          v147[123] = v146 != 0;
          sub_1000595B0(v146 != 0);
          uint64_t v148 = *((void *)v147 + 7);
          unint64_t v149 = (os_unfair_lock_s *)(v148 + 32);
          unint64_t v150 = (uint64_t *)(v148 + 16);
          LOBYTE(v286) = 13;
          __chkstk_darwin(v151, v152);
          os_unfair_lock_lock(v149);
          sub_100057D9C(v150);
          os_unfair_lock_unlock(v149);
          uint64_t v155 = 2;
          v271 = v147;
          uint64_t v156 = (os_unfair_lock_s *)*((void *)v147 + 7);
          uint64_t v157 = v156 + 8;
          uint64_t v158 = (uint64_t)&v156[4];
          unint64_t v159 = &byte_1001C5008;
          do
          {
            char v160 = *v159++;
            LOBYTE(v286) = v160;
            __chkstk_darwin(v153, v154);
            os_unfair_lock_lock(v157);
            sub_100057DB4(v158);
            os_unfair_lock_unlock(v157);
            --v155;
          }
          while (v155);
          [v275 transactionDataLifetime];
          unint64_t v161 = (void *)v284;
          *(void *)(v284 + 240) = v162;
          sub_100053D50();
          sub_100053564();
          uint64_t v163 = v161[23];
          uint64_t v164 = v161[24];
          sub_100006788(v161 + 20, v163);
          uint64_t v165 = (*(uint64_t (**)(const char *, os_log_t, uint64_t, uint64_t))(v164 + 8))(v277, v279, v163, v164);
          unint64_t v167 = v166;
          uint64_t v169 = v168;
          unint64_t v171 = v170;
          v268 = v161 + 20;
          sub_100006788(v254, v161[41]);
          uint64_t v278 = 0;
          sub_1000065D0(v169, v171);
          v172 = v263;
          uint64_t v173 = static DispatchWorkItemFlags.barrier.getter();
          v275 = &v239;
          __chkstk_darwin(v173, v174);
          uint64_t v175 = v278;
          OS_dispatch_queue.sync<A>(flags:execute:)();
          uint64_t v278 = v175;
          (*(void (**)(char *, uint64_t))(v264 + 8))(v172, v265);
          sub_100008970((uint64_t)&v286);
          uint64_t v176 = v161[28];
          uint64_t v177 = v161[29];
          sub_100006788(v161 + 25, v176);
          sub_100003EB0(&qword_1001D9B20);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100186100;
          strcpy((char *)(inited + 32), "transactionId");
          *(_WORD *)(inited + 46) = -4864;
          *(void *)(inited + 72) = &type metadata for String;
          *(void *)(inited + 80) = &protocol witness table for String;
          *(void *)(inited + 48) = v240;
          *(void *)(inited + 56) = v276;
          swift_bridgeObjectRetain();
          unint64_t v179 = sub_100104AF4(inited);
          v180 = (void *)v284;
          sub_100136224(24, v179, v176, v177);
          swift_bridgeObjectRelease();
          uint64_t v181 = v180[17];
          unint64_t v182 = v180[18];
          v180[17] = v169;
          v180[18] = v171;
          sub_10000BF70(v181, v182);
          sub_1000578E4();
          uint64_t v183 = sub_100054CDC();
          if (v183)
          {
            LOBYTE(v286) = 8;
            __chkstk_darwin(v183, v184);
            unint64_t v186 = (uint64_t *)&v185[4];
            uint64_t v187 = v185 + 8;
            os_unfair_lock_lock(v185 + 8);
            uint64_t v188 = v278;
            sub_100057D9C(v186);
            uint64_t v278 = v188;
            if (v188)
            {
              os_unfair_lock_unlock(v187);
              __break(1u);
              return;
            }
            os_unfair_lock_unlock(v187);
            swift_bridgeObjectRelease();
            sub_100006628((uint64_t)v277, (unint64_t)v279);
            sub_100006628(v250, v251);
            sub_100006628(v252, v253);
            v270(v272, v281);
            *(unsigned char *)(v284 + 152) = 1;
            unint64_t v189 = OSSignposter.logHandle.getter();
            OSSignpostIntervalState.signpostID.getter();
            LODWORD(v284) = static os_signpost_type_t.end.getter();
            if (OS_os_log.signpostsEnabled.getter())
            {
              os_log_t v279 = v189;
              swift_retain();
              Swift::UInt8 v190 = v257;
              checkForErrorAndConsumeState(state:)();
              swift_release();
              uint64_t v192 = v273;
              uint64_t v191 = v274;
              if ((*(unsigned int (**)(char *, uint64_t))(v274 + 88))(v190, v273) == enum case for OSSignpostError.doubleEnd(_:))
              {
                v193 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v191 + 8))(v190, v192);
                v193 = "end capture pin initialization";
              }
              v277 = v193;
              v226 = v280;
              uint64_t v227 = v281;
              v256(v280, v266, v281);
              v228 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v228 = 0;
              os_signpost_id_t v229 = OSSignpostID.rawValue.getter();
              os_log_t v230 = v279;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v279, (os_signpost_type_t)v284, v229, "pin-captureStart", v277, v228, 2u);
              swift_slowDealloc();

              v231 = v270;
              v270(v266, v227);
              v231(v226, v227);
            }
            else
            {

              v270(v266, v281);
            }
          }
          else
          {
            v208 = v271;
            v271[120] = 0;
            *((void *)v208 + 19) = 11013;
            sub_100058BDC();
            uint64_t v209 = v180[23];
            uint64_t v210 = v180[24];
            sub_100006788(v268, v209);
            (*(void (**)(uint64_t, uint64_t))(v210 + 40))(v209, v210);
            uint64_t v278 = sub_10002ADA4(11013, 0xD000000000000019, (void *)0x8000000100196E80, 0);
            swift_willThrow();
            swift_bridgeObjectRelease();
            sub_100006628((uint64_t)v277, (unint64_t)v279);
            sub_100006628(v250, v251);
            sub_100006628(v252, v253);
            sub_100006628(v165, v167);
            sub_100006628(v169, v171);
            uint64_t v211 = v281;
            long long v212 = v270;
            v270(v272, v281);
            os_log_t v213 = OSSignposter.logHandle.getter();
            os_log_t v214 = v260;
            OSSignpostIntervalState.signpostID.getter();
            os_signpost_type_t v215 = static os_signpost_type_t.end.getter();
            if (OS_os_log.signpostsEnabled.getter())
            {
              swift_retain();
              Swift::String v216 = v258;
              checkForErrorAndConsumeState(state:)();
              swift_release();
              uint64_t v218 = v273;
              uint64_t v217 = v274;
              if ((*(unsigned int (**)(char *, uint64_t))(v274 + 88))(v216, v273) == enum case for OSSignpostError.doubleEnd(_:))
              {
                v219 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v217 + 8))(v216, v218);
                v219 = "end capture pin initialization";
              }
              v232 = v280;
              v256(v280, v214, v211);
              v233 = v214;
              uint64_t v234 = v211;
              v235 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v235 = 0;
              os_signpost_id_t v236 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v213, v215, v236, "pin-captureStart", v219, v235, 2u);
              swift_slowDealloc();

              v237 = v270;
              v270(v233, v234);
              v237(v232, v234);
            }
            else
            {

              v212(v214, v211);
            }
          }
LABEL_61:
          swift_release();
          return;
        }
        v286 = (void *)v101;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        type metadata accessor for PINControllerError(0);
        int v102 = swift_dynamicCast();
        uint64_t v103 = (void (*)(char *, NSObject *, uint64_t))v256;
        if (v102)
        {
          uint64_t v104 = (void *)v296[0];
          uint64_t v297 = v296[0];
          sub_100057CF8((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
          uint64_t v105 = _BridgedStoredNSError.errorCode.getter();
          uint64_t v106 = v281;
          if (v105 >= 11000)
          {
            uint64_t v297 = (uint64_t)v104;
            if (_BridgedStoredNSError.errorCode.getter() <= 11999)
            {
              swift_errorRelease();
              id v201 = v104;
              unint64_t v202 = Logger.logObject.getter();
              os_log_type_t v203 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v202, v203))
              {
                v204 = (_DWORD *)swift_slowAlloc();
                uint64_t v278 = swift_slowAlloc();
                uint64_t v297 = v278;
                v275 = (uint64_t *)v204;
                _DWORD *v204 = 136315138;
                v272 = (char *)(v204 + 1);
                uint64_t v285 = (uint64_t)v201;
                id v205 = v201;
                uint64_t v206 = String.init<A>(describing:)();
                uint64_t v285 = sub_100005EB8(v206, v207, &v297);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                uint64_t v103 = (void (*)(char *, NSObject *, uint64_t))v256;
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v202, v203, "validation failed: %s", (uint8_t *)v275, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
              }
              uint64_t v106 = v281;
              uint64_t v220 = *(void *)(v284 + 296);
              uint64_t v297 = (uint64_t)v201;
              uint64_t v221 = _BridgedStoredNSError.errorCode.getter();
              *(unsigned char *)(v220 + 120) = 0;
              *(void *)(v220 + 152) = v221;
              id v222 = v201;
              swift_willThrow();
              swift_bridgeObjectRelease();
              sub_100006628((uint64_t)v277, (unint64_t)v279);
              sub_100006628(v250, v251);
              sub_100006628(v252, v253);

              swift_errorRelease();
              uint64_t v138 = OSSignposter.logHandle.getter();
              long long v139 = v261;
              OSSignpostIntervalState.signpostID.getter();
              os_signpost_type_t v140 = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                v223 = v259;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                uint64_t v225 = v273;
                uint64_t v224 = v274;
                if ((*(unsigned int (**)(char *, uint64_t))(v274 + 88))(v223, v273) == enum case for OSSignpostError.doubleEnd(_:))
                {
                  uint64_t v144 = "[Error] Interval already ended";
                }
                else
                {
                  (*(void (**)(char *, uint64_t))(v224 + 8))(v223, v225);
                  uint64_t v144 = "end capture pin initialization";
                }
                v194 = v280;
                os_log_type_t v195 = v280;
                v196 = v261;
                goto LABEL_49;
              }
              goto LABEL_59;
            }
          }
        }
        else
        {
          uint64_t v106 = v281;
        }
        swift_errorRelease();
        id v133 = Logger.logObject.getter();
        os_log_type_t v134 = static os_log_type_t.error.getter();
        BOOL v135 = os_log_type_enabled(v133, v134);
        unint64_t v136 = v253;
        if (v135)
        {
          uint64_t v137 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v137 = 0;
          _os_log_impl((void *)&_mh_execute_header, v133, v134, "throwing non PINControllerError?", v137, 2u);
          swift_slowDealloc();
        }

        swift_errorRetain();
        sub_10002ADA4(11004, 0, 0, v101);
        swift_errorRelease();
        swift_willThrow();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        sub_100006628((uint64_t)v277, (unint64_t)v279);
        sub_100006628(v250, v251);
        sub_100006628(v252, v136);
        uint64_t v138 = OSSignposter.logHandle.getter();
        long long v139 = v271;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v140 = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          swift_retain();
          uint64_t v141 = v268;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          uint64_t v143 = v273;
          uint64_t v142 = v274;
          if ((*(unsigned int (**)(void *, uint64_t))(v274 + 88))(v141, v273) == enum case for OSSignpostError.doubleEnd(_:))
          {
            uint64_t v144 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(void *, uint64_t))(v142 + 8))(v141, v143);
            uint64_t v144 = "end capture pin initialization";
          }
          v194 = v280;
          os_log_type_t v195 = v280;
          v196 = v271;
LABEL_49:
          v103(v195, v196, v106);
          uint64_t v197 = v106;
          uint64_t v198 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v198 = 0;
          os_signpost_id_t v199 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v138, v140, v199, "pin-captureStart", v144, v198, 2u);
          swift_slowDealloc();

          unint64_t v200 = v270;
          v270((char *)v196, v197);
          v200(v194, v197);
          goto LABEL_61;
        }
LABEL_59:

        os_log_t v115 = v139;
        uint64_t v116 = v106;
LABEL_60:
        v270((char *)v115, v116);
        goto LABEL_61;
      }
    }
    else
    {
      sub_100008970((uint64_t)v296);
      os_log_t v87 = v279;
    }
    sub_10002ADA4(11004, 0xD00000000000002BLL, (void *)0x8000000100196A50, 0);
    swift_willThrow();
    os_log_type_t v107 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v108 = static os_signpost_type_t.end.getter();
    char v109 = OS_os_log.signpostsEnabled.getter();
    uint64_t v110 = v276;
    if (v109)
    {
      uint64_t v111 = v281;
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v113 = v273;
      uint64_t v112 = v274;
      if ((*(unsigned int (**)(char *, uint64_t))(v274 + 88))(v110, v273) == enum case for OSSignpostError.doubleEnd(_:))
      {
        unint64_t v114 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v112 + 8))(v110, v113);
        unint64_t v114 = "end capture pin initialization";
      }
      os_log_t v118 = v279;
      uint64_t v117 = v280;
      v256(v280, (char *)v279, v111);
      id v119 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v119 = 0;
      os_signpost_id_t v120 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v107, v108, v120, "pin-captureStart", v114, v119, 2u);
      swift_slowDealloc();

      NSString v121 = v270;
      v270((char *)v118, v111);
      v121(v117, v111);
      goto LABEL_61;
    }

    os_log_t v115 = v87;
    uint64_t v116 = v281;
    goto LABEL_60;
  }
  unint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "PIN capture in progress", v65, 2u);
    swift_slowDealloc();
  }

  sub_10002ADA4(11004, 0xD00000000000001FLL, (void *)0x8000000100196EA0, 0);
  swift_willThrow();
}

void sub_10004F110(void *a1)
{
  uint64_t v3 = v1;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DB4A0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "DefaultPINController.validatePINParameters()", v7, 2u);
    swift_slowDealloc();
  }

  if (!v1[9])
  {
    sub_10002ADA4(11004, 0xD000000000000037, (void *)0x8000000100196CD0, 0);
    goto LABEL_21;
  }
  uint64_t v44 = v2;
  uint64_t v46 = v1[7];
  uint64_t v47 = v1[8];
  uint64_t v9 = v1[10];
  unint64_t v8 = v1[11];
  uint64_t v11 = v1[12];
  unint64_t v10 = v1[13];
  uint64_t v12 = v1[15];
  uint64_t v45 = v1[14];
  unint64_t v13 = v1[16];
  uint64_t v48 = v1[9];
  swift_bridgeObjectRetain();
  sub_1000065D0(v9, v8);
  sub_1000065D0(v11, v10);
  uint64_t v49 = v12;
  sub_1000065D0(v12, v13);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "internalTransactionData.pinRequired: %{BOOL}d", v16, 8u);
    swift_slowDealloc();
  }

  id v17 = [a1 digest];
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  LOBYTE(v17) = sub_10014C798(v18, v20, v49, v13);
  sub_100006628(v18, v20);
  if ((v17 & 1) == 0)
  {
    _StringGuts.grow(_:)(138);
    v24._uint64_t countAndFlagsBits = 0xD000000000000088;
    v24._unint64_t object = (void *)0x8000000100196D10;
    String.append(_:)(v24);
    Swift::String v25 = Data.hexString()();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    sub_10002ADA4(11004, 0, (void *)0xE000000000000000, 0);
    sub_100057750(v46, v47, v48, v9, v8, v11, v10, v45, v49, v13);
    goto LABEL_21;
  }
  id v21 = [a1 pinToken];
  if (v21)
  {

    if (v46)
    {
      sub_10002ADA4(11004, 0xD000000000000027, (void *)0x8000000100196E30, 0);
      sub_100057750(v46, v47, v48, v9, v8, v11, v10, v45, v49, v13);
      goto LABEL_21;
    }
  }
  id v22 = [a1 pinToken];
  if (!v22)
  {
    uint64_t v23 = v46 & 1;
    if (v46) {
      goto LABEL_18;
    }
    sub_10002ADA4(11004, 0xD00000000000003BLL, (void *)0x8000000100196DA0, 0);
    sub_100057750(v46, v47, v48, v9, v8, v11, v10, v45, v49, v13);
LABEL_21:
    uint64_t v29 = v3 + 25;
    uint64_t v31 = v3[28];
    uint64_t v30 = v3[29];
    sub_100006788(v29, v31);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(void *)(inited + 32) = 0xD000000000000010;
    *(void *)(inited + 40) = 0x8000000100196A80;
    swift_getErrorValue();
    swift_errorRetain();
    uint64_t v33 = Error.localizedDescription.getter();
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = &protocol witness table for String;
    *(void *)(inited + 48) = v33;
    *(void *)(inited + 56) = v34;
    unint64_t v35 = sub_100104AF4(inited);
    sub_100136224(27, v35, v31, v30);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_errorRelease();
    return;
  }

  uint64_t v23 = v46 & 1;
LABEL_18:
  [a1 transactionDataLifetime];
  if (v26 <= 0.0 || ([a1 transactionDataLifetime], v27 > 300.0))
  {
    _StringGuts.grow(_:)(69);
    v28._uint64_t countAndFlagsBits = 0xD000000000000043;
    v28._unint64_t object = (void *)0x8000000100196DE0;
    String.append(_:)(v28);
    Double.write<A>(to:)();
    sub_10002ADA4(11010, 0, (void *)0xE000000000000000, 0);
    sub_100057750(v46, v47, v48, v9, v8, v11, v10, v45, v49, v13);
    goto LABEL_21;
  }
  id v36 = [a1 pinToken];
  if (!v36)
  {
    sub_100057750(v46, v47, v48, v9, v8, v11, v10, v45, v49, v13);
    return;
  }

  uint64_t v37 = v49;
  if (v23)
  {
    unint64_t v43 = v13;
    goto LABEL_29;
  }
  id v38 = [a1 pinToken];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    sub_100054140(v40, v42);
    if (v44)
    {
      swift_bridgeObjectRelease();
      unint64_t v43 = v13;
      uint64_t v37 = v49;
LABEL_29:
      sub_100057750(v46, v47, v48, v9, v8, v11, v10, v45, v37, v43);
      return;
    }
    sub_100057750(v46, v47, v48, v9, v8, v11, v10, v45, v49, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10004F76C(uint64_t a1, unint64_t a2)
{
  uint64_t v141 = type metadata accessor for OSSignpostError();
  uint64_t v4 = *(void *)(v141 - 8);
  uint64_t v6 = __chkstk_darwin(v141, v5);
  unint64_t v8 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  id v133 = (char *)&v130 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  BOOL v135 = (char *)&v130 - v14;
  __chkstk_darwin(v13, v15);
  os_log_type_t v134 = (char *)&v130 - v16;
  uint64_t v17 = type metadata accessor for OSSignpostID();
  uint64_t v151 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  long long v139 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  Swift::String v24 = (char *)&v130 - v23;
  uint64_t v26 = __chkstk_darwin(v22, v25);
  Swift::String v28 = (char *)&v130 - v27;
  uint64_t v30 = __chkstk_darwin(v26, v29);
  uint64_t v137 = (char *)&v130 - v31;
  uint64_t v33 = __chkstk_darwin(v30, v32);
  unint64_t v149 = (char *)&v130 - v34;
  __chkstk_darwin(v33, v35);
  uint64_t v148 = (char *)&v130 - v36;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = sub_100003E78(v37, (uint64_t)qword_1001DB4A0);
  sub_1000065D0(a1, a2);
  sub_1000065D0(a1, a2);
  uint64_t v140 = v38;
  uint64_t v39 = Logger.logObject.getter();
  uint64_t v40 = a1;
  os_log_type_t v41 = static os_log_type_t.info.getter();
  BOOL v42 = os_log_type_enabled(v39, v41);
  uint64_t v138 = v24;
  uint64_t v147 = v17;
  uint64_t v142 = v28;
  uint64_t v143 = v4;
  unint64_t v136 = v8;
  uint64_t v144 = v40;
  unint64_t v145 = a2;
  if (v42)
  {
    unint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v153 = swift_slowAlloc();
    *(_DWORD *)unint64_t v43 = 136315138;
    Swift::String v44 = Data.hexString()();
    uint64_t v152 = sub_100005EB8(v44._countAndFlagsBits, (unint64_t)v44._object, &v153);
    uint64_t v17 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(v40, a2);
    sub_100006628(v40, a2);
    _os_log_impl((void *)&_mh_execute_header, v39, v41, "DefaultPINController.addDigit(cipher: %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(v40, a2);
    sub_100006628(v40, a2);
  }

  uint64_t v45 = v150;
  uint64_t v46 = v148;
  if (*((unsigned char *)v150 + 152) != 1)
  {
    sub_10002ADA4(11004, 0xD00000000000001BLL, (void *)0x8000000100196B30, 0);
    return swift_willThrow();
  }
  if (qword_1001D9048 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for OSSignposter();
  uint64_t v48 = sub_100003E78(v47, (uint64_t)qword_1001DB4B8);
  static OSSignpostID.exclusive.getter();
  uint64_t v132 = v48;
  uint64_t v49 = OSSignposter.logHandle.getter();
  os_signpost_type_t v50 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v51 = v151;
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v151 + 16);
    uint64_t v53 = v149;
    v52(v149, v46, v17);
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    os_signpost_id_t v55 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, v50, v55, "pin-addDigit", "begin add digit daemon", v54, 2u);
    uint64_t v45 = v150;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v17);
  }
  else
  {

    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v151 + 16);
  }
  uint64_t v131 = v52;
  v52(v149, v46, v17);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v57 = OSSignpostIntervalState.init(id:isOpen:)();
  os_log_type_t v58 = *(void (**)(char *, uint64_t))(v151 + 8);
  v151 += 8;
  v58(v46, v17);
  uint64_t v59 = *((void *)v45 + 9);
  unint64_t v150 = v58;
  if (v59)
  {
    sub_10005902C();
    long long v60 = (void *)((char *)v45 + 160);
    uint64_t v61 = v45;
    uint64_t v62 = *((void *)v45 + 23);
    uint64_t v63 = *((void *)v45 + 24);
    sub_100006788(v60, v62);
    uint64_t v64 = v146;
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v63 + 16))(v144, v145, v62, v63);
    if (!v64)
    {
      *((unsigned char *)v61 + 273) = 0;
      char v86 = OSSignposter.logHandle.getter();
      os_log_t v87 = v137;
      OSSignpostIntervalState.signpostID.getter();
      int v88 = static os_signpost_type_t.end.getter();
      char v89 = OS_os_log.signpostsEnabled.getter();
      uint64_t v90 = v143;
      if (v89)
      {
        LODWORD(v148) = v88;
        swift_retain();
        uint64_t v91 = v134;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v92 = v141;
        int v93 = (*(uint64_t (**)(char *, uint64_t))(v90 + 88))(v91, v141);
        uint64_t v130 = v57;
        if (v93 == enum case for OSSignpostError.doubleEnd(_:))
        {
          os_log_t v115 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
          os_log_t v115 = "end add digit daemon";
        }
        uint64_t v116 = v87;
        uint64_t v117 = v87;
        uint64_t v118 = v147;
        v131(v149, v116, v147);
        id v119 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v119 = 0;
        os_signpost_id_t v120 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v86, (os_signpost_type_t)v148, v120, "pin-addDigit", v115, v119, 2u);
        swift_slowDealloc();

        NSString v121 = v117;
        uint64_t v122 = v150;
        v150(v121, v118);
        v122(v149, v118);
      }
      else
      {

        unint64_t v149 = v87;
        v150(v87, v147);
      }
      return swift_release();
    }
    _s3__C4CodeOMa_2(0);
    uint64_t v153 = 12006;
    swift_errorRetain();
    sub_100057CF8(&qword_1001D9A28, _s3__C4CodeOMa_2);
    char v65 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if ((v65 & 1) == 0)
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.error.getter();
      BOOL v96 = os_log_type_enabled(v94, v95);
      uint64_t v130 = v57;
      if (v96)
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        uint64_t v153 = swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = 136315138;
        uint64_t v152 = v64;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v98 = String.init<A>(describing:)();
        uint64_t v152 = sub_100005EB8(v98, v99, &v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Error adding digit: %s", v97, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v100 = v136;
      sub_10002ADA4(11006, 0xD000000000000029, (void *)0x8000000100196CA0, 0);
      swift_willThrow();
      swift_errorRelease();
      uint64_t v101 = OSSignposter.logHandle.getter();
      int v102 = v139;
      OSSignpostIntervalState.signpostID.getter();
      int v103 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        LODWORD(v148) = v103;
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v104 = v143;
        uint64_t v105 = v141;
        int v106 = (*(uint64_t (**)(char *, uint64_t))(v143 + 88))(v100, v141);
        uint64_t v107 = v147;
        if (v106 == enum case for OSSignpostError.doubleEnd(_:))
        {
          os_signpost_type_t v108 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v104 + 8))(v100, v105);
          os_signpost_type_t v108 = "end add digit daemon";
        }
        char v125 = v149;
        int v126 = v139;
        v131(v149, v139, v107);
        uint64_t v127 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v127 = 0;
        os_signpost_id_t v128 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, (os_signpost_type_t)v148, v128, "pin-addDigit", v108, v127, 2u);
        swift_slowDealloc();

        os_signpost_id_t v129 = v150;
        v150(v126, v107);
        v129(v125, v107);
      }
      else
      {

        v150(v102, v147);
      }
      return swift_release();
    }
    swift_errorRelease();
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Maximum Applet PIN length exceeded", v68, 2u);
      swift_slowDealloc();
    }

    sub_10002ADA4(11007, 0, 0, 0);
    swift_willThrow();
    os_signpost_type_t v69 = OSSignposter.logHandle.getter();
    char v70 = v138;
    OSSignpostIntervalState.signpostID.getter();
    int v71 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      LODWORD(v148) = v71;
      swift_retain();
      uint64_t v72 = v133;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v73 = v143;
      uint64_t v74 = v141;
      int v75 = (*(uint64_t (**)(char *, uint64_t))(v143 + 88))(v72, v141);
      uint64_t v130 = v57;
      if (v75 == enum case for OSSignpostError.doubleEnd(_:))
      {
        id v123 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
        id v123 = "end add digit daemon";
      }
      char v109 = v138;
      uint64_t v110 = v149;
      uint64_t v111 = v147;
      ((void (*)(char *))v131)(v149);
      uint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v112 = 0;
      os_signpost_id_t v113 = OSSignpostID.rawValue.getter();
      os_signpost_type_t v114 = v148;
LABEL_42:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v69, v114, v113, "pin-addDigit", v123, v112, 2u);
      swift_slowDealloc();

      os_signpost_type_t v124 = v150;
      v150(v109, v111);
      v124(v110, v111);
      return swift_release();
    }
  }
  else
  {
    uint64_t v76 = sub_10002ADA4(11004, 0xD000000000000013, (void *)0x8000000100196B50, 0);
    uint64_t v77 = *((void *)v45 + 37);
    uint64_t v153 = v76;
    type metadata accessor for PINControllerError(0);
    sub_100057CF8((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
    uint64_t v78 = _BridgedStoredNSError.errorCode.getter();
    *(unsigned char *)(v77 + 120) = 0;
    *(void *)(v77 + 152) = v78;
    sub_100058BDC();
    uint64_t v79 = *((void *)v45 + 23);
    uint64_t v80 = *((void *)v45 + 24);
    sub_100006788((void *)v45 + 20, v79);
    (*(void (**)(uint64_t, uint64_t))(v80 + 40))(v79, v80);
    *((unsigned char *)v45 + 152) = 0;
    swift_willThrow();
    os_signpost_type_t v69 = OSSignposter.logHandle.getter();
    char v70 = v142;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v81 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      id v82 = v135;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v83 = v143;
      uint64_t v84 = v141;
      int v85 = (*(uint64_t (**)(char *, uint64_t))(v143 + 88))(v82, v141);
      uint64_t v130 = v57;
      if (v85 == enum case for OSSignpostError.doubleEnd(_:))
      {
        id v123 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v84);
        id v123 = "end add digit daemon";
      }
      char v109 = v142;
      uint64_t v110 = v149;
      uint64_t v111 = v147;
      ((void (*)(char *))v131)(v149);
      uint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v112 = 0;
      os_signpost_id_t v113 = OSSignpostID.rawValue.getter();
      os_signpost_type_t v114 = v81;
      goto LABEL_42;
    }
  }

  v150(v70, v147);
  return swift_release();
}

void sub_1000506F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v99 = *(void *)(v2 - 8);
  uint64_t v100 = v2;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v4, v7);
  os_log_type_t v95 = (char *)v91 - v9;
  __chkstk_darwin(v8, v10);
  BOOL v96 = (char *)v91 - v11;
  uint64_t v12 = type metadata accessor for OSSignpostID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v97 = (char *)v91 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v104 = (char *)v91 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v105 = (char *)v91 - v26;
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)v91 - v28;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v98 = sub_100003E78(v30, (uint64_t)qword_1001DB4A0);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "_removeLastDigit()", v33, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + 152) != 1)
  {
    sub_10002ADA4(11004, 0xD00000000000001BLL, (void *)0x8000000100196B30, 0);
    swift_willThrow();
    return;
  }
  if (qword_1001D9048 != -1) {
    swift_once();
  }
  v91[0] = v6;
  v91[1] = v17;
  uint64_t v34 = type metadata accessor for OSSignposter();
  uint64_t v35 = sub_100003E78(v34, (uint64_t)qword_1001DB4B8);
  static OSSignpostID.exclusive.getter();
  uint64_t v93 = v35;
  uint64_t v36 = OSSignposter.logHandle.getter();
  os_signpost_type_t v37 = static os_signpost_type_t.begin.getter();
  char v38 = OS_os_log.signpostsEnabled.getter();
  uint64_t v103 = v12;
  if (v38)
  {
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    unint64_t v40 = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    os_log_type_t v41 = v105;
    v39(v105, v29, v12);
    uint64_t v42 = v13;
    unint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v43 = 0;
    os_signpost_id_t v44 = OSSignpostID.rawValue.getter();
    os_signpost_type_t v45 = v37;
    uint64_t v46 = v41;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, v45, v44, "pin-removeDigit", "begin remove pin digit", v43, 2u);
    uint64_t v13 = v42;
    uint64_t v12 = v103;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v41, v12);
  }
  else
  {

    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    unint64_t v40 = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v46 = v105;
  }
  v91[2] = v40;
  uint64_t v92 = v39;
  v39(v46, v29, v12);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v47 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v48 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v101 = v13 + 8;
  uint64_t v94 = v48;
  uint64_t v49 = ((uint64_t (*)(char *, uint64_t))v48)(v29, v12);
  if (!*(void *)(v1 + 72))
  {
    uint64_t v57 = sub_10002ADA4(11004, 0xD000000000000013, (void *)0x8000000100196B50, 0);
    uint64_t v58 = *(void *)(v1 + 296);
    uint64_t v106 = v57;
    type metadata accessor for PINControllerError(0);
    sub_100057CF8((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
    uint64_t v59 = _BridgedStoredNSError.errorCode.getter();
    *(unsigned char *)(v58 + 120) = 0;
    *(void *)(v58 + 152) = v59;
    sub_100058BDC();
    uint64_t v60 = *(void *)(v1 + 184);
    uint64_t v61 = *(void *)(v1 + 192);
    sub_100006788((void *)(v1 + 160), v60);
    (*(void (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61);
    *(unsigned char *)(v1 + 152) = 0;
    swift_willThrow();
    uint64_t v62 = OSSignposter.logHandle.getter();
    uint64_t v63 = v97;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v64 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      char v65 = v95;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v67 = v99;
      uint64_t v66 = v100;
      if ((*(unsigned int (**)(char *, uint64_t))(v99 + 88))(v65, v100) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v68 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
        uint64_t v68 = "end remove pin digit";
      }
      char v86 = v105;
      uint64_t v87 = v103;
      v92(v105, v63, v103);
      int v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v88 = 0;
      os_signpost_id_t v89 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v62, v64, v89, "pin-removeDigit", v68, v88, 2u);
      swift_slowDealloc();

      uint64_t v90 = v94;
      v94(v63, v87);
      v90(v86, v87);
    }
    else
    {

      v94(v63, v12);
    }
    goto LABEL_27;
  }
  uint64_t v97 = (char *)v47;
  LOBYTE(v106) = 27;
  __chkstk_darwin(v49, v50);
  v91[-2] = &v106;
  v91[-1] = 1;
  uint64_t v52 = (uint64_t *)&v51[4];
  uint64_t v53 = v51 + 8;
  os_unfair_lock_lock(v51 + 8);
  uint64_t v54 = v102;
  sub_100057D40(v52);
  if (!v54)
  {
    os_unfair_lock_unlock(v53);
    uint64_t v55 = *(void *)(v1 + 184);
    uint64_t v56 = *(void *)(v1 + 192);
    sub_100006788((void *)(v1 + 160), v55);
    (*(void (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
    uint64_t v70 = v103;
    os_signpost_type_t v69 = v104;
    int v71 = v105;
    uint64_t v72 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    uint64_t v73 = v69;
    os_signpost_type_t v74 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      int v75 = v96;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v77 = v99;
      uint64_t v76 = v100;
      if ((*(unsigned int (**)(char *, uint64_t))(v99 + 88))(v75, v100) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v78 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v77 + 8))(v75, v76);
        uint64_t v78 = "end remove pin digit";
      }
      uint64_t v79 = v71;
      uint64_t v80 = v103;
      os_signpost_type_t v81 = v104;
      v92(v79, v104, v103);
      id v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v82 = 0;
      os_signpost_id_t v83 = OSSignpostID.rawValue.getter();
      uint64_t v84 = v105;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v72, v74, v83, "pin-removeDigit", v78, v82, 2u);
      swift_slowDealloc();

      int v85 = v94;
      v94(v81, v80);
      v85(v84, v80);
    }
    else
    {

      v94(v73, v70);
    }
LABEL_27:
    swift_release();
    return;
  }
  os_unfair_lock_unlock(v53);
  __break(1u);
}

void sub_100051458()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v170 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v143 - v9;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_100003E78(v11, (uint64_t)qword_1001DB4A0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "_generatePINBlock()", v15, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v2 + 152) != 1)
  {
    sub_10002ADA4(11004, 0xD00000000000001BLL, (void *)0x8000000100196B30, 0);
    swift_willThrow();
    return;
  }
  if (qword_1001D9048 != -1) {
    swift_once();
  }
  uint64_t v163 = v1;
  uint64_t v169 = (void *)v2;
  uint64_t v16 = type metadata accessor for OSSignposter();
  sub_100003E78(v16, (uint64_t)qword_1001DB4B8);
  static OSSignpostID.exclusive.getter();
  uint64_t v17 = OSSignposter.logHandle.getter();
  os_signpost_type_t v18 = static os_signpost_type_t.begin.getter();
  char v19 = OS_os_log.signpostsEnabled.getter();
  os_log_t v164 = v12;
  if (v19)
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v170 + 16);
    v20(v7, v10, v3);
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, v18, v22, "pin-generateBlock", "begin generate pin block", v21, 2u);
    uint64_t v23 = v170;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v3);
  }
  else
  {

    uint64_t v23 = v170;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v170 + 16);
  }
  v20(v7, v10, v3);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v24 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v3);
  uint64_t v25 = v169;
  uint64_t v26 = v169[9];
  if (!v26)
  {
    uint64_t v44 = sub_10002ADA4(11004, 0xD000000000000013, (void *)0x8000000100196B50, 0);
    uint64_t v45 = v25[37];
    v171[0] = v44;
    type metadata accessor for PINControllerError(0);
    sub_100057CF8((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
    uint64_t v46 = _BridgedStoredNSError.errorCode.getter();
    *(unsigned char *)(v45 + 120) = 0;
    *(void *)(v45 + 152) = v46;
    sub_100058BDC();
    uint64_t v47 = v25[23];
    uint64_t v48 = v25[24];
    sub_100006788(v25 + 20, v47);
    (*(void (**)(uint64_t, uint64_t))(v48 + 40))(v47, v48);
    swift_willThrow();
    goto LABEL_16;
  }
  uint64_t v27 = v169[7];
  uint64_t v28 = v169[8];
  uint64_t v29 = v169[10];
  unint64_t v30 = v169[11];
  uint64_t v32 = v169[12];
  unint64_t v31 = v169[13];
  uint64_t v34 = (os_unfair_lock_s *)v169[14];
  uint64_t v33 = v169[15];
  unint64_t v35 = v169[16];
  unint64_t v36 = v169[18];
  unint64_t v165 = v31;
  uint64_t v168 = v32;
  uint64_t v167 = v29;
  uint64_t v170 = v28;
  uint64_t v166 = v27;
  uint64_t v162 = v33;
  unint64_t v161 = v35;
  if (v36 >> 60 == 15)
  {
    uint64_t v37 = v26;
    unint64_t v38 = v30;
    sub_100057848(v27, v28, v26, v29, v30, v32, v31, (uint64_t)v34, v33, v35);
    uint64_t v39 = sub_10002ADA4(11009, 0xD000000000000054, (void *)0x8000000100196B70, 0);
    uint64_t v40 = v25[37];
    v171[0] = v39;
    type metadata accessor for PINControllerError(0);
    sub_100057CF8((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
    uint64_t v41 = _BridgedStoredNSError.errorCode.getter();
    *(unsigned char *)(v40 + 120) = 0;
    *(void *)(v40 + 152) = v41;
    sub_100058BDC();
    uint64_t v42 = v25[23];
    uint64_t v43 = v25[24];
    sub_100006788(v25 + 20, v42);
    (*(void (**)(uint64_t, uint64_t))(v43 + 40))(v42, v43);
    swift_willThrow();
    sub_100057750(v166, v170, v37, v167, v38, v168, v165, (uint64_t)v34, v162, v161);
LABEL_16:
    uint64_t v49 = (uint64_t)v25;
LABEL_26:
    sub_100052920(v49);
    swift_release();
    return;
  }
  uint64_t v154 = v24;
  uint64_t v153 = &v143;
  uint64_t v50 = v169[17];
  uint64_t v51 = v169[37];
  LOBYTE(v171[0]) = 9;
  uint64_t v157 = v51;
  uint64_t v52 = __chkstk_darwin(v27, v28);
  uint64_t v54 = (uint64_t)&v53[4];
  uint64_t v55 = v53 + 8;
  uint64_t v159 = v56;
  unint64_t v158 = v57;
  uint64_t v160 = (uint64_t)v34;
  sub_100057848(v52, v58, v56, v59, v57, v32, v31, (uint64_t)v34, v60, v61);
  uint64_t v155 = v50;
  unint64_t v156 = v36;
  sub_100038D8C(v50, v36);
  os_unfair_lock_lock(v55);
  uint64_t v62 = v163;
  sub_100057A40(v54);
  if (v62)
  {
    os_unfair_lock_unlock(v55);
    __break(1u);
    os_unfair_lock_unlock(v34);
    __break(1u);
    os_unfair_lock_unlock((os_unfair_lock_t)v36);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v55);
    uint64_t v63 = v25[23];
    uint64_t v64 = v25[24];
    sub_100006788(v25 + 20, v63);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v64 + 32))(v171, v63, v64);
    uint64_t v150 = v171[0];
    unint64_t v151 = v171[1];
    uint64_t v163 = v171[2];
    unint64_t v152 = v171[3];
    uint64_t v153 = (uint64_t *)v171[4];
    unint64_t v149 = v171[5];
    unsigned int v148 = v172;
    uint64_t v65 = v25[28];
    uint64_t v66 = v25[29];
    sub_100006788(v25 + 25, v65);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    strcpy((char *)(inited + 32), "transactionId");
    *(_WORD *)(inited + 46) = -4864;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = &protocol witness table for String;
    *(void *)(inited + 48) = v170;
    *(void *)(inited + 56) = v159;
    swift_bridgeObjectRetain();
    unint64_t v68 = sub_100104AF4(inited);
    sub_100136224(26, v68, v65, v66);
    swift_bridgeObjectRelease();
    sub_100053D50();
    uint64_t v69 = *(void *)(v157 + 56);
    uint64_t v70 = (os_unfair_lock_s *)(v69 + 32);
    int v71 = (uint64_t *)(v69 + 16);
    LOBYTE(v171[0]) = 9;
    __chkstk_darwin(v72, v73);
    os_unfair_lock_lock(v70);
    sub_100057D9C(v71);
    os_unfair_lock_unlock(v70);
    LOBYTE(v171[0]) = 10;
    __chkstk_darwin(v74, v75);
    os_unfair_lock_lock(v70);
    sub_100057D9C(v71);
    os_unfair_lock_unlock(v70);
    uint64_t v76 = v160;
    unsigned int v77 = v148;
    if (v160) {
      char v78 = 0;
    }
    else {
      char v78 = v148;
    }
    if (v78)
    {
      uint64_t v79 = sub_10002ADA4(11014, 0xD00000000000003ALL, (void *)0x8000000100196BF0, 0);
      swift_willThrow();
      sub_100006628(v150, v151);
      sub_100006628(v163, v152);
      sub_100006628((uint64_t)v153, v149);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        id v82 = (uint8_t *)swift_slowAlloc();
        v171[0] = swift_slowAlloc();
        *(_DWORD *)id v82 = 136315138;
        uint64_t v173 = v79;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v83 = String.init<A>(describing:)();
        uint64_t v173 = sub_100005EB8(v83, v84, v171);
        uint64_t v85 = v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Error from generatePINBlock: %s", v82, 0xCu);
        swift_arrayDestroy();
        uint64_t v76 = v160;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        uint64_t v85 = v159;
      }
      char v86 = v169;
      uint64_t v87 = v169[28];
      uint64_t v88 = v169[29];
      sub_100006788(v169 + 25, v87);
      sub_100003EB0(&qword_1001D9B20);
      uint64_t v89 = swift_initStackObject();
      *(_OWORD *)(v89 + 16) = xmmword_100186100;
      *(void *)(v89 + 32) = 0xD000000000000010;
      *(void *)(v89 + 40) = 0x8000000100196A80;
      v171[0] = v79;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v90 = String.init<A>(describing:)();
      *(void *)(v89 + 72) = &type metadata for String;
      *(void *)(v89 + 80) = &protocol witness table for String;
      *(void *)(v89 + 48) = v90;
      *(void *)(v89 + 56) = v91;
      unint64_t v92 = sub_100104AF4(v89);
      sub_100136224(27, v92, v87, v88);
      swift_bridgeObjectRelease();
      v171[0] = sub_100057A5C();
      type metadata accessor for PINControllerError(0);
      sub_100057CF8((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
      uint64_t v93 = _BridgedStoredNSError.errorCode.getter();
      uint64_t v94 = v157;
      *(unsigned char *)(v157 + 120) = 0;
      *(void *)(v94 + 152) = v93;
      sub_100058BDC();
      swift_willThrow();
      swift_errorRelease();
      sub_10000BF70((uint64_t)v155, v156);
      sub_100057750(v166, v170, v85, v167, v158, v168, v165, v76, v162, v161);
      uint64_t v49 = (uint64_t)v86;
      goto LABEL_26;
    }
    uint64_t v95 = v150;
    unint64_t v96 = v151;
    sub_1000065D0(v150, v151);
    uint64_t v97 = v163;
    unint64_t v98 = v152;
    sub_1000065D0(v163, v152);
    uint64_t v99 = (uint64_t)v153;
    unint64_t v100 = v149;
    sub_1000065D0((uint64_t)v153, v149);
    sub_100006628(v99, v100);
    sub_100006628(v97, v98);
    uint64_t v101 = sub_100006628(v95, v96);
    if (v77) {
      char v103 = 2;
    }
    else {
      char v103 = 1;
    }
    *(unsigned char *)(v157 + 120) = v103;
    LOBYTE(v171[0]) = 12;
    __chkstk_darwin(v101, v102);
    uint64_t v105 = (uint64_t)&v104[4];
    uint64_t v106 = v104 + 8;
    os_unfair_lock_lock(v104 + 8);
    sub_100057DB4(v105);
    uint64_t v107 = v168;
    os_unfair_lock_unlock(v106);
    unint64_t v108 = v161;
    uint64_t v109 = v162;
    uint64_t v110 = v170;
    uint64_t v111 = v159;
    unint64_t v112 = v165;
    sub_100057848(v166, v170, v159, v167, v158, v107, v165, v76, v162, v161);
    os_signpost_id_t v113 = Logger.logObject.getter();
    os_log_type_t v114 = static os_log_type_t.info.getter();
    os_log_t v164 = v113;
    if (os_log_type_enabled(v113, v114))
    {
      uint64_t v115 = swift_slowAlloc();
      uint64_t v157 = swift_slowAlloc();
      v171[0] = v157;
      *(_DWORD *)uint64_t v115 = 136315394;
      uint64_t v173 = sub_100005EB8(0xD000000000000013, 0x8000000100196BD0, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v115 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v173 = sub_100005EB8(v110, v111, v171);
      unint64_t v112 = v165;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100057750(v166, v110, v111, v167, v158, v168, v112, v160, v109, v108);
      os_log_t v116 = v164;
      _os_log_impl((void *)&_mh_execute_header, v164, v114, "%s using internalTransactionData with transactionId: %s", (uint8_t *)v115, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100057750(v166, v110, v111, v167, v158, v168, v112, v76, v109, v108);
    }
    unint64_t v117 = v149;
    uint64_t v118 = v150;
    unint64_t v119 = v151;
    sub_1000065D0(v150, v151);
    uint64_t v120 = v163;
    unint64_t v121 = v152;
    sub_1000065D0(v163, v152);
    uint64_t v122 = (uint64_t)v153;
    sub_1000065D0((uint64_t)v153, v117);
    sub_100006628(v122, v117);
    sub_100006628(v120, v121);
    sub_1000065D0(v118, v119);
    sub_1000065D0(v120, v121);
    sub_1000065D0(v122, v117);
    sub_100006628(v122, v117);
    sub_100006628(v118, v119);
    sub_1000065D0(v118, v119);
    sub_1000065D0(v120, v121);
    sub_1000065D0(v122, v117);
    sub_100006628(v122, v117);
    sub_100006628(v120, v121);
    sub_100006628(v118, v119);
    if (v148)
    {
      os_log_t v164 = 0;
      uint64_t v157 = 0xC000000000000000;
    }
    else
    {
      id v123 = v155;
      unint64_t v124 = v156;
      sub_1000065D0((uint64_t)v155, v156);
      os_log_t v164 = v123;
      uint64_t v157 = v124;
    }
    uint64_t v125 = v150;
    unint64_t v126 = v151;
    sub_1000065D0(v150, v151);
    uint64_t v127 = v163;
    unint64_t v128 = v152;
    sub_1000065D0(v163, v152);
    uint64_t v129 = (uint64_t)v153;
    sub_1000065D0((uint64_t)v153, v117);
    sub_100006628(v127, v128);
    sub_100006628(v125, v126);
    sub_1000065D0(v125, v126);
    sub_1000065D0(v127, v128);
    sub_1000065D0(v129, v117);
    sub_100006628(v129, v117);
    sub_100006628(v127, v128);
    sub_100006628(v125, v126);
    if (v148)
    {
      uint64_t v130 = 0;
      unint64_t v131 = 0xC000000000000000;
    }
    else
    {
      uint64_t v130 = v168;
      sub_1000065D0(v168, v112);
      unint64_t v131 = v112;
    }
    id v144 = objc_allocWithZone((Class)SPRPINData);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v145 = isa;
    Class v133 = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v134 = v157;
    Class v135 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v136 = (uint64_t)v153;
    Class v137 = Data._bridgeToObjectiveC()().super.isa;
    Class v146 = v137;
    Class v147 = Data._bridgeToObjectiveC()().super.isa;
    [v144 initWithPinCipherBlob:isa pinKeyBlob:v133 casd:v135 pinAppletAttestationData:v137 pinKEKHash:v147 isPinBypass:v148];
    sub_100006628(v130, v131);
    unint64_t v138 = v149;
    sub_100006628(v136, v149);
    sub_100006628((uint64_t)v164, v134);
    unint64_t v139 = v152;
    sub_100006628(v163, v152);
    uint64_t v140 = v150;
    unint64_t v141 = v151;
    sub_100006628(v150, v151);

    uint64_t v142 = (uint64_t)v169;
    sub_100054954();
    sub_100006628(v140, v141);
    sub_100006628(v163, v139);
    sub_100006628((uint64_t)v153, v138);
    sub_10000BF70((uint64_t)v155, v156);
    sub_100057750(v166, v170, v159, v167, v158, v168, v165, v160, v162, v161);
    sub_100052920(v142);
    swift_release();
  }
}

uint64_t sub_100052920(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v27 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v28 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v27 - v12;
  sub_1000578E4();
  id v14 = [self defaultCenter];
  uint64_t v15 = AVSystemController_RecordingStateDidChangeNotification;
  id v16 = [self sharedInstance];
  [v14 removeObserver:a1 name:v15 object:v16];

  if (qword_1001D9048 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSSignposter();
  sub_100003E78(v17, (uint64_t)qword_1001DB4B8);
  os_signpost_type_t v18 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v19 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v20 = v27;
    if ((*(unsigned int (**)(char *, uint64_t))(v27 + 88))(v5, v2) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v2);
      uint64_t v21 = "end generate pin block";
    }
    uint64_t v23 = v28;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v28, v13, v6);
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, v19, v25, "pin-generateBlock", v21, v24, 2u);
    swift_slowDealloc();

    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v26(v13, v6);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v23, v6);
  }
  else
  {

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  *(unsigned char *)(a1 + 152) = 0;
  return result;
}

uint64_t sub_100052CB8()
{
  uint64_t v1 = *(NSObject **)(v0 + 288);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_100057D98;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_100057D5C;
  void v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100052DEC;
  v5[3] = &unk_1001C8020;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100052DEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_100052E14()
{
  uint64_t v1 = v0;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DB4A0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "_cancelPINCapture()", v5, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v0 + 152) == 1)
  {
    sub_100009300(v0 + 200, (uint64_t)v38);
    uint64_t v6 = v39;
    uint64_t v7 = v40;
    sub_100006788(v38, v39);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    strcpy((char *)(inited + 32), "transactionId");
    *(_WORD *)(inited + 46) = -4864;
    uint64_t v9 = *(void *)(v1 + 72);
    if (v9)
    {
      uint64_t v11 = *(void *)(v1 + 120);
      unint64_t v10 = *(void *)(v1 + 128);
      uint64_t v34 = *(void *)(v1 + 112);
      unint64_t v33 = *(void *)(v1 + 104);
      unint64_t v12 = *(void *)(v1 + 88);
      uint64_t v13 = *(void *)(v1 + 96);
      uint64_t v35 = v7;
      uint64_t v36 = v6;
      uint64_t v14 = *(void *)(v1 + 80);
      uint64_t v15 = *(void *)(v1 + 56);
      uint64_t v16 = *(void *)(v1 + 64);
      sub_100057848(v15, v16, v9, v14, v12, v13, v33, v34, v11, v10);
      swift_bridgeObjectRetain();
      uint64_t v17 = v15;
      uint64_t v18 = v14;
      uint64_t v7 = v35;
      uint64_t v6 = v36;
      sub_100057750(v17, v16, v9, v18, v12, v13, v33, v34, v11, v10);
    }
    else
    {
      uint64_t v9 = 0xE300000000000000;
      uint64_t v16 = 7104878;
    }
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = &protocol witness table for String;
    *(void *)(inited + 48) = v16;
    *(void *)(inited + 56) = v9;
    unint64_t v21 = sub_100104AF4(inited);
    sub_100136224(25, v21, v6, v7);
    swift_bridgeObjectRelease();
    uint64_t v22 = sub_100006520((uint64_t)v38);
    uint64_t v23 = *(void *)(v1 + 296);
    LOBYTE(v38[0]) = 10;
    __chkstk_darwin(v22, v24);
    uint64_t v26 = (uint64_t *)&v25[4];
    uint64_t v27 = v25 + 8;
    os_unfair_lock_lock(v25 + 8);
    sub_1000578C8(v26);
    os_unfair_lock_unlock(v27);
    *(unsigned char *)(v23 + 120) = 3;
    sub_100058BDC();
    sub_100054954();
    sub_1000578E4();
    id v28 = [self defaultCenter];
    uint64_t v29 = AVSystemController_RecordingStateDidChangeNotification;
    id v30 = [self sharedInstance];
    [v28 removeObserver:v1 name:v29 object:v30];

    sub_100053D50();
    uint64_t v31 = *(void *)(v1 + 184);
    uint64_t v32 = *(void *)(v1 + 192);
    sub_100006788((void *)(v1 + 160), v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 40))(v31, v32);
    *(unsigned char *)(v1 + 152) = 0;
  }
  else
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v19, "PIN Capture not in progress", v20, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100053250(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v6 = (unsigned char *)(v4 + 272);
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DB4A0);
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v24 = v4;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    buf = v11;
    id v12 = [v8 digest];
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v8;
    unint64_t v16 = v15;

    Swift::String v17 = Data.hexString()();
    uint64_t v18 = v13;
    uint64_t v4 = v24;
    unint64_t v19 = v16;
    id v8 = v14;
    sub_100006628(v18, v19);
    uint64_t v3 = v2;
    sub_100005EB8(v17._countAndFlagsBits, (unint64_t)v17._object, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "DefaultPINController.updateParameters(parameters: %s)", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  if (*v6 == 1)
  {
    if (v6[1] == 1)
    {
      sub_10004F110(v8);
      if (v3)
      {
        uint64_t v25 = v3;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v20 = String.init<A>(describing:)();
        sub_10002ADA4(11010, v20, v21, 0);
        swift_willThrow();
        swift_errorRelease();
      }
      else
      {
        [v8 transactionDataLifetime];
        *(void *)(v4 + 240) = v22;
        sub_100053D50();
        sub_100053564();
        *(unsigned char *)(v4 + 273) = 0;
      }
    }
    else
    {
      sub_10002ADA4(11012, 0xD000000000000045, (void *)0x8000000100196AE0, 0);
      swift_willThrow();
    }
  }
}

void sub_100053564()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  os_log_t v51 = (os_log_t)((char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v49 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  uint64_t v10 = __chkstk_darwin(v8, v9);
  id v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  unint64_t v15 = (char *)&v42 - v14;
  uint64_t v16 = type metadata accessor for DispatchTime();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  unint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  uint64_t v24 = (char *)&v42 - v23;
  if (*(unsigned char *)(v0 + 272))
  {
    if (qword_1001D9040 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100003E78(v25, (uint64_t)qword_1001DB4A0);
    os_log_t v51 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v26, "PIN timer already started", v27, 2u);
      swift_slowDealloc();
    }
    os_log_t v28 = v51;
  }
  else
  {
    uint64_t v46 = v1;
    uint64_t v43 = v0;
    swift_getObjectType();
    uint64_t v45 = v2;
    swift_unknownObjectRetain();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v44 = v5;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v21, v16);
    sub_100107020((uint64_t)v15);
    sub_100107094(v12);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
    swift_unknownObjectRelease();
    uint64_t v30 = v48;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v47 + 8);
    v31(v12, v48);
    v31(v15, v30);
    v29(v24, v16);
    uint64_t v32 = v43;
    swift_getObjectType();
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v32;
    swift_weakInit();
    aBlock[4] = sub_100057830;
    void aBlock[5] = v33;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    aBlock[3] = &unk_1001C7FD0;
    uint64_t v35 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v36 = v49;
    j___s8Dispatch0A3QoSV11unspecifiedACvgZ();
    os_log_t v37 = v51;
    sub_10000491C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v35);
    swift_unknownObjectRelease();
    (*(void (**)(os_log_t, uint64_t))(v45 + 8))(v37, v46);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v44);
    swift_release();
    swift_release();
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease();
    *(_WORD *)(v34 + 272) = 257;
    if (qword_1001D9040 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100003E78(v38, (uint64_t)qword_1001DB4A0);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "PIN timer started", v41, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100053BAC()
{
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DB4A0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "DefaultPINController timer fired", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    uint64_t v8 = *(void *)(v5 + 72);
    uint64_t v9 = *(void *)(v5 + 80);
    unint64_t v10 = *(void *)(v5 + 88);
    uint64_t v11 = *(void *)(v5 + 96);
    unint64_t v12 = *(void *)(v5 + 104);
    uint64_t v13 = *(void *)(v5 + 112);
    uint64_t v14 = *(void *)(v5 + 120);
    unint64_t v15 = *(void *)(v5 + 128);
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    sub_100057750(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
    *(unsigned char *)(v5 + 273) = 0;
    sub_100053D50();
    uint64_t v16 = *(void (**)(uint64_t))(v5 + 248);
    if (v16)
    {
      uint64_t v17 = swift_retain();
      v16(v17);
      sub_100057838((uint64_t)v16);
    }
    uint64_t v18 = *(void *)(v5 + 224);
    uint64_t v19 = *(void *)(v5 + 232);
    sub_100006788((void *)(v5 + 200), v18);
    sub_1001362E4(27, v18, v19);
    return swift_release();
  }
  return result;
}

void sub_100053D50()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 272) == 1)
  {
    swift_getObjectType();
    aBlock[4] = BitString.init(data:unusedBits:);
    void aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000048D8;
    aBlock[3] = &unk_1001C7F80;
    uint64_t v11 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    j___s8Dispatch0A3QoSV11unspecifiedACvgZ();
    sub_10000491C();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)();
    _Block_release(v11);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_getObjectType();
    swift_unknownObjectRetain();
    OS_dispatch_source.suspend()();
    swift_unknownObjectRelease();
    *(unsigned char *)(v0 + 272) = 0;
    if (qword_1001D9040 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001DB4A0);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "PIN timer stopped", v15, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1001D9040 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100003E78(v16, (uint64_t)qword_1001DB4A0);
    os_log_t v21 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v17, "PIN timer already stopped", v18, 2u);
      swift_slowDealloc();
    }
    os_log_t v19 = v21;
  }
}

id sub_100054140(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v59 = a1;
  unint64_t v57 = type metadata accessor for String.Encoding();
  unint64_t v5 = *(void *)(v57 - 8);
  __chkstk_darwin(v57, v6);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100003E78(v9, (uint64_t)qword_1001DB4A0);
  swift_bridgeObjectRetain_n();
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v56 = a2;
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v55 = v3;
    unint64_t v54 = v5;
    uint64_t v68 = sub_100005EB8(0xD000000000000019, 0x8000000100196AC0, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2080;
    Swift::String v14 = String.redactedToken()();
    uint64_t v68 = sub_100005EB8(v14._countAndFlagsBits, (unint64_t)v14._object, &v60);
    unint64_t v5 = v54;
    uint64_t v3 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s, raw PIN token: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v3[9])
    {
LABEL_5:
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (v3[9]) {
      goto LABEL_5;
    }
  }
  uint64_t v44 = sub_100006788(v3 + 38, v3[41]);
  __chkstk_darwin(v44, v45);
  *(&v53 - 2) = v46;
  *((unsigned char *)&v53 - 8) = 0;
  sub_100003EB0(&qword_1001DD3F0);
  uint64_t v47 = v58;
  OS_dispatch_queue.sync<A>(execute:)();
  if (!v70)
  {
    sub_100008970((uint64_t)&v68);
    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    sub_10002ADA4(11004, 0xD00000000000002BLL, (void *)0x8000000100196A50, 0);
    return (id)swift_willThrow();
  }
  uint64_t v58 = v47;
  uint64_t v48 = v64;
  unint64_t v49 = v65;
  uint64_t v55 = v8;
  uint64_t v50 = v66;
  unint64_t v51 = v67;
  sub_100006628(v62, v63);
  sub_100006628(v48, v49);
  uint64_t v52 = v50;
  uint64_t v8 = (char *)v55;
  sub_100006628(v52, v51);
LABEL_6:
  String.uppercased()();
  static String.Encoding.utf8.getter();
  uint64_t v15 = String.data(using:allowLossyConversion:)();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  id result = (id)(*(uint64_t (**)(char *, unint64_t))(v5 + 8))(v8, v57);
  if (v17 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_18;
  }
  Swift::String v19 = String.uppercased()();
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_100114E24(v19._countAndFlagsBits, (unint64_t)v19._object);
  unint64_t v22 = v21;
  id result = [*(id *)(*sub_100006788(v3 + 43, v3[46]) + 16) serialNumber];
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v23 = result;
  unint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  uint64_t v27 = sub_100114E24(v24, v26);
  unint64_t v29 = v28;
  uint64_t v68 = v15;
  unint64_t v69 = v17;
  uint64_t v55 = (void *)v15;
  sub_100038D8C(v15, v17);
  sub_1000065D0(v20, v22);
  sub_100147328(v20, v22);
  uint64_t v53 = v20;
  unint64_t v57 = v22;
  sub_100006628(v20, v22);
  uint64_t v30 = v68;
  unint64_t v31 = v69;
  uint64_t v60 = v68;
  unint64_t v61 = v69;
  sub_1000065D0(v68, v69);
  sub_1000065D0(v27, v29);
  sub_100147328(v27, v29);
  sub_100006628(v27, v29);
  sub_100006628(v30, v31);
  unint64_t v54 = v17;
  uint64_t v33 = v60;
  unint64_t v32 = v61;
  uint64_t v34 = sub_100006788(v3 + 2, v3[5]);
  __chkstk_darwin(v34, v35);
  *((_OWORD *)&v53 - 4) = xmmword_10018A8C0;
  *(&v53 - 6) = 0xEE006E6F69746164;
  uint64_t v36 = v56;
  *(&v53 - 5) = v59;
  *(&v53 - 4) = v36;
  *(&v53 - 3) = v33;
  *(&v53 - 2) = v32;
  *(&v53 - 1) = v37;
  uint64_t v38 = (uint64_t)v58;
  OS_dispatch_queue.sync<A>(execute:)();
  if (v38)
  {
    uint64_t v39 = v3[28];
    uint64_t v59 = v3[29];
    uint64_t v58 = sub_100006788(v3 + 25, v39);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(void *)(inited + 32) = 0xD000000000000010;
    *(void *)(inited + 40) = 0x8000000100196A80;
    swift_getErrorValue();
    uint64_t v41 = Error.localizedDescription.getter();
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 80) = &protocol witness table for String;
    *(void *)(inited + 48) = v41;
    *(void *)(inited + 56) = v42;
    unint64_t v43 = sub_100104AF4(inited);
    sub_100136224(27, v43, v39, v59);
    swift_bridgeObjectRelease();
    swift_errorRetain();
    sub_10002ADA4(11003, 0xD00000000000001FLL, (void *)0x8000000100196AA0, v38);
    swift_errorRelease();
    swift_willThrow();
    sub_100006628(v33, v32);
    sub_100006628(v27, v29);
    sub_100006628(v53, v57);
    sub_10000BF70((uint64_t)v55, v54);
    return (id)swift_errorRelease();
  }
  else
  {
    sub_100006628(v33, v32);
    sub_100006628(v27, v29);
    sub_100006628(v53, v57);
    return (id)sub_10000BF70((uint64_t)v55, v54);
  }
}

uint64_t sub_100054954()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  BOOL v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v13);
  uint64_t v15 = &v37[-v14];
  if (v1[35])
  {
    uint64_t v39 = v3;
    uint64_t v16 = qword_1001D9048;
    swift_retain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for OSSignposter();
    sub_100003E78(v17, (uint64_t)qword_1001DB4B8);
    uint64_t v18 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    int v38 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v19 = v39;
      if ((*(unsigned int (**)(unsigned char *, uint64_t))(v39 + 88))(v6, v2) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v20 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v6, v2);
        uint64_t v20 = "end pin capture";
      }
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v12, v15, v7);
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v38, v22, "pin-totalCaptureTime", v20, v21, 2u);
      swift_slowDealloc();

      uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
      v23(v15, v7);
      swift_release();
      v23(v12, v7);
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v15, v7);
      swift_release();
    }
  }
  v1[35] = 0;
  swift_release();
  uint64_t v24 = v1[7];
  uint64_t v25 = v1[8];
  uint64_t v26 = v1[9];
  uint64_t v27 = v1[10];
  unint64_t v28 = v1[11];
  uint64_t v29 = v1[12];
  unint64_t v30 = v1[13];
  uint64_t v31 = v1[14];
  uint64_t v32 = v1[15];
  unint64_t v33 = v1[16];
  *(_OWORD *)(v1 + 7) = 0u;
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 11) = 0u;
  *(_OWORD *)(v1 + 13) = 0u;
  *(_OWORD *)(v1 + 15) = 0u;
  sub_100057750(v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  uint64_t v34 = v1[17];
  unint64_t v35 = v1[18];
  *(_OWORD *)(v1 + 17) = xmmword_10018A340;
  return sub_10000BF70(v34, v35);
}

uint64_t sub_100054CDC()
{
  uint64_t v1 = self;
  id v2 = [v1 sharedInstance];
  if (!v2) {
    __break(1u);
  }
  uint64_t v3 = v2;
  id v4 = [v2 attributeForKey:AVSystemController_RecordingSessionsDescriptionAttribute];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v37, 0, sizeof(v37));
  }
  sub_100008908((uint64_t)v37, (uint64_t)v38);
  if (!v38[3])
  {
    sub_100008970((uint64_t)v38);
    goto LABEL_13;
  }
  sub_100006680(0, &qword_1001DB7E8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    if (qword_1001D9040 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001DB4A0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v13, "couldn't access AVSC", v14, 2u);
      swift_slowDealloc();
    }
    goto LABEL_17;
  }
  uint64_t v5 = v36;
  if ([v36 count])
  {
    if (qword_1001D9040 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100003E78(v6, (uint64_t)qword_1001DB4A0);
    uint64_t v7 = v36;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v5, v8))
    {

      return 0;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    v38[0] = v7;
    uint64_t v11 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v7;

    _os_log_impl((void *)&_mh_execute_header, v5, v8, "something is recording %@", v9, 0xCu);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_17:
    return 0;
  }
  uint64_t result = (uint64_t)[v1 sharedInstance];
  if (result)
  {
    uint64_t v16 = (void *)result;
    sub_100003EB0(&qword_1001DB7F0);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100186100;
    uint64_t v18 = (void *)AVSystemController_RecordingStateDidChangeNotification;
    *(void *)(v17 + 32) = AVSystemController_RecordingStateDidChangeNotification;
    type metadata accessor for Name(0);
    id v19 = v18;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v38[0] = 0;
    unsigned int v21 = [v16 setAttribute:isa forKey:AVSystemController_SubscribeToNotificationsAttribute error:v38];

    id v22 = v38[0];
    if (!v21)
    {
      id v28 = v38[0];
      uint64_t v29 = _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1001D9040 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100003E78(v30, (uint64_t)qword_1001DB4A0);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v31, v32))
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        return 0;
      }
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      v38[0] = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v33 = 136315138;
      *(void *)&v37[0] = v29;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v34 = String.init<A>(describing:)();
      *(void *)&v37[0] = sub_100005EB8(v34, v35, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "failed to subscribe notification %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      goto LABEL_17;
    }
    uint64_t v23 = self;
    id v24 = v22;
    id v25 = [v23 defaultCenter];
    uint64_t v26 = AVSystemController_RecordingStateDidChangeNotification;
    id v27 = [v1 sharedInstance];
    [v25 addObserver:v0 selector:"recordingStateDidChange:" name:v26 object:v27];

    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100055350(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DB4A0);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    v27[0] = (id)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 136315138;
    id v9 = [v5 userInfo];
    if (v9)
    {
      uint64_t v10 = v9;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v11 = Dictionary.description.getter();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v13 = 0xE300000000000000;
      uint64_t v11 = 7104878;
    }
    *(void *)&long long v28 = sub_100005EB8(v11, v13, (uint64_t *)v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "recordingStateDidChange %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v14 = [v5 userInfo];
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v15 = v14;
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v27[6] = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27[7] = v17;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v16 + 16) && (unint64_t v18 = sub_10000C46C((uint64_t)v27), (v19 & 1) != 0))
  {
    sub_100006570(*(void *)(v16 + 56) + 32 * v18, (uint64_t)&v28);
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_10000E2D4((uint64_t)v27);
  if (!*((void *)&v29 + 1)) {
    goto LABEL_22;
  }
  sub_100006680(0, &qword_1001DB7E0);
  if (swift_dynamicCast())
  {
    id v20 = v27[0];
    if (![v27[0] BOOLValue])
    {

      return;
    }
    unsigned int v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "something start recording", v23, 2u);
      swift_slowDealloc();
    }

    id v24 = *(NSObject **)(v2 + 288);
    id v25 = (void *)swift_allocObject();
    long long v25[2] = sub_1000576FC;
    uint64_t v25[3] = v2;
    v27[4] = sub_100057710;
    v27[5] = v25;
    v27[0] = _NSConcreteStackBlock;
    v27[1] = (id)1107296256;
    v27[2] = sub_100052DEC;
    void v27[3] = &unk_1001C7F58;
    uint64_t v26 = _Block_copy(v27);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v24, v26);
    _Block_release(v26);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();

    swift_release();
    swift_release();
    if (v24)
    {
      __break(1u);
LABEL_21:
      long long v28 = 0u;
      long long v29 = 0u;
LABEL_22:
      sub_100008970((uint64_t)&v28);
    }
  }
}

uint64_t type metadata accessor for DefaultPINController()
{
  return self;
}

uint64_t sub_100055888()
{
  sub_100003EB0(&qword_1001DB788);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100055900()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_10005595C()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000559A4()
{
  sub_100006680(0, &qword_1001DB780);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_100055A20()
{
  return sub_100052CB8();
}

uint64_t sub_100055A44()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

id sub_100055A9C(uint64_t a1, uint64_t a2)
{
  return sub_100054140(a1, a2);
}

void sub_100055AC0()
{
  sub_100053250(*(void **)(v0 + 24));
}

void sub_100055AE8(void *a1@<X8>)
{
  sub_100051458();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_100055B14()
{
}

uint64_t sub_100055B2C()
{
  return sub_10004F76C(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

void sub_100055B58(void *a1@<X8>)
{
  sub_10004D364(*(void **)(v1 + 24));
  if (!v2)
  {
    *a1 = v4;
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v7;
  }
}

id sub_100055B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  v37[3] = type metadata accessor for MPOCDefaultMonitorManager();
  unsigned char v37[4] = &off_1001CAE10;
  v37[0] = a4;
  v36[3] = type metadata accessor for SystemInfo();
  v36[4] = &off_1001CB4C8;
  v36[0] = a5;
  v35[4] = &off_1001CC7B8;
  v35[3] = type metadata accessor for SecureElement();
  v35[0] = a7;
  *(void *)&a8[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_activeSession] = 0;
  uint64_t v16 = qword_1001D9390;
  uint64_t v17 = a8;
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100003E78(v18, (uint64_t)qword_1001DF7C0);
  sub_100009300((uint64_t)v37, (uint64_t)v34);
  sub_100009300((uint64_t)v36, (uint64_t)v33);
  char v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2080;
    v30[5] = a3;
    v30[6] = a2;
    v30[1] = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v22._uint64_t countAndFlagsBits = 3026478;
    v22._unint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v22);
    _print_unlocked<A, B>(_:_:)();
    v30[0] = sub_100005EB8(0, 0xE000000000000000, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    sub_100009300((uint64_t)v34, (uint64_t)v30);
    sub_100003EB0(&qword_1001DB7D0);
    uint64_t v23 = String.init<A>(describing:)();
    v30[0] = sub_100005EB8(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v34);
    *(_WORD *)(v21 + 32) = 2080;
    sub_100009300((uint64_t)v33, (uint64_t)v30);
    sub_100003EB0(&qword_1001DB7D8);
    uint64_t v25 = String.init<A>(describing:)();
    v30[0] = sub_100005EB8(v25, v26, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v33);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "DefaultPINAppletProxy.init(pinLength: %ld, bound: %s, monitorManager: %s, systemInfo: %s", (uint8_t *)v21, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006520((uint64_t)v34);
    sub_100006520((uint64_t)v33);
  }
  *(void *)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_pinLength] = a1;
  *(void *)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_maxPinLength] = a3;
  *(void *)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_minPinLength] = a2;
  sub_100009300((uint64_t)v37, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_monitorManager]);
  sub_100009300((uint64_t)v36, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_systemInfo]);
  sub_100009300(a6, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_auditor]);
  sub_100009300((uint64_t)v35, (uint64_t)&v17[OBJC_IVAR____TtC9SPREngine21DefaultPINAppletProxy_secureElement]);

  id v27 = (objc_class *)type metadata accessor for DefaultPINAppletProxy();
  v32.receiver = v17;
  v32.super_class = v27;
  id v28 = [super init];
  sub_100006520((uint64_t)v35);
  sub_100006520(a6);
  sub_100006520((uint64_t)v36);
  sub_100006520((uint64_t)v37);
  return v28;
}

id sub_100056000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = type metadata accessor for MPOCDefaultMonitorManager();
  int v38 = &off_1001CAE10;
  v36[0] = a4;
  uint64_t v34 = type metadata accessor for SystemInfo();
  unint64_t v35 = &off_1001CB4C8;
  v33[0] = a5;
  uint64_t v31 = type metadata accessor for SecureElement();
  objc_super v32 = &off_1001CC7B8;
  v30[0] = a7;
  id v14 = (char *)objc_allocWithZone((Class)type metadata accessor for DefaultPINAppletProxy());
  uint64_t v15 = sub_10001F1A0((uint64_t)v36, v37);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (void *)((char *)&v30[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_10001F1A0((uint64_t)v33, v34);
  __chkstk_darwin(v19, v19);
  uint64_t v21 = (void *)((char *)&v30[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10001F1A0((uint64_t)v30, v31);
  __chkstk_darwin(v23, v23);
  uint64_t v25 = (void *)((char *)&v30[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  id v27 = sub_100055B90(a1, a2, a3, *v17, *v21, a6, *v25, v14);
  sub_100006520((uint64_t)v30);
  sub_100006520((uint64_t)v33);
  sub_100006520((uint64_t)v36);
  return v27;
}

uint64_t sub_1000562C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v55 = a4;
  uint64_t v63 = a3;
  uint64_t v14 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v61 = *(void *)(v14 - 8);
  uint64_t v62 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v60 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v58 = *(void *)(v17 - 8);
  uint64_t v59 = v17;
  __chkstk_darwin(v17, v18);
  unint64_t v57 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56, v20);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v23, v24);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v25 - 8, v26);
  v74[3] = type metadata accessor for DefaultPINAppletProxy();
  v74[4] = &off_1001CBA20;
  v74[0] = a1;
  v73[3] = type metadata accessor for CertificateManager();
  v73[4] = &off_1001C6308;
  v73[0] = a2;
  v72[3] = type metadata accessor for DefaultManagedDictionary();
  v72[4] = &off_1001C96D8;
  v72[0] = a5;
  v71[3] = type metadata accessor for SecureElement();
  v71[4] = &off_1001CC7B8;
  v71[0] = a6;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_OWORD *)(a7 + 72) = 0u;
  *(_OWORD *)(a7 + 88) = 0u;
  *(_OWORD *)(a7 + 104) = 0u;
  *(_OWORD *)(a7 + 120) = 0u;
  *(void *)(a7 + 136) = 0;
  *(void *)(a7 + 144) = 0xF000000000000000;
  *(unsigned char *)(a7 + 152) = 0;
  *(_WORD *)(a7 + 272) = 0;
  *(void *)(a7 + 280) = 0;
  uint64_t v27 = sub_100006680(0, (unint64_t *)&qword_1001DD340);
  *(void *)(a7 + 248) = 0;
  *(void *)(a7 + 256) = 0;
  static DispatchQoS.unspecified.getter();
  v70[0] = _swiftEmptyArrayStorage;
  sub_100057CF8((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_100006814((unint64_t *)&qword_1001DA500, (uint64_t *)&unk_1001DD350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v54 + 104))(v22, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v56);
  uint64_t v56 = v27;
  *(void *)(a7 + 288) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a7 + 384) = 0xD00000000000002ALL;
  *(void *)(a7 + 392) = 0x80000001001969D0;
  *(void *)(a7 + 400) = 0xD00000000000002ALL;
  *(void *)(a7 + 408) = 0x8000000100196A00;
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100003E78(v28, (uint64_t)qword_1001DB4A0);
  sub_100009300((uint64_t)v74, (uint64_t)v70);
  sub_100009300((uint64_t)v73, (uint64_t)v69);
  uint64_t v29 = v63;
  sub_100009300(v63, (uint64_t)v68);
  sub_100009300((uint64_t)v72, (uint64_t)v67);
  sub_100009300((uint64_t)v71, (uint64_t)v66);
  uint64_t v30 = v55;
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v65 = v54;
    *(_DWORD *)uint64_t v33 = 136316674;
    sub_100009300((uint64_t)v70, (uint64_t)v64);
    sub_100003EB0(&qword_1001DB7A8);
    uint64_t v34 = String.init<A>(describing:)();
    v64[0] = sub_100005EB8(v34, v35, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v70);
    *(_WORD *)(v33 + 12) = 2080;
    sub_100009300((uint64_t)v69, (uint64_t)v64);
    sub_100003EB0(&qword_1001DB7B0);
    uint64_t v36 = String.init<A>(describing:)();
    v64[0] = sub_100005EB8(v36, v37, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v69);
    *(_WORD *)(v33 + 22) = 2080;
    sub_100009300((uint64_t)v68, (uint64_t)v64);
    sub_100003EB0(&qword_1001DB7B8);
    uint64_t v38 = String.init<A>(describing:)();
    v64[0] = sub_100005EB8(v38, v39, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v68);
    *(_WORD *)(v33 + 32) = 2080;
    v64[0] = v30;
    type metadata accessor for ReaderAnalytics();
    swift_retain();
    uint64_t v40 = String.init<A>(describing:)();
    v64[0] = sub_100005EB8(v40, v41, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 42) = 2048;
    *(double *)uint64_t v64 = a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 52) = 2080;
    sub_100009300((uint64_t)v67, (uint64_t)v64);
    sub_100003EB0(&qword_1001DB7C0);
    uint64_t v42 = String.init<A>(describing:)();
    v64[0] = sub_100005EB8(v42, v43, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v67);
    *(_WORD *)(v33 + 62) = 2080;
    sub_100009300((uint64_t)v66, (uint64_t)v64);
    sub_100003EB0(&qword_1001DB7C8);
    uint64_t v44 = String.init<A>(describing:)();
    v64[0] = sub_100005EB8(v44, v45, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v66);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "DefaultPINController.init(appletProxy: %s, certificateManager: %s, auditor: %s, analytics: %s, transactionDataLifetime: %f), managedData: %s, secureElement: %s)", (uint8_t *)v33, 0x48u);
    swift_arrayDestroy();
    uint64_t v29 = v63;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006520((uint64_t)v70);
    sub_100006520((uint64_t)v69);
    sub_100006520((uint64_t)v68);
    swift_release_n();
    sub_100006520((uint64_t)v67);
    sub_100006520((uint64_t)v66);
  }

  sub_100009300((uint64_t)v74, a7 + 160);
  sub_100009300((uint64_t)v73, a7 + 16);
  sub_100009300(v29, a7 + 200);
  *(void *)(a7 + 296) = v30;
  sub_100009300((uint64_t)v71, a7 + 344);
  sub_100009300((uint64_t)v72, a7 + 304);
  *(double *)(a7 + 240) = a8;
  sub_100006680(0, &qword_1001D8758);
  uint64_t v47 = v57;
  uint64_t v46 = v58;
  uint64_t v48 = v59;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v57, enum case for DispatchQoS.QoSClass.background(_:), v59);
  swift_retain();
  unint64_t v49 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
  v70[0] = _swiftEmptyArrayStorage;
  sub_100057CF8(&qword_1001DB790, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_100003EB0(&qword_1001DB798);
  sub_100006814(&qword_1001DB7A0, &qword_1001DB798);
  uint64_t v50 = v60;
  uint64_t v51 = v62;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v52 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

  sub_100006520((uint64_t)v71);
  sub_100006520((uint64_t)v72);
  sub_100006520(v29);
  sub_100006520((uint64_t)v73);
  sub_100006520((uint64_t)v74);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v50, v51);
  *(void *)(a7 + 264) = v52;
  return a7;
}

uint64_t sub_100056CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v37 = type metadata accessor for CertificateManager();
  uint64_t v38 = &off_1001C6308;
  v36[0] = a2;
  uint64_t v34 = type metadata accessor for DefaultManagedDictionary();
  unint64_t v35 = &off_1001C96D8;
  v33[0] = a5;
  uint64_t v31 = type metadata accessor for SecureElement();
  os_log_type_t v32 = &off_1001CC7B8;
  v30[0] = a6;
  type metadata accessor for DefaultPINController();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = sub_10001F1A0((uint64_t)v36, v37);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (void *)((char *)&v30[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_10001F1A0((uint64_t)v33, v34);
  __chkstk_darwin(v19, v19);
  uint64_t v21 = (void *)((char *)&v30[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10001F1A0((uint64_t)v30, v31);
  __chkstk_darwin(v23, v23);
  uint64_t v25 = (void *)((char *)&v30[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_1000562C4(a1, *v17, a3, a4, *v21, *v25, v14, a7);
  sub_100006520((uint64_t)v30);
  sub_100006520((uint64_t)v33);
  sub_100006520((uint64_t)v36);
  return v27;
}

uint64_t sub_100056F80(uint64_t a1)
{
  sub_1000FA008((uint64_t)v55);
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1000F8B20((uint64_t)v52);
    uint64_t v3 = v53;
    uint64_t v4 = v54;
    sub_100006788(v52, v53);
    sub_100134448(6, v3, v4);
    sub_1000FBF78((uint64_t)v48);
    sub_1000FB4F0((uint64_t)v46);
    sub_100009300((uint64_t)v51, (uint64_t)v45);
    sub_100009300((uint64_t)v55, (uint64_t)v43);
    uint64_t v6 = sub_10001F1A0((uint64_t)v48, v49);
    unint64_t v41 = v38;
    __chkstk_darwin(v6, v6);
    os_log_type_t v8 = (void *)((char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    uint64_t v10 = sub_10001F1A0((uint64_t)v46, v47);
    __chkstk_darwin(v10, v10);
    unint64_t v12 = (void *)((char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    uint64_t v14 = sub_10001F1A0((uint64_t)v43, v44);
    __chkstk_darwin(v14, v14);
    uint64_t v16 = (void *)((char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    id v18 = sub_100056000(0, 4, 12, *v8, *v12, (uint64_t)v45, *v16);
    sub_100006520((uint64_t)v43);
    sub_100006520((uint64_t)v46);
    sub_100006520((uint64_t)v48);
    uint64_t v49 = type metadata accessor for DefaultPINAppletProxy();
    uint64_t v50 = &off_1001CBA20;
    v48[0] = v18;
    id v19 = v18;
    sub_1000FC4BC((uint64_t)v46);
    sub_100009300((uint64_t)v51, (uint64_t)v45);
    uint64_t v20 = sub_1000FCA00();
    [self defaultTransactionDataLifetime];
    double v22 = v21;
    sub_1000FA54C((uint64_t)v43);
    sub_100009300((uint64_t)v55, (uint64_t)v42);
    uint64_t v23 = sub_10001F1A0((uint64_t)v48, v49);
    unint64_t v41 = v38;
    __chkstk_darwin(v23, v23);
    unint64_t v39 = (void *)((char *)v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v25 + 16))();
    uint64_t v26 = sub_10001F1A0((uint64_t)v46, v47);
    uint64_t v40 = v38;
    __chkstk_darwin(v26, v26);
    uint64_t v28 = (void *)((char *)v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    uint64_t v30 = sub_10001F1A0((uint64_t)v43, v44);
    v38[1] = v38;
    __chkstk_darwin(v30, v30);
    os_log_type_t v32 = (void *)((char *)v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v33 + 16))(v32);
    uint64_t v34 = sub_10001F1A0((uint64_t)v42, v42[3]);
    v38[0] = v38;
    __chkstk_darwin(v34, v34);
    uint64_t v36 = (void *)((char *)v38 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v37 + 16))(v36);
    a1 = sub_100056CB8(*v39, *v28, (uint64_t)v45, v20, *v32, *v36, v22);
    swift_release();
    sub_100006520((uint64_t)v42);
    sub_100006520((uint64_t)v43);
    sub_100006520((uint64_t)v46);
    sub_100006520((uint64_t)v48);

    swift_release();
    sub_100006520((uint64_t)v51);
    sub_100006520((uint64_t)v55);
    sub_100006520((uint64_t)v52);
  }
  return a1;
}

uint64_t sub_100057700()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057710()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100057738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100057748()
{
  return swift_release();
}

void sub_100057750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    sub_100006628(a4, a5);
    sub_100006628(a6, a7);
    sub_100006628(a9, a10);
  }
}

uint64_t sub_1000577D0()
{
  return sub_100015F0C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1000577F8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100057830()
{
  return sub_100053BAC();
}

uint64_t sub_100057838(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

void sub_100057848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    sub_1000065D0(a4, a5);
    sub_1000065D0(a6, a7);
    sub_1000065D0(a9, a10);
  }
}

uint64_t sub_1000578C8(uint64_t *a1)
{
  return sub_10012B7A0(a1, *(unsigned __int8 **)(v1 + 16));
}

void sub_1000578E4()
{
  center = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v0 = (const __CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterPostNotification(center, v0, 0, 0, 1u);
  if (qword_1001D9040 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DB4A0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "sensors toggled", v4, 2u);
    swift_slowDealloc();
    uint64_t v5 = (void *)v0;
  }
  else
  {
    uint64_t v5 = v2;
    uint64_t v2 = center;
    center = (__CFNotificationCenter *)v0;
  }
}

uint64_t sub_100057A30()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057A40(uint64_t a1)
{
  return sub_10012B7BC(a1, *(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_100057A5C()
{
  swift_errorRetain();
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  type metadata accessor for PINControllerError(0);
  if (swift_dynamicCast())
  {
    uint64_t v0 = (uint64_t)v6;
    sub_100057CF8((unint64_t *)&qword_1001D9970, type metadata accessor for PINControllerError);
    if (_BridgedStoredNSError.errorCode.getter() > 10999 && _BridgedStoredNSError.errorCode.getter() < 12000) {
      return v0;
    }
  }
  swift_errorRetain();
  type metadata accessor for PINAppletProxyError(0);
  if ((swift_dynamicCast() & 1) == 0) {
    return sub_10002ADA4(11009, 0, 0, 0);
  }
  sub_100057CF8((unint64_t *)&qword_1001D9A40, type metadata accessor for PINAppletProxyError);
  if (_BridgedStoredNSError.errorCode.getter() <= 11999 || _BridgedStoredNSError.errorCode.getter() >= 13000)
  {

    return sub_10002ADA4(11009, 0, 0, 0);
  }
  _s3__C4CodeOMa_2(0);
  sub_100057CF8(&qword_1001D9A28, _s3__C4CodeOMa_2);
  id v2 = v6;
  char v3 = static _ErrorCodeProtocol.~= infix(_:_:)();

  if (v3)
  {
    uint64_t v4 = 11007;
  }
  else
  {
    id v2 = v2;
    char v5 = static _ErrorCodeProtocol.~= infix(_:_:)();

    if (v5) {
      uint64_t v4 = 11011;
    }
    else {
      uint64_t v4 = 11009;
    }
  }
  uint64_t v0 = sub_10002ADA4(v4, 0, 0, 0);

  return v0;
}

uint64_t sub_100057CF8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100057D40(uint64_t *a1)
{
  return sub_1000C5E88(a1, *(unsigned __int8 **)(v1 + 16), *(void *)(v1 + 24));
}

double sub_100057D60@<D0>(_OWORD *a1@<X8>)
{
  return sub_100038FA8(a1);
}

uint64_t sub_100057D9C(uint64_t *a1)
{
  return sub_1000578C8(a1);
}

uint64_t sub_100057DB4(uint64_t a1)
{
  return sub_100057A40(a1);
}

uint64_t sub_100057DCC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DB7F8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DB7F8);
  if (qword_1001D9260 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1040);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t (*sub_100057E94())()
{
  return j__swift_endAccess;
}

unint64_t sub_100057EEC(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x646F43726F727245;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x6F436C61626F6C47;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0x4E73736150534156;
      break;
    case 9:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0x746361466D726F46;
      break;
    case 14:
      unint64_t result = 5396052;
      break;
    case 15:
      unint64_t result = 0x646E49726F727245;
      break;
    case 17:
      unint64_t result = 0xD000000000000012;
      break;
    case 18:
      unint64_t result = 0x5274756F656D6954;
      break;
    case 19:
      unint64_t result = 0x7272456B63617254;
      break;
    case 20:
      unint64_t result = 0x43676E6972616554;
      break;
    case 21:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 22:
      unint64_t result = 0xD000000000000019;
      break;
    case 24:
      unint64_t result = 0xD000000000000011;
      break;
    case 25:
      unint64_t result = 0xD000000000000012;
      break;
    case 26:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 28:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000581D0(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x54676E696C6C6F50;
      break;
    case 2:
    case 9:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x52746E656D796150;
      break;
    case 5:
      unint64_t result = 0xD000000000000018;
      break;
    case 6:
      unint64_t result = 0x5464616552534156;
      break;
    case 7:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 8:
      unint64_t result = 0x5065727574706143;
      break;
    case 10:
      unint64_t result = 0x6C61746F544E4950;
      break;
    case 11:
      unint64_t result = 0xD000000000000019;
      break;
    case 12:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 14:
      unint64_t result = 0x506E656577746562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000583B0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100058494(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100057EEC);
}

Swift::Int sub_1000583C8(uint64_t a1, uint64_t a2)
{
  return sub_100058544(a1, a2, (void (*)(uint64_t))sub_100057EEC);
}

uint64_t sub_1000583E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000585C8(a1, a2, a3, (void (*)(void))sub_100057EEC);
}

Swift::Int sub_1000583F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058638(a1, a2, a3, (void (*)(uint64_t))sub_100057EEC);
}

uint64_t sub_100058410@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10005A3E8();
  *a1 = result;
  return result;
}

unint64_t sub_100058440@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100057EEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10005846C(void *a1@<X8>)
{
  *a1 = &off_1001C5338;
}

uint64_t sub_10005847C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100058494(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1000581D0);
}

uint64_t sub_100058494(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int sub_10005852C(uint64_t a1, uint64_t a2)
{
  return sub_100058544(a1, a2, (void (*)(uint64_t))sub_1000581D0);
}

Swift::Int sub_100058544(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000585B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000585C8(a1, a2, a3, (void (*)(void))sub_1000581D0);
}

uint64_t sub_1000585C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100058620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058638(a1, a2, a3, (void (*)(uint64_t))sub_1000581D0);
}

Swift::Int sub_100058638(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1000586A0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005A43C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000586D0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000581D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000586FC(void *a1@<X8>)
{
  *a1 = &off_1001C5500;
}

uint64_t sub_10005870C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0 || a2 < 0) {
    goto LABEL_12;
  }
  uint64_t v4 = a1 + (a2 << 16);
  if (__CFADD__(a1, a2 << 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a3 < 0)
  {
LABEL_12:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  BOOL v5 = __CFADD__(v4, a3 << 32);
  uint64_t v6 = v4 + (a3 << 32);
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a4 < 0) {
    goto LABEL_12;
  }
  uint64_t result = v6 + (a4 << 48);
  if (__CFADD__(v6, a4 << 48))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1000587A4(unint64_t a1, uint64_t a2)
{
  switch((char)a1)
  {
    case 1:
      sub_10005A4A4();
      UnsignedInteger.setBit(_:)(0);
      goto LABEL_4;
    case 2:
      sub_10005A4A4();
      UnsignedInteger.clearBit(_:)(0);
      goto LABEL_7;
    case 3:
      sub_10005A4A4();
      UnsignedInteger.setBit(_:)(0);
LABEL_7:
      UnsignedInteger.setBit(_:)(1);
      break;
    case 4:
      break;
    default:
      sub_10005A4A4();
      UnsignedInteger.clearBit(_:)(0);
LABEL_4:
      UnsignedInteger.clearBit(_:)(1);
      break;
  }
  if ((a1 & 0xFF00) != 0x200)
  {
    sub_10005A4A4();
    if ((a1 & 0x100) != 0) {
      UnsignedInteger.setBit(_:)(2);
    }
    else {
      UnsignedInteger.clearBit(_:)(2);
    }
  }
  if ((a1 & 0xFF0000) != 0x20000)
  {
    sub_10005A4A4();
    if ((a1 & 0x10000) != 0) {
      UnsignedInteger.setBit(_:)(3);
    }
    else {
      UnsignedInteger.clearBit(_:)(3);
    }
  }
  if ((a1 & 0xFF000000) != 0x2000000)
  {
    sub_10005A4A4();
    if ((a1 & 0x1000000) != 0) {
      UnsignedInteger.setBit(_:)(4);
    }
    else {
      UnsignedInteger.clearBit(_:)(4);
    }
  }
  if ((a1 & 0xFF00000000) != 0x200000000)
  {
    sub_10005A4A4();
    if ((a1 & 0x100000000) != 0) {
      UnsignedInteger.setBit(_:)(5);
    }
    else {
      UnsignedInteger.clearBit(_:)(5);
    }
  }
  if ((a1 & 0xFF0000000000) != 0x20000000000)
  {
    sub_10005A4A4();
    if ((a1 & 0x10000000000) != 0) {
      UnsignedInteger.setBit(_:)(6);
    }
    else {
      UnsignedInteger.clearBit(_:)(6);
    }
  }
  if ((a1 & 0xFF000000000000) != 0x2000000000000)
  {
    sub_10005A4A4();
    if ((a1 & 0x1000000000000) != 0) {
      UnsignedInteger.setBit(_:)(7);
    }
    else {
      UnsignedInteger.clearBit(_:)(7);
    }
  }
  if (HIBYTE(a1) != 2)
  {
    sub_10005A4A4();
    if ((a1 & 0x100000000000000) != 0) {
      UnsignedInteger.setBit(_:)(8);
    }
    else {
      UnsignedInteger.clearBit(_:)(8);
    }
  }
  if (a2 != 2)
  {
    sub_10005A4A4();
    if (a2) {
      UnsignedInteger.setBit(_:)(9);
    }
    else {
      UnsignedInteger.clearBit(_:)(9);
    }
  }
  if ((a2 & 0xFF00) != 0x200)
  {
    sub_10005A4A4();
    if ((a2 & 0x100) != 0) {
      UnsignedInteger.setBit(_:)(10);
    }
    else {
      UnsignedInteger.clearBit(_:)(10);
    }
  }
  if ((a2 & 0xFF0000) != 0x20000)
  {
    sub_10005A4A4();
    if ((a2 & 0x10000) != 0) {
      UnsignedInteger.setBit(_:)(11);
    }
    else {
      UnsignedInteger.clearBit(_:)(11);
    }
  }
  if ((a2 & 0xFF000000) != 0x2000000)
  {
    sub_10005A4A4();
    if ((a2 & 0x1000000) != 0) {
      UnsignedInteger.setBit(_:)(12);
    }
    else {
      UnsignedInteger.clearBit(_:)(12);
    }
  }
  if ((a2 & 0xFF00000000) != 0x200000000)
  {
    sub_10005A4A4();
    if ((a2 & 0x100000000) != 0) {
      UnsignedInteger.setBit(_:)(13);
    }
    else {
      UnsignedInteger.clearBit(_:)(13);
    }
  }
  if ((a2 & 0xFF0000000000) != 0x20000000000)
  {
    sub_10005A4A4();
    if ((a2 & 0x10000000000) != 0) {
      UnsignedInteger.setBit(_:)(14);
    }
    else {
      UnsignedInteger.clearBit(_:)(14);
    }
  }
  if ((a2 & 0xFF000000000000) != 0x2000000000000)
  {
    sub_10005A4A4();
    if ((a2 & 0x1000000000000) != 0) {
      UnsignedInteger.setBit(_:)(15);
    }
    else {
      UnsignedInteger.clearBit(_:)(15);
    }
  }
  return 0;
}

uint64_t sub_100058BDC()
{
  uint64_t v1 = v0;
  sub_100003EB0((uint64_t *)&unk_1001DD390);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100189E90;
  *(unsigned char *)(inited + 32) = 2;
  uint64_t v3 = v0 + 136;
  uint64_t v4 = sub_10005870C(*(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160));
  *(void *)(inited + 64) = &type metadata for UInt64;
  *(void *)(inited + 40) = v4;
  *(unsigned char *)(inited + 72) = 1;
  int v5 = sub_1000587A4(*(void *)(v3 - 16), *(unsigned int *)(v3 - 8) | ((unint64_t)*(unsigned __int8 *)(v3 - 4) << 32) | ((unint64_t)*(unsigned __int8 *)(v3 - 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v3 - 2) << 48));
  *(void *)(inited + 104) = &type metadata for UInt32;
  *(_DWORD *)(inited + 80) = v5;
  *(unsigned char *)(inited + 112) = 3;
  unint64_t v6 = *(unsigned __int8 *)(v0 + 168) | ((unint64_t)*(unsigned __int16 *)(v0 + 172) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 169) << 8) | ((unint64_t)*(unsigned __int16 *)(v0 + 170) << 16);
  *(void *)(inited + 144) = &type metadata for UInt64;
  *(void *)(inited + 120) = v6;
  *(unsigned char *)(inited + 152) = 4;
  swift_beginAccess();
  if (*(void *)(v0 + 176))
  {
    swift_bridgeObjectRetain();
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    sub_100038F5C((unint64_t *)&qword_1001DD3B0, (uint64_t *)&unk_1001DA570);
    uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    uint64_t v10 = &type metadata for String;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    *(void *)(inited + 176) = 0;
  }
  *(void *)(inited + 160) = v7;
  *(void *)(inited + 168) = v9;
  *(void *)(inited + 184) = v10;
  *(unsigned char *)(inited + 192) = 28;
  swift_beginAccess();
  uint64_t v11 = swift_bridgeObjectRetain();
  unint64_t v12 = sub_100059F54(v11);
  char v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v15 = 0;
    unint64_t v12 = 0;
    *(void *)(inited + 208) = 0;
    *(void *)(inited + 216) = 0;
  }
  else
  {
    uint64_t v15 = &type metadata for Int;
  }
  *(void *)(inited + 224) = v15;
  *(void *)(inited + 200) = v12;
  unint64_t v16 = sub_1001052FC(inited);
  __chkstk_darwin(v16, v17);
  id v19 = (uint64_t *)&v18[4];
  uint64_t v20 = v18 + 8;
  os_unfair_lock_lock(v18 + 8);
  sub_10005A488(v19);
  os_unfair_lock_unlock(v20);
  uint64_t v21 = swift_bridgeObjectRelease();
  __chkstk_darwin(v21, v22);
  os_unfair_lock_lock(v20);
  sub_10001F0A4(v19);
  os_unfair_lock_unlock(v20);
  *(unsigned char *)(v1 + 120) = 4;
  *(void *)(v1 + 121) = 0x202020202020202;
  *(void *)(v1 + 127) = 0x202020202020202;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(void *)(v3 + 30) = 0;
  *(void *)(v1 + 176) = 0;
  swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

void sub_100058EEC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 56);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 8;
  os_unfair_lock_lock(v1 + 8);
  sub_100059F3C(v2, &v8);
  os_unfair_lock_unlock(v3);
  if (!v8)
  {
    if (qword_1001D9050 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003E78(v4, (uint64_t)qword_1001DB7F8);
    int v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "analytics wasn't sent last time", v7, 2u);
      swift_slowDealloc();
    }

    sub_100058BDC();
  }
}

uint64_t sub_10005902C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = v0 + 8;
  uint64_t v13 = v0[11];
  uint64_t v12 = v0[12];
  sub_100006788(v11, v13);
  (*(void (**)(uint64_t))(*(void *)(v12 + 8) + 16))(v13);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v10, v2);
  char v14 = v1 + 14;
  swift_beginAccess();
  unint64_t v15 = v1[14];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[14] = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_10015A8AC(0, *(void *)(v15 + 16) + 1, 1, v15);
    *char v14 = v15;
  }
  unint64_t v18 = *(void *)(v15 + 16);
  unint64_t v17 = *(void *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    unint64_t v15 = sub_10015A8AC(v17 > 1, v18 + 1, 1, v15);
    *char v14 = v15;
  }
  *(void *)(v15 + 16) = v18 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v15+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v18, v7, v2);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t sub_100059234(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v28[0] = _swiftEmptyArrayStorage;
    sub_10014B9C4(0, v3, 0);
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      unint64_t v8 = *v6;
      sub_1000065D0(v7, *v6);
      Swift::String v9 = Data.hexString()();
      sub_100006628(v7, v8);
      v28[0] = v4;
      unint64_t v11 = v4[2];
      unint64_t v10 = v4[3];
      if (v11 >= v10 >> 1)
      {
        sub_10014B9C4(v10 > 1, v11 + 1, 1);
        uint64_t v4 = (void *)v28[0];
      }
      v6 += 2;
      v4[2] = v11 + 1;
      *(Swift::String *)&v4[2 * v11 + 4] = v9;
      --v3;
    }
    while (v3);
  }
  v28[0] = v4;
  sub_100003EB0((uint64_t *)&unk_1001DA570);
  sub_100038F5C((unint64_t *)&qword_1001DD3B0, (uint64_t *)&unk_1001DA570);
  uint64_t v12 = (void *)BidirectionalCollection<>.joined(separator:)();
  char v14 = v13;
  swift_bridgeObjectRelease();
  unint64_t v15 = (uint64_t *)(v2 + 176);
  swift_beginAccess();
  unint64_t v16 = *(void **)(v2 + 176);
  if (v16)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
    }
      unint64_t v16 = sub_10015A8E0(0, v16[2] + 1, 1, v16);
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      unint64_t v16 = sub_10015A8E0((void *)(v17 > 1), v18 + 1, 1, v16);
    }
    void v16[2] = v18 + 1;
    id v19 = &v16[2 * v18];
    v19[4] = v12;
    void v19[5] = v14;
    uint64_t *v15 = (uint64_t)v16;
  }
  else
  {
    sub_100003EB0((uint64_t *)&unk_1001DA520);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_100186100;
    *(void *)(v20 + 32) = v12;
    *(void *)(v20 + 40) = v14;
    uint64_t *v15 = v20;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = *v15;
  if (*v15)
  {
    uint64_t v12 = &type metadata for String;
    while (*(void *)(v22 + 16) >= 4uLL)
    {
      char v14 = sub_100057E94();
      uint64_t v24 = *v23;
      if (*v23)
      {
        int64_t v25 = v24[2];
        if (!v25)
        {
          __break(1u);
          goto LABEL_25;
        }
        unint64_t v16 = v23;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
        if (!isUniquelyReferenced_nonNull_native || (unint64_t)(v25 - 1) > v24[3] >> 1) {
          uint64_t v24 = sub_10015A8E0(isUniquelyReferenced_nonNull_native, v25, 1, v24);
        }
        swift_arrayDestroy();
        uint64_t v27 = v24[2];
        if (!v27)
        {
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        memmove(v24 + 4, v24 + 6, 16 * v27 - 16);
        void v24[2] = v27 - 1;
        *unint64_t v16 = v24;
        ((void (*)(void *, void))v14)(v28, 0);
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v22 = *v15;
        if (!*v15) {
          return result;
        }
      }
      else
      {
        uint64_t result = ((uint64_t (*)(void *, void))v14)(v28, 0);
        uint64_t v22 = *v15;
        if (!*v15) {
          return result;
        }
      }
    }
  }
  return result;
}

void sub_1000595B0(char a1)
{
  sub_100006788((void *)(v1 + 16), *(void *)(v1 + 40));
  if (a1) {
    int64_t v3 = &off_1001C4F98;
  }
  else {
    int64_t v3 = &off_1001C4FC0;
  }
  sub_100042F68((uint64_t)v3);
}

uint64_t sub_1000595FC(int a1)
{
  HIDWORD(v3) = a1;
  LODWORD(v3) = (a1 << 24) + 0x10000000;
  unsigned __int8 v2 = v3 >> 28;
  if (v2 > 8u) {
    char v4 = 36;
  }
  else {
    char v4 = byte_10018AC40[(char)v2];
  }
  sub_100006788((void *)(v1 + 16), *(void *)(v1 + 40));
  sub_100003EB0(&qword_1001DBAC0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = v4;
  sub_100042F68(inited);
  return swift_setDeallocating();
}

uint64_t sub_1000596A0()
{
  sub_100006520(v0 + 64);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000596D8()
{
  sub_100006520(v0 + 16);
  swift_release();
  sub_100006520(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReaderAnalytics()
{
  uint64_t result = qword_1001DB838;
  if (!qword_1001DB838) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005977C()
{
  return swift_initClassMetadata2();
}

uint64_t getEnumTagSinglePayload for ReaderAnalytics.PerformanceField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReaderAnalytics.PerformanceField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100059960);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReaderAnalytics.PerformanceField()
{
  return &type metadata for ReaderAnalytics.PerformanceField;
}

uint64_t getEnumTagSinglePayload for ReaderAnalytics.AnalyticsField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReaderAnalytics.AnalyticsField(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *uint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100059AF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReaderAnalytics.AnalyticsField()
{
  return &type metadata for ReaderAnalytics.AnalyticsField;
}

uint64_t sub_100059B2C()
{
  return sub_100038F5C(&qword_1001DBA78, &qword_1001DBA80);
}

unint64_t sub_100059B6C()
{
  unint64_t result = qword_1001DBA88;
  if (!qword_1001DBA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DBA88);
  }
  return result;
}

uint64_t sub_100059BC0()
{
  return sub_100038F5C(&qword_1001DBA90, &qword_1001DBA98);
}

unint64_t sub_100059C00()
{
  unint64_t result = qword_1001DBAA0;
  if (!qword_1001DBAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DBAA0);
  }
  return result;
}

uint64_t sub_100059C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12[3] = type metadata accessor for DefaultSecureTimeKeeper();
  v12[4] = &off_1001C84C8;
  v12[0] = a1;
  v11[3] = type metadata accessor for CALogger();
  v11[4] = &off_1001C7558;
  v11[0] = a2;
  *(void *)(a3 + 104) = 3;
  *(void *)(a3 + 112) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a3 + 120) = 4;
  *(void *)(a3 + 121) = 0x202020202020202;
  *(void *)(a3 + 127) = 0x202020202020202;
  *(void *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(void *)(a3 + 166) = 0;
  sub_100009300((uint64_t)v12, a3 + 64);
  sub_100009300((uint64_t)v11, (uint64_t)v10);
  unint64_t v6 = sub_100104EA4((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v7 = sub_100104FC0((uint64_t)_swiftEmptyArrayStorage);
  sub_100003EB0(qword_1001DBAD0);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 32) = 0;
  *(void *)(v8 + 16) = v6;
  *(void *)(v8 + 24) = v7;
  *(void *)(a3 + 56) = v8;
  sub_10001F1F0(v10, a3 + 16);
  sub_100006520((uint64_t)v11);
  sub_100006520((uint64_t)v12);
  return a3;
}

uint64_t sub_100059D68(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v20 = &off_1001C84C8;
  v18[0] = a1;
  uint64_t v16 = type metadata accessor for CALogger();
  unint64_t v17 = &off_1001C7558;
  v15[0] = a2;
  type metadata accessor for ReaderAnalytics();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_10001F1A0((uint64_t)v18, v19);
  __chkstk_darwin(v5, v5);
  unint64_t v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_10001F1A0((uint64_t)v15, v16);
  __chkstk_darwin(v9, v9);
  unint64_t v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_100059C54(*v7, *v11, v4);
  sub_100006520((uint64_t)v15);
  sub_100006520((uint64_t)v18);
  return v13;
}

uint64_t sub_100059F3C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 16) == 0;
  return result;
}

unint64_t sub_100059F54(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t result = __chkstk_darwin(v2, v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    char v14 = (char *)_swiftEmptyArrayStorage;
    unint64_t v15 = _swiftEmptyArrayStorage[2];
    if (v15)
    {
LABEL_5:
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(void *)&v14[8 * v16 + 32];
        BOOL v19 = __CFADD__(v17, v18);
        v17 += v18;
        if (v19)
        {
          __break(1u);
          goto LABEL_21;
        }
        ++v16;
      }
      while (v15 != v16);
      unint64_t result = swift_bridgeObjectRelease();
      if ((v17 & 0x8000000000000000) != 0) {
        goto LABEL_22;
      }
      return v17 / v15;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = *(void *)(v3 + 72);
  unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain();
  uint64_t v26 = v11;
  uint64_t v27 = v3 + 16;
  v11(v7, a1 + v9, v2);
  unint64_t v12 = DispatchTime.uptimeNanoseconds.getter();
  int64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
  v25(v7, v2);
  uint64_t v13 = v8 - 1;
  uint64_t v24 = a1;
  if (v8 == 1)
  {
    char v14 = (char *)_swiftEmptyArrayStorage;
LABEL_4:
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v15 = *((void *)v14 + 2);
    if (v15) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  uint64_t v20 = a1 + v10 + v9;
  char v14 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v26(v7, v20, v2);
    unint64_t result = DispatchTime.uptimeNanoseconds.getter();
    unint64_t v21 = result - v12;
    if (result < v12) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v14 = sub_10015A794(0, *((void *)v14 + 2) + 1, 1, v14);
    }
    unint64_t v23 = *((void *)v14 + 2);
    unint64_t v22 = *((void *)v14 + 3);
    if (v23 >= v22 >> 1) {
      char v14 = sub_10015A794((char *)(v22 > 1), v23 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v23 + 1;
    *(void *)&v14[8 * v23 + 32] = v21 / 0xF4240;
    unint64_t v12 = DispatchTime.uptimeNanoseconds.getter();
    v25(v7, v2);
    v20 += v10;
    if (!--v13) {
      goto LABEL_4;
    }
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10005A1F4()
{
  sub_1000F85DC((uint64_t)v13);
  if (v0)
  {
    swift_release();
  }
  else
  {
    sub_1000F9AC4((uint64_t)v11);
    uint64_t v2 = sub_10001F1A0((uint64_t)v13, v14);
    __chkstk_darwin(v2, v2);
    uint64_t v4 = (uint64_t *)&v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v5 + 16))(v4);
    uint64_t v6 = sub_10001F1A0((uint64_t)v11, v12);
    __chkstk_darwin(v6, v6);
    uint64_t v8 = (uint64_t *)&v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    uint64_t v1 = sub_100059D68(*v4, *v8);
    sub_100006520((uint64_t)v11);
    sub_100006520((uint64_t)v13);
    swift_release();
  }
  return v1;
}

uint64_t sub_10005A3E8()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1D) {
    return 29;
  }
  else {
    return v0;
  }
}

unint64_t sub_10005A43C(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001C5378, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return 15;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005A488(uint64_t *a1)
{
  return sub_10006E238(a1, *(void *)(v1 + 16));
}

unint64_t sub_10005A4A4()
{
  unint64_t result = qword_1001DBAC8;
  if (!qword_1001DBAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DBAC8);
  }
  return result;
}

uint64_t sub_10005A4FC()
{
  return swift_initClassMetadata2();
}

unint64_t sub_10005A54C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100003EB0(qword_1001DBB58);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = type metadata accessor for StopWatch();
  sub_10005A840(v1 + *(int *)(v10 + 20), (uint64_t)v9);
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v9, 1, v11) == 1)
  {
    uint64_t v14 = (uint64_t)v9;
LABEL_5:
    sub_10005A8A8(v14);
    return 0;
  }
  unint64_t v15 = DispatchTime.uptimeNanoseconds.getter();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  v16(v9, v11);
  sub_10005A840(v1, (uint64_t)v6);
  if (v13(v6, 1, v11) == 1)
  {
    uint64_t v14 = (uint64_t)v6;
    goto LABEL_5;
  }
  unint64_t v18 = DispatchTime.uptimeNanoseconds.getter();
  v16(v6, v11);
  if (v15 >= v18) {
    return (v15 - v18) / 0xF4240;
  }
  return 0;
}

void sub_10005A71C(uint64_t *a1, uint64_t a2, char a3)
{
  if (a3)
  {
  }
  else
  {
    Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *a1;
    *a1 = 0x8000000000000000;
    sub_100106008((uint64_t)isa, 0xD000000000000015, 0x8000000100193570, isUniquelyReferenced_nonNull_native);
    *a1 = v6;
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for AnalyticsCollector()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for StopWatch()
{
  uint64_t result = qword_1001DBC38;
  if (!qword_1001DBC38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005A840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(qword_1001DBB58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005A8A8(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0(qword_1001DBB58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10005A908(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a4;
  uint64_t v66 = a3;
  uint64_t v61 = a2;
  uint64_t v62 = a1;
  uint64_t v4 = type metadata accessor for URLRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  uint64_t v65 = v5;
  __chkstk_darwin(v4, v6);
  uint64_t v63 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void **)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v70 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100003EB0(qword_1001DBB58);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v56 - v18;
  uint64_t v20 = type metadata accessor for StopWatch();
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v9[7];
  v28(v19, 1, 1, v8);
  v28(v16, 1, 1, v8);
  v28(v24, 1, 1, v8);
  uint64_t v59 = v20;
  uint64_t v29 = (uint64_t)&v24[*(int *)(v20 + 20)];
  v28((char *)v29, 1, 1, v8);
  sub_10005AE10((uint64_t)v19, (uint64_t)v24);
  sub_10005AE10((uint64_t)v16, v29);
  sub_10005AE78((uint64_t)v24, (uint64_t)v27);
  uint64_t v30 = v70;
  static DispatchTime.now()();
  sub_10005A8A8((uint64_t)v27);
  unint64_t v57 = (void (*)(char *, char *, uint64_t))v9[2];
  v57(v27, v30, v8);
  unint64_t v69 = v27;
  uint64_t v58 = v28;
  v28(v27, 0, 1, v8);
  uint64_t v31 = v8;
  os_log_type_t v32 = (void (*)(char *, uint64_t))v9[1];
  uint64_t v33 = (uint64_t)v63;
  uint64_t v60 = v9 + 1;
  uint64_t v56 = v32;
  v32(v30, v31);
  uint64_t v34 = v64;
  uint64_t v35 = *(void *)(v66 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel + 24);
  uint64_t v36 = *(void *)(v66 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel + 32);
  sub_100006788((void *)(v66 + OBJC_IVAR____TtC9SPREngine25MPOCDefaultMonitorBackend_secureChannel), v35);
  uint64_t v37 = v65;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v33, v67, v34);
  uint64_t v38 = v68;
  uint64_t v39 = sub_1000F1EF0(v33, 1, v35, v36);
  if (v38)
  {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v34);
    uint64_t v41 = (uint64_t)v69;
  }
  else
  {
    uint64_t v42 = v39;
    uint64_t v43 = v40;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v34);
    uint64_t v44 = v61;
    uint64_t v45 = *v61;
    unint64_t v46 = v61[1];
    *uint64_t v61 = v42;
    v44[1] = v43;
    sub_10000BF70(v45, v46);
    uint64_t v47 = v70;
    static DispatchTime.now()();
    uint64_t v48 = (uint64_t)v69;
    uint64_t v49 = (uint64_t)&v69[*(int *)(v59 + 20)];
    sub_10005A8A8(v49);
    v57((char *)v49, v47, v31);
    v58((char *)v49, 0, 1, v31);
    v56(v47, v31);
    unint64_t v50 = sub_10005A54C();
    *(&v56 - 3) = (void (*)(char *, uint64_t))__chkstk_darwin(v50, v51);
    *((unsigned char *)&v56 - 16) = v52 & 1;
    uint64_t v54 = (uint64_t *)&v53[4];
    uint64_t v55 = v53 + 8;
    os_unfair_lock_lock(v53 + 8);
    sub_10005AF38(v54);
    os_unfair_lock_unlock(v55);
    uint64_t v41 = v48;
  }
  sub_10005AEDC(v41);
}

uint64_t sub_10005AE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(qword_1001DBB58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005AE78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StopWatch();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005AEDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StopWatch();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10005AF38(uint64_t *a1)
{
  sub_10005A71C(a1, *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_10005AF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_10005AF64()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10005AFA0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10005AFD8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SecureChannel.TimeTokenResponse(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *sub_10005B044(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MPOCMonitorBatch(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MPOCMonitorBatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AnalyticsCollector.Analytics()
{
  return swift_getGenericMetadata();
}

uint64_t *sub_10005B120(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = sub_100003EB0(qword_1001DBB58);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      uint64_t v15 = sub_100003EB0(qword_1001DBB58);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10005B330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

char *sub_10005B45C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100003EB0(qword_1001DBB58);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_100003EB0(qword_1001DBB58);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10005B61C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100003EB0(qword_1001DBB58);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_100003EB0(qword_1001DBB58);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *sub_10005B898(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100003EB0(qword_1001DBB58);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_100003EB0(qword_1001DBB58);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_10005BA58(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100003EB0(qword_1001DBB58);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_100003EB0(qword_1001DBB58);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t sub_10005BCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005BCE8);
}

uint64_t sub_10005BCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(qword_1001DBB58);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10005BD58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005BD6C);
}

uint64_t sub_10005BD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(qword_1001DBB58);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_10005BDE0()
{
  sub_10005BE6C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10005BE6C()
{
  if (!qword_1001DBC48)
  {
    type metadata accessor for DispatchTime();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001DBC48);
    }
  }
}

uint64_t sub_10005BEC4()
{
  unint64_t v0 = sub_100106BE4(&off_1001C3EC0);
  sub_100003EB0(&qword_1001DBC78);
  uint64_t result = swift_arrayDestroy();
  qword_1001E0DA8 = v0;
  return result;
}

unint64_t sub_10005BF1C(uint64_t *a1)
{
  return _sSC21SPRPINControllerErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(*a1);
}

unint64_t _sSC21SPRPINControllerErrorLeV9SPREngineE9errorName4codeSSSoAAV_tFZ_0(uint64_t a1)
{
  if (qword_1001D9058 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1001E0DA8;
  if (*(void *)(qword_1001E0DA8 + 16) && (uint64_t v3 = sub_100161878(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return 0xD000000000000013;
  }
  return v5;
}

unint64_t sub_10005C024(uint64_t a1)
{
  unint64_t result = sub_10005C04C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10005C04C()
{
  unint64_t result = qword_1001D9970;
  if (!qword_1001D9970)
  {
    type metadata accessor for PINControllerError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D9970);
  }
  return result;
}

uint64_t sub_10005C0A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DBC80);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DBC80);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10005C2CC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100003EB0(&qword_1001DBEB8);
  __chkstk_darwin(v6 - 8, v7);
  int v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D9060 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DBC80);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    uint64_t v59 = v3;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_100005EB8(a1, a2, v62);
    uint64_t v3 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "LogSink: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100006680(0, &qword_1001DBEC0);
  sub_100003EB0((uint64_t *)&unk_1001DD3C0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100186100;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10005EE84();
  *(void *)(v14 + 32) = 0xD000000000000044;
  *(void *)(v14 + 40) = 0x8000000100197040;
  int v15 = NSPredicate.init(format:_:)();
  NSString v16 = String._bridgeToObjectiveC()();
  unsigned int v17 = [v15 evaluateWithObject:v16];

  if (!v17) {
    return;
  }
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "SLAM lib started replaying failed c-apdus", v20, 2u);
    swift_slowDealloc();
  }

  v62[0] = a1;
  v62[1] = a2;
  uint64_t v60 = 0x2B645C20786469;
  unint64_t v61 = 0xE700000000000000;
  uint64_t v21 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
  sub_10000A87C();
  StringProtocol.range<A>(of:options:range:locale:)();
  unint64_t v23 = v22;
  char v25 = v24;
  sub_10005F4F8((uint64_t)v9, &qword_1001DBEB8);
  swift_bridgeObjectRelease();
  if (v25) {
    return;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v59 = v3;
    uint64_t v29 = swift_slowAlloc();
    int v57 = v28;
    uint64_t v30 = (uint8_t *)v29;
    uint64_t v58 = swift_slowAlloc();
    v62[0] = v58;
    uint64_t v56 = v30;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v55 = v30 + 4;
    String.subscript.getter();
    uint64_t v31 = static String._fromSubstring(_:)();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v60 = sub_100005EB8(v31, v33, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v3 = v59;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v57, "found index: %s", v56, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v23 >> 14 < (unint64_t)String.index(_:offsetBy:)() >> 14)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v34 = String.subscript.getter();
  uint64_t v38 = v37;
  if (!((v34 ^ v35) >> 14))
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v39 = v34;
  uint64_t v40 = v35;
  uint64_t v41 = v36;
  uint64_t v42 = sub_1000EC22C(v34, v35, v36, v37, 10);
  if ((v43 & 0x100) != 0)
  {
    uint64_t v44 = sub_10009412C(v39, v40, v41, v38, 10);
    char v47 = v46;
    swift_bridgeObjectRelease();
    if (v47) {
      return;
    }
  }
  else
  {
    uint64_t v44 = (unsigned __int8 *)v42;
    char v45 = v43;
    swift_bridgeObjectRelease();
    if (v45) {
      return;
    }
  }
  uint64_t v48 = v3;
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 134217984;
    v62[0] = (uint64_t)v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "%ld of c-apdus will replay", v51, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v52 = *(void *)(v48 + 80);
  BOOL v53 = __OFADD__(v52, v44);
  uint64_t v54 = &v44[v52];
  if (v53) {
    __break(1u);
  }
  else {
    *(void *)(v48 + 80) = v54;
  }
}

uint64_t sub_10005CA20(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_1001D9060 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100003E78(v10, (uint64_t)qword_1001DBC80);
  sub_1000065D0(a1, a2);
  sub_1000065D0(a1, a2);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v36 = a3;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    Swift::String v14 = Data.hexString()();
    sub_100005EB8(v14._countAndFlagsBits, (unint64_t)v14._object, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(a1, a2);
    sub_100006628(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "C-APDU: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v36;
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(a1, a2);
    sub_100006628(a1, a2);
  }

  unint64_t v15 = a4 >> 62;
  sub_1000065D0(a3, a4);
  sub_1000065D0(a3, a4);
  NSString v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    Swift::String v19 = Data.hexString()();
    sub_100005EB8(v19._countAndFlagsBits, (unint64_t)v19._object, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006628(a3, a4);
    sub_100006628(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "R-APDU: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v15 = a4 >> 62;
    swift_slowDealloc();
  }
  else
  {
    sub_100006628(a3, a4);
    sub_100006628(a3, a4);
  }

  switch((int)v15)
  {
    case 1:
      LODWORD(v20) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_44;
      }
      uint64_t v20 = (int)v20;
LABEL_14:
      if (v20 < 2) {
        goto LABEL_29;
      }
      if (v15)
      {
        if (v15 == 1) {
          uint64_t v24 = a3 >> 32;
        }
        else {
          uint64_t v24 = *(void *)(a3 + 24);
        }
      }
      else
      {
        uint64_t v24 = BYTE6(a4);
      }
      if (__OFSUB__(v24, 2)) {
        goto LABEL_42;
      }
      __int16 v25 = Data.subscript.getter();
      if (v15)
      {
        if (v15 == 1) {
          uint64_t v26 = a3 >> 32;
        }
        else {
          uint64_t v26 = *(void *)(a3 + 24);
        }
      }
      else
      {
        uint64_t v26 = BYTE6(a4);
      }
      if (__OFSUB__(v26, 1)) {
        goto LABEL_43;
      }
      unsigned __int16 v27 = Data.subscript.getter() | (unsigned __int16)(v25 << 8);
      if (v27 != 36864)
      {
        uint64_t v28 = v5[9];
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v37 = v5[11];
        v5[11] = 0x8000000000000000;
        sub_100106400(v27, v28, isUniquelyReferenced_nonNull_native);
        v5[11] = v37;
        swift_bridgeObjectRelease();
        swift_endAccess();
      }
LABEL_29:
      uint64_t v30 = v5[9];
      uint64_t v31 = v30 + 1;
      if (__OFADD__(v30, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      v5[9] = v31;
      uint64_t v32 = 100 * v31;
      if ((unsigned __int128)(v31 * (__int128)100) >> 64 != (100 * v31) >> 63)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v33 = v5[10];
      if (!v33)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v32 == 0x8000000000000000 && v33 == -1)
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        JUMPOUT(0x10005CF34);
      }
      uint64_t result = v32 / v33;
      if (v32 / v33 <= 100)
      {
        unint64_t v35 = (uint64_t (*)(void))v5[7];
        if (v35) {
          return v35();
        }
      }
      return result;
    case 2:
      uint64_t v22 = *(void *)(a3 + 16);
      uint64_t v21 = *(void *)(a3 + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_14;
      }
      goto LABEL_45;
    case 3:
      goto LABEL_29;
    default:
      uint64_t v20 = BYTE6(a4);
      goto LABEL_14;
  }
}

void sub_10005CF44(uint64_t a1)
{
  char v4 = *(void (**)(void))(v1 + 56);
  if (v4) {
    v4(0);
  }
  uint64_t v6 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  switch(*(unsigned char *)(a1 + 32))
  {
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10005E7FC(v6, v5);
      if (!v2) {
        sub_10005D4D4(v6, v5, v8, v7);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    case 2:
      sub_10005E40C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 2u);
      sub_10005E7FC(v6, v5);
      if (!v2) {
        sub_10005D150(v6, v5, v8);
      }
      uint64_t v9 = v6;
      uint64_t v10 = v5;
      uint64_t v11 = v8;
      uint64_t v12 = v7;
      unsigned __int8 v13 = 2;
      goto LABEL_14;
    case 3:
      swift_bridgeObjectRetain();
      sub_10005DBD8(v6, v5);
      uint64_t v9 = v6;
      uint64_t v10 = v5;
      uint64_t v11 = v8;
      uint64_t v12 = v7;
      unsigned __int8 v13 = 3;
      goto LABEL_14;
    case 4:
      sub_10005DF2C(*(void *)a1);
      return;
    default:
      sub_10005E40C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 0);
      sub_10005E7FC(v6, v5);
      if (!v2) {
        sub_10005D894(v6, v5);
      }
      uint64_t v9 = v6;
      uint64_t v10 = v5;
      uint64_t v11 = v8;
      uint64_t v12 = v7;
      unsigned __int8 v13 = 0;
LABEL_14:
      sub_10005E4C0(v9, v10, v11, v12, v13);
      return;
  }
}

void sub_10005D150(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_1001D9060 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100003E78(v7, (uint64_t)qword_1001DBC80);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_bridgeObjectRetain();
    sub_100005EB8(a1, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "SLAMSwift.performScript(path: %s, scriptID: %llu)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = self;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 PerformScript:a3 sefwPath:v12 seHandle:v3 logSink:v3];

  if (v13)
  {
    Swift::String v14 = v13;
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v17 = 138412290;
      Swift::String v19 = v14;
      uint64_t v20 = v14;
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v22 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v21;
      Swift::String v14 = v20;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not perform script, error: %@", v17, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v15 = v14;
    }

    swift_willThrow();
  }
}

void sub_10005D4D4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (qword_1001D9060 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DBC80);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    sub_100005EB8(a1, a2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100005EB8(a3, a4, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SLAMSwift.performScript(path: %s, name: %s)", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  NSString v12 = self;
  NSString v13 = String._bridgeToObjectiveC()();
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v12 PerformScriptWithName:v13 sefwPath:v14 seHandle:v23 logSink:v23];

  if (v15)
  {
    os_log_type_t v16 = v15;
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      Swift::String v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v19 = 138412290;
      uint64_t v21 = v16;
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v24 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v20 = v22;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Could not perform script, error: %@", v19, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v17 = v16;
    }

    swift_willThrow();
  }
}

void sub_10005D894(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1001D9060 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DBC80);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = a1;
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 136315138;
    swift_bridgeObjectRetain();
    sub_100005EB8(v9, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SLAMSwift.performScript(path: %s)", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v2;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = self;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 PerformOnlyScriptInSEFW:v12 seHandle:v3 logSink:v3];

  if (v13)
  {
    NSString v14 = v13;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v17 = 138412290;
      Swift::String v19 = v14;
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v21 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v18 = v20;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not perform script, error: %@", v17, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v15 = v14;
    }

    swift_willThrow();
  }
}

void sub_10005DBD8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1001D9060 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100003E78(v6, (uint64_t)qword_1001DBC80);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = a1;
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v10 = 136315138;
    swift_bridgeObjectRetain();
    sub_100005EB8(v9, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SLAMSwift.performScript(name: %s)", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v2;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100006680(0, &qword_1001DBEB0);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [ObjCClassFromMetadata PerformScriptWithName:v12 seHandle:v3 logSink:v3];

  if (v13)
  {
    NSString v14 = v13;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v17 = 138412290;
      Swift::String v19 = v14;
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v21 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v18 = v20;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not perform script, error: %@", v17, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v15 = v14;
    }

    swift_willThrow();
  }
}

void sub_10005DF2C(uint64_t a1)
{
  if (qword_1001D9060 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100003E78(v3, (uint64_t)qword_1001DBC80);
  char v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SLAMSwift.performScript(scriptID: %llu)", v6, 0xCu);
    swift_slowDealloc();
  }

  sub_100006680(0, &qword_1001DBEB0);
  id v7 = [(id)swift_getObjCClassFromMetadata() PerformScript:a1 seHandle:v1 logSink:v1];
  if (v7)
  {
    os_log_type_t v8 = v7;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      NSString v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      id v13 = v8;
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v12 = v14;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Could not perform script, error: %@", v11, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v9 = v8;
    }

    swift_willThrow();
  }
}

uint64_t sub_10005E1B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [a1 scriptName];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v10 == a2 && v12 == a3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = 0;
    if ((v14 & 1) == 0) {
      return v15;
    }
  }
  os_log_type_t v16 = (void **)(a4 + 16);
  uint64_t v15 = 1;
  swift_beginAccess();
  os_log_type_t v17 = *v16;
  *os_log_type_t v16 = a1;

  id v18 = a1;
  return v15;
}

uint64_t sub_10005E2A8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t sub_10005E300(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return 0;
}

uint64_t sub_10005E3A0()
{
  sub_100006520(v0 + 16);
  sub_100057838(*(void *)(v0 + 56));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SLAMSwift()
{
  return self;
}

uint64_t sub_10005E40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 >= 2 && a5 != 0)
  {
    if (a5 != 1) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for SLAMScript(uint64_t a1)
{
  sub_10005E4C0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005E4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 >= 2 && a5 != 0)
  {
    if (a5 != 1) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SLAMScript(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  sub_10005E40C(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SLAMScript(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  sub_10005E40C(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  sub_10005E4C0(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v14;
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SLAMScript(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SLAMScript(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  sub_10005E4C0(v5, v6, v7, v8, v10);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SLAMScript(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SLAMScript(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SLAMScript()
{
  return &type metadata for SLAMScript;
}

uint64_t sub_10005E7CC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_10005E7FC(uint64_t a1, unint64_t a2)
{
  id v4 = [self defaultManager];
  NSString v5 = String._bridgeToObjectiveC()();
  unsigned __int8 v6 = [v4 isReadableFileAtPath:v5];

  if (v6)
  {
    if (qword_1001D9060 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100003E78(v7, (uint64_t)qword_1001DBC80);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unsigned __int8 v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v10 = 136315138;
      swift_bridgeObjectRetain();
      sub_100005EB8(a1, a2, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s is readable", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    sub_10002A974(2027, 0, 0, 0);
    swift_willThrow();
  }
}

uint64_t sub_10005EA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  NSString v5 = (id *)(v4 + 16);
  unsigned __int8 v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  uint64_t v8 = (void *)swift_allocObject();
  long long v8[2] = a1;
  v8[3] = a2;
  v8[4] = v4;
  aBlock[4] = sub_10005F5CC;
  void aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10005E2A8;
  aBlock[3] = &unk_1001C83E8;
  os_log_type_t v9 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  LODWORD(v6) = [v6 InspectSEFW:v7 closure:v9 error:aBlock];
  _Block_release(v9);

  id v10 = aBlock[0];
  if (v6)
  {
    swift_beginAccess();
    if (*v5)
    {
      id v11 = *v5;
      swift_release();
      return (uint64_t)v11;
    }
    sub_10002A974(2027, 0x746F6E206F666E69, (void *)0xEE00646E756F6620, 0);
  }
  else
  {
    unsigned __int8 v13 = v10;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  return swift_release();
}

void *sub_10005EC70()
{
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + 2;
  uint64_t v2 = self;
  NSString v3 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10005EE64;
  void aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10005E2A8;
  aBlock[3] = &unk_1001C8370;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  LOBYTE(v2) = [(id)v2 InspectSEFW:v3 closure:v4 error:aBlock];
  _Block_release(v4);

  id v5 = aBlock[0];
  if (v2)
  {
    swift_beginAccess();
    uint64_t v1 = (void *)v0[2];
    swift_bridgeObjectRetain();
  }
  else
  {
    unsigned __int8 v6 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_release();
  return v1;
}

uint64_t sub_10005EE2C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005EE64(void *a1)
{
  return sub_10005E300(a1, v1);
}

uint64_t sub_10005EE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005EE7C()
{
  return swift_release();
}

unint64_t sub_10005EE84()
{
  unint64_t result = qword_1001DBEC8;
  if (!qword_1001DBEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DBEC8);
  }
  return result;
}

void sub_10005EED8(uint64_t *a1@<X8>)
{
  if (qword_1001D9348 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1000F4BF4(xmmword_1001E1180, *((uint64_t *)&xmmword_1001E1180 + 1), 0);
  if (!v2)
  {
    if (qword_1001D9060 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100003E78(v10, (uint64_t)qword_1001DBC80);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unsigned __int8 v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "applet cannot be found", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unsigned int v22 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    goto LABEL_25;
  }
  uint64_t v3 = v2;
  if (!*(void *)(v2 + 16) || (unint64_t v4 = sub_10000C4B0(0x746169636F737361, 0xED00004453536465), (v5 & 1) == 0))
  {
    long long v28 = 0u;
    long long v29 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_100006570(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v28);
  swift_bridgeObjectRelease();
  if (!*((void *)&v29 + 1))
  {
LABEL_12:
    sub_10005F4F8((uint64_t)&v28, &qword_1001DD3F0);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) != 0 && v26 == 0xD000000000000014 && v27 == 0x8000000100197090)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_13:
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    uint64_t v7 = String.init(cString:)();
    uint64_t v9 = v14;
    id v23 = (id)sub_10005EA30(v7, v14);
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v7 = String.init(cString:)();
  uint64_t v9 = v8;
  uint64_t v20 = (void *)sub_10005EA30(v7, v8);
  unsigned int v21 = [v20 apduCount];
  unsigned int v22 = [v20 scriptType];
  id v23 = [v20 scriptName];
  if (v23) {
    goto LABEL_24;
  }
  __break(1u);
LABEL_23:
  uint64_t v20 = v23;
  unsigned int v21 = [v23 apduCount];
  unsigned int v22 = [v20 scriptType];
  id v23 = [v20 scriptName];
  if (v23)
  {
LABEL_24:
    uint64_t v24 = v23;
    uint64_t v16 = v21 + 4;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v25;

    uint64_t v17 = 257;
    uint64_t v15 = 3;
LABEL_25:
    *a1 = v7;
    a1[1] = v9;
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = v15;
    a1[5] = v16;
    a1[6] = v22;
    a1[7] = 0;
    a1[8] = v17;
    a1[9] = v18;
    a1[10] = v19;
    return;
  }
  __break(1u);
}

uint64_t sub_10005F4F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003EB0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10005F554()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005F58C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005F5CC(void *a1)
{
  return sub_10005E1B4(a1, v1[2], v1[3], v1[4]);
}

uint64_t destroy for SLAMScript.SEFWDetails(uint64_t a1)
{
  return sub_10005E4C0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10005E40C(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_10005E40C(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_10005E4C0(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SLAMScript.SEFWDetails(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_10005E4C0(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SLAMScript.SEFWDetails(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SLAMScript.SEFWDetails(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10005F7B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_10005F7BC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SLAMScript.SEFWDetails()
{
  return &type metadata for SLAMScript.SEFWDetails;
}

uint64_t sub_10005F7E0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DBED0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DBED0);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10005F8A8(void *a1, uint64_t a2, char a3)
{
  uint64_t v6 = self;
  sub_100006788(a1, a1[3]);
  unsigned int v7 = [v6 isValidJSONObject:_bridgeAnythingToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (!v7)
  {
    if (qword_1001D9068 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100003E78(v10, (uint64_t)qword_1001DBED0);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    uint64_t v13 = v12;
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v13, "Object is not a valid JSON", v14, 2u);
      swift_slowDealloc();
    }

    sub_10002B1D4(15000, 0, 0, 0);
    goto LABEL_13;
  }
  sub_100006788(a1, a1[3]);
  uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v18 = 0;
  if (a3) {
    id v9 = [v6 dataWithJSONObject:v8 options:0 error:&v18];
  }
  else {
    id v9 = [v6 dataWithJSONObject:v8 options:a2 error:&v18];
  }
  id v15 = v9;
  swift_unknownObjectRelease();
  id v16 = v18;
  if (!v15)
  {
    uint64_t v13 = (uint64_t)v16;
    _convertNSErrorToError(_:)();

LABEL_13:
    swift_willThrow();
    return v13;
  }
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v13;
}

uint64_t sub_10005FB08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DBEE8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DBEE8);
  if (qword_1001D9280 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10A0);
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall SecureElementTransceiver.cancelPIN()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (qword_1001D9070 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DBEE8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unsigned int v7 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)unsigned int v7 = 136315138;
    unint64_t v34 = v7 + 4;
    uint64_t v8 = sub_10006BD14(0xF480uLL, 0, 0xC000000000000000, 0);
    uint64_t v9 = v2;
    unint64_t v11 = v10;
    Swift::String v12 = Data.hexString()();
    unint64_t v13 = v11;
    uint64_t v2 = v9;
    sub_100006628(v8, v13);
    v36[0] = sub_100005EB8(v12._countAndFlagsBits, (unint64_t)v12._object, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "C-APDU (CANCEL): %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000CF8C8(62592, 0, 0xC000000000000000, 0, 1, v3, v2, (uint64_t)v36);
  uint64_t v14 = v36[0];
  unint64_t v15 = v36[1];
  uint64_t v16 = v36[3];
  unint64_t v17 = v36[4];
  sub_100038DA0((uint64_t)v36, (uint64_t)v37);
  if ((unint64_t)v37[1] >> 60 != 15)
  {
    int v18 = v38;
    sub_1000065D0(v14, v15);
    sub_1000065D0(v16, v17);
    sub_1000065D0(v14, v15);
    sub_1000065D0(v16, v17);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unsigned int v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)unsigned int v21 = 136315138;
      Swift::String v22 = Data.hexString()();
      sub_100005EB8(v22._countAndFlagsBits, (unint64_t)v22._object, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100038E5C((uint64_t)v36);
      sub_100038E5C((uint64_t)v36);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "R-APDU: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100038E5C((uint64_t)v36);
      sub_100038E5C((uint64_t)v36);
    }

    id v23 = Logger.logObject.getter();
    if (v18 == 36864)
    {
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "cleared persistent storage in SE", v25, 2u);
        swift_slowDealloc();
      }

      if (qword_1001D9410 != -1) {
        swift_once();
      }
      uint64_t v26 = static GlobalState.shared;
      [*(id *)(static GlobalState.shared + 72) lock:v34];
      uint64_t v27 = *(void *)(v26 + 96);
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (v28)
      {
        __break(1u);
      }
      else
      {
        *(void *)(v26 + 96) = v29;
        while (*(uint64_t *)(v26 + 88) > 0 || *(unsigned char *)(v26 + 80) == 1)
          [*(id *)(v26 + 72) wait];
        uint64_t v30 = *(void *)(v26 + 96);
        BOOL v28 = __OFSUB__(v30, 1);
        uint64_t v31 = v30 - 1;
        if (!v28)
        {
          *(void *)(v26 + 96) = v31;
          *(unsigned char *)(v26 + 80) = 1;
          [*(id *)(v26 + 72) unlock];
          *(unsigned char *)(v26 + 33) = 0;
          sub_1001661D8();
          [*(id *)(v26 + 72) lock];
          *(unsigned char *)(v26 + 80) = 0;
          [*(id *)(v26 + 72) broadcast];
          [*(id *)(v26 + 72) unlock];
LABEL_23:
          sub_100038E5C((uint64_t)v36);
          return;
        }
      }
      __break(1u);
    }
    else
    {
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v32, "failed to cleared persistent storage in SE", v33, 2u);
        swift_slowDealloc();

        goto LABEL_23;
      }
      sub_100038E5C((uint64_t)v36);
    }
  }
}

uint64_t sub_100060138()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DBF00);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DBF00);
  if (qword_1001D9268 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1058);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100060200(uint64_t a1)
{
  return sub_100060250(a1, 0xD000000000000014, 0x80000001001971C0, &qword_1001E0DB0, (unint64_t *)algn_1001E0DB8);
}

uint64_t sub_100060228(uint64_t a1)
{
  return sub_100060250(a1, 0xD000000000000015, 0x8000000100197140, &qword_1001E0DC0, (unint64_t *)algn_1001E0DC8);
}

uint64_t sub_100060250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v12 = String.data(using:allowLossyConversion:)();
  unint64_t v14 = v13;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if (v14 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a4 = v12;
    *a5 = v14;
  }
  return result;
}

uint64_t sub_100060364(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v6 = a1 & 1;
  *(unsigned char *)(v3 + 16) = a1 & 1;
  uint64_t v7 = (void *)(v3 + 24);
  sub_100009300(a2, (uint64_t)v7);
  sub_100009300(a3, v4 + 64);
  uint64_t v8 = *(void *)(v4 + 48);
  uint64_t v9 = *(void *)(v4 + 56);
  sub_100006788(v7, v8);
  if (qword_1001D9080 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1001E0DB0;
  uint64_t v11 = *(void *)algn_1001E0DB8;
  sub_100003EB0(&qword_1001D8778);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100186100;
  *(unsigned char *)(v12 + 32) = v6;
  uint64_t v13 = sub_10012CB58(v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v9 + 40))(v10, v11, v13, v15, v8, v9);
  sub_100006628(v13, v15);
  sub_100006520(a3);
  sub_100006520(a2);
  return v4;
}

void sub_100060578(char a1)
{
  uint64_t v2 = v1;
  if (qword_1001D9078 != -1) {
    swift_once();
  }
  int v4 = a1 & 1;
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001DBF00);
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    sub_100005EB8(0x6F4D686374697773, 0xEF293A6F74286564, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2080;
    if (a1) {
      uint64_t v9 = 0x656E696C66666FLL;
    }
    else {
      uint64_t v9 = 0x656E696C6E6FLL;
    }
    if (a1) {
      unint64_t v10 = 0xE700000000000000;
    }
    else {
      unint64_t v10 = 0xE600000000000000;
    }
    sub_100005EB8(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "DefaultSecureTimeKeeper.%s, mode: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (((v4 == 0) ^ *(unsigned __int8 *)(v2 + 16)))
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v26 = v14;
      if (v4) {
        uint64_t v15 = 0x656E696C66666FLL;
      }
      else {
        uint64_t v15 = 0x656E696C6E6FLL;
      }
      if (v4) {
        unint64_t v16 = 0xE700000000000000;
      }
      else {
        unint64_t v16 = 0xE600000000000000;
      }
      sub_100005EB8(v15, v16, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Already in %s mode.", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    *(unsigned char *)(v2 + 16) = v4;
    unint64_t v17 = (void *)(v2 + 24);
    uint64_t v19 = *(void *)(v2 + 48);
    uint64_t v18 = *(void *)(v2 + 56);
    sub_100006788(v17, v19);
    if (qword_1001D9080 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_1001E0DB0;
    uint64_t v21 = *(void *)algn_1001E0DB8;
    sub_100003EB0(&qword_1001D8778);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_100186100;
    *(unsigned char *)(v22 + 32) = v4;
    uint64_t v23 = sub_10012CB58(v22);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v18 + 40))(v20, v21, v23, v25, v19, v18);
    sub_100006628(v23, v25);
  }
}

uint64_t sub_100060998@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D9078 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DBF00);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "getTimeToken()", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = v2[6];
  uint64_t v9 = v2[7];
  sub_100006788(v2 + 3, v8);
  if (qword_1001D9088 != -1) {
    swift_once();
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 32))(qword_1001E0DC0, *(void *)algn_1001E0DC8, v8, v9);
  unint64_t v12 = v11;
  type metadata accessor for JSONDecoder();
  sub_100062218();
  default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
  static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
  sub_100006628(v10, v12);
  swift_bridgeObjectRelease();
  uint64_t v15 = v2 + 8;
  uint64_t v17 = v2[11];
  uint64_t v16 = v2[12];
  sub_100006788(v15, v17);
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v17, v16);
  if (LODWORD(__src[1]) == v18)
  {
    sub_1000EE43C(*(uint64_t *)&__src[0], *((uint64_t *)&__src[0] + 1), __src);
    memcpy(v22, __src, 0x110uLL);
    BitString.init(data:unusedBits:)(v22);
    uint64_t v13 = v22;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RTC was reset since token issuance", v21, 2u);
      swift_slowDealloc();
    }

    sub_100062184(__src);
    uint64_t v13 = __src;
  }
  sub_1000621B0((uint64_t)v13, (uint64_t)v23);
  return sub_1000621B0((uint64_t)v23, a1);
}

void *sub_100060E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = v5;
  os_log_type_t v7 = v4;
  if (qword_1001D9078 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100003E78(v12, (uint64_t)qword_1001DBF00);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  uint64_t v20 = a1;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315650;
    sub_100005EB8(0xD000000000000021, 0x8000000100197190, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    Swift::String v16 = String.redactedToken()();
    sub_100005EB8(v16._countAndFlagsBits, (unint64_t)v16._object, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s(rawToken: %s, rtcResetCount: %u)", (uint8_t *)v15, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v5;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v17 = v7[11];
  uint64_t v18 = v7[12];
  sub_100006788(v7 + 8, v17);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18) == a3)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1000EE43C(v20, a2, __src);
    if (!v6)
    {
      swift_bridgeObjectRetain();
      sub_100061900(v20, a2, a3);
      swift_bridgeObjectRelease();
      return memcpy(a4, __src, 0x110uLL);
    }
  }
  else
  {
    sub_10002A180(10007, 0xD000000000000026, (void *)0x8000000100197160, 0);
    return (void *)swift_willThrow();
  }
  return result;
}

void sub_100061180()
{
  uint64_t v1 = v0;
  if (qword_1001D9078 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DBF00);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deleteState()", v5, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + 16))
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Not deleting state, mode is offline", v7, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v9 = *(void *)(v1 + 56);
    sub_100006788((void *)(v1 + 24), v8);
    if (qword_1001D9088 != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 48))(qword_1001E0DC0, *(void *)algn_1001E0DC8, v8, v9);
  }
}

uint64_t sub_1000614E8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  os_log_type_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029714(a1, (void *)(v1 + 64));
  sub_1000EC7BC((uint64_t)v7);
  char v13 = DateInterval.contains(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return 1;
  }
  else
  {
    if (qword_1001D9078 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100003E78(v15, (uint64_t)qword_1001DBF00);
    Swift::String v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Time token outside of validity period", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return 0;
  }
}

uint64_t sub_100061900(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for JSONEncoder.OutputFormatting();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  char v13 = (char *)&v23[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  v23[0] = a1;
  v23[1] = a2;
  int v24 = a3;
  sub_100061FCC();
  default argument 1 of static JSONEncoder.encodeClean<A>(_:outputFormatting:)();
  static JSONEncoder.encodeClean<A>(_:outputFormatting:)((uint64_t)v23, (uint64_t)v13);
  if (v4) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  uint64_t v17 = v14;
  unint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v19 = v5 + 3;
  uint64_t v21 = v5[6];
  uint64_t v20 = v5[7];
  sub_100006788(v19, v21);
  if (qword_1001D9088 != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t, void, uint64_t, unint64_t, uint64_t, uint64_t))(v20 + 40))(qword_1001E0DC0, *(void *)algn_1001E0DC8, v17, v18, v21, v20);
  return sub_100006628(v17, v18);
}

uint64_t sub_100061AF0(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v6 = sub_100003EB0(&qword_1001DC060);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000627CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100061C60()
{
  if (*v0) {
    return 0x7465736552637472;
  }
  else {
    return 0x6E656B6F54776172;
  }
}

uint64_t sub_100061CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100062820(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100061CD0(uint64_t a1)
{
  unint64_t v2 = sub_1000627CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061D0C(uint64_t a1)
{
  unint64_t v2 = sub_1000627CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100061D48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100062938(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100061D78(void *a1)
{
  return sub_100061AF0(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

BOOL sub_100061D98(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

uint64_t sub_100061DF8()
{
  sub_100006520(v0 + 24);
  sub_100006520(v0 + 64);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DefaultSecureTimeKeeper()
{
  return self;
}

uint64_t sub_100061E5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  sub_100006788((void *)(*(void *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t sub_100061EBC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  sub_100006788((void *)(*(void *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_100061F1C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  sub_100006788((void *)(*(void *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_100061F74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  sub_100006788((void *)(*(void *)v0 + 64), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

unint64_t sub_100061FCC()
{
  unint64_t result = qword_1001DC050;
  if (!qword_1001DC050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC050);
  }
  return result;
}

uint64_t sub_100062020(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 248);
  uint64_t v4 = *(void *)(a1 + 240);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006628(v4, v3);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10006212C()
{
  unint64_t result = qword_1001D98E8;
  if (!qword_1001D98E8)
  {
    _s3__C4CodeOMa_8(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001D98E8);
  }
  return result;
}

double sub_100062184(_OWORD *a1)
{
  double result = 0.0;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1000621B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0(&qword_1001DA130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100062218()
{
  unint64_t result = qword_1001DC058;
  if (!qword_1001DC058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC058);
  }
  return result;
}

uint64_t sub_10006226C(uint64_t a1)
{
  sub_1000F7B54((uint64_t)v25);
  if (v1)
  {
    swift_release();
    return a1;
  }
  uint64_t v3 = v26;
  uint64_t v4 = v27;
  sub_100006788(v25, v26);
  sub_100021C74(v3, v4);
  uint64_t v5 = v23;
  uint64_t v6 = v24;
  sub_100006788(v22, v23);
  if (qword_1001D9080 != -1) {
    swift_once();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 32))(qword_1001E0DB0, *(void *)algn_1001E0DB8, v5, v6);
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      uint64_t v11 = (int)v7;
      uint64_t v12 = v7 >> 32;
      goto LABEL_10;
    case 2uLL:
      uint64_t v11 = *(void *)(v7 + 16);
      uint64_t v12 = *(void *)(v7 + 24);
LABEL_10:
      if (v11 != v12) {
        goto LABEL_11;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_13;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_13;
      }
LABEL_11:
      int v13 = Data.subscript.getter();
      if (v13 != 1)
      {
        if (v13)
        {
LABEL_13:
          if (qword_1001D9078 != -1) {
            swift_once();
          }
          uint64_t v14 = type metadata accessor for Logger();
          sub_100003E78(v14, (uint64_t)qword_1001DBF00);
          char v15 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v15, v16))
          {
            sub_100006628(v10, v9);

            goto LABEL_19;
          }
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not load MPOCOperation mode from persistence. Using .online", v17, 2u);
          swift_slowDealloc();
        }
        sub_100006628(v10, v9);
LABEL_19:
        char v18 = 0;
        goto LABEL_20;
      }
      sub_100006628(v10, v9);
      char v18 = 1;
LABEL_20:
      sub_100009300((uint64_t)v22, (uint64_t)v21);
      sub_1000FCF84((uint64_t)v20);
      type metadata accessor for DefaultSecureTimeKeeper();
      a1 = swift_allocObject();
      sub_100060364(v18, (uint64_t)v21, (uint64_t)v20);
      swift_release();
      sub_100006520((uint64_t)v22);
      sub_100006520((uint64_t)v25);
      return a1;
  }
}

uint64_t destroy for DefaultSecureTimeKeeper.State()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s9SPREngine23DefaultSecureTimeKeeperC5StateVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DefaultSecureTimeKeeper.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for DefaultSecureTimeKeeper.State(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DefaultSecureTimeKeeper.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultSecureTimeKeeper.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultSecureTimeKeeper.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultSecureTimeKeeper.State()
{
  return &type metadata for DefaultSecureTimeKeeper.State;
}

unint64_t sub_1000627CC()
{
  unint64_t result = qword_1001DC068;
  if (!qword_1001DC068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC068);
  }
  return result;
}

uint64_t sub_100062820(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E656B6F54776172 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7465736552637472 && a2 == 0xED0000746E756F43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100062938(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001DC070);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1[4];
  sub_100006788(a1, a1[3]);
  sub_1000627CC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100006520((uint64_t)a1);
  }
  else
  {
    v10[15] = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v10[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100006520((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unsigned char *storeEnumTagSinglePayload for DefaultSecureTimeKeeper.State.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062BF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultSecureTimeKeeper.State.CodingKeys()
{
  return &type metadata for DefaultSecureTimeKeeper.State.CodingKeys;
}

unint64_t sub_100062C2C()
{
  unint64_t result = qword_1001DC078;
  if (!qword_1001DC078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC078);
  }
  return result;
}

unint64_t sub_100062C84()
{
  unint64_t result = qword_1001DC080;
  if (!qword_1001DC080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC080);
  }
  return result;
}

unint64_t sub_100062CDC()
{
  unint64_t result = qword_1001DC088;
  if (!qword_1001DC088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC088);
  }
  return result;
}

uint64_t sub_100062D30(uint64_t a1)
{
  long long v21 = xmmword_100189A30;
  uint64_t v2 = 100000000000;
  uint64_t v3 = 12;
  while (1)
  {
    unint64_t v4 = a1 / v2;
    sub_100003EB0(&qword_1001D8778);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100186100;
    if (a1 / v2 < 0 || v4 >= 0x100) {
      break;
    }
    uint64_t v6 = v5;
    *(unsigned char *)(v5 + 32) = v4;
    uint64_t v7 = sub_100003EB0(&qword_1001DC0A8);
    v20[3] = v7;
    v20[4] = sub_1000635F8();
    v20[0] = v6;
    uint64_t v8 = sub_100006788(v20, v7);
    uint64_t v9 = *v8;
    size_t v10 = *(void *)(*v8 + 16);
    if (v10)
    {
      if (v10 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v19 = v10;
        memcpy(__dst, (const void *)(v9 + 32), v10);
        uint64_t v13 = *(void *)__dst;
        unint64_t v14 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v19 << 48);
        swift_bridgeObjectRetain();
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v11 = __DataStorage.init(bytes:length:)();
        uint64_t v12 = v11;
        if (v10 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v13 = swift_allocObject();
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 24) = v10;
          unint64_t v14 = v12 | 0x8000000000000000;
        }
        else
        {
          uint64_t v13 = v10 << 32;
          unint64_t v14 = v11 | 0x4000000000000000;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = 0;
      unint64_t v14 = 0xC000000000000000;
    }
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v20);
    Data.append(_:)();
    sub_100006628(v13, v14);
    if (!--v3) {
      return v21;
    }
    a1 %= v2;
    unint64_t v15 = v2 + 19;
    v2 /= 10;
    if (a1 == 0x8000000000000000 && v15 < 0xA)
    {
      __break(1u);
      return v21;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100063000(uint64_t a1, unint64_t a2)
{
  long long v59 = xmmword_100189A30;
  unint64_t v2 = a2 >> 62;
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      char v5 = BYTE4(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_7;
      }
      __break(1u);
LABEL_6:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      char v5 = v6 - v7;
      if (v8) {
        goto LABEL_66;
      }
LABEL_7:
      if (v5) {
        return 0;
      }
      if (v2)
      {
        if (v2 == 1)
        {
          if (__OFSUB__(HIDWORD(a1), a1))
          {
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
          }
          uint64_t v9 = HIDWORD(a1) - (int)a1;
        }
        else
        {
          uint64_t v11 = *(void *)(a1 + 16);
          uint64_t v10 = *(void *)(a1 + 24);
          uint64_t v9 = v10 - v11;
          if (__OFSUB__(v10, v11)) {
            goto LABEL_68;
          }
        }
      }
      else
      {
        uint64_t v9 = BYTE6(a2);
      }
      if (v9 < 1) {
        return 0;
      }
      uint64_t v12 = 0;
      uint64_t v47 = a1 >> 32;
      uint64_t v46 = BYTE6(a2);
      unint64_t v43 = a2 >> 16;
      unint64_t v44 = a2 >> 8;
      unint64_t v41 = HIDWORD(a2);
      unint64_t v42 = a2 >> 24;
      char v45 = a2;
      unint64_t v40 = a2 >> 40;
      do
      {
        if (__OFADD__(v12, 2)) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v12 + 2;
        }
        sub_100003EB0(&qword_1001D8778);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_100186100;
        if (v2)
        {
          if (v2 != 1)
          {
            if (v12 < *(void *)(a1 + 16)) {
              goto LABEL_56;
            }
            if (v12 >= *(void *)(a1 + 24)) {
              goto LABEL_59;
            }
            uint64_t v28 = __DataStorage._bytes.getter();
            if (!v28) {
              goto LABEL_71;
            }
            uint64_t v29 = v28;
            uint64_t v30 = __DataStorage._offset.getter();
            if (__OFSUB__(v12, v30)) {
              goto LABEL_61;
            }
            uint64_t v31 = v12 + 1;
            if (v12 + 1 < *(void *)(a1 + 16)) {
              goto LABEL_63;
            }
            if (v31 >= *(void *)(a1 + 24)) {
              goto LABEL_64;
            }
            char v21 = *(unsigned char *)(v29 + v12 - v30);
            uint64_t v32 = __DataStorage._bytes.getter();
            if (!v32) {
              goto LABEL_72;
            }
            uint64_t v23 = v32;
            uint64_t v33 = __DataStorage._offset.getter();
            uint64_t v25 = v31 - v33;
            if (__OFSUB__(v31, v33)) {
              goto LABEL_65;
            }
            goto LABEL_44;
          }
          if (v12 >= (int)a1 && v12 < v47)
          {
            uint64_t v17 = __DataStorage._bytes.getter();
            if (!v17) {
              goto LABEL_69;
            }
            uint64_t v18 = v17;
            uint64_t v19 = __DataStorage._offset.getter();
            if (__OFSUB__(v12, v19)) {
              goto LABEL_57;
            }
            uint64_t v20 = v12 + 1;
            if (v12 + 1 < (int)a1 || v20 >= v47) {
              goto LABEL_60;
            }
            char v21 = *(unsigned char *)(v18 + v12 - v19);
            uint64_t v22 = __DataStorage._bytes.getter();
            if (!v22) {
              goto LABEL_70;
            }
            uint64_t v23 = v22;
            uint64_t v24 = __DataStorage._offset.getter();
            uint64_t v25 = v20 - v24;
            if (__OFSUB__(v20, v24)) {
              goto LABEL_62;
            }
LABEL_44:
            char v27 = *(unsigned char *)(v23 + v25);
            goto LABEL_45;
          }
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (v12 >= v46) {
          goto LABEL_55;
        }
        uint64_t v50 = a1;
        char v51 = v45;
        char v52 = v44;
        char v53 = v43;
        char v54 = v42;
        char v55 = v41;
        uint64_t v26 = v12 + 1;
        char v56 = v40;
        if (v12 + 1 >= v46) {
          goto LABEL_58;
        }
        char v21 = *((unsigned char *)&v50 + v12);
        uint64_t v50 = a1;
        char v51 = v45;
        char v52 = v44;
        char v53 = v43;
        char v54 = v42;
        char v55 = v41;
        char v56 = v40;
        char v27 = *((unsigned char *)&v50 + v26);
LABEL_45:
        *(unsigned char *)(v16 + 32) = v27 | (16 * v21);
        uint64_t v34 = sub_100003EB0(&qword_1001DC0A8);
        uint64_t v57 = v34;
        unint64_t v58 = sub_1000635F8();
        uint64_t v50 = v16;
        uint64_t v35 = sub_100006788(&v50, v34);
        uint64_t v36 = *v35;
        size_t v37 = *(void *)(*v35 + 16);
        if (v37)
        {
          if (v37 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v49 = v37;
            memcpy(__dst, (const void *)(v36 + 32), v37);
            uint64_t v13 = *(void *)__dst;
            unint64_t v14 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v49 << 48);
            swift_bridgeObjectRetain();
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v38 = __DataStorage.init(bytes:length:)();
            uint64_t v39 = v38;
            if (v37 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v13 = swift_allocObject();
              *(void *)(v13 + 16) = 0;
              *(void *)(v13 + 24) = v37;
              unint64_t v14 = v39 | 0x8000000000000000;
            }
            else
            {
              uint64_t v13 = v37 << 32;
              unint64_t v14 = v38 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v13 = 0;
          unint64_t v14 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        sub_100006520((uint64_t)&v50);
        Data.append(_:)();
        sub_100006628(v13, v14);
        uint64_t v12 = v15;
      }
      while (v15 < v9);
      return v59;
    case 2uLL:
      goto LABEL_6;
    case 3uLL:
      return result;
    default:
      char v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100063530()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DC090);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DC090);
  if (qword_1001D9280 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10A0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_1000635F8()
{
  unint64_t result = qword_1001DC0B0;
  if (!qword_1001DC0B0)
  {
    sub_100003EF4(&qword_1001DC0A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC0B0);
  }
  return result;
}

Swift::Int sub_100063654()
{
  return sub_1000636BC();
}

uint64_t sub_100063664()
{
  return String.hash(into:)();
}

Swift::Int sub_100063678()
{
  return sub_10006372C();
}

uint64_t sub_100063688@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1001C5530;
  return sub_100063780(v2, a1, a2);
}

void sub_100063694(void *a1@<X8>)
{
  *a1 = 0x726F727265;
  a1[1] = 0xE500000000000000;
}

Swift::Int sub_1000636AC()
{
  return sub_1000636BC();
}

Swift::Int sub_1000636BC()
{
  return Hasher._finalize()();
}

uint64_t sub_100063708()
{
  return String.hash(into:)();
}

Swift::Int sub_10006371C()
{
  return sub_10006372C();
}

Swift::Int sub_10006372C()
{
  return Hasher._finalize()();
}

uint64_t sub_100063774@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1001C5568;
  return sub_100063780(v2, a1, a2);
}

uint64_t sub_100063780@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void sub_1000637D0(void *a1@<X8>)
{
  *a1 = 0x7974706D65;
  a1[1] = 0xE500000000000000;
}

uint64_t type metadata accessor for SecurityAnalytics()
{
  uint64_t result = qword_1001DC0E0;
  if (!qword_1001DC0E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for SecurityAnalytics.PerformanceField()
{
  return &type metadata for SecurityAnalytics.PerformanceField;
}

unsigned char *_s9SPREngine17SecurityAnalyticsC14AnalyticsFieldOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000638E8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecurityAnalytics.AnalyticsField()
{
  return &type metadata for SecurityAnalytics.AnalyticsField;
}

unint64_t sub_100063924()
{
  unint64_t result = qword_1001DC210;
  if (!qword_1001DC210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC210);
  }
  return result;
}

unint64_t sub_10006397C()
{
  unint64_t result = qword_1001DC218;
  if (!qword_1001DC218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC218);
  }
  return result;
}

uint64_t sub_1000639D0(uint64_t a1)
{
  sub_1000F9AC4((uint64_t)v21);
  if (!v1)
  {
    uint64_t v3 = sub_10001F1A0((uint64_t)v21, v22);
    __chkstk_darwin(v3, v3);
    uint64_t v5 = (void *)((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = *v5;
    uint64_t v8 = type metadata accessor for CALogger();
    v20[3] = v8;
    v20[4] = &off_1001C7558;
    v20[0] = v7;
    type metadata accessor for SecurityAnalytics();
    a1 = swift_allocObject();
    uint64_t v9 = sub_10001F1A0((uint64_t)v20, v8);
    __chkstk_darwin(v9, v9);
    uint64_t v11 = (void *)((char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v12 + 16))(v11);
    uint64_t v13 = *v11;
    v19[3] = v8;
    v19[4] = &off_1001C7558;
    v19[0] = v13;
    sub_100009300((uint64_t)v19, a1 + 16);
    unint64_t v14 = sub_100104EA4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v15 = sub_100104FC0((uint64_t)_swiftEmptyArrayStorage);
    sub_100003EB0(&qword_1001DC238);
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 32) = 0;
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v15;
    *(void *)(a1 + 56) = v16;
    sub_100006520((uint64_t)v19);
    sub_100006520((uint64_t)v20);
    sub_100006520((uint64_t)v21);
  }
  return a1;
}

Class sub_100063C14(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1000432DC();
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t *CADailyLogger.shared.unsafeMutableAddressor()
{
  if (qword_1001D90A0 != -1) {
    swift_once();
  }
  return &static CADailyLogger.shared;
}

void sub_100063CEC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithSuiteName:v7];

  if (v8)
  {
    int v9 = *(unsigned __int8 *)(v3 + 32);
    if (v9 != 2 && ((((v9 & 1) == 0) ^ a2) & 1) == 0)
    {
      if (qword_1001D9098 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100003E78(v10, (uint64_t)qword_1001DC240);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "production flag changed, sending the daily events.", v13, 2u);
        swift_slowDealloc();
      }

      CADailyLogger.postDailyEvents()();
    }
    *(unsigned char *)(v3 + 32) = a2 & 1;
    if (qword_1001D9098 != -1) {
      goto LABEL_32;
    }
    while (1)
    {
      uint64_t v14 = type metadata accessor for Logger();
      sub_100003E78(v14, (uint64_t)qword_1001DC240);
      swift_bridgeObjectRetain_n();
      unint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        int64_t v18 = *(void *)(a1 + 16);
        if (v18)
        {
          os_log_type_t v41 = v16;
          unint64_t v42 = v17;
          unint64_t v43 = v15;
          sub_10014B9C4(0, v18, 0);
          uint64_t v19 = (char *)(a1 + 32);
          do
          {
            char v20 = *v19++;
            uint64_t v21 = sub_100042180(v20);
            uint64_t v23 = v22;
            unint64_t v25 = _swiftEmptyArrayStorage[2];
            unint64_t v24 = _swiftEmptyArrayStorage[3];
            if (v25 >= v24 >> 1) {
              sub_10014B9C4(v24 > 1, v25 + 1, 1);
            }
            _swiftEmptyArrayStorage[2] = v25 + 1;
            uint64_t v26 = &_swiftEmptyArrayStorage[2 * v25];
            void v26[4] = v21;
            v26[5] = v23;
            --v18;
          }
          while (v18);
          uint64_t v17 = v42;
          unint64_t v15 = v43;
          os_log_type_t v16 = v41;
        }
        uint64_t v38 = Array.description.getter();
        unint64_t v40 = v39;
        swift_bridgeObjectRelease();
        sub_100005EB8(v38, v40, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "CADailyLogger.increment - CADailyEvents: %s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v30 = *(void *)(a1 + 16);
        if (!v30)
        {
LABEL_30:

          return;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v30 = *(void *)(a1 + 16);
        if (!v30) {
          goto LABEL_30;
        }
      }
      uint64_t v31 = (os_unfair_lock_s *)(*(void *)(v3 + 40) + 16);
      swift_bridgeObjectRetain();
      uint64_t v32 = 0;
      while (1)
      {
        uint64_t v3 = *(unsigned __int8 *)(a1 + v32 + 32);
        os_unfair_lock_lock(v31);
        sub_100042180(v3);
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v34 = (char *)[v8 integerForKey:v33];

        BOOL v35 = __OFADD__(v34, 1);
        uint64_t v36 = v34 + 1;
        if (v35) {
          break;
        }
        ++v32;
        sub_100042180(v3);
        NSString v37 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v8 setInteger:v36 forKey:v37];

        os_unfair_lock_unlock(v31);
        if (v30 == v32)
        {

          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_32:
      swift_once();
    }
  }
  if (qword_1001D9098 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100003E78(v27, (uint64_t)qword_1001DC240);
  oslog = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v28, "CADailyLogger.increment - User Defaults is nil", v29, 2u);
    swift_slowDealloc();
  }
}

void sub_100064244(char a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v5 = v4;
  id v10 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  os_log_t oslog = (os_log_t)[v10 initWithSuiteName:v11];

  if (oslog)
  {
    int v12 = *(unsigned __int8 *)(v5 + 32);
    if (v12 != 2 && ((((v12 & 1) == 0) ^ a4) & 1) == 0)
    {
      if (qword_1001D9098 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100003E78(v13, (uint64_t)qword_1001DC240);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "production flag changed, sending the daily events.", v16, 2u);
        swift_slowDealloc();
      }

      CADailyLogger.postDailyEvents()();
    }
    *(unsigned char *)(v5 + 32) = a4 & 1;
    uint64_t v17 = (os_unfair_lock_s *)(*(void *)(v5 + 40) + 16);
    os_unfair_lock_lock(v17);
    sub_100064FB8(v18, oslog, a1, a2, a3);
    os_unfair_lock_unlock(v17);
  }
  else
  {
    if (qword_1001D9098 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100003E78(v19, (uint64_t)qword_1001DC240);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v20, "CADailyLogger.cumulate - User Defaults is nil", v21, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000644C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DC240);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DC240);
  if (qword_1001D9260 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1040);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100064590()
{
  type metadata accessor for CADailyLogger();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 32) = 2;
  sub_100003EB0(&qword_1001D94A0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(v0 + 40) = result;
  *(void *)(v0 + 16) = 0xD00000000000001DLL;
  *(void *)(v0 + 24) = 0x80000001001972F0;
  static CADailyLogger.shared = v0;
  return result;
}

uint64_t static CADailyLogger.shared.getter()
{
  if (qword_1001D90A0 != -1) {
    swift_once();
  }

  return swift_retain();
}

void CADailyLogger.registerBGSystemTask(queue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1001D9098 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100003E78(v4, (uint64_t)qword_1001DC240);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    NSString v7 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)NSString v7 = 136315138;
    sub_100005EB8(0xD00000000000001CLL, 0x8000000100197260, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "CADailyLogger.%s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v8 = [self sharedScheduler];
  NSString v9 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_1000648E0;
  void aBlock[5] = v2;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100064D34;
  aBlock[3] = (uint64_t)&unk_1001C8738;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v8 registerForTaskWithIdentifier:v9 usingQueue:a1 launchHandler:v10];
  _Block_release(v10);
}

id sub_1000648E0(void *a1)
{
  CADailyLogger.postDailyEvents()();

  return [a1 setTaskCompleted];
}

Swift::Void __swiftcall CADailyLogger.postDailyEvents()()
{
  uint64_t v1 = v0;
  if (qword_1001D9098 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DC240);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100005EB8(0xD000000000000011, 0x8000000100197280, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CADailyLogger.%s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = swift_allocObject();
  unint64_t v7 = sub_100064DB4((uint64_t)&off_1001C4B30);
  *(void *)(v6 + 16) = v7;
  id v8 = (uint64_t *)(v6 + 16);
  if (*(void *)(v7 + 16))
  {
    if (*(unsigned char *)(v1 + 32) == 2)
    {
    }
    else
    {
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = *v8;
      *id v8 = 0x8000000000000000;
      sub_100106008((uint64_t)isa, 0x6375646F72507349, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
      *id v8 = aBlock[0];
      swift_bridgeObjectRelease();
    }
    NSString v9 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_100065B70;
    void aBlock[5] = v6;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100063C14;
    aBlock[3] = (uint64_t)&unk_1001C8788;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v14);
  }
  else
  {
    NSString v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      NSString v11 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)NSString v11 = 136315138;
      sub_100005EB8(0xD000000000000011, 0x8000000100197280, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CADailyLogger.%s - eventPayload isEmpty (not sending)", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  swift_release();
}

void sub_100064D34(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100064D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100064DAC()
{
  return swift_release();
}

unint64_t sub_100064DB4(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithSuiteName:v4];

  if (v5)
  {
    unint64_t v6 = sub_100104EA4((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v19 = v6;
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      id v8 = (os_unfair_lock_s *)(*(void *)(v1 + 40) + 16);
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v9 + 1;
        char v11 = *(unsigned char *)(a1 + v9 + 32);
        os_unfair_lock_lock(v8);
        sub_100065488(v12, v11, (uint64_t *)&v19, v5);
        os_unfair_lock_unlock(v8);
        uint64_t v9 = v10;
      }
      while (v7 != v10);

      swift_bridgeObjectRelease();
      return v19;
    }
    else
    {
      unint64_t v13 = v6;
    }
    return v13;
  }
  else
  {
    if (qword_1001D9098 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100003E78(v14, (uint64_t)qword_1001DC240);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "CADailyLogger.extract - User Defaults is nil", v17, 2u);
      swift_slowDealloc();
    }

    return sub_100104EA4((uint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_100064FB8(uint64_t a1, void *a2, char a3, uint64_t a4, unint64_t a5)
{
  sub_100042180(a3);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [a2 stringArrayForKey:v9];

  if (v10)
  {
    char v11 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    char v11 = _swiftEmptyArrayStorage;
  }
  if (sub_10006EAE4(a4, a5, v11))
  {
    swift_bridgeObjectRelease();
    if (qword_1001D9098 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100003E78(v12, (uint64_t)qword_1001DC240);
    swift_bridgeObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v16 = sub_100042180(a3);
      sub_100005EB8(v16, v17, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_100005EB8(a4, a5, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "CADailyLogger.cumulate - CADailyEvent: %s already stored with value: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
LABEL_17:
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v11 = sub_10015A8E0(0, v11[2] + 1, 1, v11);
    }
    unint64_t v19 = v11[2];
    unint64_t v18 = v11[3];
    if (v19 >= v18 >> 1) {
      char v11 = sub_10015A8E0((void *)(v18 > 1), v19 + 1, 1, v11);
    }
    void v11[2] = v19 + 1;
    os_log_type_t v20 = &v11[2 * v19];
    v20[4] = a4;
    void v20[5] = a5;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_100042180(a3);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [a2 setObject:isa forKey:v22];

    if (qword_1001D9098 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100003E78(v23, (uint64_t)qword_1001DC240);
    swift_bridgeObjectRetain_n();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v26 = sub_100042180(a3);
      sub_100005EB8(v26, v27, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_100005EB8(a4, a5, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v24, "CADailyLogger.cumulate - Stored CADailyEvent: %s, value: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease_n();
}

void sub_100065488(uint64_t a1, char a2, uint64_t *a3, void *a4)
{
  if (sub_100042180(a2) == 0xD000000000000011 && v7 == 0x8000000100193280)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      uint64_t v16 = sub_100042180(a2);
      uint64_t v18 = v17;
      sub_100042180(a2);
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a4 integerForKey:v19];

      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = *a3;
      *a3 = 0x8000000000000000;
      sub_100106008((uint64_t)isa, v16, v18, isUniquelyReferenced_nonNull_native);
      *a3 = v25;
      goto LABEL_8;
    }
  }
  uint64_t v9 = sub_100042180(a2);
  uint64_t v11 = v10;
  sub_100042180(a2);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [a4 stringArrayForKey:v12];

  if (!v13)
  {
    NSString v22 = (void *)sub_100065AA0(v9, v11);
    swift_bridgeObjectRelease();

    goto LABEL_10;
  }
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  Array.description.getter();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v24 = *a3;
  *a3 = 0x8000000000000000;
  sub_100106008((uint64_t)v14, v9, v11, v15);
  *a3 = v24;
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  sub_100042180(a2);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a4 removeObjectForKey:v23];
}

uint64_t CADailyLogger.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t CADailyLogger.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10006578C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

double sub_1000657C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  NSString v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10000C4B0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *NSString v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10000D200();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100006510((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_10007E9B0(v8, v11);
    *NSString v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_1000658C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  NSString v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1001618E4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *NSString v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10007FBC0();
      uint64_t v11 = v13;
    }
    sub_100006628(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    *a3 = *(_OWORD *)(*(void *)(v11 + 56) + 16 * v8);
    sub_10007EB88(v8, v11);
    *NSString v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = xmmword_10018A340;
  }
  return result;
}

double sub_1000659B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSString v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10000C4B0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *NSString v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10007FD88();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100065EE4(*(void *)(v11 + 56) + 40 * v8, a3);
    sub_10007ED70(v8, v11);
    *NSString v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 32) = -1;
  }
  return result;
}

uint64_t sub_100065AA0(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10000C4B0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *id v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10007FF74();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_10007EF68(v6, v9);
  *id v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100065B70()
{
  sub_100065F40(v0);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100065B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSString v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10000C4B0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *NSString v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100080128();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for StopWatch();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_10005AE78(v12 + *(void *)(v20 + 72) * v8, a3);
    sub_10007F140(v8, v11);
    *NSString v4 = v11;
    swift_bridgeObjectRelease();
    NSString v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for StopWatch();
    NSString v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double sub_100065D2C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100161C4C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100080700();
      uint64_t v9 = v11;
    }

    sub_100006510((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_10007F350(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_100065E24(char a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_100161CE0(a1 & 1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100080A90();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_10007F544(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t type metadata accessor for CADailyLogger()
{
  return self;
}

uint64_t sub_100065EE4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100065F40(uint64_t a1)
{
  if (qword_1001D9098 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DC240);
  swift_retain_n();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v10[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    sub_100005EB8(0xD000000000000024, 0x8000000100195CC0, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    swift_beginAccess();
    sub_1000432DC();
    swift_bridgeObjectRetain();
    uint64_t v6 = Dictionary.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    sub_100005EB8(v6, v8, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AnalyticsSendEventLazy: %s has payload: %s)", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  return *(void *)(a1 + 16);
}

uint64_t sub_1000661A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DC308);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DC308);
  if (qword_1001D9268 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1058);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10006626C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DC320);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DC320);
  if (qword_1001D9238 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FC8);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_100066334(void *a1, unint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v221 = a2;
  os_log_type_t v4 = v3;
  v231 = a3;
  uint64_t v6 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  uint64_t v10 = (char *)&v205 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  NSString v14 = (char *)&v205 - v13;
  __chkstk_darwin(v12, v15);
  uint64_t v217 = (char *)&v205 - v16;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v219 = *(void *)(v17 - 8);
  uint64_t v220 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v218 = (char *)&v205 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v228 = (os_log_t)type metadata accessor for URL();
  Class isa = v228[-1].isa;
  uint64_t v21 = __chkstk_darwin(v228, v20);
  uint64_t v224 = (char *)&v205 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  unint64_t v229 = (unint64_t)&v205 - v24;
  uint64_t v25 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v27 = __chkstk_darwin(v25 - 8, v26);
  uint64_t v227 = (char *)&v205 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v29);
  uint64_t v225 = (char *)&v205 - v30;
  v4[18] = 0;
  uint64_t v31 = (void *)((char *)v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
  *uint64_t v31 = 0;
  v31[1] = 0;
  *((unsigned char *)v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF) = 0;
  *(void *)((char *)v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinBypassPrefixAIDs) = _swiftEmptyArrayStorage;
  *(void *)((char *)v4 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_pinFallbackEnabledPrefixAIDs) = _swiftEmptyArrayStorage;
  if (qword_1001D90B0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100003E78(v32, (uint64_t)qword_1001DC320);
  id v34 = a1;
  uint64_t v226 = v33;
  BOOL v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  os_signpost_type_t v215 = v10;
  Swift::String v216 = v14;
  if (v37)
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    os_log_t v214 = (void *)swift_slowAlloc();
    os_log_t v230 = v4;
    *(_DWORD *)uint64_t v38 = 138412290;
    v232[0] = v34;
    id v39 = v34;
    os_log_type_t v4 = v230;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_t v214 = v34;

    _os_log_impl((void *)&_mh_execute_header, v35, v36, "ReaderConfiguration init from SPRReadParameters: %@", v38, 0xCu);
    sub_100003EB0((uint64_t *)&unk_1001DA540);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v40 = 0x64696C61766E69;
  [v34 mode];
  if (SPRReaderMode.description.getter() == 0x64696C61766E69 && v41 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    sub_10002A544(4017, 0xD000000000000012, (void *)0x80000001001976D0, 0);
    swift_willThrow();

    goto LABEL_11;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v42) {
    goto LABEL_10;
  }
  v4[2] = [v34 mode];
  id v213 = v34;
  [v34 transactionType];
  if (SPRTransactionType.description.getter() == 0x64696C61766E69 && v44 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    sub_10002A544(4000, 0xD000000000000017, (void *)0x80000001001976B0, 0);
    swift_willThrow();

    goto LABEL_11;
  }
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v45) {
    goto LABEL_18;
  }
  id v46 = v213;
  *((unsigned char *)v4 + 72) = [v213 transactionType];
  uint64_t v47 = (char *)[v46 timeoutReadPay];
  v4[14] = v47;
  if ((unint64_t)(v47 - 41) <= 0xFFFFFFFFFFFFFFD7)
  {
    uint64_t v48 = v4;
    unsigned __int8 v49 = v46;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      char v53 = (_DWORD *)swift_slowAlloc();
      LODWORD(v230) = v52;
      char v54 = v53;
      *char v53 = 134218240;
      v232[0] = [v49 timeoutReadPay];
      id v46 = v213;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *((_WORD *)v54 + 6) = 2048;
      v232[0] = 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v230, "Input timeoutReadPay of %ld was invalid. Using maximum of %ld.", (uint8_t *)v54, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v50 = v49;
    }

    os_log_type_t v4 = v48;
    v48[14] = 40;
  }
  char v55 = (char *)[v46 timeoutReadVas];
  v4[15] = v55;
  if ((unint64_t)(v55 - 41) <= 0xFFFFFFFFFFFFFFD7)
  {
    char v56 = v4;
    uint64_t v57 = v46;
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    int v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      unint64_t v61 = (_DWORD *)swift_slowAlloc();
      LODWORD(v230) = v60;
      uint64_t v62 = v61;
      *unint64_t v61 = 134218240;
      v232[0] = [v57 timeoutReadVas];
      id v46 = v213;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *((_WORD *)v62 + 6) = 2048;
      v232[0] = 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v230, "Input timeoutReadVas of %ld was invalid. Using maximum of %ld.", (uint8_t *)v62, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      unint64_t v58 = v57;
    }

    os_log_type_t v4 = v56;
    v56[15] = 40;
  }
  unint64_t p_ivar_lyt = (unint64_t)&GlobalState.ivar_lyt;
  if ((char *)[v46 mode] - 1 <= (char *)2)
  {
    os_log_t v230 = v4;
    id v64 = [v46 vasRequests];
    sub_100006680(0, &qword_1001DC548);
    unint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v65 >> 62) {
      goto LABEL_68;
    }
    uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_32:
    swift_bridgeObjectRelease();
    if (!v66)
    {
      swift_bridgeObjectRelease();
      sub_10002A544(4000, 0xD000000000000011, (void *)0x8000000100197690, 0);
      swift_willThrow();

      os_log_type_t v4 = v230;
      goto LABEL_11;
    }
    id v67 = [v46 *(SEL *)(p_ivar_lyt + 3048)];
    unint64_t v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v4 = v230;
    if (v68 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v69) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v69 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v69)
      {
LABEL_35:
        unint64_t v210 = v68 & 0xC000000000000001;
        uint64_t v211 = (void (**)(char *, unint64_t, os_log_t))((char *)isa + 32);
        long long v212 = (void (**)(char *, uint64_t, uint64_t, os_log_t))((char *)isa + 56);
        id v207 = (id)SPRVASTerminalProtocolSignUpOnly;
        v208 = (unsigned int (**)(uint64_t, uint64_t, os_log_t))((char *)isa + 48);
        id v205 = (void (**)(char *, os_log_t))((char *)isa + 8);
        uint64_t v206 = (objc_class *)v69;
        unint64_t p_ivar_lyt = 4;
        unint64_t v209 = v68;
        while (1)
        {
          if (v210) {
            id v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v71 = *(id *)(v68 + 8 * p_ivar_lyt);
          }
          uint64_t v72 = v71;
          Class isa = (Class)(p_ivar_lyt - 3);
          if (__OFADD__(p_ivar_lyt - 4, 1))
          {
            __break(1u);
LABEL_68:
            swift_bridgeObjectRetain();
            uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
          id v73 = [v71 vasTerminalProtocol];
          uint64_t v74 = SPRVASTerminalProtocol.description.getter();
          uint64_t v76 = v75;

          if (v74 == 0x64696C61766E69 && v76 == 0xE700000000000000)
          {
            uint64_t v101 = v72;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_62:
            swift_bridgeObjectRelease();
            os_log_type_t v4 = v230;
            sub_10002A544(4000, 0xD000000000000029, (void *)0x8000000100197660, 0);
            swift_willThrow();

            goto LABEL_11;
          }
          char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v78)
          {
            uint64_t v101 = v72;
            swift_bridgeObjectRelease();
            goto LABEL_62;
          }
          id v79 = [v72 merchantId];
          uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v82 = v81;

          swift_bridgeObjectRelease();
          uint64_t v83 = HIBYTE(v82) & 0xF;
          if ((v82 & 0x2000000000000000) == 0) {
            uint64_t v83 = v80 & 0xFFFFFFFFFFFFLL;
          }
          os_log_type_t v4 = v230;
          if (!v83)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10002A544(4000, 0xD00000000000001ELL, (void *)0x8000000100197640, 0);
            swift_willThrow();

            goto LABEL_11;
          }
          id v84 = [v72 vasTerminalProtocol];
          sub_100006680(0, &qword_1001DB7E0);
          id v85 = v207;
          id v86 = v84;
          LOBYTE(v84) = static NSObject.== infix(_:_:)();

          uint64_t v88 = v227;
          os_log_t v87 = v228;
          if (v84)
          {
            id v89 = [v72 vasUrl];
            if (!v89)
            {
              uint64_t v92 = (uint64_t)v225;
              (*v212)(v225, 1, 1, v87);
LABEL_65:
              swift_bridgeObjectRelease();
              sub_10005F4F8(v92, (uint64_t *)&unk_1001DD410);
              swift_bridgeObjectRelease();
              sub_10002A544(4000, 0xD000000000000037, (void *)0x8000000100197600, 0);
              swift_willThrow();

LABEL_11:
              swift_bridgeObjectRelease();
              goto LABEL_12;
            }
            uint64_t v90 = v89;
            unint64_t v91 = v229;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v92 = (uint64_t)v225;
            (*v211)(v225, v91, v87);
            (*v212)((char *)v92, 0, 1, v87);
            if ((*v208)(v92, 1, v87) == 1) {
              goto LABEL_65;
            }
            sub_10005F4F8(v92, (uint64_t *)&unk_1001DD410);
          }
          os_log_t v214 = v72;
          id v93 = [v72 vasUrl:v205];
          if (!v93) {
            break;
          }
          uint64_t v94 = v93;
          unint64_t v95 = v229;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v96 = *v211;
          (*v211)(v88, v95, v87);
          (*v212)(v88, 0, 1, v87);
          unsigned int v97 = (*v208)((uint64_t)v88, 1, v87);
          id v46 = v213;
          uint64_t v70 = (uint64_t)v88;
          if (v97 == 1) {
            goto LABEL_37;
          }
          unint64_t v98 = v224;
          v96(v224, (unint64_t)v88, v87);
          URL.absoluteString.getter();
          os_log_t v99 = v87;
          uint64_t v100 = String.count.getter();
          swift_bridgeObjectRelease();
          if (v100 > 64)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10002A544(4000, 0xD00000000000001DLL, (void *)0x80000001001975E0, 0);
            swift_willThrow();

            (*v205)(v98, v99);
            goto LABEL_11;
          }
          (*v205)(v98, v99);

          id v46 = v213;
LABEL_38:
          unint64_t v68 = v209;
          ++p_ivar_lyt;
          if (isa == v206) {
            goto LABEL_70;
          }
        }
        (*v212)(v88, 1, 1, v87);
        id v46 = v213;
        uint64_t v70 = (uint64_t)v88;
LABEL_37:

        sub_10005F4F8(v70, (uint64_t *)&unk_1001DD410);
        goto LABEL_38;
      }
    }
LABEL_70:
    swift_bridgeObjectRelease();
    unint64_t p_ivar_lyt = (unint64_t)&GlobalState.ivar_lyt;
  }
  id v102 = [v46 vasRequests:v205];
  sub_100006680(0, &qword_1001DC548);
  uint64_t v103 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4[3] = v103;
  id v104 = [v46 currencyCode];
  unint64_t v105 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v107 = v106;

  switch(v107 >> 62)
  {
    case 1uLL:
      unint64_t v108 = HIDWORD(v105);
      sub_100006628(v105, v107);
      if (__OFSUB__(HIDWORD(v105), v105))
      {
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        if (__OFSUB__(HIDWORD(v107), v107))
        {
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
          JUMPOUT(0x10006822CLL);
        }
        uint64_t v192 = HIDWORD(v107) - (int)v107;
LABEL_160:
        sub_1000065D0(v107, p_ivar_lyt);
LABEL_161:
        if (v192 < 5 || (unint64_t)v192 > 0x10)
        {
LABEL_142:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10002A544(4000, 0xD000000000000036, (void *)0x8000000100197540, 0);
          swift_willThrow();

          sub_100006628(v107, p_ivar_lyt);
          sub_100006628(v40, v105);
          int v127 = 0;
          int v125 = 1;
          char v126 = 1;
          goto LABEL_143;
        }
        sub_100006628(v107, p_ivar_lyt);
        if (v108 != 2)
        {
          unint64_t v107 = v4[8];
          unint64_t p_ivar_lyt = v4[9];
          switch(p_ivar_lyt >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v107), v107)) {
                goto LABEL_183;
              }
              uint64_t v199 = HIDWORD(v107) - (int)v107;
LABEL_169:
              sub_1000065D0(v4[8], v4[9]);
LABEL_170:
              if (v199 < 5 || (unint64_t)v199 > 0x10) {
                goto LABEL_142;
              }
              sub_100006628(v107, p_ivar_lyt);
              if (v108 != 3)
              {
                unint64_t v107 = v4[10];
                unint64_t p_ivar_lyt = v4[11];
                switch(p_ivar_lyt >> 62)
                {
                  case 1uLL:
                    goto LABEL_176;
                  case 2uLL:
                    uint64_t v204 = *(void *)(v107 + 16);
                    uint64_t v203 = *(void *)(v107 + 24);
                    uint64_t v202 = v203 - v204;
                    if (!__OFSUB__(v203, v204)) {
                      goto LABEL_179;
                    }
                    goto LABEL_184;
                  case 3uLL:
                    goto LABEL_142;
                  default:
                    uint64_t v202 = BYTE6(p_ivar_lyt);
                    goto LABEL_180;
                }
              }
              break;
            case 2uLL:
              uint64_t v201 = *(void *)(v107 + 16);
              uint64_t v200 = *(void *)(v107 + 24);
              uint64_t v199 = v200 - v201;
              if (!__OFSUB__(v200, v201)) {
                goto LABEL_169;
              }
              goto LABEL_184;
            case 3uLL:
              goto LABEL_142;
            default:
              uint64_t v199 = BYTE6(p_ivar_lyt);
              goto LABEL_170;
          }
        }
      }
      else
      {
        unint64_t v107 = HIDWORD(v105) - (int)v105;
LABEL_79:
        if (v107 != *(void *)TLVTag.TAG_5F2A_LENGTH.unsafeMutableAddressor())
        {
          swift_bridgeObjectRelease();
          sub_10002A544(4002, 0xD000000000000017, (void *)0x8000000100197460, 0);
          swift_willThrow();

          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
        id v111 = v213;
        id v112 = [v213 currencyCode];
        uint64_t v113 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v115 = v114;

        v4[7] = v113;
        v4[8] = v115;
        id v116 = v111;
        uint64_t v40 = (uint64_t)&GlobalState.ivar_lyt;
        id v117 = [v111 merchantCategoryCode];
        unint64_t v105 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v107 = v118;

        switch(v107 >> 62)
        {
          case 1uLL:
            unint64_t v108 = HIDWORD(v105);
            sub_100006628(v105, v107);
            if (__OFSUB__(HIDWORD(v105), v105)) {
              goto LABEL_155;
            }
            unint64_t v107 = HIDWORD(v105) - (int)v105;
            break;
          case 2uLL:
            uint64_t v119 = *(void *)(v105 + 16);
            unint64_t v108 = *(void *)(v105 + 24);
            sub_100006628(v105, v107);
            unint64_t v107 = v108 - v119;
            if (__OFSUB__(v108, v119)) {
              goto LABEL_156;
            }
            id v116 = v213;
            break;
          case 3uLL:
            sub_100006628(v105, v107);
            unint64_t v107 = 0;
            break;
          default:
            sub_100006628(v105, v107);
            unint64_t v107 = BYTE6(v107);
            break;
        }
        unint64_t v105 = 0x1001E0000;
        if (v107 != *(void *)TLVTag.TAG_9F15_LENGTH.unsafeMutableAddressor())
        {
          swift_bridgeObjectRelease();
          sub_10002A544(4000, 0xD000000000000017, (void *)0x8000000100197480, 0);
          swift_willThrow();

          swift_bridgeObjectRelease();
          sub_100006628(v4[7], v4[8]);
          goto LABEL_11;
        }
        id v120 = [v116 merchantCategoryCode];
        unint64_t v108 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v122 = v121;

        id v123 = Data.hexDigits.getter(v108, v122);
        sub_100006628(v108, v122);
        uint64_t v124 = v123[2];
        if (v124)
        {
          if (*((unsigned __int8 *)v123 + 32) > 9u)
          {
LABEL_91:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10002A544(4000, 0xD00000000000002ELL, (void *)0x80000001001975B0, 0);
            swift_willThrow();

            int v125 = 0;
            char v126 = 0;
            int v127 = 0;
            goto LABEL_104;
          }
          if (v124 != 1)
          {
            uint64_t v128 = 33;
            do
            {
              uint64_t v129 = v128 - 31;
              if (__OFADD__(v128 - 32, 1))
              {
                __break(1u);
LABEL_149:
                unint64_t v107 = v4[6];
                unint64_t p_ivar_lyt = v4[7];
                switch(p_ivar_lyt >> 62)
                {
                  case 1uLL:
                    goto LABEL_157;
                  case 2uLL:
                    uint64_t v198 = *(void *)(v107 + 16);
                    uint64_t v197 = *(void *)(v107 + 24);
                    uint64_t v192 = v197 - v198;
                    if (!__OFSUB__(v197, v198)) {
                      goto LABEL_160;
                    }
                    goto LABEL_184;
                  case 3uLL:
                    goto LABEL_142;
                  default:
                    uint64_t v192 = BYTE6(p_ivar_lyt);
                    goto LABEL_161;
                }
              }
              if (*((unsigned __int8 *)v123 + v128) > 9u) {
                goto LABEL_91;
              }
              ++v128;
            }
            while (v129 != v124);
          }
        }
        swift_bridgeObjectRelease();
        id v130 = v213;
        id v131 = [v213 merchantCategoryCode];
        uint64_t v132 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v134 = v133;

        v4[10] = v132;
        v4[11] = v134;
        id v135 = v130;
        [v130 amount];
        if ((NSDecimal.isSignMinus.getter() & 1) != 0
          || ([v130 amount],
              NSDecimal.init(integerLiteral:)(v136, 10),
              pow(_:_:)(v139, v137, v138),
              id v135 = v213,
              (static NSDecimal.< infix(_:_:)() & 1) == 0)
          || ([v135 amount], NSDecimal.exponent.getter() < 0))
        {
          swift_bridgeObjectRelease();
          sub_10002A544(4001, 0xD000000000000036, (void *)0x80000001001974A0, 0);
          swift_willThrow();

          char v126 = 0;
          int v127 = 0;
          int v125 = 1;
          goto LABEL_104;
        }
        [v135 amount];
        long long v140 = *(_OWORD *)((char *)v232 + 4);
        *((_DWORD *)v4 + 8) = v232[0];
        *(_OWORD *)((char *)v4 + 36) = v140;
        id v141 = [v135 interfaceDeviceSerial];
        unint64_t v105 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v107 = v142;

        switch(v107 >> 62)
        {
          case 1uLL:
            sub_100006628(v105, v107);
            if (!__OFSUB__(HIDWORD(v105), v105))
            {
              unint64_t v107 = HIDWORD(v105) - (int)v105;
LABEL_118:
              if (v107 != *(void *)TLVTag.TAG_9F1E_LENGTH.unsafeMutableAddressor())
              {
                swift_bridgeObjectRelease();
                sub_10002A544(4000, 0xD000000000000017, (void *)0x80000001001974E0, 0);
                swift_willThrow();

                char v126 = 0;
                int v127 = 0;
                int v125 = 1;
                goto LABEL_104;
              }
              id v145 = v213;
              id v146 = [v213 interfaceDeviceSerial];
              uint64_t v147 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v149 = v148;

              v4[12] = v147;
              v4[13] = v149;
              id v150 = [v145 transactionId];
              unint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v153 = v152;

              v4[16] = v151;
              v4[17] = v153;
              swift_bridgeObjectRetain();
              unint64_t v154 = v153;
              id v155 = v145;
              uint64_t v156 = sub_100114E24(v151, v154);
              unint64_t v158 = v157;
              uint64_t v40 = Data.sha256Digest.getter(v156, v157);
              unint64_t v105 = v159;
              sub_100006628(v156, v158);
              v4[19] = Data.subdata(in:)();
              v4[20] = v160;
              id v161 = [v155 preferredSchemes];
              if (v161)
              {
                uint64_t v162 = v161;
                uint64_t v163 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

                unint64_t v108 = v163[2];
                if (v108)
                {
                  if (v108 <= 4)
                  {
                    os_log_t v230 = v4;
                    swift_bridgeObjectRetain();
                    os_log_type_t v4 = v163;
                    unint64_t v107 = v163[4];
                    unint64_t p_ivar_lyt = v163[5];
                    switch(p_ivar_lyt >> 62)
                    {
                      case 1uLL:
                        if (__OFSUB__(HIDWORD(v107), v107)) {
                          goto LABEL_183;
                        }
                        uint64_t v174 = HIDWORD(v107) - (int)v107;
LABEL_139:
                        sub_1000065D0(v107, p_ivar_lyt);
LABEL_140:
                        if (v174 <= 4 || (unint64_t)v174 >= 0x11) {
                          goto LABEL_142;
                        }
                        sub_100006628(v107, p_ivar_lyt);
                        if (v108 == 1) {
                          goto LABEL_145;
                        }
                        goto LABEL_149;
                      case 2uLL:
                        uint64_t v188 = *(void *)(v107 + 16);
                        uint64_t v187 = *(void *)(v107 + 24);
                        uint64_t v174 = v187 - v188;
                        if (!__OFSUB__(v187, v188)) {
                          goto LABEL_139;
                        }
                        goto LABEL_184;
                      case 3uLL:
                        goto LABEL_142;
                      default:
                        uint64_t v174 = BYTE6(p_ivar_lyt);
                        goto LABEL_140;
                    }
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_10002A544(4000, 0xD00000000000002CLL, (void *)0x8000000100197580, 0);
                  swift_willThrow();

                  sub_100006628(v40, v105);
                  goto LABEL_127;
                }
                swift_bridgeObjectRelease();
              }
              goto LABEL_125;
            }
            __break(1u);
LABEL_176:
            if (__OFSUB__(HIDWORD(v107), v107)) {
              goto LABEL_183;
            }
            uint64_t v202 = HIDWORD(v107) - (int)v107;
LABEL_179:
            sub_1000065D0(v107, p_ivar_lyt);
LABEL_180:
            if (v202 < 5 || (unint64_t)v202 > 0x10) {
              goto LABEL_142;
            }
            sub_100006628(v107, p_ivar_lyt);
            break;
          case 2uLL:
            uint64_t v144 = *(void *)(v105 + 16);
            uint64_t v143 = *(void *)(v105 + 24);
            sub_100006628(v105, v107);
            unint64_t v107 = v143 - v144;
            if (!__OFSUB__(v143, v144)) {
              goto LABEL_118;
            }
            __break(1u);
LABEL_117:
            sub_100006628(v105, v107);
            unint64_t v107 = 0;
            goto LABEL_118;
          case 3uLL:
            goto LABEL_117;
          default:
            sub_100006628(v105, v107);
            unint64_t v107 = BYTE6(v107);
            goto LABEL_118;
        }
      }
LABEL_145:
      unint64_t v189 = v4;
      swift_bridgeObjectRelease();
      os_log_type_t v4 = v230;
      v230[18] = v189;
      swift_bridgeObjectRelease();
      id v155 = v213;
LABEL_125:
      unint64_t v229 = v105;
      id v164 = [v155 kernelToken];
      uint64_t v165 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v166 = v155;
      uint64_t v168 = v167;

      uint64_t v169 = v222;
      sub_100147FF8(v165, v168, v221, (unint64_t)v231, v233);
      if (v169)
      {
        swift_errorRetain();
        sub_10002A544(4004, 0, 0, v169);
        swift_errorRelease();
        swift_willThrow();

        sub_100006628(v40, v229);
        swift_errorRelease();
LABEL_127:
        int v127 = 0;
        int v125 = 1;
        char v126 = 1;
        goto LABEL_104;
      }
      os_log_t v230 = v4;
      uint64_t v170 = v4 + 21;
      memcpy(v170, v233, 0x120uLL);
      sub_100068C50((uint64_t)v233);
      unint64_t v171 = v217;
      sub_100147684(v217);
      sub_100062020((uint64_t)v233);
      uint64_t v173 = v219;
      uint64_t v172 = v220;
      v231 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 48);
      if (v231((uint64_t)v171, 1, v220) != 1)
      {
        uint64_t v175 = v218;
        (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v218, v171, v172);
        uint64_t v176 = v230;
        (*(void (**)(uint64_t, char *, uint64_t))(v173 + 16))((uint64_t)v230 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_tpid, v175, v172);
        memcpy(v234, v170, 0x120uLL);
        sub_100068C50((uint64_t)v234);
        uint64_t v177 = v216;
        sub_1001478C0(v216);
        sub_100062020((uint64_t)v234);
        sub_100068D5C((uint64_t)v177, (uint64_t)v176 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID);
        swift_retain_n();
        v178 = Logger.logObject.getter();
        LODWORD(v227) = static os_log_type_t.default.getter();
        os_log_t v228 = v178;
        if (os_log_type_enabled(v178, (os_log_type_t)v227))
        {
          uint64_t v179 = swift_slowAlloc();
          uint64_t v226 = swift_slowAlloc();
          uint64_t v235 = v226;
          *(_DWORD *)uint64_t v179 = 136315394;
          v180 = v230;
          UUID.uuidString.getter();
          uint64_t v181 = sub_100117604();
          v232[0] = sub_100005EB8(v181, v182, &v235);
          uint64_t v225 = (char *)&v232[1];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v179 + 12) = 2080;
          uint64_t v183 = (uint64_t)v180 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID;
          uint64_t v184 = (uint64_t)v215;
          sub_100068DC4((uint64_t)v180 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID, (uint64_t)v215);
          LODWORD(v180) = v231(v184, 1, v220);
          sub_10005F4F8(v184, (uint64_t *)&unk_1001DF8D0);
          if (v180 == 1)
          {
            unint64_t v185 = 0xE100000000000000;
            uint64_t v186 = 32;
          }
          else
          {
            v232[0] = 0x495054666173202CLL;
            v232[1] = 0xEB00000000203A44;
            if (v231(v183, 1, v220))
            {
              uint64_t v190 = 0;
              unint64_t v191 = 0xE000000000000000;
            }
            else
            {
              UUID.uuidString.getter();
              uint64_t v190 = sub_100117604();
              unint64_t v191 = v193;
            }
            unint64_t v194 = v191;
            String.append(_:)(*(Swift::String *)&v190);
            swift_bridgeObjectRelease();
            uint64_t v186 = v232[0];
            unint64_t v185 = v232[1];
          }
          v232[0] = sub_100005EB8(v186, v185, &v235);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_type_t v195 = v230;
          swift_release_n();
          swift_bridgeObjectRelease();
          os_log_t v196 = v228;
          _os_log_impl((void *)&_mh_execute_header, v228, (os_log_type_t)v227, "tpid: %s%s from SPRReadParameters kernelToken", (uint8_t *)v179, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          os_log_type_t v4 = v195;
          swift_slowDealloc();
          sub_100006628(v40, v229);

          (*(void (**)(char *, uint64_t))(v219 + 8))(v218, v220);
        }
        else
        {
          sub_100006628(v40, v229);
          os_log_type_t v4 = v230;
          swift_release_n();

          (*(void (**)(char *, uint64_t))(v219 + 8))(v218, v220);
        }
        return v4;
      }
      sub_10005F4F8((uint64_t)v171, (uint64_t *)&unk_1001DF8D0);
      sub_10002A544(4004, 0xD00000000000003ELL, (void *)0x8000000100197500, 0);
      swift_willThrow();

      sub_100006628(v40, v229);
      int v125 = 1;
      char v126 = 1;
      int v127 = 1;
LABEL_143:
      os_log_type_t v4 = v230;
LABEL_104:
      swift_bridgeObjectRelease();
      sub_100006628(v4[7], v4[8]);
      if (v125) {
        sub_100006628(v4[10], v4[11]);
      }
      if (v126)
      {
        sub_100006628(v4[12], v4[13]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100006628(v4[19], v4[20]);
        if (!v127) {
          goto LABEL_12;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if ((v127 & 1) == 0) {
          goto LABEL_12;
        }
      }
      memcpy(v232, v4 + 21, sizeof(v232));
      sub_100062020((uint64_t)v232);
LABEL_12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for ReaderConfiguration();
      swift_deallocPartialClassInstance();
      return v4;
    case 2uLL:
      uint64_t v110 = *(void *)(v105 + 16);
      uint64_t v109 = *(void *)(v105 + 24);
      sub_100006628(v105, v107);
      unint64_t v107 = v109 - v110;
      if (!__OFSUB__(v109, v110)) {
        goto LABEL_79;
      }
      __break(1u);
LABEL_78:
      sub_100006628(v105, v107);
      unint64_t v107 = 0;
      goto LABEL_79;
    case 3uLL:
      goto LABEL_78;
    default:
      sub_100006628(v105, v107);
      unint64_t v107 = BYTE6(v107);
      goto LABEL_79;
  }
}

uint64_t sub_10006829C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8, v3);
  _StringGuts.grow(_:)(320);
  v4._uint64_t countAndFlagsBits = 0x203A65646F6D7BLL;
  v4._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = SPRReaderMode.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x716552736176202CLL;
  v6._unint64_t object = (void *)0xEF203A7374736575;
  String.append(_:)(v6);
  sub_100006680(0, &qword_1001DC548);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x746E756F6D61202CLL;
  v8._unint64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = NSDecimal.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  v10._unint64_t object = (void *)0x80000001001976F0;
  String.append(_:)(v10);
  Swift::String v11 = Data.hexString()();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0xD000000000000013;
  v12._unint64_t object = (void *)0x8000000100197710;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = SPRTransactionType.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0xD000000000000018;
  v14._unint64_t object = (void *)0x8000000100197730;
  String.append(_:)(v14);
  Swift::String v15 = Data.hexString()();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0xD000000000000019;
  v16._unint64_t object = (void *)0x8000000100197750;
  String.append(_:)(v16);
  static String.Encoding.ascii.getter();
  uint64_t countAndFlagsBits = String.init(data:encoding:)();
  if (!object)
  {
    Swift::String v19 = Data.hexString()();
    unint64_t object = v19._object;
    uint64_t countAndFlagsBits = v19._countAndFlagsBits;
  }
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  v20._unint64_t object = (void *)0x8000000100197770;
  v20._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._unint64_t object = (void *)0x8000000100197790;
  v22._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 0xD000000000000011;
  v24._unint64_t object = (void *)0x80000001001977B0;
  String.append(_:)(v24);
  uint64_t v25 = v0[16];
  uint64_t v26 = (void *)v0[17];
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = v25;
  v27._unint64_t object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 0xD000000000000014;
  v28._unint64_t object = (void *)0x80000001001977D0;
  String.append(_:)(v28);
  uint64_t v29 = v0[18];
  if (v29)
  {
    int64_t v30 = *(void *)(v29 + 16);
    if (v30)
    {
      swift_bridgeObjectRetain();
      sub_10014B9C4(0, v30, 0);
      uint64_t v31 = (unint64_t *)(v29 + 40);
      do
      {
        uint64_t v32 = *(v31 - 1);
        unint64_t v33 = *v31;
        sub_1000065D0(v32, *v31);
        Swift::String v34 = Data.hexString()();
        sub_100006628(v32, v33);
        unint64_t v36 = _swiftEmptyArrayStorage[2];
        unint64_t v35 = _swiftEmptyArrayStorage[3];
        if (v36 >= v35 >> 1) {
          sub_10014B9C4(v35 > 1, v36 + 1, 1);
        }
        v31 += 2;
        _swiftEmptyArrayStorage[2] = v36 + 1;
        *(Swift::String *)&_swiftEmptyArrayStorage[2 * v36 + 4] = v34;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
    }
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    sub_10002B658();
    uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
    id v39 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v39 = (void *)0xE300000000000000;
    uint64_t v37 = 7104878;
  }
  v40._uint64_t countAndFlagsBits = v37;
  v40._unint64_t object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 0xD000000000000015;
  v41._unint64_t object = (void *)0x80000001001977F0;
  String.append(_:)(v41);
  Swift::String v42 = Data.hexString()();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 0x6C69666F7270202CLL;
  v43._unint64_t object = (void *)0xED0000203A444965;
  String.append(_:)(v43);
  uint64_t v44 = *(void *)((char *)v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID + 8);
  if (v44) {
    uint64_t v45 = *(void *)((char *)v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID);
  }
  else {
    uint64_t v45 = 0;
  }
  if (v44) {
    id v46 = *(void **)((char *)v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_profileID + 8);
  }
  else {
    id v46 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v47._uint64_t countAndFlagsBits = v45;
  v47._unint64_t object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 0x3A4641537369202CLL;
  v48._unint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v48);
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF)) {
    uint64_t v49 = 1702195828;
  }
  else {
    uint64_t v49 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_isSAF)) {
    unint64_t v50 = 0xE400000000000000;
  }
  else {
    unint64_t v50 = 0xE500000000000000;
  }
  unint64_t v51 = v50;
  String.append(_:)(*(Swift::String *)&v49);
  swift_bridgeObjectRelease();
  v52._uint64_t countAndFlagsBits = 0xD000000000000017;
  v52._unint64_t object = (void *)0x8000000100197810;
  String.append(_:)(v52);
  swift_bridgeObjectRetain();
  v53._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v54._uint64_t countAndFlagsBits = 0xD000000000000020;
  v54._unint64_t object = (void *)0x8000000100197830;
  String.append(_:)(v54);
  swift_bridgeObjectRetain();
  v55._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 125;
  v56._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  return 0;
}

uint64_t sub_1000688D4()
{
  swift_bridgeObjectRelease();
  sub_100006628(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_100006628(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_100006628(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100006628(*(void *)(v0 + 152), *(void *)(v0 + 160));
  memcpy(__dst, (const void *)(v0 + 168), 0x120uLL);
  sub_100062020((uint64_t)__dst);
  uint64_t v1 = v0 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_tpid;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10005F4F8(v0 + OBJC_IVAR____TtC9SPREngine19ReaderConfiguration_safTPID, (uint64_t *)&unk_1001DF8D0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000689DC()
{
  sub_1000688D4();

  return swift_deallocClassInstance();
}

uint64_t sub_100068A34()
{
  return type metadata accessor for ReaderConfiguration();
}

uint64_t type metadata accessor for ReaderConfiguration()
{
  uint64_t result = qword_1001DC360;
  if (!qword_1001DC360) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100068A88()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_100068BD4();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100068BD4()
{
  if (!qword_1001DC370)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001DC370);
    }
  }
}

uint64_t sub_100068C2C()
{
  return sub_10006829C();
}

uint64_t sub_100068C50(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 248);
  uint64_t v4 = *(void *)(a1 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000065D0(v4, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100068D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100068DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100068E2C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DC550);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DC550);
  if (qword_1001D9250 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1010);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100068EF4()
{
  if (qword_1001D90B8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DC550);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "appendEvent(_:attestationData:userInfo:)", v3, 2u);
    swift_slowDealloc();
  }

  __chkstk_darwin(v4, v5);
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_10006904C(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  sub_10006A590(a2, a3, a4);
  if (!v4)
  {
    Swift::String v6 = v5;
    Swift::String v7 = *(uint64_t (**)(void))(*v5 + 136);
    if (v7() <= 75000)
    {
      sub_100069F24();
      sub_1000E8C94(v6);
      if (qword_1001D90B8 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100003E78(v13, (uint64_t)qword_1001DC550);
      swift_retain_n();
      Swift::String v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v14, v15))
      {

        swift_release();
        swift_release_n();
        return;
      }
      Swift::String v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)Swift::String v16 = 136315138;
      v20[0] = v17;
      uint64_t v21 = (uint64_t)v6;
      type metadata accessor for TLV();
      swift_retain();
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v21 = sub_100005EB8(v18, v19, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, ".appendEvent(%s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      _StringGuts.grow(_:)(47);
      uint64_t v8 = swift_bridgeObjectRelease();
      v20[0] = 0xD000000000000016;
      v20[1] = 0x8000000100197940;
      ((void (*)(uint64_t))v7)(v8);
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._unint64_t object = (void *)0x8000000100197960;
      v10._uint64_t countAndFlagsBits = 0xD000000000000015;
      String.append(_:)(v10);
      uint64_t v21 = 75000;
      v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      sub_10006A994();
      swift_allocError();
      *(void *)uint64_t v12 = 0xD000000000000016;
      *(void *)(v12 + 8) = 0x8000000100197940;
      *(unsigned char *)(v12 + 16) = 1;
      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_1000693D8()
{
  if (qword_1001D90B8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DC550);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "readBatch()", v4, 2u);
    swift_slowDealloc();
  }

  sub_100003EB0(&qword_1001DC6D0);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v6;
  }
  return result;
}

uint64_t sub_10006950C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100069F24();
  if (!v2)
  {
    uint64_t v6 = sub_1000E8F90(*(void *)(a1 + 24));
    unint64_t v8 = v7;
    unint64_t v9 = v7 >> 62;
    uint64_t v10 = v6;
    switch(v7 >> 62)
    {
      case 1uLL:
        uint64_t v14 = (int)v6;
        uint64_t v15 = v6 >> 32;
        goto LABEL_10;
      case 2uLL:
        uint64_t v14 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
LABEL_10:
        if (v14 == v15) {
          goto LABEL_11;
        }
        goto LABEL_4;
      case 3uLL:
        goto LABEL_11;
      default:
        if ((v7 & 0xFF000000000000) == 0)
        {
LABEL_11:
          sub_100006628(v6, v7);
          uint64_t result = swift_release();
          *a2 = 0;
          a2[1] = 0;
          return result;
        }
LABEL_4:
        type metadata accessor for TLV();
        uint64_t v11 = *(void *)TLVTag.asn1Sequence.unsafeMutableAddressor();
        sub_1000065D0(v10, v8);
        uint64_t v12 = TLV.__allocating_init(tag:value:)(v11, v10, v8);
        if (v9)
        {
          if (v9 == 1)
          {
            sub_100006628(v10, v8);
            uint64_t result = swift_release();
            LODWORD(v13) = HIDWORD(v10) - v10;
            if (!__OFSUB__(HIDWORD(v10), v10))
            {
              uint64_t v13 = (int)v13;
LABEL_14:
              *a2 = v12;
              a2[1] = v13;
              return result;
            }
            __break(1u);
          }
          else
          {
            uint64_t v17 = *(void *)(v10 + 16);
            uint64_t v16 = *(void *)(v10 + 24);
            sub_100006628(v10, v8);
            uint64_t result = swift_release();
            uint64_t v13 = v16 - v17;
            if (!__OFSUB__(v16, v17)) {
              goto LABEL_14;
            }
          }
          __break(1u);
          JUMPOUT(0x10006969CLL);
        }
        sub_100006628(v10, v8);
        uint64_t result = swift_release();
        uint64_t v13 = BYTE6(v8);
        goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_1000696AC()
{
  if (qword_1001D90B8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DC550);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "removeBatch(_:)", v3, 2u);
    swift_slowDealloc();
  }

  __chkstk_darwin(v4, v5);
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000697FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_100069F24();
  if (!v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_10006A1AC();
    sub_1000E9410(a3, v7);
    sub_10006B4BC(v6);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000698A0()
{
  if (qword_1001D90B8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DC550);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "removeAll()", v3, 2u);
    swift_slowDealloc();
  }

  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000699B8()
{
  uint64_t result = sub_100069F24();
  if (!v0)
  {
    sub_1000E97B4();
    return swift_release();
  }
  return result;
}

uint64_t sub_100069A00()
{
  if (qword_1001D90B8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DC550);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "wrapEventsWithRTCReset()", v3, 2u);
    swift_slowDealloc();
  }

  __chkstk_darwin(v4, v5);
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_100069B64(void *a1)
{
  uint64_t v2 = a1[3];
  BOOL v3 = __OFSUB__(v2, 80);
  uint64_t v4 = v2 - 80;
  if (v3)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v5 = (unsigned __int128)(v4 * (__int128)3) >> 64;
  uint64_t v6 = 3 * v4;
  if (v5 != v6 >> 63)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x100069F14);
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 3;
  }
  uint64_t result = sub_100069F24();
  if (!v1)
  {
    uint64_t v10 = result;
    sub_10006A1AC();
    uint64_t v11 = v8 >> 2;
    uint64_t v12 = sub_1000E8F90(v11);
    unint64_t v14 = v13;
    uint64_t v31 = v10;
    uint64_t v30 = v11;
    while (1)
    {
      switch(v14 >> 62)
      {
        case 1uLL:
          uint64_t v15 = (int)v12;
          uint64_t v16 = v12 >> 32;
          goto LABEL_14;
        case 2uLL:
          uint64_t v15 = *(void *)(v12 + 16);
          uint64_t v16 = *(void *)(v12 + 24);
LABEL_14:
          if (v15 != v16) {
            goto LABEL_15;
          }
          goto LABEL_18;
        case 3uLL:
          goto LABEL_18;
        default:
          if ((v14 & 0xFF000000000000) == 0)
          {
LABEL_18:
            sub_100006628(v12, v14);
            sub_10006B4BC(v10);
            swift_release();
            return swift_release();
          }
LABEL_15:
          type metadata accessor for TLV();
          uint64_t v17 = *(void *)TLVTag.asn1Sequence.unsafeMutableAddressor();
          sub_1000065D0(v12, v14);
          uint64_t v18 = TLV.__allocating_init(tag:value:)(v17, v12, v14);
          uint64_t v19 = (*(uint64_t (**)(void))(*v18 + 168))();
          unint64_t v21 = v20;
          Swift::String v22 = Data.base64EncodedString(options:)(0);
          sub_100006628(v19, v21);
          sub_100006788(a1 + 14, a1[17]);
          if (qword_1001D9218 != -1) {
            swift_once();
          }
          id v23 = sub_1000D2610(byte_1001E0FBF);
          sub_100003EB0(&qword_1001D8A20);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1001861D0;
          *(void *)(inited + 32) = 0x65736142656D6974;
          *(void *)(inited + 40) = 0xE800000000000000;
          *(void *)(inited + 48) = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(inited + 56) = v25;
          *(void *)(inited + 64) = 0x73746E657665;
          *(void *)(inited + 72) = 0xE600000000000000;
          *(Swift::String *)(inited + 80) = v22;
          unint64_t v26 = sub_100004C48(inited);
          sub_10006A590(0x3E0301u, (unint64_t)v23, v26);
          Swift::String v28 = v27;
          swift_bridgeObjectRelease();
          sub_1000E8C94(v28);
          swift_release();
          swift_release();
          sub_100006628(v12, v14);
          uint64_t v10 = v31;
          uint64_t v12 = sub_1000E8F90(v30);
          unint64_t v14 = v29;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_100069F24()
{
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v18[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  unint64_t v14 = (char *)&v18[-1] - v13;
  sub_100006788((void *)(v0 + 32), *(void *)(v0 + 56));
  v18[0] = 0x69726F74696E6F6DLL;
  v18[1] = 0xEF73676F6C2D676ELL;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v1);
  sub_10000A87C();
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v14, v6);
  sub_100009300(v0 + 72, (uint64_t)v18);
  type metadata accessor for MPOCMonitorStore();
  swift_allocObject();
  uint64_t v15 = sub_1000E81CC((uint64_t)v11, 1, v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  return v15;
}

uint64_t sub_10006A1AC()
{
  uint64_t v31 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v29 - v17;
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)&v29 - v20;
  uint64_t v30 = v0;
  sub_100006788((void *)(v0 + 32), *(void *)(v0 + 56));
  sub_10008DC9C(v8);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10005F4F8((uint64_t)v8, (uint64_t *)&unk_1001DD410);
    sub_10006AB38();
    swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000029;
    *(void *)(v23 + 8) = 0x80000001001978F0;
    *(unsigned char *)(v23 + 16) = 1;
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v8, v9);
    v32[0] = 0x69726F74696E6F6DLL;
    v32[1] = 0xEF73676F6C2D676ELL;
    uint64_t v24 = v31;
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v31);
    sub_10000A87C();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v24);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v18, v9);
    sub_100009300(v30 + 72, (uint64_t)v32);
    type metadata accessor for MPOCMonitorStore();
    swift_allocObject();
    uint64_t v25 = v32[6];
    uint64_t v26 = sub_1000E81CC((uint64_t)v14, 0, v32);
    if (v25)
    {
      uint64_t v22 = *(void *)(v10 + 8);
      ((void (*)(char *, uint64_t))v22)(v18, v9);
      ((void (*)(char *, uint64_t))v22)(v21, v9);
    }
    else
    {
      uint64_t v22 = v26;
      Swift::String v27 = *(void (**)(char *, uint64_t))(v10 + 8);
      v27(v18, v9);
      v27(v21, v9);
    }
  }
  return v22;
}

void sub_10006A590(unsigned int a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[12];
  uint64_t v7 = v3[13];
  sub_100006788(v3 + 9, v8);
  double v9 = (*(double (**)(uint64_t))(*(void *)(v7 + 8) + 24))(v8) * 1000000.0;
  if ((~*(void *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v10 = (uint64_t)v9;
  if ((uint64_t)v9 <= 0)
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    void v22[3] = v10;
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    sub_10006A994();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000020;
    *(void *)(v19 + 8) = 0x80000001001978C0;
    *(unsigned char *)(v19 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    v22[0] = 0;
    swift_stdlib_random();
    uint64_t v20 = sub_1000209E8(a3);
    type metadata accessor for TLV();
    uint64_t v21 = *(void *)TLVTag.asn1Sequence.unsafeMutableAddressor();
    sub_100003EB0((uint64_t *)&unk_1001DA5A0);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_100189E80;
    uint64_t v12 = (uint64_t *)TLVTag.asn1OctetString.unsafeMutableAddressor();
    *(void *)(v11 + 32) = TLV.__allocating_init(tag:uint32:)(*v12, a1);
    LODWORD(v22[0]) = 0;
    unint64_t v13 = sub_10006A9E8();
    sub_10006AA3C();
    uint64_t v14 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
    *(void *)(v11 + 40) = TLV.__allocating_init<A>(tag:integer:)(v14, (char *)v22, &type metadata for Int32, v13);
    v22[0] = v10;
    unint64_t v15 = sub_10006AA90();
    sub_10006AAE4();
    uint64_t v16 = default argument 0 of IteratorProtocol<>.nextInteger(tag:)();
    *(void *)(v11 + 48) = TLV.__allocating_init<A>(tag:integer:)(v16, (char *)v22, &type metadata for Int64, v15);
    *(void *)(v11 + 56) = TLV.__allocating_init(tag:uint64:)(*v12, a2);
    uint64_t v17 = (uint64_t *)TLVTag.asn1Set.unsafeMutableAddressor();
    *(void *)(v11 + 64) = TLV.__allocating_init(tag:children:)(*v17, (uint64_t)v20);
    v22[0] = v11;
    specialized Array._endMutation()();
    TLV.__allocating_init(tag:children:)(v21, v22[0]);
  }
}

uint64_t sub_10006A86C()
{
  sub_100006520(v0 + 32);
  sub_100006520(v0 + 72);
  sub_100006520(v0 + 112);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MPOCDefaultMonitorLogger()
{
  return self;
}

uint64_t sub_10006A8E0()
{
  return sub_100068EF4();
}

uint64_t sub_10006A904()
{
  return sub_1000693D8();
}

uint64_t sub_10006A928()
{
  return sub_1000696AC();
}

uint64_t sub_10006A94C()
{
  return sub_1000698A0();
}

uint64_t sub_10006A970()
{
  return sub_100069A00();
}

unint64_t sub_10006A994()
{
  unint64_t result = qword_1001DC690;
  if (!qword_1001DC690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC690);
  }
  return result;
}

unint64_t sub_10006A9E8()
{
  unint64_t result = qword_1001DC698;
  if (!qword_1001DC698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC698);
  }
  return result;
}

unint64_t sub_10006AA3C()
{
  unint64_t result = qword_1001DC6A0;
  if (!qword_1001DC6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC6A0);
  }
  return result;
}

unint64_t sub_10006AA90()
{
  unint64_t result = qword_1001DC6A8;
  if (!qword_1001DC6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC6A8);
  }
  return result;
}

unint64_t sub_10006AAE4()
{
  unint64_t result = qword_1001DC6B0;
  if (!qword_1001DC6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC6B0);
  }
  return result;
}

unint64_t sub_10006AB38()
{
  unint64_t result = qword_1001DC6B8;
  if (!qword_1001DC6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC6B8);
  }
  return result;
}

uint64_t sub_10006AB8C()
{
  return sub_100069B64(*(void **)(v0 + 16));
}

void *sub_10006ABA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v24 = a2;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  unint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v14, v15);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v33 = type metadata accessor for Environment();
  Swift::String v34 = &off_1001C8D80;
  *(void *)&long long v32 = a1;
  uint64_t v30 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v31 = &off_1001C84C8;
  *(void *)&long long v29 = a3;
  uint64_t v27 = type metadata accessor for MPOCDefaultAttestationData();
  Swift::String v28 = &off_1001C8A68;
  *(void *)&long long v26 = a4;
  sub_10001F160();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_10006BA2C((unint64_t *)&qword_1001DA4F0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_10006BA74();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  a5[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a5[19] = 75000;
  if (qword_1001D90B8 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100003E78(v18, (uint64_t)qword_1001DC550);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "init(environment:maxBatchSize:secureTimeKeeper:attestationData:)", v21, 2u);
    swift_slowDealloc();
  }

  sub_10001F1F0(&v32, (uint64_t)(a5 + 4));
  a5[3] = v24;
  sub_10001F1F0(&v29, (uint64_t)(a5 + 9));
  sub_10001F1F0(&v26, (uint64_t)(a5 + 14));
  return a5;
}

void *sub_10006AF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = type metadata accessor for Environment();
  long long v32 = &off_1001C8D80;
  v30[0] = a1;
  uint64_t v28 = type metadata accessor for DefaultSecureTimeKeeper();
  long long v29 = &off_1001C84C8;
  v27[0] = a3;
  uint64_t v25 = type metadata accessor for MPOCDefaultAttestationData();
  long long v26 = &off_1001C8A68;
  v24[0] = a4;
  type metadata accessor for MPOCDefaultMonitorLogger();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = sub_10001F1A0((uint64_t)v30, v31);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_10001F1A0((uint64_t)v27, v28);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)&v24[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_10001F1A0((uint64_t)v24, v25);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (void *)((char *)&v24[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_10006ABA8(*v11, a2, *v15, *v19, v8);
  sub_100006520((uint64_t)v24);
  sub_100006520((uint64_t)v27);
  sub_100006520((uint64_t)v30);
  return v21;
}

void *sub_10006B1C0(uint64_t a1)
{
  sub_1000FAFAC((uint64_t)v24);
  if (v1)
  {
    swift_release();
  }
  else
  {
    uint64_t v4 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    uint64_t v5 = *(void *)(v4 + *(int *)(type metadata accessor for Settings() + 40));
    sub_1000F85DC((uint64_t)v22);
    sub_1000FD4F8((uint64_t)v20);
    uint64_t v7 = sub_10001F1A0((uint64_t)v24, v25);
    long long v26 = &v19;
    __chkstk_darwin(v7, v7);
    uint64_t v9 = (uint64_t *)&v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    uint64_t v11 = sub_10001F1A0((uint64_t)v22, v23);
    __chkstk_darwin(v11, v11);
    uint64_t v13 = (uint64_t *)&v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    uint64_t v15 = sub_10001F1A0((uint64_t)v20, v21);
    __chkstk_darwin(v15, v15);
    uint64_t v17 = (uint64_t *)&v20[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    uint64_t v2 = sub_10006AF20(*v9, v5, *v13, *v17);
    sub_100006520((uint64_t)v20);
    sub_100006520((uint64_t)v22);
    sub_100006520((uint64_t)v24);
    swift_release();
  }
  return v2;
}

void sub_10006B4BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  uint64_t v36 = v4;
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100003EB0(&qword_1001DC6C0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = (char *)&v35 - v19;
  __chkstk_darwin(v18, v21);
  uint64_t v37 = (uint64_t)&v35 - v22;
  sub_1000E99C4();
  if (!v1)
  {
    sub_1000E99C4();
    id v23 = [self defaultManager];
    uint64_t v24 = a1 + OBJC_IVAR____TtC9SPREngine16MPOCMonitorStore_fileUrl;
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();

    uint64_t v25 = v35;
    uint64_t v26 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v20, v24, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
    uint64_t v27 = *(int *)(v8 + 48);
    uint64_t v28 = v25;
    uint64_t v29 = (uint64_t)&v11[v27];
    sub_10006B948(v37, (uint64_t)v11);
    sub_10006B948((uint64_t)v20, v29);
    uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    if (v30((uint64_t)v11, 1, v28) == 1)
    {
      sub_10005F4F8((uint64_t)v20, (uint64_t *)&unk_1001DD410);
      if (v30(v29, 1, v28) == 1)
      {
        sub_10005F4F8((uint64_t)v11, (uint64_t *)&unk_1001DD410);
LABEL_10:
        sub_10005F4F8(v37, (uint64_t *)&unk_1001DD410);
        return;
      }
    }
    else
    {
      sub_10006B948((uint64_t)v11, (uint64_t)v16);
      if (v30(v29, 1, v28) != 1)
      {
        uint64_t v31 = v36;
        (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v7, v29, v28);
        sub_10006BA2C(&qword_1001DC6C8, (void (*)(uint64_t))&type metadata accessor for URL);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v33 = *(void (**)(char *, uint64_t))(v31 + 8);
        v33(v7, v28);
        sub_10005F4F8((uint64_t)v20, (uint64_t *)&unk_1001DD410);
        v33(v16, v28);
        sub_10005F4F8((uint64_t)v11, (uint64_t *)&unk_1001DD410);
        if (v32) {
          goto LABEL_10;
        }
LABEL_9:
        sub_10006AB38();
        swift_allocError();
        *(void *)uint64_t v34 = 0xD000000000000018;
        *(void *)(v34 + 8) = 0x8000000100197920;
        *(unsigned char *)(v34 + 16) = 1;
        swift_willThrow();
        goto LABEL_10;
      }
      sub_10005F4F8((uint64_t)v20, (uint64_t *)&unk_1001DD410);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v28);
    }
    sub_10005F4F8((uint64_t)v11, &qword_1001DC6C0);
    goto LABEL_9;
  }
}

uint64_t sub_10006B948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006B9B0()
{
  return sub_1000699B8();
}

uint64_t sub_10006B9CC()
{
  return sub_1000697FC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10006B9EC@<X0>(void *a1@<X8>)
{
  return sub_10006950C(v1, a1);
}

void sub_10006BA08()
{
  sub_10006904C(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10006BA2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006BA74()
{
  unint64_t result = qword_1001DA500;
  if (!qword_1001DA500)
  {
    sub_100003EF4((uint64_t *)&unk_1001DD350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA500);
  }
  return result;
}

uint64_t destroy for APDUResponse(uint64_t *a1)
{
  sub_100006628(*a1, a1[1]);
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];

  return sub_100006628(v2, v3);
}

uint64_t initializeWithCopy for APDUResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000065D0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_1000065D0(v7, v6);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for APDUResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000065D0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100006628(v6, v7);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  sub_1000065D0(v9, v8);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v8;
  sub_100006628(v10, v11);
  return a1;
}

__n128 initializeWithTake for APDUResponse(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for APDUResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100006628(v4, v5);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100006628(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for APDUResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for APDUResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for APDUResponse()
{
  return &type metadata for APDUResponse;
}

ValueMetadata *type metadata accessor for APDUSW()
{
  return &type metadata for APDUSW;
}

uint64_t sub_10006BD14(unint64_t a1, uint64_t a2, unint64_t a3, __int16 a4)
{
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  sub_100003EB0(&qword_1001D8778);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10018A620;
  *(unsigned char *)(v11 + 32) = a1;
  *(unsigned char *)(v11 + 33) = v8;
  *(unsigned char *)(v11 + 34) = v9;
  *(unsigned char *)(v11 + 35) = v10;
  uint64_t v12 = sub_10012CB58(v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v21 = v12;
  uint64_t v22 = v14;
  uint64_t v15 = sub_100003EB0((uint64_t *)&unk_1001DA5B0);
  uint64_t v19 = v15;
  unint64_t v16 = sub_100023888();
  unint64_t v20 = v16;
  LOBYTE(v18[0]) = 0;
  sub_100006788(v18, v15);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100006520((uint64_t)v18);
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 != a2 >> 32) {
        goto LABEL_7;
      }
      break;
    case 2uLL:
      if (*(void *)(a2 + 16) != *(void *)(a2 + 24)) {
        goto LABEL_7;
      }
      break;
    case 3uLL:
      break;
    default:
      if ((a3 & 0xFF000000000000) != 0)
      {
LABEL_7:
        uint64_t v19 = v15;
        unint64_t v20 = v16;
        LOBYTE(v18[0]) = BYTE5(a1);
        sub_100006788(v18, v15);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_100006520((uint64_t)v18);
        uint64_t v19 = v15;
        unint64_t v20 = v16;
        LOBYTE(v18[0]) = BYTE4(a1);
        sub_100006788(v18, v15);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_100006520((uint64_t)v18);
        Data.append(_:)();
      }
      break;
  }
  uint64_t v19 = v15;
  unint64_t v20 = v16;
  LOBYTE(v18[0]) = HIBYTE(a4);
  sub_100006788(v18, v15);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100006520((uint64_t)v18);
  uint64_t v19 = v15;
  unint64_t v20 = v16;
  LOBYTE(v18[0]) = a4;
  sub_100006788(v18, v15);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100006520((uint64_t)v18);
  return v21;
}

uint64_t sub_10006C13C(unint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v8 = a1 >> 8;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = a1 >> 24;
  sub_100003EB0(&qword_1001D8778);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10018A620;
  *(unsigned char *)(v11 + 32) = a1;
  *(unsigned char *)(v11 + 33) = v8;
  *(unsigned char *)(v11 + 34) = v9;
  *(unsigned char *)(v11 + 35) = v10;
  uint64_t v12 = sub_10012CB58(v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  uint64_t v20 = v12;
  uint64_t v21 = v14;
  switch(a3 >> 62)
  {
    case 1uLL:
      if ((int)a2 != a2 >> 32) {
        goto LABEL_7;
      }
      break;
    case 2uLL:
      if (*(void *)(a2 + 16) != *(void *)(a2 + 24)) {
        goto LABEL_7;
      }
      break;
    case 3uLL:
      break;
    default:
      if ((a3 & 0xFF000000000000) != 0)
      {
LABEL_7:
        uint64_t v18 = sub_100003EB0((uint64_t *)&unk_1001DA5B0);
        unint64_t v19 = sub_100023888();
        LOBYTE(v17[0]) = BYTE4(a1);
        sub_100006788(v17, v18);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_100006520((uint64_t)v17);
        Data.append(_:)();
      }
      break;
  }
  uint64_t v15 = sub_100003EB0((uint64_t *)&unk_1001DA5B0);
  uint64_t v18 = v15;
  unint64_t v19 = sub_100023888();
  LOBYTE(v17[0]) = a4;
  sub_100006788(v17, v15);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_100006520((uint64_t)v17);
  return v20;
}

uint64_t sub_10006C3CC()
{
  return Data.hexString()()._countAndFlagsBits;
}

_WORD *sub_10006C3D4@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

void sub_10006C3E4(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_10006C3F0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10006C404()
{
  __int16 v1 = *v0;
  sub_100003EB0((uint64_t *)&unk_1001DD3C0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100186100;
  *(void *)(v2 + 56) = &type metadata for UInt16;
  *(void *)(v2 + 64) = &protocol witness table for UInt16;
  *(_WORD *)(v2 + 32) = v1;

  return String.init(format:_:)();
}

uint64_t sub_10006C480(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10006C4D8();
  unint64_t v5 = sub_10006C52C();

  return Error<>._code.getter(a1, a2, v4, v5);
}

unint64_t sub_10006C4D8()
{
  unint64_t result = qword_1001DC6D8;
  if (!qword_1001DC6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC6D8);
  }
  return result;
}

unint64_t sub_10006C52C()
{
  unint64_t result = qword_1001DC6E0;
  if (!qword_1001DC6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC6E0);
  }
  return result;
}

uint64_t sub_10006C580@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = a2 >> 62;
  unint64_t v5 = 0xC000000000000000;
  __int16 v8 = 0;
  uint64_t result = 0;
  switch(v4)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x10006C690);
      }
      uint64_t v10 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v10 >= 2)
      {
        __int16 v13 = Data.subscript.getter();
        __int16 v8 = Data.subscript.getter() | (unsigned __int16)(v13 << 8);
        sub_1000065D0(a1, a2);
        sub_1000F3910(2, a1, a2, v14);
        uint64_t result = sub_100115410(v14[0], v14[1]);
      }
      else
      {
        uint64_t result = 0;
        __int16 v8 = 0;
      }
LABEL_9:
      *(void *)a3 = result;
      *(void *)(a3 + 8) = v5;
      *(_WORD *)(a3 + 16) = v8;
      *(void *)(a3 + 24) = a1;
      *(void *)(a3 + 32) = a2;
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_10006C6A0(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 60 == 15)
  {
    unsigned __int16 v10 = 0;
  }
  else
  {
    unsigned __int8 v11 = BYTE6(a6);
    switch(a6 >> 62)
    {
      case 1uLL:
        unsigned __int16 v10 = WORD2(a5) - a5;
        if (__OFSUB__(HIDWORD(a5), a5))
        {
          __break(1u);
          goto LABEL_8;
        }
        break;
      case 2uLL:
LABEL_8:
        uint64_t v13 = *(void *)(a5 + 16);
        uint64_t v12 = *(void *)(a5 + 24);
        BOOL v14 = __OFSUB__(v12, v13);
        unsigned __int16 v10 = v12 - v13;
        if (v14)
        {
          __break(1u);
          goto LABEL_11;
        }
        break;
      case 3uLL:
LABEL_11:
        sub_10000BF70(a5, a6);
        unsigned __int16 v10 = 0;
        break;
      default:
        sub_10000BF70(a5, a6);
        unsigned __int16 v10 = v11;
        break;
    }
  }
  return a1 | (unint64_t)(unsigned __int16)(a2 << 8) | ((unint64_t)a3 << 16) & 0xFFFF000000FFFFFFLL | (a4 << 24) | ((unint64_t)v10 << 32);
}

uint64_t sub_10006C7A4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (!v1) {
    return (uint64_t)v2;
  }
  id v39 = _swiftEmptyArrayStorage;
  sub_10014BA7C(0, v1, 0);
  uint64_t result = sub_100081384(a1);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  Swift::String v40 = &v36;
  uint64_t v27 = a1 + 64;
  int v26 = v5;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v11 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v5) {
      goto LABEL_26;
    }
    uint64_t v12 = *(void **)(*(void *)(a1 + 48) + 8 * v6);
    uint64_t v13 = (uint64_t)v40;
    sub_100006570(*(void *)(a1 + 56) + 32 * v6, (uint64_t)v40);
    uint64_t v35 = v12;
    *(void *)&v33[0] = v12;
    sub_100006570(v13, (uint64_t)v33 + 8);
    v31[0] = v33[0];
    v31[1] = v33[1];
    uint64_t v32 = v34;
    id v14 = v12;
    sub_10005F4F8((uint64_t)&v35, &qword_1001DC938);
    uint64_t v29 = *(void *)&v31[0];
    sub_100006570((uint64_t)v31 + 8, (uint64_t)v30);
    *(void *)&long long v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v37 + 1) = v15;
    sub_100006570((uint64_t)v31 + 8, (uint64_t)v28);
    sub_100006510(v28, v38);
    sub_100006520((uint64_t)v30);
    sub_10005F4F8((uint64_t)v31, &qword_1001DC938);
    uint64_t v2 = v39;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10014BA7C(0, v2[2] + 1, 1);
      uint64_t v2 = v39;
    }
    unint64_t v17 = v2[2];
    unint64_t v16 = v2[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t result = sub_10014BA7C(v16 > 1, v17 + 1, 1);
      uint64_t v2 = v39;
    }
    v2[2] = v17 + 1;
    uint64_t v18 = &v2[6 * v17];
    long long v19 = v37;
    long long v20 = v38[1];
    void v18[3] = v38[0];
    v18[4] = v20;
    v18[2] = v19;
    int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
    if (v6 >= v9) {
      goto LABEL_27;
    }
    uint64_t v8 = a1 + 64;
    uint64_t v21 = *(void *)(v27 + 8 * v11);
    if ((v21 & (1 << v6)) == 0) {
      goto LABEL_28;
    }
    int v5 = v26;
    if (*(_DWORD *)(a1 + 36) != v26) {
      goto LABEL_29;
    }
    unint64_t v22 = v21 & (-2 << (v6 & 0x3F));
    if (v22)
    {
      int64_t v9 = __clz(__rbit64(v22)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v10 = v1;
    }
    else
    {
      unint64_t v23 = v11 + 1;
      unint64_t v24 = (unint64_t)(v9 + 63) >> 6;
      int64_t v10 = v1;
      if (v11 + 1 < v24)
      {
        unint64_t v25 = *(void *)(v27 + 8 * v23);
        if (v25)
        {
LABEL_22:
          int64_t v9 = __clz(__rbit64(v25)) + (v23 << 6);
        }
        else
        {
          while (v24 - 2 != v11)
          {
            unint64_t v25 = *(void *)(a1 + 80 + 8 * v11++);
            if (v25)
            {
              unint64_t v23 = v11 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = v9;
    if (v7 == v10) {
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

double sub_10006CABC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (uint64_t v5 = sub_100161C4C(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_100006570(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

void *sub_10006CB20()
{
  if (qword_1001D90D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DCA18);
  unsigned int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "retrieveProfileIDs()", v5, 2u);
    swift_slowDealloc();
  }

  char v6 = (uint64_t *)TLVTag.readerConfigProfileIDs.unsafeMutableAddressor();
  uint64_t v7 = sub_1000B389C(*v6);
  if (v0) {
    return v1;
  }
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)v7 + 160))();
  unint64_t v9 = v8;
  if (!(v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_8;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10) {
    goto LABEL_18;
  }
LABEL_8:
  double result = (void *)sub_10014B9C4(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = 0;
    int64_t v1 = _swiftEmptyArrayStorage;
    unint64_t v22 = v9 & 0xC000000000000001;
    unint64_t v13 = v9;
    uint64_t v14 = v10;
    do
    {
      if (v22)
      {
        uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v15 = *(void *)(v9 + 8 * v12 + 32);
        swift_retain();
      }
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v15 + 152))();
      uint64_t v18 = v17;
      swift_release();
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      unint64_t v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1) {
        sub_10014B9C4(v19 > 1, v20 + 1, 1);
      }
      ++v12;
      _swiftEmptyArrayStorage[2] = v20 + 1;
      uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
      void v21[4] = v16;
      v21[5] = v18;
      unint64_t v9 = v13;
    }
    while (v14 != v12);
    swift_bridgeObjectRelease();
    swift_release();
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006CDCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v42 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v44 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v45 = 0;
  uint64_t v43 = v2;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v45 << 6);
LABEL_8:
      char v9 = *(unsigned char *)(*(void *)(v2 + 48) + v8);
      sub_100006724(*(void *)(v2 + 56) + 32 * v8, (uint64_t)v47 + 8, &qword_1001DD3F0);
      LOBYTE(v47[0]) = v9;
      goto LABEL_25;
    }
    int64_t v10 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x10006D300);
    }
    if (v10 < v44)
    {
      unint64_t v11 = *(void *)(v42 + 8 * v10);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v45 + 2;
      ++v45;
      if (v10 + 1 < v44)
      {
        unint64_t v11 = *(void *)(v42 + 8 * v12);
        if (v11)
        {
          ++v10;
LABEL_12:
          unint64_t v6 = (v11 - 1) & v11;
          unint64_t v8 = __clz(__rbit64(v11)) + (v10 << 6);
          int64_t v45 = v10;
          goto LABEL_8;
        }
        int64_t v13 = v10 + 2;
        int64_t v45 = v10 + 1;
        if (v10 + 2 < v44)
        {
          unint64_t v11 = *(void *)(v42 + 8 * v13);
          if (v11)
          {
            v10 += 2;
            goto LABEL_12;
          }
          while (1)
          {
            int64_t v10 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              goto LABEL_56;
            }
            if (v10 >= v44) {
              break;
            }
            unint64_t v11 = *(void *)(v42 + 8 * v10);
            ++v13;
            if (v11) {
              goto LABEL_12;
            }
          }
          int64_t v45 = v44 - 1;
        }
      }
    }
    unint64_t v6 = 0;
    memset(v47, 0, sizeof(v47));
    uint64_t v48 = 1;
LABEL_25:
    sub_100029CEC((uint64_t)v47, (uint64_t)v49, &qword_1001DC958);
    if (v50[3] == 1) {
      return swift_release();
    }
    uint64_t v14 = v49[0];
    sub_100029CEC((uint64_t)v50, (uint64_t)v47, &qword_1001DD3F0);
    uint64_t v15 = 0xE400000000000000;
    uint64_t v16 = 1701080909;
    switch(v14)
    {
      case 1:
        uint64_t v15 = 0xEB0000000070616DLL;
        uint64_t v16 = 0x746942746E657645;
        break;
      case 2:
        uint64_t v15 = 0x8000000100193520;
        uint64_t v16 = 0xD000000000000011;
        break;
      case 3:
        uint64_t v16 = 0xD000000000000018;
        uint64_t v15 = 0x8000000100193540;
        break;
      case 4:
        uint64_t v16 = 0x7A69536863746142;
        goto LABEL_32;
      case 5:
        uint64_t v16 = 0x646F43726F727245;
LABEL_32:
        uint64_t v15 = 0xE900000000000065;
        break;
      default:
        break;
    }
    sub_100006724((uint64_t)v47, (uint64_t)v46, &qword_1001DD3F0);
    if (v46[3])
    {
      sub_1000432DC();
      if (swift_dynamicCast())
      {
        uint64_t v17 = v50[6];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46[0] = *a1;
        uint64_t v19 = v46[0];
        unint64_t v20 = a1;
        *a1 = 0x8000000000000000;
        unint64_t v22 = sub_10000C4B0(v16, v15);
        uint64_t v23 = *(void *)(v19 + 16);
        BOOL v24 = (v21 & 1) == 0;
        uint64_t v25 = v23 + v24;
        if (__OFADD__(v23, v24)) {
          goto LABEL_54;
        }
        char v26 = v21;
        if (*(void *)(v19 + 24) >= v25)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v29 = (void *)v46[0];
            if ((v21 & 1) == 0) {
              goto LABEL_49;
            }
          }
          else
          {
            sub_10007FF74();
            uint64_t v29 = (void *)v46[0];
            if ((v26 & 1) == 0) {
              goto LABEL_49;
            }
          }
        }
        else
        {
          sub_10007CE0C(v25, isUniquelyReferenced_nonNull_native);
          unint64_t v27 = sub_10000C4B0(v16, v15);
          if ((v26 & 1) != (v28 & 1)) {
            goto LABEL_57;
          }
          unint64_t v22 = v27;
          uint64_t v29 = (void *)v46[0];
          if ((v26 & 1) == 0)
          {
LABEL_49:
            v29[(v22 >> 6) + 8] |= 1 << v22;
            long long v37 = (uint64_t *)(v29[6] + 16 * v22);
            *long long v37 = v16;
            v37[1] = v15;
            *(void *)(v29[7] + 8 * v22) = v17;
            uint64_t v38 = v29[2];
            BOOL v39 = __OFADD__(v38, 1);
            uint64_t v40 = v38 + 1;
            if (v39) {
              goto LABEL_55;
            }
            void v29[2] = v40;
            swift_bridgeObjectRetain();
            goto LABEL_51;
          }
        }
        uint64_t v36 = v29[7];

        *(void *)(v36 + 8 * v22) = v17;
LABEL_51:
        a1 = v20;
        uint64_t *v20 = (uint64_t)v29;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v43;
        goto LABEL_5;
      }
    }
    else
    {
      sub_10005F4F8((uint64_t)v46, &qword_1001DD3F0);
    }
    swift_bridgeObjectRetain();
    unint64_t v30 = sub_10000C4B0(v16, v15);
    char v32 = v31;
    swift_bridgeObjectRelease();
    if (v32)
    {
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v34 = *a1;
      v46[0] = *a1;
      *a1 = 0x8000000000000000;
      if ((v33 & 1) == 0)
      {
        sub_10007FF74();
        uint64_t v34 = v46[0];
      }
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void **)(*(void *)(v34 + 56) + 8 * v30);
      sub_10007EF68(v30, v34);
      *a1 = v34;

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_5:
    sub_10005F4F8((uint64_t)v47, &qword_1001DD3F0);
  }
}

uint64_t sub_10006D318(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v43 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v45 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v46 = 0;
  uint64_t v44 = v2;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v46 << 6);
LABEL_8:
      char v9 = *(unsigned char *)(*(void *)(v2 + 48) + v8);
      sub_100006724(*(void *)(v2 + 56) + 32 * v8, (uint64_t)v48 + 8, &qword_1001DD3F0);
      LOBYTE(v48[0]) = v9;
      goto LABEL_25;
    }
    int64_t v10 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x10006DA7CLL);
    }
    if (v10 < v45)
    {
      unint64_t v11 = *(void *)(v43 + 8 * v10);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v46 + 2;
      ++v46;
      if (v10 + 1 < v45)
      {
        unint64_t v11 = *(void *)(v43 + 8 * v12);
        if (v11)
        {
          ++v10;
LABEL_12:
          unint64_t v6 = (v11 - 1) & v11;
          unint64_t v8 = __clz(__rbit64(v11)) + (v10 << 6);
          int64_t v46 = v10;
          goto LABEL_8;
        }
        int64_t v13 = v10 + 2;
        int64_t v46 = v10 + 1;
        if (v10 + 2 < v45)
        {
          unint64_t v11 = *(void *)(v43 + 8 * v13);
          if (v11)
          {
            v10 += 2;
            goto LABEL_12;
          }
          while (1)
          {
            int64_t v10 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              goto LABEL_71;
            }
            if (v10 >= v45) {
              break;
            }
            unint64_t v11 = *(void *)(v43 + 8 * v10);
            ++v13;
            if (v11) {
              goto LABEL_12;
            }
          }
          int64_t v46 = v45 - 1;
        }
      }
    }
    unint64_t v6 = 0;
    memset(v48, 0, sizeof(v48));
    uint64_t v49 = 1;
LABEL_25:
    sub_100029CEC((uint64_t)v48, (uint64_t)v50, &qword_1001DC8C0);
    if (v51[3] == 1) {
      return swift_release();
    }
    uint64_t v14 = v50[0];
    sub_100029CEC((uint64_t)v51, (uint64_t)v48, &qword_1001DD3F0);
    unint64_t v15 = 0xEE00657A69534D41;
    uint64_t v16 = 0x4C536C656E72654BLL;
    switch(v14)
    {
      case 1:
        unint64_t v15 = 0xEF657A69534D414CLL;
        uint64_t v16 = 0x53656C69666F7250;
        break;
      case 2:
        uint64_t v16 = 0xD000000000000014;
        unint64_t v15 = 0x80000001001932E0;
        break;
      case 3:
        unint64_t v15 = 0xE800000000000000;
        uint64_t v16 = 0x44496C61626F6C47;
        break;
      case 4:
        uint64_t v16 = 0xD000000000000011;
        unint64_t v15 = 0x8000000100193300;
        break;
      case 5:
        unint64_t v15 = 0xED00006E6F697372;
        uint64_t v16 = 0x655674656C707041;
        break;
      case 6:
        uint64_t v16 = 0xD000000000000015;
        unint64_t v15 = 0x8000000100193320;
        break;
      case 7:
        unint64_t v15 = 0xED0000656C69666FLL;
        uint64_t v16 = 0x7250646564616F4CLL;
        break;
      case 8:
        unint64_t v15 = 0xE900000000000065;
        uint64_t v16 = 0x646F43726F727245;
        break;
      case 9:
        uint64_t v16 = 0xD000000000000010;
        unint64_t v15 = 0x8000000100193350;
        break;
      case 10:
        unint64_t v15 = 0xEF73757461745368;
        uint64_t v16 = 0x637465464D414C53;
        break;
      case 11:
        unint64_t v15 = 0xEF65646F43726F72;
        uint64_t v16 = 0x7245726576726553;
        break;
      case 12:
        uint64_t v16 = 0xD000000000000014;
        unint64_t v15 = 0x8000000100193390;
        break;
      case 13:
        uint64_t v16 = 0xD00000000000001ALL;
        unint64_t v15 = 0x80000001001933B0;
        break;
      case 14:
        uint64_t v16 = 0xD000000000000015;
        unint64_t v15 = 0x80000001001933D0;
        break;
      case 15:
        unint64_t v15 = 0xEC00000064656465;
        uint64_t v16 = 0x654E6C656E72654BLL;
        break;
      case 16:
        uint64_t v17 = "tatus";
        goto LABEL_44;
      case 17:
        unint64_t v15 = 0xED00006465646565;
        uint64_t v16 = 0x4E656C69666F7250;
        break;
      case 18:
        uint64_t v17 = "ed";
LABEL_44:
        unint64_t v15 = (unint64_t)v17 | 0x8000000000000000;
        uint64_t v16 = 0xD000000000000012;
        break;
      case 19:
        unint64_t v15 = 0xED00007375746174;
        uint64_t v16 = 0x5374736575716552;
        break;
      case 20:
        unint64_t v15 = 0xEC00000065646F43;
        uint64_t v16 = 0x726F727245464153;
        break;
      default:
        break;
    }
    sub_100006724((uint64_t)v48, (uint64_t)v47, &qword_1001DD3F0);
    if (v47[3])
    {
      sub_1000432DC();
      if (swift_dynamicCast())
      {
        uint64_t v18 = v51[6];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v47[0] = *a1;
        uint64_t v20 = v47[0];
        char v21 = a1;
        *a1 = 0x8000000000000000;
        unint64_t v23 = sub_10000C4B0(v16, v15);
        uint64_t v24 = *(void *)(v20 + 16);
        BOOL v25 = (v22 & 1) == 0;
        uint64_t v26 = v24 + v25;
        if (__OFADD__(v24, v25)) {
          goto LABEL_69;
        }
        char v27 = v22;
        if (*(void *)(v20 + 24) >= v26)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            unint64_t v30 = (void *)v47[0];
            if ((v22 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            sub_10007FF74();
            unint64_t v30 = (void *)v47[0];
            if ((v27 & 1) == 0) {
              goto LABEL_64;
            }
          }
        }
        else
        {
          sub_10007CE0C(v26, isUniquelyReferenced_nonNull_native);
          unint64_t v28 = sub_10000C4B0(v16, v15);
          if ((v27 & 1) != (v29 & 1)) {
            goto LABEL_72;
          }
          unint64_t v23 = v28;
          unint64_t v30 = (void *)v47[0];
          if ((v27 & 1) == 0)
          {
LABEL_64:
            v30[(v23 >> 6) + 8] |= 1 << v23;
            uint64_t v38 = (uint64_t *)(v30[6] + 16 * v23);
            *uint64_t v38 = v16;
            v38[1] = v15;
            *(void *)(v30[7] + 8 * v23) = v18;
            uint64_t v39 = v30[2];
            BOOL v40 = __OFADD__(v39, 1);
            uint64_t v41 = v39 + 1;
            if (v40) {
              goto LABEL_70;
            }
            v30[2] = v41;
            swift_bridgeObjectRetain();
            goto LABEL_66;
          }
        }
        uint64_t v37 = v30[7];

        *(void *)(v37 + 8 * v23) = v18;
LABEL_66:
        a1 = v21;
        uint64_t *v21 = (uint64_t)v30;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v44;
        goto LABEL_5;
      }
    }
    else
    {
      sub_10005F4F8((uint64_t)v47, &qword_1001DD3F0);
    }
    swift_bridgeObjectRetain();
    unint64_t v31 = sub_10000C4B0(v16, v15);
    char v33 = v32;
    swift_bridgeObjectRelease();
    if (v33)
    {
      char v34 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = *a1;
      v47[0] = *a1;
      *a1 = 0x8000000000000000;
      if ((v34 & 1) == 0)
      {
        sub_10007FF74();
        uint64_t v35 = v47[0];
      }
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void **)(*(void *)(v35 + 56) + 8 * v31);
      sub_10007EF68(v31, v35);
      *a1 = v35;

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_5:
    sub_10005F4F8((uint64_t)v48, &qword_1001DD3F0);
  }
}

uint64_t sub_10006DAD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v44 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v46 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v47 = 0;
  uint64_t v45 = v2;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v47 << 6);
LABEL_8:
      char v9 = *(unsigned char *)(*(void *)(v2 + 48) + v8);
      sub_100006724(*(void *)(v2 + 56) + 32 * v8, (uint64_t)v49 + 8, &qword_1001DD3F0);
      LOBYTE(v49[0]) = v9;
      goto LABEL_25;
    }
    int64_t v10 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x10006E1E0);
    }
    if (v10 < v46)
    {
      unint64_t v11 = *(void *)(v44 + 8 * v10);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v47 + 2;
      ++v47;
      if (v10 + 1 < v46)
      {
        unint64_t v11 = *(void *)(v44 + 8 * v12);
        if (v11)
        {
          ++v10;
LABEL_12:
          unint64_t v6 = (v11 - 1) & v11;
          unint64_t v8 = __clz(__rbit64(v11)) + (v10 << 6);
          int64_t v47 = v10;
          goto LABEL_8;
        }
        int64_t v13 = v10 + 2;
        int64_t v47 = v10 + 1;
        if (v10 + 2 < v46)
        {
          unint64_t v11 = *(void *)(v44 + 8 * v13);
          if (v11)
          {
            v10 += 2;
            goto LABEL_12;
          }
          while (1)
          {
            int64_t v10 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              goto LABEL_74;
            }
            if (v10 >= v46) {
              break;
            }
            unint64_t v11 = *(void *)(v44 + 8 * v10);
            ++v13;
            if (v11) {
              goto LABEL_12;
            }
          }
          int64_t v47 = v46 - 1;
        }
      }
    }
    unint64_t v6 = 0;
    memset(v49, 0, sizeof(v49));
    uint64_t v50 = 1;
LABEL_25:
    sub_100029CEC((uint64_t)v49, (uint64_t)v51, &qword_1001DC960);
    if (v52[3] == 1) {
      return swift_release();
    }
    uint64_t v14 = v51[0];
    sub_100029CEC((uint64_t)v52, (uint64_t)v49, &qword_1001DD3F0);
    uint64_t v15 = 0xD000000000000015;
    unint64_t v16 = 0x8000000100192D20;
    switch(v14)
    {
      case 1:
        uint64_t v15 = 0xD000000000000010;
        uint64_t v17 = "applicationIdentifier";
        goto LABEL_47;
      case 2:
        uint64_t v15 = 0xD000000000000010;
        uint64_t v17 = "applicationLabel";
        goto LABEL_47;
      case 3:
        unint64_t v16 = 0xE800000000000000;
        uint64_t v15 = 0x44496769666E6F63;
        break;
      case 4:
        uint64_t v15 = 0xD000000000000019;
        uint64_t v17 = "ciphertextLength";
        goto LABEL_47;
      case 5:
        unint64_t v16 = 0xEC00000065646F43;
        uint64_t v15 = 0x79636E6572727563;
        break;
      case 6:
        unint64_t v16 = 0xEE0065707954676ELL;
        uint64_t v15 = 0x696C6C6F50766D65;
        break;
      case 7:
        unint64_t v16 = 0xE900000000000065;
        uint64_t v15 = 0x646F43726F727265;
        break;
      case 8:
        unint64_t v16 = 0xEF6E6F6974616369;
        uint64_t v15 = 0x646E49726F727265;
        break;
      case 9:
        uint64_t v15 = 0x746361466D726F66;
        goto LABEL_41;
      case 10:
        uint64_t v15 = 0xD000000000000015;
        uint64_t v17 = "errorIndication";
        goto LABEL_47;
      case 11:
        uint64_t v18 = "issuerApplicationData";
        goto LABEL_50;
      case 12:
        unint64_t v16 = 0xE800000000000000;
        uint64_t v15 = 0x44496C656E72656BLL;
        break;
      case 13:
        unint64_t v16 = 0xED00007372616554;
        uint64_t v15 = 0x664F7265626D756ELL;
        break;
      case 14:
        uint64_t v18 = "ter";
        goto LABEL_50;
      case 15:
        uint64_t v15 = 0xD000000000000016;
        uint64_t v17 = "outcomeParameterSet";
        goto LABEL_47;
      case 16:
        uint64_t v18 = "provisionAppletVersion";
        goto LABEL_50;
      case 17:
        unint64_t v16 = 0xEC00000057535544;
        uint64_t v15 = 0x5041527472617473;
        break;
      case 18:
        unint64_t v16 = 0xED00007344494164;
        uint64_t v15 = 0x6574726F70707573;
        break;
      case 19:
        uint64_t v18 = "gth";
LABEL_50:
        unint64_t v16 = (unint64_t)v18 | 0x8000000000000000;
        uint64_t v15 = 0xD000000000000013;
        break;
      case 20:
        uint64_t v15 = 0x7272456B63617274;
LABEL_41:
        unint64_t v16 = 0xEA0000000000726FLL;
        break;
      case 21:
        uint64_t v15 = 0xD000000000000011;
        uint64_t v17 = "terminalCountryCode";
LABEL_47:
        unint64_t v16 = (unint64_t)v17 | 0x8000000000000000;
        break;
      default:
        break;
    }
    sub_100006724((uint64_t)v49, (uint64_t)v48, &qword_1001DD3F0);
    if (v48[3])
    {
      sub_1000432DC();
      if (swift_dynamicCast())
      {
        uint64_t v19 = v52[6];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v48[0] = *a1;
        uint64_t v21 = v48[0];
        char v22 = a1;
        *a1 = 0x8000000000000000;
        unint64_t v24 = sub_10000C4B0(v15, v16);
        uint64_t v25 = *(void *)(v21 + 16);
        BOOL v26 = (v23 & 1) == 0;
        uint64_t v27 = v25 + v26;
        if (__OFADD__(v25, v26)) {
          goto LABEL_72;
        }
        char v28 = v23;
        if (*(void *)(v21 + 24) >= v27)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            unint64_t v31 = (void *)v48[0];
            if ((v23 & 1) == 0) {
              goto LABEL_57;
            }
          }
          else
          {
            sub_10007FF74();
            unint64_t v31 = (void *)v48[0];
            if ((v28 & 1) == 0) {
              goto LABEL_57;
            }
          }
        }
        else
        {
          sub_10007CE0C(v27, isUniquelyReferenced_nonNull_native);
          unint64_t v29 = sub_10000C4B0(v15, v16);
          if ((v28 & 1) != (v30 & 1)) {
            goto LABEL_75;
          }
          unint64_t v24 = v29;
          unint64_t v31 = (void *)v48[0];
          if ((v28 & 1) == 0)
          {
LABEL_57:
            v31[(v24 >> 6) + 8] |= 1 << v24;
            char v32 = (uint64_t *)(v31[6] + 16 * v24);
            *char v32 = v15;
            v32[1] = v16;
            *(void *)(v31[7] + 8 * v24) = v19;
            uint64_t v33 = v31[2];
            BOOL v34 = __OFADD__(v33, 1);
            uint64_t v35 = v33 + 1;
            if (v34) {
              goto LABEL_73;
            }
            _OWORD v31[2] = v35;
            swift_bridgeObjectRetain();
            goto LABEL_67;
          }
        }
        uint64_t v42 = v31[7];

        *(void *)(v42 + 8 * v24) = v19;
LABEL_67:
        a1 = v22;
        *char v22 = (uint64_t)v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v45;
        goto LABEL_5;
      }
    }
    else
    {
      sub_10005F4F8((uint64_t)v48, &qword_1001DD3F0);
    }
    swift_bridgeObjectRetain();
    unint64_t v36 = sub_10000C4B0(v15, v16);
    char v38 = v37;
    swift_bridgeObjectRelease();
    if (v38)
    {
      char v39 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v40 = *a1;
      v48[0] = *a1;
      *a1 = 0x8000000000000000;
      if ((v39 & 1) == 0)
      {
        sub_10007FF74();
        uint64_t v40 = v48[0];
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = *(void **)(*(void *)(v40 + 56) + 8 * v36);
      sub_10007EF68(v36, v40);
      *a1 = v40;

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_5:
    sub_10005F4F8((uint64_t)v49, &qword_1001DD3F0);
  }
}

uint64_t sub_10006E238(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  unint64_t v6 = (char *)v55 + 8;
  unint64_t v7 = v58;
  int64_t v49 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v53 = 0;
  uint64_t v51 = v2;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      uint64_t v9 = (v5 - 1) & v5;
      unint64_t v10 = v8 | (v53 << 6);
LABEL_9:
      char v11 = *(unsigned char *)(*(void *)(v2 + 48) + v10);
      sub_100006724(*(void *)(v2 + 56) + 32 * v10, (uint64_t)v6, &qword_1001DD3F0);
      LOBYTE(v55[0]) = v11;
      goto LABEL_26;
    }
    int64_t v12 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x10006E9DCLL);
    }
    if (v12 < v49)
    {
      unint64_t v13 = *(void *)(v48 + 8 * v12);
      if (v13) {
        goto LABEL_13;
      }
      int64_t v14 = v53 + 2;
      ++v53;
      if (v12 + 1 < v49)
      {
        unint64_t v13 = *(void *)(v48 + 8 * v14);
        if (v13)
        {
          ++v12;
LABEL_13:
          uint64_t v9 = (v13 - 1) & v13;
          unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
          int64_t v53 = v12;
          goto LABEL_9;
        }
        int64_t v15 = v12 + 2;
        int64_t v53 = v12 + 1;
        if (v12 + 2 < v49)
        {
          unint64_t v13 = *(void *)(v48 + 8 * v15);
          if (v13)
          {
            v12 += 2;
            goto LABEL_13;
          }
          while (1)
          {
            int64_t v12 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_82;
            }
            if (v12 >= v49) {
              break;
            }
            unint64_t v13 = *(void *)(v48 + 8 * v12);
            ++v15;
            if (v13) {
              goto LABEL_13;
            }
          }
          int64_t v53 = v49 - 1;
        }
      }
    }
    uint64_t v9 = 0;
    memset(v55, 0, sizeof(v55));
    uint64_t v56 = 1;
LABEL_26:
    sub_100029CEC((uint64_t)v55, (uint64_t)v57, &qword_1001DC920);
    if (v58[3] == 1) {
      return swift_release();
    }
    uint64_t v16 = v57[0];
    sub_100029CEC((uint64_t)v7, (uint64_t)v55, &qword_1001DD3F0);
    unint64_t v17 = 0x8000000100192E00;
    uint64_t v18 = 0xD000000000000013;
    switch(v16)
    {
      case 1:
        uint64_t v18 = 0xD000000000000011;
        uint64_t v19 = "TransactionStatus";
        goto LABEL_57;
      case 2:
        unint64_t v17 = 0xE900000000000065;
        uint64_t v18 = 0x646F43726F727245;
        break;
      case 3:
        uint64_t v18 = 0xD000000000000016;
        uint64_t v19 = "StartTransactionStatus";
        goto LABEL_57;
      case 4:
        uint64_t v18 = 0xD000000000000011;
        uint64_t v19 = "cardSupportedAIDs";
        goto LABEL_57;
      case 5:
        uint64_t v18 = 0xD000000000000014;
        uint64_t v19 = "PaymentAppletVersion";
        goto LABEL_57;
      case 6:
        unint64_t v17 = 0xEE0044496769666ELL;
        uint64_t v18 = 0x6F436C61626F6C47;
        break;
      case 7:
        uint64_t v18 = 0xD000000000000011;
        uint64_t v19 = "TerminalProfileID";
        goto LABEL_57;
      case 8:
        unint64_t v17 = 0xEA00000000006D75;
        uint64_t v18 = 0x4E73736150534156;
        break;
      case 9:
        uint64_t v18 = 0xD00000000000001DLL;
        uint64_t v19 = "PaymentApplicationTypeAndPath";
        goto LABEL_57;
      case 10:
        uint64_t v18 = 0xD000000000000010;
        uint64_t v19 = "ApplicationLabel";
        goto LABEL_57;
      case 11:
        uint64_t v18 = 0xD000000000000015;
        uint64_t v19 = "ApplicationIdentifier";
        goto LABEL_57;
      case 12:
        uint64_t v18 = 0x746361466D726F46;
        goto LABEL_53;
      case 13:
        uint64_t v19 = "TerminalCountryCode";
        goto LABEL_57;
      case 14:
        unint64_t v17 = 0xE300000000000000;
        uint64_t v18 = 5396052;
        break;
      case 15:
        unint64_t v17 = 0xEF6E6F6974616369;
        uint64_t v18 = 0x646E49726F727245;
        break;
      case 16:
        uint64_t v19 = "OutcomeParameterSet";
        goto LABEL_57;
      case 17:
        uint64_t v18 = 0xD000000000000012;
        uint64_t v19 = "TimeoutReadPayment";
        goto LABEL_57;
      case 18:
        unint64_t v17 = 0xEE00534156646165;
        uint64_t v18 = 0x5274756F656D6954;
        break;
      case 19:
        uint64_t v18 = 0x7272456B63617254;
LABEL_53:
        unint64_t v17 = 0xEA0000000000726FLL;
        break;
      case 20:
        unint64_t v17 = 0xEC000000746E756FLL;
        uint64_t v18 = 0x43676E6972616554;
        break;
      case 21:
        uint64_t v18 = 0xD00000000000001DLL;
        uint64_t v19 = "ApplicationInterchangeProfile";
        goto LABEL_57;
      case 22:
        uint64_t v18 = 0xD000000000000019;
        uint64_t v19 = "CardProcessingRequirement";
        goto LABEL_57;
      case 23:
        uint64_t v19 = "OverrideAIDSupplied";
        goto LABEL_57;
      case 24:
        uint64_t v18 = 0xD000000000000011;
        uint64_t v19 = "payAppPollingType";
        goto LABEL_57;
      case 25:
        uint64_t v18 = 0xD000000000000012;
        uint64_t v19 = "EncryptedCHDLength";
        goto LABEL_57;
      case 26:
        uint64_t v18 = 0xD00000000000001BLL;
        uint64_t v19 = "TransactionResultDataLength";
        goto LABEL_57;
      case 27:
        uint64_t v19 = "RemovePINDigitCount";
        goto LABEL_57;
      case 28:
        uint64_t v18 = 0xD000000000000012;
        uint64_t v19 = "EnterDigitInterval";
LABEL_57:
        unint64_t v17 = (unint64_t)(v19 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    sub_100006724((uint64_t)v55, (uint64_t)v54, &qword_1001DD3F0);
    if (v54[3])
    {
      sub_1000432DC();
      if (swift_dynamicCast())
      {
        unint64_t v50 = v9;
        uint64_t v20 = v2;
        uint64_t v21 = v58[6];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v54[0] = *a1;
        uint64_t v23 = v54[0];
        *a1 = 0x8000000000000000;
        unint64_t v25 = sub_10000C4B0(v18, v17);
        uint64_t v26 = *(void *)(v23 + 16);
        BOOL v27 = (v24 & 1) == 0;
        uint64_t v28 = v26 + v27;
        if (__OFADD__(v26, v27)) {
          goto LABEL_80;
        }
        char v29 = v24;
        if (*(void *)(v23 + 24) >= v28)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            char v32 = (void *)v54[0];
            if ((v24 & 1) == 0) {
              goto LABEL_64;
            }
          }
          else
          {
            sub_10007FF74();
            char v32 = (void *)v54[0];
            if ((v29 & 1) == 0) {
              goto LABEL_64;
            }
          }
        }
        else
        {
          sub_10007CE0C(v28, isUniquelyReferenced_nonNull_native);
          unint64_t v30 = sub_10000C4B0(v18, v17);
          if ((v29 & 1) != (v31 & 1)) {
            goto LABEL_83;
          }
          unint64_t v25 = v30;
          char v32 = (void *)v54[0];
          if ((v29 & 1) == 0)
          {
LABEL_64:
            v32[(v25 >> 6) + 8] |= 1 << v25;
            uint64_t v33 = (uint64_t *)(v32[6] + 16 * v25);
            *uint64_t v33 = v18;
            v33[1] = v17;
            *(void *)(v32[7] + 8 * v25) = v21;
            uint64_t v34 = v32[2];
            BOOL v35 = __OFADD__(v34, 1);
            uint64_t v36 = v34 + 1;
            if (v35) {
              goto LABEL_81;
            }
            v32[2] = v36;
            swift_bridgeObjectRetain();
            goto LABEL_75;
          }
        }
        uint64_t v46 = v32[7];

        *(void *)(v46 + 8 * v25) = v21;
LABEL_75:
        *a1 = (uint64_t)v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v2 = v20;
        unint64_t v7 = v58;
        unint64_t v6 = (char *)v55 + 8;
        unint64_t v5 = v50;
        goto LABEL_6;
      }
      char v37 = v7;
      char v38 = v6;
      unint64_t v39 = v9;
    }
    else
    {
      char v37 = v7;
      char v38 = v6;
      unint64_t v39 = v9;
      sub_10005F4F8((uint64_t)v54, &qword_1001DD3F0);
    }
    swift_bridgeObjectRetain();
    unint64_t v40 = sub_10000C4B0(v18, v17);
    char v42 = v41;
    swift_bridgeObjectRelease();
    if (v42)
    {
      char v43 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = *a1;
      v54[0] = *a1;
      *a1 = 0x8000000000000000;
      if ((v43 & 1) == 0)
      {
        sub_10007FF74();
        uint64_t v44 = v54[0];
      }
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void **)(*(void *)(v44 + 56) + 8 * v40);
      sub_10007EF68(v40, v44);
      *a1 = v44;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unint64_t v5 = v39;
    unint64_t v6 = v38;
    unint64_t v7 = v37;
    uint64_t v2 = v51;
LABEL_6:
    sub_10005F4F8((uint64_t)v55, &qword_1001DD3F0);
  }
}

uint64_t sub_10006EA50(uint64_t *a1, uint64_t a2, char a3)
{
  return sub_10006EA68(a1, a2, a3);
}

uint64_t sub_10006EA68(uint64_t *a1, uint64_t a2, char a3)
{
  sub_100006788((void *)(a2 + 16), *(void *)(a2 + 40));
  sub_100042874(a3, *a1);
  swift_bridgeObjectRelease();
  *a1 = (uint64_t)&_swiftEmptyDictionarySingleton;
  uint64_t result = swift_bridgeObjectRelease();
  a1[1] = (uint64_t)&_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_10006EAE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10006EBAC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DC6E8);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DC6E8);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10006EC74()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DC700);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DC700);
  if (qword_1001D9008 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D40);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10006ED3C()
{
  uint64_t v1 = v0;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100003E78(v2, (uint64_t)qword_1001DC6E8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Configurator.deinit()", v5, 2u);
    swift_slowDealloc();
  }

  sub_100006520(v1 + 24);
  sub_100006520(v1 + 64);
  swift_release();
  sub_100006520(v1 + 112);
  sub_100006520(v1 + 152);
  sub_100006520(v1 + 192);
  sub_100006520(v1 + 232);
  swift_release();
  sub_100006520(v1 + 288);
  sub_100006520(v1 + 328);
  sub_100006520(v1 + 368);
  sub_100006520(v1 + 408);
  return v1;
}

uint64_t sub_10006EE7C()
{
  sub_10006ED3C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Configurator()
{
  return self;
}

void sub_10006EED4(uint64_t a1, void (*a2)(char *, void *, uint64_t), int a3, int a4)
{
  unint64_t v5 = v4;
  LODWORD(v658) = a4;
  int v654 = a3;
  v656 = (uint8_t *)a1;
  uint64_t v7 = type metadata accessor for OSSignpostError();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v647 = v7;
  uint64_t v648 = v8;
  uint64_t v10 = __chkstk_darwin(v7, v9);
  v605 = (char *)&v595 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  v607 = (char *)&v595 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  v621 = (char *)&v595 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  v606 = (char *)&v595 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  v622 = (char *)&v595 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  v634 = (char *)&v595 - v26;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  v616 = (char *)&v595 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  v598 = (char *)&v595 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  v601 = (char *)&v595 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  v610 = (char *)&v595 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  v640 = (char *)&v595 - v41;
  uint64_t v43 = __chkstk_darwin(v40, v42);
  uint64_t v45 = (char *)&v595 - v44;
  uint64_t v47 = __chkstk_darwin(v43, v46);
  v628 = (char *)&v595 - v48;
  uint64_t v50 = __chkstk_darwin(v47, v49);
  v638 = (char *)&v595 - v51;
  uint64_t v53 = __chkstk_darwin(v50, v52);
  v631 = (char *)&v595 - v54;
  uint64_t v56 = __chkstk_darwin(v53, v55);
  v613 = (char *)&v595 - v57;
  uint64_t v59 = __chkstk_darwin(v56, v58);
  v604 = (char *)&v595 - v60;
  __chkstk_darwin(v59, v61);
  v597 = (char *)&v595 - v62;
  uint64_t v63 = type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate();
  uint64_t v611 = *(void *)(v63 - 8);
  uint64_t v612 = v63;
  uint64_t v65 = __chkstk_darwin(v63, v64);
  v636 = (char *)&v595 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v65, v67);
  v615 = (char *)&v595 - v68;
  uint64_t v69 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v71 = __chkstk_darwin(v69 - 8, v70);
  v617 = (char *)&v595 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v71, v73);
  v643 = (char *)&v595 - v74;
  uint64_t v650 = type metadata accessor for UUID();
  uint64_t v646 = *(void *)(v650 - 8);
  uint64_t v76 = __chkstk_darwin(v650, v75);
  v632 = (char *)&v595 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __chkstk_darwin(v76, v78);
  v620 = (char *)&v595 - v80;
  uint64_t v82 = __chkstk_darwin(v79, v81);
  v603 = (char *)&v595 - v83;
  uint64_t v85 = __chkstk_darwin(v82, v84);
  v596 = (char *)&v595 - v86;
  uint64_t v88 = __chkstk_darwin(v85, v87);
  v637 = (char *)&v595 - v89;
  __chkstk_darwin(v88, v90);
  v645 = (void **)((char *)&v595 - v91);
  uint64_t v649 = type metadata accessor for Configurator.StoreAndForwardState();
  uint64_t v93 = __chkstk_darwin(v649, v92);
  v635 = (char *)&v595 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v93, v95);
  v641 = (char *)&v595 - v96;
  uint64_t v97 = type metadata accessor for OSSignpostID();
  uint64_t v98 = *(void *)(v97 - 8);
  uint64_t v100 = __chkstk_darwin(v97, v99);
  v630 = (char *)&v595 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = __chkstk_darwin(v100, v102);
  v626 = (char *)&v595 - v104;
  uint64_t v106 = __chkstk_darwin(v103, v105);
  v642 = (char *)&v595 - v107;
  uint64_t v109 = __chkstk_darwin(v106, v108);
  v625 = (char *)&v595 - v110;
  uint64_t v112 = __chkstk_darwin(v109, v111);
  v600 = (char *)&v595 - v113;
  uint64_t v115 = __chkstk_darwin(v112, v114);
  v602 = (char *)&v595 - v116;
  uint64_t v118 = __chkstk_darwin(v115, v117);
  v614 = (char *)&v595 - v119;
  uint64_t v121 = __chkstk_darwin(v118, v120);
  v629 = (char *)&v595 - v122;
  uint64_t v124 = __chkstk_darwin(v121, v123);
  v609 = (char *)&v595 - v125;
  uint64_t v127 = __chkstk_darwin(v124, v126);
  v627 = (char *)&v595 - v128;
  uint64_t v130 = __chkstk_darwin(v127, v129);
  v624 = (char *)&v595 - v131;
  uint64_t v133 = __chkstk_darwin(v130, v132);
  v618 = (char *)&v595 - v134;
  uint64_t v136 = __chkstk_darwin(v133, v135);
  v644 = (char *)&v595 - v137;
  uint64_t v139 = __chkstk_darwin(v136, v138);
  v633 = (char *)&v595 - v140;
  uint64_t v142 = __chkstk_darwin(v139, v141);
  v623 = (char *)&v595 - v143;
  uint64_t v145 = __chkstk_darwin(v142, v144);
  v608 = (char *)&v595 - v146;
  uint64_t v148 = __chkstk_darwin(v145, v147);
  v599 = (char *)&v595 - v149;
  uint64_t v151 = __chkstk_darwin(v148, v150);
  v651 = (void **)((char *)&v595 - v152);
  uint64_t v154 = __chkstk_darwin(v151, v153);
  uint64_t v156 = (char *)&v595 - v155;
  __chkstk_darwin(v154, v157);
  v659 = (char *)&v595 - v158;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v159 = type metadata accessor for Logger();
  uint64_t v160 = sub_100003E78(v159, (uint64_t)qword_1001DC6E8);
  swift_bridgeObjectRetain_n();
  os_log_t v663 = v160;
  id v161 = Logger.logObject.getter();
  os_log_type_t v162 = static os_log_type_t.default.getter();
  BOOL v163 = os_log_type_enabled(v161, v162);
  uint64_t v662 = v97;
  v661 = v156;
  v665 = v5;
  v619 = v45;
  v655 = a2;
  if (v163)
  {
    uint64_t v664 = v98;
    uint64_t v164 = swift_slowAlloc();
    v672[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v164 = 136315906;
    v670[0] = sub_100005EB8(0xD000000000000032, 0x8000000100197EC0, v672);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v164 + 12) = 2080;
    if (a2)
    {
      Swift::String v166 = String.redactedToken()();
      uint64_t countAndFlagsBits = v166._countAndFlagsBits;
      unint64_t object = v166._object;
    }
    else
    {
      unint64_t object = (void *)0xE300000000000000;
      uint64_t countAndFlagsBits = 7104878;
    }
    v670[0] = sub_100005EB8(countAndFlagsBits, (unint64_t)object, v672);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v164 + 22) = 1024;
    LODWORD(v670[0]) = v654 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v164 + 28) = 1024;
    LODWORD(v670[0]) = v658 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v161, v162, "%s -> token: %s, force: %{BOOL}d, enableStoreAndForward: %{BOOL}d", (uint8_t *)v164, 0x22u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v98 = v664;
    uint64_t v97 = v662;
    unint64_t v5 = v665;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t v168 = (uint64_t)v5[44];
  v652 = v5 + 41;
  sub_100006788(v5 + 41, v168);
  unsigned __int8 v169 = sub_10016E1FC();
  uint64_t v170 = v659;
  if ((v169 & 1) == 0)
  {
    unint64_t v171 = Logger.logObject.getter();
    os_log_type_t v172 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v171, v172))
    {
      uint64_t v173 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v173 = 0;
      _os_log_impl((void *)&_mh_execute_header, v171, v172, "Incorrect JCOP version", v173, 2u);
      unint64_t v5 = v665;
      swift_slowDealloc();
    }

    if (*((unsigned char *)v5 + 280) == 1)
    {
      uint64_t v174 = (uint64_t)v5[34];
      sub_100003EB0(&qword_1001D9B38);
      uint64_t v175 = swift_allocObject();
      *(_OWORD *)(v175 + 16) = xmmword_100186100;
      *(unsigned char *)(v175 + 32) = 19;
      *(void *)(v175 + 64) = &type metadata for Int;
      *(void *)(v175 + 40) = 5;
      uint64_t v176 = (os_unfair_lock_s *)sub_100104C38(v175);
      *(&v595 - 2) = (void *)__chkstk_darwin(v176, v177);
      uint64_t v179 = (uint64_t *)&v178[4];
      v180 = v178 + 8;
      os_unfair_lock_lock(v178 + 8);
      uint64_t v181 = v666;
      sub_100085FE4(v179);
      if (!v181)
      {
        os_unfair_lock_unlock(v180);
        uint64_t v182 = swift_bridgeObjectRelease();
        __chkstk_darwin(v182, v183);
        *(&v595 - 2) = (void *)v174;
        *((unsigned char *)&v595 - 8) = 3;
        unint64_t v185 = (uint64_t *)&v184[4];
        uint64_t v186 = v184 + 8;
        os_unfair_lock_lock(v184 + 8);
        sub_100085FC0(v185);
        os_unfair_lock_unlock(v186);
        sub_10002A974(2033, 0, 0, 0);
        swift_willThrow();
        return;
      }
LABEL_203:
      os_unfair_lock_unlock(v180);
      __break(1u);
      os_unfair_lock_unlock(v176);
      __break(1u);
      goto LABEL_204;
    }
  }
  if (qword_1001D90C8 != -1) {
    swift_once();
  }
  uint64_t v176 = (os_unfair_lock_s *)v97;
  uint64_t v187 = type metadata accessor for OSSignposter();
  uint64_t v188 = sub_100003E78(v187, (uint64_t)qword_1001DC700);
  static OSSignpostID.exclusive.getter();
  uint64_t v653 = v188;
  unint64_t v189 = OSSignposter.logHandle.getter();
  os_signpost_type_t v190 = static os_signpost_type_t.begin.getter();
  unint64_t v191 = v170;
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v192 = v98;
    v657 = *(void (**)(char *, char *, os_unfair_lock_s *))(v98 + 16);
    unint64_t v193 = (v98 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    unint64_t v194 = v661;
    v657(v661, v191, v176);
    os_log_type_t v195 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v195 = 0;
    os_signpost_id_t v196 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v189, v190, v196, "config-prepare-totalTime", "begin prepare", v195, 2u);
    unint64_t v5 = v665;
    swift_slowDealloc();

    uint64_t v197 = v194;
    (*(void (**)(char *, os_unfair_lock_s *))(v192 + 8))(v194, v176);
    uint64_t v198 = v657;
  }
  else
  {

    uint64_t v192 = v98;
    uint64_t v198 = *(void (**)(char *, char *, os_unfair_lock_s *))(v98 + 16);
    unint64_t v193 = (v98 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v197 = v661;
  }
  v657 = v198;
  unint64_t v639 = v193;
  v198(v197, v191, v176);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v660 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v199 = *(char **)(v192 + 8);
  uint64_t v664 = v192 + 8;
  v659 = v199;
  ((void (*)(char *, os_unfair_lock_s *))v199)(v191, v176);
  uint64_t v200 = (uint64_t)v5[32];
  v180 = (os_unfair_lock_s *)v5[33];
  v595 = v5 + 29;
  sub_100006788(v5 + 29, v200);
  uint64_t v201 = v176;
  if (qword_1001D9220 != -1) {
    swift_once();
  }
  uint64_t v174 = byte_1001E0FC0;
  unint64_t v202 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, os_unfair_lock_s *))&v180[2]._os_unfair_lock_opaque)(3, v174, v202, v200, v180);
  swift_bridgeObjectRelease();
  uint64_t v203 = (uint64_t)v655;
  if (!v655)
  {
    uint64_t v224 = v665;
LABEL_32:
    unint64_t v229 = Logger.logObject.getter();
    os_log_type_t v230 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v229, v230))
    {
      v231 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v231 = 0;
      _os_log_impl((void *)&_mh_execute_header, v229, v230, "kernel token nil or has no saftpid", v231, 2u);
      swift_slowDealloc();
    }

    if (v658)
    {
      v232 = Logger.logObject.getter();
      os_log_type_t v233 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v232, v233))
      {
        uint64_t v234 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v234 = 0;
        _os_log_impl((void *)&_mh_execute_header, v232, v233, "this kernel token doesn't support StoreAndForward", v234, 2u);
        swift_slowDealloc();
      }

      uint64_t v174 = v224[34];
      sub_100003EB0(&qword_1001D9B38);
      uint64_t v235 = swift_allocObject();
      *(_OWORD *)(v235 + 16) = xmmword_100186100;
      *(unsigned char *)(v235 + 32) = 19;
      *(void *)(v235 + 64) = &type metadata for Int;
      *(void *)(v235 + 40) = 13;
      uint64_t v176 = (os_unfair_lock_s *)sub_100104C38(v235);
      *(&v595 - 2) = (void *)__chkstk_darwin(v176, v236);
      uint64_t v179 = (uint64_t *)&v237[4];
      v180 = v237 + 8;
      os_unfair_lock_lock(v237 + 8);
      uint64_t v238 = v666;
      sub_100085FE4(v179);
      if (v238) {
        goto LABEL_203;
      }
      os_unfair_lock_unlock(v180);
      uint64_t v239 = swift_bridgeObjectRelease();
      __chkstk_darwin(v239, v240);
      *(&v595 - 2) = (void *)v174;
      *((unsigned char *)&v595 - 8) = 3;
      unint64_t v242 = (uint64_t *)&v241[4];
      uint64_t v243 = v241 + 8;
      os_unfair_lock_lock(v241 + 8);
      sub_100085FC0(v242);
      os_unfair_lock_unlock(v243);
      sub_100006788((void *)(v174 + 16), *(void *)(v174 + 40));
      sub_100042F68((uint64_t)&off_1001C56C8);
      sub_10002A974(2035, 0xD00000000000001CLL, (void *)0x8000000100197DD0, 0);
      swift_willThrow();
      unint64_t v244 = OSSignposter.logHandle.getter();
      uint64_t v245 = v644;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v246 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        uint64_t v247 = v638;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v249 = v647;
        uint64_t v248 = v648;
        uint64_t v250 = v201;
        if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v247, v647) == enum case for OSSignpostError.doubleEnd(_:))
        {
          unint64_t v251 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v248 + 8))(v247, v249);
          unint64_t v251 = "end prepare";
        }
        uint64_t v287 = v661;
        v288 = v644;
        v657(v661, v644, v250);
        v289 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v289 = 0;
        os_signpost_id_t v290 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v244, v246, v290, "config-prepare-totalTime", v251, v289, 2u);
        swift_slowDealloc();

        uint64_t v291 = (void (*)(char *, os_unfair_lock_s *))v659;
        ((void (*)(char *, os_unfair_lock_s *))v659)(v288, v250);
        v291(v287, v250);
        goto LABEL_127;
      }
      goto LABEL_126;
    }
    uint64_t v252 = v666;
    sub_100073B38(0);
    v666 = v252;
    if (v252)
    {
      unint64_t v244 = OSSignposter.logHandle.getter();
      uint64_t v245 = v642;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v253 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        v254 = v634;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v256 = v647;
        uint64_t v255 = v648;
        if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v254, v647) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v257 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v255 + 8))(v254, v256);
          v257 = "end prepare";
        }
        v339 = v661;
        v340 = v642;
        v657(v661, v642, v201);
LABEL_78:
        v341 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v341 = 0;
        os_signpost_id_t v342 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v244, v253, v342, "config-prepare-totalTime", v257, v341, 2u);
        swift_slowDealloc();

        v343 = (void (*)(char *, os_unfair_lock_s *))v659;
        ((void (*)(char *, os_unfair_lock_s *))v659)(v340, v201);
        v343(v339, v201);
LABEL_127:
        swift_release();
        return;
      }
      goto LABEL_126;
    }
    v275 = v641;
    swift_storeEnumTagMultiPayload();
    uint64_t v276 = v650;
    goto LABEL_51;
  }
  uint64_t v204 = (uint64_t)v665[44];
  id v205 = sub_100006788(v652, v204);
  uint64_t v206 = *(void *)(v204 - 8);
  __chkstk_darwin(v205, v205);
  uint64_t v179 = (uint64_t *)((char *)&v595 - ((v207 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v206 + 16))(v179);
  v208 = *(void **)(*v179 + 16);
  swift_bridgeObjectRetain();
  id v209 = [v208 serialNumber];
  if (!v209)
  {
    __break(1u);
    goto LABEL_203;
  }
  unint64_t v210 = v209;
  unint64_t v211 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v213 = v212;

  (*(void (**)(uint64_t *, uint64_t))(v206 + 8))(v179, v204);
  os_log_t v214 = v666;
  sub_100147FF8((uint64_t)v656, v203, v211, v213, v673);
  if (v214)
  {
    os_signpost_type_t v215 = OSSignposter.logHandle.getter();
    Swift::String v216 = v651;
    OSSignpostIntervalState.signpostID.getter();
    int v217 = static os_signpost_type_t.end.getter();
    char v218 = OS_os_log.signpostsEnabled.getter();
    uint64_t v219 = v662;
    if (v218)
    {
      swift_retain();
      uint64_t v220 = v640;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v222 = v647;
      uint64_t v221 = v648;
      int v223 = (*(uint64_t (**)(char *, uint64_t))(v648 + 88))(v220, v647);
      LODWORD(v666) = v217;
      if (v223 == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v269 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v221 + 8))(v220, v222);
        uint64_t v269 = "end prepare";
      }
      v270 = v661;
      v271 = v651;
      v657(v661, (char *)v651, (os_unfair_lock_s *)v219);
      v272 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v272 = 0;
      os_signpost_id_t v273 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v215, (os_signpost_type_t)v666, v273, "config-prepare-totalTime", v269, v272, 2u);
      swift_slowDealloc();

      uint64_t v274 = (void (*)(char *, uint64_t))v659;
      ((void (*)(void *, uint64_t))v659)(v271, v219);
      v274(v270, v219);
    }
    else
    {

      ((void (*)(void *, uint64_t))v659)(v216, v219);
    }
    goto LABEL_127;
  }
  v666 = 0;
  uint64_t v225 = v643;
  sub_1001478C0(v643);
  sub_100062020((uint64_t)v673);
  uint64_t v226 = v646;
  uint64_t v227 = v650;
  int v228 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v646 + 48))(v225, 1, v650);
  uint64_t v201 = (os_unfair_lock_s *)v662;
  if (v228 == 1)
  {
    sub_10005F4F8((uint64_t)v225, (uint64_t *)&unk_1001DF8D0);
    uint64_t v224 = v665;
    goto LABEL_32;
  }
  v258 = v645;
  (*(void (**)(void *, char *, uint64_t))(v226 + 32))(v645, v225, v227);
  v259 = v637;
  v655 = *(void (**)(char *, void *, uint64_t))(v226 + 16);
  v656 = (uint8_t *)(v226 + 16);
  v655(v637, v258, v227);
  uint64_t v260 = v227;
  uint64_t v261 = v226;
  v262 = Logger.logObject.getter();
  os_log_type_t v263 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v262, v263))
  {
    uint64_t v264 = swift_slowAlloc();
    v672[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v264 = 136315138;
    v652 = (void *)(v264 + 4);
    UUID.uuidString.getter();
    uint64_t v265 = v666;
    uint64_t v266 = sub_100117604();
    v666 = v265;
    v670[0] = sub_100005EB8(v266, v267, v672);
    v258 = v645;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v268 = *(const char **)(v261 + 8);
    ((void (*)(char *, uint64_t))v268)(v259, v650);
    _os_log_impl((void *)&_mh_execute_header, v262, v263, "kernel token contains SAF tpid: %s", (uint8_t *)v264, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v268 = *(const char **)(v261 + 8);
    ((void (*)(char *, uint64_t))v268)(v259, v260);
  }

  uint64_t v174 = (uint64_t)v665;
  sub_1000C86E4((uint64_t)v258, v672);
  uint64_t v292 = v672[1];
  uint64_t v293 = v672[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v292)
  {
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
  swift_bridgeObjectRelease();
  if (!v293)
  {
LABEL_69:
    v324 = Logger.logObject.getter();
    os_log_type_t v325 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v324, v325))
    {
      v326 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v326 = 0;
      _os_log_impl((void *)&_mh_execute_header, v324, v325, "Did not find SAF profile in cache", v326, 2u);
      swift_slowDealloc();
    }

    uint64_t v174 = *(void *)(v174 + 272);
    sub_100003EB0(&qword_1001D9B38);
    uint64_t v327 = swift_allocObject();
    *(_OWORD *)(v327 + 16) = xmmword_100186100;
    *(unsigned char *)(v327 + 32) = 19;
    *(void *)(v327 + 64) = &type metadata for Int;
    *(void *)(v327 + 40) = 11;
    uint64_t v176 = (os_unfair_lock_s *)sub_100104C38(v327);
    *(&v595 - 2) = (void *)__chkstk_darwin(v176, v328);
    uint64_t v179 = (uint64_t *)&v329[4];
    v180 = v329 + 8;
    os_unfair_lock_lock(v329 + 8);
    v330 = v666;
    sub_100085FE4(v179);
    if (v330) {
      goto LABEL_203;
    }
    os_unfair_lock_unlock(v180);
    uint64_t v331 = swift_bridgeObjectRelease();
    __chkstk_darwin(v331, v332);
    *(&v595 - 2) = (void *)v174;
    *((unsigned char *)&v595 - 8) = 3;
    v334 = (uint64_t *)&v333[4];
    v335 = v333 + 8;
    os_unfair_lock_lock(v333 + 8);
    sub_100085FC0(v334);
    os_unfair_lock_unlock(v335);
    sub_100006788((void *)(v174 + 16), *(void *)(v174 + 40));
    sub_100042F68((uint64_t)&off_1001C56A0);
    sub_10002A974(2035, 0xD000000000000029, (void *)0x8000000100197DF0, 0);
    swift_willThrow();
    ((void (*)(void *, uint64_t))v268)(v645, v650);
    v320 = OSSignposter.logHandle.getter();
    v321 = v633;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v322 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
      goto LABEL_111;
    }
    swift_retain();
    v323 = v631;
    goto LABEL_74;
  }
  uint64_t v294 = swift_bridgeObjectRelease();
  v296 = *(void **)(v174 + 272);
  if (v658)
  {
    LOBYTE(v672[0]) = 6;
    __chkstk_darwin(v294, v295);
    *(&v595 - 2) = v672;
    uint64_t v298 = (uint64_t)&v297[4];
    uint64_t v179 = (uint64_t *)&v297[8];
    os_unfair_lock_lock(v297 + 8);
    v299 = v666;
    sub_100085FFC(v298);
    if (v299) {
      goto LABEL_204;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v179);
    v300 = (void *)(v174 + 152);
    sub_100006788((void *)(v174 + 152), *(void *)(v174 + 176));
    if (sub_1001105CC())
    {
      v301 = Logger.logObject.getter();
      os_log_type_t v302 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v301, v302))
      {
        v303 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v303 = 0;
        _os_log_impl((void *)&_mh_execute_header, v301, v302, "Device rebooted since last online, cannot enter SAF mode", v303, 2u);
        swift_slowDealloc();
      }

      LOBYTE(v672[0]) = 6;
      __chkstk_darwin(v304, v305);
      *(&v595 - 2) = v672;
      v307 = (uint64_t *)&v306[4];
      v308 = v306 + 8;
      os_unfair_lock_lock(v306 + 8);
      sub_100086014(v307);
      os_unfair_lock_unlock(v308);
      sub_100003EB0(&qword_1001D9B38);
      uint64_t v309 = swift_allocObject();
      *(_OWORD *)(v309 + 16) = xmmword_100186100;
      *(unsigned char *)(v309 + 32) = 19;
      *(void *)(v309 + 64) = &type metadata for Int;
      *(void *)(v309 + 40) = 12;
      unint64_t v310 = sub_100104C38(v309);
      *(&v595 - 2) = (void *)__chkstk_darwin(v310, v311);
      v313 = (uint64_t *)&v312[4];
      v314 = v312 + 8;
      os_unfair_lock_lock(v312 + 8);
      sub_100085FE4(v313);
      os_unfair_lock_unlock(v314);
      uint64_t v315 = swift_bridgeObjectRelease();
      __chkstk_darwin(v315, v316);
      *(&v595 - 2) = v296;
      *((unsigned char *)&v595 - 8) = 3;
      v318 = (uint64_t *)&v317[4];
      v319 = v317 + 8;
      os_unfair_lock_lock(v317 + 8);
      sub_100085FC0(v318);
      os_unfair_lock_unlock(v319);
      sub_100006788(v296 + 2, v296[5]);
      sub_100042F68((uint64_t)&off_1001C5650);
      sub_10002A974(2035, 0xD000000000000021, (void *)0x8000000100197E90, 0);
      swift_willThrow();
      ((void (*)(void *, uint64_t))v268)(v645, v650);
      v320 = OSSignposter.logHandle.getter();
      v321 = v623;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v322 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
        goto LABEL_111;
      }
      swift_retain();
      v323 = v613;
    }
    else
    {
      v652 = v296;
      sub_100006788((void *)(v174 + 368), *(void *)(v174 + 392));
      uint64_t v398 = sub_100159F24();
      if (v399)
      {
        uint64_t v400 = v398;
        uint64_t v401 = v399;
        v651 = (void *)(v174 + 368);
        v658 = v268;
        v402 = (void *)(v174 + 112);
        sub_100006788((void *)(v174 + 112), *(void *)(v174 + 136));
        sub_1000D4970(v674);
        uint64_t v403 = v174;
        uint64_t v404 = v674[34];
        memcpy(v672, v674, 0x122uLL);
        sub_1000852DC((uint64_t)v674);
        swift_bridgeObjectRetain_n();
        sub_1000852DC((uint64_t)v674);
        sub_1000EE43C(v400, v401, v675);
        memcpy(v669, v675, sizeof(v669));
        v666 = (void **)v674[35];
        char v490 = v674[36];
        LODWORD(v644) = BYTE1(v674[36]);
        sub_100029CEC((uint64_t)v674, (uint64_t)v678, &qword_1001DA130);
        memcpy(v671, v669, sizeof(v671));
        BitString.init(data:unusedBits:)(v671);
        sub_100068C50((uint64_t)v675);
        sub_100029A40((uint64_t)v678);
        sub_100029CEC((uint64_t)v671, (uint64_t)v672, &qword_1001DA130);
        sub_100006788(v402, *(void *)(v403 + 136));
        sub_100029CEC((uint64_t)v671, (uint64_t)v670, &qword_1001DA130);
        v670[34] = v404;
        v670[35] = v666;
        LOBYTE(v670[36]) = v490;
        BYTE1(v670[36]) = (_BYTE)v644;
        memcpy(v679, v670, 0x122uLL);
        sub_1000852DC((uint64_t)v670);
        swift_bridgeObjectRelease();
        sub_1000D406C(v679);
        sub_100085484((uint64_t)v670);
        v491 = (void *)v403;
        sub_100073B38(1);
        v666 = 0;
        sub_100006788(v300, *(void *)(v403 + 176));
        uint64_t v497 = (uint64_t)v617;
        uint64_t v498 = v650;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v646 + 56))(v617, 1, 1, v650);
        char v499 = sub_10010F4B0(v497);
        sub_10005F4F8(v497, (uint64_t *)&unk_1001DF8D0);
        uint64_t v201 = (os_unfair_lock_s *)v662;
        if ((v499 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          sub_100062020((uint64_t)v675);
          v535 = Logger.logObject.getter();
          os_log_type_t v536 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v535, v536))
          {
            v537 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v537 = 0;
            _os_log_impl((void *)&_mh_execute_header, v535, v536, "failed attestation check, delete persisted attestation token, revert attestation state.", v537, 2u);
            swift_slowDealloc();
          }

          v538 = v665;
          sub_100006788(v651, (uint64_t)v665[49]);
          v539 = v645;
          sub_100159C24((uint64_t)v645, 0, 0);
          sub_100006788(v402, (uint64_t)v538[17]);
          sub_1000D406C(v674);
          v540 = v666;
          sub_100073B38(0);
          if (v540)
          {
            ((void (*)(void *, uint64_t))v658)(v539, v498);
            sub_100085484((uint64_t)v674);
            memcpy(v668, v672, 0x122uLL);
            sub_100085484((uint64_t)v668);
            v543 = OSSignposter.logHandle.getter();
            OSSignpostIntervalState.signpostID.getter();
            os_signpost_type_t v544 = static os_signpost_type_t.end.getter();
            if (OS_os_log.signpostsEnabled.getter())
            {
              swift_retain();
              v545 = v598;
              checkForErrorAndConsumeState(state:)();
              swift_release();
              uint64_t v547 = v647;
              uint64_t v546 = v648;
              if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v545, v647) == enum case for OSSignpostError.doubleEnd(_:))
              {
                v548 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v546 + 8))(v545, v547);
                v548 = "end prepare";
              }
              v579 = v661;
              v580 = v600;
              uint64_t v581 = v662;
              v657(v661, v600, (os_unfair_lock_s *)v662);
              v582 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v582 = 0;
              os_signpost_id_t v583 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v543, v544, v583, "config-prepare-totalTime", v548, v582, 2u);
              swift_slowDealloc();

              v584 = (void (*)(char *, uint64_t))v659;
              ((void (*)(char *, uint64_t))v659)(v580, v581);
              v584(v579, v581);
            }
            else
            {

              ((void (*)(char *, os_unfair_lock_s *))v659)(v600, v201);
            }
          }
          else
          {
            LOBYTE(v668[0]) = 6;
            v560 = v652;
            __chkstk_darwin(v541, v542);
            *(&v595 - 2) = v668;
            v562 = (uint64_t *)&v561[4];
            v563 = v561 + 8;
            os_unfair_lock_lock(v561 + 8);
            sub_100086014(v562);
            os_unfair_lock_unlock(v563);
            sub_100003EB0(&qword_1001D9B38);
            uint64_t v564 = swift_allocObject();
            *(_OWORD *)(v564 + 16) = xmmword_100186100;
            *(unsigned char *)(v564 + 32) = 19;
            *(void *)(v564 + 64) = &type metadata for Int;
            *(void *)(v564 + 40) = 8;
            unint64_t v565 = sub_100104C38(v564);
            *(&v595 - 2) = (void *)__chkstk_darwin(v565, v566);
            v568 = (uint64_t *)&v567[4];
            v569 = v567 + 8;
            os_unfair_lock_lock(v567 + 8);
            sub_100085FE4(v568);
            os_unfair_lock_unlock(v569);
            uint64_t v570 = swift_bridgeObjectRelease();
            __chkstk_darwin(v570, v571);
            *(&v595 - 2) = v560;
            *((unsigned char *)&v595 - 8) = 3;
            v573 = (uint64_t *)&v572[4];
            v574 = v572 + 8;
            os_unfair_lock_lock(v572 + 8);
            sub_100085FC0(v573);
            os_unfair_lock_unlock(v574);
            sub_100006788(v560 + 2, v560[5]);
            sub_100042F68((uint64_t)&off_1001C5600);
            sub_10002A974(2035, 0xD000000000000013, (void *)0x8000000100197E70, 0);
            swift_willThrow();
            sub_100085484((uint64_t)v674);
            ((void (*)(void *, uint64_t))v658)(v645, v650);
            memcpy(v668, v672, 0x122uLL);
            sub_100085484((uint64_t)v668);
            v575 = OSSignposter.logHandle.getter();
            OSSignpostIntervalState.signpostID.getter();
            os_signpost_type_t v576 = static os_signpost_type_t.end.getter();
            if (OS_os_log.signpostsEnabled.getter())
            {
              v666 = &v595;
              swift_retain();
              v577 = v597;
              checkForErrorAndConsumeState(state:)();
              swift_release();
              if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v577, v647) == enum case for OSSignpostError.doubleEnd(_:))
              {
                v578 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v648 + 8))(v597, v647);
                v578 = "end prepare";
              }
              v589 = v661;
              v590 = v599;
              uint64_t v591 = v662;
              v657(v661, v599, (os_unfair_lock_s *)v662);
              v592 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v592 = 0;
              os_signpost_id_t v593 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v575, v576, v593, "config-prepare-totalTime", v578, v592, 2u);
              swift_slowDealloc();

              v594 = (void (*)(char *, uint64_t))v659;
              ((void (*)(char *, uint64_t))v659)(v590, v591);
              v594(v589, v591);
            }
            else
            {

              ((void (*)(char *, os_unfair_lock_s *))v659)(v599, v201);
            }
          }
          goto LABEL_127;
        }
        sub_1000852DC((uint64_t)v670);
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v675);
        memcpy(v641, v679, 0x122uLL);
        swift_storeEnumTagMultiPayload();
        v500 = v491;
        uint64_t v501 = v491[49];
        v502 = v651;
        v503 = *(char **)(*sub_100006788(v651, v501) + 72);
        uint64_t v504 = *((void *)v503 + 2);
        v505 = v645;
        if (v504)
        {
          uint64_t v506 = (uint64_t)&v503[(*(unsigned __int8 *)(v611 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v611 + 80)];
          uint64_t v507 = *(void *)(v611 + 72);
          v644 = v503;
          swift_bridgeObjectRetain();
          uint64_t v508 = v612;
          uint64_t v509 = (uint64_t)v615;
          while (1)
          {
            char v510 = static UUID.== infix(_:_:)();
            sub_100085214(v506, v509, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
            if (v510)
            {
              char v511 = *(unsigned char *)(v509 + *(int *)(v508 + 20));
              sub_10008527C(v509, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
              if (v511)
              {
                swift_bridgeObjectRelease();
                v512 = v596;
                uint64_t v513 = v650;
                v655(v596, v505, v650);
                v514 = Logger.logObject.getter();
                os_log_type_t v515 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v514, v515))
                {
                  v516 = (uint8_t *)swift_slowAlloc();
                  v668[0] = swift_slowAlloc();
                  *(_DWORD *)v516 = 136315138;
                  v656 = v516 + 4;
                  UUID.uuidString.getter();
                  v517 = v666;
                  uint64_t v518 = sub_100117604();
                  v666 = v517;
                  uint64_t v667 = sub_100005EB8(v518, v519, v668);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  v520 = v512;
                  uint64_t v174 = (uint64_t)v658;
                  ((void (*)(char *, uint64_t))v658)(v520, v513);
                  _os_log_impl((void *)&_mh_execute_header, v514, v515, "The saftpid already isInSAFMode: %s", v516, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  v585 = v512;
                  uint64_t v174 = (uint64_t)v658;
                  ((void (*)(char *, uint64_t))v658)(v585, v513);
                }

                uint64_t v201 = (os_unfair_lock_s *)v662;
                v505 = v645;
                goto LABEL_198;
              }
            }
            else
            {
              sub_10008527C(v509, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
            }
            v506 += v507;
            if (!--v504)
            {
              swift_bridgeObjectRelease();
              v500 = v665;
              v502 = v651;
              break;
            }
          }
        }
        v549 = Logger.logObject.getter();
        os_log_type_t v550 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v549, v550))
        {
          v551 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v551 = 0;
          _os_log_impl((void *)&_mh_execute_header, v549, v550, "enter SAF mode...", v551, 2u);
          v502 = v651;
          swift_slowDealloc();
        }

        sub_100006788(v502, v500[49]);
        sub_100159908((uint64_t)v505);
        uint64_t v552 = v500[32];
        uint64_t v553 = v500[33];
        sub_100006788(v595, v552);
        sub_100003EB0(&qword_1001D9B20);
        uint64_t v554 = swift_allocObject();
        *(_OWORD *)(v554 + 16) = xmmword_100186100;
        *(void *)(v554 + 32) = 0x64697074666173;
        *(void *)(v554 + 40) = 0xE700000000000000;
        uint64_t v555 = UUID.uuidString.getter();
        *(void *)(v554 + 72) = &type metadata for String;
        *(void *)(v554 + 80) = &protocol witness table for String;
        *(void *)(v554 + 48) = v555;
        *(void *)(v554 + 56) = v556;
        unint64_t v557 = sub_100104AF4(v554);
        sub_100136224(35, v557, v552, v553);
        swift_bridgeObjectRelease();
        sub_100006788(v652 + 2, v652[5]);
        sub_100042F68((uint64_t)&off_1001C55D8);
        uint64_t v174 = (uint64_t)v658;
LABEL_198:
        LOBYTE(v667) = 6;
        __chkstk_darwin(v558, v559);
        *(&v595 - 2) = &v667;
        v587 = (uint64_t *)&v586[4];
        uint64_t v179 = (uint64_t *)&v586[8];
        os_unfair_lock_lock(v586 + 8);
        v588 = v666;
        sub_100086014(v587);
        v666 = v588;
        if (v588) {
          goto LABEL_204;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)v179);
        sub_100085484((uint64_t)v674);
        uint64_t v276 = v650;
        ((void (*)(void *, uint64_t))v174)(v505, v650);
        memcpy(v668, v672, 0x122uLL);
        sub_100085484((uint64_t)v668);
LABEL_178:
        uint64_t v224 = v665;
        v275 = v641;
LABEL_51:
        uint64_t v277 = (uint64_t)v275;
        uint64_t v278 = v635;
        sub_100085214(v277, (uint64_t)v635, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v280 = v646;
            uint64_t v281 = v632;
            (*(void (**)(char *, const void *, uint64_t))(v646 + 32))(v632, v278, v276);
            v282 = v666;
            sub_100073F7C();
            if (v282)
            {
              v666 = v282;
              (*(void (**)(char *, uint64_t))(v280 + 8))(v281, v276);
              sub_10008527C((uint64_t)v641, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
              uint64_t v283 = OSSignposter.logHandle.getter();
              uint64_t v284 = v626;
              OSSignpostIntervalState.signpostID.getter();
              os_signpost_type_t v285 = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                v286 = v622;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                uint64_t v395 = v647;
                uint64_t v394 = v648;
                if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v286, v647) == enum case for OSSignpostError.doubleEnd(_:))
                {
                  v396 = "[Error] Interval already ended";
LABEL_164:
                  v493 = v661;
                  v657(v661, v284, v201);
                  v494 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v494 = 0;
                  os_signpost_id_t v495 = OSSignpostID.rawValue.getter();
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v283, v285, v495, "config-prepare-totalTime", v396, v494, 2u);
                  swift_slowDealloc();

                  v496 = (void (*)(char *, os_unfair_lock_s *))v659;
                  ((void (*)(char *, os_unfair_lock_s *))v659)(v284, v201);
                  v496(v493, v201);
                  goto LABEL_127;
                }
                goto LABEL_163;
              }
              goto LABEL_158;
            }
            sub_100082D14(1, v676);
            v666 = 0;
            memcpy(v672, v676, 0x122uLL);
            sub_1000852DC((uint64_t)v676);
            v436 = Logger.logObject.getter();
            os_log_type_t v437 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v436, v437))
            {
              v438 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v438 = 0;
              _os_log_impl((void *)&_mh_execute_header, v436, v437, "persist attestation token for StoreAndForward", v438, 2u);
              swift_slowDealloc();
            }

            sub_100009300((uint64_t)(v224 + 46), (uint64_t)v671);
            sub_100006788(v671, v671[3]);
            sub_100029CEC((uint64_t)v672, (uint64_t)v668, &qword_1001DA130);
            sub_100029CEC((uint64_t)v668, (uint64_t)v670, &qword_1001DA130);
            int v439 = sub_100029A28((uint64_t)v670);
            uint64_t v440 = (uint64_t)v632;
            if (v439 == 1)
            {
              uint64_t v441 = 0;
              uint64_t v442 = 0;
            }
            else
            {
              uint64_t v441 = v672[32];
              uint64_t v442 = v672[33];
              swift_bridgeObjectRetain();
            }
            sub_100159C24(v440, v441, v442);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v646 + 8))(v440, v650);
            sub_100006520((uint64_t)v671);
          }
          else
          {
            v362 = v666;
            sub_100074CBC();
            v666 = v362;
            if (v362)
            {
              sub_10008527C((uint64_t)v641, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
              unint64_t v244 = OSSignposter.logHandle.getter();
              uint64_t v245 = v630;
              OSSignpostIntervalState.signpostID.getter();
              os_signpost_type_t v253 = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                v363 = v621;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                uint64_t v365 = v647;
                uint64_t v364 = v648;
                if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v363, v647) == enum case for OSSignpostError.doubleEnd(_:))
                {
                  v257 = "[Error] Interval already ended";
                }
                else
                {
                  (*(void (**)(char *, uint64_t))(v364 + 8))(v363, v365);
                  v257 = "end prepare";
                }
                v339 = v661;
                v340 = v630;
                v657(v661, v630, v201);
                goto LABEL_78;
              }
LABEL_126:

              ((void (*)(char *, os_unfair_lock_s *))v659)(v245, v201);
              goto LABEL_127;
            }
            if (v654)
            {
              char v397 = 1;
            }
            else
            {
              sub_100006788(v224 + 19, v224[22]);
              uint64_t v422 = (uint64_t)v617;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v646 + 56))(v617, 1, 1, v276);
              char v423 = sub_10010F4B0(v422);
              sub_10005F4F8(v422, (uint64_t *)&unk_1001DF8D0);
              char v397 = v423 ^ 1;
            }
            v424 = v666;
            sub_100082D14(v397 & 1, v677);
            v666 = v424;
            if (v424)
            {
              sub_10008527C((uint64_t)v641, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
              unint64_t v244 = OSSignposter.logHandle.getter();
              uint64_t v245 = v624;
              OSSignpostIntervalState.signpostID.getter();
              os_signpost_type_t v253 = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                v425 = v607;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                uint64_t v427 = v647;
                uint64_t v426 = v648;
                if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v425, v647) == enum case for OSSignpostError.doubleEnd(_:))
                {
                  v257 = "[Error] Interval already ended";
                }
                else
                {
                  (*(void (**)(char *, uint64_t))(v426 + 8))(v425, v427);
                  v257 = "end prepare";
                }
                v339 = v661;
                v340 = v624;
                v657(v661, v624, v201);
                goto LABEL_78;
              }
              goto LABEL_126;
            }
            memcpy(v672, v677, 0x122uLL);
            sub_1000852DC((uint64_t)v677);
          }
        }
        else
        {
          memcpy(v672, v278, 0x122uLL);
        }
        if ((v672[36] & 0x100) != 0)
        {
          type metadata accessor for JSONEncoder();
          swift_allocObject();
          os_log_t v663 = (os_log_t)JSONEncoder.init()();
          uint64_t v344 = v672[34];
          if (v672[34])
          {
            int64_t v345 = *(void *)(v672[34] + 16);
            v346 = _swiftEmptyArrayStorage;
            if (v345)
            {
              v671[0] = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain();
              sub_10014B9C4(0, v345, 0);
              v346 = (void *)v671[0];
              v658 = (const char *)sub_10008550C();
              v656 = (uint8_t *)v344;
              v347 = (uint64_t *)(v344 + 64);
              while (1)
              {
                uint64_t v348 = *(v347 - 3);
                uint64_t v349 = *(v347 - 2);
                uint64_t v350 = *(v347 - 1);
                uint64_t v351 = *v347;
                v668[0] = *(v347 - 4);
                v668[1] = v348;
                v668[2] = v349;
                v668[3] = v350;
                v668[4] = v351;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v352 = v666;
                uint64_t v353 = dispatch thunk of JSONEncoder.encode<A>(_:)();
                v666 = v352;
                if (v352) {
                  break;
                }
                uint64_t v355 = v353;
                unint64_t v356 = v354;
                Swift::String v357 = Data.base64EncodedString(options:)(0);
                v665 = (void **)v357._object;
                sub_100006628(v355, v356);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v671[0] = v346;
                unint64_t v359 = v346[2];
                unint64_t v358 = v346[3];
                if (v359 >= v358 >> 1)
                {
                  sub_10014B9C4(v358 > 1, v359 + 1, 1);
                  v346 = (void *)v671[0];
                }
                v347 += 5;
                v346[2] = v359 + 1;
                v360 = &v346[2 * v359];
                v361 = v665;
                v360[4] = v357._countAndFlagsBits;
                v360[5] = v361;
                --v345;
                uint64_t v201 = (os_unfair_lock_s *)v662;
                if (!v345)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_143;
                }
              }
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_10008527C((uint64_t)v641, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
              swift_bridgeObjectRelease();
              swift_release();
              memcpy(v670, v672, 0x122uLL);
              sub_100085484((uint64_t)v670);
              uint64_t v283 = OSSignposter.logHandle.getter();
              uint64_t v284 = v609;
              OSSignpostIntervalState.signpostID.getter();
              os_signpost_type_t v285 = static os_signpost_type_t.end.getter();
              if (OS_os_log.signpostsEnabled.getter())
              {
                swift_retain();
                v286 = v605;
                checkForErrorAndConsumeState(state:)();
                swift_release();
                uint64_t v395 = v647;
                uint64_t v394 = v648;
                int v492 = (*(uint64_t (**)(char *, uint64_t))(v648 + 88))(v286, v647);
                if (v492 == enum case for OSSignpostError.doubleEnd(_:))
                {
                  v396 = "[Error] Interval already ended";
                  goto LABEL_164;
                }
LABEL_163:
                (*(void (**)(char *, uint64_t))(v394 + 8))(v286, v395);
                v396 = "end prepare";
                goto LABEL_164;
              }
LABEL_158:

              ((void (*)(char *, os_unfair_lock_s *))v659)(v284, v201);
              goto LABEL_127;
            }
LABEL_143:
            v670[0] = v346;
            sub_100003EB0((uint64_t *)&unk_1001DA570);
            sub_10002B658();
            BidirectionalCollection<>.joined(separator:)();
            swift_bridgeObjectRelease();
          }
          sub_100029CEC((uint64_t)v672, (uint64_t)v671, &qword_1001DA130);
          sub_100029CEC((uint64_t)v671, (uint64_t)v668, &qword_1001DA130);
          if (sub_100029A28((uint64_t)v668) != 1) {
            swift_bridgeObjectRetain();
          }
          uint64_t v463 = (uint64_t)v641;
          swift_release();
          sub_10008527C(v463, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
          memcpy(v670, v672, 0x122uLL);
          sub_100085484((uint64_t)v670);
          v464 = OSSignposter.logHandle.getter();
          v465 = v629;
          OSSignpostIntervalState.signpostID.getter();
          LODWORD(v665) = static os_signpost_type_t.end.getter();
          if (OS_os_log.signpostsEnabled.getter())
          {
            os_log_t v663 = v464;
            swift_retain();
            v466 = v619;
            checkForErrorAndConsumeState(state:)();
            swift_release();
            uint64_t v468 = v647;
            uint64_t v467 = v648;
            if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v466, v647) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v469 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v467 + 8))(v466, v468);
              v469 = "end prepare";
            }
            v658 = v469;
            v470 = v629;
            v471 = v661;
            v657(v661, v629, (os_unfair_lock_s *)v662);
            v472 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v472 = 0;
            os_signpost_id_t v473 = OSSignpostID.rawValue.getter();
            os_log_t v474 = v663;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v663, (os_signpost_type_t)v665, v473, "config-prepare-totalTime", v658, v472, 2u);
            uint64_t v475 = v662;
            swift_slowDealloc();

            v476 = v470;
            v477 = (void (*)(char *, uint64_t))v659;
            ((void (*)(char *, uint64_t))v659)(v476, v475);
            v477(v471, v475);
          }
          else
          {

            ((void (*)(char *, uint64_t))v659)(v465, v662);
          }
          goto LABEL_127;
        }
        uint64_t v374 = v672[35];
        char v375 = v672[36];
        v376 = (void *)v224[34];
        sub_100003EB0(&qword_1001D9B38);
        uint64_t v377 = swift_allocObject();
        *(_OWORD *)(v377 + 16) = xmmword_100186100;
        *(unsigned char *)(v377 + 32) = 19;
        *(void *)(v377 + 64) = &type metadata for Int;
        *(void *)(v377 + 40) = 7;
        unint64_t v378 = sub_100104C38(v377);
        *(&v595 - 2) = (void *)__chkstk_darwin(v378, v379);
        v381 = (uint64_t *)&v380[4];
        uint64_t v174 = (uint64_t)&v380[8];
        os_unfair_lock_lock(v380 + 8);
        v382 = v666;
        sub_100085FE4(v381);
        if (v382) {
          goto LABEL_205;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)v174);
        uint64_t v383 = swift_bridgeObjectRelease();
        __chkstk_darwin(v383, v384);
        *(&v595 - 2) = v376;
        *((unsigned char *)&v595 - 8) = 3;
        v386 = (uint64_t *)&v385[4];
        v387 = v385 + 8;
        os_unfair_lock_lock(v385 + 8);
        sub_100085FC0(v386);
        os_unfair_lock_unlock(v387);
        v666 = (void **)sub_100136D54(v374, v375 & 1);
        swift_willThrow();
        sub_10008527C((uint64_t)v641, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
        memcpy(v670, v672, 0x122uLL);
        sub_100085484((uint64_t)v670);
        v320 = OSSignposter.logHandle.getter();
        v321 = v627;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v388 = static os_signpost_type_t.end.getter();
        char v389 = OS_os_log.signpostsEnabled.getter();
        v390 = v628;
        if (v389)
        {
          swift_retain();
          checkForErrorAndConsumeState(state:)();
          swift_release();
          uint64_t v392 = v647;
          uint64_t v391 = v648;
          int v393 = (*(uint64_t (**)(char *, uint64_t))(v648 + 88))(v390, v647);
          v665 = &v595;
          if (v393 == enum case for OSSignpostError.doubleEnd(_:))
          {
            v428 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v391 + 8))(v390, v392);
            v428 = "end prepare";
          }
          v429 = v661;
          v430 = v321;
          v431 = v321;
          uint64_t v432 = v662;
          v657(v661, v430, (os_unfair_lock_s *)v662);
          v433 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v433 = 0;
          os_signpost_id_t v434 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v320, v388, v434, "config-prepare-totalTime", v428, v433, 2u);
          swift_slowDealloc();

          v435 = (void (*)(char *, uint64_t))v659;
          ((void (*)(char *, uint64_t))v659)(v431, v432);
          v435(v429, v432);
          goto LABEL_127;
        }
LABEL_111:

        ((void (*)(char *, uint64_t))v659)(v321, v662);
        goto LABEL_127;
      }
      v443 = Logger.logObject.getter();
      os_log_type_t v444 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v443, v444))
      {
        v445 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v445 = 0;
        _os_log_impl((void *)&_mh_execute_header, v443, v444, "no persisted attestation token, need previous prepare call.", v445, 2u);
        swift_slowDealloc();
      }

      LOBYTE(v672[0]) = 6;
      v446 = v652;
      __chkstk_darwin(v447, v448);
      *(&v595 - 2) = v672;
      v450 = (uint64_t *)&v449[4];
      v451 = v449 + 8;
      os_unfair_lock_lock(v449 + 8);
      sub_100086014(v450);
      os_unfair_lock_unlock(v451);
      sub_100003EB0(&qword_1001D9B38);
      uint64_t v452 = swift_allocObject();
      *(_OWORD *)(v452 + 16) = xmmword_100186100;
      *(unsigned char *)(v452 + 32) = 19;
      *(void *)(v452 + 64) = &type metadata for Int;
      *(void *)(v452 + 40) = 9;
      unint64_t v453 = sub_100104C38(v452);
      *(&v595 - 2) = (void *)__chkstk_darwin(v453, v454);
      v456 = (uint64_t *)&v455[4];
      v457 = v455 + 8;
      os_unfair_lock_lock(v455 + 8);
      sub_100085FE4(v456);
      os_unfair_lock_unlock(v457);
      uint64_t v458 = swift_bridgeObjectRelease();
      __chkstk_darwin(v458, v459);
      *(&v595 - 2) = v446;
      *((unsigned char *)&v595 - 8) = 3;
      v461 = (uint64_t *)&v460[4];
      v462 = v460 + 8;
      os_unfair_lock_lock(v460 + 8);
      sub_100085FC0(v461);
      os_unfair_lock_unlock(v462);
      sub_100006788(v446 + 2, v446[5]);
      sub_100042F68((uint64_t)&off_1001C5628);
      sub_10002A974(2035, 0xD00000000000001FLL, (void *)0x8000000100197E20, 0);
      swift_willThrow();
      ((void (*)(void *, uint64_t))v268)(v645, v650);
      v320 = OSSignposter.logHandle.getter();
      v321 = v608;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v322 = static os_signpost_type_t.end.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0) {
        goto LABEL_111;
      }
      swift_retain();
      v323 = v604;
    }
LABEL_74:
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v337 = v647;
    uint64_t v336 = v648;
    if ((*(unsigned int (**)(char *, uint64_t))(v648 + 88))(v323, v647) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v338 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v336 + 8))(v323, v337);
      v338 = "end prepare";
    }
    v369 = v661;
    uint64_t v370 = v662;
    v657(v661, v321, (os_unfair_lock_s *)v662);
    v371 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v371 = 0;
    os_signpost_id_t v372 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v320, v322, v372, "config-prepare-totalTime", v338, v371, 2u);
    swift_slowDealloc();

    v373 = (void (*)(char *, uint64_t))v659;
    ((void (*)(char *, uint64_t))v659)(v321, v370);
    v373(v369, v370);
    goto LABEL_127;
  }
  v658 = v268;
  LOBYTE(v672[0]) = 7;
  v652 = v296;
  __chkstk_darwin(v294, v295);
  *(&v595 - 2) = v672;
  uint64_t v367 = (uint64_t)&v366[4];
  uint64_t v179 = (uint64_t *)&v366[8];
  os_unfair_lock_lock(v366 + 8);
  v368 = v666;
  sub_10001F050(v367);
  if (v368) {
    goto LABEL_204;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v179);
  sub_100073B38(0);
  v666 = 0;
  v655(v641, v258, v650);
  swift_storeEnumTagMultiPayload();
  v405 = (void *)(v174 + 368);
  uint64_t v406 = *(void *)(*sub_100006788((void *)(v174 + 368), *(void *)(v174 + 392)) + 72);
  uint64_t v174 = *(void *)(v406 + 16);
  if (!v174)
  {
LABEL_153:
    v478 = v620;
    uint64_t v479 = v650;
    v655(v620, v258, v650);
    v480 = Logger.logObject.getter();
    os_log_type_t v481 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v480, v481))
    {
      v482 = (uint8_t *)swift_slowAlloc();
      uint64_t v174 = swift_slowAlloc();
      v672[0] = v174;
      *(_DWORD *)v482 = 136315138;
      v656 = v482 + 4;
      UUID.uuidString.getter();
      v483 = v666;
      uint64_t v484 = sub_100117604();
      v670[0] = sub_100005EB8(v484, v485, v672);
      v258 = v645;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v486 = v479;
      v487 = v483;
      ((void (*)(char *, uint64_t))v658)(v620, v486);
      _os_log_impl((void *)&_mh_execute_header, v480, v481, "saftpid was not in SAF mode: %s", v482, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      ((void (*)(char *, uint64_t))v658)(v478, v479);

      v487 = v666;
    }
    goto LABEL_176;
  }
  uint64_t v407 = v406 + ((*(unsigned __int8 *)(v611 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v611 + 80));
  uint64_t v408 = *(void *)(v611 + 72);
  swift_bridgeObjectRetain();
  uint64_t v409 = v612;
  uint64_t v410 = (uint64_t)v636;
  while (1)
  {
    char v411 = static UUID.== infix(_:_:)();
    sub_100085214(v407, v410, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
    if (v411) {
      break;
    }
    sub_10008527C(v410, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
LABEL_115:
    v407 += v408;
    if (!--v174)
    {
      swift_bridgeObjectRelease();
      v258 = v645;
      goto LABEL_153;
    }
  }
  char v412 = *(unsigned char *)(v410 + *(int *)(v409 + 20));
  sub_10008527C(v410, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
  if ((v412 & 1) == 0) {
    goto LABEL_115;
  }
  swift_bridgeObjectRelease();
  v413 = v603;
  uint64_t v414 = v650;
  v655(v603, v645, v650);
  v415 = Logger.logObject.getter();
  os_log_type_t v416 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v415, v416))
  {
    v417 = (uint8_t *)swift_slowAlloc();
    v656 = (uint8_t *)swift_slowAlloc();
    v672[0] = (uint64_t)v656;
    *(_DWORD *)v417 = 136315138;
    v655 = (void (*)(char *, void *, uint64_t))(v417 + 4);
    UUID.uuidString.getter();
    v418 = v666;
    uint64_t v419 = sub_100117604();
    v666 = v418;
    v670[0] = sub_100005EB8(v419, v420, v672);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v658)(v413, v414);
    _os_log_impl((void *)&_mh_execute_header, v415, v416, "saftpid exit SAF mode: %s", v417, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    ((void (*)(char *, uint64_t))v658)(v413, v414);
  }

  v421 = v666;
  v521 = v665;
  v522 = sub_100006788(v405, (uint64_t)v665[49]);
  uint64_t v523 = *v522;
  uint64_t v524 = *(void *)(*v522 + 72);
  __chkstk_darwin(v522, v525);
  v258 = v645;
  *(&v595 - 2) = v645;
  swift_bridgeObjectRetain();
  v526 = v421;
  v527 = sub_10015878C((void (*)(uint64_t))sub_100085560, (uint64_t)(&v595 - 4), v524);
  v487 = v526;
  swift_bridgeObjectRelease();
  *(void *)(v523 + 72) = v527;
  swift_bridgeObjectRelease();
  sub_10015950C();
  uint64_t v528 = (uint64_t)v521[32];
  uint64_t v529 = (uint64_t)v521[33];
  sub_100006788(v595, v528);
  sub_100003EB0(&qword_1001D9B20);
  uint64_t v530 = swift_allocObject();
  *(_OWORD *)(v530 + 16) = xmmword_100186100;
  *(void *)(v530 + 32) = 0x64697074666173;
  *(void *)(v530 + 40) = 0xE700000000000000;
  uint64_t v531 = UUID.uuidString.getter();
  *(void *)(v530 + 72) = &type metadata for String;
  *(void *)(v530 + 80) = &protocol witness table for String;
  *(void *)(v530 + 48) = v531;
  *(void *)(v530 + 56) = v532;
  uint64_t v174 = sub_100104AF4(v530);
  sub_100136224(36, v174, v528, v529);
  swift_bridgeObjectRelease();
  sub_100006788(v652 + 2, v652[5]);
  sub_100042F68((uint64_t)&off_1001C5678);
LABEL_176:
  LOBYTE(v672[0]) = 7;
  __chkstk_darwin(v488, v489);
  *(&v595 - 2) = v672;
  v534 = (uint64_t *)&v533[4];
  uint64_t v179 = (uint64_t *)&v533[8];
  os_unfair_lock_lock(v533 + 8);
  sub_10001F06C(v534);
  v666 = v487;
  if (!v487)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)v179);
    uint64_t v276 = v650;
    ((void (*)(void *, uint64_t))v658)(v258, v650);
    uint64_t v201 = (os_unfair_lock_s *)v662;
    goto LABEL_178;
  }
LABEL_204:
  os_unfair_lock_unlock((os_unfair_lock_t)v179);
  __break(1u);
LABEL_205:
  os_unfair_lock_unlock((os_unfair_lock_t)v174);
  __break(1u);
}

void sub_100073B38(char a1)
{
  uint64_t v3 = v1;
  int v5 = a1 & 1;
  uint64_t v6 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0
    && (sub_100006788(v3 + 24, v3[27]),
        sub_1000238E4((uint64_t)v9),
        uint64_t v10 = type metadata accessor for Date(),
        int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10),
        sub_10005F4F8((uint64_t)v9, &qword_1001D9AE8),
        v11 == 1))
  {
    sub_10002A974(2039, 0xD00000000000003DLL, (void *)0x8000000100197D70, 0);
    swift_willThrow();
  }
  else
  {
    sub_100006788(v3 + 24, v3[27]);
    sub_100060578(v5);
    if (!v2)
    {
      sub_100006788(v3 + 19, v3[22]);
      sub_10010C4AC(v5);
      return;
    }
  }
  uint64_t v12 = 0;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003E78(v13, (uint64_t)qword_1001DC6E8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v33 = 0;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v35 = v17;
    if (v5) {
      uint64_t v18 = 0x656E696C66666FLL;
    }
    else {
      uint64_t v18 = 0x656E696C6E6FLL;
    }
    if (v5) {
      unint64_t v19 = 0xE700000000000000;
    }
    else {
      unint64_t v19 = 0xE600000000000000;
    }
    uint64_t v34 = sub_100005EB8(v18, v19, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to switch MPOCOperationMode to %s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v33;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v20 = v3[34];
  sub_100003EB0(&qword_1001D9B38);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  *(unsigned char *)(inited + 32) = 19;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 40) = 7;
  unint64_t v22 = sub_100104C38(inited);
  *(&v32 - 2) = __chkstk_darwin(v22, v23);
  uint64_t v25 = (uint64_t *)&v24[4];
  uint64_t v26 = v24 + 8;
  os_unfair_lock_lock(v24 + 8);
  sub_100085FE4(v25);
  os_unfair_lock_unlock(v26);
  if (v12)
  {
    __break(1u);
  }
  else
  {
    uint64_t v27 = swift_bridgeObjectRelease();
    __chkstk_darwin(v27, v28);
    *(&v32 - 2) = v20;
    *((unsigned char *)&v32 - 8) = 3;
    uint64_t v30 = (uint64_t *)&v29[4];
    uint64_t v31 = v29 + 8;
    os_unfair_lock_lock(v29 + 8);
    sub_100085FC0(v30);
    os_unfair_lock_unlock(v31);
    sub_10002A974(2029, 0, 0, 0);
    swift_willThrow();
    swift_errorRelease();
  }
}

uint64_t sub_100073F7C()
{
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v91 = *(void *)(v2 - 8);
  uint64_t v92 = v2;
  __chkstk_darwin(v2, v3);
  int v5 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v102 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v94 = (char *)&v88 - v13;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v93 = (char *)&v88 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v100 = (char *)&v88 - v19;
  __chkstk_darwin(v18, v20);
  unint64_t v22 = (char *)&v88 - v21;
  sub_100006788(v0 + 51, v0[54]);
  uint64_t v103 = sub_10013E5B0(201, 0x726564616572, 0xE600000000000000, 4);
  uint64_t v96 = v23;
  sub_100006788(v0 + 51, v0[54]);
  uint64_t v24 = sub_10013E06C(202, 0xD000000000000010, 0x8000000100197D50, 4);
  uint64_t v97 = v25;
  uint64_t v104 = *sub_100006788(v0 + 8, v0[11]);
  uint64_t v105 = 0x40F5180000000000;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v101 = v6;
  uint64_t v98 = v1;
  uint64_t v99 = v24;
  uint64_t v90 = v5;
  if (v106)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v102;
  }
  else
  {
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100003E78(v28, (uint64_t)qword_1001DC6E8);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 134217984;
      uint64_t v106 = 0x4038000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Certificate(s) expire before %f hour(s): Begin renewal", v31, 0xCu);
      swift_slowDealloc();
    }

    if (qword_1001D90C8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for OSSignposter();
    sub_100003E78(v32, (uint64_t)qword_1001DC700);
    static OSSignpostID.exclusive.getter();
    uint64_t v33 = OSSignposter.logHandle.getter();
    os_signpost_type_t v34 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v36 = v100;
      v35(v100, v22, v6);
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      os_signpost_id_t v38 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, v34, v38, "config-prepare-renewCertificate", "begin renew certificate", v37, 2u);
      uint64_t v6 = v101;
      swift_slowDealloc();

      uint64_t v39 = v36;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v36, v6);
    }
    else
    {

      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v39 = v100;
    }
    v35(v39, v22, v6);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v26 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    uint64_t v40 = v98;
    sub_100075280();
    uint64_t v27 = v102;
    if (v40)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return swift_release();
    }
    uint64_t v98 = 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(double))(v96 + 48))(86400.0) & 1) == 0)
  {
    uint64_t v89 = ObjectType;
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100003E78(v43, (uint64_t)qword_1001DC6E8);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = v93;
    if (v46)
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 134217984;
      uint64_t v106 = 0x4038000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "readerBlobSigner certificate expires before %f hour(s): Begin renewal", v48, 0xCu);
      uint64_t v6 = v101;
      swift_slowDealloc();
    }

    if (qword_1001D90C8 != -1) {
      swift_once();
    }
    uint64_t v95 = v26;
    uint64_t v49 = type metadata accessor for OSSignposter();
    sub_100003E78(v49, (uint64_t)qword_1001DC700);
    static OSSignpostID.exclusive.getter();
    uint64_t v50 = OSSignposter.logHandle.getter();
    os_signpost_type_t v51 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v53 = v100;
      v52(v100, v47, v6);
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      os_signpost_id_t v55 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, v51, v55, "config-prepare-renewCertificate", "begin renew certificate", v54, 2u);
      uint64_t v6 = v101;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v53, v6);
    }
    else
    {

      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v53 = v100;
    }
    v52(v53, v47, v6);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v26 = OSSignpostIntervalState.init(id:isOpen:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v47, v6);
    (*(void (**)(uint64_t))(v96 + 56))(v89);
    uint64_t v27 = v102;
  }
  uint64_t v56 = swift_getObjectType();
  uint64_t v57 = *(uint64_t (**)(double))(v97 + 48);
  uint64_t v96 = v56;
  char v58 = v57(86400.0);
  uint64_t v59 = v94;
  if (v58)
  {
    if (!v26)
    {
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    swift_retain();
  }
  else
  {
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_100003E78(v60, (uint64_t)qword_1001DC6E8);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 134217984;
      uint64_t v106 = 0x4038000000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "safBlobSigner certificate expires before %f hour(s): Begin renewal", v63, 0xCu);
      swift_slowDealloc();
    }

    if (qword_1001D90C8 != -1) {
      swift_once();
    }
    uint64_t v95 = v26;
    uint64_t v64 = type metadata accessor for OSSignposter();
    sub_100003E78(v64, (uint64_t)qword_1001DC700);
    static OSSignpostID.exclusive.getter();
    uint64_t v65 = OSSignposter.logHandle.getter();
    int v66 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      LODWORD(v93) = v66;
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v68 = v100;
      uint64_t v69 = v59;
      uint64_t v70 = v59;
      uint64_t v71 = v101;
      v67(v100, v69, v101);
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      os_signpost_id_t v73 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, (os_signpost_type_t)v93, v73, "config-prepare-renewCertificate", "begin renew certificate", v72, 2u);
      uint64_t v27 = v102;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v68, v71);
    }
    else
    {

      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v70 = v59;
      uint64_t v68 = v100;
      uint64_t v71 = v101;
    }
    v67(v68, v70, v71);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v74 = OSSignpostIntervalState.init(id:isOpen:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v70, v71);
    (*(void (**)(uint64_t))(v97 + 56))(v96);
    swift_retain();
    uint64_t v26 = v74;
  }
  if (qword_1001D90C8 != -1) {
    swift_once();
  }
  uint64_t v75 = type metadata accessor for OSSignposter();
  sub_100003E78(v75, (uint64_t)qword_1001DC700);
  uint64_t v76 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v77 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v78 = v27;
    uint64_t v95 = v26;
    swift_retain();
    uint64_t v79 = v90;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v81 = v91;
    uint64_t v80 = v92;
    if ((*(unsigned int (**)(char *, uint64_t))(v91 + 88))(v79, v92) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v82 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v80);
      uint64_t v82 = "end renew certificate";
    }
    uint64_t v83 = v100;
    uint64_t v84 = v101;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v100, v78, v101);
    uint64_t v85 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v85 = 0;
    os_signpost_id_t v86 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v76, v77, v86, "config-prepare-renewCertificate", v82, v85, 2u);
    swift_slowDealloc();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    uint64_t v87 = *(void (**)(char *, uint64_t))(v7 + 8);
    v87(v102, v84);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v87)(v83, v84);
  }
  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v101);
    return swift_release();
  }
}

uint64_t sub_100074CBC()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostError();
  uint64_t v55 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v54 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v15 = (char *)&v49 - v14;
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v49 - v17;
  sub_100006788((void *)(v0 + 64), *(void *)(v0 + 88));
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (v59 == 1)
  {
    uint64_t v58 = v1;
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v56 = v15;
    uint64_t v20 = type metadata accessor for Logger();
    sub_100003E78(v20, (uint64_t)qword_1001DC6E8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "certificates not valid, renew...", v23, 2u);
      swift_slowDealloc();
    }
    uint64_t v50 = v3;

    if (qword_1001D90C8 != -1) {
      swift_once();
    }
    uint64_t v52 = v11;
    uint64_t v53 = v2;
    uint64_t v57 = v6;
    uint64_t v24 = type metadata accessor for OSSignposter();
    uint64_t v25 = sub_100003E78(v24, (uint64_t)qword_1001DC700);
    static OSSignpostID.exclusive.getter();
    uint64_t v51 = v25;
    uint64_t v26 = OSSignposter.logHandle.getter();
    os_signpost_type_t v27 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v29 = v56;
      uint64_t v30 = v57;
      v28(v56, v18, v57);
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      os_signpost_id_t v32 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, v27, v32, "config-prepare-renewCertificate", "begin renew certificate", v31, 2u);
      swift_slowDealloc();

      uint64_t v33 = v29;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v29, v30);
    }
    else
    {

      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      uint64_t v33 = v56;
      uint64_t v30 = v57;
    }
    v28(v33, v18, v30);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    OSSignpostIntervalState.init(id:isOpen:)();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v34 = v7 + 8;
    uint64_t v35 = v36;
    v36(v18, v30);
    uint64_t v37 = v58;
    sub_100075280();
    if (v37)
    {
      return swift_release();
    }
    else
    {
      uint64_t v58 = 0;
      uint64_t v53 = v34;
      os_signpost_id_t v38 = OSSignposter.logHandle.getter();
      uint64_t v39 = v52;
      OSSignpostIntervalState.signpostID.getter();
      int v40 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        LODWORD(v51) = v40;
        swift_retain();
        uint64_t v41 = v54;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v42 = v55;
        uint64_t v43 = v50;
        if ((*(unsigned int (**)(char *, uint64_t))(v55 + 88))(v41, v50) == enum case for OSSignpostError.doubleEnd(_:))
        {
          uint64_t v44 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v43);
          uint64_t v44 = "end renew certificate";
        }
        os_log_type_t v45 = v56;
        uint64_t v46 = v57;
        v28(v56, v39, v57);
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        os_signpost_id_t v48 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, (os_signpost_type_t)v51, v48, "config-prepare-renewCertificate", v44, v47, 2u);
        swift_slowDealloc();

        v35(v39, v46);
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v35)(v45, v46);
      }
      else
      {

        v35(v39, v57);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_100075280()
{
  sub_100006788((void *)(v0 + 64), *(void *)(v0 + 88));
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (v1)
  {
    _s3__C4CodeOMa_11(0);
    uint64_t v31 = 2034;
    swift_errorRetain();
    sub_100084E34(&qword_1001D9840, _s3__C4CodeOMa_11);
    char v3 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if (v3)
    {
      if (qword_1001D90C0 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_100003E78(v4, (uint64_t)qword_1001DC6E8);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6)) {
        goto LABEL_13;
      }
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "Configurator.renewCertificates() operationNotAuthorized";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
      swift_slowDealloc();
LABEL_13:

      return swift_willThrow();
    }
    uint64_t v31 = 2000;
    swift_errorRetain();
    char v9 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if (v9)
    {
      if (qword_1001D90C0 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100003E78(v10, (uint64_t)qword_1001DC6E8);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6)) {
        goto LABEL_13;
      }
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "Configurator.renewCertificates() connectionProblem";
      goto LABEL_12;
    }
    uint64_t v31 = 2025;
    swift_errorRetain();
    char v11 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if (v11) {
      goto LABEL_17;
    }
    uint64_t v31 = v1;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      if (v30 == 2)
      {
LABEL_17:
        if (qword_1001D90C0 != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        sub_100003E78(v12, (uint64_t)qword_1001DC6E8);
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v15 = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Configurator.renewCertificates() cannotRenewCertificate", v15, 2u);
          swift_slowDealloc();
        }

        uint64_t v16 = 2025;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
LABEL_34:
        sub_10002A974(v16, v17, v18, 0);
        swift_willThrow();
        return swift_errorRelease();
      }
    }
    else
    {
      swift_errorRelease();
    }
    uint64_t v31 = 2999;
    swift_errorRetain();
    char v19 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if (v19)
    {
      if (qword_1001D90C0 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100003E78(v20, (uint64_t)qword_1001DC6E8);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v5, v6)) {
        goto LABEL_13;
      }
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      uint64_t v8 = "Configurator.renewCertificates() internal error";
      goto LABEL_12;
    }
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100003E78(v21, (uint64_t)qword_1001DC6E8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_errorRetain();
      uint64_t v25 = String.init<A>(describing:)();
      sub_100005EB8(v25, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Configurator.renewCertificates() unexpected error: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_getErrorValue();
    uint64_t v27 = Error.localizedDescription.getter();
    uint64_t v29 = v28;
    uint64_t v16 = 2999;
    uint64_t v17 = v27;
    uint64_t v18 = v29;
    goto LABEL_34;
  }
  return result;
}

uint64_t sub_1000758E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v67 = a7;
  uint64_t v68 = a6;
  uint64_t v66 = a2;
  uint64_t v65 = a1;
  uint64_t v60 = type metadata accessor for OSSignpostError();
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v7);
  os_log_type_t v62 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v64 - 8);
  uint64_t v11 = __chkstk_darwin(v64, v10);
  uint64_t v61 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v63 = (char *)&v58 - v14;
  uint64_t v15 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  os_log_type_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = swift_projectBox();
  swift_beginAccess();
  sub_100006724(v24, (uint64_t)v18, (uint64_t *)&unk_1001DF8D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10005F4F8((uint64_t)v18, (uint64_t *)&unk_1001DF8D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v18, v19);
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_100009300(Strong + 232, (uint64_t)v69);
      swift_release();
      uint64_t v26 = v70;
      uint64_t v58 = v71;
      sub_100006788(v69, v70);
      sub_100003EB0(&qword_1001D9B20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100186100;
      *(void *)(inited + 32) = 1684631668;
      *(void *)(inited + 40) = 0xE400000000000000;
      uint64_t v28 = UUID.uuidString.getter();
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 80) = &protocol witness table for String;
      *(void *)(inited + 48) = v28;
      *(void *)(inited + 56) = v29;
      unint64_t v30 = sub_100104AF4(inited);
      sub_100136224(18, v30, v26, v58);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      sub_100006520((uint64_t)v69);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    }
  }
  uint64_t v31 = v62;
  swift_beginAccess();
  uint64_t v32 = swift_weakLoadStrong();
  uint64_t v33 = v63;
  if (v32)
  {
    uint64_t v34 = (atomic_flag *)(v32 + 16);
    swift_beginAccess();
    atomic_flag_clear(v34);
    swift_endAccess();
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100003E78(v35, (uint64_t)qword_1001DC6E8);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_signpost_id_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_signpost_id_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "install operation ended", v38, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
  if (qword_1001D90C8 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for OSSignposter();
  sub_100003E78(v39, (uint64_t)qword_1001DC700);
  int v40 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v41 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v42 = v59;
    uint64_t v43 = v60;
    if ((*(unsigned int (**)(char *, uint64_t))(v59 + 88))(v31, v60) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v44 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v43);
      uint64_t v44 = "end install";
    }
    os_log_type_t v45 = v61;
    uint64_t v46 = v64;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v61, v33, v64);
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    os_signpost_id_t v48 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, v41, v48, "config-install-totalTime", v44, v47, 2u);
    swift_slowDealloc();

    uint64_t v49 = *(void (**)(char *, uint64_t))(v9 + 8);
    v49(v33, v46);
    v49(v45, v46);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v33, v64);
  }
  swift_beginAccess();
  uint64_t v50 = swift_weakLoadStrong();
  if (v50)
  {
    uint64_t v51 = *(void *)(v50 + 272);
    swift_retain();
    uint64_t v52 = swift_release();
    __chkstk_darwin(v52, v53);
    *(&v58 - 2) = v51;
    *((unsigned char *)&v58 - 8) = 1;
    uint64_t v55 = (uint64_t *)&v54[4];
    uint64_t v56 = v54 + 8;
    os_unfair_lock_lock(v54 + 8);
    sub_1000845A8(v55);
    os_unfair_lock_unlock(v56);
    swift_release();
  }
  return v68(v65, v66);
}

void sub_1000760A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v40 = a8;
  uint64_t v42 = a6;
  uint64_t v43 = a7;
  uint64_t v41 = a5;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v11 = *v8;
  os_log_type_t v37 = v8;
  uint64_t v44 = v11;
  uint64_t v12 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8, v15);
  uint64_t v16 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17, v20);
  uint64_t v21 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a3, v17);
  sub_100006724(a4, (uint64_t)v16, (uint64_t *)&unk_1001DF8D0);
  unint64_t v22 = (*(unsigned __int8 *)(v18 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v23 = (v19 + *(unsigned __int8 *)(v13 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v24 = (v14 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v8;
  *(unsigned char *)(v25 + 24) = v40;
  uint64_t v26 = v39;
  *(void *)(v25 + 32) = v38;
  *(void *)(v25 + 40) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v25 + v22, v21, v17);
  sub_100029CEC((uint64_t)v16, v25 + v23, (uint64_t *)&unk_1001DF8D0);
  uint64_t v27 = v42;
  *(void *)(v25 + v24) = v41;
  uint64_t v28 = (void *)(v25 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v29 = v43;
  *uint64_t v28 = v27;
  v28[1] = v29;
  unint64_t v30 = self;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v31 = v37;
  swift_retain();
  swift_bridgeObjectRetain();
  id v32 = [v30 sharedHardwareManager];
  uint64_t v33 = (void *)swift_allocObject();
  _OWORD v33[2] = v31;
  void v33[3] = sub_1000847E4;
  uint64_t v34 = v44;
  v33[4] = v25;
  v33[5] = v34;
  aBlock[4] = sub_100084960;
  void aBlock[5] = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100005210;
  aBlock[3] = &unk_1001C8978;
  uint64_t v35 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id v36 = [v32 startSecureElementManagerSession:v35];
  _Block_release(v35);
  swift_release();
  swift_unknownObjectRelease();
}

void sub_100076434(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void, void *), uint64_t a12)
{
  uint64_t v82 = a8;
  uint64_t v84 = a7;
  uint64_t v83 = a6;
  uint64_t v81 = a9;
  uint64_t v17 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v75 = *(void *)(v17 - 8);
  uint64_t v18 = *(void *)(v75 + 64);
  __chkstk_darwin(v17 - 8, v19);
  uint64_t v77 = (uint64_t)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for UUID();
  uint64_t v76 = *(void *)(v79 - 8);
  uint64_t v20 = *(void *)(v76 + 64);
  __chkstk_darwin(v79, v21);
  uint64_t v78 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D90C8 != -1) {
    swift_once();
  }
  uint64_t v80 = a10;
  uint64_t v22 = type metadata accessor for OSSignposter();
  sub_100003E78(v22, (uint64_t)qword_1001DC700);
  uint64_t v85 = a4;
  sub_100044E30("config-install-preprosessing", 28, 2, a4, 0xD000000000000019, 0x8000000100197CD0);
  if (a1)
  {
    swift_bridgeObjectRetain();
    if (a5 & 1) != 0 && (a2) {
      sub_10008496C(0, 0);
    }
    unint64_t v23 = self;
    v86[0] = (id)a1;
    swift_bridgeObjectRetain();
    sub_100003EB0(&qword_1001DABD8);
    unsigned __int8 v24 = [v23 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v24)
    {
      v86[0] = (id)a1;
      swift_bridgeObjectRetain();
      uint64_t v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v86[0] = 0;
      id v26 = [v23 dataWithJSONObject:v25 options:0 error:v86];
      swift_unknownObjectRelease();
      id v27 = v86[0];
      if (v26)
      {
        uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();

        sub_100095354(v83, v84, v82, v81, v28, v30, a2 & 1, v80, a11, a12);
        sub_100006628(v28, v30);
        return;
      }
      os_log_type_t v45 = v27;
      uint64_t v44 = _convertNSErrorToError(_:)();
    }
    else
    {
      if (qword_1001D9068 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100003E78(v40, (uint64_t)qword_1001DBED0);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Object is not a valid JSON", v43, 2u);
        swift_slowDealloc();
      }

      uint64_t v44 = sub_10002B1D4(15000, 0, 0, 0);
    }
    swift_willThrow();
    swift_bridgeObjectRelease();
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100003E78(v46, (uint64_t)qword_1001DC6E8);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "couldn't construct se state info in JSON", v49, 2u);
      swift_slowDealloc();
    }

    swift_errorRetain();
    uint64_t v50 = (void *)sub_10002A974(2016, 0, 0, v44);
    swift_errorRelease();
    sub_100003EB0(&qword_1001D9B38);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(unsigned char *)(inited + 32) = 8;
    v86[0] = v50;
    type metadata accessor for ConfigurationError(0);
    sub_100084E34((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
    uint64_t v52 = _BridgedStoredNSError.errorCode.getter();
    *(void *)(inited + 64) = &type metadata for Int;
    *(void *)(inited + 40) = v52;
    unint64_t v53 = sub_100104C38(inited);
    __chkstk_darwin(v53, v54);
    uint64_t v56 = (uint64_t *)&v55[4];
    uint64_t v57 = v55 + 8;
    os_unfair_lock_lock(v55 + 8);
    sub_100085FE4(v56);
    os_unfair_lock_unlock(v57);
    swift_bridgeObjectRelease();
    id v58 = v50;
    a11(0, v50);

    goto LABEL_24;
  }
  if (!a3) {
    return;
  }
  uint64_t v74 = a12;
  os_signpost_id_t v73 = a11;
  sub_100003EB0(&qword_1001D9B38);
  uint64_t v31 = swift_initStackObject();
  *(_OWORD *)(v31 + 16) = xmmword_100186100;
  *(unsigned char *)(v31 + 32) = 8;
  swift_errorRetain();
  id v32 = (void *)_convertErrorToNSError(_:)();
  id v33 = [v32 code];

  *(void *)(v31 + 64) = &type metadata for Int;
  *(void *)(v31 + 40) = v33;
  unint64_t v34 = sub_100104C38(v31);
  __chkstk_darwin(v34, v35);
  os_log_type_t v37 = (uint64_t *)&v36[4];
  uint64_t v38 = v36 + 8;
  os_unfair_lock_lock(v36 + 8);
  sub_100085FE4(v37);
  os_unfair_lock_unlock(v38);
  swift_bridgeObjectRelease();
  _s3__C4CodeOMa_11(0);
  v86[0] = (id)2030;
  swift_errorRetain();
  sub_100084E34(&qword_1001D9840, _s3__C4CodeOMa_11);
  LOBYTE(v38) = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if (v38)
  {
    swift_errorRetain();
    uint64_t v39 = (void *)sub_10002A974(2026, 0, 0, a3);
    swift_errorRelease();
    v73(0, v39);
    swift_errorRelease();

    return;
  }
  v86[0] = (id)2028;
  swift_errorRetain();
  char v59 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if ((v59 & 1) == 0 || (a5 & 1) == 0)
  {
    swift_errorRetain();
    v73(0, (void *)a3);
    swift_errorRelease();
LABEL_24:
    swift_errorRelease();
    return;
  }
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  sub_100003E78(v60, (uint64_t)qword_1001DC6E8);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "try perform SE cleanup and try again", v63, 2u);
    swift_slowDealloc();
  }

  uint64_t v64 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v78, v82, v79);
  uint64_t v65 = v77;
  sub_100006724(v81, v77, (uint64_t *)&unk_1001DF8D0);
  unint64_t v66 = (*(unsigned __int8 *)(v64 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  unint64_t v67 = (v20 + *(unsigned __int8 *)(v75 + 80) + v66) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
  unint64_t v68 = (v18 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v69 = (char *)swift_allocObject();
  uint64_t v70 = v74;
  *((void *)v69 + 2) = v73;
  *((void *)v69 + 3) = v70;
  uint64_t v71 = v83;
  *((void *)v69 + 4) = v85;
  *((void *)v69 + 5) = v71;
  *((void *)v69 + 6) = v84;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v69[v66], v78, v79);
  sub_100029CEC(v65, (uint64_t)&v69[v67], (uint64_t *)&unk_1001DF8D0);
  *(void *)&v69[v68] = v80;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10008496C((uint64_t)sub_100085018, (uint64_t)v69);
  swift_errorRelease();
  swift_release();
}

void sub_100076F18(uint64_t a1, void (*a2)(void, id), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = (id)sub_10002A974(2028, 0, 0, 0);
    a2(0, v10);
  }
  else
  {
    sub_1000760A4(a5, a6, a7, a8, a9, a2, a3, 0);
  }
}

void sub_100076FC4(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_1001D90C0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003E78(v4, (uint64_t)qword_1001DC6E8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v13;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "failed to perform SE cleanup %@.\nApple Pay Servers Environment wasn't set.\nNo instances to clean up", v7, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a2) {
        goto LABEL_15;
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (!a2)
      {
LABEL_15:
        swift_errorRelease();
        return;
      }
    }
    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    goto LABEL_15;
  }
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100003E78(v9, (uint64_t)qword_1001DC6E8);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "successfully perform SE cleanup", v12, 2u);
    swift_slowDealloc();
  }

  if (a2) {
    a2(0);
  }
}

void sub_100077288(uint64_t a1, void *a2)
{
  char v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1000772F4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, id), uint64_t a5)
{
  uint64_t v97 = a3;
  uint64_t v9 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v94 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v95 = (char *)&v82 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v82 - v17;
  if (!a1)
  {
    if (a2)
    {
      swift_errorRetain();
      id v99 = (id)sub_10002A974(2026, 0, 0, a2);
      swift_errorRelease();
      a4(0, 0, v99);
      id v22 = v99;
    }
    return;
  }
  id v99 = a1;
  id v19 = [v99 stateInformation];
  if (!v19)
  {
    long long aBlock = 0u;
    long long v102 = 0u;
    goto LABEL_13;
  }
  uint64_t v20 = v19;
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v21 + 16))
  {
    long long aBlock = 0u;
    long long v102 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_100006570(v21 + 32, (uint64_t)&aBlock);
  swift_bridgeObjectRelease();
  if (!*((void *)&v102 + 1))
  {
LABEL_13:
    sub_10005F4F8((uint64_t)&aBlock, &qword_1001DD3F0);
    goto LABEL_14;
  }
  sub_100003EB0(&qword_1001DABD8);
  if (!swift_dynamicCast()) {
LABEL_14:
  }
    sub_100004D6C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v88 = v18;
  uint64_t v91 = (void (*)(void, void, void))a4;
  uint64_t v93 = a5;
  uint64_t v90 = swift_bridgeObjectRetain();
  uint64_t v23 = sub_100084CD8(v90);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  char v29 = v28;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v98 = sub_100003E78(v30, (uint64_t)qword_1001DC6E8);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    id v33 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)id v33 = 136446210;
    *(void *)&long long v96 = v23;
    if (v29)
    {
      unint64_t v36 = 0xE700000000000000;
      uint64_t v34 = 0x6F666E69206F6ELL;
    }
    else
    {
      uint64_t v34 = sub_100078600();
      unint64_t v36 = v35;
    }
    uint64_t v100 = (void *)sub_100005EB8(v34, v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "SE memory: %{public}s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v23 = v96;
    if ((v29 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else
  {

    if ((v29 & 1) == 0)
    {
LABEL_24:
      BOOL v39 = v23 < 310001 || v25 < 9721 || v27 < 771;
      BOOL v92 = v39;
      goto LABEL_34;
    }
  }
  BOOL v92 = 0;
LABEL_34:
  long long v96 = xmmword_100186100;
  if (qword_1001D9340 != -1) {
    swift_once();
  }
  NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001E1178);
  uint64_t v40 = sub_1000AF634();
  unint64_t v42 = v41;
  uint64_t v43 = v93;
  swift_bridgeObjectRetain();
  uint64_t v44 = (uint64_t)v88;
  sub_100078754(v40, v42, (uint64_t)v88);
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  uint64_t v89 = v46 + 48;
  *(void *)&long long v96 = v47;
  if (v47(v44, 1, v45) == 1)
  {
    sub_10005F4F8(v44, (uint64_t *)&unk_1001DF8D0);
    swift_bridgeObjectRetain();
    unint64_t v48 = v42;
  }
  else
  {
    uint64_t v40 = UUID.uuidString.getter();
    unint64_t v48 = v49;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
  }
  uint64_t v97 = v45;
  uint64_t v50 = sub_10006CB20();
  uint64_t v88 = 0;
  unint64_t v86 = v48;
  uint64_t v51 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v96;
  int64_t v52 = v50[2];
  if (v52)
  {
    uint64_t v83 = v40;
    unint64_t v84 = v42;
    unint64_t v53 = v50;
    uint64_t v100 = _swiftEmptyArrayStorage;
    sub_10014B9C4(0, v52, 0);
    uint64_t v54 = 0;
    uint64_t v82 = v53;
    uint64_t v55 = v53 + 4;
    uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    uint64_t v87 = (void (**)(char *))(v46 + 32);
    uint64_t v85 = (void (**)(uint64_t, uint64_t))(v46 + 8);
    uint64_t v98 = v52;
    while (1)
    {
      uint64_t v57 = &v55[2 * v54];
      uint64_t v58 = *v57;
      unint64_t v59 = v57[1];
      swift_bridgeObjectRetain_n();
      if (String.count.getter() != 32) {
        break;
      }
      uint64_t v60 = HIBYTE(v59) & 0xF;
      *(void *)&long long aBlock = v58;
      *((void *)&aBlock + 1) = v59;
      if ((v59 & 0x2000000000000000) == 0) {
        uint64_t v60 = v58 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)&long long v102 = 0;
      *((void *)&v102 + 1) = v60;
      swift_bridgeObjectRetain();
      while ((unint64_t)String.Iterator.next()().value._object)
      {
        Character.hexDigitValue.getter();
        char v62 = v61;
        swift_bridgeObjectRelease();
        if (v62)
        {
          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
      }
      unint64_t v68 = v55;
      swift_bridgeObjectRelease();
      *(void *)&long long aBlock = v58;
      *((void *)&aBlock + 1) = v59;
      swift_bridgeObjectRetain();
      String.index(_:offsetBy:)();
      String.insert(_:at:)();
      String.index(_:offsetBy:)();
      String.insert(_:at:)();
      String.index(_:offsetBy:)();
      String.insert(_:at:)();
      String.index(_:offsetBy:)();
      swift_bridgeObjectRelease();
      String.insert(_:at:)();
      uint64_t v69 = v51;
      uint64_t v70 = (uint64_t)v94;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v71 = v97;
      if (v69(v70, 1, v97))
      {
        sub_10005F4F8(v70, (uint64_t *)&unk_1001DF8D0);
        uint64_t v63 = (uint64_t)v95;
        uint64_t v55 = v68;
        int64_t v52 = v98;
        goto LABEL_49;
      }
      uint64_t v63 = (uint64_t)v95;
      (*v87)(v95);
      (*v56)(v63, 0, 1, v71);
      if (v69(v63, 1, v71) != 1)
      {
        uint64_t v72 = v63;
        uint64_t v58 = UUID.uuidString.getter();
        unint64_t v74 = v73;
        (*v85)(v72, v71);
        swift_bridgeObjectRelease();
        unint64_t v59 = v74;
        uint64_t v55 = v68;
        int64_t v52 = v98;
        goto LABEL_51;
      }
      uint64_t v55 = v68;
      int64_t v52 = v98;
LABEL_50:
      sub_10005F4F8(v63, (uint64_t *)&unk_1001DF8D0);
LABEL_51:
      uint64_t v64 = v100;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10014B9C4(0, v64[2] + 1, 1);
        uint64_t v64 = v100;
      }
      unint64_t v66 = v64[2];
      unint64_t v65 = v64[3];
      if (v66 >= v65 >> 1)
      {
        sub_10014B9C4(v65 > 1, v66 + 1, 1);
        uint64_t v64 = v100;
      }
      ++v54;
      v64[2] = v66 + 1;
      unint64_t v67 = &v64[2 * v66];
      v67[4] = v58;
      v67[5] = v59;
      uint64_t v51 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v96;
      if (v54 == v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = v93;
        uint64_t v40 = v83;
        goto LABEL_63;
      }
    }
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v63 = (uint64_t)v95;
LABEL_49:
    (*v56)(v63, 1, 1, v97);
    goto LABEL_50;
  }
  swift_bridgeObjectRelease();
  uint64_t v64 = _swiftEmptyArrayStorage;
LABEL_63:
  sub_100003EB0(&qword_1001DA140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100189B70;
  *(void *)(inited + 32) = 0x4965746174536573;
  *(void *)(inited + 40) = 0xEB000000006F666ELL;
  uint64_t v76 = sub_100003EB0(&qword_1001DABD8);
  *(void *)(inited + 48) = v90;
  *(void *)(inited + 72) = v76;
  strcpy((char *)(inited + 80), "globalConfigId");
  *(unsigned char *)(inited + 95) = -18;
  *(void *)(inited + 96) = v40;
  *(void *)(inited + 104) = v86;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0xD000000000000019;
  *(void *)(inited + 136) = 0x8000000100197B90;
  *(void *)(inited + 168) = sub_100003EB0((uint64_t *)&unk_1001DA570);
  *(void *)(inited + 144) = v64;
  uint64_t v77 = (void *)sub_100004D6C(inited);
  swift_bridgeObjectRelease();
  BOOL v78 = v92;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = v77;
  *(unsigned char *)(v79 + 24) = 0;
  *(void *)(v79 + 32) = v91;
  *(void *)(v79 + 40) = v43;
  *(unsigned char *)(v79 + 48) = v78;
  uint64_t v103 = sub_100084E14;
  uint64_t v104 = v79;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v102 = sub_1000048D8;
  *((void *)&v102 + 1) = &unk_1001C89C8;
  uint64_t v80 = _Block_copy(&aBlock);
  sub_100084E28(v77, 0);
  swift_retain();
  swift_release();
  id v81 = v99;
  [v99 endSessionWithCompletion:v80];

  _Block_release(v80);
  sub_100084E08(v77, 0);
}

uint64_t sub_100078600()
{
  _StringGuts.grow(_:)(72);
  v0._unint64_t object = (void *)0x8000000100197C10;
  v0._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0xD000000000000018;
  v2._unint64_t object = (void *)0x8000000100197C30;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._unint64_t object = (void *)0x8000000100197C50;
  v4._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100078754@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (String.count.getter() == 32)
  {
    uint64_t v10 = HIBYTE(a2) & 0xF;
    uint64_t v17 = a1;
    unint64_t v18 = a2;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v19 = 0;
    uint64_t v20 = v10;
    swift_bridgeObjectRetain();
    while ((unint64_t)String.Iterator.next()().value._object)
    {
      Character.hexDigitValue.getter();
      char v12 = v11;
      swift_bridgeObjectRelease();
      if (v12)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v17 = a1;
    unint64_t v18 = a2;
    swift_bridgeObjectRetain();
    String.index(_:offsetBy:)();
    String.insert(_:at:)();
    String.index(_:offsetBy:)();
    String.insert(_:at:)();
    String.index(_:offsetBy:)();
    String.insert(_:at:)();
    String.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    String.insert(_:at:)();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for UUID();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a3, v9, v15);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a3, 0, 1, v15);
    }
    sub_10005F4F8((uint64_t)v9, (uint64_t *)&unk_1001DF8D0);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 1, 1, v13);
}

void sub_100078A0C(void *a1, char a2, void (*a3)(void *, void, void *), uint64_t a4, char a5)
{
  if (a2)
  {
    id v8 = a1;
    a3(0, a5 & 1, a1);
    sub_100084E08(a1, 1);
  }
  else
  {
    a3(a1, a5 & 1, 0);
  }
}

unint64_t sub_100078A98(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v481 = a3;
  uint64_t v480 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v470 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v458 = (char *)&v442 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v442 - v9;
  os_log_t v474 = (int *)type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate();
  uint64_t v457 = *((void *)v474 - 1);
  uint64_t v12 = __chkstk_darwin(v474, v11);
  unint64_t v469 = (unint64_t)&v442 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  unint64_t v453 = (char *)&v442 - v15;
  uint64_t v479 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v479 - 8);
  uint64_t v18 = __chkstk_darwin(v479, v17);
  v471 = (uint64_t *)((char *)&v442 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v459 = (uint64_t *)((char *)&v442 - v22);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  v456 = (char *)&v442 - v25;
  __chkstk_darwin(v24, v26);
  uint64_t v448 = (char *)&v442 - v27;
  uint64_t v28 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v28 - 8, v29);
  v465 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v442 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v466 = *(void *)(v31 - 8);
  uint64_t v467 = (unsigned char *)v31;
  __chkstk_darwin(v31, v32);
  v461 = (char *)&v442 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v36 = __chkstk_darwin(v34 - 8, v35);
  uint64_t v462 = (uint64_t)&v442 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v36, v38);
  uint64_t v452 = (uint64_t)&v442 - v40;
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v451 = (uint64_t)&v442 - v43;
  uint64_t v45 = __chkstk_darwin(v42, v44);
  v460 = (char *)&v442 - v46;
  uint64_t v48 = __chkstk_darwin(v45, v47);
  os_log_t v468 = (os_log_t)((char *)&v442 - v49);
  uint64_t v51 = __chkstk_darwin(v48, v50);
  uint64_t v449 = (uint64_t)&v442 - v52;
  uint64_t v54 = __chkstk_darwin(v51, v53);
  uint64_t v463 = (uint64_t)&v442 - v55;
  uint64_t v57 = __chkstk_darwin(v54, v56);
  v455 = (char *)&v442 - v58;
  uint64_t v60 = __chkstk_darwin(v57, v59);
  uint64_t v454 = (uint64_t)&v442 - v61;
  uint64_t v63 = __chkstk_darwin(v60, v62);
  v476 = (uint64_t *)((char *)&v442 - v64);
  uint64_t v66 = __chkstk_darwin(v63, v65);
  v464 = (void (**)(os_log_t, uint64_t))((char *)&v442 - v67);
  uint64_t v69 = __chkstk_darwin(v66, v68);
  uint64_t v447 = (char *)&v442 - v70;
  uint64_t v72 = __chkstk_darwin(v69, v71);
  v450 = (char *)&v442 - v73;
  uint64_t v75 = __chkstk_darwin(v72, v74);
  uint64_t v77 = (char *)&v442 - v76;
  __chkstk_darwin(v75, v78);
  uint64_t v80 = (char *)&v442 - v79;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v81 = sub_100003E78(v4, (uint64_t)qword_1001DC6E8);
  swift_bridgeObjectRetain_n();
  uint64_t v477 = v81;
  uint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  BOOL v84 = os_log_type_enabled(v82, v83);
  v472 = v10;
  uint64_t v473 = v4;
  v483 = v80;
  uint64_t v478 = v16;
  if (v84)
  {
    uint64_t v85 = swift_slowAlloc();
    uint64_t v446 = swift_slowAlloc();
    *(void *)&long long v487 = v446;
    *(_DWORD *)uint64_t v85 = 136315394;
    Swift::String v86 = String.redactedToken()();
    *(void *)&v491[0] = sub_100005EB8(v86._countAndFlagsBits, (unint64_t)v86._object, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v85 + 12) = 2048;
    uint64_t v87 = v481;
    *(void *)&v491[0] = v481;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Configurator.status(token: %s, options: %ld)", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v16 = v478;
    swift_slowDealloc();

    if ((v87 & 0x3FFF) != 0) {
      goto LABEL_5;
    }
LABEL_16:
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Received 0 status, returning empty dictionary", v111, 2u);
      swift_slowDealloc();
    }

    return sub_100004D6C((uint64_t)_swiftEmptyArrayStorage);
  }

  swift_bridgeObjectRelease_n();
  uint64_t v87 = v481;
  if ((v481 & 0x3FFF) == 0) {
    goto LABEL_16;
  }
LABEL_5:
  if (v87 >= 0x4000)
  {
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = swift_slowAlloc();
      *(_DWORD *)uint64_t v90 = 134218240;
      *(void *)&long long v487 = 0x3FFFLL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v90 + 12) = 2048;
      *(void *)&long long v487 = 14;
      LOWORD(v87) = v481;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Received status option greater than %ld. Ignoring all but last %ld bits.", (uint8_t *)v90, 0x16u);
      swift_slowDealloc();
    }
  }
  uint64_t v91 = *(char **)(v16 + 56);
  uint64_t v92 = (uint64_t)v483;
  uint64_t v93 = v479;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v91)(v483, 1, 1, v479);
  v445 = v91;
  uint64_t v446 = v16 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v91)(v77, 1, 1, v93);
  uint64_t v94 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v94 = v480 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v475 = v77;
  if (v94)
  {
    uint64_t v95 = v484;
    long long v96 = v482;
    uint64_t v97 = v482 + 41;
    swift_beginAccess();
    uint64_t v98 = v96[44];
    id v99 = sub_100006788(v97, v98);
    os_log_type_t v444 = &v442;
    uint64_t v100 = *(os_unfair_lock_s **)(v98 - 8);
    __chkstk_darwin(v99, v99);
    long long v102 = (char *)&v442 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))&v100[4]._os_unfair_lock_opaque)(v102);
    uint64_t v103 = *(void **)(*(void *)v102 + 16);
    swift_bridgeObjectRetain();
    id v104 = [v103 serialNumber];
    if (!v104)
    {
      __break(1u);
LABEL_260:
      __break(1u);
      goto LABEL_261;
    }
    uint64_t v105 = v104;
    unint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v108 = v107;

    (*(void (**)(char *, uint64_t))&v100[2]._os_unfair_lock_opaque)(v102, v98);
    sub_100147FF8(v480, a2, v106, v108, v494);
    if (v95)
    {
      sub_10005F4F8((uint64_t)v475, (uint64_t *)&unk_1001DF8D0);
      sub_10005F4F8((uint64_t)v483, (uint64_t *)&unk_1001DF8D0);
      return (unint64_t)v102;
    }
    unint64_t v443 = a2;
    sub_100006788(v482 + 24, v482[27]);
    uint64_t v119 = v465;
    sub_1000238E4((uint64_t)v465);
    long long v102 = (char *)v466;
    uint64_t v120 = v467;
    int v121 = (*(uint64_t (**)(void, uint64_t, unsigned char *))(v466 + 48))(v119, 1, v467);
    uint64_t v122 = v478;
    if (v121 == 1)
    {
      sub_10005F4F8((uint64_t)v119, &qword_1001D9AE8);
      sub_10002A974(2039, 0xD00000000000001ELL, (void *)0x8000000100197AA0, 0);
      swift_willThrow();
      sub_100062020((uint64_t)v494);
      sub_10005F4F8((uint64_t)v475, (uint64_t *)&unk_1001DF8D0);
      uint64_t v123 = (uint64_t)v483;
LABEL_42:
      sub_10005F4F8(v123, (uint64_t *)&unk_1001DF8D0);
      return (unint64_t)v102;
    }
    uint64_t v127 = (uint64_t)v461;
    (*((void (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t), unsigned char *))v102 + 4))(v461, v119, v120);
    sub_100147B74(v127);
    uint64_t v112 = (uint64_t)v483;
    uint64_t v137 = v450;
    sub_100147684(v450);
    uint64_t v138 = (uint64_t)v137;
    uint64_t v87 = v479;
    int v139 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 48))(v137, 1, v479);
    uint64_t v140 = (uint64_t)v475;
    if (v139 == 1)
    {
      sub_10005F4F8(v138, (uint64_t *)&unk_1001DF8D0);
      sub_10002A974(2011, 0, 0, 0);
      swift_willThrow();
      sub_100062020((uint64_t)v494);
      uint64_t v141 = (void (*)(char *, unsigned char *))*((void *)v102 + 1);
      v102 += 8;
      v141(v461, v120);
      sub_10005F4F8(v140, (uint64_t *)&unk_1001DF8D0);
      uint64_t v123 = v112;
      goto LABEL_42;
    }
    uint64_t v484 = 0;
    uint64_t v183 = v102;
    sub_10005F4F8(v112, (uint64_t *)&unk_1001DF8D0);
    uint64_t v184 = v448;
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v448, v138, v87);
    (*(void (**)(uint64_t, char *, uint64_t))(v122 + 16))(v112, v184, v87);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v445)(v112, 0, 1, v87);
    unint64_t v185 = v447;
    sub_1001478C0(v447);
    sub_100062020((uint64_t)v494);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v184, v87);
    (*((void (**)(char *, unsigned char *))v183 + 1))(v461, v120);
    uint64_t v186 = (uint64_t)v475;
    sub_10005F4F8((uint64_t)v475, (uint64_t *)&unk_1001DF8D0);
    sub_100029CEC((uint64_t)v185, v186, (uint64_t *)&unk_1001DF8D0);
    LOWORD(v87) = v481;
  }
  else
  {
    unint64_t v443 = a2;
    uint64_t v112 = v92;
  }
  unint64_t v486 = sub_100105324((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for StatusInspector();
  swift_allocObject();
  sub_10003C52C();
  uint64_t v467 = v113;
  if ((v87 & 0x1000) != 0)
  {
    uint64_t v118 = v113;
LABEL_29:
    id v124 = SPRConfigurationStatusIsBrokenSeSepPairing;
    char v125 = sub_10003B2F0();
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = (v125 & 1) == 0;
    sub_100006510(&v487, v491);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v124, isUniquelyReferenced_nonNull_native);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
    if (v87) {
      goto LABEL_45;
    }
    goto LABEL_23;
  }
  uint64_t v114 = v112;
  uint64_t v91 = v475;
  uint64_t v100 = (os_unfair_lock_s *)v464;
  sub_100006724((uint64_t)v475, (uint64_t)v464, (uint64_t *)&unk_1001DF8D0);
  uint64_t v115 = v479;
  uint64_t v116 = *(uint64_t (**)(os_unfair_lock_s *, uint64_t, uint64_t))(v478 + 48);
  int v117 = v116(v100, 1, v479);
  sub_10005F4F8((uint64_t)v100, (uint64_t *)&unk_1001DF8D0);
  if (v117 != 1)
  {
    sub_100009300((uint64_t)(v482 + 46), (uint64_t)&v487);
    uint64_t v128 = sub_100006788(&v487, *((uint64_t *)&v488 + 1));
    uint64_t v129 = (uint64_t)v476;
    sub_100006724((uint64_t)v91, (uint64_t)v476, (uint64_t *)&unk_1001DF8D0);
    if (v116((os_unfair_lock_s *)v129, 1, v115) == 1)
    {
LABEL_261:
      __break(1u);
      goto LABEL_262;
    }
    uint64_t v130 = *(void *)(*v128 + 72);
    uint64_t v131 = *(void *)(v130 + 16);
    uint64_t v112 = v114;
    uint64_t v118 = v467;
    if (v131)
    {
      uint64_t v132 = v130 + ((*(unsigned __int8 *)(v457 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v457 + 80));
      uint64_t v133 = *(void *)(v457 + 72);
      swift_bridgeObjectRetain();
      uint64_t v134 = (uint64_t)v453;
      do
      {
        char v135 = static UUID.== infix(_:_:)();
        sub_100085214(v132, v134, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
        if (v135)
        {
          char v136 = *(unsigned char *)(v134 + v474[5]);
          sub_10008527C(v134, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
          if (v136)
          {
            swift_bridgeObjectRelease();
            (*(void (**)(void *, uint64_t))(v478 + 8))(v476, v479);
            sub_100006520((uint64_t)&v487);
            LOWORD(v87) = v481;
            goto LABEL_29;
          }
        }
        else
        {
          sub_10008527C(v134, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
        }
        v132 += v133;
        --v131;
      }
      while (v131);
      swift_bridgeObjectRelease();
    }
    (*(void (**)(void *, uint64_t))(v478 + 8))(v476, v479);
    sub_100006520((uint64_t)&v487);
    LOWORD(v87) = v481;
    if (v481) {
      goto LABEL_45;
    }
LABEL_23:
    if ((v87 & 0x100) == 0) {
      goto LABEL_24;
    }
LABEL_49:
    id v145 = SPRConfigurationStatusKernelVersion;
    uint64_t v146 = sub_10003B8AC();
    *((void *)&v488 + 1) = &type metadata for String;
    if (v147) {
      uint64_t v148 = v146;
    }
    else {
      uint64_t v148 = 0;
    }
    unint64_t v149 = 0xE000000000000000;
    if (v147) {
      unint64_t v149 = v147;
    }
    *(void *)&long long v487 = v148;
    *((void *)&v487 + 1) = v149;
    sub_100006510(&v487, v491);
    char v150 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v145, v150);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
    if ((v87 & 2) == 0) {
      goto LABEL_118;
    }
    goto LABEL_55;
  }
  LOWORD(v87) = v481;
  uint64_t v112 = v114;
  uint64_t v118 = v467;
  if ((v481 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_45:
  id v142 = SPRConfigurationStatusKernelNeeded;
  char v143 = sub_10003B844();
  if (v143 == 2)
  {
    sub_100065D2C((uint64_t)v142, &v487);

    sub_10005F4F8((uint64_t)&v487, &qword_1001DD3F0);
    if ((v87 & 0x100) != 0) {
      goto LABEL_49;
    }
  }
  else
  {
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = v143 & 1;
    sub_100006510(&v487, v491);
    char v144 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v142, v144);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
    if ((v87 & 0x100) != 0) {
      goto LABEL_49;
    }
  }
LABEL_24:
  if ((v87 & 2) == 0) {
    goto LABEL_118;
  }
LABEL_55:
  uint64_t v151 = sub_10003BB68();
  if (v151)
  {
    uint64_t v152 = v151;
    uint64_t v153 = sub_10003BDE8();
    if (v154)
    {
      v476 = (void *)v154;
      uint64_t v466 = v153;
      *(void *)&long long v487 = v152;
      id v155 = SPRConfigurationStatusProfileIDList;
      sub_100003EB0((uint64_t *)&unk_1001DA570);
      sub_10002B658();
      uint64_t v156 = BidirectionalCollection<>.joined(separator:)();
      *((void *)&v488 + 1) = &type metadata for String;
      *(void *)&long long v487 = v156;
      *((void *)&v487 + 1) = v157;
      sub_100006510(&v487, v491);
      char v158 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v493 = v486;
      unint64_t v486 = 0x8000000000000000;
      sub_10010651C(v491, v155, v158);
      unint64_t v486 = v493;

      swift_bridgeObjectRelease();
      uint64_t v87 = v454;
      sub_100006724(v112, v454, (uint64_t *)&unk_1001DF8D0);
      uint64_t v160 = v478;
      uint64_t v159 = v479;
      id v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v478 + 48);
      unsigned int v162 = v161(v87, 1, v479);
      v465 = v161;
      if (v162 == 1)
      {
        sub_10005F4F8(v87, (uint64_t *)&unk_1001DF8D0);
        int v163 = 2;
        LOWORD(v87) = v481;
        uint64_t v164 = (uint64_t)v455;
        goto LABEL_80;
      }
      uint64_t v174 = *(void (**)(char *, uint64_t, uint64_t))(v160 + 32);
      uint64_t v175 = (uint64_t)v456;
      v174(v456, v87, v159);
      sub_1000C86E4(v175, &v487);
      uint64_t v176 = *((void *)&v487 + 1);
      uint64_t v177 = (void *)*((void *)&v488 + 1);
      if (*((void *)&v487 + 1))
      {
        uint64_t v178 = v487;
        uint64_t v179 = v488;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v177)
        {
          char v180 = sub_10006EAE4(v178, v176, v152);
          swift_bridgeObjectRelease();
          if (v180)
          {
            uint64_t v181 = v478;
            uint64_t v164 = (uint64_t)v455;
            if (v179 == v466 && v177 == v476) {
              char v182 = 1;
            }
            else {
              char v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            LOWORD(v87) = v481;
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v181 + 8))(v456, v479);
            char v192 = v182 ^ 1;
            uint64_t v118 = v467;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v478 + 8))(v456, v479);
            swift_bridgeObjectRelease();
            char v192 = 1;
            LOWORD(v87) = v481;
            uint64_t v118 = v467;
            uint64_t v164 = (uint64_t)v455;
          }
          int v163 = v192 & 1;
          goto LABEL_80;
        }
        swift_bridgeObjectRelease();
        uint64_t v118 = v467;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v164 = (uint64_t)v455;
      uint64_t v187 = Logger.logObject.getter();
      os_log_type_t v188 = static os_log_type_t.default.getter();
      BOOL v189 = os_log_type_enabled(v187, v188);
      uint64_t v190 = v478;
      if (v189)
      {
        unint64_t v191 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v191 = 0;
        _os_log_impl((void *)&_mh_execute_header, v187, v188, "Config needed: Profile cache returned a nil value", v191, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v190 + 8))(v456, v479);
      int v163 = 1;
      LOWORD(v87) = v481;
LABEL_80:
      sub_100006724((uint64_t)v475, v164, (uint64_t *)&unk_1001DF8D0);
      uint64_t v193 = v479;
      if (v465(v164, 1, v479) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10005F4F8(v164, (uint64_t *)&unk_1001DF8D0);
        goto LABEL_109;
      }
      uint64_t v194 = v478;
      uint64_t v195 = (uint64_t)v459;
      (*(void (**)(void *, uint64_t, uint64_t))(v478 + 32))(v459, v164, v193);
      if (v163 == 2)
      {
        (*(void (**)(void *, uint64_t, uint64_t))(v194 + 16))(v471, v195, v193);
      }
      else
      {
        (*(void (**)(void *, uint64_t, uint64_t))(v194 + 16))(v471, v195, v193);
        if (!v163)
        {
LABEL_92:
          uint64_t v203 = *(int **)(v478 + 8);
          ((void (*)(void *, uint64_t))v203)(v471, v479);
          sub_1000C86E4((uint64_t)v459, &v487);
          uint64_t v204 = *((void *)&v487 + 1);
          id v205 = (void *)*((void *)&v488 + 1);
          if (*((void *)&v487 + 1))
          {
            os_log_t v474 = v203;
            uint64_t v206 = v487;
            uint64_t v207 = v488;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v205)
            {
              char v208 = sub_10006EAE4(v206, v204, v152);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v208)
              {
                uint64_t v209 = (uint64_t)v459;
                unint64_t v210 = (void (*)(uint64_t, uint64_t))v474;
                if (v207 == v466 && v205 == v476) {
                  char v211 = 1;
                }
                else {
                  char v211 = _stringCompareWithSmolCheck(_:_:expecting:)();
                }
                LOWORD(v87) = v481;
                swift_bridgeObjectRelease();
                v210(v209, v479);
                char v217 = v211 ^ 1;
              }
              else
              {
                ((void (*)(void *, uint64_t))v474)(v459, v479);
                swift_bridgeObjectRelease();
                char v217 = 1;
                LOWORD(v87) = v481;
              }
              uint64_t v118 = v467;
              int v163 = v217 & 1;
              goto LABEL_109;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOWORD(v87) = v481;
            uint64_t v118 = v467;
            uint64_t v203 = v474;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOWORD(v87) = v481;
          }
          os_log_t v214 = Logger.logObject.getter();
          os_log_type_t v215 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v214, v215))
          {
            Swift::String v216 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)Swift::String v216 = 0;
            _os_log_impl((void *)&_mh_execute_header, v214, v215, "Config needed: Profile cache returned a nil value for SAF", v216, 2u);
            swift_slowDealloc();
          }

          ((void (*)(void *, uint64_t))v203)(v459, v479);
          int v163 = 1;
LABEL_109:
          uint64_t v112 = (uint64_t)v483;
          unint64_t v218 = (unint64_t)v476;
          swift_bridgeObjectRelease();
          uint64_t v219 = HIBYTE(v218) & 0xF;
          if ((v218 & 0x2000000000000000) == 0) {
            uint64_t v219 = v466 & 0xFFFFFFFFFFFFLL;
          }
          if (v219)
          {
            uint64_t v220 = (void *)SPRConfigurationStatusConfigNeeded;
            if (v163 == 2)
            {
              long long v487 = 0u;
              long long v488 = 0u;
              id v221 = SPRConfigurationStatusConfigNeeded;
              sub_10005F4F8((uint64_t)&v487, &qword_1001DD3F0);
              sub_100065D2C((uint64_t)v221, v491);

              sub_10005F4F8((uint64_t)v491, &qword_1001DD3F0);
              goto LABEL_118;
            }
          }
          else
          {
            uint64_t v222 = Logger.logObject.getter();
            os_log_type_t v223 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v222, v223))
            {
              uint64_t v224 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v224 = 0;
              _os_log_impl((void *)&_mh_execute_header, v222, v223, "Config needed: Global Config not loaded", v224, 2u);
              swift_slowDealloc();
            }

            uint64_t v220 = (void *)SPRConfigurationStatusConfigNeeded;
            LOBYTE(v163) = 1;
          }
          *((void *)&v488 + 1) = &type metadata for Bool;
          LOBYTE(v487) = v163 & 1;
          sub_100006510(&v487, v491);
          id v225 = v220;
          char v226 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v493 = v486;
          unint64_t v486 = 0x8000000000000000;
          sub_10010651C(v491, v225, v226);
          unint64_t v486 = v493;

          swift_bridgeObjectRelease();
          goto LABEL_118;
        }
      }
      uint64_t v196 = *(void *)(*sub_100006788(v482 + 46, v482[49]) + 72);
      uint64_t v197 = *(void *)(v196 + 16);
      if (v197)
      {
        uint64_t v198 = v196 + ((*(unsigned __int8 *)(v457 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v457 + 80));
        uint64_t v199 = *(void *)(v457 + 72);
        swift_bridgeObjectRetain();
        uint64_t v200 = v469;
        do
        {
          char v201 = static UUID.== infix(_:_:)();
          sub_100085214(v198, v200, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
          if (v201)
          {
            char v202 = *(unsigned char *)(v200 + v474[5]);
            sub_10008527C(v200, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
            if (v202)
            {
              swift_bridgeObjectRelease();
              uint64_t v118 = v467;
              goto LABEL_92;
            }
          }
          else
          {
            sub_10008527C(v200, (uint64_t (*)(void))type metadata accessor for StoreAndForwardSelector.StoreAndForwardProfileCandidate);
          }
          v198 += v199;
          --v197;
        }
        while (v197);
        swift_bridgeObjectRelease();
        LOWORD(v87) = v481;
        uint64_t v118 = v467;
      }
      uint64_t v212 = v479;
      unint64_t v213 = *(void (**)(void *, uint64_t))(v478 + 8);
      v213(v471, v479);
      v213(v459, v212);
      swift_bridgeObjectRelease();
      goto LABEL_109;
    }
    swift_bridgeObjectRelease();
  }
  if (v118[32] == 1)
  {
    uint64_t v165 = (void *)SPRConfigurationStatusConfigNeeded;
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = 1;
    sub_100006510(&v487, v491);
    id v166 = v165;
    char v167 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v166, v167);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
    uint64_t v168 = (void *)SPRConfigurationStatusProfileIDList;
    *((void *)&v488 + 1) = &type metadata for String;
    *(void *)&long long v487 = 0;
    *((void *)&v487 + 1) = 0xE000000000000000;
    sub_100006510(&v487, v491);
    id v169 = v168;
    char v170 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v169, v170);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
    unint64_t v171 = Logger.logObject.getter();
    os_log_type_t v172 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v171, v172))
    {
      uint64_t v173 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v173 = 0;
      _os_log_impl((void *)&_mh_execute_header, v171, v172, "Config needed: GET profiles or GET Global Config failed: applet not installed", v173, 2u);
      swift_slowDealloc();
    }
  }
LABEL_118:
  if ((v87 & 0x40) != 0)
  {
    uint64_t v227 = v463;
    sub_100006724(v112, v463, (uint64_t *)&unk_1001DF8D0);
    os_log_t v474 = *(int **)(v478 + 48);
    int v228 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v474)(v227, 1, v479);
    sub_10005F4F8(v227, (uint64_t *)&unk_1001DF8D0);
    if (v228 != 1)
    {
      uint64_t v229 = sub_10003BDE8();
      unint64_t v231 = v230;
      v232 = sub_10003BB68();
      os_log_type_t v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10003C1C4();
      if (v231 && v232 && v233)
      {
        v465 = v233;
        uint64_t v234 = v449;
        sub_100078754(v229, v231, v449);
        uint64_t v235 = v479;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v474)(v234, 1, v479) == 1)
        {
          sub_10005F4F8(v234, (uint64_t *)&unk_1001DF8D0);
          uint64_t v236 = 0;
          unint64_t v469 = 0xE000000000000000;
        }
        else
        {
          uint64_t v236 = UUID.uuidString.getter();
          unint64_t v469 = v387;
          (*(void (**)(uint64_t, uint64_t))(v478 + 8))(v234, v235);
        }
        os_log_t v388 = v468;
        if (v232[2])
        {
          uint64_t v389 = v232[2];
          v476 = v232 + 4;
          uint64_t v466 = v478 + 32;
          uint64_t v463 = v236;
          v464 = (void (**)(os_log_t, uint64_t))(v478 + 8);
          v461 = (char *)v232;
          swift_bridgeObjectRetain();
          uint64_t v390 = 0;
          v471 = _swiftEmptyArrayStorage;
          while (1)
          {
            uint64_t v391 = &v476[2 * v390];
            uint64_t v392 = *v391;
            unint64_t v393 = v391[1];
            swift_bridgeObjectRetain_n();
            if (String.count.getter() == 32)
            {
              uint64_t v394 = HIBYTE(v393) & 0xF;
              *(void *)&long long v487 = v392;
              *((void *)&v487 + 1) = v393;
              if ((v393 & 0x2000000000000000) == 0) {
                uint64_t v394 = v392 & 0xFFFFFFFFFFFFLL;
              }
              *(void *)&long long v488 = 0;
              *((void *)&v488 + 1) = v394;
              swift_bridgeObjectRetain();
              while ((unint64_t)String.Iterator.next()().value._object)
              {
                Character.hexDigitValue.getter();
                char v396 = v395;
                swift_bridgeObjectRelease();
                if (v396)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v235 = v479;
LABEL_233:
                  os_log_t v388 = v468;
                  goto LABEL_234;
                }
              }
              swift_bridgeObjectRelease();
              *(void *)&long long v487 = v392;
              *((void *)&v487 + 1) = v393;
              swift_bridgeObjectRetain();
              String.index(_:offsetBy:)();
              String.insert(_:at:)();
              String.index(_:offsetBy:)();
              String.insert(_:at:)();
              String.index(_:offsetBy:)();
              String.insert(_:at:)();
              String.index(_:offsetBy:)();
              swift_bridgeObjectRelease();
              String.insert(_:at:)();
              char v397 = v460;
              UUID.init(uuidString:)();
              uint64_t v398 = (uint64_t)v397;
              swift_bridgeObjectRelease();
              uint64_t v399 = v397;
              uint64_t v235 = v479;
              uint64_t v400 = (unsigned int (*)(os_log_t, uint64_t, uint64_t))v474;
              if (((unsigned int (*)(char *, uint64_t, uint64_t))v474)(v399, 1, v479))
              {
                sub_10005F4F8(v398, (uint64_t *)&unk_1001DF8D0);
                goto LABEL_233;
              }
              os_log_t v388 = v468;
              (*(void (**)(void))v466)();
              ((void (*)(os_log_t, void, uint64_t, uint64_t))v445)(v388, 0, 1, v235);
              if (v400(v388, 1, v235) != 1)
              {
                os_log_t v401 = v388;
                uint64_t v402 = UUID.uuidString.getter();
                uint64_t v404 = v403;
                (*v464)(v401, v235);
                swift_bridgeObjectRelease();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  v471 = sub_10015A8E0(0, v471[2] + 1, 1, v471);
                }
                v405 = v471;
                unint64_t v407 = v471[2];
                unint64_t v406 = v471[3];
                if (v407 >= v406 >> 1) {
                  v405 = sub_10015A8E0((void *)(v406 > 1), v407 + 1, 1, v471);
                }
                v405[2] = v407 + 1;
                v471 = v405;
                uint64_t v408 = &v405[2 * v407];
                v408[4] = v402;
                v408[5] = v404;
                uint64_t v118 = v467;
                os_log_t v388 = v468;
                uint64_t v235 = v479;
                goto LABEL_236;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
LABEL_234:
              ((void (*)(os_log_t, uint64_t, uint64_t, uint64_t))v445)(v388, 1, 1, v235);
            }
            sub_10005F4F8((uint64_t)v388, (uint64_t *)&unk_1001DF8D0);
            swift_bridgeObjectRelease();
LABEL_236:
            if (++v390 == v389)
            {
              swift_bridgeObjectRelease();
              uint64_t v409 = (uint64_t)v483;
              uint64_t v236 = v463;
              uint64_t v410 = v471;
              goto LABEL_245;
            }
          }
        }
        uint64_t v409 = v112;
        uint64_t v410 = _swiftEmptyArrayStorage;
LABEL_245:
        swift_bridgeObjectRelease();
        char v411 = v465;
        swift_bridgeObjectRetain();
        unint64_t v412 = v469;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v413 = Logger.logObject.getter();
        os_log_type_t v414 = static os_log_type_t.info.getter();
        int v415 = v414;
        if (os_log_type_enabled(v413, v414))
        {
          uint64_t v416 = swift_slowAlloc();
          v476 = (void *)swift_slowAlloc();
          *(void *)&long long v487 = v476;
          *(_DWORD *)uint64_t v416 = 136315650;
          swift_bridgeObjectRetain();
          os_log_t v474 = (int *)((char *)&type metadata for Any + 8);
          uint64_t v417 = Dictionary.description.getter();
          LODWORD(v471) = v415;
          v418 = v410;
          unint64_t v420 = v419;
          swift_bridgeObjectRelease();
          *(void *)&v491[0] = sub_100005EB8(v417, v420, (uint64_t *)&v487);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          os_log_t v468 = v413;
          *(_WORD *)(v416 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&v491[0] = sub_100005EB8(v236, v469, (uint64_t *)&v487);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v416 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v421 = Array.description.getter();
          uint64_t v422 = v236;
          unint64_t v424 = v423;
          swift_bridgeObjectRelease();
          uint64_t v425 = v421;
          uint64_t v410 = v418;
          *(void *)&v491[0] = sub_100005EB8(v425, v424, (uint64_t *)&v487);
          unint64_t v412 = v469;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v426 = (uint64_t)v483;
          swift_bridgeObjectRelease();
          os_log_t v427 = v468;
          _os_log_impl((void *)&_mh_execute_header, v468, (os_log_type_t)v471, "stateInfo: %s\nglobal: %s\nprofiles: %s", (uint8_t *)v416, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v118 = v467;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v422 = v236;
          uint64_t v426 = v409;
        }
        sub_100003EB0(&qword_1001DA140);
        uint64_t v428 = swift_allocObject();
        strcpy((char *)(v428 + 32), "globalConfigId");
        *(unsigned char *)(v428 + 47) = -18;
        *(_OWORD *)(v428 + 16) = xmmword_100189B70;
        *(void *)(v428 + 48) = v422;
        *(void *)(v428 + 56) = v412;
        *(void *)(v428 + 72) = &type metadata for String;
        *(void *)(v428 + 80) = 0xD000000000000019;
        *(void *)(v428 + 88) = 0x8000000100197B90;
        uint64_t v429 = sub_100003EB0((uint64_t *)&unk_1001DA570);
        *(void *)(v428 + 96) = v410;
        *(void *)(v428 + 120) = v429;
        *(void *)(v428 + 128) = 0x4965746174536573;
        *(void *)(v428 + 136) = 0xEB000000006F666ELL;
        *(void *)(v428 + 168) = sub_100003EB0(&qword_1001DABD8);
        *(void *)(v428 + 144) = v411;
        long long v102 = (char *)sub_100004D6C(v428);
        v430 = self;
        *(void *)&long long v487 = v102;
        swift_bridgeObjectRetain();
        unsigned __int8 v431 = [v430 isValidJSONObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        if (v431)
        {
          *(void *)&long long v487 = v102;
          swift_bridgeObjectRetain();
          uint64_t v432 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
          *(void *)&long long v487 = 0;
          id v433 = [v430 dataWithJSONObject:v432 options:0 error:&v487];
          swift_unknownObjectRelease();
          id v434 = (id)v487;
          if (v433)
          {
            v476 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v240 = v435;
            swift_bridgeObjectRelease();

            LOWORD(v87) = v481;
            if ((v481 & 8) == 0) {
              goto LABEL_131;
            }
            goto LABEL_128;
          }
          uint64_t v441 = v434;
          _convertNSErrorToError(_:)();

          uint64_t v439 = (uint64_t)v475;
        }
        else
        {
          if (qword_1001D9068 != -1) {
            swift_once();
          }
          sub_100003E78(v473, (uint64_t)qword_1001DBED0);
          v436 = Logger.logObject.getter();
          os_log_type_t v437 = static os_log_type_t.error.getter();
          BOOL v438 = os_log_type_enabled(v436, v437);
          uint64_t v439 = (uint64_t)v475;
          if (v438)
          {
            uint64_t v440 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v440 = 0;
            _os_log_impl((void *)&_mh_execute_header, v436, v437, "Object is not a valid JSON", v440, 2u);
            swift_slowDealloc();
          }

          sub_10002B1D4(15000, 0, 0, 0);
        }
        swift_willThrow();
        swift_release();
        sub_10005F4F8(v439, (uint64_t *)&unk_1001DF8D0);
        sub_10005F4F8(v426, (uint64_t *)&unk_1001DF8D0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (unint64_t)v102;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOWORD(v87) = v481;
      if (v118[32] == 1)
      {
        v237 = (void *)SPRConfigurationStatusKernelUpdateNeeded;
        *((void *)&v488 + 1) = &type metadata for Bool;
        LOBYTE(v487) = 1;
        sub_100006510(&v487, v491);
        id v238 = v237;
        char v239 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v493 = v486;
        unint64_t v486 = 0x8000000000000000;
        sub_10010651C(v491, v238, v239);
        unint64_t v486 = v493;

        swift_bridgeObjectRelease();
      }
    }
  }
  v476 = 0;
  unint64_t v240 = 0xF000000000000000;
  if ((v87 & 8) == 0) {
    goto LABEL_131;
  }
LABEL_128:
  id v241 = SPRConfigurationStatusPinAppletNeeded;
  char v242 = sub_10003C31C();
  if (v242 == 2)
  {
    sub_100065D2C((uint64_t)v241, &v487);

    sub_10005F4F8((uint64_t)&v487, &qword_1001DD3F0);
  }
  else
  {
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = v242 & 1;
    sub_100006510(&v487, v491);
    char v243 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v241, v243);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
  }
LABEL_131:
  int v244 = v118[32];
  os_log_t v474 = (int *)v240;
  if (v244 != 1) {
    goto LABEL_151;
  }
  if (v118[33] != 1)
  {
    v270 = (void *)SPRConfigurationStatusIsSeAvailable;
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = 1;
LABEL_150:
    sub_100006510(&v487, v491);
    id v271 = v270;
    char v272 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v271, v272);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
    goto LABEL_151;
  }
  uint64_t v245 = Logger.logObject.getter();
  os_log_type_t v246 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v245, v246))
  {
    uint64_t v247 = swift_slowAlloc();
    *(void *)&long long v487 = swift_slowAlloc();
    *(_DWORD *)uint64_t v247 = 136315394;
    *(void *)&v491[0] = sub_100005EB8(0xD000000000000016, 0x8000000100197B70, (uint64_t *)&v487);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v247 + 12) = 2048;
    *(void *)&v491[0] = 975;
    unint64_t v240 = (unint64_t)v474;
    LOWORD(v87) = v481;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v245, v246, "%s %ld: Applet not selectable but is present in SE stateInfo. May be due to prohibit timer.", (uint8_t *)v247, 0x16u);
    swift_arrayDestroy();
    uint64_t v118 = v467;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v248 = (void *)SPRConfigurationStatusIsSeAvailable;
  *((void *)&v488 + 1) = &type metadata for Bool;
  LOBYTE(v487) = 0;
  sub_100006510(&v487, v491);
  id v249 = v248;
  char v250 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v493 = v486;
  unint64_t v486 = 0x8000000000000000;
  sub_10010651C(v491, v249, v250);
  unint64_t v486 = v493;

  swift_bridgeObjectRelease();
  if (v87)
  {
    unint64_t v251 = Logger.logObject.getter();
    os_log_type_t v252 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v251, v252))
    {
      os_signpost_type_t v253 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_signpost_type_t v253 = 0;
      _os_log_impl((void *)&_mh_execute_header, v251, v252, "override isKernelNeeded to false", v253, 2u);
      swift_slowDealloc();
    }

    v254 = (void *)SPRConfigurationStatusKernelNeeded;
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = 0;
    sub_100006510(&v487, v491);
    id v255 = v254;
    char v256 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v493 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v255, v256);
    unint64_t v486 = v493;

    swift_bridgeObjectRelease();
  }
  if ((v87 & 2) != 0)
  {
    uint64_t v257 = v451;
    sub_100006724((uint64_t)v483, v451, (uint64_t *)&unk_1001DF8D0);
    int v258 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v478 + 48))(v257, 1, v479);
    sub_10005F4F8(v257, (uint64_t *)&unk_1001DF8D0);
    if (v258 != 1)
    {
      v259 = Logger.logObject.getter();
      os_log_type_t v260 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v259, v260))
      {
        uint64_t v261 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v261 = 0;
        _os_log_impl((void *)&_mh_execute_header, v259, v260, "override isConfigNeeded to false", v261, 2u);
        swift_slowDealloc();
      }

      v262 = (void *)SPRConfigurationStatusConfigNeeded;
      *((void *)&v488 + 1) = &type metadata for Bool;
      LOBYTE(v487) = 0;
      sub_100006510(&v487, v491);
      id v263 = v262;
      char v264 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v493 = v486;
      unint64_t v486 = 0x8000000000000000;
      sub_10010651C(v491, v263, v264);
      unint64_t v486 = v493;

      swift_bridgeObjectRelease();
    }
  }
  if ((v87 & 0x40) != 0)
  {
    uint64_t v265 = v452;
    sub_100006724((uint64_t)v483, v452, (uint64_t *)&unk_1001DF8D0);
    int v266 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v478 + 48))(v265, 1, v479);
    sub_10005F4F8(v265, (uint64_t *)&unk_1001DF8D0);
    if (v266 != 1)
    {
      unint64_t v267 = Logger.logObject.getter();
      os_log_type_t v268 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v267, v268))
      {
        uint64_t v269 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v269 = 0;
        _os_log_impl((void *)&_mh_execute_header, v267, v268, "override isKernelUpdateNeeded to false", v269, 2u);
        swift_slowDealloc();
      }

      v270 = (void *)SPRConfigurationStatusKernelUpdateNeeded;
      *((void *)&v488 + 1) = &type metadata for Bool;
      LOBYTE(v487) = 0;
      goto LABEL_150;
    }
  }
LABEL_151:
  if (v118[34])
  {
    uint64_t v273 = 1;
LABEL_153:
    uint64_t v274 = (void *)SPRConfigurationStatusIsSecurityViolation;
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = v273;
    sub_100006510(&v487, v491);
    id v275 = v274;
    char v276 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v492 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v275, v276);
    unint64_t v486 = v492;

    swift_bridgeObjectRelease();
    uint64_t v277 = v482;
    swift_beginAccess();
    uint64_t v278 = v277[44];
    uint64_t v279 = v277[45];
    sub_10001F1A0((uint64_t)(v277 + 41), v278);
    uint64_t v280 = *(void (**)(uint64_t, uint64_t, uint64_t))(v279 + 88);
    uint64_t v281 = v279;
    uint64_t v118 = v467;
    v280(v273, v278, v281);
    swift_endAccess();
    goto LABEL_156;
  }
  v282 = v482;
  swift_beginAccess();
  uint64_t v273 = *(unsigned __int8 *)(*sub_100006788(v282 + 41, v282[44]) + 32);
  if ((v87 & 0x2000) != 0 || v273) {
    goto LABEL_153;
  }
LABEL_156:
  if (v118[32] == 1)
  {
    v118[32] = 0;
    uint64_t v283 = sub_10003A74C();
    if (v283)
    {
      uint64_t v284 = v283;
      uint64_t v489 = sub_10003B090;
      uint64_t v490 = 0;
      *(void *)&long long v487 = _NSConcreteStackBlock;
      *((void *)&v487 + 1) = 1107296256;
      *(void *)&long long v488 = sub_1000048D8;
      *((void *)&v488 + 1) = &unk_1001C8900;
      os_signpost_type_t v285 = _Block_copy(&v487);
      [v284 endSessionWithCompletion:v285];
      _Block_release(v285);
    }
  }
  if (v240 >> 60 == 15)
  {
    uint64_t v286 = v484;
    uint64_t v287 = (uint64_t)v475;
  }
  else
  {
    uint64_t v288 = v462;
    sub_100006724((uint64_t)v483, v462, (uint64_t *)&unk_1001DF8D0);
    int v289 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v478 + 48))(v288, 1, v479);
    uint64_t v286 = v484;
    if (v289 == 1)
    {
      sub_10005F4F8(v288, (uint64_t *)&unk_1001DF8D0);
      uint64_t v287 = (uint64_t)v475;
    }
    else
    {
      uint64_t v290 = (uint64_t)v476;
      sub_1000065D0((uint64_t)v476, v240);
      sub_10005F4F8(v288, (uint64_t *)&unk_1001DF8D0);
      __int16 v291 = sub_100095BE4(v480, v443, v290, v240);
      if (v286)
      {
        uint64_t v292 = v470;
        uint64_t v293 = v458;
        uint64_t v294 = v473;
        (*(void (**)(char *, uint64_t, uint64_t))(v470 + 16))(v458, v477, v473);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v295 = Logger.logObject.getter();
        os_log_type_t v296 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v295, v296))
        {
          uint64_t v297 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v487 = swift_slowAlloc();
          *(_DWORD *)uint64_t v297 = 136315138;
          *(void *)&v491[0] = v286;
          swift_errorRetain();
          sub_100003EB0((uint64_t *)&unk_1001DD380);
          uint64_t v298 = String.init<A>(describing:)();
          *(void *)&v491[0] = sub_100005EB8(v298, v299, (uint64_t *)&v487);
          LOWORD(v87) = v481;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v295, v296, "network error for kernel update status\n%s", v297, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_10000BF70((uint64_t)v476, (unint64_t)v474);

          uint64_t v287 = (uint64_t)v475;
          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v470 + 8))(v458, v473);
          uint64_t v286 = 0;
        }
        else
        {
          sub_10000BF70((uint64_t)v476, v240);
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          (*(void (**)(char *, uint64_t))(v292 + 8))(v293, v294);
          uint64_t v286 = 0;
          uint64_t v287 = (uint64_t)v475;
        }
      }
      else
      {
        __int16 v300 = v291;
        v301 = (void *)SPRConfigurationStatusKernelUpdateNeeded;
        *((void *)&v488 + 1) = &type metadata for Bool;
        LOBYTE(v487) = v291 & 1;
        sub_100006510(&v487, v491);
        id v302 = v301;
        char v303 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v492 = v486;
        unint64_t v486 = 0x8000000000000000;
        sub_10010651C(v491, v302, v303);
        unint64_t v486 = v492;

        swift_bridgeObjectRelease();
        uint64_t v304 = (void *)SPRConfigurationStatusConfigNeeded;
        *((void *)&v488 + 1) = &type metadata for Bool;
        LOBYTE(v487) = HIBYTE(v300) & 1;
        sub_100006510(&v487, v491);
        id v305 = v304;
        char v306 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v492 = v486;
        unint64_t v486 = 0x8000000000000000;
        sub_10010651C(v491, v305, v306);
        unint64_t v486 = v492;

        swift_bridgeObjectRelease();
        uint64_t v287 = (uint64_t)v475;
        if ((v300 & 0x100) != 0)
        {
          v307 = Logger.logObject.getter();
          os_log_type_t v308 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v307, v308))
          {
            uint64_t v309 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v309 = 0;
            _os_log_impl((void *)&_mh_execute_header, v307, v308, "Config needed: Configuration backend determined kernel or config update needed", v309, 2u);
            swift_slowDealloc();
          }
          sub_10000BF70((uint64_t)v476, (unint64_t)v474);
        }
        else
        {
          sub_10000BF70((uint64_t)v476, (unint64_t)v474);
        }
      }
    }
  }
  uint64_t v484 = v286;
  if ((v87 & 4) != 0)
  {
    unint64_t v310 = (void *)SPRConfigurationStatusSeIdentifier;
    uint64_t v311 = v482;
    v312 = v482 + 41;
    swift_beginAccess();
    uint64_t v313 = v311[44];
    v314 = sub_100006788(v312, v313);
    uint64_t v87 = *(void *)(v313 - 8);
    __chkstk_darwin(v314, v314);
    uint64_t v91 = (char *)&v442 - ((v315 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v87 + 16))(v91);
    uint64_t v100 = *(os_unfair_lock_s **)(*(void *)v91 + 16);
    id v316 = v310;
    id v317 = [(os_unfair_lock_s *)v100 serialNumber];
    if (v317)
    {
      v318 = v317;
      uint64_t v319 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v321 = v320;

      (*(void (**)(char *, uint64_t))(v87 + 8))(v91, v313);
      *((void *)&v488 + 1) = &type metadata for String;
      *(void *)&long long v487 = v319;
      *((void *)&v487 + 1) = v321;
      sub_100006510(&v487, v491);
      char v322 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v492 = v486;
      unint64_t v486 = 0x8000000000000000;
      sub_10010651C(v491, v316, v322);
      unint64_t v486 = v492;

      swift_bridgeObjectRelease();
      uint64_t v287 = (uint64_t)v475;
      LOWORD(v87) = v481;
      goto LABEL_175;
    }
    goto LABEL_260;
  }
LABEL_175:
  if ((v87 & 0x10) != 0)
  {
    v323 = (void *)SPRConfigurationStatusIsProductionSigned;
    v324 = v482;
    swift_beginAccess();
    os_log_type_t v325 = *(void **)(*sub_100006788(v324 + 41, v324[44]) + 16);
    id v326 = v323;
    unsigned __int8 v327 = [v325 isProductionSigned];
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = v327;
    sub_100006510(&v487, v491);
    char v328 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v492 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v326, v328);
    unint64_t v486 = v492;

    swift_bridgeObjectRelease();
    if ((v87 & 0x20) == 0)
    {
LABEL_177:
      if ((v87 & 0x80) == 0) {
        goto LABEL_184;
      }
      goto LABEL_181;
    }
  }
  else if ((v87 & 0x20) == 0)
  {
    goto LABEL_177;
  }
  v329 = (void *)SPRConfigurationStatusVersion;
  v330 = self;
  id v331 = v329;
  id v332 = [v330 current];
  id v333 = [v332 bundleVersion];

  uint64_t v334 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v336 = v335;

  *((void *)&v488 + 1) = &type metadata for String;
  *(void *)&long long v487 = v334;
  *((void *)&v487 + 1) = v336;
  sub_100006510(&v487, v491);
  char v337 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v492 = v486;
  unint64_t v486 = 0x8000000000000000;
  sub_10010651C(v491, v331, v337);
  unint64_t v486 = v492;

  swift_bridgeObjectRelease();
  if ((v87 & 0x80) == 0) {
    goto LABEL_184;
  }
LABEL_181:
  uint64_t v338 = qword_1001D9318;
  id v339 = SPRConfigurationStatusIsPasscodeEnabled;
  if (v338 != -1) {
    swift_once();
  }
  unsigned __int8 v340 = [(id)qword_1001E1150 canEvaluatePolicy:2 error:0];
  *((void *)&v488 + 1) = &type metadata for Bool;
  LOBYTE(v487) = v340;
  sub_100006510(&v487, v491);
  char v341 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v492 = v486;
  unint64_t v486 = 0x8000000000000000;
  sub_10010651C(v491, v339, v341);
  unint64_t v486 = v492;

  swift_bridgeObjectRelease();
LABEL_184:
  if ((v87 & 0x800) != 0)
  {
    os_signpost_id_t v342 = v482;
    swift_beginAccess();
    sub_100006788(v342 + 41, v342[44]);
    unsigned __int8 v343 = sub_10016E1FC();
    if ((v343 & 1) == 0)
    {
      uint64_t v344 = Logger.logObject.getter();
      os_log_type_t v345 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v344, v345))
      {
        v346 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v346 = 0;
        _os_log_impl((void *)&_mh_execute_header, v344, v345, "Incorrect JCOP version", v346, 2u);
        swift_slowDealloc();
      }
    }
    v347 = (void *)SPRConfigurationStatusIsJCOPVersionCorrect;
    *((void *)&v488 + 1) = &type metadata for Bool;
    LOBYTE(v487) = v343 & 1;
    sub_100006510(&v487, v491);
    id v348 = v347;
    char v349 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v485 = v486;
    unint64_t v486 = 0x8000000000000000;
    sub_10010651C(v491, v348, v349);
    unint64_t v486 = v485;

    swift_bridgeObjectRelease();
  }
  uint64_t v350 = v482[34];
  sub_100003EB0(&qword_1001D9B38);
  uint64_t v351 = swift_allocObject();
  *(_OWORD *)(v351 + 16) = xmmword_10018A620;
  *(unsigned char *)(v351 + 32) = 15;
  uint64_t v352 = v486;
  id v353 = SPRConfigurationStatusKernelNeeded;
  sub_10006CABC((uint64_t)v353, v352, &v487);

  if (*((void *)&v488 + 1))
  {
    if (swift_dynamicCast())
    {
      char v354 = v491[0];
      *(void *)(v351 + 64) = &type metadata for Bool;
      *(unsigned char *)(v351 + 40) = v354;
      goto LABEL_195;
    }
  }
  else
  {
    sub_10005F4F8((uint64_t)&v487, &qword_1001DD3F0);
  }
  *(_OWORD *)(v351 + 40) = 0u;
  *(_OWORD *)(v351 + 56) = 0u;
LABEL_195:
  *(unsigned char *)(v351 + 72) = 16;
  uint64_t v355 = v486;
  id v356 = SPRConfigurationStatusKernelUpdateNeeded;
  sub_10006CABC((uint64_t)v356, v355, &v487);

  if (*((void *)&v488 + 1))
  {
    if (swift_dynamicCast())
    {
      char v357 = v491[0];
      *(void *)(v351 + 104) = &type metadata for Bool;
      *(unsigned char *)(v351 + 80) = v357;
      goto LABEL_200;
    }
  }
  else
  {
    sub_10005F4F8((uint64_t)&v487, &qword_1001DD3F0);
  }
  *(_OWORD *)(v351 + 80) = 0u;
  *(_OWORD *)(v351 + 96) = 0u;
LABEL_200:
  *(unsigned char *)(v351 + 112) = 17;
  uint64_t v358 = v486;
  id v359 = SPRConfigurationStatusConfigNeeded;
  sub_10006CABC((uint64_t)v359, v358, &v487);

  if (*((void *)&v488 + 1))
  {
    if (swift_dynamicCast())
    {
      char v360 = v491[0];
      *(void *)(v351 + 144) = &type metadata for Bool;
      *(unsigned char *)(v351 + 120) = v360;
      goto LABEL_205;
    }
  }
  else
  {
    sub_10005F4F8((uint64_t)&v487, &qword_1001DD3F0);
  }
  *(_OWORD *)(v351 + 120) = 0u;
  *(_OWORD *)(v351 + 136) = 0u;
LABEL_205:
  *(unsigned char *)(v351 + 152) = 18;
  uint64_t v361 = v486;
  id v362 = SPRConfigurationStatusIsJCOPVersionCorrect;
  sub_10006CABC((uint64_t)v362, v361, &v487);

  if (*((void *)&v488 + 1))
  {
    if (swift_dynamicCast())
    {
      char v363 = v491[0];
      *(void *)(v351 + 184) = &type metadata for Bool;
      *(unsigned char *)(v351 + 160) = v363;
      goto LABEL_210;
    }
  }
  else
  {
    sub_10005F4F8((uint64_t)&v487, &qword_1001DD3F0);
  }
  *(_OWORD *)(v351 + 160) = 0u;
  *(_OWORD *)(v351 + 176) = 0u;
LABEL_210:
  uint64_t v91 = (char *)sub_100104C38(v351);
  *(&v442 - 2) = __chkstk_darwin(v91, v364);
  v366 = (uint64_t *)&v365[4];
  uint64_t v100 = v365 + 8;
  os_unfair_lock_lock(v365 + 8);
  uint64_t v367 = v484;
  sub_100085FE4(v366);
  if (!v367)
  {
    os_unfair_lock_unlock(v100);
    uint64_t v368 = swift_bridgeObjectRelease();
    __chkstk_darwin(v368, v369);
    *(&v442 - 2) = v350;
    *((unsigned char *)&v442 - 8) = 2;
    v371 = (uint64_t *)&v370[4];
    os_signpost_id_t v372 = v370 + 8;
    os_unfair_lock_lock(v370 + 8);
    sub_100085FC0(v371);
    os_unfair_lock_unlock(v372);
    uint64_t v373 = swift_bridgeObjectRetain();
    uint64_t v374 = sub_10006C7A4(v373);
    swift_bridgeObjectRelease();
    uint64_t v375 = (uint64_t)v483;
    if (*(void *)(v374 + 16))
    {
      sub_100003EB0(&qword_1001D8768);
      v376 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      v376 = &_swiftEmptyDictionarySingleton;
    }
    uint64_t v377 = v470;
    *(void *)&long long v487 = v376;
    uint64_t v378 = swift_bridgeObjectRetain();
    sub_100080FAC(v378, 1, &v487);
    swift_bridgeObjectRelease();
    long long v102 = (char *)v487;
    uint64_t v379 = v472;
    (*(void (**)(char *, uint64_t, uint64_t))(v377 + 16))(v472, v477, v473);
    swift_retain();
    swift_bridgeObjectRetain();
    v380 = Logger.logObject.getter();
    os_log_type_t v381 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v380, v381))
    {
      v382 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v487 = swift_slowAlloc();
      *(_DWORD *)v382 = 136315138;
      uint64_t v481 = (uint64_t)(v382 + 4);
      v482 = (void *)((char *)&type metadata for Any + 8);
      uint64_t v383 = Dictionary.description.getter();
      uint64_t v484 = 0;
      *(void *)&v491[0] = sub_100005EB8(v383, v384, (uint64_t *)&v487);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v380, v381, "Configurator.status() ended with result: %s", v382, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_10000BF70((uint64_t)v476, (unint64_t)v474);
      (*(void (**)(char *, uint64_t))(v377 + 8))(v472, v473);
      sub_10005F4F8((uint64_t)v475, (uint64_t *)&unk_1001DF8D0);
      uint64_t v385 = (uint64_t)v483;
    }
    else
    {
      swift_release();

      sub_10000BF70((uint64_t)v476, (unint64_t)v474);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v377 + 8))(v379, v473);
      sub_10005F4F8(v287, (uint64_t *)&unk_1001DF8D0);
      uint64_t v385 = v375;
    }
    sub_10005F4F8(v385, (uint64_t *)&unk_1001DF8D0);
    swift_bridgeObjectRelease();
    return (unint64_t)v102;
  }
LABEL_262:
  os_unfair_lock_unlock(v100);
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v91);
  __break(1u);
  unint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_10007C740(uint64_t a1, void (*a2)(char *, void *, uint64_t), int a3, int a4)
{
}

void sub_10007C778(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
}

unint64_t sub_10007C7A8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_100078A98(a1, a2, a3);
}

uint64_t sub_10007C7CC(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC8D0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }
      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v12) {
          goto LABEL_33;
        }
        unint64_t v25 = v9[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v25 = v9[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::String v3 = v2;
                goto LABEL_40;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v9 = -1 << v33;
              }
              Swift::String v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v25 = v9[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v25 = v9[v15];
                ++v26;
                if (v25) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v26;
          }
        }
LABEL_30:
        unint64_t v11 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      uint64_t v31 = 16 * v23;
      long long v32 = *(_OWORD *)(*(void *)(v5 + 48) + v31);
      long long v34 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      long long v35 = v32;
      if ((a2 & 1) == 0)
      {
        sub_1000065D0(v32, *((unint64_t *)&v32 + 1));
        sub_1000065D0(v34, *((unint64_t *)&v34 + 1));
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        long long v20 = v35;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v16) >> 6;
        long long v20 = v35;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v29 = v18 == v28;
          if (v18 == v28) {
            unint64_t v18 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v21 = 16 * v19;
      *(_OWORD *)(*(void *)(v7 + 48) + v21) = v20;
      *(_OWORD *)(*(void *)(v7 + 56) + v21) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007CAE4(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC8E0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v5 + 56) + 40 * v17;
    if (v37)
    {
      sub_100065EE4(v25, (uint64_t)v38);
    }
    else
    {
      sub_1000845C8(v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    int64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    void *v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_100065EE4((uint64_t)v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007CE0C(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC8C8);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007D11C(uint64_t a1, int a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = type metadata accessor for StopWatch();
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100003EB0(&qword_1001DC918);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v40 = v2;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v41) {
      break;
    }
    int64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_34:
          swift_release();
          Swift::String v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v41) {
              goto LABEL_34;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    BOOL v27 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v22);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = *(void *)(v43 + 72);
    uint64_t v31 = *(void *)(v9 + 56) + v30 * v22;
    if (v44)
    {
      sub_10005AE78(v31, (uint64_t)v8);
    }
    else
    {
      sub_100085214(v31, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for StopWatch);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v32 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v33) & ~*(void *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    unint64_t v20 = (void *)(*(void *)(v11 + 48) + 16 * v19);
    void *v20 = v29;
    v20[1] = v28;
    uint64_t result = sub_10005AE78((uint64_t)v8, *(void *)(v11 + 56) + v30 * v19);
    ++*(void *)(v11 + 16);
  }
  swift_release();
  Swift::String v3 = v40;
  int64_t v24 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v9 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v39;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v11;
  return result;
}

uint64_t sub_10007D4D4(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC968);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              Swift::String v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      void *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *Swift::String v3 = v8;
  return result;
}

uint64_t sub_10007D7E0(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC950);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::String v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v30;
              }
              Swift::String v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      __int16 v22 = *(_WORD *)(*(void *)(v5 + 56) + 2 * v17);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v21;
      *(_WORD *)(*(void *)(v7 + 56) + 2 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007DA80(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC930);
  char v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    int64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    uint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    __int16 v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_100006510(v22, v36);
    }
    else
    {
      sub_100006570((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_100006510(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007DDBC(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC928);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    id v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          Swift::String v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    BOOL v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    long long v41 = *(_OWORD *)(v33 + 16);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)uint64_t v19 = v34;
    *(void *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v41;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  Swift::String v3 = v37;
  id v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007E0EC(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC908);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::String v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v30 = -1 << v28;
              }
              Swift::String v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      Swift::UInt v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007E3C0(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC910);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                Swift::String v3 = v2;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v30 = -1 << v29;
              }
              Swift::String v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      Swift::UInt v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      int64_t v21 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
      if (a2) {
        sub_100006510(v21, v31);
      }
      else {
        sub_100006570((uint64_t)v21, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      uint64_t result = (uint64_t)sub_100006510(v31, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *Swift::String v3 = v7;
  return result;
}

uint64_t sub_10007E698(uint64_t a1, char a2)
{
  Swift::String v3 = v2;
  uint64_t v5 = *v2;
  sub_100003EB0(&qword_1001DC8D8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *Swift::String v3 = v7;
  return result;
}

unint64_t sub_10007E9B0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007EB88(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        sub_1000065D0(v10, v11);
        Data.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = sub_100006628(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            _OWORD *v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007ED70(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          unint64_t v18 = (long long *)(v16 + 40 * v6);
          if (40 * v3 < (uint64_t)(40 * v6) || v17 >= (unint64_t)v18 + 40 || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007EF68(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007F140(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        unint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *unint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for StopWatch() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007F350(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        id v11 = v10;
        String.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();

        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            void *v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            *unint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  uint64_t *v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007F544(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        uint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (unsigned char *)(v11 + v3);
          unint64_t v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          int64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            void *v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007F700(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v10 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        uint64_t result = Hasher._finalize()();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (unsigned char *)(v12 + v3);
          uint64_t v14 = (unsigned char *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            unsigned char *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          int64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *int64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10007F8BC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  unint64_t v6 = (void *)(a6[6] + 16 * result);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t sub_10007F90C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100065EE4(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_10007F980(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for StopWatch();
  uint64_t result = sub_10005AE78(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_10007FA18(unint64_t result, uint64_t a2, __int16 a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(_WORD *)(a4[7] + 2 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

_OWORD *sub_10007FA5C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100006510(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_10007FAC4(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2 & 1;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

_OWORD *sub_10007FB0C(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2 & 1;
  uint64_t result = sub_100006510(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_10007FB78(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a5[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *sub_10007FBC0()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC8D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    long long v21 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v21;
    sub_1000065D0(v17, *((unint64_t *)&v17 + 1));
    uint64_t result = (void *)sub_1000065D0(v21, *((unint64_t *)&v21 + 1));
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10007FD88()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC8E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_1000845C8(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    long long v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_100065EE4((uint64_t)v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    Swift::String v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10007FF74()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC8C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    long long v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100080128()
{
  Swift::String v1 = v0;
  uint64_t v2 = type metadata accessor for StopWatch();
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  BOOL v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003EB0(&qword_1001DC918);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v28 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v29 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    unint64_t v22 = *(void *)(v30 + 72) * v17;
    sub_100085214(*(void *)(v6 + 56) + v22, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StopWatch);
    unint64_t v23 = (void *)(*(void *)(v8 + 48) + v18);
    *unint64_t v23 = v20;
    v23[1] = v21;
    sub_10005AE78((uint64_t)v5, *(void *)(v8 + 56) + v22);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_23:
    id result = (void *)swift_release();
    Swift::String v1 = v28;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000803A8()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC968);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10008056C()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC950);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 2 * v15;
    __int16 v19 = *(_WORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_WORD *)(*(void *)(v4 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100080700()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC930);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_100006570(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100006510(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000808C8()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC928);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    int64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    long long v25 = *(_OWORD *)(v21 + 16);
    *int64_t v24 = v19;
    v24[1] = v18;
    uint64_t v26 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v23;
    *(_OWORD *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100080A90()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC908);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    id result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100080C34()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC910);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_100006570(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    id result = sub_100006510(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100080DF4()
{
  Swift::String v1 = v0;
  sub_100003EB0(&qword_1001DC8D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100080FAC(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_100006724(a1 + 32, (uint64_t)&v46, &qword_1001D8770);
  uint64_t v7 = v46;
  uint64_t v8 = v47;
  uint64_t v44 = v46;
  uint64_t v45 = v47;
  sub_100006510(v48, v43);
  int64_t v9 = (void *)*a3;
  unint64_t v11 = sub_10000C4B0(v7, v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10000D200();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    uint64_t *v21 = v7;
    v21[1] = v8;
    sub_100006510(v43, (_OWORD *)(v20[7] + 32 * v11));
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    _OWORD v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (!v25) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 80; ; i += 48)
    {
      sub_100006724(i, (uint64_t)&v46, &qword_1001D8770);
      uint64_t v27 = v46;
      uint64_t v28 = v47;
      uint64_t v44 = v46;
      uint64_t v45 = v47;
      sub_100006510(v48, v43);
      int64_t v29 = (void *)*a3;
      unint64_t v30 = sub_10000C4B0(v27, v28);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v23) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_10000C9FC(v34, 1);
        unint64_t v30 = sub_10000C4B0(v27, v28);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      long long v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      int64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
      *int64_t v38 = v27;
      v38[1] = v28;
      sub_100006510(v43, (_OWORD *)(v37[7] + 32 * v30));
      uint64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_24;
      }
      uint64_t v37[2] = v40;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10000C9FC(v14, a2 & 1);
  unint64_t v16 = sub_10000C4B0(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v19 = swift_allocError();
    swift_willThrow();
    uint64_t v49 = v19;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_100006520((uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._unint64_t object = (void *)0x8000000100197BD0;
  v41._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._uint64_t countAndFlagsBits = 39;
  v42._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100081384(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  int64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10008140C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v95 = type metadata accessor for CertificateManager();
  long long v96 = &off_1001C6308;
  *(void *)&long long v94 = a2;
  uint64_t v92 = type metadata accessor for MPOCDefaultAttestationManager();
  uint64_t v93 = &off_1001C9838;
  *(void *)&long long v91 = a4;
  uint64_t v89 = type metadata accessor for MPOCDefaultMonitorManager();
  uint64_t v90 = &off_1001CAE10;
  *(void *)&long long v88 = a5;
  uint64_t v86 = type metadata accessor for SystemInfo();
  uint64_t v87 = &off_1001CB4C8;
  *(void *)&long long v85 = a7;
  BOOL v84 = &off_1001CC120;
  uint64_t v83 = type metadata accessor for StoreAndForwardSelector();
  *(void *)&long long v82 = a8;
  uint64_t v81 = &off_1001CB9D0;
  uint64_t v80 = type metadata accessor for SignerFactory();
  *(void *)&long long v79 = a9;
  uint64_t v78 = &off_1001C84C8;
  uint64_t v77 = type metadata accessor for DefaultSecureTimeKeeper();
  *(void *)&long long v76 = a10;
  uint64_t v75 = &off_1001CC7B8;
  uint64_t v74 = type metadata accessor for SecureElement();
  *(void *)&long long v73 = a12;
  *(unsigned char *)(a14 + 16) = 0;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100003E78(v20, (uint64_t)qword_1001DC6E8);
  sub_100009300(a1, (uint64_t)v72);
  sub_100009300((uint64_t)&v94, (uint64_t)v71);
  sub_100009300((uint64_t)&v91, (uint64_t)v70);
  sub_100009300((uint64_t)&v88, (uint64_t)v69);
  uint64_t v21 = (long long *)a6;
  sub_100009300(a6, (uint64_t)v68);
  sub_100009300((uint64_t)&v85, (uint64_t)v67);
  sub_100009300((uint64_t)&v82, (uint64_t)v66);
  sub_100009300((uint64_t)&v79, (uint64_t)v65);
  sub_100009300((uint64_t)&v76, (uint64_t)v64);
  sub_100009300((uint64_t)&v73, (uint64_t)v63);
  uint64_t v22 = a3;
  swift_retain_n();
  swift_retain_n();
  BOOL v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  uint64_t v25 = (long long *)a1;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136318210;
    os_log_type_t type = v24;
    sub_100009300((uint64_t)v72, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DC8E8);
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v27, v28, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v72);
    *(_WORD *)(v26 + 12) = 2080;
    sub_100009300((uint64_t)v71, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DB7B0);
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v29, v30, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v71);
    *(_WORD *)(v26 + 22) = 2080;
    swift_beginAccess();
    swift_retain();
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v32 = sub_1000CC188(v31);
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v60 = 0;
    unint64_t v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    uint64_t v60 = 0xD000000000000011;
    unint64_t v61 = 0x8000000100197B30;
    v35._uint64_t countAndFlagsBits = v32;
    v35._unint64_t object = v34;
    String.append(_:)(v35);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v60 = sub_100005EB8(v60, v61, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2080;
    sub_100009300((uint64_t)v70, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DC8F0);
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v36, v37, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v70);
    *(_WORD *)(v26 + 42) = 2080;
    sub_100009300((uint64_t)v69, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DB7D0);
    uint64_t v38 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v38, v39, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v69);
    *(_WORD *)(v26 + 52) = 2080;
    sub_100009300((uint64_t)v68, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DB7B8);
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v40, v41, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v68);
    *(_WORD *)(v26 + 62) = 2080;
    sub_100009300((uint64_t)v67, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DB7D8);
    uint64_t v42 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v42, v43, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v67);
    *(_WORD *)(v26 + 72) = 2080;
    sub_100009300((uint64_t)v66, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DC8F8);
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v44, v45, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v66);
    *(_WORD *)(v26 + 82) = 2080;
    sub_100009300((uint64_t)v65, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DC900);
    uint64_t v46 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v46, v47, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v65);
    *(_WORD *)(v26 + 92) = 2080;
    sub_100009300((uint64_t)v64, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DB3D8);
    uint64_t v48 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v48, v49, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v64);
    *(_WORD *)(v26 + 102) = 2080;
    uint64_t v60 = a11;
    type metadata accessor for ConfiguratorAnalytics();
    swift_retain();
    uint64_t v50 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v50, v51, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 112) = 2080;
    sub_100009300((uint64_t)v63, (uint64_t)&v60);
    sub_100003EB0(&qword_1001DB7C8);
    uint64_t v52 = String.init<A>(describing:)();
    uint64_t v60 = sub_100005EB8(v52, v53, &v62);
    uint64_t v21 = (long long *)a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100006520((uint64_t)v63);
    *(_WORD *)(v26 + 122) = 2080;
    if (a13) {
      uint64_t v54 = 1702195828;
    }
    else {
      uint64_t v54 = 0x65736C6166;
    }
    if (a13) {
      unint64_t v55 = 0xE400000000000000;
    }
    else {
      unint64_t v55 = 0xE500000000000000;
    }
    uint64_t v60 = sub_100005EB8(v54, v55, &v62);
    uint64_t v25 = (long long *)a1;
    uint64_t v22 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, type, "Configurator.init(backend: %s, certificateManager: %s, profileCache: %s, attestationManager: %s, monitorManager: %s, auditor: %s, systemInfo: %s, storeAndForwardSelector: %s, signerFactory: %s, secureTimeKeeper: %s, analytics: %s, secureElement: %s, enforceJCOPVersion: %s)", (uint8_t *)v26, 0x84u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100006520((uint64_t)v72);
    sub_100006520((uint64_t)v71);
    swift_release_n();
    sub_100006520((uint64_t)v70);
    sub_100006520((uint64_t)v69);
    sub_100006520((uint64_t)v68);
    sub_100006520((uint64_t)v67);
    sub_100006520((uint64_t)v66);
    sub_100006520((uint64_t)v65);
    sub_100006520((uint64_t)v64);
    swift_release_n();
    sub_100006520((uint64_t)v63);
  }

  sub_10001F1F0(v25, a14 + 24);
  sub_10001F1F0(&v94, a14 + 64);
  *(void *)(a14 + 104) = v22;
  sub_10001F1F0(&v91, a14 + 112);
  sub_10001F1F0(&v88, a14 + 152);
  sub_10001F1F0(v21, a14 + 232);
  sub_10001F1F0(&v85, a14 + 288);
  sub_10001F1F0(&v82, a14 + 368);
  sub_10001F1F0(&v79, a14 + 408);
  sub_10001F1F0(&v76, a14 + 192);
  *(void *)(a14 + 272) = a11;
  sub_10001F1F0(&v73, a14 + 328);
  *(unsigned char *)(a14 + 280) = a13 & 1;
  return a14;
}

uint64_t sub_100081D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v57 = a3;
  uint64_t v58 = a6;
  uint64_t v56 = a1;
  int v54 = a13;
  uint64_t v55 = a11;
  uint64_t v81 = type metadata accessor for CertificateManager();
  long long v82 = &off_1001C6308;
  v80[0] = a2;
  uint64_t v78 = type metadata accessor for MPOCDefaultAttestationManager();
  long long v79 = &off_1001C9838;
  v77[0] = a4;
  uint64_t v75 = type metadata accessor for MPOCDefaultMonitorManager();
  long long v76 = &off_1001CAE10;
  v74[0] = a5;
  uint64_t v72 = type metadata accessor for SystemInfo();
  long long v73 = &off_1001CB4C8;
  v71[0] = a7;
  uint64_t v69 = type metadata accessor for StoreAndForwardSelector();
  uint64_t v70 = &off_1001CC120;
  v68[0] = a8;
  uint64_t v66 = type metadata accessor for SignerFactory();
  uint64_t v67 = &off_1001CB9D0;
  v65[0] = a9;
  uint64_t v63 = type metadata accessor for DefaultSecureTimeKeeper();
  uint64_t v64 = &off_1001C84C8;
  v62[0] = a10;
  uint64_t v60 = type metadata accessor for SecureElement();
  unint64_t v61 = &off_1001CC7B8;
  v59[0] = a12;
  type metadata accessor for Configurator();
  uint64_t v53 = swift_allocObject();
  uint64_t v18 = sub_10001F1A0((uint64_t)v80, v81);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (uint64_t *)((char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_10001F1A0((uint64_t)v77, v78);
  __chkstk_darwin(v22, v22);
  os_log_type_t v24 = (uint64_t *)((char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_10001F1A0((uint64_t)v74, v75);
  __chkstk_darwin(v26, v26);
  unint64_t v28 = (uint64_t *)((char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = sub_10001F1A0((uint64_t)v71, v72);
  __chkstk_darwin(v30, v30);
  uint64_t v32 = (uint64_t *)((char *)&v52 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  uint64_t v34 = sub_10001F1A0((uint64_t)v68, v69);
  __chkstk_darwin(v34, v34);
  uint64_t v36 = (uint64_t *)((char *)&v52 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  uint64_t v38 = sub_10001F1A0((uint64_t)v65, v66);
  __chkstk_darwin(v38, v38);
  uint64_t v40 = (uint64_t *)((char *)&v52 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v41 + 16))(v40);
  uint64_t v42 = sub_10001F1A0((uint64_t)v62, v63);
  __chkstk_darwin(v42, v42);
  uint64_t v44 = (uint64_t *)((char *)&v52 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v45 + 16))(v44);
  uint64_t v46 = sub_10001F1A0((uint64_t)v59, v60);
  __chkstk_darwin(v46, v46);
  uint64_t v48 = (uint64_t *)((char *)&v52 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v49 + 16))(v48);
  uint64_t v50 = sub_10008140C(v56, *v20, v57, *v24, *v28, v58, *v32, *v36, *v40, *v44, v55, *v48, v54, v53);
  sub_100006520((uint64_t)v59);
  sub_100006520((uint64_t)v62);
  sub_100006520((uint64_t)v65);
  sub_100006520((uint64_t)v68);
  sub_100006520((uint64_t)v71);
  sub_100006520((uint64_t)v74);
  sub_100006520((uint64_t)v77);
  sub_100006520((uint64_t)v80);
  return v50;
}

uint64_t sub_100082448(uint64_t a1)
{
  uint64_t v3 = a1;
  sub_1000F8B20((uint64_t)v60);
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1000F9580((uint64_t)v59);
    sub_1000FC4BC((uint64_t)v57);
    uint64_t v4 = sub_1000FDA3C();
    sub_1000FDF58((uint64_t)v55);
    sub_1000FBF78((uint64_t)v54);
    uint64_t v6 = v61;
    uint64_t v7 = v62;
    sub_100006788(v60, v61);
    sub_100134448(1, v6, v7);
    sub_1000FB4F0((uint64_t)v52);
    sub_1000FE49C((uint64_t)v51);
    sub_1000FBA34((uint64_t)v50);
    sub_1000F85DC((uint64_t)v49);
    uint64_t v63 = sub_1000F9064();
    sub_1000FA008((uint64_t)v48);
    uint64_t v8 = a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings;
    int v45 = *(unsigned __int8 *)(v8 + *(int *)(type metadata accessor for Settings() + 60));
    uint64_t v9 = sub_10001F1A0((uint64_t)v57, v58);
    uint64_t v47 = v37;
    __chkstk_darwin(v9, v9);
    uint64_t v43 = (void *)((char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v11 + 16))();
    uint64_t v12 = sub_10001F1A0((uint64_t)v55, v56);
    uint64_t v46 = v37;
    __chkstk_darwin(v12, v12);
    uint64_t v41 = (void *)((char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v14 + 16))();
    uint64_t v15 = sub_10001F1A0((uint64_t)v54, v54[3]);
    uint64_t v44 = v37;
    __chkstk_darwin(v15, v15);
    uint64_t v39 = (void *)((char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v17 + 16))();
    uint64_t v18 = sub_10001F1A0((uint64_t)v52, v52[3]);
    uint64_t v42 = v37;
    __chkstk_darwin(v18, v18);
    uint64_t v38 = (void *)((char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(void))(v20 + 16))();
    uint64_t v21 = sub_10001F1A0((uint64_t)v51, v51[3]);
    uint64_t v40 = v37;
    __chkstk_darwin(v21, v21);
    uint64_t v23 = (void *)((char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v24 + 16))(v23);
    uint64_t v25 = sub_10001F1A0((uint64_t)v50, v50[3]);
    v37[3] = v37;
    __chkstk_darwin(v25, v25);
    uint64_t v27 = (void *)((char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v28 + 16))(v27);
    uint64_t v29 = sub_10001F1A0((uint64_t)v49, v49[3]);
    uint64_t v37[2] = v37;
    __chkstk_darwin(v29, v29);
    uint64_t v31 = (void *)((char *)v37 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v32 + 16))(v31);
    uint64_t v33 = sub_10001F1A0((uint64_t)v48, v48[3]);
    v37[1] = v37;
    __chkstk_darwin(v33, v33);
    uint64_t v35 = (void *)((char *)v37 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v36 + 16))(v35);
    uint64_t v3 = sub_100081D9C((uint64_t)v59, *v43, v4, *v41, *v39, (uint64_t)&v53, *v38, *v23, *v27, *v31, v63, *v35, v45);
    sub_100006520((uint64_t)v48);
    sub_100006520((uint64_t)v49);
    sub_100006520((uint64_t)v50);
    sub_100006520((uint64_t)v51);
    sub_100006520((uint64_t)v52);
    sub_100006520((uint64_t)v54);
    sub_100006520((uint64_t)v55);
    sub_100006520((uint64_t)v57);
    swift_release();
    sub_100006520((uint64_t)v60);
  }
  return v3;
}

void *sub_100082D14@<X0>(char a1@<W0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  char v5 = v2;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DC6E8);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v28 = a2;
    uint64_t v32 = sub_100005EB8(0xD00000000000001DLL, 0x8000000100197F00, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    if (a1) {
      uint64_t v12 = 1702195828;
    }
    else {
      uint64_t v12 = 0x65736C6166;
    }
    if (a1) {
      unint64_t v13 = 0xE400000000000000;
    }
    else {
      unint64_t v13 = 0xE500000000000000;
    }
    uint64_t v32 = sub_100005EB8(v12, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s, force: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    uint64_t v4 = v3;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if ((a1 & 1) != 0
    && (uint64_t v15 = v5[22],
        uint64_t v14 = v5[23],
        sub_100006788(v5 + 19, v15),
        (*(void (**)(uint64_t))(*(void *)(v14 + 8) + 8))(v15),
        v4))
  {
    sub_100003EB0(&qword_1001D9B38);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(unsigned char *)(inited + 32) = 19;
    *(void *)(inited + 64) = &type metadata for Int;
    *(void *)(inited + 40) = 7;
    unint64_t v17 = sub_100104C38(inited);
    __chkstk_darwin(v17, v18);
    uint64_t v20 = (uint64_t *)&v19[4];
    uint64_t v21 = v19 + 8;
    os_unfair_lock_lock(v19 + 8);
    sub_100085FE4(v20);
    os_unfair_lock_unlock(v21);
    uint64_t v22 = swift_bridgeObjectRelease();
    __chkstk_darwin(v22, v23);
    uint64_t v25 = (uint64_t *)&v24[4];
    uint64_t v26 = v24 + 8;
    os_unfair_lock_lock(v24 + 8);
    sub_100085FC0(v25);
    os_unfair_lock_unlock(v26);
    uint64_t v32 = v4;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    if (swift_dynamicCast())
    {
      sub_100136D54(v29, v30);
    }
    else
    {
      swift_errorRetain();
      sub_10002A974(2029, 0, 0, v4);
      swift_errorRelease();
    }
    swift_willThrow();
    return (void *)swift_errorRelease();
  }
  else
  {
    sub_100006788(v5 + 14, v5[17]);
    sub_1000D4970(v31);
    return memcpy(a2, v31, 0x122uLL);
  }
}

void sub_100083138(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v164 = a4;
  uint64_t v165 = a5;
  id v154 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v160 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  char v144 = (char *)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100003EB0(&qword_1001D9AE8);
  __chkstk_darwin(v12 - 8, v13);
  unint64_t v149 = (uint64_t *)((char *)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v150 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v148 = (char *)&v140 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v19 = __chkstk_darwin(v158, v18);
  uint64_t v146 = (uint64_t)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v145 = (uint64_t)&v140 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  char v143 = (char *)&v140 - v26;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  unint64_t v147 = (char *)&v140 - v29;
  __chkstk_darwin(v28, v30);
  uint64_t v162 = (uint64_t)&v140 - v31;
  uint64_t v32 = type metadata accessor for OSSignpostID();
  uint64_t v156 = *(void **)(v32 - 8);
  uint64_t v157 = v32;
  uint64_t v34 = __chkstk_darwin(v32, v33);
  id v155 = (char *)&v140 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v36);
  uint64_t v38 = (char *)&v140 - v37;
  if (qword_1001D90C0 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = sub_100003E78(v39, (uint64_t)qword_1001DC6E8);
  swift_bridgeObjectRetain_n();
  uint64_t v161 = v40;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  int v163 = v6;
  uint64_t v159 = v9;
  uint64_t v152 = a1;
  uint64_t v153 = a2;
  uint64_t v151 = v15;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    *(void *)&v171[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315394;
    v166[0] = sub_100005EB8(0xD000000000000029, 0x8000000100197B00, (uint64_t *)v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2080;
    Swift::String v45 = String.redactedToken()();
    v166[0] = sub_100005EB8(v45._countAndFlagsBits, (unint64_t)v45._object, (uint64_t *)v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v6 = v163;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s -> token: %s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  BOOL v46 = atomic_flag_test_and_set(v6 + 16);
  swift_endAccess();
  if (!v46)
  {
    if (qword_1001D90C8 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for OSSignposter();
    uint64_t v52 = sub_100003E78(v51, (uint64_t)qword_1001DC700);
    static OSSignpostID.exclusive.getter();
    uint64_t v142 = v52;
    uint64_t v53 = OSSignposter.logHandle.getter();
    os_signpost_type_t v54 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v55 = v155;
      uint64_t v56 = (uint64_t)v156;
      uint64_t v57 = (void (*)(char *, char *, uint64_t))v156[2];
      uint64_t v58 = v157;
      v57(v155, v38, v157);
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      os_signpost_id_t v60 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, v54, v60, "config-install-totalTime", "start install", v59, 2u);
      swift_slowDealloc();

      uint64_t v61 = v55;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v58);
      uint64_t v62 = v160;
    }
    else
    {

      uint64_t v56 = (uint64_t)v156;
      uint64_t v58 = v157;
      uint64_t v57 = (void (*)(char *, char *, uint64_t))v156[2];
      uint64_t v62 = v160;
      uint64_t v61 = v155;
    }
    v57(v61, v38, v58);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v63 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v58);
    uint64_t v64 = swift_allocBox();
    uint64_t v65 = *(void (**)(void))(v62 + 56);
    id v155 = v66;
    uint64_t v67 = v159;
    v65();
    uint64_t v141 = v65;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65)(v162, 1, 1, v67);
    uint64_t v68 = swift_allocObject();
    uint64_t v69 = (uint64_t)v163;
    swift_weakInit();
    uint64_t v70 = (void *)swift_allocObject();
    v70[2] = v64;
    v70[3] = v68;
    uint64_t v71 = v164;
    uint64_t v72 = v165;
    v70[4] = v63;
    void v70[5] = v71;
    uint64_t v156 = v70;
    v70[6] = v72;
    swift_beginAccess();
    sub_100006788((void *)(v69 + 328), *(void *)(v69 + 352));
    uint64_t v158 = v68;
    swift_retain();
    swift_retain();
    uint64_t v157 = v63;
    swift_retain();
    swift_retain();
    if ((sub_10016E1FC() & 1) == 0)
    {
      long long v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v75 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Incorrect JCOP version", v75, 2u);
        swift_slowDealloc();
      }

      if (*(unsigned char *)(v69 + 280) == 1)
      {
        long long v76 = (void *)sub_10002A974(2033, 0, 0, 0);
        sub_100003EB0(&qword_1001D9B38);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100186100;
        *(unsigned char *)(inited + 32) = 8;
        *(void *)&v171[0] = v76;
        type metadata accessor for ConfigurationError(0);
        sub_100084E34((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
        uint64_t v78 = _BridgedStoredNSError.errorCode.getter();
        *(void *)(inited + 64) = &type metadata for Int;
        *(void *)(inited + 40) = v78;
        unint64_t v79 = sub_100104C38(inited);
        *(&v140 - 2) = __chkstk_darwin(v79, v80);
        long long v82 = (uint64_t *)&v81[4];
        uint64_t v83 = v81 + 8;
        os_unfair_lock_lock(v81 + 8);
        sub_100085FE4(v82);
        os_unfair_lock_unlock(v83);
        swift_bridgeObjectRelease();
        id v84 = v76;
        sub_1000758E4(0, (uint64_t)v76, v64, v158, v157, v164, v165);
        swift_release();
        swift_release();
        swift_release();

        sub_10005F4F8(v162, (uint64_t *)&unk_1001DF8D0);
        goto LABEL_31;
      }
    }
    uint64_t v161 = v64;
    if (v154) {
      [v154 onUpdateWithEvent:0];
    }
    sub_100044AEC("config-install-preprosessing", 28, 2, v69, 0xD00000000000001BLL, 0x8000000100197A80);
    uint64_t v85 = *(void *)(v69 + 352);
    uint64_t v86 = sub_100006788((void *)(v69 + 328), v85);
    uint64_t v87 = *(void *)(v85 - 8);
    __chkstk_darwin(v86, v86);
    uint64_t v89 = (char *)&v140 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v87 + 16))(v89);
    uint64_t v90 = *(void **)(*(void *)v89 + 16);
    uint64_t v91 = v153;
    swift_bridgeObjectRetain();
    id v92 = [v90 serialNumber];
    if (v92)
    {
      uint64_t v93 = v92;
      unint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v96 = v95;

      (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v85);
      sub_100147FF8(v152, v91, v94, v96, v171);
      uint64_t v97 = v163;
      sub_100006788(&v163[192]._Value, *(void *)&v163[216]._Value);
      uint64_t v98 = (uint64_t (*)(void, void, void))v149;
      sub_1000238E4((uint64_t)v149);
      uint64_t v99 = v150;
      uint64_t v100 = v151;
      if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v150 + 48))(v98, 1, v151) == 1)
      {
        sub_10005F4F8((uint64_t)v98, &qword_1001D9AE8);
        uint64_t v101 = sub_10002A974(2039, 0xD00000000000001ELL, (void *)0x8000000100197AA0, 0);
        swift_willThrow();
        sub_100062020((uint64_t)v171);
LABEL_26:
        v166[0] = v101;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        type metadata accessor for ConfigurationError(0);
        if (swift_dynamicCast())
        {
          uint64_t v103 = v169;
          char v170 = v169;
          sub_100084E34((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
          if (_BridgedStoredNSError.errorCode.getter() >= 2000)
          {
            char v170 = v103;
            if (_BridgedStoredNSError.errorCode.getter() <= 2999)
            {
              swift_errorRelease();
              sub_100003EB0(&qword_1001D9B38);
              uint64_t v113 = swift_initStackObject();
              *(_OWORD *)(v113 + 16) = xmmword_100186100;
              *(unsigned char *)(v113 + 32) = 8;
              char v170 = v103;
              uint64_t v114 = _BridgedStoredNSError.errorCode.getter();
              *(void *)(v113 + 64) = &type metadata for Int;
              *(void *)(v113 + 40) = v114;
              unint64_t v115 = sub_100104C38(v113);
              *(&v140 - 2) = __chkstk_darwin(v115, v116);
              uint64_t v118 = (uint64_t *)&v117[4];
              uint64_t v119 = v117 + 8;
              os_unfair_lock_lock(v117 + 8);
              sub_100085FE4(v118);
              os_unfair_lock_unlock(v119);
              swift_bridgeObjectRelease();
              id v120 = v103;
              sub_1000758E4(0, (uint64_t)v103, v161, v158, v157, v164, v165);
              swift_release();
              swift_release();

              swift_release();
              sub_10005F4F8(v162, (uint64_t *)&unk_1001DF8D0);
              swift_errorRelease();
              goto LABEL_31;
            }
          }
        }
        swift_errorRelease();
        swift_errorRetain();
        id v104 = (void *)sub_10002A974(2016, 0, 0, v101);
        swift_errorRelease();
        sub_100003EB0(&qword_1001D9B38);
        uint64_t v105 = swift_initStackObject();
        *(_OWORD *)(v105 + 16) = xmmword_100186100;
        *(unsigned char *)(v105 + 32) = 8;
        v166[0] = v104;
        sub_100084E34((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
        uint64_t v106 = _BridgedStoredNSError.errorCode.getter();
        *(void *)(v105 + 64) = &type metadata for Int;
        *(void *)(v105 + 40) = v106;
        unint64_t v107 = sub_100104C38(v105);
        *(&v140 - 2) = __chkstk_darwin(v107, v108);
        os_log_type_t v110 = (uint64_t *)&v109[4];
        uint64_t v111 = v109 + 8;
        os_unfair_lock_lock(v109 + 8);
        sub_10001F088(v110);
        os_unfair_lock_unlock(v111);
        swift_bridgeObjectRelease();
        id v112 = v104;
        sub_1000758E4(0, (uint64_t)v104, v161, v158, v157, v164, v165);

        swift_release();
        swift_errorRelease();
        swift_release();
        swift_release();
        sub_10005F4F8(v162, (uint64_t *)&unk_1001DF8D0);
LABEL_31:
        swift_release();
        return;
      }
      uint64_t v102 = (uint64_t)v148;
      (*(void (**)(char *, uint64_t (*)(void, void, void), uint64_t))(v99 + 32))(v148, v98, v100);
      sub_100147B74(v102);
      int v121 = v147;
      sub_100147684(v147);
      uint64_t v123 = v159;
      uint64_t v122 = v160;
      uint64_t v124 = v160 + 48;
      unint64_t v149 = *(void **)(v160 + 48);
      int v125 = ((uint64_t (*)(char *, uint64_t, uint64_t))v149)(v121, 1, v159);
      if (v125 == 1)
      {
        sub_10005F4F8((uint64_t)v121, (uint64_t *)&unk_1001DF8D0);
        uint64_t v101 = sub_10002A974(2011, 0, 0, 0);
        swift_willThrow();
        sub_100062020((uint64_t)v171);
        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v102, v100);
        goto LABEL_26;
      }
      swift_release();
      uint64_t v164 = *(uint64_t (**)(uint64_t, uint64_t))(v122 + 32);
      uint64_t v165 = v124;
      uint64_t v126 = v144;
      ((void (*)(char *, char *, uint64_t))v164)(v144, v121, v123);
      uint64_t v127 = v143;
      sub_1001478C0(v143);
      sub_100062020((uint64_t)v171);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v148, v100);
      uint64_t v128 = v162;
      sub_10005F4F8(v162, (uint64_t *)&unk_1001DF8D0);
      sub_100029CEC((uint64_t)v127, v128, (uint64_t *)&unk_1001DF8D0);
      ((void (*)(char *, char *, uint64_t))v164)(v127, v126, v123);
      ((void (*)(char *, void, uint64_t, uint64_t))v141)(v127, 0, 1, v123);
      uint64_t v129 = (uint64_t)v155;
      swift_beginAccess();
      sub_100084540((uint64_t)v127, v129);
      sub_100009300((uint64_t)&v97[232], (uint64_t)v166);
      uint64_t v130 = v167;
      uint64_t v164 = v168;
      sub_100006788(v166, v167);
      sub_100003EB0(&qword_1001D9B20);
      uint64_t v131 = swift_initStackObject();
      *(_OWORD *)(v131 + 16) = xmmword_100186100;
      *(void *)(v131 + 32) = 1684631668;
      *(void *)(v131 + 40) = 0xE400000000000000;
      uint64_t v132 = v145;
      sub_100006724(v129, v145, (uint64_t *)&unk_1001DF8D0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v149)(v132, 1, v123) != 1)
      {
        uint64_t v133 = UUID.uuidString.getter();
        *(void *)(v131 + 72) = &type metadata for String;
        *(void *)(v131 + 80) = &protocol witness table for String;
        *(void *)(v131 + 48) = v133;
        *(void *)(v131 + 56) = v134;
        uint64_t v135 = v132;
        char v136 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
        v136(v135, v123);
        unint64_t v137 = sub_100104AF4(v131);
        sub_100136224(15, v137, v130, (uint64_t)v164);
        swift_bridgeObjectRelease();
        sub_100006520((uint64_t)v166);
        uint64_t v138 = v146;
        sub_100006724(v129, v146, (uint64_t *)&unk_1001DF8D0);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v149)(v138, 1, v123) != 1)
        {
          uint64_t v139 = v162;
          sub_1000760A4(v152, v153, v138, v162, (uint64_t)v154, (uint64_t)sub_100084530, (uint64_t)v156, 1);
          swift_release();
          swift_release();
          sub_10005F4F8(v139, (uint64_t *)&unk_1001DF8D0);
          v136(v138, v123);
          goto LABEL_31;
        }
LABEL_40:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "install in progress", v49, 2u);
    swift_slowDealloc();
  }

  uint64_t v50 = (void *)sub_10002A974(2026, 0xD000000000000013, (void *)0x8000000100197AE0, 0);
  v164(0, (uint64_t)v50);
}

uint64_t sub_1000844A8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000844E0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100084530(uint64_t a1, uint64_t a2)
{
  return sub_1000758E4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100084540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000845A8(uint64_t *a1)
{
  return sub_10006EA68(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_1000845C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100084624(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100084634()
{
  return swift_release();
}

uint64_t sub_10008463C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1)) {
    v10(v0 + v8, v1);
  }
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

void sub_1000847E4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100076434(a1, a2, a3, *(void *)(v3 + 16), *(unsigned char *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), v3 + v8, v3 + v11, *(void *)(v3 + v12), *(void (**)(void, void *))(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100084920()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100084960(void *a1, uint64_t a2)
{
  sub_1000772F4(a1, a2, *(void *)(v2 + 16), *(void (**)(void, void, id))(v2 + 24), *(void *)(v2 + 32));
}

void sub_10008496C(uint64_t a1, uint64_t a2)
{
  id v4 = [self sharedRemoteAdminManager];
  sub_100003EB0(&qword_1001DC940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100186100;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = 1;
  sub_100004B04(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  aBlock[4] = sub_100085168;
  void aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100077288;
  aBlock[3] = &unk_1001C8A40;
  unint64_t v8 = _Block_copy(aBlock);
  sub_1000448A0(a1);
  swift_release();
  [v4 connectToServer:0 initialClientRequestInfo:isa callback:v8];
  _Block_release(v8);
}

uint64_t sub_100084B34(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v2 = sub_10000C4B0(0xD000000000000013, 0x8000000100197C70), (v3 & 1) != 0)
    && (sub_100006570(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v11), (swift_dynamicCast() & 1) != 0)
    && *(void *)(a1 + 16)
    && (uint64_t v4 = v10, v5 = sub_10000C4B0(0xD000000000000015, 0x8000000100197C90), (v6 & 1) != 0)
    && (sub_100006570(*(void *)(a1 + 56) + 32 * v5, (uint64_t)&v11), (swift_dynamicCast() & 1) != 0))
  {
    if (*(void *)(a1 + 16) && (unint64_t v7 = sub_10000C4B0(0xD000000000000012, 0x8000000100197CB0), (v8 & 1) != 0))
    {
      sub_100006570(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v11);
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v12 + 1))
    {
      if (swift_dynamicCast()) {
        return v4;
      }
    }
    else
    {
      sub_10005F4F8((uint64_t)&v11, &qword_1001DD3F0);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_100084CD8(uint64_t a1)
{
  if (!*(void *)(a1 + 16) || (unint64_t v2 = sub_10000C4B0(0x6C62616C69617661, 0xEF79726F6D654D65), (v3 & 1) == 0))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_100006570(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  if (!*((void *)&v8 + 1))
  {
LABEL_8:
    sub_10005F4F8((uint64_t)&v7, &qword_1001DD3F0);
    return 0;
  }
  sub_100003EB0(&qword_1001DABD8);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t result = sub_100084B34(v6);
  if (v5) {
    return 0;
  }
  return result;
}

uint64_t sub_100084DC4()
{
  sub_100084E08(*(id *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

void sub_100084E08(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

void sub_100084E14()
{
  sub_100078A0C(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24), *(void (**)(void *, void, void *))(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

id sub_100084E28(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_100084E34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100084E7C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1)) {
    v10(v0 + v8, v1);
  }
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v7 | 7);
}

void sub_100085018(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_100076F18(a1, *(void (**)(void, id))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), v1 + v4, v1 + v7, *(void *)(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100085128()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100085168(uint64_t a1)
{
  sub_100076FC4(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_100085170()
{
  sub_10000FCAC(v0);
}

void sub_10008518C(char *a1@<X8>)
{
}

void sub_1000851A8(BOOL *a1@<X8>)
{
  sub_10000EB84(*(void *)(v1 + 16), a1, *(double *)(v1 + 24));
}

uint64_t type metadata accessor for Configurator.StoreAndForwardState()
{
  uint64_t result = qword_1001DC9E0;
  if (!qword_1001DC9E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100085214(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10008527C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000852DC(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_100085364(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100085364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000065D0(a31, a32);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100085484(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 224);
  sub_100029ABC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_10008550C()
{
  unint64_t result = qword_1001DC948;
  if (!qword_1001DC948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DC948);
  }
  return result;
}

uint64_t sub_100085560@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100159BC8(a1, a2);
}

uint64_t sub_100085580(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *(void *)a1 = *a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v23 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = a2[1];
      if (v8)
      {
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v8;
        uint64_t v9 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v9;
        uint64_t v10 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v10;
        uint64_t v11 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v11;
        uint64_t v12 = a2[9];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = v12;
        uint64_t v13 = a2[11];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = v13;
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 112) = a2[14];
        uint64_t v14 = a2[17];
        *(void *)(a1 + 128) = a2[16];
        *(void *)(a1 + 136) = v14;
        uint64_t v15 = a2[19];
        *(void *)(a1 + 144) = a2[18];
        *(void *)(a1 + 152) = v15;
        uint64_t v16 = a2[21];
        *(void *)(a1 + 160) = a2[20];
        *(void *)(a1 + 168) = v16;
        uint64_t v17 = a2[23];
        *(void *)(a1 + 176) = a2[22];
        *(void *)(a1 + 184) = v17;
        uint64_t v18 = a2[25];
        *(void *)(a1 + 192) = a2[24];
        *(void *)(a1 + 200) = v18;
        uint64_t v19 = a2[27];
        *(void *)(a1 + 208) = a2[26];
        *(void *)(a1 + 216) = v19;
        uint64_t v20 = a2[29];
        *(void *)(a1 + 224) = a2[28];
        *(void *)(a1 + 232) = v20;
        unint64_t v26 = a2[31];
        uint64_t v27 = a2[30];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000065D0(v27, v26);
        *(void *)(a1 + 240) = v27;
        *(void *)(a1 + 248) = v26;
        uint64_t v21 = a2[33];
        *(void *)(a1 + 256) = a2[32];
        *(void *)(a1 + 264) = v21;
        swift_bridgeObjectRetain();
      }
      else
      {
        memcpy((void *)a1, a2, 0x110uLL);
      }
      uint64_t v24 = a2[35];
      *(void *)(a1 + 272) = a2[34];
      *(void *)(a1 + 280) = v24;
      *(_WORD *)(a1 + 288) = *((_WORD *)a2 + 144);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    memcpy((void *)a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_100085804(void *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for UUID();
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  else if (!result)
  {
    if (a1[1])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100006628(a1[30], a1[31]);
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100085920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v8;
      uint64_t v9 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v9;
      uint64_t v10 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v10;
      uint64_t v11 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v11;
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v12;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      uint64_t v13 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = v13;
      uint64_t v14 = *(void *)(a2 + 152);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = v14;
      uint64_t v15 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v15;
      uint64_t v16 = *(void *)(a2 + 184);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = v16;
      uint64_t v17 = *(void *)(a2 + 200);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = v17;
      uint64_t v18 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v18;
      uint64_t v19 = *(void *)(a2 + 232);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = v19;
      unint64_t v24 = *(void *)(a2 + 248);
      uint64_t v25 = *(void *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000065D0(v25, v24);
      *(void *)(a1 + 240) = v25;
      *(void *)(a1 + 248) = v24;
      uint64_t v20 = *(void *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(void *)(a1 + 264) = v20;
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy((void *)a1, (const void *)a2, 0x110uLL);
    }
    uint64_t v22 = *(void *)(a2 + 280);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v22;
    *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t sub_100085B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008527C(a1, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      if (*(void *)(a2 + 8))
      {
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        uint64_t v7 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v7;
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(void *)(a1 + 200) = *(void *)(a2 + 200);
        *(void *)(a1 + 208) = *(void *)(a2 + 208);
        *(void *)(a1 + 216) = *(void *)(a2 + 216);
        *(void *)(a1 + 224) = *(void *)(a2 + 224);
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        unint64_t v11 = *(void *)(a2 + 248);
        uint64_t v12 = *(void *)(a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000065D0(v12, v11);
        *(void *)(a1 + 240) = v12;
        *(void *)(a1 + 248) = v11;
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        *(void *)(a1 + 264) = *(void *)(a2 + 264);
        swift_bridgeObjectRetain();
      }
      else
      {
        memcpy((void *)a1, (const void *)a2, 0x110uLL);
      }
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      uint64_t v9 = *(void *)(a2 + 280);
      *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 288);
      *(void *)(a1 + 280) = v9;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100085E44(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008527C((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Configurator.StoreAndForwardState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100085F20()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100085FC0(uint64_t *a1)
{
  return sub_1000845A8(a1);
}

uint64_t sub_100085FE4(uint64_t *a1)
{
  return sub_10001F088(a1);
}

uint64_t sub_100085FFC(uint64_t a1)
{
  return sub_10001F050(a1);
}

uint64_t sub_100086014(uint64_t *a1)
{
  return sub_10001F06C(a1);
}

uint64_t sub_10008602C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DCA18);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DCA18);
  if (qword_1001D9280 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E10A0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000860F4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DCA30);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DCA30);
  if (qword_1001D9248 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FF8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000861BC@<X0>(char *a1@<X8>)
{
  uint64_t v2 = self;
  id v3 = [v2 sharedHardwareManager];
  uint64_t v15 = j___s7SPRBase9BitStringV4data10unusedBitsAC10Foundation4DataV_s5UInt8VtcfC;
  uint64_t v16 = 0;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_100005210;
  uint64_t v14 = &unk_1001C8AB8;
  unint64_t v4 = _Block_copy(&aBlock);
  id v5 = [v3 startSecureElementReaderSession:v4];
  _Block_release(v4);

  id v6 = [v2 sharedHardwareManager];
  uint64_t v15 = BitString.init(data:unusedBits:);
  uint64_t v16 = 0;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v12 = 1107296256;
  uint64_t v13 = sub_100005210;
  uint64_t v14 = &unk_1001C8AE0;
  uint64_t v7 = _Block_copy(&aBlock);
  id v8 = [v6 startSecureElementReaderSession:v7];
  _Block_release(v7);

  if ([v5 isFirstInQueue]) {
    char v9 = [v8 isFirstInQueue] ^ 1;
  }
  else {
    char v9 = 1;
  }
  [v5 endSession];
  [v8 endSession];
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v9;
  return result;
}

uint64_t sub_1000863BC()
{
  swift_bridgeObjectRelease();

  sub_100006520(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MPOCDefaultAttestationData()
{
  return self;
}

uint64_t sub_100086428(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100086438()
{
  return swift_release();
}

void *sub_100086440(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4, v5);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v21 = type metadata accessor for SecureElement();
  uint64_t v22 = &off_1001CC7B8;
  *(void *)&long long v20 = a1;
  a2[2] = 0xD000000000000017;
  a2[3] = 0x8000000100196850;
  sub_10001F160();
  static DispatchQoS.background.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_100086AF0();
  sub_100003EB0((uint64_t *)&unk_1001DD350);
  sub_10006BA74();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  a2[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_1001D90D8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100003E78(v13, (uint64_t)qword_1001DCA30);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    v18[1] = sub_100005EB8(0xD000000000000014, 0x8000000100197F90, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10001F1F0(&v20, (uint64_t)(a2 + 5));
  return a2;
}

uint64_t sub_1000867C8()
{
  uint64_t v0 = self;
  id v1 = [v0 processInfo];
  [v1 operatingSystemVersion];
  unint64_t v2 = v10;

  id v3 = [v0 processInfo];
  [v3 operatingSystemVersion];
  unint64_t v4 = v11;

  id v5 = [v0 processInfo];
  [v5 operatingSystemVersion];
  uint64_t v6 = v12;

  if ((v2 & 0x8000000000000000) != 0)
  {
    LOBYTE(v2) = 0;
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_13;
    }
  }
  else
  {
    if (v2 <= 0xFF)
    {
      if ((v4 & 0x8000000000000000) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      if (v6 < 0)
      {
        int v8 = 0;
        LOBYTE(v4) = 0;
        return v8 | (v4 << 8) | v2;
      }
      LOBYTE(v4) = 0;
      goto LABEL_6;
    }
    LOBYTE(v2) = -1;
    if ((v4 & 0x8000000000000000) != 0) {
      goto LABEL_13;
    }
  }
LABEL_4:
  if (v4 > 0xFF)
  {
    LOBYTE(v4) = -1;
    if ((v6 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_16:
    int v8 = 0;
    return v8 | (v4 << 8) | v2;
  }
  if (v6 < 0) {
    goto LABEL_16;
  }
LABEL_6:
  unsigned __int8 v7 = -1;
  if (v6 < 255) {
    unsigned __int8 v7 = v6;
  }
  int v8 = v7 << 16;
  return v8 | (v4 << 8) | v2;
}

void *sub_10008690C(void *a1)
{
  sub_1000FA008((uint64_t)v16);
  if (!v1)
  {
    uint64_t v3 = sub_10001F1A0((uint64_t)v16, v17);
    __chkstk_darwin(v3, v3);
    id v5 = (void *)((char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = *v5;
    uint64_t v8 = type metadata accessor for SecureElement();
    void v15[3] = v8;
    v15[4] = &off_1001CC7B8;
    v15[0] = v7;
    type metadata accessor for MPOCDefaultAttestationData();
    uint64_t v9 = (void *)swift_allocObject();
    uint64_t v10 = sub_10001F1A0((uint64_t)v15, v8);
    __chkstk_darwin(v10, v10);
    uint64_t v12 = (void *)((char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v13 + 16))(v12);
    a1 = sub_100086440(*v12, v9);
    sub_100006520((uint64_t)v15);
    sub_100006520((uint64_t)v16);
  }
  return a1;
}

unint64_t sub_100086AF0()
{
  unint64_t result = qword_1001DA4F0;
  if (!qword_1001DA4F0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DA4F0);
  }
  return result;
}

uint64_t sub_100086B54()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DCB58);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DCB58);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100086C1C()
{
  [*(id *)(v0 + 72) finishTasksAndInvalidate];
  swift_unknownObjectRelease();
  sub_100006520(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureChannel()
{
  return self;
}

uint64_t sub_100086C98@<X0>(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v118 = a3;
  int v82 = a2;
  uint64_t v83 = a4;
  uint64_t v84 = type metadata accessor for DispatchTime();
  uint64_t v88 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v5);
  uint64_t v87 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URLRequest();
  uint64_t v86 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  long long v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v74 - v22;
  uint64_t v90 = a1;
  URLRequest.url.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10008CCF8((uint64_t)v14);
    sub_10002A75C(5005, 0xD000000000000019, (void *)0x8000000100198130, 0);
    return swift_willThrow();
  }
  uint64_t v89 = v10;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v14, v15);
  if (qword_1001D90E0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100003E78(v25, (uint64_t)qword_1001DCB58);
  unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v80 = v23;
  v26(v20, v23, v15);
  uint64_t v27 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v89, v90, v7);
  uint64_t v28 = v88;
  uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v88 + 16);
  uint64_t v81 = v15;
  uint64_t v30 = v7;
  uint64_t v31 = v87;
  uint64_t v32 = v84;
  v29(v87, v118, v84);
  uint64_t v33 = Logger.logObject.getter();
  int v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, (os_log_type_t)v79))
  {
    uint64_t v34 = v32;
    os_log_t v75 = v33;
    uint64_t v76 = v30;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(void *)&long long v93 = v74;
    *(_DWORD *)uint64_t v35 = 136315650;
    sub_10008CDAC((unint64_t *)&qword_1001DCC78, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v36 = v81;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v92 = sub_100005EB8(v37, v38, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v77 = v16;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v16 + 8);
    v39(v20, v36);
    *(_WORD *)(v35 + 12) = 2080;
    uint64_t v40 = URLRequest.allHTTPHeaderFields.getter();
    uint64_t v78 = v39;
    if (!v40) {
      uint64_t v40 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v42 = v91;
    uint64_t v44 = v87;
    uint64_t v43 = v88;
    uint64_t v45 = v86;
    uint64_t v88 = v35 + 14;
    sub_10008BE28(v40, v41);
    uint64_t v91 = v42;
    swift_bridgeObjectRelease();
    uint64_t v46 = Dictionary.description.getter();
    unint64_t v48 = v47;
    swift_release();
    uint64_t v92 = sub_100005EB8(v46, v48, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v89, v76);
    *(_WORD *)(v35 + 22) = 2048;
    uint64_t v49 = DispatchTime.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v34);
    uint64_t v92 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v50 = v75;
    _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v79, "SecureChannel.securingRequest(url: %s, redactedHTTPHeaderFields: %s, deadline: %llu)", (uint8_t *)v35, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v51 = v77;
    uint64_t v52 = v81;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v32);
    uint64_t v51 = v16;
    uint64_t v53 = v81;
    uint64_t v78 = *(void (**)(char *, uint64_t))(v16 + 8);
    v78(v20, v81);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v89, v30);

    uint64_t v52 = v53;
  }
  uint64_t v54 = v85;
  sub_100006788((void *)(v85 + 32), *(void *)(v85 + 56));
  sub_100060998((uint64_t)v114);
  sub_1000621B0((uint64_t)v114, (uint64_t)v116);
  int v55 = sub_100029A28((uint64_t)v116);
  uint64_t v56 = v91;
  uint64_t v57 = v80;
  if (v55 != 1)
  {
    uint64_t v58 = v117;
    memcpy(v117, v116, 0x110uLL);
    sub_100006788((void *)(v54 + 32), *(void *)(v54 + 56));
    if (sub_1000614E8((uint64_t)v117)) {
      goto LABEL_15;
    }
    sub_100029A40((uint64_t)v114);
  }
  uint64_t v58 = v115;
  sub_100089950(v57, v118, v115);
  if (v56) {
    return ((uint64_t (*)(char *, uint64_t))v78)(v57, v52);
  }
LABEL_15:
  int v59 = v82 & 1;
  uint64_t v60 = *((void *)v58 + 32);
  uint64_t v61 = (void *)*((void *)v58 + 33);
  uint64_t v62 = *((void *)v58 + 10);
  uint64_t v63 = *((void *)v58 + 11);
  uint64_t v64 = *((void *)v58 + 14);
  uint64_t v65 = *((void *)v58 + 2);
  uint64_t v66 = *((void *)v58 + 3);
  long long v67 = *(_OWORD *)v58;
  LOBYTE(v92) = v58[120] & 1;
  long long v93 = v67;
  uint64_t v94 = v65;
  uint64_t v95 = v66;
  long long v69 = *((_OWORD *)v58 + 3);
  long long v68 = *((_OWORD *)v58 + 4);
  long long v96 = *((_OWORD *)v58 + 2);
  long long v97 = v69;
  long long v98 = v68;
  uint64_t v99 = v62;
  uint64_t v100 = v63;
  long long v101 = *((_OWORD *)v58 + 6);
  uint64_t v102 = v64;
  char v103 = v92;
  long long v70 = *((_OWORD *)v58 + 9);
  long long v104 = *((_OWORD *)v58 + 8);
  long long v105 = v70;
  long long v71 = *((_OWORD *)v58 + 11);
  long long v106 = *((_OWORD *)v58 + 10);
  long long v107 = v71;
  long long v72 = *((_OWORD *)v58 + 13);
  long long v108 = *((_OWORD *)v58 + 12);
  long long v109 = v72;
  long long v73 = *((_OWORD *)v58 + 15);
  long long v110 = *((_OWORD *)v58 + 14);
  long long v111 = v73;
  uint64_t v112 = v60;
  uint64_t v113 = v61;
  swift_bridgeObjectRetain();
  sub_1000885F4(v90, v59, v60, v61, v118, v83);
  swift_bridgeObjectRelease();
  sub_100062020((uint64_t)&v93);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v57, v52);
}

uint64_t sub_100087494(uint64_t a1, char a2, unint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  LODWORD(v27) = a2 & 1;
  uint64_t v9 = type metadata accessor for URLRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D90E0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v25 = sub_100003E78(v14, (uint64_t)qword_1001DCB58);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v22 = a1;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = v13;
    uint64_t v24 = v10;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = v6;
    uint64_t v29 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v28 = sub_100005EB8(0xD000000000000025, 0x8000000100198100, &v29);
    a1 = v22;
    uint64_t v5 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "SecureChannel.%s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v13 = v23;
    uint64_t v10 = v24;
    swift_slowDealloc();
  }

  sub_100086C98(a1, v27, a3, (uint64_t)v13);
  if (!v5)
  {
    uint64_t v5 = sub_10008A914();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return v5;
}

id sub_10008792C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  int v68 = a2 & 1;
  uint64_t v7 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v7 - 8, v8);
  int v59 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v60 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchTime();
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v67 = v14;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v64 = (char *)v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v65 = (char *)v55 - v19;
  uint64_t v20 = type metadata accessor for URLRequest();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v70 = (uint64_t)v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)v55 - v26;
  if (qword_1001D90E0 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100003E78(v28, (uint64_t)qword_1001DCB58);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v69 = a1;
  v29(v27, a1, v20);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v58 = v13;
  uint64_t v62 = v20;
  uint64_t v63 = a3;
  uint64_t v61 = v21;
  if (v32)
  {
    uint64_t v56 = a4;
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    aBlock[0] = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v35 = URLRequest.allHTTPHeaderFields.getter();
    _OWORD v55[2] = v10;
    v55[1] = v34;
    if (!v35) {
      uint64_t v35 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v37 = v71;
    sub_10008BE28(v35, v36);
    swift_bridgeObjectRelease();
    uint64_t v38 = Dictionary.description.getter();
    unint64_t v40 = v39;
    swift_release();
    uint64_t v72 = sub_100005EB8(v38, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void (**)(char *, uint64_t))(v61 + 8);
    v57(v27, v62);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "SecureChannel.secureDownloadTask(with: %s, completion: <block>)", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v56;
  }
  else
  {
    uint64_t v57 = *(void (**)(char *, uint64_t))(v21 + 8);
    v57(v27, v20);

    uint64_t v37 = v71;
  }
  uint64_t v41 = v64;
  static DispatchTime.now()();
  uint64_t v42 = *(void **)(v37 + 72);
  id v43 = [v42 configuration];
  [v43 timeoutIntervalForResource];

  unint64_t v44 = (unint64_t)v65;
  + infix(_:_:)();
  uint64_t v45 = v67;
  uint64_t v46 = *(void (**)(char *, uint64_t))(v66 + 8);
  v46(v41, v67);
  uint64_t v47 = v70;
  sub_100086C98(v69, v68, v44, v70);
  v46((char *)v44, v45);
  unint64_t v48 = (void *)swift_allocObject();
  uint64_t v49 = v63;
  _OWORD v48[2] = v37;
  void v48[3] = v49;
  void v48[4] = a4;
  swift_retain();
  swift_retain();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = sub_10008CEE4;
  *(void *)(v51 + 24) = v48;
  aBlock[4] = (uint64_t)sub_10008CF28;
  void aBlock[5] = v51;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100088494;
  aBlock[3] = (uint64_t)&unk_1001C8C48;
  uint64_t v52 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v53 = [v42 downloadTaskWithRequest:isa completionHandler:v52];
  _Block_release(v52);
  swift_release();

  v57((char *)v47, v62);
  return v53;
}

uint64_t sub_10008814C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (a2)
  {
    uint64_t v20 = a2;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    type metadata accessor for SPRHTTPError(0);
    if (swift_dynamicCast())
    {
      if (related decl 'e' for SPRHTTPErrorCode.isTimeTokenError.getter())
      {
        if (qword_1001D90E0 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_100003E78(v8, (uint64_t)qword_1001DCB58);
        id v9 = v19;
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          id v18 = v9;
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v17 = swift_slowAlloc();
          *(_DWORD *)uint64_t v12 = 136315138;
          uint64_t v20 = v17;
          id v13 = v9;
          uint64_t v14 = String.init<A>(describing:)();
          sub_100005EB8(v14, v15, &v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          id v9 = v18;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Time token expired: %s", v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_100006788((void *)(a3 + 32), *(void *)(a3 + 56));
        sub_100061180();
      }
      else
      {
      }
    }
  }
  return a4(a1, a2);
}

uint64_t sub_1000883C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v8 - 8, v9);
  os_log_type_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  a4(v11, a6);
  return sub_10008CCF8((uint64_t)v11);
}

uint64_t sub_100088494(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v8 - 8, v9);
  os_log_type_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void (**)(char *, void *, void *))(a1 + 32);
  if (a2)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 0, 1, v13);
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  }
  swift_retain();
  id v15 = a3;
  id v16 = a4;
  v12(v11, a3, a4);

  swift_release();
  return sub_10008CCF8((uint64_t)v11);
}

uint64_t sub_1000885F4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v155 = a5;
  uint64_t v157 = a3;
  int v143 = a2;
  uint64_t v9 = type metadata accessor for URLRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  char v144 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  id v16 = (char *)&v133 - v15;
  if (qword_1001D90E0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = sub_100003E78(v17, (uint64_t)qword_1001DCB58);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t countAndFlagsBits = a1;
  uint64_t v142 = v10 + 16;
  uint64_t v141 = v19;
  v19(v16, a1, v9);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v139 = a6;
  uint64_t v156 = v9;
  uint64_t v146 = v10;
  uint64_t v147 = v18;
  uint64_t v153 = a4;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v159 = (void *)swift_slowAlloc();
    int v163 = v159;
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v24 = URLRequest.allHTTPHeaderFields.getter();
    if (!v24) {
      uint64_t v24 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v26 = v161;
    sub_10008BE28(v24, v25);
    uint64_t v161 = v26;
    swift_bridgeObjectRelease();
    uint64_t v27 = Dictionary.description.getter();
    unint64_t v29 = v28;
    swift_release();
    uint64_t v166 = sub_100005EB8(v27, v29, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v146 + 8))(v16, v156);
    *(_WORD *)(v23 + 12) = 2080;
    uint64_t v30 = v153;
    uint64_t v31 = v157;
    if (v153) {
      uint64_t v32 = v157;
    }
    else {
      uint64_t v32 = 4271950;
    }
    if (v153) {
      unint64_t v33 = (unint64_t)v153;
    }
    else {
      unint64_t v33 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v166 = sub_100005EB8(v32, v33, (uint64_t *)&v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "SecureChannel.signRequest(%s, timeToken: %s)", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v30;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);

    swift_bridgeObjectRelease_n();
    uint64_t v31 = v157;
  }
  uint64_t v34 = v154;
  uint64_t v36 = v154[7];
  uint64_t v35 = v154[8];
  char v136 = v154 + 4;
  sub_100006788(v154 + 4, v36);
  (*(void (**)(uint64_t))(*(void *)(v35 + 8) + 24))(v36);
  uint64_t v145 = Double.description.getter();
  uint64_t v159 = v37;
  uint64_t v38 = sub_10008C4F0(countAndFlagsBits, v145, v37, v31, a4);
  unint64_t v40 = v39;
  uint64_t v41 = v34[2];
  uint64_t v42 = v34[3];
  uint64_t ObjectType = swift_getObjectType();
  sub_1000065D0(v38, v40);
  uint64_t v43 = Data.sha256Digest.getter(v38, v40);
  unint64_t v45 = v44;
  uint64_t v151 = v38;
  unint64_t v152 = v40;
  sub_100006628(v38, v40);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, unint64_t, void, unint64_t, uint64_t, uint64_t))(v42 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v158 = &v133;
  uint64_t v140 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v135 = *(void *)(v140 + 64);
  __chkstk_darwin(AssociatedTypeWitness, v48);
  os_log_t v50 = (char *)&v133 - v49;
  uint64_t v149 = v43;
  unint64_t v150 = v45;
  uint64_t v138 = v41;
  uint64_t v51 = ObjectType;
  uint64_t v52 = v161;
  uint64_t v161 = v42 + 40;
  unint64_t v137 = v46;
  uint64_t v53 = v46((char *)&v133 - v49, v43, v45, 0, v155, ObjectType, v42);
  uint64_t v55 = v52;
  if (!v52)
  {
    unint64_t v155 = v54;
    uint64_t v161 = v53;
    id v154 = 0;
    sub_100006628(v149, v150);
    uint64_t v164 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v72 = sub_10008CDF4((uint64_t *)&v163);
    (*(void (**)(uint64_t *, char *, uint64_t))(v140 + 32))(v72, v50, AssociatedTypeWitness);
    goto LABEL_24;
  }
  uint64_t v134 = AssociatedTypeWitness;
  swift_bridgeObjectRelease();
  sub_100006628(v149, v150);
  type metadata accessor for Code(0);
  uint64_t v166 = 10006;
  swift_errorRetain();
  sub_10008CDAC(&qword_1001D87C8, type metadata accessor for Code);
  char v56 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if (v56)
  {
    swift_errorRelease();
    uint64_t v57 = v51;
    (*(void (**)(uint64_t, uint64_t))(v42 + 56))(v51, v42);
    uint64_t v59 = v154[7];
    uint64_t v58 = v154[8];
    sub_100006788(v136, v59);
    (*(void (**)(uint64_t))(*(void *)(v58 + 8) + 24))(v59);
    uint64_t v145 = Double.description.getter();
    uint64_t v159 = v60;
    uint64_t v61 = sub_10008C4F0(countAndFlagsBits, v145, v60, v157, v153);
    unint64_t v63 = v62;
    sub_100006628(v151, v152);
    sub_1000065D0(v61, v63);
    uint64_t v64 = Data.sha256Digest.getter(v61, v63);
    unint64_t v66 = v65;
    uint64_t v67 = sub_100006628(v61, v63);
    uint64_t v158 = &v133;
    __chkstk_darwin(v67, v68);
    uint64_t v70 = (char *)&v133 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v71 = v137(v70, v64, v66, 0, v155, v57, v42);
    unint64_t v155 = v89;
    uint64_t v161 = v71;
    id v154 = 0;
    sub_100006628(v64, v66);
    uint64_t v90 = v134;
    uint64_t v164 = v134;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v91 = sub_10008CDF4((uint64_t *)&v163);
    (*(void (**)(uint64_t *, char *, uint64_t))(v140 + 32))(v91, v70, v90);
    uint64_t v151 = v61;
    unint64_t v152 = v63;
LABEL_24:
    uint64_t v92 = static Data.randomBytes(count:)(0x10uLL);
    unint64_t v94 = v93;
    Data.hexString()();
    sub_100006628(v92, v94);
    Swift::String v95 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v96 = static Data.randomBytes(count:)(8uLL);
    unint64_t v98 = v97;
    Data.hexString()();
    sub_100006628(v96, v98);
    Swift::String v99 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v100 = v144;
    v141(v144, countAndFlagsBits, v156);
    swift_bridgeObjectRetain();
    uint64_t countAndFlagsBits = v95._countAndFlagsBits;
    v101._uint64_t countAndFlagsBits = 0x6172542D33422D58;
    v101._unint64_t object = (void *)0xEC00000064496563;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v95, v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v102._uint64_t countAndFlagsBits = 0x6170532D33422D58;
    v102._unint64_t object = (void *)0xEB0000000064496ELL;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v99, v102);
    swift_bridgeObjectRelease();
    v103._uint64_t countAndFlagsBits = 0xD000000000000017;
    v103._unint64_t object = (void *)0x8000000100198050;
    v104.value._uint64_t countAndFlagsBits = v145;
    v104.value._unint64_t object = v159;
    URLRequest.setValue(_:forHTTPHeaderField:)(v104, v103);
    swift_bridgeObjectRelease();
    uint64_t v105 = v164;
    uint64_t v106 = AssociatedConformanceWitness;
    sub_100006788(&v163, v164);
    uint64_t v107 = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 48))(v105, v106);
    unint64_t v109 = v108;
    Swift::String v110 = Data.base64EncodedString(options:)(0);
    sub_100006628(v107, v109);
    v111._uint64_t countAndFlagsBits = 0xD000000000000013;
    v111._unint64_t object = (void *)0x8000000100198070;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v110, v111);
    swift_bridgeObjectRelease();
    Swift::String v112 = Data.base64EncodedString(options:)(0);
    v113._uint64_t countAndFlagsBits = 0xD000000000000011;
    v113._unint64_t object = (void *)0x8000000100198090;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v112, v113);
    swift_bridgeObjectRelease();
    if (v143) {
      unint64_t v114 = 0xD000000000000018;
    }
    else {
      unint64_t v114 = 0xD000000000000010;
    }
    if (v143) {
      unint64_t v115 = 0x8000000100193A40;
    }
    else {
      unint64_t v115 = 0x8000000100193A20;
    }
    unint64_t v116 = v115;
    v117._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
    v117._unint64_t object = (void *)0xEC00000065707954;
    URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)&v114, v117);
    swift_bridgeObjectRelease();
    uint64_t v118 = v164;
    uint64_t v119 = AssociatedConformanceWitness;
    sub_100006788(&v163, v164);
    id v120 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 56))(v118, v119);
    if (v120[2])
    {
      uint64_t v121 = v120[4];
      unint64_t v122 = v120[5];
      sub_1000065D0(v121, v122);
      swift_bridgeObjectRelease();
      Swift::String v123 = Data.base64EncodedString(options:)(0);
      v124._uint64_t countAndFlagsBits = 0xD000000000000014;
      v124._unint64_t object = (void *)0x80000001001980B0;
      URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v123, v124);
      swift_bridgeObjectRelease();
      sub_100006628(v121, v122);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    int v125 = v153;
    if (v153)
    {
      v126._uint64_t countAndFlagsBits = 0xD000000000000012;
      v126._unint64_t object = (void *)0x80000001001911F0;
      uint64_t v127 = v157;
      URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)(&v125 - 1), v126);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v128 = Logger.logObject.getter();
    os_log_type_t v129 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v128, v129))
    {
      uint64_t v130 = swift_slowAlloc();
      uint64_t v166 = swift_slowAlloc();
      *(_DWORD *)uint64_t v130 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v162 = sub_100005EB8(countAndFlagsBits, (unint64_t)v95._object, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v130 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v162 = sub_100005EB8(v99._countAndFlagsBits, (unint64_t)v99._object, &v166);
      uint64_t v100 = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v128, v129, "Request signed. traceId: %s, spanId: %s", (uint8_t *)v130, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100006628(v151, v152);
      sub_100006628(v161, v155);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      sub_100006628(v161, v155);
      sub_100006628(v151, v152);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v146 + 32))(v139, v100, v156);
    return sub_100006520((uint64_t)&v163);
  }
  uint64_t v166 = 10003;
  swift_errorRetain();
  char v73 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if (v73)
  {
    swift_errorRelease();
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v166 = swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 136315138;
      uint64_t v77 = (void *)sub_10002A180(10003, 0, 0, 0);
      uint64_t v162 = (uint64_t)v77;
      type metadata accessor for SecurityError(0);
      sub_10008CDAC(&qword_1001D87A8, type metadata accessor for SecurityError);
      uint64_t v78 = Error.localizedDescription.getter();
      unint64_t v80 = v79;

      uint64_t v162 = sub_100005EB8(v78, v80, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Error signing secure channel request: %s", v76, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v81 = v152;
    uint64_t v82 = v151;
    sub_10002A75C(5006, 0, 0, 0);
    swift_willThrow();
    return sub_100006628(v82, v81);
  }
  else
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      uint64_t v166 = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136315138;
      swift_getErrorValue();
      uint64_t v87 = Error.localizedDescription.getter();
      uint64_t v162 = sub_100005EB8(v87, v88, &v166);
      uint64_t v55 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Error signing secure channel request: %s", v86, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v131 = v152;
    uint64_t v132 = v151;
    swift_errorRetain();
    sub_10002A75C(5001, 0, 0, v55);
    swift_errorRelease();
    swift_willThrow();
    sub_100006628(v132, v131);
    return swift_errorRelease();
  }
}

void *sub_100089950@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v127 = a2;
  uint64_t v105 = a3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v102 = *(void *)(v4 - 8);
  uint64_t v103 = v4;
  __chkstk_darwin(v4, v5);
  Swift::String v101 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URLRequest();
  uint64_t v116 = *(void *)(v7 - 8);
  uint64_t v117 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v113 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v119 = (uint64_t)&v97 - v12;
  uint64_t v13 = type metadata accessor for URL.DirectoryHint();
  Class isa = v13[-1].isa;
  os_log_t v112 = v13;
  __chkstk_darwin(v13, v14);
  Swift::String v110 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v16 - 8, v17);
  Swift::String v123 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URLComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v121 = v19;
  uint64_t v122 = v20;
  __chkstk_darwin(v19, v21);
  int v125 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchTime();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for URL();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  unint64_t v109 = (void (*)(char *, uint64_t))((char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v118 = (char *)&v97 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  id v120 = (char *)&v97 - v38;
  __chkstk_darwin(v37, v39);
  uint64_t v41 = (char *)&v97 - v40;
  if (qword_1001D90E0 != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  uint64_t v43 = sub_100003E78(v42, (uint64_t)qword_1001DCB58);
  unint64_t v44 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  Swift::String v124 = a1;
  uint64_t v107 = v44;
  uint64_t v108 = v29 + 16;
  v44(v41, (char *)a1, v28);
  (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v27, v127, v23);
  uint64_t v104 = v43;
  unint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  int v47 = v46;
  BOOL v48 = os_log_type_enabled(v45, v46);
  uint64_t v126 = v29;
  if (v48)
  {
    uint64_t v49 = swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    uint64_t v128 = (char *)v100;
    *(_DWORD *)uint64_t v49 = 136315394;
    uint64_t v106 = (void (*)(char *, uint64_t))(v49 + 4);
    sub_10008CDAC((unint64_t *)&qword_1001DCC78, (void (*)(uint64_t))&type metadata accessor for URL);
    int v99 = v47;
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v131 = sub_100005EB8(v50, v51, (uint64_t *)&v128);
    uint64_t v98 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v106 = *(void (**)(char *, uint64_t))(v126 + 8);
    v106(v41, v28);
    *(_WORD *)(v49 + 12) = 2048;
    uint64_t v52 = DispatchTime.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v98);
    uint64_t v131 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v99, "SecureChannel.refreshTimeToken(url: %s, deadline: %llu)", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v29 = v126;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
    uint64_t v106 = *(void (**)(char *, uint64_t))(v29 + 8);
    v106(v41, v28);
  }

  uint64_t v53 = v125;
  URLComponents.init()();
  URL.host.getter();
  URLComponents.host.setter();
  URL.scheme.getter();
  URLComponents.scheme.setter();
  URL.port.getter();
  URLComponents.port.setter();
  uint64_t v54 = (uint64_t)v123;
  URLComponents.url.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v54, 1, v28) == 1)
  {
    sub_10008CCF8(v54);
    sub_10002A75C(5005, 0xD000000000000016, (void *)0x8000000100198010, 0);
    swift_willThrow();
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v53, v121);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v120, v54, v28);
    uint64_t v128 = (char *)0xD000000000000011;
    unint64_t v129 = 0x8000000100198030;
    uint64_t v57 = v110;
    Class v56 = isa;
    os_log_t v58 = v112;
    (*((void (**)(char *, void, os_log_t))isa + 13))(v110, enum case for URL.DirectoryHint.inferFromPath(_:), v112);
    sub_10000A87C();
    uint64_t v59 = v118;
    URL.appending<A>(path:directoryHint:)();
    (*((void (**)(char *, os_log_t))v56 + 1))(v57, v58);
    swift_bridgeObjectRelease();
    v107((char *)v109, v59, v28);
    uint64_t v60 = v113;
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    uint64_t v61 = v114;
    unint64_t v62 = v115;
    sub_1000885F4(v60, 0, 0, 0, v127, v119);
    if (v61)
    {
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v60, v117);
      unint64_t v63 = v106;
      v106(v59, v28);
      v63(v120, v28);
      return (void *)(*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v53, v121);
    }
    else
    {
      uint64_t v97 = v28;
      uint64_t v65 = v116 + 8;
      uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
      v64(v60, v117);
      uint64_t v67 = v62[7];
      uint64_t v66 = v62[8];
      Swift::String v124 = v62 + 4;
      sub_100006788(v62 + 4, v67);
      LODWORD(v123) = (*(uint64_t (**)(uint64_t))(*(void *)(v66 + 8) + 32))(v67);
      uint64_t v68 = sub_10008A914();
      unint64_t v114 = v64;
      uint64_t v116 = v65;
      uint64_t v69 = v68;
      unint64_t v71 = v70;
      type metadata accessor for JSONDecoder();
      sub_10008CD58();
      default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
      static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
      uint64_t v113 = v69;
      unint64_t v127 = v71;
      swift_bridgeObjectRelease();
      uint64_t v72 = (uint64_t)v128;
      uint64_t v73 = v129;
      sub_100006788(v124, v62[7]);
      sub_100060E44(v72, v73, (int)v123, v130);
      uint64_t v74 = v97;
      os_log_type_t v75 = v118;
      uint64_t v76 = v114;
      swift_bridgeObjectRelease();
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      sub_100068C50((uint64_t)v130);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      int v79 = v78;
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v80 = swift_slowAlloc();
        LODWORD(v115) = v79;
        uint64_t v81 = v80;
        Swift::String v123 = (char *)swift_slowAlloc();
        uint64_t v128 = v123;
        *(_DWORD *)uint64_t v81 = 136316162;
        uint64_t v82 = v130[12];
        Class isa = (Class)v130[13];
        os_log_t v112 = v77;
        if (v130[27]) {
          uint64_t v83 = v130[26];
        }
        else {
          uint64_t v83 = 7104878;
        }
        if (v130[27]) {
          unint64_t v84 = v130[27];
        }
        else {
          unint64_t v84 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        uint64_t v131 = sub_100005EB8(v83, v84, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        *(_WORD *)(v81 + 12) = 2048;
        sub_100062020((uint64_t)v130);
        uint64_t v131 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100062020((uint64_t)v130);
        *(_WORD *)(v81 + 22) = 2080;
        uint64_t v108 = v81 + 24;
        os_log_type_t v85 = v101;
        Date.init(timeIntervalSince1970:)();
        Swift::String v110 = (char *)sub_10008CDAC((unint64_t *)&qword_1001D9B08, (void (*)(uint64_t))&type metadata accessor for Date);
        Swift::String v124 = 0;
        uint64_t v86 = v103;
        uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v89 = v88;
        unint64_t v109 = *(void (**)(char *, uint64_t))(v102 + 8);
        v109(v85, v86);
        uint64_t v131 = sub_100005EB8(v87, v89, (uint64_t *)&v128);
        uint64_t v107 = (void (*)(char *, char *, uint64_t))&v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        *(_WORD *)(v81 + 32) = 2048;
        sub_100062020((uint64_t)v130);
        uint64_t v131 = (uint64_t)isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100062020((uint64_t)v130);
        *(_WORD *)(v81 + 42) = 2080;
        Date.init(timeIntervalSince1970:)();
        uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v92 = v91;
        v109(v85, v86);
        uint64_t v131 = sub_100005EB8(v90, v92, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        os_log_t v93 = v112;
        _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v115, "new time token:\n  cput: %s\n  iat: %llu -> %s\n  exp: %llu -> %s", (uint8_t *)v81, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100006628(v113, v127);

        v114(v119, v117);
        unint64_t v94 = *(void (**)(char *, uint64_t))(v126 + 8);
        uint64_t v95 = v97;
        v94(v118, v97);
        v94(v120, v95);
      }
      else
      {
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        sub_100006628(v113, v127);

        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        sub_100062020((uint64_t)v130);
        v76(v119, v117);
        uint64_t v96 = v106;
        v106(v75, v74);
        v96(v120, v74);
      }
      (*(void (**)(char *, uint64_t))(v122 + 8))(v125, v121);
      return memcpy(v105, v130, 0x110uLL);
    }
  }
}

uint64_t sub_10008A914()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0;
  uint64_t v2 = v1 + 16;
  *(void *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 32) = -1;
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  uint64_t v4 = *(void **)(v0 + 72);
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v3;
  aBlock[4] = sub_10008BE08;
  void aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008AF90;
  aBlock[3] = &unk_1001C8B80;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v8 = v3;
  swift_release();
  id v9 = [v4 dataTaskWithRequest:isa completionHandler:v7];
  _Block_release(v7);

  [v9 resume];
  OS_dispatch_semaphore.wait(timeout:)();
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) == 0
    || (swift_beginAccess(), int v10 = *(unsigned __int8 *)(v1 + 32), v10 == 255))
  {
    [v9 cancel];
    sub_10002A75C(5003, 0, 0, 0);
    swift_willThrow();
    swift_release();
  }
  else
  {
    uint64_t v2 = *(void *)(v1 + 16);
    unint64_t v11 = *(void *)(v1 + 24);
    if (v10)
    {
      uint64_t aBlock[7] = *(void *)(v1 + 16);
      sub_10008CCD4(v2, v11, 1);
      sub_10008CCD4(v2, v11, 1);
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      swift_willThrowTypedImpl();

      sub_10008CCE0(v2, v11, v10);
      swift_release();
    }
    else
    {
      sub_10008CCD4(*(void *)(v1 + 16), *(void *)(v1 + 24), 0);
      swift_release();
    }
  }
  return v2;
}

Swift::Int sub_10008ABA0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v36[0] = a6;
  uint64_t v11 = type metadata accessor for URLError.Code();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 != 15)
  {
    if (a3)
    {
      self;
      uint64_t v16 = swift_dynamicCastObjCClass();
      if (v16)
      {
        uint64_t v17 = (void *)v16;
        sub_100038D8C(a1, a2);
        id v18 = a3;
        id v19 = [v17 statusCode:v36[0]];
        if (SPRHTTPStatusIsSuccess())
        {
          if (qword_1001D90E0 != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          sub_100003E78(v20, (uint64_t)qword_1001DCB58);
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Received payload", v23, 2u);
            swift_slowDealloc();
          }

          swift_beginAccess();
          uint64_t v24 = *(void *)(a5 + 16);
          unint64_t v25 = *(void *)(a5 + 24);
          *(void *)(a5 + 16) = a1;
          *(void *)(a5 + 24) = a2;
          unsigned __int8 v26 = *(unsigned char *)(a5 + 32);
          *(unsigned char *)(a5 + 32) = 0;
          goto LABEL_21;
        }
        if (qword_1001D90E0 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_100003E78(v31, (uint64_t)qword_1001DCB58);
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 134217984;
          v36[1] = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Received HTTP error %ld", v34, 0xCu);
          swift_slowDealloc();
        }

        uint64_t v30 = related decl 'e' for SPRHTTPErrorCode.init(_:serverCode:payload:)();
LABEL_20:
        swift_beginAccess();
        uint64_t v24 = *(void *)(a5 + 16);
        unint64_t v25 = *(void *)(a5 + 24);
        *(void *)(a5 + 16) = v30;
        *(void *)(a5 + 24) = 0;
        unsigned __int8 v26 = *(unsigned char *)(a5 + 32);
        *(unsigned char *)(a5 + 32) = 1;
LABEL_21:
        sub_10008CCE0(v24, v25, v26);
        return OS_dispatch_semaphore.signal()();
      }
    }
  }
  if (a4)
  {
    swift_errorRetain();
    static URLError.timedOut.getter();
    sub_10008CDAC(&qword_1001DCC68, (void (*)(uint64_t))&type metadata accessor for URLError.Code);
    char v27 = static _ErrorCodeProtocol.~= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (v27)
    {
      uint64_t v28 = 5003;
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v28 = 5005;
      uint64_t v29 = a4;
    }
    uint64_t v30 = sub_10002A75C(v28, 0, 0, v29);
    swift_errorRelease();
    goto LABEL_20;
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10008AF90(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = *(void (**)(void *, unint64_t, void *, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v8 = v6;
    uint64_t v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    swift_retain();
    unint64_t v10 = 0xF000000000000000;
  }
  id v11 = a3;
  id v12 = a4;
  v7(v6, v10, a3, a4);

  sub_10000BF70((uint64_t)v6, v10);

  return swift_release();
}

uint64_t sub_10008B058(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, void *), uint64_t a5)
{
  unint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v8 = type metadata accessor for URLError.Code();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  uint64_t v53 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  id v19 = (char *)&v48 - v18;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006B948(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    uint64_t result = sub_10008CCF8((uint64_t)v19);
    if (!a3) {
      return result;
    }
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v19, v20);
  if (!a2 || (self, (uint64_t v26 = swift_dynamicCastObjCClass()) == 0))
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    if (!a3) {
      return result;
    }
LABEL_13:
    swift_errorRetain();
    static URLError.timedOut.getter();
    sub_10008CDAC(&qword_1001DCC68, (void (*)(uint64_t))&type metadata accessor for URLError.Code);
    char v35 = static _ErrorCodeProtocol.~= infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v36 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v53, 1, 1, v20);
    if (v35)
    {
      uint64_t v37 = (void *)sub_10002A75C(5003, 0, 0, 0);
    }
    else
    {
      swift_errorRetain();
      uint64_t v37 = (void *)sub_10002A75C(5005, 0, 0, a3);
      swift_errorRelease();
    }
    v51(v36, v37);

    swift_errorRelease();
    return sub_10008CCF8(v36);
  }
  char v27 = (void *)v26;
  id v28 = a2;
  id v29 = [v27 statusCode];
  if (SPRHTTPStatusIsSuccess())
  {
    uint64_t v30 = (uint64_t)v53;
    if (qword_1001D90E0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100003E78(v31, (uint64_t)qword_1001DCB58);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Received payload", v34, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v30, v24, v20);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v30, 0, 1, v20);
    v51(v30, 0);

    sub_10008CCF8(v30);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
  else
  {
    id v50 = v28;
    if (qword_1001D90E0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100003E78(v38, (uint64_t)qword_1001DCB58);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 134217984;
      id v54 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Received HTTP error %ld", v41, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v49 = v24;
    uint64_t v42 = Data.init(contentsOf:options:)();
    unint64_t v44 = v43;
    unint64_t v45 = v51;
    uint64_t v46 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v53, 1, 1, v20);
    sub_100038D8C(v42, v44);
    int v47 = (void *)related decl 'e' for SPRHTTPErrorCode.init(_:serverCode:payload:)();
    v45(v46, v47);

    sub_10000BF70(v42, v44);
    sub_10008CCF8(v46);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v49, v20);
  }
}

Swift::Int sub_10008B800()
{
  return Hasher._finalize()();
}

void sub_10008B844()
{
}

Swift::Int sub_10008B86C()
{
  return Hasher._finalize()();
}

uint64_t sub_10008B8AC()
{
  return 0x656B6F54656D6974;
}

uint64_t sub_10008B8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x656B6F54656D6974 && a2 == 0xE90000000000006ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_10008B96C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10008B978(uint64_t a1)
{
  unint64_t v2 = sub_10008D06C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B9B4(uint64_t a1)
{
  unint64_t v2 = sub_10008D06C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B9F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100003EB0(&qword_1001DCC80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_10008D06C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100006520((uint64_t)a1);
  }
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = sub_100006520((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  return result;
}

uint64_t sub_10008BB68(void *a1)
{
  uint64_t v2 = sub_100003EB0(&qword_1001DCC90);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_10008D06C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

double sub_10008BCA0()
{
  id v1 = [*(id *)(*(void *)v0 + 72) configuration];
  [v1 timeoutIntervalForResource];
  double v3 = v2;

  return v3;
}

uint64_t sub_10008BCFC@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_100086C98(a1, a2 & 1, a3, a4);
}

uint64_t sub_10008BD24(uint64_t a1, char a2, unint64_t a3)
{
  return sub_100087494(a1, a2 & 1, a3);
}

id sub_10008BD4C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_10008792C(a1, a2 & 1, a3, a4);
}

uint64_t sub_10008BD74()
{
  int v1 = *(unsigned __int8 *)(v0 + 32);
  if (v1 != 255) {
    sub_10008BDBC(*(void *)(v0 + 16), *(void *)(v0 + 24), v1 & 1);
  }

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10008BDBC(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return sub_100006628(a1, a2);
  }
}

uint64_t sub_10008BDC8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_10008BE08(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  return sub_10008ABA0(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_10008BE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008BE20()
{
  return swift_release();
}

uint64_t sub_10008BE28(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    uint64_t v7 = sub_10008BF80((uint64_t)&v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, v3);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v7;
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    uint64_t v3 = sub_10008BF80((uint64_t)v8, v5, v3);
    swift_slowDealloc();
  }
  return v3;
}

uint64_t sub_10008BF80(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = (unint64_t *)result;
  uint64_t v33 = 0;
  int64_t v3 = 0;
  uint64_t v6 = *(void *)(a3 + 64);
  uint64_t v4 = a3 + 64;
  uint64_t v5 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v4 - 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & v5;
  int64_t v34 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v35 = v4;
  while (v9)
  {
    unint64_t v10 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v11 = v10 | (v3 << 6);
LABEL_20:
    unint64_t v37 = v11;
    uint64_t v15 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = qword_1001D8FE8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1001E0D20;
    if (*(void *)(qword_1001E0D20 + 16)
      && (Hasher.init(_seed:)(),
          String.hash(into:)(),
          Swift::Int v20 = Hasher._finalize()(),
          uint64_t v21 = -1 << *(unsigned char *)(v19 + 32),
          unint64_t v22 = v20 & ~v21,
          uint64_t v23 = v19 + 56,
          ((*(void *)(v19 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) != 0))
    {
      uint64_t v24 = *(void *)(v19 + 48);
      unint64_t v25 = (void *)(v24 + 16 * v22);
      BOOL v26 = *v25 == v16 && v25[1] == v17;
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v27 = ~v21;
        do
        {
          unint64_t v22 = (v22 + 1) & v27;
          if (((*(void *)(v23 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22) & 1) == 0) {
            goto LABEL_37;
          }
          id v28 = (void *)(v24 + 16 * v22);
          BOOL v29 = *v28 == v16 && v28[1] == v17;
        }
        while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v32 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
      if (__OFADD__(v33++, 1)) {
        goto LABEL_43;
      }
    }
  }
  int64_t v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v12 >= v34) {
    return sub_10008C250(v32, a2, v33, a3);
  }
  unint64_t v13 = *(void *)(v35 + 8 * v12);
  ++v3;
  if (v13) {
    goto LABEL_19;
  }
  int64_t v3 = v12 + 1;
  if (v12 + 1 >= v34) {
    return sub_10008C250(v32, a2, v33, a3);
  }
  unint64_t v13 = *(void *)(v35 + 8 * v3);
  if (v13)
  {
LABEL_19:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_20;
  }
  int64_t v14 = v12 + 2;
  if (v14 >= v34) {
    return sub_10008C250(v32, a2, v33, a3);
  }
  unint64_t v13 = *(void *)(v35 + 8 * v14);
  if (v13)
  {
    int64_t v3 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v3 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v3 >= v34) {
      return sub_10008C250(v32, a2, v33, a3);
    }
    unint64_t v13 = *(void *)(v35 + 8 * v3);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_10008C250(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_100003EB0((uint64_t *)&unk_1001D8E40);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  uint64_t v39 = v4;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v38) {
        return v9;
      }
      unint64_t v16 = v37[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v38) {
          return v9;
        }
        unint64_t v16 = v37[v11];
        if (!v16)
        {
          uint64_t v17 = v15 + 2;
          if (v17 >= v38) {
            return v9;
          }
          unint64_t v16 = v37[v17];
          if (!v16)
          {
            while (1)
            {
              uint64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v11 >= v38) {
                return v9;
              }
              unint64_t v16 = v37[v11];
              ++v17;
              if (v16) {
                goto LABEL_22;
              }
            }
          }
          uint64_t v11 = v17;
        }
      }
LABEL_22:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 16 * v14;
    uint64_t v19 = (uint64_t *)(*(void *)(v4 + 48) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    unint64_t v22 = (uint64_t *)(*(void *)(v4 + 56) + v18);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v27);
      }
      while (v32 == -1);
      unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(void *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t v33 = 16 * v28;
    int64_t v34 = (void *)(*(void *)(v9 + 48) + v33);
    *int64_t v34 = v21;
    v34[1] = v20;
    uint64_t v35 = (void *)(*(void *)(v9 + 56) + v33);
    *uint64_t v35 = v23;
    v35[1] = v24;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v39;
    if (!v5) {
      return v9;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10008C4F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v82 = a4;
  v87._uint64_t countAndFlagsBits = a2;
  uint64_t v8 = type metadata accessor for String.Encoding();
  uint64_t v85 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  unint64_t v84 = (char *)v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v83 = (char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)v80 - v16;
  uint64_t v18 = type metadata accessor for URLRequest();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  unint64_t v22 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D90E0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100003E78(v23, (uint64_t)qword_1001DCB58);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a1, v18);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  int v25 = static os_log_type_t.info.getter();
  BOOL v26 = os_log_type_enabled(v24, (os_log_type_t)v25);
  v87._unint64_t object = a3;
  unint64_t v88 = a5;
  uint64_t v86 = v8;
  if (v26)
  {
    int v81 = v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v91[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315650;
    uint64_t v29 = URLRequest.allHTTPHeaderFields.getter();
    v80[0] = v28;
    v80[1] = a1;
    if (!v29) {
      uint64_t v29 = sub_100004C48((uint64_t)_swiftEmptyArrayStorage);
    }
    sub_10008BE28(v29, v30);
    swift_bridgeObjectRelease();
    uint64_t v31 = Dictionary.description.getter();
    unint64_t v33 = v32;
    swift_release();
    uint64_t v89 = sub_100005EB8(v31, v33, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    *(_WORD *)(v27 + 12) = 2080;
    unint64_t object = v87._object;
    swift_bridgeObjectRetain();
    uint64_t v89 = sub_100005EB8(v87._countAndFlagsBits, (unint64_t)object, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 22) = 2080;
    if (v88)
    {
      Swift::String v36 = String.redactedToken()();
      uint64_t countAndFlagsBits = v36._countAndFlagsBits;
      unint64_t v37 = v36._object;
    }
    else
    {
      unint64_t v37 = (void *)0xE300000000000000;
      uint64_t countAndFlagsBits = 4271950;
    }
    uint64_t v89 = sub_100005EB8(countAndFlagsBits, (unint64_t)v37, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v81, "SecureChannel.signingPayload(request: %s, cpuTime: %s, timeToken: %s)", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v38 = (void *)0xE000000000000000;
  v91[0] = 0;
  v91[1] = 0xE000000000000000;
  URLRequest.httpMethod.getter();
  if (v39)
  {
    Swift::String v40 = String.lowercased()();
    uint64_t v41 = v40._countAndFlagsBits;
    uint64_t v38 = v40._object;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = 0;
  }
  v42._uint64_t countAndFlagsBits = v41;
  v42._unint64_t object = v38;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  URLRequest.url.getter();
  uint64_t v43 = type metadata accessor for URL();
  uint64_t v44 = *(void *)(v43 - 8);
  unint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  if (v45(v17, 1, v43) == 1)
  {
    sub_10008CCF8((uint64_t)v17);
    uint64_t v46 = 0;
    int v47 = (void *)0xE000000000000000;
  }
  else
  {
    URL.path.getter();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v43);
    Swift::String v48 = String.lowercased()();
    uint64_t v46 = v48._countAndFlagsBits;
    int v47 = v48._object;
    swift_bridgeObjectRelease();
  }
  uint64_t v49 = (uint64_t)v83;
  v50._uint64_t countAndFlagsBits = v46;
  v50._unint64_t object = v47;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  URLRequest.url.getter();
  if (v45((char *)v49, 1, v43) == 1)
  {
    sub_10008CCF8(v49);
    uint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
  }
  else
  {
    uint64_t v53 = URL.query.getter();
    unint64_t v55 = v54;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v49, v43);
    if (v55) {
      uint64_t v51 = v53;
    }
    else {
      uint64_t v51 = 0;
    }
    if (v55) {
      unint64_t v52 = v55;
    }
    else {
      unint64_t v52 = 0xE000000000000000;
    }
  }
  uint64_t v57 = v84;
  uint64_t v56 = v85;
  unint64_t v58 = v52;
  String.append(_:)(*(Swift::String *)&v51);
  swift_bridgeObjectRelease();
  uint64_t v59 = URLRequest.allHTTPHeaderFields.getter();
  if (v59)
  {
    uint64_t v60 = v59;
    if (*(void *)(v59 + 16))
    {
      unint64_t v61 = sub_10000C4B0(0xD000000000000015, 0x80000001001911D0);
      if (v62)
      {
        unint64_t v63 = (uint64_t *)(*(void *)(v60 + 56) + 16 * v61);
        uint64_t v64 = *v63;
        uint64_t v65 = (void *)v63[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v66._uint64_t countAndFlagsBits = 0xD000000000000015;
        v66._unint64_t object = (void *)0x80000001001911D0;
        String.append(_:)(v66);
        v67._uint64_t countAndFlagsBits = v64;
        v67._unint64_t object = v65;
        String.append(_:)(v67);
      }
    }
    swift_bridgeObjectRelease();
  }
  v68._uint64_t countAndFlagsBits = 0xD000000000000017;
  v68._unint64_t object = (void *)0x8000000100198050;
  String.append(_:)(v68);
  String.append(_:)(v87);
  uint64_t v69 = v88;
  if (v88)
  {
    v70._uint64_t countAndFlagsBits = 0xD000000000000012;
    v70._unint64_t object = (void *)0x80000001001911F0;
    String.append(_:)(v70);
    v71._uint64_t countAndFlagsBits = v82;
    v71._unint64_t object = v69;
    String.append(_:)(v71);
  }
  swift_bridgeObjectRetain();
  static String.Encoding.utf8.getter();
  uint64_t v72 = String.data(using:allowLossyConversion:)();
  unint64_t v74 = v73;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v86);
  if (v74 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v89 = v72;
    unint64_t v90 = v74;
    uint64_t v76 = URLRequest.httpBody.getter();
    if (v77 >> 60 != 15)
    {
      uint64_t v78 = v76;
      unint64_t v79 = v77;
      Data.append(_:)();
      sub_10000BF70(v78, v79);
      return v89;
    }
    return v72;
  }
  return result;
}

uint64_t sub_10008CCD4(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRetain();
  }
  else {
    return sub_1000065D0(a1, a2);
  }
}

uint64_t sub_10008CCE0(uint64_t result, unint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10008BDBC(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_10008CCF8(uint64_t a1)
{
  uint64_t v2 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10008CD58()
{
  unint64_t result = qword_1001DCC70;
  if (!qword_1001DCC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCC70);
  }
  return result;
}

uint64_t sub_10008CDAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10008CDF4(uint64_t *a1)
{
  int v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10008CE58()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008CE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000883C0(a1, a2, a3, *(void (**)(char *, uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_10008CEA4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008CEE4(uint64_t a1, uint64_t a2)
{
  return sub_10008814C(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_10008CEF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008CF28(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_10008B058(a1, a2, a3, *(void (**)(uint64_t, void *))(v3 + 16), *(void *)(v3 + 24));
}

void *initializeBufferWithCopyOfBuffer for SecureChannel.TimeTokenResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SecureChannel.TimeTokenResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SecureChannel.TimeTokenResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureChannel.TimeTokenResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureChannel.TimeTokenResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureChannel.TimeTokenResponse()
{
  return &type metadata for SecureChannel.TimeTokenResponse;
}

unint64_t sub_10008D06C()
{
  unint64_t result = qword_1001DCC88;
  if (!qword_1001DCC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCC88);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureChannel.TimeTokenResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10008D15CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureChannel.TimeTokenResponse.CodingKeys()
{
  return &type metadata for SecureChannel.TimeTokenResponse.CodingKeys;
}

unint64_t sub_10008D198()
{
  unint64_t result = qword_1001DCC98;
  if (!qword_1001DCC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCC98);
  }
  return result;
}

unint64_t sub_10008D1F0()
{
  unint64_t result = qword_1001DCCA0;
  if (!qword_1001DCCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCCA0);
  }
  return result;
}

unint64_t sub_10008D248()
{
  unint64_t result = qword_1001DCCA8;
  if (!qword_1001DCCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCCA8);
  }
  return result;
}

uint64_t sub_10008D2B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DCCB0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DCCB0);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10008D378(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0E08);
}

uint64_t sub_10008D39C(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0E20);
}

uint64_t sub_10008D3C0(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0E38);
}

uint64_t sub_10008D3E4(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0E50);
}

uint64_t sub_10008D408(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0E68);
}

uint64_t sub_10008D42C(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0E80);
}

uint64_t sub_10008D450(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0E98);
}

uint64_t sub_10008D474(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0EB0);
}

uint64_t sub_10008D498(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0EC8);
}

uint64_t sub_10008D4BC(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0EE0);
}

uint64_t sub_10008D4DC(uint64_t a1)
{
  return sub_10008D500(a1, qword_1001E0EF8);
}

uint64_t sub_10008D500(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  sub_100003E14(v7, a2);
  uint64_t v8 = sub_100003E78(v7, (uint64_t)a2);
  URL.init(string:)();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v8, v6, v7);
  }
  __break(1u);
  return result;
}

uint64_t sub_10008D62C()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  sub_100003E14(v9, qword_1001E0F10);
  sub_100003E78(v9, (uint64_t)qword_1001E0F10);
  id v10 = [self defaultManager];
  id v11 = [v10 URLsForDirectory:14 inDomains:1];

  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = v13;
  if (*(void *)(v12 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v8, v12 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v8, 0, 1, v9);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v9);
  }
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v9);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    v16[0] = 0xD000000000000017;
    v16[1] = 0x8000000100196850;
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v0);
    sub_10000A87C();
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v8, v9);
  }
  return result;
}

uint64_t sub_10008D918()
{
  uint64_t v0 = type metadata accessor for URL();
  sub_100003E14(v0, qword_1001E0F28);
  sub_100003E78(v0, (uint64_t)qword_1001E0F28);
  return sub_10008D964();
}

uint64_t sub_10008D964()
{
  uint64_t v0 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = 1;
  if (container_system_path_for_identifier())
  {
    if (qword_1001D90E8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100003E78(v4, (uint64_t)qword_1001DCCB0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v8 = String.init(cString:)();
      uint64_t v15 = sub_100005EB8(v8, v9, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "System container path: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
    URL.init(fileURLWithFileSystemRepresentation:isDirectory:relativeTo:)();
    sub_10008CCF8((uint64_t)v3);
    return swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t v17 = 0xD000000000000020;
    unint64_t v18 = 0x8000000100198250;
    uint64_t v15 = v16;
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 41;
    v13._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10008DC9C@<X0>(char *a1@<X8>)
{
  uint64_t v3 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = (char *)&v32[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v32[-1] - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v32[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v32[-1] - v18;
  uint64_t v20 = v1 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory;
  swift_beginAccess();
  sub_10006B948(v20, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10008CCF8((uint64_t)v10);
    id v21 = [self defaultManager];
    URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC9SPREngine11Environment_storageURL);
    uint64_t v23 = v22;
    v32[0] = 0;
    id v24 = [v21 URLForDirectory:99 inDomain:1 appropriateForURL:v22 create:1 error:v32];

    id v25 = v32[0];
    if (v24)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      id v26 = v25;

      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v7, v16, v11);
      uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
      v27(v7, 0, 1, v11);
      swift_beginAccess();
      sub_1000909EC((uint64_t)v7, v20);
      swift_endAccess();
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(a1, v16, v11);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v27)(a1, 0, 1, v11);
    }
    else
    {
      id v30 = v32[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
    }
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v29(v19, v10, v11);
    v29(a1, v19, v11);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
}

uint64_t sub_10008E034(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for BackendSetting();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100093150(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BackendSetting);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 11, v11))
  {
    case 1u:
      if (!objc_msgSend(*(id *)(*sub_100006788(a4, a4[3]) + 16), "isProductionSigned")) {
        goto LABEL_7;
      }
      if (qword_1001D9438 != -1) {
        swift_once();
      }
      if (*(unsigned char *)(static PrimaryAccountWatcher.shared
                    + OBJC_IVAR____TtC9SPREngine21PrimaryAccountWatcher_isSandboxAccount) == 1)
      {
LABEL_7:
        if (qword_1001D90E8 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_100003E78(v13, (uint64_t)qword_1001DCCB0);
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "BackendSetting of .default will be: CERT BackendURL", v16, 2u);
          swift_slowDealloc();
        }

        if (qword_1001D9100 != -1) {
          swift_once();
        }
        uint64_t v17 = sub_100003E78(v11, (uint64_t)qword_1001E0E38);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v17, v11);
        sub_1000930A8((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BackendSetting);
        return 0;
      }
      if (qword_1001D90E8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100003E78(v23, (uint64_t)qword_1001DCCB0);
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        id v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "BackendSetting of .default will be: PROD BackendURL", v26, 2u);
        swift_slowDealloc();
      }

      if (qword_1001D90F0 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_100003E78(v11, (uint64_t)qword_1001E0E08);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v27, v11);
      sub_1000930A8((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BackendSetting);
      return 1;
    case 2u:
      if (qword_1001D90F0 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_1001E0E08;
      goto LABEL_20;
    case 3u:
      if (qword_1001D90F8 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_1001E0E20;
LABEL_20:
      uint64_t v19 = sub_100003E78(v11, (uint64_t)v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v19, v11);
      return 1;
    case 4u:
      if (qword_1001D9100 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0E38;
      goto LABEL_46;
    case 5u:
      if (qword_1001D9108 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0E50;
      goto LABEL_46;
    case 6u:
      if (qword_1001D9110 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0E68;
      goto LABEL_46;
    case 7u:
      if (qword_1001D9118 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0E80;
      goto LABEL_46;
    case 8u:
      if (qword_1001D9120 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0E98;
      goto LABEL_46;
    case 9u:
      if (qword_1001D9128 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0EB0;
      goto LABEL_46;
    case 0xAu:
      if (qword_1001D9130 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0EC8;
      goto LABEL_46;
    case 0xBu:
      if (qword_1001D9138 != -1) {
        swift_once();
      }
      id v21 = qword_1001E0EE0;
LABEL_46:
      uint64_t v22 = sub_100003E78(v11, (uint64_t)v21);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v22, v11);
      break;
    default:
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v10, v11);
      break;
  }
  return 0;
}

uint64_t sub_10008E724@<X0>(void *a1@<X0>, void *a2@<X1>, void (*a3)(void, void)@<X8>)
{
  uint64_t v6 = type metadata accessor for CocoaError.Code();
  uint64_t v126 = *(void *)(v6 - 8);
  uint64_t v127 = v6;
  __chkstk_darwin(v6, v7);
  int v125 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v133 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v122 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v130 = (char *)&v122 - v15;
  uint64_t v17 = __chkstk_darwin(v14, v16);
  Swift::String v123 = (char *)&v122 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  Swift::String v124 = (char *)&v122 - v21;
  __chkstk_darwin(v20, v22);
  uint64_t v134 = (char *)&v122 - v23;
  uint64_t v24 = type metadata accessor for URL.DirectoryHint();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001D9150 != -1) {
    swift_once();
  }
  sub_100003E78(v9, (uint64_t)qword_1001E0F28);
  id v136 = a1;
  unint64_t v137 = a2;
  id v131 = a1;
  uint64_t v29 = enum case for URL.DirectoryHint.isDirectory(_:);
  uint64_t v128 = a2;
  id v30 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 104);
  v30(v28, enum case for URL.DirectoryHint.isDirectory(_:), v24);
  sub_10000A87C();
  URL.appending<A>(component:directoryHint:)();
  unint64_t v129 = a3;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v25 + 8);
  v31(v28, v24);
  if (qword_1001D9148 != -1) {
    swift_once();
  }
  uint64_t v132 = v9;
  sub_100003E78(v9, (uint64_t)qword_1001E0F10);
  id v136 = v131;
  unint64_t v137 = v128;
  v30(v28, v29, v24);
  unint64_t v32 = v134;
  URL.appending<A>(component:directoryHint:)();
  v31(v28, v24);
  unint64_t p_ivar_lyt = &GlobalState.ivar_lyt;
  id v131 = self;
  id v34 = [v131 defaultManager];
  uint64_t v35 = v129;
  URL.path(percentEncoded:)(0);
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v37 = [v34 fileExistsAtPath:v36];

  if (v37)
  {
    uint64_t v38 = v35;
    uint64_t v39 = v133;
    if (qword_1001D90E8 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100003E78(v40, (uint64_t)qword_1001DCCB0);
    uint64_t v41 = *(void (**)(char *, void (*)(void, void), uint64_t))(v39 + 16);
    Swift::String v42 = v123;
    uint64_t v43 = v132;
    v41(v123, v38, v132);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      id v136 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315138;
      sub_100093108((unint64_t *)&qword_1001DCC78, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v135 = sub_100005EB8(v47, v48, (uint64_t *)&v136);
      uint64_t v43 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v129 = *(void (**)(void, void))(v133 + 8);
      v129(v42, v43);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Reusing existing storage folder at: %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t p_ivar_lyt = (void **)(&GlobalState + 16);
      swift_slowDealloc();
    }
    else
    {
      unint64_t v129 = *(void (**)(void, void))(v39 + 8);
      v129(v42, v43);
    }
  }
  else
  {
    id v49 = [v131 defaultManager];
    URL._bridgeToObjectiveC()(v50);
    unint64_t v52 = v51;
    URL._bridgeToObjectiveC()(v53);
    unint64_t v55 = v54;
    id v136 = 0;
    unsigned int v56 = [v49 copyItemAtURL:v52 toURL:v54 error:&v136];

    uint64_t v57 = v133;
    if (v56)
    {
      uint64_t v58 = qword_1001D90E8;
      id v59 = v136;
      uint64_t v43 = v132;
      if (v58 != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      sub_100003E78(v60, (uint64_t)qword_1001DCCB0);
      uint64_t v41 = *(void (**)(char *, void (*)(void, void), uint64_t))(v57 + 16);
      v41(v124, (void (*)(void, void))v134, v43);
      unint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        unint64_t v63 = (uint8_t *)swift_slowAlloc();
        id v136 = (id)swift_slowAlloc();
        *(_DWORD *)unint64_t v63 = 136315138;
        sub_100093108((unint64_t *)&qword_1001DCC78, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v64 = v124;
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v135 = sub_100005EB8(v65, v66, (uint64_t *)&v136);
        uint64_t v43 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v129 = *(void (**)(void, void))(v133 + 8);
        v129(v64, v43);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Imported legacy storage at: %s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t p_ivar_lyt = (void **)(&GlobalState + 16);
        swift_slowDealloc();
      }
      else
      {
        unint64_t v129 = *(void (**)(void, void))(v57 + 8);
        v129(v124, v43);
      }
    }
    else
    {
      id v67 = v136;
      uint64_t v68 = _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v69 = v125;
      static CocoaError.fileReadNoSuchFile.getter();
      sub_100093108(&qword_1001DCDD8, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
      uint64_t v70 = v127;
      char v71 = static _ErrorCodeProtocol.~= infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v126 + 8))(v69, v70);
      uint64_t v43 = v132;
      if ((v71 & 1) == 0)
      {
        if (qword_1001D90E8 != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        sub_100003E78(v72, (uint64_t)qword_1001DCCB0);
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v73, v74))
        {
          os_log_type_t v75 = (uint8_t *)swift_slowAlloc();
          uint64_t v128 = (void *)swift_slowAlloc();
          id v136 = v128;
          *(_DWORD *)os_log_type_t v75 = 136315138;
          uint64_t v135 = v68;
          swift_errorRetain();
          sub_100003EB0((uint64_t *)&unk_1001DD380);
          uint64_t v76 = String.init<A>(describing:)();
          uint64_t v135 = sub_100005EB8(v76, v77, (uint64_t *)&v136);
          unint64_t p_ivar_lyt = (void **)(&GlobalState + 16);
          uint64_t v43 = v132;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed to import legacy storage: %s", v75, 0xCu);
          swift_arrayDestroy();
          uint64_t v57 = v133;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }
      }
      id v78 = [v131 p_ivar_lyt[356]];
      URL._bridgeToObjectiveC()(v79);
      int v81 = v80;
      id v136 = 0;
      unsigned int v82 = [v78 createDirectoryAtURL:v80 withIntermediateDirectories:1 attributes:0 error:&v136];

      if (!v82)
      {
        id v121 = v136;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      uint64_t v83 = v35;
      uint64_t v84 = qword_1001D90E8;
      id v85 = v136;
      if (v84 != -1) {
        swift_once();
      }
      uint64_t v86 = type metadata accessor for Logger();
      sub_100003E78(v86, (uint64_t)qword_1001DCCB0);
      uint64_t v41 = *(void (**)(char *, void (*)(void, void), uint64_t))(v57 + 16);
      Swift::String v87 = v122;
      v41(v122, v83, v43);
      unint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v88, v89))
      {
        unint64_t v90 = (uint8_t *)swift_slowAlloc();
        id v136 = (id)swift_slowAlloc();
        *(_DWORD *)unint64_t v90 = 136315138;
        sub_100093108((unint64_t *)&qword_1001DCC78, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v135 = sub_100005EB8(v91, v92, (uint64_t *)&v136);
        uint64_t v43 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v129 = *(void (**)(void, void))(v133 + 8);
        v129(v87, v43);
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "Created new storage folder at: %s", v90, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t p_ivar_lyt = (void **)(&GlobalState + 16);
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        unint64_t v129 = *(void (**)(void, void))(v57 + 8);
        v129(v87, v43);
      }
    }
    unint64_t v32 = v134;
  }
  os_log_t v93 = v130;
  id v94 = [v131 p_ivar_lyt[356]];
  URL._bridgeToObjectiveC()(v95);
  uint64_t v97 = v96;
  id v136 = 0;
  unsigned int v98 = [v94 removeItemAtURL:v96 error:&v136];

  if (v98)
  {
    uint64_t v99 = qword_1001D90E8;
    id v100 = v136;
    if (v99 != -1) {
      swift_once();
    }
    uint64_t v101 = type metadata accessor for Logger();
    sub_100003E78(v101, (uint64_t)qword_1001DCCB0);
    v41(v93, (void (*)(void, void))v32, v43);
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v102, v103))
    {
      uint64_t v104 = (uint8_t *)swift_slowAlloc();
      id v136 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v104 = 136315138;
      sub_100093108((unint64_t *)&qword_1001DCC78, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v135 = sub_100005EB8(v105, v106, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v107 = (uint64_t (*)(char *, uint64_t))v129;
      v129(v93, v43);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Removed legacy storage at: %s", v104, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v108 = v134;
    }
    else
    {

      uint64_t v107 = (uint64_t (*)(char *, uint64_t))v129;
      v129(v93, v43);
      uint64_t v108 = v32;
    }
    return v107(v108, v43);
  }
  else
  {
    id v109 = v136;
    uint64_t v110 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    Swift::String v111 = v125;
    static CocoaError.fileNoSuchFile.getter();
    sub_100093108(&qword_1001DCDD8, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    uint64_t v112 = v127;
    char v113 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v111, v112);
    if (v113)
    {
      v129(v134, v43);
      return swift_errorRelease();
    }
    else
    {
      if (qword_1001D90E8 != -1) {
        swift_once();
      }
      uint64_t v115 = type metadata accessor for Logger();
      sub_100003E78(v115, (uint64_t)qword_1001DCCB0);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v116, v117))
      {
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        id v136 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = 136315138;
        uint64_t v135 = v110;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v119 = String.init<A>(describing:)();
        uint64_t v135 = sub_100005EB8(v119, v120, (uint64_t *)&v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "Failed to remove legacy storage: %s", v118, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      swift_errorRelease();
      return ((uint64_t (*)(char *, uint64_t))v129)(v134, v43);
    }
  }
}

uint64_t sub_10008F9BC@<X0>(char *a1@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v43 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  os_log_type_t v45 = (char *)&v38 - v12;
  id v46 = self;
  char v13 = 0;
  unsigned int v42 = enum case for URL.DirectoryHint.isDirectory(_:);
  uint64_t v40 = (void (**)(char *, uint64_t))(v1 + 8);
  uint64_t v41 = (void (**)(char *, void, uint64_t))(v1 + 104);
  uint64_t v14 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v39 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  uint64_t v15 = &off_1001E0000;
  long long v38 = xmmword_100186100;
  do
  {
    uint64_t v19 = v15[488];
    uint64_t v20 = (uint64_t (*)())((char *)v19 + 1);
    if (__OFADD__(v19, 1)) {
      __break(1u);
    }
    uint64_t v21 = v15;
    v15[488] = v20;
    sub_100003EB0((uint64_t *)&unk_1001DD3C0);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v38;
    *(void *)(v22 + 56) = &type metadata for Int;
    *(void *)(v22 + 64) = &protocol witness table for Int;
    *(void *)(v22 + 32) = v20;
    uint64_t v23 = (void *)String.init(format:_:)();
    uint64_t v25 = v24;
    if (v13) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    id v26 = [v46 defaultManager];
    id v27 = [v26 temporaryDirectory];

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v47[0] = v23;
    v47[1] = v25;
    uint64_t v28 = v43;
    (*v41)(v4, v42, v43);
    sub_10000A87C();
    URL.appending<A>(component:directoryHint:)();
    (*v40)(v4, v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = *v14;
    (*v14)(v10, v5);
    if (v13) {
      v29(v44, v5);
    }
    (*v39)(v44, v45, v5);
    id v16 = [v46 defaultManager];
    URL.path.getter();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned __int8 v18 = [v16 fileExistsAtPath:v17];

    char v13 = 1;
    uint64_t v15 = v21;
  }
  while ((v18 & 1) != 0);
  id v30 = [v46 defaultManager];
  URL._bridgeToObjectiveC()(v31);
  unint64_t v33 = v32;
  v47[0] = 0;
  unsigned int v34 = [v30 createDirectoryAtURL:v32 withIntermediateDirectories:1 attributes:0 error:v47];

  if (v34)
  {
    id v35 = v47[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v37 = v47[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_10008FE44()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CocoaError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v58 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) == 1)
  {
    id v15 = [self defaultManager];
    uint64_t v57 = (void *)(v0 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL);
    URL._bridgeToObjectiveC()((NSURL *)OBJC_IVAR____TtC9SPREngine11Environment_storageURL);
    NSString v17 = v16;
    v60[0] = 0;
    unsigned int v18 = [v15 removeItemAtURL:v16 error:v60];

    if (v18)
    {
      uint64_t v19 = qword_1001D90E8;
      id v20 = v60[0];
      if (v19 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100003E78(v21, (uint64_t)qword_1001DCCB0);
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        v60[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315138;
        unsigned int v56 = v24 + 4;
        uint64_t v25 = URL.path.getter();
        id v59 = (id)sub_100005EB8(v25, v26, (uint64_t *)v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        id v27 = "Removed temporary storage %s";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v22, v23, v27, v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_19;
      }
LABEL_13:

      swift_release_n();
      goto LABEL_19;
    }
    id v28 = v60[0];
    uint64_t v29 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    static CocoaError.fileNoSuchFile.getter();
    sub_100093108(&qword_1001DCDD8, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    char v30 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if (v30)
    {
      swift_errorRelease();
      if (qword_1001D90E8 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100003E78(v31, (uint64_t)qword_1001DCCB0);
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        v60[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136315138;
        unsigned int v56 = v24 + 4;
        uint64_t v32 = URL.path.getter();
        id v59 = (id)sub_100005EB8(v32, v33, (uint64_t *)v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        id v27 = "Temporary storage %s already removed";
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    if (qword_1001D90E8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100003E78(v34, (uint64_t)qword_1001DCCB0);
    swift_errorRetain();
    swift_errorRetain();
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      id v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = (void *)swift_slowAlloc();
      id v59 = v29;
      v60[0] = v57;
      *(_DWORD *)id v37 = 136315138;
      unsigned int v56 = v37 + 4;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v38 = String.init<A>(describing:)();
      id v59 = (id)sub_100005EB8(v38, v39, (uint64_t *)v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to remove temporary storage %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
LABEL_19:
  uint64_t v40 = v1 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory;
  swift_beginAccess();
  sub_10006B948(v40, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10008CCF8((uint64_t)v10);
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v41(v1 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v11);
  }
  else
  {
    unsigned int v42 = v58;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v58, v10, v11);
    id v43 = [self defaultManager];
    URL._bridgeToObjectiveC()(v44);
    id v46 = v45;
    id v59 = 0;
    unsigned int v47 = [v43 removeItemAtURL:v45 error:&v59];

    if (v47)
    {
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      id v48 = v59;
      v41((uint64_t)v42, v11);
      v41(v1 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v11);
    }
    else
    {
      id v49 = v59;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1001D90E8 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      sub_100003E78(v50, (uint64_t)qword_1001DCCB0);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "cannot delete itemReplacementDirectory", v53, 2u);
        swift_slowDealloc();
      }
      swift_errorRelease();

      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v41((uint64_t)v42, v11);
      v41(v1 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v11);
    }
  }
  v41(v1 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v11);
  v41(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v11);
  sub_10000E260(*(void *)(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting), *(void *)(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting + 8), *(unsigned char *)(v1 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting + 16));
  sub_10008CCF8(v40);
  return v1;
}

uint64_t sub_1000907C4()
{
  sub_10008FE44();

  return swift_deallocClassInstance();
}

uint64_t sub_10009081C()
{
  return type metadata accessor for Environment();
}

uint64_t type metadata accessor for Environment()
{
  uint64_t result = qword_1001DCCF8;
  if (!qword_1001DCCF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100090870()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100090958();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100090958()
{
  if (!qword_1001DCD08)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001DCD08);
    }
  }
}

unsigned char *sub_1000909B0@<X0>(void *a1@<X8>)
{
  uint64_t v4 = swift_retain();
  uint64_t result = sub_100092E1C(v4);
  if (!v2)
  {
    a1[3] = v1;
    a1[4] = &off_1001C8D80;
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000909EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100090A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v210 = a1;
  uint64_t v188 = type metadata accessor for SHA256Digest();
  uint64_t v187 = *(void *)(v188 - 8);
  __chkstk_darwin(v188, v7);
  uint64_t v186 = (char *)&v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v196 = type metadata accessor for URL.DirectoryHint();
  uint64_t v195 = *(void *)(v196 - 8);
  __chkstk_darwin(v196, v9);
  uint64_t v194 = (char *)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = type metadata accessor for String.Encoding();
  uint64_t v197 = *(void *)(v192 - 8);
  __chkstk_darwin(v192, v11);
  unint64_t v191 = (char *)&v184 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for SHA256();
  uint64_t v185 = *(void *)(v189 - 8);
  __chkstk_darwin(v189, v13);
  uint64_t v190 = (char *)&v184 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BackendSetting();
  __chkstk_darwin(v15 - 8, v16);
  unint64_t object = (char *)&v184 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v193 = (char *)&v184 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v198 = (char *)&v184 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  char v208 = (char *)&v184 - v28;
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v184 - v30;
  uint64_t countAndFlagsBits = type metadata accessor for Settings();
  uint64_t v33 = __chkstk_darwin(countAndFlagsBits, v32);
  char v202 = (char *)&v184 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v33, v35);
  uint64_t v38 = (char *)&v184 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v41 = (char *)&v184 - v40;
  v218[3] = type metadata accessor for SystemInfo();
  v218[4] = &off_1001CB4C8;
  v218[0] = a2;
  v217[3] = type metadata accessor for SecureElement();
  v217[4] = &off_1001CC7B8;
  v217[0] = a3;
  uint64_t v211 = a4;
  unsigned int v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v204 = v18;
  uint64_t v201 = v19 + 56;
  v42(a4 + OBJC_IVAR____TtC9SPREngine11Environment__itemReplacementDirectory, 1, 1, v18);
  if (qword_1001D90E8 != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v44 = sub_100003E78(v43, (uint64_t)qword_1001DCCB0);
  uint64_t v45 = v210;
  sub_100093150(v210, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Settings);
  sub_100093150(v45, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Settings);
  uint64_t v207 = v44;
  id v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  BOOL v48 = os_log_type_enabled(v46, v47);
  uint64_t v206 = v19;
  uint64_t v209 = v31;
  uint64_t v200 = v42;
  if (v48)
  {
    uint64_t v49 = swift_slowAlloc();
    *(void *)&long long v214 = swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 136315394;
    uint64_t v50 = sub_100137C58();
    uint64_t v212 = sub_100005EB8(v50, v51, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000930A8((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Settings);
    *(_WORD *)(v49 + 12) = 2080;
    uint64_t v52 = sub_100137C58();
    uint64_t v212 = sub_100005EB8(v52, v53, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = v209;
    sub_1000930A8((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Settings);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Environment.init() configuratorBackend: %s, mpocMonitoringBackend: %s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000930A8((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Settings);
    sub_1000930A8((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for Settings);
  }

  int v55 = sub_10008E034((uint64_t)v31, v210, v54, v217);
  unsigned int v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.info.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  int v199 = v55;
  if (v58)
  {
    id v59 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v214 = swift_slowAlloc();
    *(_DWORD *)id v59 = 136315138;
    if (v55) {
      uint64_t v60 = 0;
    }
    else {
      uint64_t v60 = 544501614;
    }
    if (v55) {
      unint64_t v61 = 0xE000000000000000;
    }
    else {
      unint64_t v61 = 0xE400000000000000;
    }
    uint64_t v212 = sub_100005EB8(v60, v61, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "configurator backend is %sproduction env", v59, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v62 = countAndFlagsBits;
  char v64 = sub_10008E034((uint64_t)v208, v210 + *(int *)(countAndFlagsBits + 20), v63, v217);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v65, v66))
  {
    id v67 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v214 = swift_slowAlloc();
    *(_DWORD *)id v67 = 136315138;
    if (v64) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = 544501614;
    }
    if (v64) {
      unint64_t v69 = 0xE000000000000000;
    }
    else {
      unint64_t v69 = 0xE400000000000000;
    }
    uint64_t v212 = sub_100005EB8(v68, v69, (uint64_t *)&v214);
    uint64_t v70 = v209;
    uint64_t v62 = countAndFlagsBits;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "A&M backend is %sproduction env", v67, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v71 = v204;
    uint64_t v72 = (uint64_t)object;
    unint64_t v73 = v200;
  }
  else
  {

    uint64_t v71 = v204;
    uint64_t v72 = (uint64_t)object;
    unint64_t v73 = v200;
    uint64_t v70 = v209;
  }
  uint64_t v74 = v211;
  os_log_type_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v206 + 16);
  v75(v211 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v70, v71);
  v75(v74 + OBJC_IVAR____TtC9SPREngine11Environment_mpocMonitoringBackendURL, v208, v71);
  *(unsigned char *)(v74 + OBJC_IVAR____TtC9SPREngine11Environment_isProductionEnvironment) = v199 & v64 & 1;
  v73(v72, 4, 11, v71);
  uint64_t v76 = v210;
  char v77 = sub_100138F6C(v210, v72);
  sub_1000930A8(v72, (uint64_t (*)(void))type metadata accessor for BackendSetting);
  uint64_t v78 = v76;
  uint64_t v79 = (uint64_t)v202;
  sub_100093150(v78, (uint64_t)v202, (uint64_t (*)(void))type metadata accessor for Settings);
  if (v77)
  {
    uint64_t v80 = v79 + *(int *)(v62 + 20);
    int v81 = v73;
    uint64_t v82 = v71;
    v81(v72, 4, 11, v71);
    char v83 = sub_100138F6C(v80, v72);
    sub_1000930A8(v72, (uint64_t (*)(void))type metadata accessor for BackendSetting);
  }
  else
  {
    uint64_t v82 = v71;
    char v83 = 0;
  }
  sub_1000930A8(v79, (uint64_t (*)(void))type metadata accessor for Settings);
  *(unsigned char *)(v211 + OBJC_IVAR____TtC9SPREngine11Environment_isCertEnvironment) = v83 & 1;
  uint64_t v84 = v210 + *(int *)(v62 + 24);
  uint64_t v86 = *(void *)v84;
  uint64_t v85 = *(void *)(v84 + 8);
  int v87 = *(unsigned __int8 *)(v84 + 16);
  unint64_t v88 = v209;
  if (!v87)
  {
    id v100 = (char *)self;
    char v202 = v100;
    swift_bridgeObjectRetain_n();
    id v101 = [v100 defaultManager];
    id v102 = [v101 temporaryDirectory];

    os_log_type_t v103 = v193;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v214 = v86;
    *((void *)&v214 + 1) = v85;
    uint64_t v104 = v195;
    uint64_t v105 = v194;
    uint64_t v106 = v196;
    (*(void (**)(char *, void, uint64_t))(v195 + 104))(v194, enum case for URL.DirectoryHint.isDirectory(_:), v196);
    sub_10000A87C();
    uint64_t v107 = v206;
    uint64_t v108 = v198;
    URL.appending<A>(component:directoryHint:)();
    uint64_t v109 = v211;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v106);
    uint64_t v110 = *(void (**)(char *, uint64_t))(v107 + 8);
    v110(v103, v82);
    uint64_t countAndFlagsBits = v86;
    unint64_t object = (char *)v85;
    sub_10000E260(v86, v85, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v107 + 32))(v109 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v108, v82);
    *(unsigned char *)(v109 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 1;
    id v111 = [v202 defaultManager];
    URL._bridgeToObjectiveC()(v112);
    unint64_t v114 = v113;
    *(void *)&long long v214 = 0;
    LOBYTE(v106) = [v111 createDirectoryAtURL:v113 withIntermediateDirectories:1 attributes:0 error:&v214];

    uint64_t v115 = (void *)v214;
    if ((v106 & 1) == 0)
    {
      id v183 = (id)v214;
      sub_10000E260(countAndFlagsBits, (uint64_t)object, 0);
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x100092C08);
    }
    swift_retain_n();
    id v116 = v115;
    os_log_type_t v117 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v119 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v214 = swift_slowAlloc();
      *(_DWORD *)uint64_t v119 = 136315138;
      uint64_t v120 = URL.path.getter();
      uint64_t v212 = sub_100005EB8(v120, v121, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "Using temporary storage at: %s", v119, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100006520((uint64_t)v217);
      sub_100006520((uint64_t)v218);
      sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
      uint64_t v122 = v204;
      v110(v208, v204);
      v110(v209, v122);
    }
    else
    {
      swift_release_n();

      sub_100006520((uint64_t)v217);
      sub_100006520((uint64_t)v218);
      sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
      v110(v208, v82);
      v110(v209, v82);
    }
    char v98 = 0;
    goto LABEL_79;
  }
  uint64_t v89 = v82;
  if (v87 == 1)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v90 = v198;
    sub_10008E724((void *)v86, (void *)v85, (void (*)(void, void))v198);
    uint64_t countAndFlagsBits = v86;
    unint64_t object = (char *)v85;
    sub_10000E260(v86, v85, 1u);
    uint64_t v91 = v211;
    (*(void (**)(uint64_t, char *, uint64_t))(v206 + 32))(v211 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v90, v82);
    *(unsigned char *)(v91 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 0;
    swift_retain_n();
    unint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v92, v93))
    {
      id v94 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v214 = swift_slowAlloc();
      *(_DWORD *)id v94 = 136315138;
      uint64_t v95 = v206;
      uint64_t v96 = URL.path.getter();
      uint64_t v212 = sub_100005EB8(v96, v97, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Using permanent storage at: %s", v94, 0xCu);
      char v98 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100006520((uint64_t)v217);
      sub_100006520((uint64_t)v218);
      sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
      uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
      v99((uint64_t)v208, v82);
      v99((uint64_t)v209, v82);
LABEL_79:
      uint64_t v86 = countAndFlagsBits;
      uint64_t v85 = (uint64_t)object;
      goto LABEL_80;
    }
    swift_release_n();

    sub_100006520((uint64_t)v217);
    sub_100006520((uint64_t)v218);
    sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
    uint64_t v133 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
    v133((uint64_t)v208, v82);
    v133((uint64_t)v88, v82);
LABEL_78:
    char v98 = 1;
    goto LABEL_79;
  }
  if (!(v86 | v85))
  {
    uint64_t v134 = v190;
    SHA256.init()();
    URL.absoluteString.getter();
    uint64_t v135 = v191;
    static String.Encoding.utf8.getter();
    uint64_t v136 = String.data(using:allowLossyConversion:)();
    unint64_t v138 = v137;
    swift_bridgeObjectRelease();
    uint64_t v139 = *(void (**)(char *, uint64_t))(v197 + 8);
    v197 += 8;
    v139(v135, v192);
    if (v138 >> 60 != 15)
    {
      switch(v138 >> 62)
      {
        case 1uLL:
          if (v136 >> 32 < (int)v136)
          {
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
          }
          sub_1000065D0(v136, v138);
          sub_10012B4BC((int)v136, v136 >> 32);
          goto LABEL_54;
        case 2uLL:
          uint64_t v149 = *(void *)(v136 + 16);
          uint64_t v150 = *(void *)(v136 + 24);
          sub_100038D8C(v136, v138);
          swift_retain();
          swift_retain();
          sub_10012B4BC(v149, v150);
          swift_release();
          swift_release();
LABEL_54:
          sub_10000BF70(v136, v138);
          sub_10000BF70(v136, v138);
          break;
        case 3uLL:
          sub_100093108(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
          *(void *)&long long v214 = 0;
          *(void *)((char *)&v214 + 6) = 0;
          goto LABEL_56;
        default:
          *(void *)&long long v214 = v136;
          WORD4(v214) = v138;
          BYTE10(v214) = BYTE2(v138);
          BYTE11(v214) = BYTE3(v138);
          BYTE12(v214) = BYTE4(v138);
          BYTE13(v214) = BYTE5(v138);
          sub_100093108(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_56:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          sub_10000BF70(v136, v138);
          sub_10000BF70(v136, v138);
          break;
      }
    }
    URL.absoluteString.getter();
    uint64_t v151 = v191;
    static String.Encoding.utf8.getter();
    uint64_t v152 = String.data(using:allowLossyConversion:)();
    unint64_t v154 = v153;
    swift_bridgeObjectRelease();
    v139(v151, v192);
    if (v154 >> 60 != 15)
    {
      switch(v154 >> 62)
      {
        case 1uLL:
          if (v152 >> 32 < (int)v152) {
            goto LABEL_82;
          }
          sub_1000065D0(v152, v154);
          uint64_t v134 = v190;
          sub_10012B4BC((int)v152, v152 >> 32);
          break;
        case 2uLL:
          uint64_t v155 = *(void *)(v152 + 16);
          uint64_t v156 = *(void *)(v152 + 24);
          sub_100038D8C(v152, v154);
          swift_retain();
          swift_retain();
          uint64_t v134 = v190;
          sub_10012B4BC(v155, v156);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          sub_100093108(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
          *(void *)&long long v214 = 0;
          *(void *)((char *)&v214 + 6) = 0;
          goto LABEL_64;
        default:
          *(void *)&long long v214 = v152;
          WORD4(v214) = v154;
          BYTE10(v214) = BYTE2(v154);
          BYTE11(v214) = BYTE3(v154);
          BYTE12(v214) = BYTE4(v154);
          BYTE13(v214) = BYTE5(v154);
          sub_100093108(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_64:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          break;
      }
      sub_10000BF70(v152, v154);
      sub_10000BF70(v152, v154);
    }
    URL.absoluteString.getter();
    uint64_t v157 = v191;
    static String.Encoding.utf8.getter();
    uint64_t v158 = String.data(using:allowLossyConversion:)();
    unint64_t v160 = v159;
    swift_bridgeObjectRelease();
    v139(v157, v192);
    if (v160 >> 60 != 15)
    {
      switch(v160 >> 62)
      {
        case 1uLL:
          if (v158 >> 32 < (int)v158) {
            goto LABEL_83;
          }
          sub_1000065D0(v158, v160);
          uint64_t v134 = v190;
          sub_10012B4BC((int)v158, v158 >> 32);
          break;
        case 2uLL:
          uint64_t v161 = *(void *)(v158 + 16);
          uint64_t v162 = *(void *)(v158 + 24);
          sub_100038D8C(v158, v160);
          swift_retain();
          swift_retain();
          uint64_t v134 = v190;
          sub_10012B4BC(v161, v162);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          sub_100093108(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
          *(void *)&long long v214 = 0;
          *(void *)((char *)&v214 + 6) = 0;
          goto LABEL_73;
        default:
          *(void *)&long long v214 = v158;
          WORD4(v214) = v160;
          BYTE10(v214) = BYTE2(v160);
          BYTE11(v214) = BYTE3(v160);
          BYTE12(v214) = BYTE4(v160);
          BYTE13(v214) = BYTE5(v160);
          sub_100093108(&qword_1001DCDE8, (void (*)(uint64_t))&type metadata accessor for SHA256);
LABEL_73:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          break;
      }
      sub_10000BF70(v158, v160);
      sub_10000BF70(v158, v160);
    }
    int v163 = v186;
    SHA256.finalize()();
    uint64_t v164 = v188;
    uint64_t v215 = v188;
    uint64_t v216 = sub_100093108(&qword_1001DCDE0, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    uint64_t v165 = sub_10008CDF4((uint64_t *)&v214);
    uint64_t v166 = v187;
    (*(void (**)(uint64_t *, char *, uint64_t))(v187 + 16))(v165, v163, v164);
    sub_100006788(&v214, v215);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v166 + 8))(v163, v164);
    uint64_t v167 = v212;
    unint64_t v168 = v213;
    sub_100006520((uint64_t)&v214);
    Swift::String v169 = Data.hexString()();
    sub_100006628(v167, v168);
    char v170 = v198;
    uint64_t countAndFlagsBits = v169._countAndFlagsBits;
    unint64_t object = (char *)v169._object;
    sub_10008E724((void *)v169._countAndFlagsBits, v169._object, (void (*)(void, void))v198);
    uint64_t v171 = v211;
    uint64_t v172 = v206;
    (*(void (**)(uint64_t, char *, uint64_t))(v206 + 32))(v211 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v170, v89);
    *(unsigned char *)(v171 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 0;
    swift_retain_n();
    uint64_t v173 = Logger.logObject.getter();
    os_log_type_t v174 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v173, v174))
    {
      uint64_t v175 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v214 = swift_slowAlloc();
      *(_DWORD *)uint64_t v175 = 136315138;
      uint64_t v176 = URL.path.getter();
      uint64_t v212 = sub_100005EB8(v176, v177, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v173, v174, "Using permanent storage at: %s", v175, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100006520((uint64_t)v217);
      sub_100006520((uint64_t)v218);
      sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
      (*(void (**)(char *, uint64_t))(v185 + 8))(v190, v189);
      uint64_t v178 = *(void (**)(uint64_t, uint64_t))(v172 + 8);
      uint64_t v179 = v204;
      v178((uint64_t)v208, v204);
      v178((uint64_t)v209, v179);
    }
    else
    {
      swift_release_n();

      sub_100006520((uint64_t)v217);
      sub_100006520((uint64_t)v218);
      sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
      (*(void (**)(char *, uint64_t))(v185 + 8))(v134, v189);
      char v180 = *(void (**)(uint64_t, uint64_t))(v172 + 8);
      v180((uint64_t)v208, v89);
      v180((uint64_t)v209, v89);
    }
    goto LABEL_78;
  }
  if (!(v86 ^ 1 | v85))
  {
    Swift::String v123 = v198;
    sub_10008F9BC(v198);
    uint64_t v124 = v211;
    (*(void (**)(uint64_t, char *, uint64_t))(v206 + 32))(v211 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, v123, v82);
    *(unsigned char *)(v124 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 1;
    uint64_t countAndFlagsBits = URL.lastPathComponent.getter();
    unint64_t object = v125;
    swift_retain_n();
    uint64_t v126 = Logger.logObject.getter();
    os_log_type_t v127 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v126, v127))
    {
      uint64_t v128 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v214 = swift_slowAlloc();
      *(_DWORD *)uint64_t v128 = 136315138;
      uint64_t v129 = v206;
      uint64_t v130 = URL.path.getter();
      uint64_t v212 = sub_100005EB8(v130, v131, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "Using temporary storage at: %s", v128, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100006520((uint64_t)v217);
      sub_100006520((uint64_t)v218);
      sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
      uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
      v132((uint64_t)v208, v82);
      v132((uint64_t)v209, v82);
    }
    else
    {
      swift_release_n();

      sub_100006520((uint64_t)v217);
      sub_100006520((uint64_t)v218);
      sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
      uint64_t v147 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
      v147((uint64_t)v208, v82);
      v147((uint64_t)v88, v82);
    }
    char v98 = 0;
    goto LABEL_79;
  }
  if (qword_1001D9140 != -1) {
    swift_once();
  }
  uint64_t v140 = sub_100003E78(v82, (uint64_t)qword_1001E0EF8);
  uint64_t v141 = v211;
  v75(v211 + OBJC_IVAR____TtC9SPREngine11Environment_storageURL, (char *)v140, v82);
  *(unsigned char *)(v141 + OBJC_IVAR____TtC9SPREngine11Environment_isStorageTemporary) = 0;
  uint64_t v142 = Logger.logObject.getter();
  os_log_type_t v143 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v142, v143))
  {
    uint64_t v144 = v206;
    uint64_t v145 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v145 = 0;
    _os_log_impl((void *)&_mh_execute_header, v142, v143, "Using volatile storage", v145, 2u);
    swift_slowDealloc();

    sub_100006520((uint64_t)v217);
    sub_100006520((uint64_t)v218);
    sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
    uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
    v146((uint64_t)v208, v82);
    v146((uint64_t)v88, v82);
  }
  else
  {

    sub_100006520((uint64_t)v217);
    sub_100006520((uint64_t)v218);
    sub_1000930A8(v210, (uint64_t (*)(void))type metadata accessor for Settings);
    uint64_t v148 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
    v148((uint64_t)v208, v82);
    v148((uint64_t)v88, v82);
  }
  char v98 = 2;
LABEL_80:
  uint64_t v181 = v211 + OBJC_IVAR____TtC9SPREngine11Environment_storageSetting;
  *(void *)uint64_t v181 = v86;
  *(void *)(v181 + 8) = v85;
  *(unsigned char *)(v181 + 16) = v98;
  return v211;
}

uint64_t sub_100092C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = type metadata accessor for SystemInfo();
  uint64_t v22 = &off_1001CB4C8;
  v20[0] = a2;
  uint64_t v18 = type metadata accessor for SecureElement();
  uint64_t v19 = &off_1001CC7B8;
  v17[0] = a3;
  type metadata accessor for Environment();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_10001F1A0((uint64_t)v20, v21);
  __chkstk_darwin(v7, v7);
  uint64_t v9 = (void *)((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_10001F1A0((uint64_t)v17, v18);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_100090A54(a1, *v9, *v13, v6);
  sub_100006520((uint64_t)v17);
  sub_100006520((uint64_t)v20);
  return v15;
}

unsigned char *sub_100092E1C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Settings();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100093150(a1 + OBJC_IVAR____TtC9SPREngine5Depot_settings, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Settings);
  sub_1000FB4F0((uint64_t)v18);
  if (v1)
  {
    swift_release();
    sub_1000930A8((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Settings);
  }
  else
  {
    sub_1000FA008((uint64_t)v16);
    uint64_t v8 = sub_10001F1A0((uint64_t)v18, v19);
    __chkstk_darwin(v8, v8);
    uint64_t v10 = (uint64_t *)&v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v11 + 16))(v10);
    uint64_t v12 = sub_10001F1A0((uint64_t)v16, v17);
    __chkstk_darwin(v12, v12);
    uint64_t v14 = (uint64_t *)&v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(uint64_t *))(v15 + 16))(v14);
    uint64_t v6 = (unsigned char *)sub_100092C38((uint64_t)v6, *v10, *v14);
    sub_100006520((uint64_t)v16);
    sub_100006520((uint64_t)v18);
    swift_release();
  }
  return v6;
}

uint64_t sub_1000930A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100093108(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100093150(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000931B8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DCDF0);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DCDF0);
  if (qword_1001D9258 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E1028);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100093280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v3._uint64_t countAndFlagsBits = 46;
    v3._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 46;
    v5._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v5);
  }
  else
  {
    if (!a2) {
      return dispatch thunk of CustomStringConvertible.description.getter();
    }
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v6._uint64_t countAndFlagsBits = 46;
    v6._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v6);
  }
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

void sub_1000933CC()
{
  uint64_t v0 = self;
  id v1 = [v0 processInfo];
  [v1 operatingSystemVersion];
  uint64_t v2 = v7;

  id v3 = [v0 processInfo];
  [v3 operatingSystemVersion];
  uint64_t v4 = v8;

  id v5 = [v0 processInfo];
  [v5 operatingSystemVersion];
  uint64_t v6 = v9;

  *(void *)&xmmword_1001E0F80 = v2;
  *((void *)&xmmword_1001E0F80 + 1) = v4;
  qword_1001E0F90 = v6;
}

uint64_t sub_1000934A8(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_100093DF0(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(char **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_10015A470(0, *((void *)v13 + 2) + 1, 1, v13);
  }
  unint64_t v27 = *((void *)v13 + 2);
  unint64_t v26 = *((void *)v13 + 3);
  if (v27 >= v26 >> 1) {
    uint64_t v13 = sub_10015A470((char *)(v26 > 1), v27 + 1, 1, v13);
  }
  *((void *)v13 + 2) = v27 + 1;
  uint64_t v28 = &v13[32 * v27];
  *((void *)v28 + 4) = v45;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (*((void *)v13 + 2) != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_10015A470(0, *((void *)v13 + 2) + 1, 1, v13);
    }
    unint64_t v39 = *((void *)v13 + 2);
    unint64_t v38 = *((void *)v13 + 3);
    if (v39 >= v38 >> 1) {
      uint64_t v13 = sub_10015A470((char *)(v38 > 1), v39 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v39 + 1;
    uint64_t v40 = &v13[32 * v39];
    *((void *)v40 + 4) = v31;
    *((void *)v40 + 5) = v33;
    *((void *)v40 + 6) = v35;
    *((void *)v40 + 7) = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10009394C(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, unint64_t a5, unint64_t a6)
{
  v47[3] = a4;
  if (a1 < 0) {
    goto LABEL_35;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = a5;
  if (!a1 || (unint64_t v45 = a6 >> 14, a6 >> 14 == a5 >> 14))
  {
    sub_100093F4C(a6, v44, a2 & 1, v10);
    swift_bridgeObjectRelease();
    a6 = *(void *)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_5:
    swift_release();
    return a6;
  }
  uint64_t v35 = a1;
  uint64_t v36 = v10;
  uint64_t v43 = (char *)_swiftEmptyArrayStorage;
  unint64_t v12 = a5;
  unint64_t v13 = a5;
  unint64_t v40 = a5;
  while (1)
  {
    v47[0] = Substring.subscript.getter();
    v47[1] = v14;
    char v15 = a3(v47);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a6;
    }
    char v16 = v15;
    swift_bridgeObjectRelease();
    if (v16) {
      break;
    }
    unint64_t v12 = Substring.index(after:)();
LABEL_9:
    if (v45 == v12 >> 14) {
      goto LABEL_24;
    }
  }
  if (v13 >> 14 == v12 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v12 = Substring.index(after:)();
    *(void *)(v44 + 16) = v12;
    unint64_t v13 = v12;
    unint64_t v40 = v12;
    goto LABEL_9;
  }
  if (v12 >> 14 < v13 >> 14) {
    goto LABEL_34;
  }
  uint64_t v17 = Substring.subscript.getter();
  uint64_t v39 = v18;
  uint64_t v41 = v17;
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v43 = sub_10015A470(0, *((void *)v43 + 2) + 1, 1, v43);
  }
  unint64_t v22 = *((void *)v43 + 2);
  unint64_t v21 = *((void *)v43 + 3);
  if (v22 >= v21 >> 1) {
    uint64_t v43 = sub_10015A470((char *)(v21 > 1), v22 + 1, 1, v43);
  }
  *((void *)v43 + 2) = v22 + 1;
  uint64_t v23 = &v43[32 * v22];
  *((void *)v23 + 4) = v41;
  *((void *)v23 + 5) = v39;
  *((void *)v23 + 6) = v38;
  *((void *)v23 + 7) = v37;
  *(void *)(v36 + 16) = v43;
  uint64_t v24 = Substring.index(after:)();
  unint64_t v12 = v24;
  *(void *)(v44 + 16) = v24;
  if (*((void *)v43 + 2) != v35)
  {
    unint64_t v13 = v24;
    unint64_t v40 = v24;
    goto LABEL_9;
  }
  unint64_t v40 = v24;
  unint64_t v13 = v24;
LABEL_24:
  if (v45 == v13 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
LABEL_33:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_5;
  }
  if (v45 >= v40 >> 14)
  {
    uint64_t v25 = Substring.subscript.getter();
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a6 = (unint64_t)sub_10015A470(0, *((void *)v43 + 2) + 1, 1, v43);
    }
    unint64_t v33 = *(void *)(a6 + 16);
    unint64_t v32 = *(void *)(a6 + 24);
    if (v33 >= v32 >> 1) {
      a6 = (unint64_t)sub_10015A470((char *)(v32 > 1), v33 + 1, 1, (char *)a6);
    }
    *(void *)(a6 + 16) = v33 + 1;
    uint64_t v34 = (void *)(a6 + 32 * v33);
    v34[4] = v25;
    v34[5] = v27;
    v34[6] = v29;
    v34[7] = v31;
    *(void *)(v36 + 16) = a6;
    goto LABEL_33;
  }
LABEL_34:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_35:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100093DF0(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(char **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = sub_10015A470(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = sub_10015A470((char *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    uint64_t v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v7;
    *((void *)v18 + 5) = v9;
    *((void *)v18 + 6) = v11;
    *((void *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100093F4C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = Substring.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(char **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = sub_10015A470(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = sub_10015A470((char *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    uint64_t v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v7;
    *((void *)v18 + 5) = v9;
    *((void *)v18 + 6) = v11;
    *((void *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000940B0(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *sub_10009412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1000951B0();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_10009449C();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = sub_100094220(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_100094220(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10009449C()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_10009451C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10009451C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100094674(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100006358(v9, 0),
          unint64_t v12 = sub_100094774((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100094674(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1000940B0(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1000940B0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_100094774(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1000940B0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1000940B0(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100094988(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_1000949E0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_1000940B0(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_1000940B0(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_1000940B0(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t sub_100094E08(uint64_t a1, unint64_t a2)
{
  uint64_t v31 = 46;
  uint64_t v32 = 0xE100000000000000;
  void v29[2] = &v31;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000934A8(2, 0, sub_100095158, (uint64_t)v29, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    unsigned __int8 v6 = (unint64_t *)(v4 + 56);
    unint64_t v7 = (char *)&_swiftEmptyArrayStorage;
    while (1)
    {
      unint64_t v9 = *(v6 - 3);
      unint64_t v8 = *(v6 - 2);
      if ((v8 ^ v9) >= 0x4000)
      {
        unint64_t v11 = *(v6 - 1);
        unint64_t v10 = *v6;
        if ((*v6 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v13 = (uint64_t)sub_10009412C(v9, v8, v11, v10, 10);
          char v18 = v17;
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0) {
            goto LABEL_12;
          }
        }
        else
        {
          if ((v10 & 0x2000000000000000) != 0)
          {
            uint64_t v31 = *(v6 - 1);
            uint64_t v32 = v10 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v12 = &v31;
          }
          else if ((v11 & 0x1000000000000000) != 0)
          {
            uint64_t v12 = (uint64_t *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            uint64_t v12 = (uint64_t *)_StringObject.sharedUTF8.getter();
          }
          uint64_t v13 = sub_1000949E0((uint64_t)v12, v9, v8, v11, v10, 10);
          char v30 = v14 & 1;
          if ((v14 & 1) == 0)
          {
LABEL_12:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v7 = sub_10015A464(0, *((void *)v7 + 2) + 1, 1, v7);
            }
            unint64_t v16 = *((void *)v7 + 2);
            unint64_t v15 = *((void *)v7 + 3);
            if (v16 >= v15 >> 1) {
              unint64_t v7 = sub_10015A464((char *)(v15 > 1), v16 + 1, 1, v7);
            }
            *((void *)v7 + 2) = v16 + 1;
            *(void *)&v7[8 * v16 + 32] = v13;
          }
        }
      }
      v6 += 4;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        unint64_t v19 = *(void *)(v4 + 16);
        goto LABEL_21;
      }
    }
  }
  unint64_t v19 = 0;
  unint64_t v7 = (char *)&_swiftEmptyArrayStorage;
LABEL_21:
  uint64_t v20 = *((void *)v7 + 2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v20 != v19 || v19 == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_1001D9158 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100003E78(v23, (uint64_t)qword_1001DCDF0);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Malformed version", v26, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  unint64_t v28 = *((void *)v7 + 2);
  if (!v28)
  {
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v27 = *((void *)v7 + 4);
  if (v19 < 2)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return v27;
  }
  if (v28 < 2) {
    goto LABEL_39;
  }
  if (v19 < 3 || v28 >= 3) {
    goto LABEL_36;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100095158(void *a1)
{
  unint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unint64_t sub_1000951B0()
{
  unint64_t result = qword_1001DCE08;
  if (!qword_1001DCE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCE08);
  }
  return result;
}

uint64_t sub_100095204()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009523C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_100095250(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  unint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v5 = *v2;
    if (*v2)
    {
      uint64_t v6 = *(v2 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v3 = sub_10015A8E0(0, v3[2] + 1, 1, v3);
      }
      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1) {
        unint64_t v3 = sub_10015A8E0((void *)(v7 > 1), v8 + 1, 1, v3);
      }
      v3[2] = v8 + 1;
      uint64_t v4 = &v3[2 * v8];
      v4[4] = v6;
      v4[5] = v5;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_100095354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, void (*a9)(void, void *), uint64_t a10)
{
  unint64_t v11 = v10;
  int v94 = a7;
  uint64_t v91 = a3;
  uint64_t v98 = a10;
  uint64_t v95 = a1;
  uint64_t v96 = a9;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v92 = *(void *)(v17 - 8);
  uint64_t v93 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v90 = v19;
  unint64_t v97 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v86 = *(void *)(v20 - 8);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v87 = v22;
  uint64_t v88 = (uint64_t)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OSSignpostID();
  uint64_t v85 = *(void **)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v27 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v28);
  char v30 = (char *)&v75 - v29;
  sub_100006788(v10 + 19, v10[22]);
  uint64_t v89 = a4;
  uint64_t v31 = sub_10010F4B0(a4);
  if (v31)
  {
    uint64_t v83 = a6;
    uint64_t v82 = a5;
    uint64_t v81 = a2;
    uint64_t v80 = a8;
    if (a8)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v34 = sub_100044960(2, ObjectType);
      uint64_t v36 = v35;
      swift_retain();
      uint64_t v79 = v34;
      v34(0);
      uint64_t v78 = v36;
      uint64_t v31 = swift_release();
    }
    else
    {
      uint64_t v79 = 0;
      uint64_t v78 = 0;
    }
    uint64_t v84 = v11;
    LOBYTE(v99) = 0;
    __chkstk_darwin(v31, v32);
    uint64_t v51 = (uint64_t)&v50[4];
    uint64_t v52 = v50 + 8;
    os_unfair_lock_lock(v50 + 8);
    sub_1000A7F00(v51);
    os_unfair_lock_unlock(v52);
    if (qword_1001D9170 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for OSSignposter();
    sub_100003E78(v53, (uint64_t)qword_1001DCE28);
    static OSSignpostID.exclusive.getter();
    uint64_t v54 = OSSignposter.logHandle.getter();
    os_signpost_type_t v55 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      unsigned int v56 = v85;
      os_log_type_t v57 = (void (*)(char *, char *, uint64_t))v85[2];
      v57(v27, v30, v23);
      BOOL v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v58 = 0;
      os_signpost_id_t v59 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, v55, v59, "config-install-fetchSLAM", "begin fetch SLAM", v58, 2u);
      swift_slowDealloc();

      uint64_t v60 = v56;
      ((void (*)(char *, uint64_t))v56[1])(v27, v23);
    }
    else
    {

      uint64_t v60 = v85;
      os_log_type_t v57 = (void (*)(char *, char *, uint64_t))v85[2];
    }
    v57(v27, v30, v23);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v61 = OSSignpostIntervalState.init(id:isOpen:)();
    uint64_t v75 = v61;
    ((void (*)(char *, uint64_t))v60[1])(v30, v23);
    uint64_t v62 = v84;
    uint64_t v77 = v84[6];
    uint64_t v76 = v84[7];
    uint64_t v85 = sub_100006788(v84 + 3, v77);
    uint64_t v63 = v88;
    sub_100006724(v89, v88, (uint64_t *)&unk_1001DF8D0);
    uint64_t v64 = v92;
    uint64_t v65 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v97, v91, v93);
    unint64_t v66 = (*(unsigned __int8 *)(v86 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
    unint64_t v67 = (v87 + *(unsigned __int8 *)(v64 + 80) + v66) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    uint64_t v68 = v67 + v90;
    unint64_t v69 = (v67 + v90) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v70 = (char *)swift_allocObject();
    *((void *)v70 + 2) = v61;
    *((void *)v70 + 3) = v62;
    uint64_t v71 = v98;
    *((void *)v70 + 4) = v96;
    *((void *)v70 + 5) = v71;
    sub_100029CEC(v63, (uint64_t)&v70[v66], (uint64_t *)&unk_1001DF8D0);
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v70[v67], v97, v65);
    v70[v68] = v94 & 1;
    *(void *)&v70[v69 + 8] = v80;
    uint64_t v72 = v76;
    unint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, void (*)(uint64_t, void (*)(char *, char *, uint64_t)), char *, uint64_t, uint64_t))(v76 + 16);
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v74 = (uint64_t)v79;
    v73(v95, v81, v82, v83, v79, v78, sub_1000A80BC, v70, v77, v72);
    sub_100057838(v74);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100003E78(v37, (uint64_t)qword_1001DCE10);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unsigned __int8 v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not attested before OTA", v40, 2u);
      swift_slowDealloc();
    }

    unsigned __int8 v41 = (void *)sub_10002A974(2029, 0, 0, 0);
    sub_100003EB0(&qword_1001D9B38);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(unsigned char *)(inited + 32) = 8;
    uint64_t v99 = v41;
    type metadata accessor for ConfigurationError(0);
    sub_1000AA958((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
    uint64_t v43 = _BridgedStoredNSError.errorCode.getter();
    *(void *)(inited + 64) = &type metadata for Int;
    *(void *)(inited + 40) = v43;
    unint64_t v44 = sub_100104C38(inited);
    __chkstk_darwin(v44, v45);
    uint64_t v47 = (uint64_t *)&v46[4];
    unint64_t v48 = v46 + 8;
    os_unfair_lock_lock(v46 + 8);
    sub_10001F088(v47);
    os_unfair_lock_unlock(v48);
    swift_bridgeObjectRelease();
    id v49 = v41;
    v96(0, v41);
  }
}

uint64_t sub_100095BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  uint64_t v6 = __chkstk_darwin(v41, v5);
  unsigned __int8 v40 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)v39 - v9;
  dispatch_semaphore_t v44 = dispatch_semaphore_create(0);
  uint64_t v11 = swift_allocObject();
  uint64_t v51 = v11;
  *(unsigned char *)(v11 + 16) = 0;
  v39[1] = v11 + 16;
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = 0;
  v39[0] = v12 + 16;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  uint64_t v43 = v13 + 16;
  if (qword_1001D9170 != -1) {
    swift_once();
  }
  uint64_t v49 = v13;
  uint64_t v50 = v12;
  uint64_t v14 = type metadata accessor for OSSignposter();
  sub_100003E78(v14, (uint64_t)qword_1001DCE28);
  static OSSignpostID.exclusive.getter();
  unint64_t v15 = OSSignposter.logHandle.getter();
  os_signpost_type_t v16 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v19 = v40;
    uint64_t v18 = v41;
    v17(v40, v10, v41);
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
    os_signpost_type_t v22 = v16;
    uint64_t v23 = v19;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, v22, v21, "config-status-checkForRemoteUpdates", "begin check for remote updates", v20, 2u);
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v19, v18);
  }
  else
  {

    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v23 = v40;
    uint64_t v18 = v41;
  }
  v17(v23, v10, v18);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v24 = OSSignpostIntervalState.init(id:isOpen:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v18);
  uint64_t v25 = v42[6];
  uint64_t v26 = v42[7];
  uint64_t v41 = (uint64_t)sub_100006788(v42 + 3, v25);
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v51;
  v27[2] = v24;
  void v27[3] = v28;
  uint64_t v30 = v49;
  uint64_t v29 = v50;
  v27[4] = v50;
  v27[5] = v30;
  dispatch_semaphore_t v31 = v44;
  v27[6] = v44;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, Swift::Int (*)(uint64_t, unsigned char *), void *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v42 = (void *)v24;
  uint64_t v33 = v29;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v34 = v31;
  v32(v45, v46, v47, v48, 0, 0, sub_1000A7D6C, v27, v25, v26);
  swift_release();
  OS_dispatch_semaphore.wait()();
  swift_beginAccess();
  if (*(void *)(v30 + 16))
  {
    swift_errorRetain();
    swift_willThrow();

    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {

    swift_release();
    swift_beginAccess();
    unsigned int v36 = *(unsigned __int8 *)(v28 + 16);
    swift_beginAccess();
    int v37 = *(unsigned __int8 *)(v33 + 16);
    swift_release();
    swift_release();
    swift_release();
    if (v37) {
      int v38 = 256;
    }
    else {
      int v38 = 0;
    }
    return v38 | v36;
  }
}

uint64_t sub_100096068()
{
  if (qword_1001D90D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100003E78(v1, (uint64_t)qword_1001DCA18);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "retrieveMaxNumberProfile()", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (uint64_t *)TLVTag.maxNumReaderConfigurations.unsafeMutableAddressor();
  uint64_t result = sub_1000B389C(*v5);
  if (!v0)
  {
    __int16 v7 = (*(uint64_t (**)(void))(*(void *)result + 216))();
    if ((v7 & 0x100) != 0)
    {
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315138;
        sub_100005EB8(0xD00000000000001ALL, 0x80000001001986B0, &v13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "In %s, could not get UInt8 from TLV", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_100038E08();
      swift_allocError();
      *uint64_t v12 = 1;
      swift_willThrow();
      return swift_release();
    }
    else
    {
      unsigned __int8 v8 = v7;
      swift_release();
      return v8;
    }
  }
  return result;
}

BOOL sub_1000962FC()
{
  if (qword_1001D90D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DCA18);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    v38[0] = sub_100005EB8(0xD000000000000012, 0x8000000100198690, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_bridgeObjectRetain();
  uint64_t v4 = Data.init(hexString:)();
  if (v5 >> 60 == 15)
  {
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unsigned __int8 v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "unexpected error: failed to convert profile hex string", v8, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    unint64_t v10 = v5;
    uint64_t v11 = v4;
    switch(v5 >> 62)
    {
      case 1uLL:
        unsigned __int16 v12 = WORD2(v4) - v4;
        if (!__OFSUB__(HIDWORD(v4), v4)) {
          goto LABEL_15;
        }
        __break(1u);
        goto LABEL_14;
      case 2uLL:
LABEL_14:
        uint64_t v14 = *(void *)(v4 + 16);
        uint64_t v13 = *(void *)(v4 + 24);
        unsigned __int16 v12 = v13 - v14;
        if (__OFSUB__(v13, v14))
        {
          __break(1u);
          JUMPOUT(0x1000969C0);
        }
LABEL_15:
        sub_1000065D0(v4, v5);
        break;
      case 3uLL:
        sub_10000BF70(v4, v5);
        unsigned __int16 v12 = 0;
        break;
      default:
        sub_10000BF70(v4, v5);
        unsigned __int16 v12 = BYTE6(v10);
        break;
    }
    sub_1000065D0(v11, v10);
    sub_1000065D0(v11, v10);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      log = v15;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      unint64_t v18 = ((unint64_t)v12 << 32) | 0x1B180;
      uint64_t v19 = sub_10006C13C(v18, v11, v10, 0);
      unint64_t v21 = v20;
      Swift::String v22 = Data.hexString()();
      sub_100006628(v19, v21);
      v38[0] = sub_100005EB8(v22._countAndFlagsBits, (unint64_t)v22._object, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10000BF70(v11, v10);
      sub_10000BF70(v11, v10);
      _os_log_impl((void *)&_mh_execute_header, log, v16, "C-APDU (delete profile): %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10000BF70(v11, v10);
      sub_10000BF70(v11, v10);

      unint64_t v18 = ((unint64_t)v12 << 32) | 0x1B180;
    }
    sub_1000F61E8(v18, v11, v10, 0, 0, (uint64_t)v38);
    uint64_t v23 = v38[0];
    unint64_t v24 = v38[1];
    uint64_t v25 = v38[3];
    unint64_t v26 = v38[4];
    sub_100029CEC((uint64_t)v38, (uint64_t)v39, (uint64_t *)&unk_1001DA590);
    if ((unint64_t)v39[1] >> 60 == 15)
    {
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "failed to delete", v29, 2u);
        swift_slowDealloc();

        sub_10000BF70(v11, v10);
        sub_10000BF70(v11, v10);
      }
      else
      {
        sub_10000BF70(v11, v10);
        sub_10000BF70(v11, v10);
      }
      return 0;
    }
    else
    {
      int v30 = v40;
      sub_1000065D0(v23, v24);
      sub_1000065D0(v25, v26);
      sub_1000065D0(v23, v24);
      sub_1000065D0(v25, v26);
      dispatch_semaphore_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        int v36 = v30;
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315138;
        Swift::String v34 = Data.hexString()();
        sub_100005EB8(v34._countAndFlagsBits, (unint64_t)v34._object, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100038E5C((uint64_t)v38);
        sub_100038E5C((uint64_t)v38);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "R-APDU: %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        int v30 = v36;
        swift_slowDealloc();
      }
      else
      {
        sub_100038E5C((uint64_t)v38);
        sub_100038E5C((uint64_t)v38);
      }

      sub_10000BF70(v11, v10);
      sub_10000BF70(v11, v10);
      sub_100038E5C((uint64_t)v38);
      return v30 == 36864;
    }
  }
}

BOOL sub_1000969D0()
{
  if (qword_1001D90D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E78(v0, (uint64_t)qword_1001DCA18);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 136315138;
    v25[0] = sub_100005EB8(0x79654B7465736572, 0xEB00000000292873, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v7 = sub_10006C13C(0x1EA0uLL, 0, 0xC000000000000000, 0);
    unint64_t v9 = v8;
    Swift::String v10 = Data.hexString()();
    sub_100006628(v7, v9);
    v25[0] = sub_100005EB8(v10._countAndFlagsBits, (unint64_t)v10._object, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "C-APDU (RESET KEY): %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000F61E8(7840, 0, 0xC000000000000000, 0, 0, (uint64_t)v25);
  uint64_t v11 = v25[0];
  unint64_t v12 = v25[1];
  uint64_t v13 = v25[3];
  unint64_t v14 = v25[4];
  sub_100029CEC((uint64_t)v25, (uint64_t)v26, (uint64_t *)&unk_1001DA590);
  if ((unint64_t)v26[1] >> 60 == 15)
  {
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "failed to send reset key", v17, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    int v19 = v27;
    sub_1000065D0(v11, v12);
    sub_1000065D0(v13, v14);
    sub_1000065D0(v11, v12);
    sub_1000065D0(v13, v14);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      Swift::String v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)Swift::String v22 = 136315138;
      Swift::String v23 = Data.hexString()();
      sub_100005EB8(v23._countAndFlagsBits, (unint64_t)v23._object, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100038E5C((uint64_t)v25);
      sub_100038E5C((uint64_t)v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "R-APDU: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100038E5C((uint64_t)v25);
      sub_100038E5C((uint64_t)v25);
    }

    sub_100038E5C((uint64_t)v25);
    return v19 == 36864;
  }
}

uint64_t sub_100096ECC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100003E14(v0, qword_1001DCE10);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DCE10);
  if (qword_1001D9240 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0FE0);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100096F94()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_100003E14(v0, qword_1001DCE28);
  uint64_t v1 = sub_100003E78(v0, (uint64_t)qword_1001DCE28);
  if (qword_1001D9008 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100003E78(v0, (uint64_t)qword_1001E0D40);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_10009705C(char a1)
{
  if (!a1) {
    return 0xD00000000000001ALL;
  }
  if (a1 == 1) {
    return 0xD000000000000019;
  }
  return 0xD000000000000018;
}

uint64_t sub_1000970B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a5;
  uint64_t v16 = a4;
  uint64_t v7 = sub_100003EB0(&qword_1001DD050);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006788(a1, a1[3]);
  sub_1000ACB10();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    uint64_t v12 = v15;
    uint64_t v18 = v16;
    char v17 = 1;
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    sub_10001EF84(&qword_1001D9B18);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v18 = v12;
    char v17 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

unint64_t sub_1000972A8()
{
  return sub_10009705C(*v0);
}

uint64_t sub_1000972B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A6C5C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000972D8(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000972E4(uint64_t a1)
{
  unint64_t v2 = sub_1000ACB10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100097320(uint64_t a1)
{
  unint64_t v2 = sub_1000ACB10();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009735C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000A6DA0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10009738C(void *a1)
{
  return sub_1000970B4(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1000973AC(uint64_t a1, uint64_t a2)
{
  return sub_1000A6B94(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), *(void **)(a2 + 24));
}

char *sub_1000973C8()
{
  uint64_t v0 = type metadata accessor for OSSignpostError();
  uint64_t v67 = *(void *)(v0 - 8);
  uint64_t v68 = v0;
  uint64_t v2 = __chkstk_darwin(v0, v1);
  uint64_t v64 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v62 - v5;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  unint64_t v69 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v65 = (char *)&v62 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v62 - v17;
  __chkstk_darwin(v16, v19);
  os_log_type_t v21 = (char *)&v62 - v20;
  if (qword_1001D9170 != -1) {
    swift_once();
  }
  uint64_t v63 = v6;
  uint64_t v22 = type metadata accessor for OSSignposter();
  uint64_t v23 = sub_100003E78(v22, (uint64_t)qword_1001DCE28);
  static OSSignpostID.exclusive.getter();
  uint64_t v71 = v23;
  uint64_t v24 = OSSignposter.logHandle.getter();
  os_signpost_type_t v25 = static os_signpost_type_t.begin.getter();
  char v26 = OS_os_log.signpostsEnabled.getter();
  uint64_t v74 = v7;
  if (v26)
  {
    unsigned __int16 v27 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v27(v18, v21, v7);
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    os_signpost_id_t v29 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, v25, v29, "config-prepare-getCertificates", "begin get cert with chain", v28, 2u);
    uint64_t v7 = v74;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v7);
  }
  else
  {

    unsigned __int16 v27 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  }
  unint64_t v66 = v27;
  v27(v18, v21, v7);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  int v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v70 = v8 + 8;
  v30(v21, v7);
  uint64_t v31 = v73;
  uint64_t v32 = sub_100097A5C();
  uint64_t v73 = v31;
  if (v31)
  {
    uint64_t v35 = OSSignposter.logHandle.getter();
    int v36 = v69;
    OSSignpostIntervalState.signpostID.getter();
    int v37 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      LODWORD(v72) = v37;
      swift_retain();
      int v38 = v64;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v40 = v67;
      uint64_t v39 = v68;
      int v41 = (*(uint64_t (**)(char *, uint64_t))(v67 + 88))(v38, v68);
      uint64_t v42 = v74;
      if (v41 == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v43 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
        uint64_t v43 = "end get cert with chain";
      }
      os_log_type_t v21 = v69;
      v66(v18, v69, v42);
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      os_signpost_id_t v55 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, (os_signpost_type_t)v72, v55, "config-prepare-getCertificates", v43, v54, 2u);
      uint64_t v52 = v74;
      swift_slowDealloc();

      v30(v21, v52);
    }
    else
    {

      uint64_t v18 = v36;
      uint64_t v52 = v74;
    }
    v30(v18, v52);
    swift_release();
  }
  else
  {
    os_log_type_t v21 = (char *)v32;
    dispatch_semaphore_t v44 = (char *)_swiftEmptyArrayStorage;
    if (v33) {
      uint64_t v45 = v33;
    }
    else {
      uint64_t v45 = _swiftEmptyArrayStorage;
    }
    uint64_t v72 = v45;
    if (v34) {
      dispatch_semaphore_t v44 = v34;
    }
    unint64_t v69 = v44;
    uint64_t v46 = OSSignposter.logHandle.getter();
    uint64_t v47 = v65;
    OSSignpostIntervalState.signpostID.getter();
    LODWORD(v71) = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      os_log_t v62 = v46;
      uint64_t v64 = v21;
      swift_retain();
      uint64_t v48 = v63;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v50 = v67;
      uint64_t v49 = v68;
      if ((*(unsigned int (**)(char *, uint64_t))(v67 + 88))(v48, v68) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v51 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
        uint64_t v51 = "end get cert with chain";
      }
      unsigned int v56 = v47;
      os_log_type_t v57 = v47;
      uint64_t v53 = v74;
      v66(v18, v56, v74);
      BOOL v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v58 = 0;
      os_signpost_id_t v59 = OSSignpostID.rawValue.getter();
      os_log_t v60 = v62;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v62, (os_signpost_type_t)v71, v59, "config-prepare-getCertificates", v51, v58, 2u);
      swift_slowDealloc();

      v30(v57, v53);
      os_log_type_t v21 = v64;
    }
    else
    {

      uint64_t v18 = v47;
      uint64_t v53 = v74;
    }
    v30(v18, v53);
    swift_release();
  }
  return v21;
}

uint64_t sub_100097A5C()
{
  uint64_t v71 = type metadata accessor for DecodingError();
  uint64_t v69 = *(void *)(v71 - 8);
  uint64_t v2 = __chkstk_darwin(v71, v1);
  uint64_t v68 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v4);
  uint64_t v70 = (char *)&v67 - v5;
  uint64_t v73 = type metadata accessor for URLRequest();
  uint64_t v74 = *(void *)(v73 - 8);
  __chkstk_darwin(v73, v6);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v67 - v16;
  URL.appendingPathComponent(_:)();
  uint64_t v76 = v10;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v72 = v17;
  uint64_t v75 = v9;
  v18(v14, v17, v9);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  uint64_t v19 = (void *)(v0 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel);
  char v20 = 1;
  *(void *)&long long v21 = 138412290;
  long long v77 = v21;
  uint64_t v78 = v8;
  while (1)
  {
    char v22 = v20;
    uint64_t v23 = v19[3];
    uint64_t v24 = v19[4];
    sub_100006788(v19, v23);
    uint64_t v25 = v79;
    uint64_t v26 = sub_1000F1EF0((uint64_t)v78, 0, v23, v24);
    if (!v25)
    {
      uint64_t v28 = v26;
      unint64_t v29 = v27;
      type metadata accessor for JSONDecoder();
      sub_1000065D0(v28, v29);
      sub_1000A7C78();
      default argument 2 of static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
      static JSONDecoder.decodeClean<A>(_:from:userInfo:)();
      swift_bridgeObjectRelease();
      sub_100006628(v28, v29);
      sub_100006628(v28, v29);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v78, v73);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v75);
      return v80;
    }
    uint64_t v79 = 0;
    _s3__C4CodeOMa_12(0);
    uint64_t v80 = 5006;
    swift_errorRetain();
    sub_1000AA958(&qword_1001D9808, _s3__C4CodeOMa_12);
    char v30 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if (v30)
    {
      swift_errorRelease();
      uint64_t v41 = 2034;
LABEL_17:
      sub_10002A974(v41, 0, 0, 0);
      swift_willThrow();
LABEL_18:
      (*(void (**)(char *, uint64_t))(v74 + 8))(v78, v73);
      return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v72, v75);
    }
    _s3__C4CodeOMa_0(0);
    uint64_t v80 = 404;
    swift_errorRetain();
    sub_1000AA958(&qword_1001D9D10, _s3__C4CodeOMa_0);
    char v31 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if (v31)
    {
      swift_errorRelease();
      uint64_t v41 = 2032;
      goto LABEL_17;
    }
    uint64_t v80 = v25;
    swift_errorRetain();
    sub_100003EB0((uint64_t *)&unk_1001DD380);
    type metadata accessor for SPRHTTPError(0);
    if ((swift_dynamicCast() & 1) == 0) {
      break;
    }
    swift_errorRelease();
    uint64_t v32 = (void *)v81;
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100003E78(v33, (uint64_t)qword_1001DCE10);
    Swift::String v34 = v32;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      int v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = v77;
      uint64_t v39 = v34;
      uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v37 + 4) = v40;
      *int v38 = v40;

      _os_log_impl((void *)&_mh_execute_header, v35, v36, "HTTP error when renewing certificates: %@", (uint8_t *)v37, 0xCu);
      sub_100003EB0((uint64_t *)&unk_1001DA540);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v35 = v34;
    }

    swift_errorRelease();
    char v20 = 0;
    if ((v22 & 1) == 0)
    {
      sub_10002A974(2000, 0xD000000000000019, (void *)0x80000001001985A0, 0);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v78, v73);
      return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v72, v75);
    }
  }
  swift_errorRelease();
  uint64_t v80 = v25;
  swift_errorRetain();
  uint64_t v42 = v70;
  uint64_t v43 = v71;
  if (!swift_dynamicCast())
  {
    swift_errorRelease();
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_100003E78(v52, (uint64_t)qword_1001DCE10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      os_signpost_id_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      uint64_t v80 = v79;
      *(_DWORD *)os_signpost_id_t v55 = 136315138;
      *(void *)&long long v77 = v55 + 4;
      uint64_t v81 = v25;
      swift_errorRetain();
      uint64_t v56 = String.init<A>(describing:)();
      uint64_t v81 = sub_100005EB8(v56, v57, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "client error when renewing certificates: %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v80 = 5005;
    swift_errorRetain();
    char v59 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if (v59) {
      goto LABEL_34;
    }
    uint64_t v80 = 5004;
    swift_errorRetain();
    char v60 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    if ((v60 & 1) != 0
      || (uint64_t v80 = 5003,
          swift_errorRetain(),
          char v61 = static _ErrorCodeProtocol.~= infix(_:_:)(),
          swift_errorRelease(),
          (v61 & 1) != 0))
    {
LABEL_34:
      swift_getErrorValue();
      uint64_t v62 = Error.localizedDescription.getter();
      uint64_t v64 = v63;
      uint64_t v65 = 2000;
    }
    else
    {
      swift_getErrorValue();
      uint64_t v62 = Error.localizedDescription.getter();
      uint64_t v64 = v66;
      uint64_t v65 = 2999;
    }
    sub_10002A974(v65, v62, v64, 0);
    swift_willThrow();
    swift_errorRelease();
    goto LABEL_18;
  }
  swift_errorRelease();
  uint64_t v44 = v69;
  uint64_t v45 = v68;
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v42, v43);
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  sub_100003E78(v46, (uint64_t)qword_1001DCE10);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "cannot decode server response", v49, 2u);
    swift_slowDealloc();
  }

  uint64_t v50 = Error.localizedDescription.getter();
  sub_10002A974(2025, v50, v51, 0);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v78, v73);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v75);
  return swift_errorRelease();
}

uint64_t sub_100098660(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v67 = a8;
  uint64_t v68 = a5;
  uint64_t v63 = a1;
  uint64_t v64 = a7;
  uint64_t v69 = a6;
  uint64_t v65 = (char *)*v8;
  uint64_t v74 = type metadata accessor for URLRequest();
  uint64_t v70 = *(void *)(v74 - 8);
  uint64_t v14 = __chkstk_darwin(v74, v13);
  unint64_t v66 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v72 = *(void *)(v19 - 8);
  uint64_t v73 = v19;
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  uint64_t v71 = (char *)&v59 - v25;
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v62 = sub_100003E78(v26, (uint64_t)qword_1001DCE10);
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v60 = a3;
    char v30 = (uint8_t *)v29;
    uint64_t v31 = swift_slowAlloc();
    unint64_t v61 = a4;
    v76[0].value._uint64_t countAndFlagsBits = v31;
    *(_DWORD *)char v30 = 136315138;
    uint64_t v75 = sub_100005EB8(0xD000000000000032, 0x8000000100198510, &v76[0].value._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "ConfiguratorBackend.%s", v30, 0xCu);
    swift_arrayDestroy();
    a4 = v61;
    swift_slowDealloc();
    a3 = v60;
    swift_slowDealloc();
  }

  uint64_t v32 = v71;
  URL.appendingPathComponent(_:)();
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v23, v32, v73);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  v76[0].value._uint64_t countAndFlagsBits = 0x20726572616542;
  v76[0].value._unint64_t object = (void *)0xE700000000000000;
  v33._uint64_t countAndFlagsBits = v63;
  v33._unint64_t object = a2;
  String.append(_:)(v33);
  v34._unint64_t object = (void *)0x80000001001911D0;
  v34._uint64_t countAndFlagsBits = 0xD000000000000015;
  URLRequest.setValue(_:forHTTPHeaderField:)(v76[0], v34);
  swift_bridgeObjectRelease();
  sub_1000065D0(a3, a4);
  URLRequest.httpBody.setter();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    v76[0].value._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    swift_beginAccess();
    uint64_t v38 = sub_100041EC4();
    uint64_t v75 = sub_100005EB8(v38, v39, &v76[0].value._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "kernel manager request: %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = 0;
  uint64_t v41 = *(void *)((char *)v9 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel + 24);
  uint64_t v42 = *(void *)((char *)v9 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel + 32);
  sub_100006788((void *)((char *)v9 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel), v41);
  swift_beginAccess();
  uint64_t v43 = v70;
  uint64_t v44 = v66;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v66, v18, v74);
  uint64_t v45 = (void *)swift_allocObject();
  uint64_t v63 = v40;
  uint64_t v46 = v64;
  v45[2] = v40;
  v45[3] = v46;
  uint64_t v47 = v65;
  v45[4] = v67;
  void v45[5] = v47;
  uint64_t v65 = v18;
  os_log_type_t v48 = *(uint64_t (**)(char *, void, void (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v42 + 32);
  swift_retain();
  swift_retain();
  uint64_t v49 = (void *)v48(v44, 0, sub_100099B70, v45, v41, v42);
  swift_release();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v51 = v44;
  uint64_t v52 = v74;
  v50(v51, v74);
  uint64_t v75 = (uint64_t)v49;
  swift_getKeyPath();
  uint64_t v53 = swift_allocObject();
  uint64_t v54 = v68;
  uint64_t v55 = v69;
  *(void *)(v53 + 16) = v68;
  *(void *)(v53 + 24) = v55;
  sub_1000448A0(v54);
  uint64_t v56 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  unint64_t v57 = *(void **)(v40 + 16);
  *(void *)(v40 + 16) = v56;

  [v49 resume];
  (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v73);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v50)(v65, v52);
}

void sub_100098DA4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, void *), uint64_t a5)
{
  uint64_t v62 = a5;
  uint64_t v9 = type metadata accessor for String.Encoding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100003EB0((uint64_t *)&unk_1001DD410);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v64 = *(void *)(v18 - 8);
  uint64_t v65 = v18;
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v63 = (char *)&v60 - v24;
  swift_beginAccess();
  uint64_t v25 = *(void **)(a3 + 16);
  if (v25)
  {
    id v26 = v25;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }
  sub_100006724(a1, (uint64_t)v17, (uint64_t *)&unk_1001DD410);
  uint64_t v28 = v64;
  uint64_t v27 = v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v17, 1, v65) == 1)
  {
    sub_10005F4F8((uint64_t)v17, (uint64_t *)&unk_1001DD410);
    if (a2)
    {
      swift_errorRetain();
      if (qword_1001D9168 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_100003E78(v29, (uint64_t)qword_1001DCE10);
      swift_errorRetain();
      swift_errorRetain();
      char v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        v79[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315138;
        *(void *)&v78[0] = a2;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v33 = String.init<A>(describing:)();
        *(void *)&v78[0] = sub_100005EB8(v33, v34, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "OTA client error: %s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      v79[0] = a2;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      type metadata accessor for SPRHTTPError(0);
      if (swift_dynamicCast())
      {
        uint64_t v47 = *(void **)&v78[0];
        os_log_type_t v48 = (void *)sub_1000A7414(*(void **)&v78[0]);
      }
      else
      {
        swift_errorRetain();
        os_log_type_t v48 = (void *)sub_10002A974(2000, 0, 0, a2);
        swift_errorRelease();
      }
      sub_1000A6C3C(v78);
      sub_100029CEC((uint64_t)v78, (uint64_t)v79, &qword_1001DAF18);
      id v49 = v48;
      a4(v79, v48);

      swift_errorRelease();
    }
  }
  else
  {
    unint64_t v61 = a4;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v63, v17, v27);
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100003E78(v35, (uint64_t)qword_1001DCE10);
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "using streaming type custom decoder", v38, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v22, v63, v65);
    type metadata accessor for KCSOTAResponseParser();
    unint64_t v39 = (void *)swift_allocObject();
    static String.Encoding.utf8.getter();
    uint64_t v40 = String.data(using:allowLossyConversion:)();
    unint64_t v42 = v41;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    if (v42 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v39[2] = v40;
      v39[3] = v42;
      uint64_t v43 = Data.init(contentsOf:options:)();
      uint64_t v45 = v44;
      uint64_t v46 = *(void (**)(char *, uint64_t))(v64 + 8);
      v46(v22, v65);
      v39[4] = v43;
      v39[5] = v45;
      sub_1000DA27C((uint64_t)v78);
      long long v75 = v78[8];
      long long v76 = v78[9];
      long long v77 = v78[10];
      long long v71 = v78[4];
      long long v72 = v78[5];
      long long v73 = v78[6];
      long long v74 = v78[7];
      long long v67 = v78[0];
      long long v68 = v78[1];
      long long v69 = v78[2];
      long long v70 = v78[3];
      sub_1000A78EC((uint64_t *)v78);
      sub_1000A78EC((uint64_t *)v78);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        v79[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 136315138;
        uint64_t v60 = v53 + 4;
        sub_1000A78EC((uint64_t *)v78);
        uint64_t v54 = sub_1000DC5E8();
        uint64_t v55 = v46;
        unint64_t v57 = v56;
        sub_1000A7AB4((uint64_t *)v78);
        *(void *)&v66[0] = sub_100005EB8(v54, v57, v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v46 = v55;
        swift_bridgeObjectRelease();
        sub_1000A7AB4((uint64_t *)v78);
        sub_1000A7AB4((uint64_t *)v78);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "KCSOTAResponse: %s", v53, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1000A7AB4((uint64_t *)v78);
        sub_1000A7AB4((uint64_t *)v78);
      }

      BOOL v58 = v61;
      uint64_t v59 = v65;
      v66[8] = v75;
      v66[9] = v76;
      v66[10] = v77;
      v66[4] = v71;
      v66[5] = v72;
      v66[6] = v73;
      v66[7] = v74;
      v66[0] = v67;
      v66[1] = v68;
      v66[2] = v69;
      v66[3] = v70;
      BitString.init(data:unusedBits:)(v66);
      sub_100029CEC((uint64_t)v66, (uint64_t)v79, &qword_1001DAF18);
      sub_1000A78EC((uint64_t *)v78);
      v58(v79, 0);
      sub_1000A7AB4((uint64_t *)v78);
      swift_release();
      sub_1000A7AB4((uint64_t *)v78);
      v46(v63, v59);
    }
  }
}

uint64_t sub_10009984C(id *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  id v4 = *a1;
  uint64_t result = (uint64_t)[*a1 countOfBytesReceived];
  uint64_t v6 = 100 * result;
  if ((unsigned __int128)(result * (__int128)100) >> 64 != (100 * result) >> 63)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = (uint64_t)[v4 countOfBytesExpectedToReceive];
  if (!a3) {
    return result;
  }
  double v7 = ceil((double)v6 / (double)result);
  if (v7 <= 100.0)
  {
    if ((~*(void *)&v7 & 0x7FF0000000000000) != 0)
    {
      if (v7 > -9.22337204e18)
      {
        if (v7 < 9.22337204e18)
        {
          uint64_t v8 = (uint64_t)v7;
          return a3(v8);
        }
LABEL_14:
        __break(1u);
        return result;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v8 = 100;
  return a3(v8);
}

uint64_t sub_10009992C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_configuratorUrl;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100006520(v0 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel);

  return swift_deallocClassInstance();
}

uint64_t sub_1000999DC()
{
  return type metadata accessor for ConfiguratorBackend(0);
}

uint64_t type metadata accessor for ConfiguratorBackend(uint64_t a1)
{
  return sub_100008234(a1, qword_1001DCE78);
}

uint64_t sub_100099A04()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *sub_100099A9C()
{
  uint64_t result = sub_1000973C8();
  if (v0) {
    return (char *)v2;
  }
  return result;
}

uint64_t sub_100099AD4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100098660(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100099AF8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100099B30()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100099B70(uint64_t a1, uint64_t a2)
{
  sub_100098DA4(a1, a2, *(void *)(v2 + 16), *(void (**)(uint64_t *, void *))(v2 + 24), *(void *)(v2 + 32));
}

const char *sub_100099B7C()
{
  return "countOfBytesReceived";
}

id sub_100099B88@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 countOfBytesReceived];
  *a2 = result;
  return result;
}

uint64_t sub_100099BBC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100099BFC(id *a1, uint64_t a2)
{
  return sub_10009984C(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

void sub_100099C04(uint64_t a1, void (*a2)(char *, char *, uint64_t), uint64_t a3, void *a4, void (*a5)(void, void *), uint64_t a6, uint64_t a7, char *a8, char a9, uint64_t a10)
{
  uint64_t v334 = a8;
  uint64_t v339 = a7;
  uint64_t v340 = a1;
  uint64_t v344 = a6;
  os_log_type_t v345 = a5;
  v347 = a4;
  sub_100029CEC(a1, (uint64_t)v352, &qword_1001DAF18);
  sub_100029CEC((uint64_t)v352, (uint64_t)v365, &qword_1001DAF18);
  uint64_t v11 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v324 = (uint64_t)v316 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v327 = (uint64_t)v316 - v16;
  uint64_t v332 = type metadata accessor for UUID();
  char v328 = *(NSObject **)(v332 - 8);
  uint64_t v18 = __chkstk_darwin(v332, v17);
  uint64_t v321 = (uint64_t)v316 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  v323 = (char *)v316 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v322 = (uint64_t)v316 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v325 = (uint64_t)v316 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  id v326 = (char *)v316 - v31;
  uint64_t v33 = __chkstk_darwin(v30, v32);
  id v331 = (char *)v316 - v34;
  __chkstk_darwin(v33, v35);
  v330 = (char *)v316 - v36;
  uint64_t v335 = (int *)_s14InstallPackageVMa(0);
  __chkstk_darwin(v335, v37);
  uint64_t v338 = (void *)((char *)v316 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v39 = (char *)type metadata accessor for OSSignpostError();
  char v341 = (uint64_t (**)(void, void))*((void *)v39 - 1);
  os_signpost_id_t v342 = v39;
  uint64_t v41 = __chkstk_darwin(v39, v40);
  v329 = ((char *)v316 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v41, v43);
  uint64_t v45 = (char *)v316 - v44;
  uint64_t v46 = type metadata accessor for OSSignpostID();
  uint64_t v346 = *(void *)(v46 - 8);
  uint64_t v48 = __chkstk_darwin(v46, v47);
  uint64_t v333 = (uint64_t)v316 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __chkstk_darwin(v48, v50);
  uint64_t v53 = ((char *)v316 - v52);
  uint64_t v55 = __chkstk_darwin(v51, v54);
  unsigned __int8 v343 = (uint8_t *)v316 - v56;
  __chkstk_darwin(v55, v57);
  uint64_t v59 = (char *)v316 - v58;
  if (qword_1001D9170 != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for OSSignposter();
  uint64_t v337 = sub_100003E78(v60, (uint64_t)qword_1001DCE28);
  unint64_t v61 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v62 = static os_signpost_type_t.end.getter();
  char v63 = OS_os_log.signpostsEnabled.getter();
  os_log_t v336 = v53;
  if ((v63 & 1) == 0)
  {

    uint64_t v67 = v346;
    long long v68 = *(void (**)(char *, uint64_t))(v346 + 8);
    v68(v59, v46);
    if (!a2) {
      goto LABEL_21;
    }
LABEL_8:
    swift_errorRetain();
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    sub_100003E78(v69, (uint64_t)qword_1001DCE10);
    swift_errorRetain();
    swift_errorRetain();
    long long v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      long long v72 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v354 = swift_slowAlloc();
      *(_DWORD *)long long v72 = 136315138;
      *(void *)&v353[0] = a2;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      uint64_t v73 = String.init<A>(describing:)();
      *(void *)&v353[0] = sub_100005EB8(v73, v74, (uint64_t *)&v354);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "OTA client error: %s", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    long long v75 = (void *)_convertErrorToNSError(_:)();
    id v76 = [v75 userInfo];
    uint64_t v77 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v77 + 16) && (unint64_t v80 = sub_10000C4B0(v78, v79), (v81 & 1) != 0))
    {
      sub_100006570(*(void *)(v77 + 56) + 32 * v80, (uint64_t)&v354);
    }
    else
    {
      long long v354 = 0u;
      long long v355 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v355 + 1))
    {
      type metadata accessor for SPRHTTPError(0);
      if (swift_dynamicCast()) {
        uint64_t v82 = *(void **)&v353[0];
      }
      else {
        uint64_t v82 = 0;
      }
    }
    else
    {
      sub_10005F4F8((uint64_t)&v354, &qword_1001DD3F0);
      uint64_t v82 = 0;
    }
    sub_100003EB0(&qword_1001D9B38);
    uint64_t v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_100189B70;
    *(unsigned char *)(v101 + 32) = 8;
    id v102 = [v75 code];
    *(void *)(v101 + 64) = &type metadata for Int;
    *(void *)(v101 + 40) = v102;
    *(unsigned char *)(v101 + 72) = 10;
    if (v82)
    {
      *(void *)&long long v354 = v82;
      type metadata accessor for SPRHTTPError(0);
      sub_1000AA958(&qword_1001D9CF0, type metadata accessor for SPRHTTPError);
      uint64_t v103 = _BridgedStoredNSError.errorCode.getter();
      *(void *)(v101 + 104) = &type metadata for Int;
      *(void *)(v101 + 80) = v103;
      *(unsigned char *)(v101 + 112) = 11;
      id v104 = v82;
      uint64_t v105 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter();
      uint64_t v107 = v106;

      if (v107)
      {
        *(void *)(v101 + 144) = &type metadata for String;
        *(void *)(v101 + 120) = v105;
        *(void *)(v101 + 128) = v107;
LABEL_34:
        unint64_t v108 = sub_100104C38(v101);
        __chkstk_darwin(v108, v109);
        id v111 = (uint64_t *)&v110[4];
        uint64_t v112 = v110 + 8;
        os_unfair_lock_lock(v110 + 8);
        sub_100085FE4(v111);
        os_unfair_lock_unlock(v112);
        swift_bridgeObjectRelease();
        swift_errorRetain();
        v345(0, a2);
        swift_errorRelease();

        goto LABEL_35;
      }
    }
    else
    {
      *(_OWORD *)(v101 + 80) = 0u;
      *(_OWORD *)(v101 + 96) = 0u;
      *(unsigned char *)(v101 + 112) = 11;
    }
    *(void *)(v101 + 120) = 0;
    *(void *)(v101 + 128) = 0;
    *(void *)(v101 + 136) = 0;
    *(void *)(v101 + 144) = 0;
    goto LABEL_34;
  }
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v65 = v341;
  uint64_t v64 = v342;
  int v66 = ((uint64_t (**)(char *, char *))v341)[11](v45, v342);
  uint64_t v320 = a2;
  if (v66 == enum case for OSSignpostError.doubleEnd(_:))
  {
    uint64_t v83 = "[Error] Interval already ended";
  }
  else
  {
    ((uint64_t (**)(char *, char *))v65)[1](v45, v64);
    uint64_t v83 = "end fetch SLAM";
  }
  uint64_t v67 = v346;
  uint64_t v84 = (uint64_t)v343;
  (*(void (**)(uint8_t *, char *, uint64_t))(v346 + 16))(v343, v59, v46);
  uint64_t v85 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v85 = 0;
  os_signpost_id_t v86 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v61, v62, v86, "config-install-fetchSLAM", v83, v85, 2u);
  swift_slowDealloc();

  long long v68 = *(void (**)(char *, uint64_t))(v67 + 8);
  v68(v59, v46);
  v68((char *)v84, v46);
  a2 = v320;
  if (v320) {
    goto LABEL_8;
  }
LABEL_21:
  uint64_t v87 = v340;
  sub_100029CEC(v340, (uint64_t)v353, &qword_1001DAF18);
  if (sub_1000A7D7C((uint64_t)v353) == 1)
  {
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v88 = type metadata accessor for Logger();
    sub_100003E78(v88, (uint64_t)qword_1001DCE10);
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v91 = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "no response from server", v91, 2u);
      swift_slowDealloc();
    }

    uint64_t v92 = (void *)sub_10002A974(2000, 0, 0, 0);
    sub_100003EB0(&qword_1001D9B38);
    uint64_t v93 = swift_allocObject();
    *(_OWORD *)(v93 + 16) = xmmword_100186100;
    *(unsigned char *)(v93 + 32) = 8;
    *(void *)&long long v354 = v92;
    type metadata accessor for ConfigurationError(0);
    sub_1000AA958((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
    uint64_t v94 = _BridgedStoredNSError.errorCode.getter();
    *(void *)(v93 + 64) = &type metadata for Int;
    *(void *)(v93 + 40) = v94;
    unint64_t v95 = sub_100104C38(v93);
    __chkstk_darwin(v95, v96);
    uint64_t v98 = (uint64_t *)&v97[4];
    uint64_t v99 = v97 + 8;
    os_unfair_lock_lock(v97 + 8);
    sub_100085FE4(v98);
    os_unfair_lock_unlock(v99);
    swift_bridgeObjectRelease();
    id v100 = v92;
    v345(0, v92);

    return;
  }
  long long v362 = v353[8];
  long long v363 = v353[9];
  long long v364 = v353[10];
  long long v358 = v353[4];
  long long v359 = v353[5];
  long long v360 = v353[6];
  long long v361 = v353[7];
  long long v354 = v353[0];
  long long v355 = v353[1];
  long long v356 = v353[2];
  long long v357 = v353[3];
  char v113 = v347;
  sub_100006788(v347 + 19, v347[22]);
  sub_100029CEC((uint64_t)v365, (uint64_t)v351, &qword_1001DAF18);
  sub_1000A78EC(v351);
  uint64_t v114 = sub_10010F4B0(v339);
  if (v114)
  {
    id v116 = (void (*)(char *, char *, uint64_t))v113[34];
    LOBYTE(v350) = 0;
    __chkstk_darwin(v114, v115);
    os_log_type_t v118 = (uint64_t *)&v117[4];
    uint64_t v119 = v117 + 8;
    os_unfair_lock_lock(v117 + 8);
    sub_1000A8200(v118);
    uint64_t v319 = 0;
    os_unfair_lock_unlock(v119);
    os_log_t v120 = v336;
    static OSSignpostID.exclusive.getter();
    unint64_t v121 = OSSignposter.logHandle.getter();
    os_signpost_type_t v122 = static os_signpost_type_t.begin.getter();
    char v123 = OS_os_log.signpostsEnabled.getter();
    uint64_t v320 = v116;
    if (v123)
    {
      uint64_t v124 = v346 + 16;
      *(void *)&long long v318 = *(void *)(v346 + 16);
      uint64_t v125 = (uint64_t)v343;
      ((void (*)(uint8_t *, os_log_t, uint64_t))v318)(v343, v120, v46);
      uint64_t v126 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v126 = 0;
      os_signpost_id_t v127 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v121, v122, v127, "config-install-validateSLAM", "begin validate and persist SLAM", v126, 2u);
      swift_slowDealloc();

      v68((char *)v125, v46);
      unint64_t v128 = v124 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v129 = (void (*)(uint8_t *, os_log_t, uint64_t))v318;
      uint64_t v130 = v338;
      ((void (*)(uint64_t, os_log_t, uint64_t))v318)(v125, v120, v46);
    }
    else
    {

      uint64_t v129 = *(void (**)(uint8_t *, os_log_t, uint64_t))(v67 + 16);
      unint64_t v128 = (v67 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      uint64_t v130 = v338;
      v129(v343, v120, v46);
    }
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v144 = OSSignpostIntervalState.init(id:isOpen:)();
    v68((char *)v120, v46);
    uint64_t v145 = v130;
    uint64_t v146 = v319;
    sub_10009BDC4((uint64_t *)&v354, v145);
    if (v146)
    {
      v347 = 0;
      swift_release();
      uint64_t v350 = v146;
      swift_errorRetain();
      sub_100003EB0((uint64_t *)&unk_1001DD380);
      type metadata accessor for ConfigurationError(0);
      if (swift_dynamicCast())
      {
        id v183 = v349;
        id v348 = v349;
        sub_1000AA958((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
        if (_BridgedStoredNSError.errorCode.getter() >= 2000)
        {
          id v348 = v183;
          if (_BridgedStoredNSError.errorCode.getter() <= 2999)
          {
            swift_errorRelease();
            if (qword_1001D9168 != -1) {
              swift_once();
            }
            uint64_t v218 = type metadata accessor for Logger();
            sub_100003E78(v218, (uint64_t)qword_1001DCE10);
            uint64_t v219 = v183;
            uint64_t v220 = Logger.logObject.getter();
            os_log_type_t v221 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v220, v221))
            {
              uint64_t v222 = (uint8_t *)swift_slowAlloc();
              uint64_t v346 = swift_slowAlloc();
              *(_DWORD *)uint64_t v222 = 138412290;
              unsigned __int8 v343 = v222 + 4;
              os_log_type_t v223 = v219;
              uint64_t v224 = v219;
              uint64_t v225 = _swift_stdlib_bridgeErrorToNSError();
              id v348 = v225;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(void *)uint64_t v346 = v225;
              uint64_t v219 = v224;

              _os_log_impl((void *)&_mh_execute_header, v220, v221, "failed to install %@", v222, 0xCu);
              sub_100003EB0((uint64_t *)&unk_1001DA540);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v220 = v219;
            }

            sub_100003EB0(&qword_1001D9B38);
            uint64_t v242 = swift_allocObject();
            *(_OWORD *)(v242 + 16) = xmmword_100186100;
            *(unsigned char *)(v242 + 32) = 8;
            id v348 = v219;
            uint64_t v243 = _BridgedStoredNSError.errorCode.getter();
            *(void *)(v242 + 64) = &type metadata for Int;
            *(void *)(v242 + 40) = v243;
            unint64_t v244 = sub_100104C38(v242);
            __chkstk_darwin(v244, v245);
            uint64_t v247 = (uint64_t *)&v246[4];
            uint64_t v248 = v246 + 8;
            os_unfair_lock_lock(v246 + 8);
            sub_100085FE4(v247);
            os_unfair_lock_unlock(v248);
            swift_bridgeObjectRelease();
            id v249 = v219;
            v345(0, v219);
            sub_1000A7D94(v340);

            goto LABEL_35;
          }
        }
      }
      swift_errorRelease();
      if (qword_1001D9168 != -1) {
        swift_once();
      }
      uint64_t v184 = type metadata accessor for Logger();
      sub_100003E78(v184, (uint64_t)qword_1001DCE10);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v185 = Logger.logObject.getter();
      os_log_type_t v186 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v185, v186))
      {
        uint64_t v187 = (uint8_t *)swift_slowAlloc();
        uint64_t v188 = swift_slowAlloc();
        uint64_t v349 = v146;
        uint64_t v350 = v188;
        *(_DWORD *)uint64_t v187 = 136315138;
        swift_errorRetain();
        uint64_t v189 = String.init<A>(describing:)();
        uint64_t v349 = sub_100005EB8(v189, v190, &v350);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v185, v186, "%s", v187, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_errorRetain();
      unint64_t v191 = (void *)sub_10002A974(2027, 0, 0, v146);
      swift_errorRelease();
      sub_100003EB0(&qword_1001D9B38);
      uint64_t v192 = swift_allocObject();
      *(_OWORD *)(v192 + 16) = xmmword_100186100;
      *(unsigned char *)(v192 + 32) = 8;
      uint64_t v350 = (uint64_t)v191;
      sub_1000AA958((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
      uint64_t v193 = _BridgedStoredNSError.errorCode.getter();
      *(void *)(v192 + 64) = &type metadata for Int;
      *(void *)(v192 + 40) = v193;
      unint64_t v194 = sub_100104C38(v192);
      __chkstk_darwin(v194, v195);
      uint64_t v197 = (uint64_t *)&v196[4];
      uint64_t v198 = v196 + 8;
      os_unfair_lock_lock(v196 + 8);
      sub_100085FE4(v197);
      os_unfair_lock_unlock(v198);
      swift_bridgeObjectRelease();
      id v199 = v191;
      v345(0, v191);
      sub_1000A7D94(v340);

LABEL_35:
      swift_errorRelease();
      return;
    }
    uint64_t v319 = v128;
    uint64_t v147 = v347[32];
    os_log_t v336 = (os_log_t)v347[33];
    sub_100006788(v347 + 29, v147);
    sub_100003EB0(&qword_1001D9B20);
    uint64_t v148 = swift_allocObject();
    uint64_t v346 = v144;
    uint64_t v149 = (void *)v148;
    long long v318 = xmmword_100186100;
    *(_OWORD *)(v148 + 16) = xmmword_100186100;
    *(void *)(v148 + 32) = 1684631668;
    *(void *)(v148 + 40) = 0xE400000000000000;
    uint64_t v150 = UUID.uuidString.getter();
    v149[9] = &type metadata for String;
    v149[10] = &protocol witness table for String;
    v149[6] = v150;
    v149[7] = v151;
    unint64_t v152 = sub_100104AF4((uint64_t)v149);
    sub_100136224(16, v152, v147, (uint64_t)v336);
    swift_bridgeObjectRelease();
    unint64_t v153 = OSSignposter.logHandle.getter();
    uint64_t v154 = v333;
    OSSignpostIntervalState.signpostID.getter();
    LODWORD(v337) = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      os_log_t v336 = v153;
      swift_retain();
      uint64_t v155 = (uint64_t)v329;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v157 = v341;
      uint64_t v156 = v342;
      if (((uint64_t (**)(uint64_t, char *))v341)[11](v155, v342) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v158 = "[Error] Interval already ended";
      }
      else
      {
        ((uint64_t (**)(uint64_t, char *))v157)[1](v155, v156);
        uint64_t v158 = "end validate and persist SLAM";
      }
      os_signpost_id_t v342 = (char *)v158;
      uint64_t v159 = (uint64_t)v343;
      v129(v343, (os_log_t)v154, v46);
      uint64_t v160 = v154;
      uint64_t v161 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v161 = 0;
      os_signpost_id_t v162 = OSSignpostID.rawValue.getter();
      os_log_t v163 = v336;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v336, (os_signpost_type_t)v337, v162, "config-install-validateSLAM", v342, v161, 2u);
      swift_slowDealloc();

      v68((char *)v160, v46);
    }
    else
    {

      uint64_t v159 = v154;
    }
    v68((char *)v159, v46);
    sub_100003EB0(&qword_1001D9B38);
    uint64_t v164 = swift_allocObject();
    *(_OWORD *)(v164 + 16) = xmmword_100189E90;
    *(unsigned char *)(v164 + 32) = 3;
    uint64_t v165 = v335;
    uint64_t v166 = v338;
    unsigned __int8 v343 = (uint8_t *)v338 + v335[9];
    UUID.uuidString.getter();
    uint64_t v167 = sub_100117604();
    *(void *)(v164 + 64) = &type metadata for String;
    *(void *)(v164 + 40) = v167;
    *(void *)(v164 + 48) = v168;
    *(unsigned char *)(v164 + 72) = 4;
    os_signpost_id_t v342 = (char *)v166 + v165[8];
    UUID.uuidString.getter();
    uint64_t v169 = sub_100117604();
    *(void *)(v164 + 104) = &type metadata for String;
    *(void *)(v164 + 80) = v169;
    *(void *)(v164 + 88) = v170;
    *(unsigned char *)(v164 + 112) = 2;
    if (!v166[21] || (v166[19] & 1) != 0)
    {
      *(_OWORD *)(v164 + 120) = 0u;
      *(_OWORD *)(v164 + 136) = 0u;
    }
    else
    {
      uint64_t v171 = v166[18];
      *(void *)(v164 + 144) = &type metadata for Int;
      *(void *)(v164 + 120) = v171;
    }
    uint64_t v172 = v320;
    *(unsigned char *)(v164 + 152) = 1;
    if (!v166[32] || (v166[30] & 1) != 0)
    {
      *(_OWORD *)(v164 + 160) = 0u;
      *(_OWORD *)(v164 + 176) = 0u;
    }
    else
    {
      uint64_t v173 = v166[29];
      *(void *)(v164 + 184) = &type metadata for Int;
      *(void *)(v164 + 160) = v173;
    }
    *(unsigned char *)(v164 + 192) = 0;
    if (!v166[10] || (v166[8] & 1) != 0)
    {
      *(_OWORD *)(v164 + 200) = 0u;
      *(_OWORD *)(v164 + 216) = 0u;
    }
    else
    {
      uint64_t v174 = v166[7];
      *(void *)(v164 + 224) = &type metadata for Int;
      *(void *)(v164 + 200) = v174;
    }
    unint64_t v175 = sub_100104C38(v164);
    __chkstk_darwin(v175, v176);
    uint64_t v178 = (uint64_t *)&v177[4];
    uint64_t v179 = v177 + 8;
    os_unfair_lock_lock(v177 + 8);
    sub_100085FE4(v178);
    os_unfair_lock_unlock(v179);
    swift_bridgeObjectRelease();
    char v180 = v338;
    uint64_t v181 = v347;
    sub_10009DA4C((uint64_t)v338, a9 & 1, a10);
    char v341 = v182;
    uint64_t v200 = v334;
    UUID.uuidString.getter();
    uint64_t v201 = sub_100117604();
    unint64_t v203 = v202;
    uint64_t v337 = 0;
    sub_100006788((void *)v172 + 2, *((void *)v172 + 5));
    sub_1000430BC(41, v201, v203);
    swift_bridgeObjectRelease();
    v347 = (void *)v181[13];
    uint64_t v204 = v328;
    Class isa = (void (*)(char *, char *, uint64_t))v328[2].isa;
    uint64_t v206 = v332;
    isa(v330, v342, v332);
    isa(v331, (char *)v343, v206);
    uint64_t v207 = sub_100003EB0(&qword_1001DCF48);
    uint64_t v208 = type metadata accessor for KernelTokenHostConfigurationMapping();
    uint64_t v209 = *(void *)(*(void *)(v208 - 8) + 72);
    uint64_t v210 = *(unsigned __int8 *)(*(void *)(v208 - 8) + 80);
    uint64_t v211 = (v210 + 32) & ~v210;
    uint64_t v319 = v207;
    v316[1] = v210 | 7;
    v316[2] = v211 + v209;
    uint64_t v212 = swift_allocObject();
    *(_OWORD *)(v212 + 16) = v318;
    uint64_t v317 = v211;
    os_signpost_id_t v342 = (char *)v212;
    uint64_t v213 = v212 + v211;
    uint64_t v214 = (uint64_t)v326;
    v329 = v204 + 2;
    uint64_t v320 = isa;
    isa(v326, v200, v206);
    uint64_t v215 = (uint64_t *)((char *)v180 + v335[11]);
    uint64_t v216 = _swiftEmptyArrayStorage;
    if (*v215 == 1) {
      goto LABEL_85;
    }
    char v217 = (void *)v215[1];
    if (*v215) {
      uint64_t v216 = (void *)*v215;
    }
    swift_bridgeObjectRetain();
    if (!v217)
    {
LABEL_85:
      swift_bridgeObjectRelease();
      char v217 = _swiftEmptyArrayStorage;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    char v226 = (char *)v204[4].isa;
    uint64_t v227 = v332;
    os_log_t v336 = v204 + 4;
    uint64_t v334 = v226;
    ((void (*)(uint64_t, uint64_t, uint64_t))v226)(v213, v214, v332);
    *(void *)(v213 + *(int *)(v208 + 20)) = v216;
    uint64_t v333 = v208;
    *(void *)(v213 + *(int *)(v208 + 24)) = v217;
    int v228 = v330;
    UUID.uuidString.getter();
    uint64_t v229 = sub_100117604();
    uint64_t v231 = v230;
    uint64_t v232 = (uint64_t)v331;
    UUID.uuidString.getter();
    uint64_t v233 = sub_100117604();
    uint64_t v234 = v229;
    uint64_t v235 = v227;
    sub_1000C9640(v234, v231, v233, v236, v342);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000C8184();
    swift_bridgeObjectRelease();
    v237 = (char *)v204[1].isa;
    ((void (*)(uint64_t, uint64_t))v237)(v232, v235);
    ((void (*)(char *, uint64_t))v237)(v228, v235);
    uint64_t v238 = v327;
    sub_100006724((uint64_t)v338 + v335[10], v327, (uint64_t *)&unk_1001DF8D0);
    char v239 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v204[6].isa;
    if (v239(v238, 1, v235) != 1)
    {
      os_signpost_id_t v342 = v237;
      uint64_t v240 = v325;
      id v241 = (void (*)(uint64_t, uint64_t, uint64_t))v334;
      ((void (*)(uint64_t, uint64_t, uint64_t))v334)(v325, v238, v235);
      uint64_t v238 = v324;
      sub_100006724(v339, v324, (uint64_t *)&unk_1001DF8D0);
      if (v239(v238, 1, v235) != 1)
      {
        uint64_t v250 = v322;
        v241(v322, v238, v235);
        unint64_t v251 = (void (*)(uint64_t, uint64_t, uint64_t))v320;
        v320(v323, (char *)v343, v235);
        uint64_t v252 = swift_allocObject();
        *(_OWORD *)(v252 + 16) = v318;
        uint64_t v253 = v252 + v317;
        v251(v321, v250, v235);
        v254 = (uint64_t *)((char *)v338 + v335[12]);
        id v255 = _swiftEmptyArrayStorage;
        uint64_t v256 = v333;
        if (*v254 == 1) {
          goto LABEL_97;
        }
        uint64_t v257 = (void *)v254[1];
        if (*v254) {
          id v255 = (void *)*v254;
        }
        swift_bridgeObjectRetain();
        if (!v257)
        {
LABEL_97:
          swift_bridgeObjectRelease();
          uint64_t v257 = _swiftEmptyArrayStorage;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        uint64_t v258 = v332;
        ((void (*)(uint64_t, uint64_t, uint64_t))v334)(v253, v321, v332);
        *(void *)(v253 + *(int *)(v256 + 20)) = v255;
        *(void *)(v253 + *(int *)(v256 + 24)) = v257;
        uint64_t v259 = v325;
        UUID.uuidString.getter();
        uint64_t v260 = sub_100117604();
        uint64_t v262 = v261;
        uint64_t v263 = (uint64_t)v323;
        UUID.uuidString.getter();
        uint64_t v264 = sub_100117604();
        sub_1000C9640(v260, v262, v264, v265, (void *)v252);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000C8184();
        swift_bridgeObjectRelease();
        int v266 = v342;
        ((void (*)(uint64_t, uint64_t))v342)(v263, v258);
        ((void (*)(uint64_t, uint64_t))v266)(v322, v258);
        ((void (*)(uint64_t, uint64_t))v266)(v259, v258);
        goto LABEL_99;
      }
      ((void (*)(uint64_t, uint64_t))v342)(v240, v235);
    }
    sub_10005F4F8(v238, (uint64_t *)&unk_1001DF8D0);
LABEL_99:
    unint64_t v267 = (void (*)(void, void))v345;
    os_log_type_t v268 = v341;
    uint64_t v269 = v341;
    v347 = v269;
    v267(v268, 0);

    sub_100003EB0(&qword_1001DCF50);
    uint64_t v270 = swift_allocObject();
    *(_OWORD *)(v270 + 16) = xmmword_10018A620;
    id v271 = v338;
    uint64_t v272 = *v338;
    uint64_t v273 = v338[1];
    uint64_t v274 = v338[2];
    uint64_t v275 = v338[3];
    uint64_t v276 = v338[4];
    uint64_t v277 = v338[5];
    uint64_t v278 = v338[6];
    uint64_t v279 = v338[7];
    *(void *)(v270 + 32) = *v338;
    os_log_type_t v345 = (void (*)(void, void *))(v270 + 32);
    uint64_t v280 = v271[8];
    uint64_t v281 = v271[9];
    *(void *)(v270 + 40) = v273;
    *(void *)(v270 + 48) = v274;
    *(void *)(v270 + 56) = v275;
    *(void *)(v270 + 64) = v276;
    *(void *)(v270 + 72) = v277;
    *(void *)(v270 + 80) = v278;
    *(void *)(v270 + 88) = v279;
    *(void *)(v270 + 96) = v280;
    uint64_t v282 = v271[10];
    uint64_t v283 = v271[11];
    *(void *)(v270 + 104) = v281;
    *(void *)(v270 + 112) = v282;
    os_signpost_type_t v285 = (char *)v271[13];
    unsigned __int8 v343 = (uint8_t *)v271[12];
    uint64_t v284 = (uint64_t)v343;
    uint64_t v344 = v283;
    uint64_t v287 = v271[15];
    char v341 = (uint64_t (**)(void, void))v271[14];
    uint64_t v286 = v341;
    os_signpost_id_t v342 = v285;
    uint64_t v339 = v287;
    uint64_t v288 = v271[16];
    os_log_t v336 = (os_log_t)v271[17];
    os_log_t v289 = v336;
    uint64_t v337 = v288;
    uint64_t v290 = (int *)v271[18];
    uint64_t v291 = v271[19];
    uint64_t v293 = v271[21];
    uint64_t v325 = v271[20];
    uint64_t v292 = v325;
    id v326 = (char *)v291;
    uint64_t v317 = v293;
    *(void *)(v270 + 120) = v283;
    *(void *)(v270 + 128) = v284;
    *(void *)(v270 + 136) = v285;
    *(void *)(v270 + 144) = v286;
    *(void *)(v270 + 152) = v287;
    *(void *)(v270 + 160) = v288;
    *(void *)(v270 + 168) = v289;
    *(void *)(v270 + 176) = v290;
    *(void *)(v270 + 184) = v291;
    *(void *)(v270 + 192) = v292;
    uint64_t v295 = v271[23];
    uint64_t v334 = (char *)v271[22];
    uint64_t v294 = v334;
    uint64_t v335 = v290;
    uint64_t v297 = v271[25];
    uint64_t v332 = v271[24];
    uint64_t v296 = v332;
    uint64_t v333 = v295;
    uint64_t v299 = v271[27];
    v330 = (char *)v271[26];
    uint64_t v298 = v330;
    id v331 = (char *)v297;
    *(void *)(v270 + 200) = v293;
    *(void *)(v270 + 208) = v294;
    *(void *)(v270 + 216) = v295;
    *(void *)(v270 + 224) = v296;
    *(void *)(v270 + 232) = v297;
    *(void *)(v270 + 240) = v298;
    uint64_t v301 = v271[28];
    uint64_t v300 = v271[29];
    char v328 = v299;
    v329 = v301;
    uint64_t v327 = v300;
    *(void *)(v270 + 248) = v299;
    *(void *)(v270 + 256) = v301;
    uint64_t v303 = v271[30];
    uint64_t v302 = v271[31];
    *(void *)(v270 + 264) = v300;
    *(void *)(v270 + 272) = v303;
    uint64_t v305 = v271[32];
    uint64_t v304 = v271[33];
    *(void *)(v270 + 280) = v302;
    *(void *)(v270 + 288) = v305;
    v307 = (void (*)(char *, char *, uint64_t))v271[35];
    v323 = (char *)v271[34];
    uint64_t v306 = (uint64_t)v323;
    uint64_t v324 = v304;
    *(void *)(v270 + 296) = v304;
    *(void *)(v270 + 304) = v306;
    uint64_t v309 = v271[36];
    uint64_t v319 = v271[37];
    uint64_t v308 = v319;
    uint64_t v320 = v307;
    *(void *)(v270 + 312) = v307;
    *(void *)(v270 + 320) = v309;
    uint64_t v321 = v271[38];
    uint64_t v310 = v321;
    uint64_t v322 = v309;
    uint64_t v312 = v271[40];
    *(void *)&long long v318 = v271[39];
    uint64_t v311 = v318;
    *(void *)(v270 + 328) = v308;
    *(void *)(v270 + 336) = v310;
    uint64_t v313 = v271[41];
    uint64_t v314 = v271[42];
    *(void *)(v270 + 344) = v311;
    *(void *)(v270 + 352) = v312;
    uint64_t v315 = v271[43];
    *(void *)(v270 + 360) = v313;
    *(void *)(v270 + 368) = v314;
    *(void *)(v270 + 376) = v315;
    sub_1000AA760(v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282);
    sub_1000AA760(v344, (uint64_t)v343, (uint64_t)v342, (uint64_t)v341, v339, v337, (uint64_t)v336, (uint64_t)v335, (uint64_t)v326, v325, v317);
    sub_1000AA760((uint64_t)v334, v333, v332, (uint64_t)v331, v330, (uint64_t)v328, (uint64_t)v329, v327, v303, v302, v305);
    sub_1000AA760(v324, (uint64_t)v323, (uint64_t)v320, v322, v319, v321, v318, v312, v313, v314, v315);
    sub_1000AA0DC(v270);
    swift_setDeallocating();
    sub_100003EB0(&qword_1001DCF58);
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_1000A7D94(v340);

    swift_release();
    sub_1000A8220((uint64_t)v271);
    return;
  }
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v131 = type metadata accessor for Logger();
  sub_100003E78(v131, (uint64_t)qword_1001DCE10);
  uint64_t v132 = Logger.logObject.getter();
  os_log_type_t v133 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v132, v133))
  {
    uint64_t v134 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v134 = 0;
    _os_log_impl((void *)&_mh_execute_header, v132, v133, "Not attested after OTA response", v134, 2u);
    swift_slowDealloc();
  }

  uint64_t v135 = (void *)sub_10002A974(2029, 0, 0, 0);
  sub_100003EB0(&qword_1001D9B38);
  uint64_t v136 = swift_allocObject();
  *(_OWORD *)(v136 + 16) = xmmword_100186100;
  *(unsigned char *)(v136 + 32) = 8;
  uint64_t v350 = (uint64_t)v135;
  type metadata accessor for ConfigurationError(0);
  sub_1000AA958((unint64_t *)&qword_1001D9858, type metadata accessor for ConfigurationError);
  uint64_t v137 = _BridgedStoredNSError.errorCode.getter();
  *(void *)(v136 + 64) = &type metadata for Int;
  *(void *)(v136 + 40) = v137;
  unint64_t v138 = sub_100104C38(v136);
  __chkstk_darwin(v138, v139);
  uint64_t v141 = (uint64_t *)&v140[4];
  uint64_t v142 = v140 + 8;
  os_unfair_lock_lock(v140 + 8);
  sub_100085FE4(v141);
  os_unfair_lock_unlock(v142);
  swift_bridgeObjectRelease();
  id v143 = v135;
  v345(0, v135);

  sub_1000A7D94(v87);
}

uint64_t sub_10009BDC4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v305 = a1;
  uint64_t v280 = a2;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v291 = v2;
  uint64_t v292 = v3;
  uint64_t v5 = __chkstk_darwin(v2, v4);
  double v7 = (char *)&v242 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v279 = (uint64_t)&v242 - v10;
  uint64_t v12 = __chkstk_darwin(v9, v11);
  unint64_t v288 = (unint64_t)&v242 - v13;
  __chkstk_darwin(v12, v14);
  uint64_t v290 = (uint64_t)&v242 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v306 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v286 = (char *)&v242 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  os_signpost_type_t v285 = (char *)&v242 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v277 = (uint64_t)&v242 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v278 = (uint64_t)&v242 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v282 = (uint64_t)&v242 - v31;
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v283 = (uint64_t)&v242 - v34;
  uint64_t v36 = __chkstk_darwin(v33, v35);
  uint64_t v38 = (char *)&v242 - v37;
  __chkstk_darwin(v36, v39);
  uint64_t v301 = (char *)&v242 - v40;
  uint64_t v41 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v43 = __chkstk_darwin(v41 - 8, v42);
  uint64_t v284 = (uint64_t)&v242 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __chkstk_darwin(v43, v45);
  uint64_t v300 = (uint64_t)&v242 - v47;
  uint64_t v49 = __chkstk_darwin(v46, v48);
  uint64_t v303 = (uint64_t)&v242 - v50;
  uint64_t v52 = __chkstk_darwin(v49, v51);
  uint64_t v54 = (char *)&v242 - v53;
  uint64_t v56 = __chkstk_darwin(v52, v55);
  uint64_t v58 = (char *)&v242 - v57;
  __chkstk_darwin(v56, v59);
  unint64_t v61 = (char *)&v242 - v60;
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v62 = type metadata accessor for Logger();
  uint64_t v302 = sub_100003E78(v62, (uint64_t)qword_1001DCE10);
  char v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  BOOL v65 = os_log_type_enabled(v63, v64);
  uint64_t v299 = v38;
  if (v65)
  {
    int v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "persistDownloadedScripts(response:)", v66, 2u);
    swift_slowDealloc();
  }

  uint64_t v67 = v305;
  uint64_t v68 = v305[4];
  unint64_t v69 = v305[5];
  UUID.init(uuidString:)();
  uint64_t v281 = v67[8];
  unint64_t v287 = v67[9];
  uint64_t v70 = v67[10];
  uint64_t v297 = (void *)v67[11];
  uint64_t v298 = v70;
  uint64_t v71 = v67[12];
  uint64_t v295 = v67[13];
  uint64_t v296 = v71;
  UUID.init(uuidString:)();
  sub_100029CEC((uint64_t)(v67 + 14), (uint64_t)v370, &qword_1001DCF80);
  sub_100029CEC((uint64_t)v370, (uint64_t)v382, &qword_1001DCF80);
  uint64_t v383 = v58;
  uint64_t v293 = v68;
  if (v382[1]) {
    swift_bridgeObjectRetain();
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v304 = v61;
  uint64_t v72 = v303;
  sub_100006724((uint64_t)v61, v303, (uint64_t *)&unk_1001DF8D0);
  uint64_t v73 = v306;
  unint64_t v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v306 + 48);
  if (v74(v72, 1, v16) != 1)
  {
    os_log_t v289 = v54;
    uint64_t v275 = v7;
    unint64_t v276 = v69;
    uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
    uint64_t v78 = v301;
    v77(v301, v72, v16);
    uint64_t v79 = v300;
    sub_100006724((uint64_t)v383, v300, (uint64_t *)&unk_1001DF8D0);
    if (v74(v79, 1, v16) == 1)
    {
      (*(void (**)(char *, uint64_t))(v73 + 8))(v78, v16);
      sub_10005F4F8(v79, (uint64_t *)&unk_1001DF8D0);
      uint64_t v75 = (uint64_t)v304;
LABEL_15:
      uint64_t v76 = (uint64_t)v383;
      uint64_t v54 = v289;
      goto LABEL_16;
    }
    unint64_t v80 = v299;
    v77(v299, v79, v16);
    char v81 = sub_1000A8624(v298, v297);
    uint64_t v75 = (uint64_t)v304;
    if ((v81 & 1) == 0)
    {
      uint64_t v85 = *(void (**)(char *, uint64_t))(v306 + 8);
      v85(v80, v16);
      v85(v301, v16);
      goto LABEL_15;
    }
    uint64_t v82 = v73 + 32;
    sub_100029CEC((uint64_t)v370, (uint64_t)v378, &qword_1001DCF80);
    uint64_t v54 = v289;
    if (v379)
    {
      uint64_t v83 = v380;
      uint64_t v84 = v381;
    }
    else
    {
      uint64_t v84 = 0;
      uint64_t v83 = 1;
    }
    unint64_t v90 = v276;
    if ((sub_1000A8624(v83, v84) & 1) == 0)
    {
      uint64_t v110 = *(void (**)(char *, uint64_t))(v306 + 8);
      v110(v299, v16);
      v110(v301, v16);
      uint64_t v76 = (uint64_t)v383;
      goto LABEL_16;
    }
    uint64_t v274 = v16;
    uint64_t v333 = 0;
    long long v331 = 0u;
    long long v332 = 0u;
    long long v329 = 0u;
    long long v330 = 0u;
    long long v328 = 0u;
    uint64_t v327 = 0;
    long long v325 = 0u;
    long long v326 = 0u;
    long long v323 = 0u;
    long long v324 = 0u;
    long long v322 = 0u;
    uint64_t v321 = 0;
    long long v319 = 0u;
    long long v320 = 0u;
    long long v317 = 0u;
    long long v318 = 0u;
    long long v316 = 0u;
    uint64_t v315 = 0;
    long long v313 = 0u;
    long long v314 = 0u;
    long long v311 = 0u;
    long long v312 = 0u;
    char v309 = 1;
    long long v310 = 0u;
    uint64_t v273 = v82;
    if (v90 >> 60 == 15)
    {
      uint64_t v91 = 0;
      uint64_t v272 = v77;
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      unsigned __int8 v97 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
      uint64_t v303 = 0;
      uint64_t v300 = 0;
      uint64_t v283 = 0;
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = 0;
    }
    else
    {
      id v111 = self;
      sub_1000065D0(v293, v90);
      id v112 = [v111 defaultManager];
      id v113 = [v112 temporaryDirectory];

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v114 = v283;
      UUID.init()();
      UUID.uuidString.getter();
      uint64_t v303 = *(void *)(v306 + 8);
      ((void (*)(uint64_t, uint64_t))v303)(v114, v274);
      uint64_t v115 = v294;
      uint64_t v116 = v290;
      double v117 = sub_1000A9064(v293, v90, 2, (uint64_t)v334);
      if (v115)
      {
        (*(void (**)(uint64_t, uint64_t, double))(v292 + 8))(v116, v291, v117);
        swift_bridgeObjectRelease();
        sub_10000BF70(v293, v276);
        sub_1000A98F8(&v309, (uint64_t *)&v328, (uint64_t)&v322, (uint64_t)&v316, (uint64_t)&v310);
        uint64_t v118 = v274;
        uint64_t v119 = (void (*)(char *, uint64_t))v303;
        ((void (*)(char *, uint64_t))v303)(v299, v274);
        v119(v301, v118);
        sub_10005F4F8((uint64_t)v54, (uint64_t *)&unk_1001DF8D0);
        sub_10005F4F8((uint64_t)v383, (uint64_t *)&unk_1001DF8D0);
        uint64_t v120 = v75;
        goto LABEL_47;
      }
      uint64_t v272 = v77;
      uint64_t v294 = 0;
      uint64_t v102 = v334[0];
      uint64_t v103 = v334[1];
      uint64_t v303 = v335;
      uint64_t v300 = v336;
      uint64_t v283 = v337;
      uint64_t v106 = v338;
      uint64_t v270 = v339;
      uint64_t v271 = v334[2];
      uint64_t v121 = v340;
      uint64_t v108 = v341;
      uint64_t v109 = v342;
      uint64_t v105 = v334[3];
      (*(void (**)(uint64_t, uint64_t, double))(v292 + 8))(v116, v291, v117);
      swift_bridgeObjectRelease();
      sub_10000BF70(v293, v276);
      uint64_t v100 = *((void *)&v328 + 1);
      uint64_t v101 = v328;
      uint64_t v107 = v270 | (v121 << 8);
      uint64_t v104 = v271;
      uint64_t v98 = *((void *)&v329 + 1);
      uint64_t v99 = v329;
      unsigned __int8 v97 = v330;
      uint64_t v96 = *((void *)&v330 + 1);
      uint64_t v94 = *((void *)&v331 + 1);
      uint64_t v95 = v331;
      uint64_t v92 = *((void *)&v332 + 1);
      uint64_t v93 = v332;
      uint64_t v91 = v333;
    }
    sub_1000AAA3C(v101, v100, v99, v98, v97, v96, v95, v94, v93, v92, v91);
    *(void *)&long long v328 = v102;
    *((void *)&v328 + 1) = v103;
    *(void *)&long long v329 = v104;
    *((void *)&v329 + 1) = v105;
    *(void *)&long long v330 = v303;
    *((void *)&v330 + 1) = v300;
    *(void *)&long long v331 = v283;
    *((void *)&v331 + 1) = v106;
    *(void *)&long long v332 = v107;
    *((void *)&v332 + 1) = v108;
    uint64_t v333 = v109;
    unint64_t v122 = v305[1];
    unint64_t v123 = v288;
    if (v122 >> 60 == 15)
    {
      uint64_t v124 = 0;
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      uint64_t v305 = 0;
      uint64_t v303 = 0;
      uint64_t v300 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
    }
    else
    {
      uint64_t v132 = *v305;
      os_log_type_t v133 = self;
      sub_1000065D0(v132, v122);
      id v134 = [v133 defaultManager];
      id v135 = [v134 temporaryDirectory];

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v136 = v282;
      UUID.init()();
      UUID.uuidString.getter();
      uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v306 + 8);
      uint64_t v138 = v136;
      uint64_t v139 = v274;
      v137(v138, v274);
      uint64_t v140 = v294;
      double v141 = sub_1000A9064(v132, v122, 0, (uint64_t)v343);
      if (v140)
      {
        (*(void (**)(unint64_t, uint64_t, double))(v292 + 8))(v123, v291, v141);
        swift_bridgeObjectRelease();
        sub_10000BF70(v132, v122);
        sub_1000A98F8(&v309, (uint64_t *)&v328, (uint64_t)&v322, (uint64_t)&v316, (uint64_t)&v310);
        v137((uint64_t)v299, v139);
        v137((uint64_t)v301, v139);
LABEL_46:
        sub_10005F4F8((uint64_t)v289, (uint64_t *)&unk_1001DF8D0);
        sub_10005F4F8((uint64_t)v383, (uint64_t *)&unk_1001DF8D0);
        uint64_t v120 = (uint64_t)v304;
        goto LABEL_47;
      }
      uint64_t v293 = v343[0];
      uint64_t v294 = 0;
      uint64_t v290 = v343[1];
      uint64_t v305 = (uint64_t *)v343[3];
      uint64_t v303 = v344;
      uint64_t v300 = v345;
      uint64_t v127 = v346;
      uint64_t v128 = v347;
      uint64_t v283 = v348;
      uint64_t v282 = v349;
      uint64_t v130 = v350;
      uint64_t v131 = v351;
      unint64_t v142 = v123;
      uint64_t v126 = v343[2];
      (*(void (**)(unint64_t, uint64_t, double))(v292 + 8))(v142, v291, v141);
      swift_bridgeObjectRelease();
      uint64_t v143 = v132;
      uint64_t v125 = v290;
      unint64_t v144 = v122;
      uint64_t v124 = v293;
      sub_10000BF70(v143, v144);
      uint64_t v129 = v283 | (v282 << 8);
    }
    sub_1000AAA3C(v322, *((uint64_t *)&v322 + 1), v323, *((uint64_t *)&v323 + 1), v324, *((uint64_t *)&v324 + 1), v325, *((uint64_t *)&v325 + 1), v326, *((uint64_t *)&v326 + 1), v327);
    *(void *)&long long v322 = v124;
    *((void *)&v322 + 1) = v125;
    *(void *)&long long v323 = v126;
    *((void *)&v323 + 1) = v305;
    *(void *)&long long v324 = v303;
    *((void *)&v324 + 1) = v300;
    *(void *)&long long v325 = v127;
    *((void *)&v325 + 1) = v128;
    *(void *)&long long v326 = v129;
    *((void *)&v326 + 1) = v130;
    unint64_t v145 = v287;
    uint64_t v327 = v131;
    if (v287 >> 60 == 15)
    {
      uint64_t v305 = 0;
      uint64_t v303 = 0;
      uint64_t v300 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      uint64_t v148 = 0;
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      goto LABEL_37;
    }
    uint64_t v154 = self;
    uint64_t v155 = v281;
    sub_1000065D0(v281, v145);
    id v156 = [v154 defaultManager];
    id v157 = [v156 temporaryDirectory];

    uint64_t v158 = v279;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v159 = v278;
    UUID.init()();
    UUID.uuidString.getter();
    uint64_t v160 = *(void (**)(uint64_t, uint64_t))(v306 + 8);
    uint64_t v161 = v159;
    uint64_t v162 = v274;
    v160(v161, v274);
    uint64_t v163 = v294;
    double v164 = sub_1000A9064(v155, v145, 3, (uint64_t)v352);
    uint64_t v294 = v163;
    if (!v163)
    {
      uint64_t v305 = (uint64_t *)v352[0];
      uint64_t v303 = v352[1];
      uint64_t v300 = v352[2];
      uint64_t v146 = v352[3];
      uint64_t v165 = v158;
      uint64_t v147 = v353;
      uint64_t v148 = v354;
      uint64_t v149 = v355;
      uint64_t v150 = v356;
      uint64_t v293 = v357;
      uint64_t v290 = v358;
      uint64_t v152 = v359;
      uint64_t v153 = v360;
      (*(void (**)(uint64_t, uint64_t, double))(v292 + 8))(v165, v291, v164);
      swift_bridgeObjectRelease();
      sub_10000BF70(v281, v287);
      uint64_t v151 = v293 | (v290 << 8);
LABEL_37:
      sub_1000AAA3C(v316, *((uint64_t *)&v316 + 1), v317, *((uint64_t *)&v317 + 1), v318, *((uint64_t *)&v318 + 1), v319, *((uint64_t *)&v319 + 1), v320, *((uint64_t *)&v320 + 1), v321);
      *(void *)&long long v316 = v305;
      *((void *)&v316 + 1) = v303;
      *(void *)&long long v317 = v300;
      *((void *)&v317 + 1) = v146;
      *(void *)&long long v318 = v147;
      *((void *)&v318 + 1) = v148;
      *(void *)&long long v319 = v149;
      *((void *)&v319 + 1) = v150;
      *(void *)&long long v320 = v151;
      *((void *)&v320 + 1) = v152;
      uint64_t v321 = v153;
      sub_100029CEC((uint64_t)v370, (uint64_t)v376, &qword_1001DCF80);
      if (!v376[1] || (unint64_t v166 = v377, v377 >> 60 == 15))
      {
        uint64_t v305 = 0;
        uint64_t v303 = 0;
        uint64_t v300 = 0;
        uint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        uint64_t v170 = 0;
        uint64_t v171 = 0;
        uint64_t v172 = 0;
        uint64_t v173 = 0;
        uint64_t v174 = 0;
LABEL_40:
        sub_1000AAA3C(v310, *((uint64_t *)&v310 + 1), v311, *((uint64_t *)&v311 + 1), v312, *((uint64_t *)&v312 + 1), v313, *((uint64_t *)&v313 + 1), v314, *((uint64_t *)&v314 + 1), v315);
        *(void *)&long long v310 = v305;
        *((void *)&v310 + 1) = v303;
        *(void *)&long long v311 = v300;
        *((void *)&v311 + 1) = v167;
        *(void *)&long long v312 = v168;
        *((void *)&v312 + 1) = v169;
        *(void *)&long long v313 = v170;
        *((void *)&v313 + 1) = v171;
        *(void *)&long long v314 = v172;
        *((void *)&v314 + 1) = v173;
        uint64_t v315 = v174;
        char v309 = 0;
        unint64_t v175 = Logger.logObject.getter();
        os_log_type_t v176 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v175, v176))
        {
          uint64_t v177 = swift_slowAlloc();
          v308[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v177 = 136446978;
          swift_beginAccess();
          unint64_t v178 = v327;
          if (v327)
          {
            uint64_t v179 = *((void *)&v326 + 1);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v179 = 0;
            unint64_t v178 = 0xE000000000000000;
          }
          uint64_t v307 = sub_100005EB8(v179, v178, v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v177 + 12) = 2082;
          swift_beginAccess();
          unint64_t v195 = v333;
          if (v333)
          {
            uint64_t v196 = *((void *)&v332 + 1);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v196 = 0;
            unint64_t v195 = 0xE000000000000000;
          }
          uint64_t v307 = sub_100005EB8(v196, v195, v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v177 + 22) = 2082;
          swift_beginAccess();
          unint64_t v197 = v321;
          if (v321)
          {
            uint64_t v198 = *((void *)&v320 + 1);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v198 = 0;
            unint64_t v197 = 0xE000000000000000;
          }
          uint64_t v180 = v274;
          uint64_t v307 = sub_100005EB8(v198, v197, v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v177 + 32) = 2082;
          swift_beginAccess();
          unint64_t v199 = v315;
          if (v315)
          {
            uint64_t v200 = *((void *)&v314 + 1);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v200 = 0;
            unint64_t v199 = 0xE000000000000000;
          }
          uint64_t v307 = sub_100005EB8(v200, v199, v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v175, v176, "LoadAndInstall: %{public}s, GlobalConfig: %{public}s, PartnerConfig: %{public}s, PartnerSAFConfig: %{public}s,", (uint8_t *)v177, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v180 = v274;
        }
        uint64_t v201 = v301;
        uint64_t v202 = v306;
        swift_beginAccess();
        uint64_t v203 = *((void *)&v322 + 1);
        uint64_t v249 = v322;
        uint64_t v293 = *((void *)&v323 + 1);
        uint64_t v204 = v323;
        uint64_t v305 = (uint64_t *)v324;
        uint64_t v302 = v325;
        uint64_t v303 = *((void *)&v324 + 1);
        uint64_t v300 = *((void *)&v325 + 1);
        uint64_t v281 = v326;
        uint64_t v267 = v327;
        uint64_t v268 = *((void *)&v326 + 1);
        swift_beginAccess();
        uint64_t v279 = v328;
        uint64_t v291 = v329;
        uint64_t v292 = *((void *)&v328 + 1);
        uint64_t v290 = *((void *)&v329 + 1);
        unint64_t v287 = *((void *)&v330 + 1);
        unint64_t v288 = v330;
        uint64_t v282 = *((void *)&v331 + 1);
        uint64_t v283 = v331;
        uint64_t v265 = v332;
        uint64_t v256 = v333;
        uint64_t v257 = *((void *)&v332 + 1);
        swift_beginAccess();
        uint64_t v266 = v316;
        uint64_t v277 = v317;
        uint64_t v278 = *((void *)&v316 + 1);
        uint64_t v275 = (char *)v318;
        unint64_t v276 = *((void *)&v317 + 1);
        uint64_t v270 = v319;
        uint64_t v271 = *((void *)&v318 + 1);
        uint64_t v269 = *((void *)&v319 + 1);
        uint64_t v254 = *((void *)&v320 + 1);
        uint64_t v255 = v320;
        uint64_t v253 = v321;
        swift_beginAccess();
        uint64_t v205 = v310;
        uint64_t v263 = v311;
        uint64_t v264 = *((void *)&v310 + 1);
        uint64_t v261 = v312;
        uint64_t v262 = *((void *)&v311 + 1);
        uint64_t v259 = v313;
        uint64_t v260 = *((void *)&v312 + 1);
        uint64_t v258 = *((void *)&v313 + 1);
        uint64_t v251 = *((void *)&v314 + 1);
        uint64_t v252 = v314;
        uint64_t v250 = v315;
        uint64_t v206 = *(void (**)(char *, char *, uint64_t))(v202 + 16);
        v206(v285, v299, v180);
        v206(v286, v201, v180);
        sub_100006724((uint64_t)v289, v284, (uint64_t *)&unk_1001DF8D0);
        sub_100029CEC((uint64_t)v370, (uint64_t)v371, &qword_1001DCF80);
        if (v371[1])
        {
          uint64_t v247 = v372;
          uint64_t v248 = v373;
          uint64_t v245 = v375;
          uint64_t v246 = v374;
          sub_1000A79E0(v372);
        }
        else
        {
          uint64_t v245 = 0;
          uint64_t v246 = 0;
          uint64_t v247 = 1;
          uint64_t v248 = 0;
        }
        uint64_t v207 = (void (*)(char *, char *, uint64_t))v272;
        uint64_t v208 = v280;
        uint64_t v209 = v249;
        uint64_t *v280 = v249;
        v208[1] = v203;
        uint64_t v243 = v204;
        uint64_t v210 = v293;
        v208[2] = v204;
        v208[3] = v210;
        uint64_t v211 = v303;
        v208[4] = (uint64_t)v305;
        v208[5] = v211;
        uint64_t v212 = v300;
        v208[6] = v302;
        v208[7] = v212;
        uint64_t v213 = v268;
        v208[8] = v281;
        v208[9] = v213;
        uint64_t v214 = v279;
        v208[10] = v267;
        v208[11] = v214;
        uint64_t v215 = v291;
        v208[12] = v292;
        v208[13] = v215;
        unint64_t v216 = v288;
        v208[14] = v290;
        v208[15] = v216;
        uint64_t v217 = v283;
        v208[16] = v287;
        v208[17] = v217;
        uint64_t v218 = v265;
        v208[18] = v282;
        v208[19] = v218;
        uint64_t v219 = v256;
        v208[20] = v257;
        v208[21] = v219;
        uint64_t v220 = v278;
        v208[22] = v266;
        v208[23] = v220;
        unint64_t v221 = v276;
        v208[24] = v277;
        v208[25] = v221;
        uint64_t v222 = v271;
        v208[26] = (uint64_t)v275;
        v208[27] = v222;
        uint64_t v223 = v269;
        v208[28] = v270;
        v208[29] = v223;
        uint64_t v224 = v254;
        v208[30] = v255;
        v208[31] = v224;
        v208[32] = v253;
        v208[33] = v205;
        uint64_t v244 = v205;
        uint64_t v225 = v263;
        v208[34] = v264;
        v208[35] = v225;
        uint64_t v226 = v261;
        v208[36] = v262;
        v208[37] = v226;
        uint64_t v227 = v259;
        v208[38] = v260;
        v208[39] = v227;
        uint64_t v228 = v252;
        v208[40] = v258;
        v208[41] = v228;
        uint64_t v229 = v250;
        v208[42] = v251;
        v208[43] = v229;
        uint64_t v230 = (int *)_s14InstallPackageVMa(0);
        v207((char *)v208 + v230[8], v285, v180);
        v207((char *)v208 + v230[9], v286, v180);
        sub_100029CEC(v284, (uint64_t)v208 + v230[10], (uint64_t *)&unk_1001DF8D0);
        uint64_t v231 = (uint64_t *)((char *)v208 + v230[11]);
        uint64_t v232 = v209;
        uint64_t v233 = v297;
        uint64_t v234 = v298;
        void *v231 = v298;
        v231[1] = v233;
        uint64_t v235 = v295;
        v231[2] = v296;
        v231[3] = v235;
        uint64_t v236 = (uint64_t *)((char *)v208 + v230[12]);
        uint64_t v237 = v248;
        *uint64_t v236 = v247;
        v236[1] = v237;
        uint64_t v238 = v245;
        v236[2] = v246;
        v236[3] = v238;
        sub_1000AA760(v232, v203, v243, v293, v305, v303, v302, v300, v281, v268, v267);
        sub_1000AA760(v279, v292, v291, v290, v288, v287, v283, v282, v265, v257, v256);
        sub_1000AA760(v266, v278, v277, v276, v275, v271, v270, v269, v255, v254, v253);
        sub_1000AA760(v244, v264, v263, v262, v261, v260, v259, v258, v252, v251, v250);
        sub_1000A79E0(v234);
        sub_1000A98F8(&v309, (uint64_t *)&v328, (uint64_t)&v322, (uint64_t)&v316, (uint64_t)&v310);
        char v239 = *(void (**)(char *, uint64_t))(v306 + 8);
        uint64_t v240 = v274;
        v239(v299, v274);
        v239(v301, v240);
        sub_10005F4F8((uint64_t)v289, (uint64_t *)&unk_1001DF8D0);
        sub_10005F4F8((uint64_t)v383, (uint64_t *)&unk_1001DF8D0);
        uint64_t v120 = (uint64_t)v304;
        goto LABEL_47;
      }
      uint64_t v181 = v376[2];
      char v182 = self;
      sub_1000065D0(v181, v166);
      id v183 = [v182 defaultManager];
      id v184 = [v183 temporaryDirectory];

      uint64_t v185 = v275;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v186 = v277;
      UUID.init()();
      UUID.uuidString.getter();
      uint64_t v188 = v187;
      uint64_t v189 = *(void (**)(uint64_t, uint64_t))(v306 + 8);
      uint64_t v190 = v186;
      uint64_t v191 = v274;
      v189(v190, v274);
      uint64_t v293 = v188;
      uint64_t v192 = v294;
      double v193 = sub_1000A9064(v181, v166, 4, (uint64_t)v361);
      unint64_t v194 = v301;
      if (!v192)
      {
        uint64_t v294 = 0;
        uint64_t v305 = (uint64_t *)v361[0];
        uint64_t v303 = v361[1];
        uint64_t v300 = v361[2];
        id v241 = v185;
        uint64_t v167 = v361[3];
        uint64_t v290 = v181;
        uint64_t v168 = v362;
        uint64_t v169 = v363;
        uint64_t v170 = v364;
        uint64_t v171 = v365;
        unint64_t v288 = v366;
        unint64_t v287 = v367;
        uint64_t v173 = v368;
        uint64_t v174 = v369;
        (*(void (**)(char *, uint64_t, double))(v292 + 8))(v241, v291, v193);
        swift_bridgeObjectRelease();
        sub_10000BF70(v290, v166);
        uint64_t v172 = v288 | (v287 << 8);
        goto LABEL_40;
      }
      (*(void (**)(char *, uint64_t, double))(v292 + 8))(v185, v291, v193);
      swift_bridgeObjectRelease();
      sub_10000BF70(v181, v166);
      sub_1000A98F8(&v309, (uint64_t *)&v328, (uint64_t)&v322, (uint64_t)&v316, (uint64_t)&v310);
      v189((uint64_t)v299, v191);
      v189((uint64_t)v194, v191);
      goto LABEL_46;
    }
    (*(void (**)(uint64_t, uint64_t, double))(v292 + 8))(v158, v291, v164);
    swift_bridgeObjectRelease();
    sub_10000BF70(v155, v145);
    sub_1000A98F8(&v309, (uint64_t *)&v328, (uint64_t)&v322, (uint64_t)&v316, (uint64_t)&v310);
    v160((uint64_t)v299, v162);
    v160((uint64_t)v301, v162);
    sub_10005F4F8((uint64_t)v289, (uint64_t *)&unk_1001DF8D0);
    sub_10005F4F8((uint64_t)v383, (uint64_t *)&unk_1001DF8D0);
    uint64_t v120 = (uint64_t)v304;
LABEL_47:
    sub_10005F4F8(v120, (uint64_t *)&unk_1001DF8D0);
    sub_1000AAA3C(v310, *((uint64_t *)&v310 + 1), v311, *((uint64_t *)&v311 + 1), v312, *((uint64_t *)&v312 + 1), v313, *((uint64_t *)&v313 + 1), v314, *((uint64_t *)&v314 + 1), v315);
    sub_1000AAA3C(v316, *((uint64_t *)&v316 + 1), v317, *((uint64_t *)&v317 + 1), v318, *((uint64_t *)&v318 + 1), v319, *((uint64_t *)&v319 + 1), v320, *((uint64_t *)&v320 + 1), v321);
    sub_1000AAA3C(v322, *((uint64_t *)&v322 + 1), v323, *((uint64_t *)&v323 + 1), v324, *((uint64_t *)&v324 + 1), v325, *((uint64_t *)&v325 + 1), v326, *((uint64_t *)&v326 + 1), v327);
    return sub_1000AAA3C(v328, *((uint64_t *)&v328 + 1), v329, *((uint64_t *)&v329 + 1), v330, *((uint64_t *)&v330 + 1), v331, *((uint64_t *)&v331 + 1), v332, *((uint64_t *)&v332 + 1), v333);
  }
  sub_10005F4F8(v72, (uint64_t *)&unk_1001DF8D0);
  uint64_t v75 = (uint64_t)v304;
  uint64_t v76 = (uint64_t)v383;
LABEL_16:
  os_signpost_id_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v88 = 0;
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "malformed response from backend", v88, 2u);
    swift_slowDealloc();
  }

  sub_10002A974(2027, 0, 0, 0);
  swift_willThrow();
  sub_10005F4F8((uint64_t)v54, (uint64_t *)&unk_1001DF8D0);
  sub_10005F4F8(v76, (uint64_t *)&unk_1001DF8D0);
  return sub_10005F4F8(v75, (uint64_t *)&unk_1001DF8D0);
}

void sub_10009DA4C(uint64_t a1, int a2, uint64_t a3)
{
  int v66 = a2;
  uint64_t v5 = v3 + 29;
  uint64_t v64 = *v3;
  uint64_t v65 = a3;
  uint64_t v70 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v70 - 8);
  uint64_t v8 = __chkstk_darwin(v70, v7);
  uint64_t v62 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v67 = (char *)v57 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v60 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v71 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  sub_100009300((uint64_t)v5, (uint64_t)v75);
  uint64_t v15 = v76;
  uint64_t v16 = v77;
  uint64_t v17 = (uint8_t *)sub_100006788(v75, v76);
  v57[1] = sub_100003EB0(&qword_1001D9B20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10018A620;
  strcpy((char *)(inited + 32), "appletVersion");
  *(_WORD *)(inited + 46) = -4864;
  uint64_t v19 = *(void *)(a1 + 80);
  uint64_t v58 = v5;
  uint64_t v68 = v6;
  unint64_t v61 = v17;
  if (v19)
  {
    uint64_t v20 = *(void *)(a1 + 72);
    uint64_t v21 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v21 = 0xE300000000000000;
    uint64_t v20 = 7104878;
  }
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = &protocol witness table for String;
  *(void *)(inited + 48) = v20;
  *(void *)(inited + 56) = v21;
  strcpy((char *)(inited + 88), "globalConfig");
  *(unsigned char *)(inited + 101) = 0;
  *(_WORD *)(inited + 102) = -5120;
  _s14InstallPackageVMa(0);
  uint64_t v22 = UUID.uuidString.getter();
  *(void *)(inited + 128) = &type metadata for String;
  *(void *)(inited + 136) = &protocol witness table for String;
  *(void *)(inited + 104) = v22;
  *(void *)(inited + 112) = v23;
  strcpy((char *)(inited + 144), "partnerConfig");
  *(_WORD *)(inited + 158) = -4864;
  uint64_t v63 = a1;
  uint64_t v24 = UUID.uuidString.getter();
  *(void *)(inited + 184) = &type metadata for String;
  *(void *)(inited + 192) = &protocol witness table for String;
  *(void *)(inited + 160) = v24;
  *(void *)(inited + 168) = v25;
  *(void *)(inited + 200) = 1684632949;
  *(void *)(inited + 208) = 0xE400000000000000;
  uint64_t v26 = UUID.uuidString.getter();
  *(void *)(inited + 240) = &type metadata for String;
  *(void *)(inited + 248) = &protocol witness table for String;
  *(void *)(inited + 216) = v26;
  *(void *)(inited + 224) = v27;
  unint64_t v28 = sub_100104AF4(inited);
  sub_100136224(29, v28, v15, v16);
  swift_bridgeObjectRelease();
  sub_100006520((uint64_t)v75);
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100003E78(v29, (uint64_t)qword_1001DCE10);
  uint64_t v30 = v72;
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    unint64_t v61 = v33;
    *(_DWORD *)uint64_t v33 = 136315138;
    v57[0] = v33 + 4;
    swift_beginAccess();
    swift_retain();
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = sub_1000CC188(v34);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    id v73 = 0;
    unint64_t v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    id v73 = (id)0xD000000000000011;
    unint64_t v74 = 0x8000000100197B30;
    v38._uint64_t countAndFlagsBits = v35;
    uint64_t v39 = v71;
    v38._unint64_t object = v37;
    String.append(_:)(v38);
    swift_release();
    swift_bridgeObjectRelease();
    id v73 = (id)sub_100005EB8((uint64_t)v73, v74, &v78);
    uint64_t v30 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "PayAppletProfileCache: %s", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v42 = (uint64_t)v67;
  }
  else
  {

    uint64_t v40 = swift_release_n();
    uint64_t v42 = (uint64_t)v67;
    uint64_t v39 = v71;
  }
  id v73 = 0;
  __chkstk_darwin(v40, v41);
  uint64_t v43 = v62;
  v57[-8] = v63;
  v57[-7] = v30;
  v57[-6] = v65;
  v57[-5] = v39;
  LOBYTE(v57[-4]) = v66 & 1;
  v57[-3] = &v73;
  v57[-2] = v64;
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v44 = v39;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v68 + 8);
  uint64_t v46 = v43;
  uint64_t v47 = v70;
  v45(v46, v70);
  uint64_t v48 = v69;
  char v49 = sub_10004C680(v42, (void (*)(id))sub_1000AA88C, (uint64_t)&v57[-10]);
  if (v48)
  {
    v45((char *)v42, v47);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v60);
LABEL_15:

    return;
  }
  v45((char *)v42, v47);
  if ((v49 & 1) == 0)
  {
    sub_10002A974(2026, 0, 0, 0);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v44, v60);
    goto LABEL_15;
  }
  uint64_t v50 = *(void *)(v30 + 256);
  uint64_t v51 = *(void *)(v30 + 264);
  sub_100006788(v58, v50);
  uint64_t v52 = swift_initStackObject();
  *(_OWORD *)(v52 + 16) = xmmword_100186100;
  *(void *)(v52 + 32) = 1684632949;
  *(void *)(v52 + 40) = 0xE400000000000000;
  uint64_t v53 = UUID.uuidString.getter();
  *(void *)(v52 + 72) = &type metadata for String;
  *(void *)(v52 + 80) = &protocol witness table for String;
  *(void *)(v52 + 48) = v53;
  *(void *)(v52 + 56) = v54;
  unint64_t v55 = sub_100104AF4(v52);
  sub_100136224(30, v55, v50, v51);
  swift_bridgeObjectRelease();
  if (v73)
  {
    uint64_t v56 = *(void (**)(char *, uint64_t))(v59 + 8);
    v73;
    v56(v44, v60);
  }
  else
  {
    __break(1u);
  }
}

Swift::Int sub_10009E1B0(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_log_type_t v87 = a2;
  uint64_t v88 = a7;
  uint64_t v82 = a4;
  uint64_t v83 = a6;
  uint64_t v86 = a5;
  uint64_t v89 = a1;
  sub_100029CEC(a1, (uint64_t)v94, &qword_1001DAF18);
  sub_100029CEC((uint64_t)v94, (uint64_t)v117, &qword_1001DAF18);
  uint64_t v7 = type metadata accessor for OSSignpostError();
  uint64_t v85 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v81 - v18;
  if (qword_1001D9170 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for OSSignposter();
  sub_100003E78(v20, (uint64_t)qword_1001DCE28);
  uint64_t v21 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v84 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v22 = v85;
    if ((*(unsigned int (**)(char *, uint64_t))(v85 + 88))(v10, v7) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v23 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v7);
      uint64_t v23 = "end check for remote updates";
    }
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v19, v11);
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v84, v25, "config-status-checkForRemoteUpdates", v23, v24, 2u);
    swift_slowDealloc();

    uint64_t v26 = *(void (**)(char *, uint64_t))(v12 + 8);
    v26(v19, v11);
    v26(v16, v11);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  }
  uint64_t v27 = v89;
  sub_100029CEC(v89, (uint64_t)v95, &qword_1001DAF18);
  if (sub_1000A7D7C((uint64_t)v95) == 1)
  {
    uint64_t v28 = (uint64_t)v87;
    if (v87)
    {
      swift_errorRetain();
      if (qword_1001D9168 != -1) {
        swift_once();
      }
      uint64_t v29 = (uint64_t *)(v83 + 16);
      uint64_t v30 = type metadata accessor for Logger();
      sub_100003E78(v30, (uint64_t)qword_1001DCE10);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v96 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315138;
        v93[0] = v28;
        swift_errorRetain();
        sub_100003EB0((uint64_t *)&unk_1001DD380);
        uint64_t v34 = String.init<A>(describing:)();
        v93[0] = sub_100005EB8(v34, v35, (uint64_t *)&v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v28 = (uint64_t)v87;
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "OTA client error: %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      swift_beginAccess();
      *uint64_t v29 = v28;
      swift_errorRelease();
    }
    return OS_dispatch_semaphore.signal()();
  }
  long long v104 = v95[8];
  long long v105 = v95[9];
  long long v106 = v95[10];
  long long v100 = v95[4];
  long long v101 = v95[5];
  long long v102 = v95[6];
  long long v103 = v95[7];
  long long v96 = v95[0];
  long long v97 = v95[1];
  long long v98 = v95[2];
  long long v99 = v95[3];
  sub_100029CEC((uint64_t)&v96, (uint64_t)v107, &qword_1001DCF40);
  sub_100029CEC((uint64_t)v107, (uint64_t)v116, &qword_1001DCF40);
  uint64_t v36 = &qword_1001D9000;
  if (v116[1] >> 60 == 15)
  {
    sub_100029CEC((uint64_t)v117, (uint64_t)v93, &qword_1001DAF18);
    sub_1000A78EC(v93);
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100003E78(v37, (uint64_t)qword_1001DCE10);
    Swift::String v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No applet update available", v40, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    sub_100029CEC((uint64_t)v117, (uint64_t)v93, &qword_1001DAF18);
    sub_1000A78EC(v93);
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v41 = (unsigned char *)(v82 + 16);
    uint64_t v42 = type metadata accessor for Logger();
    sub_100003E78(v42, (uint64_t)qword_1001DCE10);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "applet update available", v45, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    *uint64_t v41 = 1;
  }
  uint64_t v46 = (unsigned char *)(v86 + 16);
  long long v108 = v97;
  long long v109 = v98;
  sub_100029CEC((uint64_t)&v109, (uint64_t)v110, &qword_1001DCF40);
  sub_100029CEC((uint64_t)v110, (uint64_t)v115, &qword_1001DCF40);
  if (v115[1] >> 60 == 15)
  {
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_100003E78(v47, (uint64_t)qword_1001DCE10);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No globalKernelConfig update available", v50, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100003E78(v51, (uint64_t)qword_1001DCE10);
    sub_100029CEC((uint64_t)v117, (uint64_t)v93, &qword_1001DAF18);
    sub_1000A78EC(v93);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      os_log_type_t v87 = v46;
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v111 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315138;
      unint64_t v56 = *((void *)&v108 + 1);
      uint64_t v55 = v108;
      swift_bridgeObjectRetain();
      uint64_t v57 = v55;
      uint64_t v27 = v89;
      v92[0] = sub_100005EB8(v57, v56, (uint64_t *)&v111);
      uint64_t v46 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A7D94(v27);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "globalKernelConfig id: %s", v54, 0xCu);
      swift_arrayDestroy();
      uint64_t v36 = &qword_1001D9000;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000A7D94(v27);
    }

    swift_beginAccess();
    *uint64_t v46 = 1;
  }
  long long v111 = v99;
  long long v112 = v100;
  sub_100029CEC((uint64_t)&v112, (uint64_t)v113, &qword_1001DCF40);
  sub_100029CEC((uint64_t)v113, (uint64_t)v114, &qword_1001DCF40);
  if (v114[1] >> 60 == 15)
  {
    if (v36[45] != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_100003E78(v58, (uint64_t)qword_1001DCE10);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "No onlinePartnerProfile update available", v61, 2u);
      swift_slowDealloc();
    }

    unint64_t v62 = *((void *)&v103 + 1);
    if (!*((void *)&v103 + 1)) {
      goto LABEL_58;
    }
  }
  else
  {
    if (v36[45] != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_100003E78(v63, (uint64_t)qword_1001DCE10);
    sub_100029CEC((uint64_t)v117, (uint64_t)v93, &qword_1001DAF18);
    sub_1000A78EC(v93);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      int v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      os_log_type_t v87 = v46;
      v92[0] = v67;
      *(_DWORD *)int v66 = 136315138;
      unint64_t v69 = *((void *)&v111 + 1);
      uint64_t v68 = v111;
      swift_bridgeObjectRetain();
      uint64_t v70 = v68;
      uint64_t v27 = v89;
      uint64_t v90 = sub_100005EB8(v70, v69, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A7D94(v27);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "onlinePartnerProfile id: %s", v66, 0xCu);
      swift_arrayDestroy();
      uint64_t v46 = v87;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000A7D94(v27);
    }

    swift_beginAccess();
    *uint64_t v46 = 1;
    unint64_t v62 = *((void *)&v103 + 1);
    if (!*((void *)&v103 + 1)) {
      goto LABEL_58;
    }
  }
  if (*((void *)&v104 + 1) >> 60 == 15)
  {
LABEL_58:
    if (v36[45] != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    sub_100003E78(v76, (uint64_t)qword_1001DCE10);
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "No safPartnerProfile update available", v79, 2u);
      swift_slowDealloc();

      sub_1000A7D94(v27);
    }
    else
    {
      sub_1000A7D94(v27);
    }
    return OS_dispatch_semaphore.signal()();
  }
  uint64_t v71 = v103;
  if (v36[45] != -1) {
    swift_once();
  }
  uint64_t v72 = type metadata accessor for Logger();
  sub_100003E78(v72, (uint64_t)qword_1001DCE10);
  sub_100029CEC((uint64_t)v117, (uint64_t)v93, &qword_1001DAF18);
  sub_1000A78EC(v93);
  id v73 = Logger.logObject.getter();
  os_log_type_t v74 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v73, v74))
  {
    uint64_t v75 = (uint8_t *)swift_slowAlloc();
    v92[0] = swift_slowAlloc();
    os_log_type_t v87 = v46;
    *(_DWORD *)uint64_t v75 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v91 = sub_100005EB8(v71, v62, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A7D94(v27);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "safPartnerProfile id: %s", v75, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v46 = v87;
    sub_1000A7D94(v27);
  }
  else
  {
    sub_1000A7D94(v27);
    sub_1000A7D94(v27);
  }
  swift_beginAccess();
  *uint64_t v46 = 1;
  return OS_dispatch_semaphore.signal()();
}

void sub_10009F0E4(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void **a7)
{
  v578 = a7;
  LODWORD(v626) = a6;
  uint64_t v627 = a5;
  uint64_t v624 = a4;
  v641 = (uint64_t *)a2;
  uint64_t v632 = type metadata accessor for UUID();
  uint64_t v625 = *(void *)(v632 - 8);
  __chkstk_darwin(v632, v10);
  uint64_t v12 = (char *)&v573 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v637 = type metadata accessor for Logger();
  v630 = *(char **)(v637 - 8);
  uint64_t v14 = __chkstk_darwin(v637, v13);
  v588 = (char *)&v573 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  v595 = (char *)&v573 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  v587 = (char *)&v573 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v591 = (char *)&v573 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  v590 = (char *)&v573 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  v629 = (char *)&v573 - v30;
  uint64_t v32 = __chkstk_darwin(v29, v31);
  v596 = (char *)&v573 - v33;
  __chkstk_darwin(v32, v34);
  v594 = (char *)&v573 - v35;
  uint64_t v36 = sub_100003EB0((uint64_t *)&unk_1001DF8D0);
  uint64_t v38 = __chkstk_darwin(v36 - 8, v37);
  uint64_t v575 = (uint64_t)&v573 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v38, v40);
  uint64_t v43 = (char *)&v573 - v42;
  uint64_t v45 = __chkstk_darwin(v41, v44);
  uint64_t v628 = (uint64_t)&v573 - v46;
  uint64_t v48 = __chkstk_darwin(v45, v47);
  uint64_t v589 = (uint64_t)&v573 - v49;
  __chkstk_darwin(v48, v50);
  v631 = (char **)((char *)&v573 - v51);
  unint64_t v639 = (int *)_s14InstallPackageVMa(0);
  uint64_t v53 = __chkstk_darwin(v639, v52);
  uint64_t v577 = (uint64_t)&v573 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __chkstk_darwin(v53, v55);
  uint64_t v586 = (uint64_t)&v573 - v57;
  uint64_t v59 = __chkstk_darwin(v56, v58);
  uint64_t v576 = (uint64_t)&v573 - v60;
  uint64_t v62 = __chkstk_darwin(v59, v61);
  uint64_t v638 = (uint64_t)&v573 - v63;
  uint64_t v65 = __chkstk_darwin(v62, v64);
  os_signpost_id_t v593 = (char *)&v573 - v66;
  uint64_t v68 = __chkstk_darwin(v65, v67);
  v592 = (char *)&v573 - v69;
  uint64_t v71 = __chkstk_darwin(v68, v70);
  v636 = (uint64_t (*)(uint64_t))((char *)&v573 - v72);
  uint64_t v74 = __chkstk_darwin(v71, v73);
  uint64_t v76 = (char *)&v573 - v75;
  __chkstk_darwin(v74, v77);
  uint64_t v79 = (char *)&v573 - v78;
  if (qword_1001D9340 != -1) {
    swift_once();
  }
  v635 = a1;
  NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001E1178);
  uint64_t v642 = (uint64_t)v7;
  if (!v7)
  {
LABEL_12:
    v633 = v7;
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    v573 = v12;
    uint64_t v640 = a3;
    uint64_t v86 = sub_100003E78(v637, (uint64_t)qword_1001DCE10);
    os_log_type_t v87 = v641;
    sub_1000AA8B4((uint64_t)v641, (uint64_t)v79);
    sub_1000AA8B4((uint64_t)v87, (uint64_t)v76);
    uint64_t v88 = (uint64_t)v636;
    sub_1000AA8B4((uint64_t)v87, (uint64_t)v636);
    uint64_t v634 = v86;
    uint64_t v89 = Logger.logObject.getter();
    int v90 = static os_log_type_t.default.getter();
    BOOL v91 = os_log_type_enabled(v89, (os_log_type_t)v90);
    v574 = v43;
    if (v91)
    {
      LODWORD(v622) = v90;
      uint64_t v623 = (uint64_t)v89;
      uint64_t v92 = swift_slowAlloc();
      *(void *)&long long v621 = swift_slowAlloc();
      *(void *)&long long v646 = v621;
      *(_DWORD *)uint64_t v92 = 136315906;
      if (v633) {
        uint64_t v93 = 544501614;
      }
      else {
        uint64_t v93 = 0;
      }
      if (v633) {
        unint64_t v94 = 0xE400000000000000;
      }
      else {
        unint64_t v94 = 0xE000000000000000;
      }
      uint64_t v645 = sub_100005EB8(v93, v94, (uint64_t *)&v646);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v92 + 12) = 2080;
      uint64_t v95 = v639;
      UUID.uuidString.getter();
      uint64_t v96 = v642;
      uint64_t v97 = sub_100117604();
      uint64_t v645 = sub_100005EB8(v97, v98, (uint64_t *)&v646);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A8220((uint64_t)v79);
      *(_WORD *)(v92 + 22) = 2080;
      UUID.uuidString.getter();
      uint64_t v99 = sub_100117604();
      uint64_t v645 = sub_100005EB8(v99, v100, (uint64_t *)&v646);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A8220((uint64_t)v76);
      *(_WORD *)(v92 + 32) = 2080;
      uint64_t v101 = (uint64_t)v636 + v95[10];
      uint64_t v102 = (uint64_t)v631;
      sub_100006724(v101, (uint64_t)v631, (uint64_t *)&unk_1001DF8D0);
      uint64_t v103 = v625;
      uint64_t v104 = v632;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v625 + 48))(v102, 1, v632) == 1)
      {
        uint64_t v642 = v96;
        uint64_t v105 = 4271950;
        sub_10005F4F8(v102, (uint64_t *)&unk_1001DF8D0);
        unint64_t v106 = 0xE300000000000000;
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v105 = sub_100117604();
        unint64_t v106 = v107;
        uint64_t v642 = v96;
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
      }
      uint64_t v645 = sub_100005EB8(v105, v106, (uint64_t *)&v646);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A8220((uint64_t)v636);
      os_log_t v108 = (os_log_t)v623;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v623, (os_log_type_t)v622, "previous applet %sinstalled. globalID: %s, profileID: %s, 2nd profile ID: %s", (uint8_t *)v92, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      os_log_type_t v87 = v641;
    }
    else
    {
      sub_1000A8220((uint64_t)v79);
      sub_1000A8220((uint64_t)v76);
      sub_1000A8220(v88);
    }
    uint64_t v109 = *v87;
    uint64_t v110 = v87[1];
    uint64_t v111 = v87[2];
    uint64_t v112 = v87[3];
    uint64_t v113 = v87[4];
    uint64_t v114 = v87[5];
    uint64_t v115 = v87[6];
    uint64_t v116 = v87[7];
    uint64_t v118 = v87[8];
    uint64_t v117 = v87[9];
    v649[0] = *v87;
    v649[1] = v110;
    v649[2] = v111;
    v649[3] = v112;
    v649[4] = v113;
    v649[5] = v114;
    v649[6] = v115;
    v649[7] = v116;
    v649[8] = v118;
    v649[9] = v117;
    uint64_t v119 = v87[10];
    uint64_t v120 = v87[11];
    uint64_t v121 = v87[12];
    uint64_t v122 = v87[13];
    uint64_t v123 = v87[14];
    uint64_t v124 = v87[15];
    uint64_t v125 = v87[16];
    uint64_t v126 = v87[17];
    uint64_t v127 = v87[18];
    uint64_t v128 = v87[19];
    uint64_t v129 = v87[20];
    uint64_t v130 = v87[21];
    uint64_t v131 = v87;
    v649[10] = v119;
    uint64_t v650 = v120;
    uint64_t v651 = v121;
    uint64_t v652 = v122;
    uint64_t v653 = v123;
    uint64_t v654 = v124;
    *(void *)&long long v655 = v125;
    *((void *)&v655 + 1) = v126;
    v631 = (void *)v127;
    uint64_t v656 = v127;
    *(void *)&long long v615 = v128;
    v657 = v128;
    uint64_t v612 = v129;
    uint64_t v658 = v129;
    uint64_t v607 = v130;
    uint64_t v659 = v130;
    uint64_t v132 = v87[22];
    os_log_type_t v133 = v131[23];
    uint64_t v134 = v131[24];
    uint64_t v135 = v131[25];
    uint64_t v136 = (void (*)(char *, uint64_t, uint64_t))v131[26];
    uint64_t v137 = v131[27];
    uint64_t v138 = v131[28];
    uint64_t v139 = (void (*)(char *, uint64_t, uint64_t))v131[29];
    uint64_t v660 = v132;
    uint64_t v623 = (uint64_t)v133;
    v661 = v133;
    *(void *)&long long v622 = v134;
    uint64_t v662 = v134;
    v620 = v136;
    *(void *)&long long v621 = v135;
    uint64_t v663 = v135;
    uint64_t v664 = v136;
    v618 = (_DWORD *)v138;
    v619 = (char *)v137;
    *(void *)&long long v665 = v137;
    *((void *)&v665 + 1) = v138;
    v666 = v139;
    uint64_t v140 = v131[30];
    uint64_t v604 = v131[31];
    uint64_t v605 = v140;
    uint64_t v667 = v140;
    uint64_t v668 = v604;
    uint64_t v141 = v131[33];
    uint64_t v601 = v131[32];
    uint64_t v669 = v601;
    v616 = (uint64_t *)v141;
    v617 = (void (**)(uint64_t, uint64_t))v139;
    uint64_t v670 = v141;
    uint64_t v142 = v131[35];
    uint64_t v606 = v131[34];
    uint64_t v671 = v606;
    uint64_t v608 = v142;
    uint64_t v672 = v142;
    uint64_t v143 = v131[37];
    uint64_t v609 = v131[36];
    uint64_t v610 = v143;
    uint64_t v673 = v609;
    uint64_t v674 = v143;
    uint64_t v144 = v131[39];
    uint64_t v611 = v131[38];
    *(void *)&long long v675 = v611;
    uint64_t v613 = v144;
    *((void *)&v675 + 1) = v144;
    uint64_t v145 = v131[41];
    uint64_t v614 = v131[40];
    uint64_t v676 = v614;
    uint64_t v677 = v145;
    uint64_t v147 = v131[42];
    uint64_t v146 = v131[43];
    uint64_t v602 = v147;
    uint64_t v603 = v145;
    uint64_t v678 = v147;
    uint64_t v600 = v146;
    uint64_t v679 = v146;
    v636 = (uint64_t (*)(uint64_t))v119;
    if (v119)
    {
      uint64_t v581 = v123;
      uint64_t v582 = v122;
      uint64_t v148 = v109;
      uint64_t v149 = v110;
      uint64_t v579 = v125;
      uint64_t v580 = v124;
      uint64_t v150 = v111;
      uint64_t v151 = v112;
      uint64_t v583 = v132;
      uint64_t v584 = v116;
      uint64_t v152 = v113;
      uint64_t v598 = v117;
      uint64_t v599 = v114;
      uint64_t v585 = v115;
      uint64_t v597 = v118;
      sub_1000AA760(v109, v110, v111, v112, v113, v114, v115, v116, v118, v117, v119);
      sub_1000AA760(v120, v121, v582, v581, v580, v579, v126, (uint64_t)v631, v615, v612, v607);
      sub_1000AA760(v583, v623, v622, v621, v620, (uint64_t)v619, (uint64_t)v618, (uint64_t)v617, v605, v604, v601);
      sub_1000AA760((uint64_t)v616, v606, v608, v609, v610, v611, v613, v614, v603, v602, v600);
      uint64_t v623 = (uint64_t)v148;
      uint64_t v153 = (uint64_t)v148;
      uint64_t v154 = v149;
      uint64_t v155 = v149;
      uint64_t v156 = v150;
      uint64_t v157 = v150;
      uint64_t v158 = v151;
      uint64_t v159 = v151;
      v631 = (void *)v152;
      uint64_t v160 = v585;
      uint64_t v161 = v584;
      sub_1000AA760(v153, v155, v157, v159, v152, v599, v585, v584, v597, v598, (uint64_t)v636);
      uint64_t v162 = sub_10015AD80(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v164 = v162[2];
      unint64_t v163 = v162[3];
      if (v164 >= v163 >> 1) {
        uint64_t v162 = sub_10015AD80((void *)(v163 > 1), v164 + 1, 1, v162);
      }
      __int16 v165 = v597;
      v162[2] = v164 + 1;
      unint64_t v166 = &v162[11 * v164];
      v166[4] = v623;
      v166[5] = v154;
      v166[6] = v156;
      v166[7] = v158;
      *((unsigned char *)v166 + 64) = (_BYTE)v631;
      v166[9] = v599;
      v166[10] = v160;
      v166[11] = v161;
      *((unsigned char *)v166 + 96) = v165 & 1;
      *((unsigned char *)v166 + 97) = HIBYTE(v165);
      v166[13] = v598;
      v166[14] = v636;
    }
    else
    {
      sub_1000AA760(v109, v110, v111, v112, v113, v114, v115, v116, v118, v117, 0);
      sub_1000AA760(v120, v121, v122, v123, v124, v125, v126, (uint64_t)v631, v615, v612, v607);
      sub_1000AA760(v132, v623, v622, v621, v620, (uint64_t)v619, (uint64_t)v618, (uint64_t)v617, v605, v604, v601);
      sub_1000AA760((uint64_t)v616, v606, v608, v609, v610, v611, v613, v614, v603, v602, v600);
      uint64_t v162 = _swiftEmptyArrayStorage;
    }
    uint64_t v167 = v659;
    if (v659)
    {
      uint64_t v168 = v650;
      uint64_t v169 = v651;
      uint64_t v170 = v652;
      uint64_t v171 = v653;
      long long v622 = v655;
      *(void *)&long long v621 = v656;
      uint64_t v623 = (uint64_t)v657;
      v631 = (void *)v658;
      char v172 = v654;
      sub_10005E40C(v650, v651, v652, v653, v654);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v162 = sub_10015AD80(0, v162[2] + 1, 1, v162);
      }
      uint64_t v173 = v162;
      unint64_t v174 = v162[2];
      unint64_t v175 = v173;
      unint64_t v176 = v173[3];
      if (v174 >= v176 >> 1) {
        unint64_t v175 = sub_10015AD80((void *)(v176 > 1), v174 + 1, 1, v175);
      }
      char v177 = v623;
      unint64_t v178 = (unint64_t)v623 >> 8;
      v175[2] = v174 + 1;
      uint64_t v179 = &v175[11 * v174];
      uint64_t v162 = v175;
      v179[4] = v168;
      v179[5] = v169;
      v179[6] = v170;
      v179[7] = v171;
      *((unsigned char *)v179 + 64) = v172;
      *(_OWORD *)(v179 + 9) = v622;
      v179[11] = v621;
      *((unsigned char *)v179 + 96) = v177 & 1;
      *((unsigned char *)v179 + 97) = v178;
      v179[13] = v631;
      v179[14] = v167;
    }
    uint64_t v623 = (uint64_t)v649;
    uint64_t v180 = v669;
    if (v669)
    {
      uint64_t v181 = v660;
      uint64_t v182 = (uint64_t)v661;
      uint64_t v183 = v662;
      uint64_t v184 = v663;
      long long v621 = v665;
      v620 = v666;
      *(void *)&long long v622 = v667;
      v631 = (void *)v668;
      char v185 = (char)v664;
      sub_10005E40C(v660, (uint64_t)v661, v662, v663, v664);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v162 = sub_10015AD80(0, v162[2] + 1, 1, v162);
      }
      unint64_t v187 = v162[2];
      unint64_t v186 = v162[3];
      uint64_t v188 = v162;
      if (v187 >= v186 >> 1) {
        uint64_t v188 = sub_10015AD80((void *)(v186 > 1), v187 + 1, 1, v162);
      }
      char v189 = v622;
      unint64_t v190 = (unint64_t)v622 >> 8;
      v188[2] = v187 + 1;
      uint64_t v162 = v188;
      uint64_t v191 = &v188[11 * v187];
      v191[4] = v181;
      v191[5] = v182;
      v191[6] = v183;
      v191[7] = v184;
      *((unsigned char *)v191 + 64) = v185;
      *(_OWORD *)(v191 + 9) = v621;
      v191[11] = v620;
      *((unsigned char *)v191 + 96) = v189 & 1;
      *((unsigned char *)v191 + 97) = v190;
      v191[13] = v631;
      v191[14] = v180;
    }
    uint64_t v192 = v679;
    if (v679)
    {
      uint64_t v193 = v670;
      uint64_t v194 = v671;
      uint64_t v195 = v672;
      uint64_t v196 = v673;
      long long v621 = v675;
      v620 = (void (*)(char *, uint64_t, uint64_t))v676;
      *(void *)&long long v622 = v677;
      v631 = (void *)v678;
      char v197 = v674;
      sub_10005E40C(v670, v671, v672, v673, v674);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v162 = sub_10015AD80(0, v162[2] + 1, 1, v162);
      }
      unint64_t v199 = v162[2];
      unint64_t v198 = v162[3];
      uint64_t v200 = v162;
      if (v199 >= v198 >> 1) {
        uint64_t v200 = sub_10015AD80((void *)(v198 > 1), v199 + 1, 1, v162);
      }
      char v201 = v622;
      unint64_t v202 = (unint64_t)v622 >> 8;
      v200[2] = v199 + 1;
      uint64_t v162 = v200;
      uint64_t v203 = &v200[11 * v199];
      v203[4] = v193;
      v203[5] = v194;
      v203[6] = v195;
      v203[7] = v196;
      *((unsigned char *)v203 + 64) = v197;
      *(_OWORD *)(v203 + 9) = v621;
      v203[11] = v620;
      *((unsigned char *)v203 + 96) = v201 & 1;
      *((unsigned char *)v203 + 97) = v202;
      v203[13] = v631;
      v203[14] = v192;
    }
    uint64_t v204 = _swiftEmptyArrayStorage;
    uint64_t v205 = sub_100003EB0(&qword_1001DCF58);
    swift_arrayDestroy();
    uint64_t v206 = v640;
    uint64_t v207 = v635;
    v631 = v162;
    if (v636)
    {
      uint64_t v208 = Logger.logObject.getter();
      os_log_type_t v209 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v208, v209))
      {
        uint64_t v210 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v210 = 0;
        _os_log_impl((void *)&_mh_execute_header, v208, v209, "fresh install of kernel", v210, 2u);
        swift_slowDealloc();
      }

      if (!v633 && sub_1000969D0())
      {
        uint64_t v211 = Logger.logObject.getter();
        os_log_type_t v212 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v211, v212))
        {
          uint64_t v213 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v213 = 0;
          _os_log_impl((void *)&_mh_execute_header, v211, v212, "reset CAPK and CRL for the old kernel", v213, 2u);
          swift_slowDealloc();
        }
      }
      sub_10005EED8(v680);
      v616 = (uint64_t *)v680[0];
      v617 = (void (**)(uint64_t, uint64_t))v680[1];
      v618 = (_DWORD *)v680[2];
      v619 = (char *)v680[3];
      v620 = (void (*)(char *, uint64_t, uint64_t))v680[4];
      *(void *)&long long v621 = v680[6];
      *(void *)&long long v622 = v680[7];
      uint64_t v623 = v680[8];
      uint64_t v628 = v680[9];
      v629 = (char *)v680[5];
      uint64_t v638 = v680[10];
      uint64_t v214 = *(void *)(v206 + 104);
      if (qword_1001D91A0 != -1) {
        swift_once();
      }
      sub_100003E78(v637, (uint64_t)qword_1001DD508);
      uint64_t v215 = Logger.logObject.getter();
      os_log_type_t v216 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v215, v216))
      {
        uint64_t v217 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v217 = 0;
        _os_log_impl((void *)&_mh_execute_header, v215, v216, "_removeAll()", v217, 2u);
        uint64_t v206 = v640;
        swift_slowDealloc();
      }

      swift_beginAccess();
      *(void *)(v214 + 72) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      sub_1000C8184();
      uint64_t v218 = 0;
      while (1)
      {
        v633 = v218;
        if (v624)
        {
          uint64_t ObjectType = swift_getObjectType();
          char v411 = sub_100044960(3, ObjectType);
          uint64_t v318 = v412;
        }
        else
        {
          char v411 = 0;
          uint64_t v318 = 0;
        }
        int64_t v285 = v162[2];
        v636 = v411;
        if (v285)
        {
          uint64_t v413 = v318;
          *(void *)&long long v646 = v204;
          os_log_type_t v414 = v207;
          sub_10014BABC(0, v285, 0);
          uint64_t v204 = (void *)v646;
          unint64_t v415 = *(void *)(v646 + 16);
          uint64_t v416 = v162 + 9;
          do
          {
            uint64_t v418 = *v416;
            v416 += 11;
            uint64_t v417 = v418;
            *(void *)&long long v646 = v204;
            unint64_t v419 = v204[3];
            unint64_t v420 = v415 + 1;
            if (v415 >= v419 >> 1)
            {
              sub_10014BABC(v419 > 1, v415 + 1, 1);
              uint64_t v204 = (void *)v646;
            }
            v204[2] = v420;
            v204[v415++ + 4] = v417;
            --v285;
          }
          while (v285);
          uint64_t v206 = v640;
          uint64_t v207 = v635;
          uint64_t v318 = v413;
          char v411 = v636;
LABEL_161:
          uint64_t v422 = 0;
          long long v317 = 0;
          while (1)
          {
            uint64_t v423 = v204[v422 + 4];
            BOOL v341 = __OFADD__(v317, v423);
            long long v317 = ((char *)v317 + v423);
            if (v341) {
              break;
            }
            if (v420 == ++v422) {
              goto LABEL_164;
            }
          }
          __break(1u);
          goto LABEL_254;
        }
        unint64_t v420 = v204[2];
        uint64_t v421 = v207;
        if (v420) {
          goto LABEL_161;
        }
        long long v317 = 0;
LABEL_164:
        swift_bridgeObjectRelease();
        *((void *)&v647 + 1) = sub_1000AA918();
        uint64_t v648 = sub_1000AA958((unint64_t *)&qword_1001D8780, (void (*)(uint64_t))sub_1000AA918);
        *(void *)&long long v646 = v207;
        type metadata accessor for SLAMSwift();
        uint64_t v204 = (void *)swift_allocObject();
        v204[11] = sub_100106D3C((uint64_t)_swiftEmptyArrayStorage);
        sub_10001F1F0(&v646, (uint64_t)(v204 + 2));
        v204[7] = v411;
        v204[8] = v318;
        v204[9] = 0;
        v204[10] = v317;
        if (!v638) {
          break;
        }
        unint64_t v424 = v629;
        uint64_t v425 = &v629[(void)v317];
        if (!__OFADD__(v317, v629))
        {
          uint64_t v426 = (uint64_t)v411;
          char v427 = v623;
          unint64_t v428 = (unint64_t)v623 >> 8;
          v204[10] = v425;
          uint64_t v429 = v424;
          sub_100003EB0(&qword_1001DCF68);
          uint64_t v430 = swift_allocObject();
          unsigned __int8 v431 = v204;
          uint64_t v432 = v318;
          uint64_t v433 = v430;
          *(_OWORD *)(v430 + 16) = xmmword_100186100;
          *(void *)(v430 + 32) = v616;
          uint64_t v434 = (uint64_t)v618;
          *(void *)(v430 + 40) = v617;
          *(void *)(v430 + 48) = v434;
          *(void *)(v430 + 56) = v619;
          *(unsigned char *)(v430 + 64) = (_BYTE)v620;
          *(void *)(v430 + 72) = v429;
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v622;
          *(void *)(v430 + 80) = v621;
          *(void *)(v430 + 88) = v436;
          *(unsigned char *)(v430 + 96) = v427 & 1;
          *(unsigned char *)(v430 + 97) = v428;
          uint64_t v437 = v638;
          *(void *)(v430 + 104) = v628;
          *(void *)(v430 + 112) = v437;
          sub_1000448A0(v426);
          uint64_t v438 = v642;
          sub_1000A370C(v433, v435, v627, v626 & 1);
          uint64_t v642 = v438;
          if (v438)
          {
            sub_100057838(v426);
            swift_setDeallocating();
            swift_arrayDestroy();
            swift_deallocClassInstance();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            return;
          }
          v629 = (char *)v435;
          uint64_t v638 = v432;
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          id v442 = [(os_unfair_lock_s *)v635 stateInformation];
          if (v442)
          {
            unint64_t v443 = v442;
            uint64_t v444 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (*(void *)(v444 + 16))
            {
              sub_100006570(v444 + 32, (uint64_t)&v646);
            }
            else
            {
              long long v646 = 0u;
              long long v647 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v647 + 1))
            {
              sub_100003EB0(&qword_1001DABD8);
              int v464 = swift_dynamicCast();
              v465 = v590;
              if (v464)
              {
                uint64_t v466 = v681;
                goto LABEL_202;
              }
LABEL_201:
              uint64_t v466 = (void *)sub_100004D6C((uint64_t)_swiftEmptyArrayStorage);
LABEL_202:
              uint64_t v628 = sub_100084CD8((uint64_t)v466);
              uint64_t v623 = (uint64_t)v467;
              uint64_t v624 = v468;
              int v470 = v469;
              v471 = (void (**)(char *, uint64_t))v630;
              uint64_t v472 = v637;
              (*((void (**)(char *, uint64_t, uint64_t))v630 + 2))(v465, v634, v637);
              uint64_t v473 = Logger.logObject.getter();
              os_log_type_t v474 = static os_log_type_t.default.getter();
              BOOL v475 = os_log_type_enabled(v473, v474);
              LODWORD(v622) = v470;
              if (v475)
              {
                v476 = (uint8_t *)swift_slowAlloc();
                *(void *)&long long v646 = swift_slowAlloc();
                *(_DWORD *)v476 = 136315138;
                if (v470)
                {
                  uint64_t v478 = 7104878;
                  unint64_t v480 = 0xE300000000000000;
                  uint64_t v477 = v623;
                }
                else
                {
                  uint64_t v477 = v623;
                  uint64_t v478 = sub_100078600();
                  unint64_t v480 = v479;
                }
                v681 = (void *)sub_100005EB8(v478, v480, (uint64_t *)&v646);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v473, v474, "snapshot: %s", v476, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*((void (**)(char *, uint64_t))v630 + 1))(v590, v637);
              }
              else
              {

                v471[1](v465, v472);
                uint64_t v477 = v623;
              }
              uint64_t v445 = v627;
              char v446 = v626;
              uint64_t v318 = v638;
              char v411 = v636;
              uint64_t v204 = v629;
              if ((v622 & 1) != 0 || v628 < 310001 || v477 < 9721 || v624 <= 770) {
                goto LABEL_214;
              }
              goto LABEL_212;
            }
          }
          else
          {
            long long v646 = 0u;
            long long v647 = 0u;
          }
          sub_10005F4F8((uint64_t)&v646, &qword_1001DD3F0);
          v465 = v590;
          goto LABEL_201;
        }
        __break(1u);
LABEL_266:
        __break(1u);
        do
        {
          __break(1u);
LABEL_268:
          uint64_t v318 = (uint64_t)sub_10015AD80(0, *(void *)(v318 + 16) + 1, 1, (void *)v318);
LABEL_95:
          unint64_t v320 = *(void *)(v318 + 16);
          unint64_t v319 = *(void *)(v318 + 24);
          if (v320 >= v319 >> 1) {
            uint64_t v318 = (uint64_t)sub_10015AD80((void *)(v319 > 1), v320 + 1, 1, (void *)v318);
          }
          __int16 v322 = v610;
          uint64_t v321 = v611;
          uint64_t v323 = v622;
          *(void *)(v318 + 16) = v320 + 1;
          uint64_t v324 = v318 + 88 * v320;
          *(void *)(v324 + 32) = v321;
          *(void *)(v324 + 40) = v317;
          *(void *)(v324 + 48) = v206;
          *(void *)(v324 + 56) = v323;
          *(unsigned char *)(v324 + 64) = v623;
          *(void *)(v324 + 72) = v614;
          *(void *)(v324 + 80) = v613;
          *(void *)(v324 + 88) = v612;
          *(unsigned char *)(v324 + 96) = v322 & 1;
          *(unsigned char *)(v324 + 97) = HIBYTE(v322);
          *(void *)(v324 + 104) = v615;
          *(void *)(v324 + 112) = v609;
          uint64_t v325 = *(void *)(v285 + 200);
          if (v325)
          {
LABEL_100:
            long long v326 = *(void (***)(uint64_t, uint64_t))(v285 + 120);
            uint64_t v327 = *(void *)(v285 + 128);
            uint64_t v328 = *(void *)(v285 + 136);
            uint64_t v329 = *(void *)(v285 + 144);
            uint64_t v330 = *(void *)(v285 + 152);
            uint64_t v331 = *(void *)(v285 + 160);
            uint64_t v332 = *(void *)(v285 + 168);
            uint64_t v333 = *(void *)(v285 + 176);
            uint64_t v334 = *(void *)(v285 + 184);
            uint64_t v623 = *(void *)(v285 + 192);
            v616 = (uint64_t *)v327;
            v617 = v326;
            uint64_t v614 = v331;
            *(void *)&long long v615 = v328;
            *(void *)&long long v622 = v330;
            uint64_t v612 = v333;
            uint64_t v613 = v332;
            sub_1000AA760((uint64_t)v326, v327, v328, v329, v330, v331, v332, v333, v334, v623, v325);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v318 = (uint64_t)sub_10015AD80(0, *(void *)(v318 + 16) + 1, 1, (void *)v318);
            }
            unint64_t v336 = *(void *)(v318 + 16);
            unint64_t v335 = *(void *)(v318 + 24);
            if (v336 >= v335 >> 1) {
              uint64_t v318 = (uint64_t)sub_10015AD80((void *)(v335 > 1), v336 + 1, 1, (void *)v318);
            }
            *(void *)(v318 + 16) = v336 + 1;
            uint64_t v337 = v318 + 88 * v336;
            uint64_t v338 = (uint64_t)v616;
            *(void *)(v337 + 32) = v617;
            *(void *)(v337 + 40) = v338;
            *(void *)(v337 + 48) = v615;
            *(void *)(v337 + 56) = v329;
            *(unsigned char *)(v337 + 64) = v622;
            uint64_t v339 = v613;
            *(void *)(v337 + 72) = v614;
            *(void *)(v337 + 80) = v339;
            *(void *)(v337 + 88) = v612;
            *(unsigned char *)(v337 + 96) = v334 & 1;
            *(unsigned char *)(v337 + 97) = BYTE1(v334);
            *(void *)(v337 + 104) = v623;
            *(void *)(v337 + 112) = v325;
          }
LABEL_105:
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v340 = *(void *)(v318 + 16);
          swift_bridgeObjectRelease();
          BOOL v341 = __OFSUB__(v636, v340);
          long long v317 = ((char *)v636 - v340);
          uint64_t v206 = v640;
          v636 = (uint64_t (*)(uint64_t))v317;
        }
        while (v341);
        swift_beginAccess();
        uint64_t v343 = v681[2];
        if ((uint64_t)v317 < v343 && v343)
        {
          *(void *)&long long v622 = v625 + 48;
          v619 = v630 + 16;
          v617 = (void (**)(uint64_t, uint64_t))(v625 + 8);
          v618 = v630 + 8;
          v616 = &v644;
          *(void *)&long long v342 = 136315138;
          long long v615 = v342;
          uint64_t v614 = (uint64_t)&type metadata for Any + 8;
          while (1)
          {
            uint64_t v344 = swift_allocObject();
            int64_t v285 = *(void *)(v206 + 104);
            uint64_t v345 = sub_1000C94E0();
            uint64_t v347 = v346;
            sub_1000C8184();
            *(void *)(v344 + 16) = v345;
            *(void *)(v344 + 24) = v347;
            uint64_t v348 = (uint64_t)v641;
            swift_bridgeObjectRetain();
            UUID.uuidString.getter();
            uint64_t v349 = v642;
            uint64_t v350 = sub_100117604();
            uint64_t v642 = v349;
            if (v345 == v350 && v347 == v351) {
              break;
            }
            char v353 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v354 = v348;
            uint64_t v355 = v638;
            sub_1000AA8B4(v354, v638);
            if (v353) {
              goto LABEL_119;
            }
            swift_beginAccess();
            uint64_t v356 = *(void *)(v344 + 24);
            uint64_t v623 = *(void *)(v344 + 16);
            uint64_t v357 = v628;
            sub_100006724(v355 + v639[10], v628, (uint64_t *)&unk_1001DF8D0);
            uint64_t v358 = v632;
            int v359 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))v622)(v357, 1, v632);
            swift_bridgeObjectRetain();
            if (v359 == 1)
            {
              sub_10005F4F8(v357, (uint64_t *)&unk_1001DF8D0);
              sub_1000A8220(v355);
              swift_bridgeObjectRelease();
              goto LABEL_116;
            }
            UUID.uuidString.getter();
            uint64_t v365 = v642;
            uint64_t v366 = sub_100117604();
            uint64_t v367 = v357;
            uint64_t v368 = v366;
            uint64_t v370 = v369;
            uint64_t v642 = v365;
            (*v617)(v367, v358);
            if (v623 != v368 || v356 != v370)
            {
              char v391 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              sub_1000A8220(v355);
              swift_bridgeObjectRelease();
              if (v391) {
                goto LABEL_120;
              }
LABEL_116:
              uint64_t v360 = sub_1000A3534(*(void *)(v344 + 16), *(void *)(v344 + 24), v681);
              uint64_t v206 = (uint64_t)v629;
              if (v361)
              {
                long long v317 = Logger.logObject.getter();
                os_log_type_t v371 = static os_log_type_t.error.getter();
                uint64_t v318 = v371;
                if (os_log_type_enabled(v317, v371))
                {
                  uint64_t v206 = swift_slowAlloc();
                  *(_WORD *)uint64_t v206 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v317, (os_log_type_t)v318, "cache is out of sync right after syncing? fallback: delete oldest installed instead of least recent used", (uint8_t *)v206, 2u);
                  swift_slowDealloc();
                }

                swift_beginAccess();
                if (!v681[2]) {
                  goto LABEL_266;
                }
                uint64_t v373 = v681[4];
                uint64_t v372 = v681[5];
                swift_bridgeObjectRetain();
                sub_10002193C(0, 1);
                swift_endAccess();
                *(void *)(v344 + 16) = v373;
                *(void *)(v344 + 24) = v372;
                swift_bridgeObjectRelease();
                uint64_t v374 = v681;
                swift_bridgeObjectRetain();
                UUID.uuidString.getter();
                uint64_t v375 = v642;
                uint64_t v376 = sub_100117604();
                uint64_t v642 = v375;
                sub_1000C9200((uint64_t)v374, v376, v377);
                sub_1000C8184();
                uint64_t v206 = (uint64_t)v629;
                swift_bridgeObjectRelease();
              }
              else
              {
                unint64_t v362 = v360;
                swift_beginAccess();
                sub_100133544(v362);
                swift_endAccess();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              BOOL v378 = sub_1000962FC();
              swift_bridgeObjectRelease();
              if (v378)
              {
                uint64_t v206 = (uint64_t)v596;
                uint64_t v379 = v637;
                v620(v596, v634, v637);
                swift_retain();
                uint64_t v380 = Logger.logObject.getter();
                os_log_type_t v381 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v380, v381))
                {
                  uint64_t v382 = swift_slowAlloc();
                  *(void *)&long long v646 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v382 = v615;
                  uint64_t v623 = v382 + 4;
                  uint64_t v383 = *(void *)(v344 + 16);
                  unint64_t v384 = *(void *)(v344 + 24);
                  swift_bridgeObjectRetain();
                  uint64_t v643 = sub_100005EB8(v383, v384, (uint64_t *)&v646);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v380, v381, "profile slots full, deleted profile %s", (uint8_t *)v382, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  uint64_t v385 = v596;
                  uint64_t v386 = v637;
                  goto LABEL_137;
                }
LABEL_136:

                swift_release();
                uint64_t v385 = (char *)v206;
                uint64_t v386 = v379;
              }
              else
              {
                uint64_t v379 = v637;
                v620((char *)v206, v634, v637);
                swift_retain();
                uint64_t v380 = Logger.logObject.getter();
                os_log_type_t v387 = static os_log_type_t.default.getter();
                if (!os_log_type_enabled(v380, v387)) {
                  goto LABEL_136;
                }
                uint64_t v388 = swift_slowAlloc();
                *(void *)&long long v646 = swift_slowAlloc();
                *(_DWORD *)uint64_t v388 = v615;
                uint64_t v623 = v388 + 4;
                uint64_t v389 = *(void *)(v344 + 16);
                unint64_t v390 = *(void *)(v344 + 24);
                swift_bridgeObjectRetain();
                uint64_t v643 = sub_100005EB8(v389, v390, (uint64_t *)&v646);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v380, v387, "profile slots full, failed to delete profile %s", (uint8_t *)v388, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v385 = v629;
                uint64_t v386 = v637;
              }
LABEL_137:
              ((void (*)(char *, uint64_t))v621)(v385, v386);
LABEL_120:
              swift_release();
              goto LABEL_121;
            }
            swift_bridgeObjectRelease();
            sub_1000A8220(v355);
            swift_release();
            swift_bridgeObjectRelease();
LABEL_121:
            uint64_t v206 = v640;
            uint64_t v364 = v681[2];
            if ((uint64_t)v636 >= v364 || !v364) {
              goto LABEL_148;
            }
          }
          swift_bridgeObjectRelease_n();
          uint64_t v363 = v348;
          uint64_t v355 = v638;
          sub_1000AA8B4(v363, v638);
LABEL_119:
          sub_1000A8220(v355);
          goto LABEL_120;
        }
LABEL_148:
        swift_weakDestroy();
        swift_bridgeObjectRelease();
        uint64_t v218 = v633;
        if (v633)
        {
          uint64_t v402 = *(void *)(v206 + 256);
          uint64_t v638 = *(void *)(v206 + 264);
          sub_100006788((void *)(v206 + 232), v402);
          sub_100003EB0(&qword_1001D9B20);
          uint64_t v403 = swift_allocObject();
          *(_OWORD *)(v403 + 16) = xmmword_1001861D0;
          *(void *)(v403 + 32) = 1684631668;
          *(void *)(v403 + 40) = 0xE400000000000000;
          swift_bridgeObjectRetain();
          uint64_t v404 = UUID.uuidString.getter();
          *(void *)(v403 + 72) = &type metadata for String;
          *(void *)(v403 + 80) = &protocol witness table for String;
          *(void *)(v403 + 48) = v404;
          *(void *)(v403 + 56) = v405;
          *(void *)(v403 + 88) = 1701869940;
          *(void *)(v403 + 96) = 0xE400000000000000;
          *(void *)&long long v646 = v633;
          sub_100003EB0((uint64_t *)&unk_1001DA570);
          sub_10002B658();
          uint64_t v406 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v408 = v407;
          swift_bridgeObjectRelease();
          *(void *)(v403 + 128) = &type metadata for String;
          *(void *)(v403 + 136) = &protocol witness table for String;
          *(void *)(v403 + 104) = v406;
          *(void *)(v403 + 112) = v408;
          unint64_t v409 = sub_100104AF4(v403);
          uint64_t v206 = v640;
          sub_100136224(17, v409, v402, v638);
          swift_bridgeObjectRelease();
          uint64_t v218 = v633;
        }
        uint64_t v638 = 0;
        uint64_t v628 = 0;
        v629 = 0;
        uint64_t v623 = 0;
        *(void *)&long long v622 = 0;
        v620 = 0;
        *(void *)&long long v621 = 0;
        v618 = 0;
        v619 = 0;
        v616 = 0;
        v617 = 0;
        uint64_t v207 = v635;
        uint64_t v162 = v631;
      }
      if (!v631[2])
      {
        sub_1000448A0((uint64_t)v411);
        uint64_t v445 = v627;
        char v446 = v626;
        goto LABEL_212;
      }
      v629 = (char *)v204;
      uint64_t v638 = v318;
      sub_1000448A0((uint64_t)v411);
      id v439 = [(os_unfair_lock_s *)v207 stateInformation];
      if (v439)
      {
        uint64_t v440 = v439;
        uint64_t v441 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v441 + 16))
        {
          sub_100006570(v441 + 32, (uint64_t)&v646);
        }
        else
        {
          long long v646 = 0u;
          long long v647 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v647 + 1))
        {
          sub_100003EB0(&qword_1001DABD8);
          int v447 = swift_dynamicCast();
          uint64_t v448 = v591;
          if (v447)
          {
            uint64_t v449 = v681;
            goto LABEL_185;
          }
LABEL_184:
          uint64_t v449 = (void *)sub_100004D6C((uint64_t)_swiftEmptyArrayStorage);
LABEL_185:
          uint64_t v628 = sub_100084CD8((uint64_t)v449);
          uint64_t v623 = (uint64_t)v450;
          uint64_t v624 = v451;
          int v453 = v452;
          uint64_t v454 = (void (**)(char *, uint64_t))v630;
          uint64_t v455 = v637;
          (*((void (**)(char *, uint64_t, uint64_t))v630 + 2))(v448, v634, v637);
          v456 = Logger.logObject.getter();
          os_log_type_t v457 = static os_log_type_t.default.getter();
          BOOL v458 = os_log_type_enabled(v456, v457);
          LODWORD(v622) = v453;
          if (v458)
          {
            uint64_t v459 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v646 = swift_slowAlloc();
            *(_DWORD *)uint64_t v459 = 136315138;
            if (v453)
            {
              uint64_t v461 = 7104878;
              unint64_t v463 = 0xE300000000000000;
              uint64_t v460 = v623;
            }
            else
            {
              uint64_t v460 = v623;
              uint64_t v461 = sub_100078600();
              unint64_t v463 = v462;
            }
            v681 = (void *)sub_100005EB8(v461, v463, (uint64_t *)&v646);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v456, v457, "snapshot: %s", v459, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*((void (**)(char *, uint64_t))v630 + 1))(v591, v637);
          }
          else
          {

            v454[1](v448, v455);
            uint64_t v460 = v623;
          }
          uint64_t v445 = v627;
          char v446 = v626;
          uint64_t v318 = v638;
          char v411 = v636;
          uint64_t v204 = v629;
          if ((v622 & 1) != 0 || v628 < 29001 || v460 < 9721 || v624 <= 590)
          {
LABEL_214:
            swift_bridgeObjectRelease();
            sub_10002A974(2028, 0, 0, 0);
            swift_willThrow();
            uint64_t v482 = (uint64_t)v411;
            goto LABEL_215;
          }
LABEL_212:
          uint64_t v481 = v642;
          sub_1000A370C((uint64_t)v631, (uint64_t)v204, v445, v446 & 1);
          if (v481)
          {
            sub_100057838((uint64_t)v411);
            swift_bridgeObjectRelease();
            goto LABEL_217;
          }
          uint64_t v638 = v318;
          NFSecureElementManagerSession.select(_:)(AID_PAY_APPLET, *(unint64_t *)algn_1001E1178);
          v483 = sub_1000AECC4();
          uint64_t v485 = v484;
          uint64_t v486 = *(void *)(v640 + 272);
          sub_100003EB0(&qword_1001D9B38);
          uint64_t v487 = swift_allocObject();
          uint64_t v488 = v487;
          *(_OWORD *)(v487 + 16) = xmmword_100186100;
          *(unsigned char *)(v487 + 32) = 5;
          uint64_t v628 = v485;
          v629 = (char *)v483;
          if (v485)
          {
            uint64_t v489 = &type metadata for String;
            *(void *)&long long v622 = v485;
            uint64_t v626 = v485;
          }
          else
          {
            v483 = 0;
            uint64_t v489 = 0;
            *(void *)(v487 + 56) = 0;
            uint64_t v626 = 0xE300000000000000;
            *(void *)&long long v622 = 0xE800000000000000;
          }
          *(void *)(v487 + 40) = v483;
          *(void *)(v487 + 48) = v485;
          *(void *)(v487 + 64) = v489;
          swift_bridgeObjectRetain();
          unint64_t v490 = sub_100104C38(v488);
          uint64_t v627 = v486;
          __chkstk_darwin(v490, v491);
          unint64_t v493 = (uint64_t *)&v492[4];
          v494 = v492 + 8;
          os_unfair_lock_lock(v492 + 8);
          sub_100085FE4(v493);
          uint64_t v642 = 0;
          os_unfair_lock_unlock(v494);
          swift_bridgeObjectRelease();
          os_signpost_id_t v495 = (void (**)(char *, uint64_t))v630;
          v496 = v587;
          uint64_t v497 = v637;
          (*((void (**)(char *, uint64_t, uint64_t))v630 + 2))(v587, v634, v637);
          uint64_t v498 = v576;
          sub_1000AA8B4((uint64_t)v641, v576);
          uint64_t v499 = v586;
          sub_1000AA8B4(v498, v586);
          uint64_t v500 = v577;
          sub_1000AA9A0(v498, v577);
          swift_bridgeObjectRetain_n();
          uint64_t v501 = Logger.logObject.getter();
          os_log_type_t v502 = static os_log_type_t.default.getter();
          LODWORD(v623) = v502;
          BOOL v503 = os_log_type_enabled(v501, v502);
          uint64_t v624 = v485;
          if (v503)
          {
            uint64_t v504 = swift_slowAlloc();
            *(void *)&long long v621 = swift_slowAlloc();
            *(void *)&long long v646 = v621;
            *(_DWORD *)uint64_t v504 = 136315394;
            if (v628) {
              uint64_t v505 = (uint64_t)v629;
            }
            else {
              uint64_t v505 = 4271950;
            }
            swift_bridgeObjectRetain();
            v681 = (void *)sub_100005EB8(v505, v626, (uint64_t *)&v646);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_WORD *)(v504 + 12) = 2080;
            uint64_t v506 = v586;
            if (*(void *)(v586 + 80)) {
              uint64_t v507 = 0;
            }
            else {
              uint64_t v507 = 7302688;
            }
            if (*(void *)(v586 + 80)) {
              unint64_t v508 = 0xE000000000000000;
            }
            else {
              unint64_t v508 = 0xE300000000000000;
            }
            v681 = (void *)sub_100005EB8(v507, v508, (uint64_t *)&v646);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000A8220(v500);
            sub_1000A8220(v506);
            _os_log_impl((void *)&_mh_execute_header, v501, (os_log_type_t)v623, "current version is %s after%s installation", (uint8_t *)v504, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*((void (**)(char *, uint64_t))v630 + 1))(v587, v637);
          }
          else
          {
            swift_bridgeObjectRelease_n();
            sub_1000A8220(v500);
            sub_1000A8220(v499);

            v495[1](v496, v497);
          }
          sub_100003EB0(&qword_1001DCF60);
          uint64_t v509 = swift_allocObject();
          long long v621 = xmmword_1001861D0;
          *(_OWORD *)(v509 + 16) = xmmword_1001861D0;
          char v510 = v639;
          uint64_t v511 = (uint64_t)v641;
          uint64_t v623 = (uint64_t)v641 + v639[8];
          *(void *)(v509 + 32) = UUID.uuidString.getter();
          *(void *)(v509 + 40) = v512;
          uint64_t v626 = v511 + v510[10];
          uint64_t v513 = (uint64_t)v574;
          sub_100006724(v626, (uint64_t)v574, (uint64_t *)&unk_1001DF8D0);
          uint64_t v514 = v625;
          os_log_type_t v515 = *(char **)(v625 + 48);
          uint64_t v516 = v632;
          uint64_t v637 = v625 + 48;
          v630 = v515;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v515)(v513, 1, v632) == 1)
          {
            sub_10005F4F8(v513, (uint64_t *)&unk_1001DF8D0);
            uint64_t v517 = 0;
            uint64_t v518 = 0;
          }
          else
          {
            uint64_t v517 = UUID.uuidString.getter();
            uint64_t v518 = v519;
            (*(void (**)(uint64_t, uint64_t))(v514 + 8))(v513, v516);
          }
          uint64_t v520 = (uint64_t)v631;
          *(void *)(v509 + 48) = v517;
          *(void *)(v509 + 56) = v518;
          uint64_t v521 = v642;
          sub_100095250(v509);
          swift_setDeallocating();
          sub_100003EB0(&qword_1001DA138);
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v522 = (uint64_t *)((char *)v641 + v639[11]);
          if (*v522 == 1)
          {
            uint64_t v523 = 0;
          }
          else
          {
            uint64_t v523 = v522[3];
            swift_bridgeObjectRetain();
          }
          v524.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          if (v523)
          {
            NSString v525 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v525 = 0;
          }
          id v526 = [objc_allocWithZone((Class)SPRInstallData) initWithKernelsInstalled:v524.super.isa countryCode:v525];

          v527 = *v578;
          const char *v578 = v526;

          uint64_t v528 = *(void *)(v520 + 16);
          uint64_t v529 = swift_bridgeObjectRelease();
          if (!v528)
          {
            swift_bridgeObjectRelease();
            v535 = Logger.logObject.getter();
            os_log_type_t v536 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v535, v536))
            {
              v537 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v537 = 0;
              _os_log_impl((void *)&_mh_execute_header, v535, v536, "nothing was installed, skip profile activation", v537, 2u);
              swift_slowDealloc();
              swift_release();

              sub_100057838((uint64_t)v636);
            }
            else
            {
              sub_100057838((uint64_t)v636);

              swift_release();
            }
LABEL_218:
            swift_bridgeObjectRelease();
            return;
          }
          LOBYTE(v646) = 4;
          __chkstk_darwin(v529, v530);
          uint64_t v532 = (uint64_t)&v531[4];
          uint64_t v224 = v531 + 8;
          os_unfair_lock_lock(v531 + 8);
          sub_1000ACE00(v532);
          if (!v521)
          {
            os_unfair_lock_unlock(v224);
            uint64_t v533 = v575;
            sub_100006724(v626, v575, (uint64_t *)&unk_1001DF8D0);
            uint64_t v534 = v632;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v630)(v533, 1, v632) == 1)
            {
              sub_10005F4F8(v533, (uint64_t *)&unk_1001DF8D0);
              goto LABEL_251;
            }
            uint64_t v538 = v625;
            v539 = v573;
            (*(void (**)(char *, uint64_t, uint64_t))(v625 + 32))(v573, v533, v534);
            UUID.uuidString.getter();
            uint64_t v540 = sub_100117604();
            BOOL v542 = sub_1000B3B3C(v540, v541);
            swift_bridgeObjectRelease();
            if (v542)
            {
              (*(void (**)(char *, uint64_t))(v538 + 8))(v539, v534);
LABEL_251:
              UUID.uuidString.getter();
              uint64_t v543 = sub_100117604();
              BOOL v545 = sub_1000B3B3C(v543, v544);
              swift_bridgeObjectRelease();
              uint64_t v206 = v640;
              if (v545)
              {
                uint64_t v546 = swift_bridgeObjectRelease();
                LOBYTE(v646) = 4;
                __chkstk_darwin(v546, v547);
                v549 = (uint64_t *)&v548[4];
                os_log_type_t v550 = v548 + 8;
                os_unfair_lock_lock(v548 + 8);
                sub_1000ACE18(v549);
                os_unfair_lock_unlock(v550);
                sub_100057838((uint64_t)v636);
                swift_release();
                goto LABEL_218;
              }
LABEL_254:
              v551 = Logger.logObject.getter();
              os_log_type_t v552 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v551, v552))
              {
                uint64_t v553 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v553 = 0;
                _os_log_impl((void *)&_mh_execute_header, v551, v552, "cannot activate config", v553, 2u);
                swift_slowDealloc();
              }

              sub_100009300(v206 + 232, (uint64_t)&v646);
              uint64_t v554 = *((void *)&v647 + 1);
              uint64_t v555 = v648;
              sub_100006788(&v646, *((uint64_t *)&v647 + 1));
              sub_100003EB0(&qword_1001D9B20);
              uint64_t v556 = swift_allocObject();
              *(_OWORD *)(v556 + 16) = v621;
              *(void *)(v556 + 32) = 1684631668;
              *(void *)(v556 + 40) = 0xE400000000000000;
              uint64_t v557 = UUID.uuidString.getter();
              *(void *)(v556 + 72) = &type metadata for String;
              *(void *)(v556 + 80) = &protocol witness table for String;
              *(void *)(v556 + 48) = v557;
              *(void *)(v556 + 56) = v558;
              *(void *)(v556 + 88) = 7497078;
              *(void *)(v556 + 96) = 0xE300000000000000;
              *(void *)(v556 + 128) = &type metadata for String;
              *(void *)(v556 + 136) = &protocol witness table for String;
              uint64_t v559 = 0x65756C61765F6F6ELL;
              if (v628) {
                uint64_t v559 = (uint64_t)v629;
              }
              *(void *)(v556 + 104) = v559;
              *(void *)(v556 + 112) = v622;
              unint64_t v560 = sub_100104AF4(v556);
              sub_100136224(22, v560, v554, v555);
              swift_bridgeObjectRelease();
              sub_100006520((uint64_t)&v646);
              sub_10002A974(2010, 0, 0, 0);
              swift_willThrow();
              uint64_t v482 = (uint64_t)v636;
LABEL_215:
              sub_100057838(v482);
LABEL_217:
              swift_release();
            }
            else
            {
              v561 = Logger.logObject.getter();
              os_log_type_t v562 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v561, v562))
              {
                v563 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v563 = 0;
                _os_log_impl((void *)&_mh_execute_header, v561, v562, "Cannot activate SAF profile", v563, 2u);
                swift_slowDealloc();
              }

              sub_100009300(v640 + 232, (uint64_t)&v646);
              uint64_t v564 = *((void *)&v647 + 1);
              uint64_t v565 = v648;
              sub_100006788(&v646, *((uint64_t *)&v647 + 1));
              sub_100003EB0(&qword_1001D9B20);
              uint64_t v566 = swift_allocObject();
              *(_OWORD *)(v566 + 16) = v621;
              *(void *)(v566 + 32) = 1684631668;
              *(void *)(v566 + 40) = 0xE400000000000000;
              v567 = v573;
              uint64_t v568 = UUID.uuidString.getter();
              *(void *)(v566 + 72) = &type metadata for String;
              *(void *)(v566 + 80) = &protocol witness table for String;
              *(void *)(v566 + 48) = v568;
              *(void *)(v566 + 56) = v569;
              *(void *)(v566 + 88) = 7497078;
              *(void *)(v566 + 96) = 0xE300000000000000;
              *(void *)(v566 + 128) = &type metadata for String;
              *(void *)(v566 + 136) = &protocol witness table for String;
              uint64_t v570 = 0x65756C61765F6F6ELL;
              if (v628) {
                uint64_t v570 = (uint64_t)v629;
              }
              *(void *)(v566 + 104) = v570;
              *(void *)(v566 + 112) = v622;
              unint64_t v571 = sub_100104AF4(v566);
              sub_100136224(22, v571, v564, v565);
              swift_bridgeObjectRelease();
              sub_100006520((uint64_t)&v646);
              sub_10002A974(2010, 0, 0, 0);
              swift_willThrow();
              swift_release();
              sub_100057838((uint64_t)v636);
              (*(void (**)(char *, uint64_t))(v538 + 8))(v567, v632);
            }
            goto LABEL_218;
          }
LABEL_270:
          os_unfair_lock_unlock(v224);
          __break(1u);
          return;
        }
      }
      else
      {
        long long v646 = 0u;
        long long v647 = 0u;
      }
      sub_10005F4F8((uint64_t)&v646, &qword_1001DD3F0);
      uint64_t v448 = v591;
      goto LABEL_184;
    }
    v619 = (char *)v205;
    uint64_t v219 = *(NSObject **)(v640 + 272);
    v636 = (uint64_t (*)(uint64_t))sub_100003EB0(&qword_1001D9B38);
    uint64_t inited = swift_initStackObject();
    long long v622 = xmmword_100186100;
    *(_OWORD *)(inited + 16) = xmmword_100186100;
    *(unsigned char *)(inited + 32) = 12;
    *(void *)(inited + 64) = &type metadata for ConfiguratorAnalytics.LoadStatus;
    *(unsigned char *)(inited + 40) = 2;
    unint64_t v221 = sub_100104C38(inited);
    __chkstk_darwin(v221, v222);
    uint64_t v224 = v223 + 4;
    uint64_t v225 = v223 + 8;
    os_unfair_lock_lock(v223 + 8);
    uint64_t v226 = v642;
    sub_100085FE4((uint64_t *)v224);
    if (v226)
    {
      os_unfair_lock_unlock(v225);
      __break(1u);
      os_unfair_lock_unlock(v207);
      __break(1u);
      goto LABEL_270;
    }
    os_unfair_lock_unlock(v225);
    swift_bridgeObjectRelease();
    if (!v641[21])
    {
      uint64_t v231 = &off_1001C5718;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v231 = sub_10015A8E0(0, 2, 1, &off_1001C5718);
      }
      unint64_t v233 = v231[2];
      unint64_t v232 = v231[3];
      if (v233 >= v232 >> 1) {
        uint64_t v231 = sub_10015A8E0((void *)(v232 > 1), v233 + 1, 1, v231);
      }
      v231[2] = v233 + 1;
      v633 = (_UNKNOWN **)v231;
      uint64_t v234 = &v231[2 * v233];
      v234[4] = 0x6C61626F6C67;
      v234[5] = 0xE600000000000000;
      uint64_t v235 = swift_allocObject();
      *(_OWORD *)(v235 + 16) = v622;
      *(unsigned char *)(v235 + 32) = 13;
      *(void *)(v235 + 64) = &type metadata for ConfiguratorAnalytics.LoadStatus;
      *(unsigned char *)(v235 + 40) = 2;
      unint64_t v236 = sub_100104C38(v235);
      __chkstk_darwin(v236, v237);
      char v239 = (uint64_t *)&v238[4];
      uint64_t v240 = v238 + 8;
      os_unfair_lock_lock(v238 + 8);
      sub_100085FE4(v239);
      os_unfair_lock_unlock(v240);
      swift_bridgeObjectRelease();
LABEL_77:
      id v241 = v594;
      v681 = _swiftEmptyArrayStorage;
      uint64_t v242 = sub_10006CB20();
      uint64_t v623 = (uint64_t)v219;
      uint64_t v243 = v242;
      uint64_t v244 = v630;
      uint64_t v245 = v637;
      v620 = (void (*)(char *, uint64_t, uint64_t))*((void *)v630 + 2);
      v620(v241, v634, v637);
      swift_bridgeObjectRetain_n();
      uint64_t v246 = Logger.logObject.getter();
      os_log_type_t v247 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v246, v247))
      {
        uint64_t v248 = (_DWORD *)swift_slowAlloc();
        uint64_t v642 = swift_slowAlloc();
        *(void *)&long long v646 = v642;
        *(void *)&long long v621 = v248;
        *uint64_t v248 = 136315138;
        v618 = v248 + 1;
        swift_bridgeObjectRetain();
        uint64_t v249 = Array.description.getter();
        unint64_t v251 = v250;
        swift_bridgeObjectRelease();
        uint64_t v645 = sub_100005EB8(v249, v251, (uint64_t *)&v646);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v246, v247, "existing configs: %s", (uint8_t *)v621, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v252 = (void (*)(char *, uint64_t))*((void *)v630 + 1);
        uint64_t v253 = v594;
        uint64_t v254 = v637;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v252 = (void (*)(char *, uint64_t))*((void *)v244 + 1);
        uint64_t v253 = v241;
        uint64_t v254 = v245;
      }
      *(void *)&long long v621 = v252;
      v252(v253, v254);
      UUID.uuidString.getter();
      uint64_t v255 = sub_100117604();
      sub_1000C9200((uint64_t)v243, v255, v256);
      sub_1000C8184();
      swift_bridgeObjectRelease();
      uint64_t v257 = swift_allocObject();
      *(_OWORD *)(v257 + 16) = xmmword_1001861D0;
      *(unsigned char *)(v257 + 32) = 7;
      *(void *)&long long v646 = v243;
      sub_100003EB0((uint64_t *)&unk_1001DA570);
      sub_10002B658();
      uint64_t v258 = BidirectionalCollection<>.joined(separator:)();
      *(void *)(v257 + 64) = &type metadata for String;
      *(void *)(v257 + 40) = v258;
      *(void *)(v257 + 48) = v259;
      *(unsigned char *)(v257 + 72) = 6;
      uint64_t v260 = v243[2];
      *(void *)(v257 + 104) = &type metadata for Int;
      *(void *)(v257 + 80) = v260;
      unint64_t v261 = sub_100104C38(v257);
      __chkstk_darwin(v261, v262);
      uint64_t v264 = (uint64_t *)&v263[4];
      uint64_t v265 = v263 + 8;
      os_unfair_lock_lock(v263 + 8);
      sub_100085FE4(v264);
      os_unfair_lock_unlock(v265);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v681 = v243;
      uint64_t v266 = v632;
      uint64_t v267 = v625;
      uint64_t v268 = (uint64_t)v641;
      uint64_t v269 = (uint64_t)v592;
      swift_weakInit();
      sub_1000AA8B4(v268, v269);
      if (*(void *)(v268 + 256))
      {
        UUID.uuidString.getter();
        uint64_t v270 = sub_100117604();
        sub_1000A31D8(v270, v271, (uint64_t *)&v681);
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v268 + 344))
      {
        uint64_t v272 = v589;
        sub_100006724(v268 + v639[10], v589, (uint64_t *)&unk_1001DF8D0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v267 + 48))(v272, 1, v266) == 1)
        {
          sub_10005F4F8(v272, (uint64_t *)&unk_1001DF8D0);
          uint64_t v273 = 0;
          unint64_t v274 = 0;
        }
        else
        {
          UUID.uuidString.getter();
          uint64_t v276 = sub_100117604();
          uint64_t v277 = v272;
          uint64_t v273 = v276;
          unint64_t v274 = v278;
          (*(void (**)(uint64_t, uint64_t))(v267 + 8))(v277, v266);
        }
        uint64_t v275 = (uint64_t)v593;
        sub_1000A31D8(v273, v274, (uint64_t *)&v681);
        swift_bridgeObjectRelease();
        uint64_t v268 = (uint64_t)v641;
      }
      else
      {
        uint64_t v275 = (uint64_t)v593;
      }
      sub_1000A8220(v269);
      uint64_t v279 = *(void *)(v268 + 256);
      sub_1000AA8B4(v268, v275);
      if (v279)
      {
        sub_1000A8220(v275);
      }
      else
      {
        uint64_t v280 = *(void *)(v275 + 344);
        sub_1000A8220(v275);
        if (!v280)
        {
          uint64_t v392 = v633;
          if (v633)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v392 = sub_10015A8E0(0, v392[2] + 1, 1, v392);
            }
            unint64_t v394 = v392[2];
            unint64_t v393 = v392[3];
            if (v394 >= v393 >> 1) {
              uint64_t v392 = sub_10015A8E0((void *)(v393 > 1), v394 + 1, 1, v392);
            }
            v392[2] = v394 + 1;
            v633 = (_UNKNOWN **)v392;
            char v395 = &v392[2 * v394];
            v395[4] = 0x656C69666F7270;
            v395[5] = 0xE700000000000000;
          }
          else
          {
            v633 = 0;
          }
          uint64_t v396 = swift_allocObject();
          *(_OWORD *)(v396 + 16) = v622;
          *(unsigned char *)(v396 + 32) = 14;
          *(void *)(v396 + 64) = &type metadata for ConfiguratorAnalytics.LoadStatus;
          *(unsigned char *)(v396 + 40) = 2;
          unint64_t v397 = sub_100104C38(v396);
          __chkstk_darwin(v397, v398);
          uint64_t v400 = (uint64_t *)&v399[4];
          os_log_t v401 = v399 + 8;
          os_unfair_lock_lock(v399 + 8);
          sub_100085FE4(v400);
          uint64_t v642 = 0;
          os_unfair_lock_unlock(v401);
          swift_bridgeObjectRelease();
          uint64_t v206 = v640;
          goto LABEL_148;
        }
      }
      uint64_t v281 = Logger.logObject.getter();
      os_log_type_t v282 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v281, v282))
      {
        uint64_t v283 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v283 = 0;
        _os_log_impl((void *)&_mh_execute_header, v281, v282, "checking profile slots..", v283, 2u);
        swift_slowDealloc();
      }

      v636 = (uint64_t (*)(uint64_t))sub_100096068();
      uint64_t v284 = v641;
      uint64_t v642 = 0;
      sub_100003EB0(&qword_1001DCF50);
      int64_t v285 = swift_allocObject();
      uint64_t v286 = v284[22];
      uint64_t v287 = v284[23];
      *(void *)(v285 + 32) = v286;
      *(_OWORD *)(v285 + 16) = xmmword_1001861D0;
      uint64_t v288 = v284[24];
      uint64_t v289 = v284[25];
      uint64_t v290 = v284[26];
      uint64_t v291 = v284[27];
      uint64_t v292 = v284[28];
      uint64_t v293 = v284[29];
      uint64_t v294 = v284[30];
      uint64_t v295 = v284[31];
      *(void *)(v285 + 40) = v287;
      *(void *)(v285 + 48) = v288;
      *(void *)(v285 + 56) = v289;
      *(void *)(v285 + 64) = v290;
      *(void *)(v285 + 72) = v291;
      *(void *)(v285 + 80) = v292;
      *(void *)(v285 + 88) = v293;
      *(void *)(v285 + 96) = v294;
      uint64_t v296 = v284[32];
      uint64_t v623 = v284[33];
      uint64_t v297 = v623;
      *(void *)(v285 + 104) = v295;
      *(void *)(v285 + 112) = v296;
      uint64_t v299 = v284[35];
      *(void *)&long long v622 = v284[34];
      uint64_t v298 = v622;
      uint64_t v301 = v284[37];
      v617 = (void (**)(uint64_t, uint64_t))v284[36];
      uint64_t v300 = v617;
      v618 = (_DWORD *)v299;
      uint64_t v303 = v284[38];
      v616 = (uint64_t *)v284[39];
      uint64_t v302 = (uint64_t)v616;
      uint64_t v305 = v284[41];
      *(void *)&long long v615 = v284[40];
      uint64_t v304 = v615;
      uint64_t v306 = v284;
      uint64_t v307 = v284[42];
      uint64_t v308 = v306[43];
      *(void *)(v285 + 120) = v297;
      *(void *)(v285 + 128) = v298;
      *(void *)(v285 + 136) = v299;
      *(void *)(v285 + 144) = v300;
      *(void *)(v285 + 152) = v301;
      *(void *)(v285 + 160) = v303;
      *(void *)(v285 + 168) = v302;
      *(void *)(v285 + 176) = v304;
      *(void *)(v285 + 184) = v305;
      *(void *)(v285 + 192) = v307;
      *(void *)(v285 + 200) = v308;
      sub_1000AA760(v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296);
      sub_1000AA760(v623, v622, (uint64_t)v618, (uint64_t)v617, v301, v303, (uint64_t)v616, v615, v305, v307, v308);
      uint64_t v309 = *(void *)(v285 + 32);
      v617 = *(void (***)(uint64_t, uint64_t))(v285 + 40);
      v618 = (_DWORD *)(v285 + 32);
      v616 = *(uint64_t **)(v285 + 48);
      *(void *)&long long v622 = *(void *)(v285 + 56);
      uint64_t v310 = *(void *)(v285 + 72);
      uint64_t v623 = *(void *)(v285 + 64);
      uint64_t v312 = *(void *)(v285 + 80);
      uint64_t v311 = *(void *)(v285 + 88);
      uint64_t v313 = *(void *)(v285 + 96);
      uint64_t v314 = *(void *)(v285 + 104);
      uint64_t v315 = *(void *)(v285 + 112);
      swift_bridgeObjectRetain();
      if (v315)
      {
        uint64_t v609 = v315;
        *(void *)&long long v615 = v314;
        uint64_t v610 = v313;
        uint64_t v572 = v313;
        uint64_t v611 = v309;
        uint64_t v612 = v311;
        uint64_t v316 = v309;
        uint64_t v206 = (uint64_t)v616;
        long long v317 = v617;
        uint64_t v613 = v312;
        uint64_t v614 = v310;
        sub_1000AA760(v316, (uint64_t)v617, (uint64_t)v616, v622, v623, v310, v312, v311, v572, v314, v315);
        uint64_t v318 = (uint64_t)_swiftEmptyArrayStorage;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          goto LABEL_95;
        }
        goto LABEL_268;
      }
      uint64_t v318 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v325 = *(void *)(v285 + 200);
      if (v325) {
        goto LABEL_100;
      }
      goto LABEL_105;
    }
    if (v633 || !sub_1000969D0())
    {
      uint64_t v227 = Logger.logObject.getter();
      os_log_type_t v228 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v227, v228))
      {
        uint64_t v229 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v229 = 0;
        uint64_t v230 = "Install global config: failed to reset keys.";
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t v227 = Logger.logObject.getter();
      os_log_type_t v228 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v227, v228))
      {
        uint64_t v229 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v229 = 0;
        uint64_t v230 = "Install global config: reset CAPK and CRL.";
LABEL_70:
        _os_log_impl((void *)&_mh_execute_header, v227, v228, v230, v229, 2u);
        swift_slowDealloc();
      }
    }

    v633 = &off_1001C5718;
    goto LABEL_77;
  }
  uint64_t v642 = 0;
  *(void *)&long long v646 = v7;
  swift_errorRetain();
  sub_100003EB0((uint64_t *)&unk_1001DD380);
  if (!swift_dynamicCast())
  {
    swift_errorRelease();
    goto LABEL_12;
  }
  int v80 = (unsigned __int16)v645;
  swift_errorRelease();
  if (v80 != 25392) {
    goto LABEL_12;
  }
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  sub_100003E78(v637, (uint64_t)qword_1001DCE10);
  uint64_t v81 = Logger.logObject.getter();
  os_log_type_t v82 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v646 = swift_slowAlloc();
    *(_DWORD *)uint64_t v83 = 136315138;
    uint64_t v84 = _typeName(_:qualified:)();
    uint64_t v645 = sub_100005EB8(v84, v85, (uint64_t *)&v646);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "%s.execute(...) Cannot select pay applet during install. May be from prohibit timer.", v83, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10002A974(2009, 0, 0, 0);
  swift_willThrow();
}

uint64_t sub_1000A31D8(uint64_t result, unint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    uint64_t v5 = result;
    id result = swift_beginAccess();
    uint64_t v6 = (void *)*a3;
    uint64_t v7 = *(void *)(*a3 + 16);
    if (v7)
    {
      BOOL v8 = v6[4] == v5 && v6[5] == a2;
      if (v8 || (id result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        unint64_t v9 = 0;
LABEL_9:
        swift_bridgeObjectRetain();
        if (!sub_1000962FC()) {
          return swift_bridgeObjectRelease();
        }
        if (qword_1001D9168 != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        sub_100003E78(v10, (uint64_t)qword_1001DCE10);
        swift_bridgeObjectRetain();
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          v20[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136315138;
          swift_bridgeObjectRetain();
          sub_100005EB8(v5, a2, v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "backend return the script for installed profile,delete and reinstall profile %s,sync cache after deletion", v13, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        swift_beginAccess();
        sub_100133544(v9);
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        id result = swift_weakLoadStrong();
        if (result)
        {
          swift_retain();
          swift_release();
          swift_beginAccess();
          uint64_t v17 = *a3;
          _s14InstallPackageVMa(0);
          swift_bridgeObjectRetain();
          UUID.uuidString.getter();
          uint64_t v18 = sub_100117604();
          sub_1000C9200(v17, v18, v19);
          sub_1000C8184();
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v14 = v6 + 7;
        uint64_t v15 = 1;
        while (v7 != v15)
        {
          unint64_t v9 = v15;
          if (*(v14 - 1) != v5 || *v14 != a2)
          {
            id result = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v15 = v9 + 1;
            v14 += 2;
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_9;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000A3534(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  BOOL v7 = a3[4] == a1 && a3[5] == a2;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a3 + 7;
  uint64_t v11 = 1;
  while (1)
  {
    if (v3 == v11) {
      return 0;
    }
    ++v9;
    if (*(v10 - 1) == a1 && *v10 == a2) {
      break;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = v11++;
    v10 += 2;
    if (v13) {
      return result;
    }
  }
  return v9;
}

unint64_t sub_1000A361C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000A370C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  uint64_t v313 = a3;
  uint64_t v325 = a2;
  uint64_t v322 = type metadata accessor for OSSignpostError();
  uint64_t v8 = *(void *)(v322 - 8);
  uint64_t v10 = __chkstk_darwin(v322, v9);
  uint64_t v312 = (char *)v301 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v311 = (char *)v301 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v310 = (char *)v301 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v309 = (char *)v301 - v20;
  __chkstk_darwin(v19, v21);
  uint64_t v308 = (char *)v301 - v22;
  uint64_t v333 = type metadata accessor for OSSignpostID();
  uint64_t v24 = __chkstk_darwin(v333, v23);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v30 = (char *)v301 - v29;
  __chkstk_darwin(v28, v31);
  uint64_t v34 = __chkstk_darwin((char *)v301 - v32, v33);
  uint64_t v36 = __chkstk_darwin(v34, (char *)v301 - v35);
  uint64_t v38 = __chkstk_darwin(v36, v37);
  uint64_t v40 = __chkstk_darwin(v38, v39);
  uint64_t v42 = __chkstk_darwin(v40, v41);
  uint64_t v44 = __chkstk_darwin(v42, v43);
  uint64_t v328 = (char *)v301 - v45;
  uint64_t v47 = __chkstk_darwin(v44, v46);
  uint64_t v57 = *(void *)(a1 + 16);
  if (!v57)
  {
    if (!_swiftEmptyArrayStorage[2]) {
      return swift_bridgeObjectRelease();
    }
LABEL_109:
    sub_100006788((void *)(*(void *)(v327 + 272) + 16), *(void *)(*(void *)(v327 + 272) + 40));
    uint64_t v299 = swift_bridgeObjectRetain();
    sub_100042F68(v299);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v316 = (char *)v301 - v54;
  uint64_t v317 = v52;
  uint64_t v318 = v51;
  uint64_t v319 = v50;
  uint64_t v320 = v49;
  uint64_t v303 = v48;
  uint64_t v304 = v47;
  uint64_t v305 = v30;
  uint64_t v306 = v56;
  uint64_t v307 = v55;
  v301[1] = a4;
  long long v326 = (void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  uint64_t v324 = (void (**)(char *, uint64_t))(v53 + 8);
  uint64_t v315 = (uint64_t (**)(char *, uint64_t))(v8 + 88);
  int v314 = enum case for OSSignpostError.doubleEnd(_:);
  uint64_t v302 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  uint64_t v58 = 32;
  *((void *)&v59 + 1) = 2;
  long long v340 = xmmword_100186100;
  *(void *)&long long v59 = 138412290;
  long long v321 = v59;
  uint64_t v332 = _swiftEmptyArrayStorage;
  uint64_t v323 = a1;
  do
  {
    long long v60 = *(_OWORD *)(a1 + v58 + 64);
    long long v61 = *(_OWORD *)(a1 + v58 + 32);
    long long v343 = *(_OWORD *)(a1 + v58 + 48);
    long long v344 = v60;
    uint64_t v345 = *(void *)(a1 + v58 + 80);
    long long v62 = *(_OWORD *)(a1 + v58 + 16);
    v342[0] = *(_OWORD *)(a1 + v58);
    v342[1] = v62;
    v342[2] = v61;
    if ((void)v343) {
      uint64_t v63 = 3;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v336 = BYTE1(v344);
    uint64_t v337 = v57;
    uint64_t v339 = v5;
    uint64_t v334 = v58;
    uint64_t v330 = v343;
    switch(BYTE1(v344))
    {
      case 1:
        sub_1000AA7A8((uint64_t)v342);
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v116 = type metadata accessor for OSSignposter();
        sub_100003E78(v116, (uint64_t)qword_1001DCE28);
        uint64_t v117 = v317;
        static OSSignpostID.exclusive.getter();
        uint64_t v118 = OSSignposter.logHandle.getter();
        os_signpost_type_t v119 = static os_signpost_type_t.begin.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          uint64_t v120 = *v326;
          uint64_t v121 = v328;
          uint64_t v122 = v333;
          (*v326)(v328, v117, v333);
          uint64_t v123 = v117;
          uint64_t v124 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v124 = 0;
          os_signpost_id_t v125 = OSSignpostID.rawValue.getter();
          os_signpost_type_t v126 = v119;
          uint64_t v127 = v121;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v118, v126, v125, "config-install-cleanupSLAM", "begin cleanup SLAM", v124, 2u);
          uint64_t v117 = v123;
          swift_slowDealloc();

          uint64_t v128 = v324;
          (*v324)(v121, v122);
        }
        else
        {

          uint64_t v120 = *v326;
          uint64_t v122 = v333;
          uint64_t v127 = v328;
          uint64_t v128 = v324;
        }
        unint64_t v335 = v120;
        v120(v127, v117, v122);
        type metadata accessor for OSSignpostIntervalState();
        swift_allocObject();
        uint64_t v168 = OSSignpostIntervalState.init(id:isOpen:)();
        uint64_t v329 = *v128;
        uint64_t v169 = ((uint64_t (*)(uint64_t, uint64_t))v329)(v117, v122);
        uint64_t v170 = *(void *)(v327 + 272);
        v341[0] = 1;
        uint64_t v331 = v170;
        __chkstk_darwin(v169, v171);
        *(void *)&v301[-4] = v341;
        uint64_t v173 = (uint64_t)&v172[4];
        uint64_t v135 = v172 + 8;
        os_unfair_lock_lock(v172 + 8);
        uint64_t v174 = v339;
        sub_1000ACE00(v173);
        if (v174) {
          goto LABEL_113;
        }
        os_unfair_lock_unlock(v135);
        uint64_t v338 = v168;
        goto LABEL_44;
      case 2:
        sub_1000AA7A8((uint64_t)v342);
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v90 = type metadata accessor for OSSignposter();
        sub_100003E78(v90, (uint64_t)qword_1001DCE28);
        uint64_t v91 = v318;
        static OSSignpostID.exclusive.getter();
        uint64_t v92 = OSSignposter.logHandle.getter();
        os_signpost_type_t v93 = static os_signpost_type_t.begin.getter();
        char v94 = OS_os_log.signpostsEnabled.getter();
        uint64_t v331 = v63;
        if (v94)
        {
          unint64_t v335 = *v326;
          uint64_t v95 = v328;
          uint64_t v96 = v333;
          v335(v328, v91, v333);
          uint64_t v97 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v97 = 0;
          os_signpost_id_t v98 = OSSignpostID.rawValue.getter();
          os_signpost_type_t v99 = v93;
          unint64_t v100 = v95;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v92, v99, v98, "config-install-global", "begin global config SLAM", v97, 2u);
          swift_slowDealloc();

          uint64_t v101 = v324;
          (*v324)(v95, v96);
          uint64_t v102 = v335;
        }
        else
        {

          uint64_t v102 = *v326;
          uint64_t v96 = v333;
          unint64_t v100 = v328;
          uint64_t v101 = v324;
        }
        unint64_t v335 = v102;
        v102(v100, v91, v96);
        type metadata accessor for OSSignpostIntervalState();
        swift_allocObject();
        uint64_t v338 = OSSignpostIntervalState.init(id:isOpen:)();
        uint64_t v329 = *v101;
        uint64_t v137 = ((uint64_t (*)(uint64_t, uint64_t))v329)(v91, v96);
        uint64_t v138 = *(void *)(v327 + 272);
        v341[0] = 2;
        __chkstk_darwin(v137, v139);
        *(void *)&v301[-4] = v341;
        uint64_t v141 = (uint64_t)&v140[4];
        uint64_t v135 = v140 + 8;
        os_unfair_lock_lock(v140 + 8);
        uint64_t v142 = v339;
        sub_1000ACE00(v141);
        if (v142) {
          goto LABEL_113;
        }
        os_unfair_lock_unlock(v135);
        sub_100003EB0(&qword_1001D9B38);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v340;
        *(unsigned char *)(inited + 32) = 13;
        *(void *)(inited + 64) = &type metadata for Int;
        *(void *)(inited + 40) = v331;
        unint64_t v144 = sub_100104C38(inited);
        uint64_t v331 = v138;
        *(void *)&v301[-4] = __chkstk_darwin(v144, v145);
        uint64_t v147 = (uint64_t *)&v146[4];
        uint64_t v148 = v146 + 8;
        os_unfair_lock_lock(v146 + 8);
        sub_100085FE4(v147);
        goto LABEL_37;
      case 3:
        sub_1000AA7A8((uint64_t)v342);
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v103 = type metadata accessor for OSSignposter();
        sub_100003E78(v103, (uint64_t)qword_1001DCE28);
        uint64_t v104 = v319;
        static OSSignpostID.exclusive.getter();
        uint64_t v105 = OSSignposter.logHandle.getter();
        os_signpost_type_t v106 = static os_signpost_type_t.begin.getter();
        char v107 = OS_os_log.signpostsEnabled.getter();
        uint64_t v331 = v63;
        if (v107)
        {
          unint64_t v335 = *v326;
          os_log_t v108 = v328;
          uint64_t v109 = v333;
          v335(v328, v104, v333);
          uint64_t v110 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v110 = 0;
          os_signpost_id_t v111 = OSSignpostID.rawValue.getter();
          os_signpost_type_t v112 = v106;
          uint64_t v113 = v108;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v105, v112, v111, "config-install-profile", "begin partner online profile SLAM", v110, 2u);
          swift_slowDealloc();

          uint64_t v114 = v324;
          (*v324)(v108, v109);
          uint64_t v115 = v335;
        }
        else
        {

          uint64_t v115 = *v326;
          uint64_t v109 = v333;
          uint64_t v113 = v328;
          uint64_t v114 = v324;
        }
        unint64_t v335 = v115;
        v115(v113, v104, v109);
        type metadata accessor for OSSignpostIntervalState();
        swift_allocObject();
        uint64_t v338 = OSSignpostIntervalState.init(id:isOpen:)();
        uint64_t v329 = *v114;
        uint64_t v149 = ((uint64_t (*)(uint64_t, uint64_t))v329)(v104, v109);
        uint64_t v131 = *(void *)(v327 + 272);
        v341[0] = 3;
        __chkstk_darwin(v149, v150);
        *(void *)&v301[-4] = v341;
        uint64_t v152 = (uint64_t)&v151[4];
        uint64_t v135 = v151 + 8;
        os_unfair_lock_lock(v151 + 8);
        uint64_t v153 = v339;
        sub_1000ACE00(v152);
        if (!v153) {
          goto LABEL_36;
        }
        goto LABEL_113;
      case 4:
        sub_1000AA7A8((uint64_t)v342);
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v77 = type metadata accessor for OSSignposter();
        sub_100003E78(v77, (uint64_t)qword_1001DCE28);
        uint64_t v78 = v320;
        static OSSignpostID.exclusive.getter();
        uint64_t v79 = OSSignposter.logHandle.getter();
        os_signpost_type_t v80 = static os_signpost_type_t.begin.getter();
        char v81 = OS_os_log.signpostsEnabled.getter();
        uint64_t v331 = v63;
        if (v81)
        {
          unint64_t v335 = *v326;
          os_log_type_t v82 = v328;
          uint64_t v83 = v333;
          v335(v328, v78, v333);
          uint64_t v84 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v84 = 0;
          os_signpost_id_t v85 = OSSignpostID.rawValue.getter();
          os_signpost_type_t v86 = v80;
          os_log_type_t v87 = v82;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v79, v86, v85, "config-install-profile", "begin partner saf profile SLAM", v84, 2u);
          swift_slowDealloc();

          uint64_t v88 = v324;
          (*v324)(v82, v83);
          uint64_t v89 = v335;
        }
        else
        {
          uint64_t v129 = v326;

          uint64_t v89 = *v129;
          uint64_t v83 = v333;
          os_log_type_t v87 = v328;
          uint64_t v88 = v324;
        }
        unint64_t v335 = v89;
        v89(v87, v78, v83);
        type metadata accessor for OSSignpostIntervalState();
        swift_allocObject();
        uint64_t v338 = OSSignpostIntervalState.init(id:isOpen:)();
        uint64_t v329 = *v88;
        uint64_t v130 = ((uint64_t (*)(uint64_t, uint64_t))v329)(v78, v83);
        uint64_t v131 = *(void *)(v327 + 272);
        v341[0] = 3;
        __chkstk_darwin(v130, v132);
        *(void *)&v301[-4] = v341;
        uint64_t v134 = (uint64_t)&v133[4];
        uint64_t v135 = v133 + 8;
        os_unfair_lock_lock(v133 + 8);
        uint64_t v136 = v339;
        sub_1000ACE00(v134);
        if (v136) {
          goto LABEL_113;
        }
LABEL_36:
        os_unfair_lock_unlock(v135);
        sub_100003EB0(&qword_1001D9B38);
        uint64_t v154 = swift_initStackObject();
        *(_OWORD *)(v154 + 16) = v340;
        *(unsigned char *)(v154 + 32) = 14;
        *(void *)(v154 + 64) = &type metadata for Int;
        *(void *)(v154 + 40) = v331;
        unint64_t v155 = sub_100104C38(v154);
        uint64_t v331 = v131;
        *(void *)&v301[-4] = __chkstk_darwin(v155, v156);
        uint64_t v158 = (uint64_t *)&v157[4];
        uint64_t v148 = v157 + 8;
        os_unfair_lock_lock(v157 + 8);
        sub_100085FE4(v158);
LABEL_37:
        os_unfair_lock_unlock(v148);
        swift_bridgeObjectRelease();
LABEL_44:
        int v167 = v336;
        break;
      default:
        sub_1000AA7A8((uint64_t)v342);
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v64 = type metadata accessor for OSSignposter();
        sub_100003E78(v64, (uint64_t)qword_1001DCE28);
        uint64_t v65 = v316;
        static OSSignpostID.exclusive.getter();
        uint64_t v66 = OSSignposter.logHandle.getter();
        os_signpost_type_t v67 = static os_signpost_type_t.begin.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          unint64_t v335 = *v326;
          uint64_t v68 = v328;
          uint64_t v69 = v333;
          v335(v328, (uint64_t)v65, v333);
          uint64_t v70 = v63;
          uint64_t v71 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v71 = 0;
          os_signpost_id_t v72 = OSSignpostID.rawValue.getter();
          os_signpost_type_t v73 = v67;
          uint64_t v74 = v68;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, v73, v72, "config-install-kernel", "begin install kernel SLAM", v71, 2u);
          uint64_t v63 = v70;
          swift_slowDealloc();

          uint64_t v75 = v324;
          (*v324)(v68, v69);
          uint64_t v76 = v335;
        }
        else
        {

          uint64_t v76 = *v326;
          uint64_t v69 = v333;
          uint64_t v74 = v328;
          uint64_t v75 = v324;
        }
        unint64_t v335 = v76;
        v76(v74, (uint64_t)v65, v69);
        type metadata accessor for OSSignpostIntervalState();
        swift_allocObject();
        uint64_t v159 = OSSignpostIntervalState.init(id:isOpen:)();
        uint64_t v329 = *v75;
        v329(v65, v69);
        uint64_t v160 = *(void *)(v327 + 272);
        sub_100003EB0(&qword_1001D9B38);
        uint64_t v161 = swift_initStackObject();
        *(_OWORD *)(v161 + 16) = v340;
        *(unsigned char *)(v161 + 32) = 12;
        *(void *)(v161 + 64) = &type metadata for Int;
        *(void *)(v161 + 40) = v63;
        unint64_t v162 = sub_100104C38(v161);
        uint64_t v331 = v160;
        *(void *)&v301[-4] = __chkstk_darwin(v162, v163);
        __int16 v165 = (uint64_t *)&v164[4];
        uint64_t v135 = v164 + 8;
        os_unfair_lock_lock(v164 + 8);
        uint64_t v166 = v339;
        sub_100085FE4(v165);
        if (v166)
        {
LABEL_113:
          os_unfair_lock_unlock(v135);
          __break(1u);
          swift_release();
          __break(1u);
          JUMPOUT(0x1000A5F6CLL);
        }
        os_unfair_lock_unlock(v135);
        swift_bridgeObjectRelease();
        uint64_t v338 = v159;
        int v167 = v336;
        break;
    }
    sub_10005CF44((uint64_t)v342);
    uint64_t v5 = 0;
    if (v330) {
      uint64_t v175 = 4;
    }
    else {
      uint64_t v175 = 1;
    }
    switch(v167)
    {
      case 1:
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v244 = type metadata accessor for OSSignposter();
        sub_100003E78(v244, (uint64_t)qword_1001DCE28);
        uint64_t v245 = OSSignposter.logHandle.getter();
        uint64_t v246 = v304;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v247 = static os_signpost_type_t.end.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          uint64_t v339 = 0;
          swift_retain();
          uint64_t v248 = v309;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          int v249 = (*v315)(v248, v322);
          unint64_t v250 = "[Error] Interval already ended";
          if (v249 != v314)
          {
            (*v302)(v309, v322);
            unint64_t v250 = "end cleanup SLAM";
          }
          unint64_t v251 = v328;
          uint64_t v252 = v304;
          uint64_t v253 = v333;
          v335(v328, v304, v333);
          uint64_t v254 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v254 = 0;
          os_signpost_id_t v255 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v245, v247, v255, "config-install-cleanupSLAM", v250, v254, 2u);
          swift_slowDealloc();
          swift_release();

          sub_1000AA7EC((uint64_t)v342);
          uint64_t v256 = v252;
          uint64_t v257 = v329;
          v329((char *)v256, v253);
          v257(v251, v253);
          a1 = v323;
          uint64_t v5 = v339;
          uint64_t v258 = v337;
        }
        else
        {
          swift_release();

          sub_1000AA7EC((uint64_t)v342);
          v329((char *)v246, v333);
          a1 = v323;
          uint64_t v258 = v337;
        }
        goto LABEL_3;
      case 2:
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v210 = type metadata accessor for OSSignposter();
        sub_100003E78(v210, (uint64_t)qword_1001DCE28);
        uint64_t v211 = OSSignposter.logHandle.getter();
        os_log_type_t v212 = v305;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v213 = static os_signpost_type_t.end.getter();
        char v214 = OS_os_log.signpostsEnabled.getter();
        uint64_t v330 = v175;
        if (v214)
        {
          uint64_t v339 = 0;
          swift_retain();
          uint64_t v215 = v310;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          int v216 = (*v315)(v215, v322);
          uint64_t v217 = "[Error] Interval already ended";
          if (v216 != v314)
          {
            (*v302)(v310, v322);
            uint64_t v217 = "end global config SLAM";
          }
          uint64_t v218 = v328;
          uint64_t v219 = v305;
          uint64_t v220 = v333;
          v335(v328, (uint64_t)v305, v333);
          unint64_t v221 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v221 = 0;
          os_signpost_id_t v222 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v211, v213, v222, "config-install-global", v217, v221, 2u);
          swift_slowDealloc();

          uint64_t v223 = v219;
          uint64_t v224 = v329;
          v329(v223, v220);
          uint64_t v225 = ((uint64_t (*)(char *, uint64_t))v224)(v218, v220);
          uint64_t v5 = v339;
        }
        else
        {

          uint64_t v225 = ((uint64_t (*)(char *, uint64_t))v329)(v212, v333);
        }
        v341[0] = 2;
        __chkstk_darwin(v225, v226);
        *(void *)&v301[-4] = v341;
        uint64_t v262 = (uint64_t *)&v261[4];
        uint64_t v135 = v261 + 8;
        os_unfair_lock_lock(v261 + 8);
        sub_1000ACE18(v262);
        if (v5) {
          goto LABEL_113;
        }
        os_unfair_lock_unlock(v135);
        sub_100003EB0(&qword_1001D9B38);
        uint64_t v263 = swift_initStackObject();
        *(_OWORD *)(v263 + 16) = v340;
        *(unsigned char *)(v263 + 32) = 13;
        *(void *)(v263 + 64) = &type metadata for Int;
        *(void *)(v263 + 40) = v330;
        unint64_t v264 = sub_100104C38(v263);
        *(void *)&v301[-4] = __chkstk_darwin(v264, v265);
        uint64_t v267 = (uint64_t *)&v266[4];
        uint64_t v268 = v266 + 8;
        os_unfair_lock_lock(v266 + 8);
        sub_100085FE4(v267);
        os_unfair_lock_unlock(v268);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        a1 = v323;
        if (isUniquelyReferenced_nonNull_native) {
          uint64_t v270 = v332;
        }
        else {
          uint64_t v270 = sub_10015B004(0, v332[2] + 1, 1, v332);
        }
        uint64_t v5 = 0;
        uint64_t v258 = v337;
        unint64_t v272 = v270[2];
        unint64_t v271 = v270[3];
        if (v272 >= v271 >> 1) {
          uint64_t v270 = sub_10015B004((void *)(v271 > 1), v272 + 1, 1, v270);
        }
        v270[2] = v272 + 1;
        uint64_t v332 = v270;
        uint64_t v273 = (char *)v270 + v272;
        char v274 = 21;
        break;
      case 3:
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v227 = type metadata accessor for OSSignposter();
        sub_100003E78(v227, (uint64_t)qword_1001DCE28);
        os_log_type_t v228 = OSSignposter.logHandle.getter();
        uint64_t v229 = v306;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v230 = static os_signpost_type_t.end.getter();
        char v231 = OS_os_log.signpostsEnabled.getter();
        uint64_t v330 = v175;
        if (v231)
        {
          uint64_t v339 = 0;
          swift_retain();
          unint64_t v232 = v311;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          int v233 = (*v315)(v232, v322);
          uint64_t v234 = "[Error] Interval already ended";
          if (v233 != v314)
          {
            (*v302)(v311, v322);
            uint64_t v234 = "end partner online profile SLAM";
          }
          uint64_t v235 = v328;
          unint64_t v236 = v306;
          uint64_t v237 = v333;
          v335(v328, (uint64_t)v306, v333);
          uint64_t v238 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v238 = 0;
          os_signpost_id_t v239 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v228, v230, v239, "config-install-profile", v234, v238, 2u);
          swift_slowDealloc();

          uint64_t v240 = v236;
          id v241 = v329;
          v329(v240, v237);
          uint64_t v242 = ((uint64_t (*)(char *, uint64_t))v241)(v235, v237);
          uint64_t v5 = v339;
        }
        else
        {

          uint64_t v242 = ((uint64_t (*)(char *, uint64_t))v329)(v229, v333);
        }
        v341[0] = 3;
        __chkstk_darwin(v242, v243);
        *(void *)&v301[-4] = v341;
        uint64_t v276 = (uint64_t *)&v275[4];
        uint64_t v135 = v275 + 8;
        os_unfair_lock_lock(v275 + 8);
        sub_1000ACE18(v276);
        if (!v5) {
          goto LABEL_91;
        }
        goto LABEL_113;
      case 4:
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v193 = type metadata accessor for OSSignposter();
        sub_100003E78(v193, (uint64_t)qword_1001DCE28);
        uint64_t v194 = OSSignposter.logHandle.getter();
        uint64_t v195 = v307;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v196 = static os_signpost_type_t.end.getter();
        char v197 = OS_os_log.signpostsEnabled.getter();
        uint64_t v330 = v175;
        if (v197)
        {
          uint64_t v339 = 0;
          swift_retain();
          unint64_t v198 = v312;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          int v199 = (*v315)(v198, v322);
          uint64_t v200 = "[Error] Interval already ended";
          if (v199 != v314)
          {
            (*v302)(v312, v322);
            uint64_t v200 = "end partner saf profile SLAM";
          }
          char v201 = v328;
          unint64_t v202 = v307;
          uint64_t v203 = v333;
          v335(v328, (uint64_t)v307, v333);
          uint64_t v204 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v204 = 0;
          os_signpost_id_t v205 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v194, v196, v205, "config-install-profile", v200, v204, 2u);
          swift_slowDealloc();

          uint64_t v206 = v202;
          uint64_t v207 = v329;
          v329(v206, v203);
          uint64_t v208 = ((uint64_t (*)(char *, uint64_t))v207)(v201, v203);
          uint64_t v5 = v339;
        }
        else
        {

          uint64_t v208 = ((uint64_t (*)(char *, uint64_t))v329)(v195, v333);
        }
        v341[0] = 3;
        __chkstk_darwin(v208, v209);
        *(void *)&v301[-4] = v341;
        uint64_t v260 = (uint64_t *)&v259[4];
        uint64_t v135 = v259 + 8;
        os_unfair_lock_lock(v259 + 8);
        sub_1000ACE18(v260);
        if (v5) {
          goto LABEL_113;
        }
LABEL_91:
        os_unfair_lock_unlock(v135);
        sub_100003EB0(&qword_1001D9B38);
        uint64_t v277 = swift_initStackObject();
        *(_OWORD *)(v277 + 16) = v340;
        *(unsigned char *)(v277 + 32) = 14;
        *(void *)(v277 + 64) = &type metadata for Int;
        *(void *)(v277 + 40) = v330;
        unint64_t v278 = sub_100104C38(v277);
        *(void *)&v301[-4] = __chkstk_darwin(v278, v279);
        uint64_t v281 = (uint64_t *)&v280[4];
        os_log_type_t v282 = v280 + 8;
        os_unfair_lock_lock(v280 + 8);
        sub_100085FE4(v281);
        os_unfair_lock_unlock(v282);
        swift_bridgeObjectRelease();
        char v283 = swift_isUniquelyReferenced_nonNull_native();
        a1 = v323;
        if (v283) {
          uint64_t v284 = v332;
        }
        else {
          uint64_t v284 = sub_10015B004(0, v332[2] + 1, 1, v332);
        }
        uint64_t v5 = 0;
        uint64_t v258 = v337;
        unint64_t v286 = v284[2];
        unint64_t v285 = v284[3];
        if (v286 >= v285 >> 1) {
          uint64_t v284 = sub_10015B004((void *)(v285 > 1), v286 + 1, 1, v284);
        }
        v284[2] = v286 + 1;
        uint64_t v332 = v284;
        uint64_t v273 = (char *)v284 + v286;
        char v274 = 22;
        break;
      default:
        if (qword_1001D9170 != -1) {
          swift_once();
        }
        uint64_t v176 = type metadata accessor for OSSignposter();
        sub_100003E78(v176, (uint64_t)qword_1001DCE28);
        char v177 = OSSignposter.logHandle.getter();
        unint64_t v178 = v303;
        OSSignpostIntervalState.signpostID.getter();
        os_signpost_type_t v179 = static os_signpost_type_t.end.getter();
        char v180 = OS_os_log.signpostsEnabled.getter();
        uint64_t v330 = v175;
        if (v180)
        {
          uint64_t v339 = 0;
          swift_retain();
          uint64_t v181 = v308;
          checkForErrorAndConsumeState(state:)();
          swift_release();
          int v182 = (*v315)(v181, v322);
          uint64_t v183 = "[Error] Interval already ended";
          if (v182 != v314)
          {
            (*v302)(v308, v322);
            uint64_t v183 = "end install kernel SLAM";
          }
          uint64_t v184 = v328;
          char v185 = v303;
          uint64_t v186 = v333;
          v335(v328, (uint64_t)v303, v333);
          unint64_t v187 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v187 = 0;
          os_signpost_id_t v188 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v177, v179, v188, "config-install-kernel", v183, v187, 2u);
          swift_slowDealloc();

          char v189 = v185;
          unint64_t v190 = v329;
          v329(v189, v186);
          uint64_t v191 = ((uint64_t (*)(char *, uint64_t))v190)(v184, v186);
          uint64_t v5 = v339;
        }
        else
        {

          uint64_t v191 = ((uint64_t (*)(char *, uint64_t))v329)(v178, v333);
        }
        v341[0] = 1;
        __chkstk_darwin(v191, v192);
        *(void *)&v301[-4] = v341;
        uint64_t v288 = (uint64_t *)&v287[4];
        uint64_t v135 = v287 + 8;
        os_unfair_lock_lock(v287 + 8);
        sub_1000ACE18(v288);
        if (v5) {
          goto LABEL_113;
        }
        os_unfair_lock_unlock(v135);
        sub_100003EB0(&qword_1001D9B38);
        uint64_t v289 = swift_initStackObject();
        *(_OWORD *)(v289 + 16) = v340;
        *(unsigned char *)(v289 + 32) = 12;
        *(void *)(v289 + 64) = &type metadata for Int;
        *(void *)(v289 + 40) = v330;
        unint64_t v290 = sub_100104C38(v289);
        *(void *)&v301[-4] = __chkstk_darwin(v290, v291);
        uint64_t v293 = (uint64_t *)&v292[4];
        uint64_t v294 = v292 + 8;
        os_unfair_lock_lock(v292 + 8);
        sub_100085FE4(v293);
        os_unfair_lock_unlock(v294);
        swift_bridgeObjectRelease();
        char v295 = swift_isUniquelyReferenced_nonNull_native();
        a1 = v323;
        if (v295) {
          uint64_t v296 = v332;
        }
        else {
          uint64_t v296 = sub_10015B004(0, v332[2] + 1, 1, v332);
        }
        uint64_t v5 = 0;
        uint64_t v258 = v337;
        unint64_t v298 = v296[2];
        unint64_t v297 = v296[3];
        if (v298 >= v297 >> 1) {
          uint64_t v296 = sub_10015B004((void *)(v297 > 1), v298 + 1, 1, v296);
        }
        v296[2] = v298 + 1;
        uint64_t v332 = v296;
        uint64_t v273 = (char *)v296 + v298;
        char v274 = 20;
        break;
    }
    v273[32] = v274;
    swift_release();
    sub_1000AA7EC((uint64_t)v342);
LABEL_3:
    uint64_t v58 = v334 + 88;
    uint64_t v57 = v258 - 1;
  }
  while (v57);
  swift_bridgeObjectRelease();
  if (v332[2]) {
    goto LABEL_109;
  }
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000A5F94(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000A6B80(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000A6000(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000A6000(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v84 = *a1;
      uint64_t v85 = -1;
      uint64_t v86 = 1;
      uint64_t v87 = *a1;
      do
      {
        uint64_t v88 = v85;
        uint64_t v89 = v87;
        do
        {
          uint64_t v90 = *(void *)(v89 + 16);
          if (*(void *)v89 < v90) {
            break;
          }
          if (!v84) {
            goto LABEL_145;
          }
          __int16 v91 = *(_WORD *)(v89 + 24);
          *(_OWORD *)(v89 + 16) = *(_OWORD *)v89;
          *(void *)uint64_t v89 = v90;
          *(_WORD *)(v89 + 8) = v91;
          v89 -= 16;
        }
        while (!__CFADD__(v88++, 1));
        ++v86;
        v87 += 16;
        --v85;
      }
      while (v86 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      os_signpost_type_t v93 = v12;
      uint64_t v104 = v9;
      if (v13 >= 2)
      {
        uint64_t v94 = *v102;
        do
        {
          unint64_t v95 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v94) {
            goto LABEL_149;
          }
          uint64_t v96 = v93;
          uint64_t v97 = *(void *)&v93[16 * v95 + 32];
          uint64_t v98 = *(void *)&v93[16 * v13 + 24];
          sub_1000A6700((char *)(v94 + 16 * v97), (char *)(v94 + 16 * *(void *)&v93[16 * v13 + 16]), v94 + 16 * v98, __dst);
          if (v1) {
            break;
          }
          if (v98 < v97) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v96 = sub_1000A6B34((uint64_t)v96);
          }
          if (v95 >= *((void *)v96 + 2)) {
            goto LABEL_138;
          }
          os_signpost_type_t v99 = &v96[16 * v95 + 32];
          *(void *)os_signpost_type_t v99 = v97;
          *((void *)v99 + 1) = v98;
          unint64_t v100 = *((void *)v96 + 2);
          if (v13 > v100) {
            goto LABEL_139;
          }
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          os_signpost_type_t v93 = v96;
          *((void *)v96 + 2) = v100 - 1;
          unint64_t v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v104[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    sub_100003EB0(&qword_1001DCF70);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v104 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v103 = *a1 + 32;
  uint64_t v101 = *a1 - 16;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v105 = v6;
  Swift::Int v106 = v3;
  uint64_t v107 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      uint64_t v15 = *(void *)(v11 + 16 * v10);
      uint64_t v16 = 16 * v14;
      uint64_t v17 = *(void *)(v11 + 16 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (void *)(v103 + 16 * v14);
        while (v17 >= v15 != *(v18 - 2) < *v18)
        {
          v18 += 2;
          if (v3 == ++v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v17 >= v15)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 16 * v10 - 16;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              uint64_t v23 = (_OWORD *)(v11 + v16);
              uint64_t v24 = (_OWORD *)(v11 + v19);
              uint64_t v25 = *(void *)(v11 + v16);
              __int16 v26 = *(_WORD *)(v11 + v16 + 8);
              if (v16 != v19 || v23 >= v24 + 1) {
                *uint64_t v23 = *v24;
              }
              uint64_t v22 = v11 + v19;
              *(void *)uint64_t v22 = v25;
              *(_WORD *)(v22 + 8) = v26;
            }
            ++v21;
            v19 -= 16;
            v16 += 16;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v27 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v27 >= v3) {
      Swift::Int v27 = v3;
    }
    if (v27 < v14) {
      break;
    }
    if (v10 != v27)
    {
      uint64_t v28 = v101 + 16 * v10;
      do
      {
        Swift::Int v29 = v14;
        uint64_t v30 = v28;
        do
        {
          uint64_t v31 = *(void *)(v30 + 16);
          if (*(void *)v30 < v31) {
            break;
          }
          if (!v11) {
            goto LABEL_146;
          }
          __int16 v32 = *(_WORD *)(v30 + 24);
          *(_OWORD *)(v30 + 16) = *(_OWORD *)v30;
          *(void *)uint64_t v30 = v31;
          *(_WORD *)(v30 + 8) = v32;
          v30 -= 16;
          ++v29;
        }
        while (v10 != v29);
        ++v10;
        v28 += 16;
      }
      while (v10 != v27);
      Swift::Int v10 = v27;
    }
LABEL_50:
    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_1000A6980(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v34 = *((void *)v12 + 2);
    unint64_t v33 = *((void *)v12 + 3);
    unint64_t v13 = v34 + 1;
    uint64_t v11 = v107;
    if (v34 >= v33 >> 1)
    {
      uint64_t v83 = sub_1000A6980((char *)(v33 > 1), v34 + 1, 1, v12);
      uint64_t v11 = v107;
      uint64_t v12 = v83;
    }
    *((void *)v12 + 2) = v13;
    uint64_t v35 = v12 + 32;
    uint64_t v36 = &v12[16 * v34 + 32];
    *(void *)uint64_t v36 = v14;
    *((void *)v36 + 1) = v10;
    if (v34)
    {
      while (1)
      {
        unint64_t v37 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v42 = &v35[16 * v13];
          uint64_t v43 = *((void *)v42 - 8);
          uint64_t v44 = *((void *)v42 - 7);
          BOOL v48 = __OFSUB__(v44, v43);
          uint64_t v45 = v44 - v43;
          if (v48) {
            goto LABEL_124;
          }
          uint64_t v47 = *((void *)v42 - 6);
          uint64_t v46 = *((void *)v42 - 5);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v40 = v46 - v47;
          char v41 = v48;
          if (v48) {
            goto LABEL_125;
          }
          unint64_t v49 = v13 - 2;
          uint64_t v50 = &v35[16 * v13 - 32];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v48 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v48) {
            goto LABEL_127;
          }
          BOOL v48 = __OFADD__(v40, v53);
          uint64_t v54 = v40 + v53;
          if (v48) {
            goto LABEL_130;
          }
          if (v54 >= v45)
          {
            os_signpost_id_t v72 = &v35[16 * v37];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v48 = __OFSUB__(v73, v74);
            uint64_t v75 = v73 - v74;
            if (v48) {
              goto LABEL_134;
            }
            BOOL v65 = v40 < v75;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v66 = *((void *)v12 + 4);
            uint64_t v67 = *((void *)v12 + 5);
            BOOL v48 = __OFSUB__(v67, v66);
            uint64_t v59 = v67 - v66;
            char v60 = v48;
            goto LABEL_81;
          }
          uint64_t v39 = *((void *)v12 + 4);
          uint64_t v38 = *((void *)v12 + 5);
          BOOL v48 = __OFSUB__(v38, v39);
          uint64_t v40 = v38 - v39;
          char v41 = v48;
        }
        if (v41) {
          goto LABEL_126;
        }
        unint64_t v49 = v13 - 2;
        uint64_t v55 = &v35[16 * v13 - 32];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v58 = __OFSUB__(v56, v57);
        uint64_t v59 = v56 - v57;
        char v60 = v58;
        if (v58) {
          goto LABEL_129;
        }
        long long v61 = &v35[16 * v37];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v48 = __OFSUB__(v62, v63);
        uint64_t v64 = v62 - v63;
        if (v48) {
          goto LABEL_132;
        }
        if (__OFADD__(v59, v64)) {
          goto LABEL_133;
        }
        if (v59 + v64 >= v40)
        {
          BOOL v65 = v40 < v64;
LABEL_87:
          if (v65) {
            unint64_t v37 = v49;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v60) {
          goto LABEL_128;
        }
        uint64_t v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_131;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11) {
          goto LABEL_147;
        }
        uint64_t v77 = v12;
        uint64_t v78 = &v35[16 * v76];
        uint64_t v79 = *(void *)v78;
        os_signpost_type_t v80 = &v35[16 * v37];
        uint64_t v81 = *((void *)v80 + 1);
        sub_1000A6700((char *)(v11 + 16 * *(void *)v78), (char *)(v11 + 16 * *(void *)v80), v11 + 16 * v81, __dst);
        if (v1) {
          goto LABEL_97;
        }
        if (v81 < v79) {
          goto LABEL_121;
        }
        if (v37 > *((void *)v77 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v78 = v79;
        *(void *)&v35[16 * v76 + 8] = v81;
        unint64_t v82 = *((void *)v77 + 2);
        if (v37 >= v82) {
          goto LABEL_123;
        }
        uint64_t v12 = v77;
        unint64_t v13 = v82 - 1;
        memmove(&v35[16 * v37], v80 + 16, 16 * (v82 - 1 - v37));
        *((void *)v77 + 2) = v82 - 1;
        uint64_t v11 = v107;
        if (v82 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v105;
    Swift::Int v3 = v106;
    if (v10 >= v106)
    {
      uint64_t v9 = v104;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A6700(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v25 = __dst;
  __int16 v26 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      uint64_t v17 = 16 * v13;
      if (__dst != a2 || &a2[v17] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v18 = &v4[v17];
      uint64_t v24 = &v4[v17];
      __int16 v26 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        uint64_t v19 = (char *)(a3 - 16);
        Swift::Int v20 = v6;
        while (1)
        {
          Swift::Int v21 = v19 + 16;
          uint64_t v22 = *((void *)v20 - 2);
          v20 -= 16;
          if (v22 >= *((void *)v18 - 2))
          {
            if (v21 != v6 || v19 >= v6) {
              *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
            }
            __int16 v26 = v20;
            if (v20 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v24 = v18 - 16;
            if (v21 < v18 || v19 >= v18 || v21 != v18) {
              *(_OWORD *)uint64_t v19 = *((_OWORD *)v18 - 1);
            }
            Swift::Int v20 = v6;
            v18 -= 16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          v19 -= 16;
          Swift::Int v6 = v20;
          if (v18 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    size_t v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst) {
      memmove(__dst, __src, v14);
    }
    uint64_t v15 = &v4[v14];
    uint64_t v24 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      do
      {
        if (*(void *)v4 >= *(void *)v6)
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        else
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v25 = v4;
          uint64_t v16 = v6;
        }
        v7 += 16;
        if (v4 >= v15) {
          break;
        }
        Swift::Int v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      __int16 v26 = v7;
    }
LABEL_42:
    sub_1000A6A7C((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000A6980(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100003EB0(&qword_1001DCF78);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000A6A7C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

char *sub_1000A6B34(uint64_t a1)
{
  return sub_1000A6980(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A6B48(uint64_t *a1, unsigned __int8 *a2)
{
  return sub_1001164B0(a1, *a2);
}

uint64_t sub_1000A6B64(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1001157C8(a1, *a2);
}

uint64_t sub_1000A6B80(uint64_t a1)
{
  return sub_10014C4AC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000A6B94(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (a3)
    {
      if (!a7 || (sub_10014A9C0(a3, a7) & 1) == 0) {
        return 0;
      }
    }
    else if (a7)
    {
      return 0;
    }
    if (a4)
    {
      if (a8 && (sub_10014A9C0(a4, a8) & 1) != 0) {
        return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

double sub_1000A6C3C(_OWORD *a1)
{
  double result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1000A6C5C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100198770
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100198790 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001001987B0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1000A6DA0(void *a1)
{
  uint64_t v3 = sub_100003EB0(&qword_1001DD040);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  int64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[4];
  sub_100006788(a1, a1[3]);
  sub_1000ACB10();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100006520((uint64_t)a1);
  }
  else
  {
    LOBYTE(v13) = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100003EB0((uint64_t *)&unk_1001DA570);
    char v12 = 1;
    uint64_t v10 = sub_10001EF84(&qword_1001D9B10);
    swift_bridgeObjectRetain();
    uint64_t v11 = v10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v12 = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRetain();
    sub_100006520((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1000A707C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  int64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1;
  sub_1000FAFAC((uint64_t)v23);
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1000FE9E0((uint64_t)v22);
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100003E78(v9, (uint64_t)qword_1001DCE10);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    int v12 = v11;
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(void *)&v21[0] = v20;
      *(_DWORD *)uint64_t v13 = 136315394;
      int v19 = v12;
      uint64_t v24 = sub_100005EB8(0x7065642874696E69, 0xEC000000293A746FLL, (uint64_t *)v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v18 = v13 + 14;
      uint64_t v14 = sub_100137C58();
      uint64_t v24 = sub_100005EB8(v14, v15, (uint64_t *)v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v19, "ConfiguratorBackend.%s, BackendSetting: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = sub_100006788(v23, v23[3]);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, *v16 + OBJC_IVAR____TtC9SPREngine11Environment_configuratorBackendURL, v3);
    sub_100006788(v22, v22[3]);
    sub_100049338(v21);
    swift_release();
    type metadata accessor for ConfiguratorBackend(0);
    uint64_t v8 = swift_allocObject();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_configuratorUrl, v7, v3);
    sub_10001F1F0(v21, v8 + OBJC_IVAR____TtC9SPREngine19ConfiguratorBackend_channel);
    sub_100006520((uint64_t)v22);
    sub_100006520((uint64_t)v23);
  }
  return v8;
}

uint64_t sub_1000A7414(void *a1)
{
  if ((related decl 'e' for SPRHTTPErrorCode.isServerError.getter() & 1) == 0)
  {
    uint64_t v3 = related decl 'e' for SPRHTTPErrorCode.serverCode.getter();
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t v6 = v4;
      if (v3 == 0x303030342D53434BLL && v4 == 0xE800000000000000) {
        goto LABEL_31;
      }
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v8 = v5 == 0x373030342D53434BLL && v6 == 0xE800000000000000;
      BOOL v9 = v8;
      if ((v7 & 1) != 0
        || v9
        || ((char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v5 == 0x383030342D53434BLL)
          ? (BOOL v11 = v6 == 0xE800000000000000)
          : (BOOL v11 = 0),
            !v11 ? (char v12 = 0) : (char v12 = 1),
            (v10 & 1) != 0
         || (v12 & 1) != 0
         || ((char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), v5 == 0x393030342D53434BLL)
           ? (BOOL v14 = v6 == 0xE800000000000000)
           : (BOOL v14 = 0),
             !v14 ? (char v15 = 0) : (char v15 = 1),
             (v13 & 1) != 0 || (v15 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
      {
LABEL_31:
        swift_bridgeObjectRelease();
        uint64_t v2 = 2016;
        goto LABEL_102;
      }
      if (v5 == 0x313030342D53434BLL && v6 == 0xE800000000000000
        || ((char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), v5 == 0x323030342D53434BLL)
          ? (BOOL v17 = v6 == 0xE800000000000000)
          : (BOOL v17 = 0),
            !v17 ? (char v18 = 0) : (char v18 = 1),
            (v16 & 1) != 0
         || (v18 & 1) != 0
         || ((char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), v5 == 0x333030342D53434BLL)
           ? (BOOL v20 = v6 == 0xE800000000000000)
           : (BOOL v20 = 0),
             !v20 ? (char v21 = 0) : (char v21 = 1),
             (v19 & 1) != 0 || (v21 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = 2015;
        goto LABEL_102;
      }
      if (v5 == 0x343030342D53434BLL && v6 == 0xE800000000000000) {
        goto LABEL_95;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v23 = v5 == 0x353030342D53434BLL && v6 == 0xE800000000000000;
      BOOL v24 = v23;
      if ((v22 & 1) != 0 || v24) {
        goto LABEL_95;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v26 = v5 == 0x363030342D53434BLL && v6 == 0xE800000000000000;
      BOOL v27 = v26;
      if ((v25 & 1) != 0 || v27) {
        goto LABEL_95;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v29 = v5 == 0x303430342D53434BLL && v6 == 0xE800000000000000;
      BOOL v30 = v29;
      if ((v28 & 1) != 0
        || v30
        || ((char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(), v5 == 0x363430342D53434BLL)
          ? (BOOL v32 = v6 == 0xE800000000000000)
          : (BOOL v32 = 0),
            !v32 ? (char v33 = 0) : (char v33 = 1),
            (v31 & 1) != 0
         || (v33 & 1) != 0
         || ((char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(), v5 == 0x323130342D53434BLL)
           ? (BOOL v35 = v6 == 0xE800000000000000)
           : (BOOL v35 = 0),
             !v35 ? (char v36 = 0) : (char v36 = 1),
             (v34 & 1) != 0 || (v36 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))
      {
LABEL_95:
        swift_bridgeObjectRelease();
        uint64_t v2 = 2011;
        goto LABEL_102;
      }
      if (v5 == 0x353430342D53434BLL && v6 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = 2031;
        goto LABEL_102;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v37)
      {
        uint64_t v2 = 2031;
        goto LABEL_102;
      }
    }
    uint64_t v2 = 2000;
    goto LABEL_102;
  }
  uint64_t v2 = 2016;
LABEL_102:
  id v38 = a1;
  uint64_t v39 = sub_10002A974(v2, 0, 0, (uint64_t)a1);

  return v39;
}

uint64_t *sub_1000A78EC(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v9 = a1[17];
  uint64_t v10 = a1[16];
  uint64_t v8 = a1[18];
  sub_100038D8C(*a1, a1[1]);
  swift_bridgeObjectRetain();
  sub_100038D8C(v2, v3);
  swift_bridgeObjectRetain();
  sub_100038D8C(v4, v5);
  sub_1000A79E0(v6);
  sub_1000A7A34(v12, v11, v10, v9, v8);
  return a1;
}

uint64_t sub_1000A79E0(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1000A7A34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_100038D8C(a3, a4);
    sub_1000A79E0(a5);
  }
}

uint64_t *sub_1000A7AB4(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v9 = a1[17];
  uint64_t v10 = a1[16];
  uint64_t v8 = a1[18];
  sub_10000BF70(*a1, a1[1]);
  swift_bridgeObjectRelease();
  sub_10000BF70(v2, v3);
  swift_bridgeObjectRelease();
  sub_10000BF70(v4, v5);
  sub_1000A7BA8(v6);
  sub_1000A7BF8(v12, v11, v10, v9, v8);
  return a1;
}

uint64_t sub_1000A7BA8(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000A7BF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_10000BF70(a3, a4);
    sub_1000A7BA8(a5);
  }
}

unint64_t sub_1000A7C78()
{
  unint64_t result = qword_1001DCF38;
  if (!qword_1001DCF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001DCF38);
  }
  return result;
}

uint64_t sub_1000A7CCC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000A7CDC()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A7D14()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

Swift::Int sub_1000A7D6C(uint64_t a1, unsigned char *a2)
{
  return sub_10009E1B0(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1000A7D7C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1000A7D94(uint64_t a1)
{
  return a1;
}

void sub_1000A7DF8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19)
{
  if (a4)
  {
    sub_10000BF70(a1, a2);
    swift_bridgeObjectRelease();
    sub_10000BF70(a5, a6);
    swift_bridgeObjectRelease();
    sub_10000BF70(a9, a10);
    sub_1000A7BA8(a11);
    sub_1000A7BF8(a15, a16, a17, a18, a19);
  }
}

uint64_t sub_1000A7F00(uint64_t a1)
{
  return sub_1001157C8(a1, **(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_1000A7F20()
{
  uint64_t v1 = *(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  swift_release();
  swift_release();
  swift_release();
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v9) {
    v10(v0 + v3, v5);
  }
  uint64_t v11 = (v3 + v4 + v7) & ~v7;
  unint64_t v12 = ((v11 + v8) & 0xFFFFFFFFFFFFFFF8) + 16;
  v10(v0 + v11, v5);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v12, v2 | v7 | 7);
}

void sub_1000A80BC(uint64_t a1, void (*a2)(char *, char *, uint64_t))
{
  uint64_t v5 = *(void *)(sub_100003EB0((uint64_t *)&unk_1001DF8D0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_100099C04(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void (**)(void, void *))(v2 + 32), *(void *)(v2 + 40), v2 + v6, (char *)(v2 + v9), *(unsigned char *)(v2 + v9 + *(void *)(v8 + 64)), *(void *)(((v9 + *(void *)(v8 + 64)) & 0xFFFFFFFFFFFFFFF8) + v2 + 8));
}

uint64_t _s14InstallPackageVMa(uint64_t a1)
{
  return sub_100008234(a1, qword_1001DCFE8);
}

uint64_t sub_1000A8200(uint64_t *a1)
{
  return sub_1001164B0(a1, **(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_1000A8220(uint64_t a1)
{
  uint64_t v2 = _s14InstallPackageVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A827C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 1;
  }
  uint64_t v3 = a1 + 4;
  uint64_t v2 = a1[4];
  unint64_t v4 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((unint64_t)(String.count.getter() - 33) >= 0xFFFFFFFFFFFFFFE0)
  {
    uint64_t v11 = 1;
    while (2)
    {
      uint64_t v12 = HIBYTE(v4) & 0xF;
      v17[0] = v2;
      v17[1] = v4;
      if ((v4 & 0x2000000000000000) == 0) {
        uint64_t v12 = v2 & 0xFFFFFFFFFFFFLL;
      }
      long long v17[2] = 0;
      void v17[3] = v12;
      swift_bridgeObjectRetain();
      while ((unint64_t)String.Iterator.next()().value._object)
      {
        Character.hexDigitValue.getter();
        char v14 = v13;
        swift_bridgeObjectRelease();
        if (v14)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_1001D9168 != -1) {
            swift_once();
          }
          uint64_t v16 = type metadata accessor for Logger();
          sub_100003E78(v16, (uint64_t)qword_1001DCE10);
          swift_bridgeObjectRetain();
          unint64_t v6 = Logger.logObject.getter();
          os_log_type_t v7 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v6, v7))
          {
            uint64_t v8 = (uint8_t *)swift_slowAlloc();
            v17[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v8 = 136315138;
            swift_bridgeObjectRetain();
            sub_100005EB8(v2, v4, v17);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            unint64_t v9 = "%s contains non-hex digit";
            goto LABEL_22;
          }
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v11 == v1)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      char v15 = &v3[2 * v11];
      uint64_t v2 = *v15;
      unint64_t v4 = v15[1];
      swift_bridgeObjectRetain();
      ++v11;
      if ((unint64_t)(String.count.getter() - 33) >= 0xFFFFFFFFFFFFFFE0) {
        continue;
      }
      break;
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100003E78(v5, (uint64_t)qword_1001DCE10);
  swift_bridgeObjectRetain();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    sub_100005EB8(v2, v4, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v9 = "incorrect length %s";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v6, v7, v9, v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
LABEL_23:

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t sub_1000A8624(uint64_t result, void *a2)
{
  if (result)
  {
    if (result == 1) {
      return result;
    }
    if ((sub_1000A827C((void *)result) & 1) == 0)
    {
      if (qword_1001D9168 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100003E78(v3, (uint64_t)qword_1001DCE10);
      unint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_16;
      }
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      os_log_type_t v7 = "bypassAid is invalid";
      goto LABEL_15;
    }
  }
  if (!a2 || (sub_1000A827C(a2) & 1) != 0) {
    return 1;
  }
  if (qword_1001D9168 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100003E78(v8, (uint64_t)qword_1001DCE10);
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v6 = 0;
    os_log_type_t v7 = "supportCnpTrx is invalid";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
    swift_slowDealloc();
  }
LABEL_16:

  return 0;
}

unint64_t sub_1000A87C0@<X0>(id a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int v66 = a5;
  uint64_t v65 = a4;
  LODWORD(v7) = a3;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void (***)(char *, void *))(v11 - 8);
  __chkstk_darwin(v11, v13);
  char v15 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t result = (unint64_t)sub_10005EC70();
  uint64_t v17 = v6;
  if (v6) {
    return result;
  }
  uint64_t v74 = v12;
  uint64_t v64 = a6;
  uint64_t v71 = v15;
  os_signpost_id_t v72 = (void *)v11;
  unint64_t v18 = result >> 62;
  unint64_t v77 = result;
  if (result >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain_n();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    char v21 = v74;
    if (v19) {
      goto LABEL_4;
    }
LABEL_42:
    swift_bridgeObjectRelease_n();
    if (qword_1001D9168 == -1)
    {
LABEL_43:
      sub_100003E78((uint64_t)v72, (uint64_t)qword_1001DCE10);
      swift_bridgeObjectRetain_n();
      BOOL v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        char v60 = (uint8_t *)swift_slowAlloc();
        os_signpost_type_t v80 = (void *)swift_slowAlloc();
        *(_DWORD *)char v60 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v79 = sub_100005EB8((uint64_t)a1, a2, (uint64_t *)&v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "no SLAM script in %s", v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10002A974(2027, 0, 0, 0);
      return swift_willThrow();
    }
LABEL_49:
    swift_once();
    goto LABEL_43;
  }
  uint64_t v19 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  char v21 = v74;
  if (!v19) {
    goto LABEL_42;
  }
LABEL_4:
  unint64_t v63 = v18;
  v61[1] = v17;
  int v62 = (int)v7;
  uint64_t v70 = (uint64_t)a1;
  unint64_t v18 = v77;
  unint64_t v78 = v77 & 0xC000000000000001;
  unint64_t v76 = (void (**)(char *, uint64_t, id))(v21 + 2);
  uint64_t v74 = v21 + 1;
  uint64_t v17 = 4;
  *(void *)&long long v20 = 136316162;
  long long v68 = v20;
  uint64_t v67 = (char *)&type metadata for Any + 8;
  os_log_type_t v7 = v71;
  a1 = v72;
  unint64_t v69 = a2;
  uint64_t v75 = (void *)v19;
  do
  {
    if (v78) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v23 = *(id *)(v18 + 8 * v17);
    }
    BOOL v24 = v23;
    uint64_t v25 = v17 - 3;
    if (__OFADD__(v17 - 4, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (qword_1001D9168 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_100003E78((uint64_t)a1, (uint64_t)qword_1001DCE10);
    (*v76)(v7, v26, a1);
    id v27 = v24;
    swift_bridgeObjectRetain_n();
    id v22 = v27;
    char v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v73 = v17 - 3;
      uint64_t v30 = swift_slowAlloc();
      os_signpost_type_t v80 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = v68;
      id v31 = [v22 scriptName];
      if (!v31) {
        goto LABEL_51;
      }
      BOOL v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      *(void *)(v30 + 4) = sub_100005EB8(v33, v35, (uint64_t *)&v80);
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2048;
      id v36 = [v22 scriptID];

      *(void *)(v30 + 14) = v36;
      *(_WORD *)(v30 + 22) = 1024;
      LODWORD(v36) = [v22 scriptType];

      *(_DWORD *)(v30 + 24) = v36;
      *(_WORD *)(v30 + 28) = 1024;
      LODWORD(v36) = [v22 apduCount];

      *(_DWORD *)(v30 + 30) = v36;
      *(_WORD *)(v30 + 34) = 2080;
      a2 = v69;
      swift_bridgeObjectRetain();
      *(void *)(v30 + 36) = sub_100005EB8(v70, a2, (uint64_t *)&v80);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "script name: %s, script id: %llu, script type: %u, apdu count: %u. at location: %s", (uint8_t *)v30, 0x2Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      os_log_type_t v7 = v71;
      a1 = v72;
      (*v74)(v71, v72);
      unint64_t v18 = v77;
      uint64_t v25 = v73;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*v74)(v7, a1);
    }
    ++v17;
    id v22 = v75;
  }
  while ((void *)v25 != v75);
  swift_bridgeObjectRelease();
  if (!v78)
  {
    uint64_t v17 = v70;
    if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_51:

      unint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_52;
    }
    a1 = *(id *)(v18 + 32);
    if (v63) {
      goto LABEL_34;
    }
LABEL_18:
    uint64_t v37 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v37) {
      goto LABEL_19;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v39 = _swiftEmptyArrayStorage;
    uint64_t v45 = _swiftEmptyArrayStorage[2];
    if (!v45) {
      goto LABEL_36;
    }
LABEL_28:
    uint64_t v46 = v39 + 4;
    uint64_t v47 = 3;
    while (1)
    {
      uint64_t v48 = *v46++;
      BOOL v49 = __OFADD__(v47, v48);
      v47 += v48;
      if (v49) {
        break;
      }
      if (!--v45) {
        goto LABEL_37;
      }
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  a1 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = v70;
  if (!v63) {
    goto LABEL_18;
  }
LABEL_34:
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v37) {
    goto LABEL_35;
  }
LABEL_19:
  os_signpost_type_t v80 = _swiftEmptyArrayStorage;
  sub_10014BABC(0, v37 & ~(v37 >> 63), 0);
  if (v37 < 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v38 = 0;
  uint64_t v39 = v80;
  do
  {
    if (v78) {
      id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v40 = *(id *)(v18 + 8 * v38 + 32);
    }
    char v41 = v40;
    unsigned int v42 = [v40 apduCount];

    os_signpost_type_t v80 = v39;
    unint64_t v44 = v39[2];
    unint64_t v43 = v39[3];
    os_log_type_t v7 = (char *)(v44 + 1);
    if (v44 >= v43 >> 1)
    {
      sub_10014BABC(v43 > 1, v44 + 1, 1);
      uint64_t v39 = v80;
    }
    ++v38;
    uint64_t v39[2] = v7;
    v39[v44 + 4] = v42;
    unint64_t v18 = v77;
  }
  while (v37 != v38);
  swift_bridgeObjectRelease();
  uint64_t v45 = v39[2];
  if (v45) {
    goto LABEL_28;
  }
LABEL_36:
  uint64_t v47 = 3;
LABEL_37:
  swift_bridgeObjectRelease();
  unsigned int v50 = [a1 scriptType];
  unint64_t result = (unint64_t)[a1 scriptName];
  if (result)
  {
    uint64_t v51 = (void *)result;
    uint64_t v52 = v50;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;

    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v57 = v64;
    uint64_t v56 = v65;
    *uint64_t v64 = v17;
    v57[1] = a2;
    void v57[2] = 0;
    v57[3] = 0;
    *((unsigned char *)v57 + 32) = 0;
    v57[5] = v47;
    v57[6] = v52;
    v57[7] = v56;
    *((unsigned char *)v57 + 64) = v66 & 1;
    *((unsigned char *)v57 + 65) = v62;
    v57[9] = v53;
    v57[10] = v55;
    return result;
  }
LABEL_52:
  __break(1u);
  return result;
}