void sub_100002A98(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  int v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  unsigned char v18[128];

  if (*(void *)(*(void *)(a1 + 32) + 1232))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v2 = [*(id *)(a1 + 40) elements];
    v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(void *)v15;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v15 != v6) {
            objc_enumerationMutation(v2);
          }
          v8 = [*(id *)(*((void *)&v14 + 1) + 8 * i) identifier];
          v9 = v8;
          if (v8) {
            v5 |= [v8 isEqual:@"com.apple.SharingViewService"];
          }
        }
        v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v4);
    }
    else
    {
      LOBYTE(v5) = 0;
    }

    if (*(unsigned char *)(*(void *)(a1 + 32) + 1240) != (v5 & 1))
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v10 = "yes";
        if (v5) {
          v11 = "no";
        }
        else {
          v11 = "yes";
        }
        if ((v5 & 1) == 0) {
          v10 = "no";
        }
        v12 = v11;
        v13 = v10;
        LogPrintF();
      }
      *(unsigned char *)(*(void *)(a1 + 32) + 1240) = v5 & 1;
      [*(id *)(a1 + 32) _update:v12, v13];
    }
  }
}

void sub_100002C70(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 312);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100002A98;
  v8[3] = &unk_100232A10;
  v8[4] = v5;
  id v9 = v4;
  id v7 = v4;
  dispatch_async(v6, v8);
}

void sub_100003000(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 24) = *(_DWORD *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 28))
  {
    v2 = (void *)qword_10026AAD0;
    [v2 updateAudioSessionControl:];
  }
  else
  {
    id v4 = [*(id *)(v1 + 32) remoteObjectProxy];
    [v4 audioSessionControlUpdate:*(void *)(a1 + 32)];
  }
}

void sub_100003270(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100003284(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 28))
  {
    if (dword_100260B70 <= 90 && (dword_100260B70 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else
  {
    if (dword_100260B70 <= 30 && (dword_100260B70 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    v2 = [*(id *)(*(void *)(a1 + 32) + 32) remoteObjectProxy];
    uint64_t v3 = *(unsigned int *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 68);
    v6[0] = *(_OWORD *)(a1 + 52);
    v6[1] = v5;
    [v2 setMuteAction:v3 auditToken:v6 bundleIdentifier:v4];
  }
}

void sub_10000343C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 8))
  {
    NSErrorF();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    if (dword_100260B70 <= 90 && (dword_100260B70 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
  }
  else
  {
    *(unsigned char *)(v2 + 8) = 1;
    id v3 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v4 = *(void *)(a1 + 32);
    long long v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    v6 = *(void **)(a1 + 32);
    [v6 _activate:0];
  }
}

void sub_100003770(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = v3;
  if (v3)
  {
    id v4 = v3;
    if (dword_100260B70 <= 90)
    {
      if (dword_100260B70 != -1 || (v5 = _LogCategory_Initialize(), id v4 = v10, v5))
      {
        id v9 = v4;
        LogPrintF();
        id v4 = v10;
      }
    }
    [*(id *)(a1 + 32) _reportError:v4, v9];
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if (dword_100260B70 > 30 || dword_100260B70 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_17;
    }
  }
  else if (dword_100260B70 > 30 || dword_100260B70 == -1 && !_LogCategory_Initialize())
  {
    goto LABEL_17;
  }
  LogPrintF();
LABEL_17:
  v6 = (void (**)(id, void))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 16));
  uint64_t v7 = *(void *)(a1 + 32);
  v8 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = 0;

  if (v6) {
    v6[2](v6, 0);
  }

LABEL_20:
}

void sub_1000039F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100003AB0;
  v7[3] = &unk_100232670;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100003AB0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100003CFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 40))
  {
    if (dword_100260B70 <= 30 && (dword_100260B70 != -1 || _LogCategory_Initialize())) {
LABEL_7:
    }
      LogPrintF();
  }
  else if (dword_100260B70 <= 90 && (dword_100260B70 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_7;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

uint64_t sub_100003E08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100003FB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _interrupted];
}

id sub_100003FB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;

  id v4 = *(void **)(a1 + 32);

  return [v4 _invalidated];
}

void sub_10000415C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 29))
  {
    *(unsigned char *)(v1 + 29) = 1;
    if (!*(unsigned char *)(*(void *)(a1 + 32) + 30)
      && dword_100260B70 <= 30
      && (dword_100260B70 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v3 + 28))
    {
      [(id)v3 _invalidateDirect];
      uint64_t v3 = *(void *)(a1 + 32);
    }
    if (*(void *)(v3 + 32))
    {
      [*(id *)(v3 + 32) invalidate];
      uint64_t v3 = *(void *)(a1 + 32);
    }
    uint64_t v7 = (void (**)(id, void *))objc_retainBlock(*(id *)(v3 + 16));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0;

    if (v7)
    {
      id v6 = BTErrorF();
      v7[2](v7, v6);
    }
    [*(id *)(a1 + 32) _invalidated];
  }
}

void sub_10000431C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100004390;
  block[3] = &unk_100232710;
  block[4] = v1;
  dispatch_async(v2, block);
}

id sub_100004390(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 28) = 0;
  return [*(id *)(a1 + 32) _invalidated];
}

uint64_t sub_1000046E8()
{
  if (qword_100263E40 != -1) {
    dispatch_once(&qword_100263E40, &stru_100232810);
  }
  return atomic_fetch_add((atomic_uint *volatile)&unk_100263E48, 1u) + 1;
}

void sub_100004738(id a1)
{
  unk_100263E48 = (unsigned __int16)word_100263E4A << 16;
}

id sub_1000048F8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_100004B90(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _activateXPCCompleted:a2];
}

BOOL sub_100004D94(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 56));
  id v6 = v5;
  if (v5) {
    (*((void (**)(id, id))v5 + 2))(v5, v4);
  }

  return v6 != 0;
}

void sub_100004F00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_100004F14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[4]) {
    return _[result xpcReceivedMessage:a2];
  }
  return result;
}

void *sub_10000506C(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 24))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + 24) = 1;
    if (dword_100260D60 <= 30 && (dword_100260D60 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v3 = (id)v2[4];
    objc_sync_enter(v3);
    id v4 = (_xpc_connection_s *)*(id *)(v2[4] + 32);
    id v5 = v4;
    if (v4) {
      xpc_connection_cancel(v4);
    }

    objc_sync_exit(v3);
    id v6 = (void *)v2[4];
    return [v6 _invalidated];
  }
  return result;
}

void sub_100005170(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000053BC(void *a1)
{
  if (dword_100260D60 <= 30 && (dword_100260D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];

  return [v2 _sendAccessoryEventMessage:v4 eventType:2 destinationIdentifier:v3 completionHandler:v5];
}

id sub_10000553C(void *a1)
{
  if (dword_100260D60 <= 30 && (dword_100260D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];

  return [v2 _sendAccessoryEventMessage:v4 eventType:4 destinationIdentifier:v3 completionHandler:v5];
}

id sub_1000056BC(void *a1)
{
  if (dword_100260D60 <= 30 && (dword_100260D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];

  return [v2 _sendAccessoryEventMessage:v4 eventType:5 destinationIdentifier:v3 completionHandler:v5];
}

id sub_10000583C(void *a1)
{
  if (dword_100260D60 <= 30 && (dword_100260D60 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];

  return _[v2 _sendDeviceConfig:v4 destinationIdentifier:v3 completionHandler:v5];
}

void sub_100005998(uint64_t a1)
{
  id v3 = [@"Send getTipiTable message" dataUsingEncoding:4];
  if (dword_100260D60 <= 30 && (dword_100260D60 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    LogPrintF();
  }
  [*(id *)(a1 + 40) _sendAccessoryEventMessage:v3 eventType:6 destinationIdentifier:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 48)];
}

void sub_100005DD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CUXPCDecodeNSErrorIfNeeded();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000060DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CUXPCDecodeNSErrorIfNeeded();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000068E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  (*(void (**)(uint64_t))(v12 + 16))(v12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000693C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000694C(uint64_t a1)
{
}

uint64_t sub_100006954(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100260D60 <= 90)
    {
      if (dword_100260D60 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_100006B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100006BC0(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100260D60 <= 90)
    {
      if (dword_100260D60 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_100006E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100006E90(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100260D60 <= 90)
    {
      if (dword_100260D60 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_100007128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007160(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100260D60 <= 90)
    {
      if (dword_100260D60 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_1000073F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007430(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100260D60 <= 90)
    {
      if (dword_100260D60 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_100007680(id a1)
{
  uint64_t v1 = objc_alloc_init(AAConversationDetectSessionManager);
  uint64_t v2 = qword_100263E50;
  qword_100263E50 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100007B78(uint64_t a1)
{
  if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _prefsChanged];
}

void *sub_100007BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[13]) {
    return _[result _deviceFound:a2];
  }
  return result;
}

void *sub_100007C18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[13]) {
    return _[result _deviceLost:a2];
  }
  return result;
}

uint64_t sub_100007C34(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 104) && dword_100260DD0 <= 30)
  {
    if (dword_100260DD0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100007CC8()
{
  if (dword_100260DD0 <= 30)
  {
    if (dword_100260DD0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100007D48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == *(void *)(v6 + 104))
  {
    if (v3)
    {
      id v13 = v3;
      if (dword_100260DD0 <= 90)
      {
        if (dword_100260DD0 == -1)
        {
          int v7 = _LogCategory_Initialize();
          uint64_t v6 = *(void *)(a1 + 40);
          if (!v7) {
            goto LABEL_10;
          }
          uint64_t v5 = *(void *)(v6 + 104);
          id v3 = v13;
        }
        uint64_t v11 = v5;
        id v12 = v3;
        LogPrintF();
        uint64_t v6 = *(void *)(a1 + 40);
      }
LABEL_10:
      [*(id *)(v6 + 104) invalidate:v11, v12];
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(v8 + 104);
      *(void *)(v8 + 104) = 0;

      goto LABEL_11;
    }
    if (dword_100260DD0 <= 30)
    {
      id v13 = 0;
      if (dword_100260DD0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v13;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_100008018(id a1)
{
  if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void *sub_10000808C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v4 == result[1]) {
    return [result _conversationDetectMessageReceived:a3 fromDeviceIdentifier:a2];
  }
  return result;
}

uint64_t sub_1000080A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_100260DD0 <= 90 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(a1 + 32) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void **)(v5 + 8);
      *(void *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_100260DD0 <= 30)
    {
      id v9 = 0;
      if (dword_100260DD0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

id sub_10000828C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateCDSession];
}

uint64_t sub_1000087A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = v2;
  if (v2)
  {
    int v7 = v2;
    id v4 = [v2 objectForKeyedSubscript:@"AAConversationDetectKeyIdentifier"];
    uint64_t v5 = [v7 objectForKeyedSubscript:@"AAConversationDetectKeyData"];
    [*(id *)(a1 + 40) _conversationDetectMessageReceived:v5 fromDeviceIdentifier:v4];

LABEL_3:
    id v3 = v7;
    goto LABEL_8;
  }
  if (dword_100260DD0 <= 90)
  {
    int v7 = 0;
    if (dword_100260DD0 != -1 || (v2 = (void *)_LogCategory_Initialize(), id v3 = 0, v2))
    {
      uint64_t v2 = (void *)LogPrintF();
      goto LABEL_3;
    }
  }
LABEL_8:

  return _objc_release_x1(v2, v3);
}

id sub_1000089F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateCDSession];
}

id sub_100008C1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

uint64_t sub_100009458(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  if (v3)
  {
    if (dword_100260DD0 <= 90)
    {
      if (dword_100260DD0 != -1 || (int v4 = _LogCategory_Initialize(), v3 = v8, v4))
      {
LABEL_7:
        LogPrintF();
        id v3 = v8;
      }
    }
  }
  else if (dword_100260DD0 <= 30)
  {
    if (dword_100260DD0 != -1) {
      goto LABEL_7;
    }
    int v5 = _LogCategory_Initialize();
    id v3 = 0;
    if (v5) {
      goto LABEL_7;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, id))(v6 + 16))(v6, v8);
    id v3 = v8;
  }

  return _objc_release_x1(v6, v3);
}

id sub_1000095E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateConversationDetectSignal:*(unsigned int *)(a1 + 40)];
}

id sub_1000096AC(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 76);
  uint64_t v3 = *(__int16 *)(a1 + 116);
  long long v4 = *(_OWORD *)(a1 + 139);
  long long v33 = *(_OWORD *)(a1 + 123);
  long long v34 = v4;
  long long v5 = *(_OWORD *)(a1 + 171);
  long long v35 = *(_OWORD *)(a1 + 155);
  long long v36 = v5;
  if (dword_100260DD0 <= 30)
  {
    uint64_t v31 = v3;
    if (dword_100260DD0 != -1 || _LogCategory_Initialize())
    {
      *(void *)&v32[0] = 0;
      NSAppendPrintF();
      id v54 = 0;
      NSAppendPrintF();
      id v6 = v54;

      id v53 = v6;
      NSAppendPrintF();
      id v7 = v6;

      id v52 = v7;
      NSAppendPrintF();
      id v8 = v7;

      id v51 = v8;
      NSAppendPrintF();
      id v9 = v8;

      id v50 = v9;
      NSAppendPrintF();
      id v10 = v9;

      id v49 = v10;
      NSAppendPrintF();
      id v11 = v10;

      id v48 = v11;
      NSAppendPrintF();
      id v12 = v11;

      id v47 = v12;
      NSAppendPrintF();
      id v13 = v12;

      id v46 = v13;
      NSAppendPrintF();
      id v14 = v13;

      id v45 = v14;
      NSAppendPrintF();
      id v15 = v14;

      id v44 = v15;
      NSAppendPrintF();
      id v16 = v15;

      id v43 = v16;
      NSAppendPrintF();
      id v17 = v16;

      id v42 = v17;
      NSAppendPrintF();
      id v18 = v17;

      id v41 = v18;
      NSAppendPrintF();
      id v19 = v18;

      id v40 = v19;
      NSAppendPrintF();
      id v20 = v19;

      id v39 = v20;
      NSAppendPrintF();
      id v21 = v20;

      id v38 = v21;
      uint64_t v30 = v31;
      NSAppendPrintF();
      id v22 = v21;

      id v37 = v22;
      NSAppendPrintF();
      id v23 = v22;

      id v29 = v23;
      LogPrintF();
    }
    if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
    {
      *(void *)&v32[0] = 0;
      NSAppendPrintF();
      id v54 = 0;
      NSAppendPrintF();
      id v24 = v54;

      id v53 = v24;
      NSAppendPrintF();
      id v25 = v24;

      id v52 = v25;
      NSAppendPrintF();
      id v26 = v25;

      id v29 = v26;
      LogPrintF();
    }
  }
  v27 = *(void **)(a1 + 32);
  v32[0] = v33;
  v32[1] = v34;
  v32[2] = v35;
  v32[3] = v36;
  return [v27 _setCDSignalAudioTunings:v32, v2, v29, v30];
}

void sub_10000A35C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [a3 identifier];
  [v3 _sendConversationDetectMessage:v4 destinationIdentifier:v5 completion:0];
}

void sub_10000A4F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [a3 identifier];
  [v3 _sendConversationDetectMessage:v4 destinationIdentifier:v5 completion:0];
}

void sub_10000A68C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [a3 identifier];
  [v3 _sendConversationDetectMessage:v4 destinationIdentifier:v5 completion:0];
}

void sub_10000ACFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10000B608(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000BE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  (*(void (**)(uint64_t))(v14 + 16))(v14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000BEDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000BEEC(uint64_t a1)
{
}

void *sub_10000BEF4(void *result)
{
  uint64_t v1 = *(void *)(*(void *)(result[5] + 8) + 40);
  if (!v1) {
    return result;
  }
  uint64_t v2 = result;
  if (dword_100260DD0 <= 90)
  {
    if (dword_100260DD0 == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_7;
      }
      uint64_t v1 = *(void *)(*(void *)(v2[5] + 8) + 40);
    }
    uint64_t v4 = v1;
    LogPrintF();
  }
LABEL_7:
  *(unsigned char *)(v2[4] + 177) = 0;
  [v2[4] _audioSessionEnsureStopped:v4];
  uint64_t v3 = (void *)v2[4];

  return [v3 _cdSessionEnsureDeactivated:0];
}

id sub_10000BFC8(uint64_t a1, int a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 177) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 209) = a2;
  CFPrefs_SetValue();
  if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v4 = "no";
    if (a2) {
      uint64_t v4 = "yes";
    }
    id v7 = v4;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _audioSessionEnsureStopped:v7];
  id v5 = *(void **)(a1 + 32);

  return [v5 _cdSessionEnsureDeactivated:0];
}

void sub_10000C18C(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 17))
  {
    if (dword_100260DD0 > 30 || dword_100260DD0 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (*(unsigned char *)(v2 + 224))
  {
    objc_sync_exit(obj);

    if (dword_100260DD0 <= 10 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 200);
      uint64_t v10 = *(void *)(a1 + 40);
      LogPrintF();
    }
    uint64_t v3 = +[AVAudioSession sharedInstance];
    uint64_t v4 = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 200)];
    id v5 = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 200)];
    id v14 = 0;
    [v3 setDuckingFadeOutDuration:v4 fadeInDuration:v5 error:&v14];
    id v6 = v14;

    if (!v6)
    {
      id v7 = +[AVAudioSession sharedInstance];
      uint64_t v8 = *(void *)(a1 + 40);
      id v13 = 0;
      [v7 setDuckToLevelScalar:0 unduckToLevelScalar:v8 error:&v13];
      id v6 = v13;
    }
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, id))(v9 + 16))(v9, v6);
    }

    return;
  }
  if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize())) {
LABEL_21:
  }
    LogPrintF();
LABEL_22:
  objc_sync_exit(obj);
}

void sub_10000C428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

id sub_10000C4B0(uint64_t a1)
{
  if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _deregisterFromAVAudioSessionSpeechDetectionStyleChanges];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _registerForAVAudioSessionSpeechDetectionStyleChanges];
}

void sub_10000C9F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_10000CA30(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10000CA5C(uint64_t a1)
{
}

uint64_t sub_10000CA64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    float v5 = *(float *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    id v12 = 0;
    id v3 = [*(id *)(a1 + 32) floatValue];
    id v4 = 0;
    if (v5 >= v6) {
      goto LABEL_11;
    }
    *(float *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(float *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                          + 24)
                                                               + *(float *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                          + 24);
    float v7 = *(float *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    [*(id *)(a1 + 32) floatValue];
    if (v7 > *(float *)&v8)
    {
      [*(id *)(a1 + 32) floatValue];
      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = LODWORD(v8);
    }
    uint64_t v9 = *(void **)(a1 + 40);
    LODWORD(v8) = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    uint64_t v10 = +[NSNumber numberWithFloat:v8];
    [v9 _asyncAudioSessionDuckWithLevel:v10 completion:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

    goto LABEL_9;
  }
  if (dword_100260DD0 <= 30)
  {
    id v12 = v3;
    if (dword_100260DD0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v12, v3))
    {
      id v3 = (id)LogPrintF();
LABEL_9:
      id v4 = v12;
    }
  }
LABEL_11:

  return _objc_release_x1(v3, v4);
}

id sub_10000CCA0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:@"speechDetectionStyle"];
  if (result)
  {
    id v3 = [*(id *)(a1 + 40) objectForKeyedSubscript:NSKeyValueChangeNewKey];
    uint64_t v4 = [v3 unsignedIntValue];

    float v5 = *(void **)(a1 + 48);
    return _[v5 _speechDetectionStyleChanged:v4];
  }
  return result;
}

void sub_10000D7EC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 184))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v8, v5);
    }
    if (!v5)
    {
      if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v7 = 0x4010000000000000;
        LogPrintF();
      }
      [*(id *)(a1 + 32) clearFence:@"com.apple.audioaccessoryd.cdFence" v7];
      [*(id *)(a1 + 40) _setPedestrianFenceWithHandler:*(void *)(a1 + 48)];
    }
  }
}

void sub_10000DABC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v5)
  {
    if (dword_100260DD0 <= 90 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v5;
      LogPrintF();
    }
    [*(id *)(a1 + 32) _stopPedestrianFenceSession:v6];
  }
  else if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
    [*(id *)(a1 + 32) _updateAccessoriesWithMotionState:1, @"com.apple.audioaccessoryd.cdFence", 0x4010000000000000];
  }
  else
  {
    [*(id *)(a1 + 32) _updateAccessoriesWithMotionState:1, v6, v7];
  }
}

id sub_10000DF98(uint64_t a1)
{
  if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
  {
    id v2 = [*(id *)(a1 + 32) headGesture];
    id v3 = [*(id *)(a1 + 32) avgConfidence];
    [*(id *)(a1 + 32) timestamp];
    v8 = uint64_t v7 = v3;
    id v6 = v2;
    LogPrintF();
  }
  id result = [*(id *)(a1 + 32) headGesture:v6, v7, v8];
  if (result == (id)1)
  {
    id v5 = *(void **)(a1 + 40);
    return [v5 _updateAccessoriesWithMotionState:2];
  }
  return result;
}

uint64_t sub_10000E100()
{
  if (dword_100260DD0 <= 30)
  {
    if (dword_100260DD0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

id sub_10000E280(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 228);
  uint64_t state64 = 0;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  BOOL v4 = state64 != 0;
  if (dword_100260DD0 <= 30 && (dword_100260DD0 != -1 || _LogCategory_Initialize()))
  {
    id v5 = "yes";
    if (v3) {
      id v6 = "no";
    }
    else {
      id v6 = "yes";
    }
    if (!v3) {
      id v5 = "no";
    }
    uint64_t v9 = v6;
    uint64_t v10 = v5;
    LogPrintF();
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 178) = v4;
  uint64_t v7 = *(unsigned char **)(a1 + 32);
  if (v7[178])
  {
    v7[116] = 1;
    uint64_t v7 = *(unsigned char **)(a1 + 32);
  }
  return [v7 _updatePauseState:v9, v10];
}

void sub_10000EFA0(id a1)
{
  uint64_t v1 = objc_alloc_init(AADeviceManagerDaemon);
  uint64_t v2 = qword_100263E60;
  qword_100263E60 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10000F2A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000F2C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000F2D8(uint64_t a1)
{
}

void sub_10000F2E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  NSAppendPrintF();
  objc_storeStrong((id *)(v1 + 40), obj);
}

id sub_10000F3A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activate];
}

id sub_10000F420(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_10000F5F0(uint64_t a1)
{
  if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _prefsChanged];
}

void sub_10000F7FC(id a1)
{
  if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

id sub_10000F870(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _accessoryDeviceInfoChanged:a2];
}

uint64_t sub_10000F87C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_100260EA0 <= 90 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(a1 + 32) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 8);
      *(void *)(v5 + 8) = 0;

      goto LABEL_11;
    }
    if (dword_100260EA0 <= 30)
    {
      id v9 = 0;
      if (dword_100260EA0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

uint64_t sub_10000FC58(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = v3;
  if (v3)
  {
    if (dword_100260EA0 <= 90)
    {
      if (dword_100260EA0 != -1 || (int v5 = _LogCategory_Initialize(), v3 = v10, v5))
      {
        LogPrintF();
LABEL_8:
        id v3 = v10;
      }
    }
  }
  else if (dword_100260EA0 <= 30)
  {
    if (dword_100260EA0 != -1 || (v6 = _LogCategory_Initialize(), id v3 = 0, v6))
    {
      id v4 = [*(id *)(a1 + 32) identifier];
      id v9 = [*(id *)(a1 + 40) xpcObjectRepresentation];
      LogPrintF();

      goto LABEL_8;
    }
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, id))(v7 + 16))(v7, v10);
    id v3 = v10;
  }

  return _objc_release_x1(v7, v3);
}

id sub_1000105FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendDeviceConfig:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

uint64_t sub_10001088C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(uint64_t (***)(void))(a1 + 56);
    if (!v4) {
      goto LABEL_6;
    }
    id v6 = v3;
    id v4 = (uint64_t (**)(void))v4[2]();
  }
  else
  {
    id v6 = 0;
    id v4 = (uint64_t (**)(void))[*(id *)(a1 + 32) _sendConfigOverAAController:*(void *)(a1 + 40) device:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  id v3 = v6;
LABEL_6:

  return _objc_release_x1(v4, v3);
}

void sub_100010A30(id a1)
{
  if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t sub_100010AA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 32))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_100260EA0 <= 90 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(a1 + 32) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = 0;

      goto LABEL_11;
    }
    if (dword_100260EA0 <= 30)
    {
      id v9 = 0;
      if (dword_100260EA0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void *sub_100010E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _coreBluetoothDeviceFound:a2];
  }
  return result;
}

void *sub_100010E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _coreBluetoothDeviceLost:a2];
  }
  return result;
}

uint64_t sub_100010E88(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 24) && dword_100260EA0 <= 30)
  {
    if (dword_100260EA0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100010F20()
{
  if (dword_100260EA0 <= 30)
  {
    if (dword_100260EA0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100010FA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == *(void *)(v6 + 24))
  {
    if (v3)
    {
      id v13 = v3;
      if (dword_100260EA0 <= 90)
      {
        if (dword_100260EA0 == -1)
        {
          int v7 = _LogCategory_Initialize();
          uint64_t v6 = *(void *)(a1 + 40);
          if (!v7) {
            goto LABEL_10;
          }
          uint64_t v5 = *(void *)(v6 + 24);
          id v3 = v13;
        }
        uint64_t v11 = v5;
        id v12 = v3;
        LogPrintF();
        uint64_t v6 = *(void *)(a1 + 40);
      }
LABEL_10:
      [*(id *)(v6 + 24) invalidate:v11, v12];
      uint64_t v8 = *(void *)(a1 + 40);
      id v9 = *(void **)(v8 + 24);
      *(void *)(v8 + 24) = 0;

      goto LABEL_11;
    }
    if (dword_100260EA0 <= 30)
    {
      id v13 = 0;
      if (dword_100260EA0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v13;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000115E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100011600(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v9 = a3;
  int v7 = [v9 coreBluetoothDevice];
  unsigned __int8 v8 = [v7 deviceFlags];

  if ((v8 & 0x40) != 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }
}

uint64_t sub_100011994(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (v3)
  {
    if (dword_100260EA0 <= 90)
    {
      if (dword_100260EA0 != -1 || (int v4 = _LogCategory_Initialize(), v3 = v7, v4))
      {
        LogPrintF();
        id v3 = v7;
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, id))(v5 + 16))(v5, v7);
    id v3 = v7;
  }

  return _objc_release_x1(v5, v3);
}

id sub_100011AF0(uint64_t a1)
{
  if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);

  return _[v2 _aaDeviceRecordsRemovedWithRecords:v3];
}

void sub_100011C34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v21;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v10 = [v9 bluetoothAddress:v18];
        uint64_t v11 = [v10 lowercaseString];
        id v12 = [v4 bluetoothAddress];
        id v13 = [v12 lowercaseString];
        id v14 = v11;
        id v15 = v13;
        if (v14 == v15)
        {

LABEL_11:
          if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
          {
            id v18 = v9;
            LogPrintF();
          }
          continue;
        }
        id v16 = v15;
        if ((v14 == 0) == (v15 != 0))
        {

          continue;
        }
        unsigned __int8 v17 = [v14 isEqual:v15];

        if (v17) {
          goto LABEL_11;
        }
      }
      id v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v6);
  }
}

id sub_100011EF8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _aaDeviceRecordsUpdatedWithRecords:*(void *)(a1 + 40)];
}

void sub_100011FB4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v21;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v10 = [v9 bluetoothAddress];
        uint64_t v11 = [v10 lowercaseString];
        id v12 = [v4 bluetoothAddress];
        id v13 = [v12 lowercaseString];
        id v14 = v11;
        id v15 = v13;
        if (v14 == v15)
        {

LABEL_11:
          if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
          {
            id v18 = v9;
            LogPrintF();
          }
          if (objc_msgSend(v4, "updateWithAADeviceRecord:", v9, v18))
          {
            id v10 = +[AAServicesDaemon sharedAAServicesDaemon];
            [v10 reportDeviceFound:v4];
            goto LABEL_18;
          }
          continue;
        }
        id v16 = v15;
        if ((v14 == 0) == (v15 != 0))
        {

LABEL_18:
          continue;
        }
        unsigned __int8 v17 = [v14 isEqual:v15];

        if (v17) {
          goto LABEL_11;
        }
      }
      id v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v6);
  }
}

void sub_100012600(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1000126BC;
  v6[3] = &unk_100232A10;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_1000126BC()
{
  if (dword_100260EA0 <= 30)
  {
    if (dword_100260EA0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100012864(uint64_t a1)
{
  if ([*(id *)(a1 + 32) headGesture] == (id)1)
  {
    uint64_t v2 = 2;
    BOOL v3 = 1;
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) headGesture];
    BOOL v3 = v4 == (id)2;
    if (v4 == (id)2) {
      uint64_t v2 = 3;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  uint64_t v5 = [*(id *)(a1 + 40) _getCurrentAudioOwner];
  id v6 = (void *)v5;
  if (v3 && v5)
  {
    long long v21 = (void *)v5;
    if (dword_100260EA0 <= 30)
    {
      if (dword_100260EA0 != -1 || (v13 = _LogCategory_Initialize(), id v6 = v21, v13))
      {
        id v7 = [*(id *)(a1 + 32) headGesture];
        id v8 = [*(id *)(a1 + 32) avgConfidence];
        uint64_t v9 = [*(id *)(a1 + 32) timestamp];
        id v10 = (void *)v9;
        unint64_t v11 = *(char *)(*(void *)(a1 + 40) + 84);
        if (v11 > 4) {
          id v12 = "?";
        }
        else {
          id v12 = off_100232EE8[v11];
        }
        id v19 = v12;
        long long v20 = off_100232F10[v2];
        unsigned __int8 v17 = v8;
        uint64_t v18 = v9;
        id v16 = v7;
        LogPrintF();

        id v6 = v21;
      }
    }
    [v6 setDetectedHeadGesture:v2, v16, v17, v18, v19, v20];
    id v14 = +[AAServicesDaemon sharedAAServicesDaemon];
    [v14 reportHeadGestureDetected:v21];

    *(unsigned char *)(*(void *)(a1 + 40) + 84) = v2;
  }

  return _objc_release_x2();
}

uint64_t sub_100012A70()
{
  if (dword_100260EA0 <= 30)
  {
    if (dword_100260EA0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_1000130F0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:*(void *)(a1 + 40)];
  unint64_t v11 = v2;
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    if (v3 != [v2 smartRoutingStateFlags])
    {
      if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v4 = *(void *)(a1 + 40);
        [v11 smartRoutingStateFlags];
        uint64_t v5 = CUPrintFlags32();
        CUPrintFlags32();
        v10 = uint64_t v9 = v5;
        uint64_t v8 = v4;
        LogPrintF();
      }
      [v11 setSmartRoutingStateFlags:*(unsigned int *)(a1 + 48), v8, v9, v10];
      id v6 = +[AAServicesDaemon sharedAAServicesDaemon];
      [v6 reportDeviceFound:v11];
    }
  }
  else if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }

  return _objc_release_x2();
}

id sub_1000132FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendSiriMultitoneConfigToDevice:];
}

uint64_t sub_1000134FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100260EA0 <= 90)
    {
      id v7 = v3;
      if (dword_100260EA0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v7, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_8:
        id v4 = v7;
      }
    }
  }
  else if (dword_100260EA0 <= 30)
  {
    id v7 = 0;
    if (dword_100260EA0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
    {
      id v6 = [*(id *)(a1 + 32) identifier];
      LogPrintF();

      goto LABEL_8;
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000136F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  else
  {
    [*(id *)(a1 + 32) _setHRTFAssetDownloadOTA];
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x2050000000;
    id v7 = (void *)qword_100263E70;
    uint64_t v14 = qword_100263E70;
    if (!qword_100263E70)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100013A84;
      v10[3] = &unk_100232928;
      v10[4] = &v11;
      sub_100013A84((uint64_t)v10);
      id v7 = (void *)v12[3];
    }
    uint64_t v8 = v7;
    _Block_object_dispose(&v11, 8);
    id v9 = [[v8 alloc] initWithCameraSession:0];
    [v9 downloadHRTFAsset:0 withCompletion:&stru_100232E68];
  }
}

void sub_100013858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013870(id a1, BOOL a2, NSString *a3, NSError *a4)
{
  id v6 = a3;
  id v5 = a4;
  if (dword_100260EA0 <= 30 && (dword_100260EA0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
}

Class sub_100013A84(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_100263E78)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_100013BC8;
    v4[4] = &unk_100232EC8;
    v4[5] = v4;
    long long v5 = off_100232EB0;
    uint64_t v6 = 0;
    qword_100263E78 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_100263E78)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("HRTFEnrollmentSession");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)sub_1001B5500();
LABEL_8:
    free(v2);
  }
  qword_100263E70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100013BC8()
{
  uint64_t result = _sl_dlopen();
  qword_100263E78 = result;
  return result;
}

void sub_100013D60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    if (dword_100260F70 <= 90 && (dword_100260F70 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
LABEL_19:
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15) {
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v7);
    }
    goto LABEL_27;
  }
  uint64_t v8 = [v5 currentCampaign];

  if (v8)
  {
    if (dword_100260F70 <= 30 && (dword_100260F70 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v7 = +[NSError errorWithDomain:@"AAFeedbackErrorDomain" code:1 userInfo:0];
    goto LABEL_19;
  }
  id v9 = [v5 errors];
  id v10 = [v9 lastObject];

  if ((uint64_t)[v5 declineCount] < 1)
  {
    id v11 = [objc_alloc((Class)FBKSForm) initWithIdentifier:*(void *)(a1 + 32)];
    [v11 setAuthenticationMethod:2];
    id v12 = [objc_alloc((Class)FBKSDraftLauncher) initWithFeedbackForm:v11];
    id v13 = objc_alloc_init((Class)FBKSLaunchConfiguration);
    uint64_t v14 = v13;
    if (*(void *)(a1 + 40))
    {
      [v13 setLocalizedPromptTitle:];
    }
    else
    {
      id v16 = [*(id *)(a1 + 48) _feedbackCampainLocalizedTitleForCampain:*(unsigned int *)(a1 + 72)];
      [v14 setLocalizedPromptTitle:v16];
    }
    [v14 setPromptStyle:*(void *)(a1 + 64)];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100014094;
    v19[3] = &unk_1002326E8;
    id v20 = *(id *)(a1 + 56);
    [v12 collectFeedbackWithLaunchConfiguration:v14 completion:v19];

    id v7 = 0;
  }
  else
  {
    if (dword_100260F70 <= 30 && (dword_100260F70 != -1 || _LogCategory_Initialize()))
    {
      id v18 = [v5 declineCount];
      LogPrintF();
    }
    id v7 = +[NSError errorWithDomain:@"AAFeedbackErrorDomain", 2, 0, v18 code userInfo];
    uint64_t v17 = *(void *)(a1 + 56);
    if (v17) {
      (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v7);
    }
  }

LABEL_27:
}

uint64_t sub_100014094(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_11;
    }
    id v8 = 0;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(v5 + 16))(v5);
    goto LABEL_10;
  }
  id v8 = v3;
  if (dword_100260F70 <= 90)
  {
    if (dword_100260F70 != -1 || (v6 = _LogCategory_Initialize(), id v4 = v8, v6))
    {
      LogPrintF();
      id v4 = v8;
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(v5 + 16))(v5);
LABEL_10:
    id v4 = v8;
  }
LABEL_11:

  return _objc_release_x1(v5, v4);
}

void sub_10001425C(id a1)
{
  uint64_t v1 = objc_alloc_init(AAServicesDaemon);
  uint64_t v2 = qword_100263E80;
  qword_100263E80 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100014A78(uint64_t a1)
{
  if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _activate];
}

id sub_1000150D0(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 192);
  uint64_t state64 = 0;
  notify_get_state(v2, &state64);
  if (dword_100260FE0 > 30) {
    return [*(id *)(a1 + 32) _muteStateChanged:v5];
  }
  uint64_t v3 = state64;
  if (dword_100260FE0 == -1 && !_LogCategory_Initialize()) {
    return [*(id *)(a1 + 32) _muteStateChanged:v5];
  }
  LogPrintF();
  return [*(id *)(a1 + 32) _muteStateChanged:v3];
}

id sub_10001516C(uint64_t a1)
{
  if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = *(void **)(a1 + 32);

  return [v2 _prefsChanged];
}

uint64_t sub_1000151F0(uint64_t a1)
{
  return _CUStateDumpWithObject("AAServices", *(void *)(a1 + 32), &dword_100260FE0);
}

void *sub_10001520C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[6]) {
    return _[result _deviceFound:a2];
  }
  return result;
}

void *sub_100015228(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[6]) {
    return _[result _deviceLost:a2];
  }
  return result;
}

uint64_t sub_100015244(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 48) && dword_100260FE0 <= 30)
  {
    if (dword_100260FE0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_1000152D8()
{
  if (dword_100260FE0 <= 30)
  {
    if (dword_100260FE0 != -1) {
      return LogPrintF();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_100015358(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v5 == *(void *)(v6 + 48))
  {
    if (v3)
    {
      id v13 = v3;
      if (dword_100260FE0 <= 90)
      {
        if (dword_100260FE0 == -1)
        {
          int v7 = _LogCategory_Initialize();
          uint64_t v6 = *(void *)(a1 + 40);
          if (!v7) {
            goto LABEL_10;
          }
          uint64_t v5 = *(void *)(v6 + 48);
          id v3 = v13;
        }
        uint64_t v11 = v5;
        id v12 = v3;
        LogPrintF();
        uint64_t v6 = *(void *)(a1 + 40);
      }
LABEL_10:
      [*(id *)(v6 + 48) invalidate:v11, v12];
      uint64_t v8 = *(void *)(a1 + 40);
      id v9 = *(void **)(v8 + 48);
      *(void *)(v8 + 48) = 0;

      goto LABEL_11;
    }
    if (dword_100260FE0 <= 30)
    {
      id v13 = 0;
      if (dword_100260FE0 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v13;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_10001550C(uint64_t a1)
{
  if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v2 = +[AAConversationDetectSessionManager sharedCDSessionManager];
  [v2 invalidate];

  id v3 = +[AADeviceManagerDaemon sharedAADeviceManagerDaemon];
  [v3 invalidate];

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(v4 + 208))
  {
    os_state_remove_handler();
    *(void *)(*(void *)(a1 + 32) + 208) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if (*(_DWORD *)(v4 + 192) != -1)
  {
    notify_cancel(*(_DWORD *)(v4 + 192));
    *(_DWORD *)(*(void *)(a1 + 32) + 192) = -1;
    uint64_t v4 = *(void *)(a1 + 32);
  }
  [(id)v4 _deregisterFromAVSystemControllerDeathNotifications];
  [*(id *)(a1 + 32) _deregisterFromAVSystemControllerStateNotifications];
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v5 + 232))
  {
    if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v6 = +[NSNotificationCenter defaultCenter];
    [v6 removeObserver:*(void *)(a1 + 32) name:TUBargeCallStatusChangedNotification object:0];

    *(unsigned char *)(*(void *)(a1 + 32) + 232) = 0;
    uint64_t v5 = *(void *)(a1 + 32);
  }
  [*(id *)(v5 + 48) invalidate];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 48);
  *(void *)(v7 + 48) = 0;

  [*(id *)(*(void *)(a1 + 32) + 56) removeAllObjects];
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(v9 + 56);
  *(void *)(v9 + 56) = 0;

  uint64_t v11 = +[AAContextManager sharedContextManager];
  [v11 invalidate];

  [*(id *)(*(void *)(a1 + 32) + 272) invalidate];
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(void **)(v12 + 272);
  *(void *)(v12 + 272) = 0;
}

id sub_1000158E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

id sub_100015978(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100015B7C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activateAudioRoutingControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100015ED0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidateAudioRoutingControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100016210(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activateAudioSessionControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100016538(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAudioSessionControl:*(void *)(a1 + 40)];
}

id sub_1000167D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidateAudioSessionControl:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100017364(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reportDeviceFound:*(void *)(a1 + 40)];
}

id sub_10001752C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reportDeviceLost:*(void *)(a1 + 40)];
}

void sub_1000176D0(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) userInfo];
  id v14 = [v2 objectForKey:AVSystemController_CallIsActiveNotificationParameter];

  if (v14)
  {
    id v3 = [*(id *)(a1 + 32) userInfo];
    uint64_t v4 = [v3 objectForKey:AVSystemController_CallIsHighPriorityNotificationParameter];

    if (v4)
    {
      unsigned __int8 v5 = [v14 BOOLValue];
      unsigned __int8 v6 = [v4 BOOLValue];
      *(unsigned char *)(*(void *)(a1 + 40) + 168) = v5;
      *(unsigned char *)(*(void *)(a1 + 40) + 169) = v6;
      if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if (*(unsigned char *)(v7 + 168)) {
          uint64_t v8 = "yes";
        }
        else {
          uint64_t v8 = "no";
        }
        if (*(unsigned char *)(v7 + 169)) {
          uint64_t v9 = "yes";
        }
        else {
          uint64_t v9 = "no";
        }
        uint64_t v11 = v8;
        id v13 = v9;
        LogPrintF();
        [*(id *)(a1 + 40) _updateBannerChimeSuppressionState:v11, v13];
      }
      else
      {
        [*(id *)(a1 + 40) _updateBannerChimeSuppressionState:v10, v12];
      }
    }
    else if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }
  }
  else if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_100017968(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) object];
  id v15 = v2;
  if (dword_100260FE0 <= 30)
  {
    if (dword_100260FE0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = v15, v4))
    {
      if ([v2 isPTT]) {
        id v3 = "yes";
      }
      else {
        id v3 = "no";
      }
      uint64_t v11 = v3;
      id v13 = [v15 status];
      LogPrintF();
      int v2 = v15;
    }
  }
  if (objc_msgSend(v2, "isPTT", v11, v13)) {
    int v5 = [v15 status] == 1;
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(unsigned __int8 *)(v6 + 170);
  if (v7 != v5)
  {
    if (dword_100260FE0 <= 30)
    {
      if (dword_100260FE0 != -1)
      {
LABEL_14:
        uint64_t v8 = "yes";
        if (v7) {
          uint64_t v9 = "yes";
        }
        else {
          uint64_t v9 = "no";
        }
        if (!v5) {
          uint64_t v8 = "no";
        }
        uint64_t v12 = v9;
        id v14 = v8;
        LogPrintF();
        uint64_t v6 = *(void *)(a1 + 40);
        goto LABEL_21;
      }
      int v10 = _LogCategory_Initialize();
      uint64_t v6 = *(void *)(a1 + 40);
      if (v10)
      {
        int v7 = *(unsigned __int8 *)(v6 + 170);
        goto LABEL_14;
      }
    }
LABEL_21:
    *(unsigned char *)(v6 + 170) = v5;
    [*(id *)(a1 + 40) _updateBannerChimeSuppressionState:v12, v14];
  }
}

void sub_100017F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100017F48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100017F58(uint64_t a1)
{
}

void sub_100017F60(uint64_t a1, unsigned int a2, void *a3)
{
  int v5 = a3;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == *(void *)(*(void *)(a1 + 32) + 184))
  {
    if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize()))
    {
      if (a2 > 6) {
        uint64_t v6 = "?";
      }
      else {
        uint64_t v6 = (&off_1002330C0)[a2];
      }
      uint64_t v7 = *(int *)(a1 + 48);
      if (v7 > 6) {
        uint64_t v8 = "?";
      }
      else {
        uint64_t v8 = (&off_100233278)[v7];
      }
      uint64_t v12 = v6;
      id v13 = v8;
      LogPrintF();
    }
    switch(a2)
    {
      case 1u:
        if ((*(_DWORD *)(a1 + 48) - 1) <= 1)
        {
          if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          uint64_t v9 = *(void **)(a1 + 32);
          uint64_t v10 = *(unsigned __int8 *)(a1 + 84);
          long long v11 = *(_OWORD *)(a1 + 68);
          v14[0] = *(_OWORD *)(a1 + 52);
          v14[1] = v11;
          [v9 _reverseMuteActionForToken:v14 shouldMute:v10];
        }
        break;
      case 2u:
        if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
          goto LABEL_29;
        }
        break;
      case 3u:
        if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
          goto LABEL_29;
        }
        break;
      case 4u:
        if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize()))
        {
          uint64_t v12 = v5;
          goto LABEL_29;
        }
        break;
      case 6u:
        if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
LABEL_29:
        }
          LogPrintF();
        break;
      default:
        break;
    }
    [*(id *)(a1 + 32) _invalidateMuteBanner:v12];
  }
}

void sub_10001880C(uint64_t a1)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 256))
  {
    if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    int v2 = *(void **)(a1 + 40);
    uint64_t v3 = *(unsigned __int8 *)(a1 + 80);
    long long v4 = *(_OWORD *)(a1 + 64);
    v7[0] = *(_OWORD *)(a1 + 48);
    v7[1] = v4;
    [v2 _reverseMuteActionForToken:v7 shouldMute:v3];
    [*(id *)(a1 + 32) invalidate];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void **)(v5 + 256);
    *(void *)(v5 + 256) = 0;
  }
}

uint64_t sub_1000188C4(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 256))
  {
    id v11 = v5;
    if (dword_100260FE0 <= 30)
    {
      if (dword_100260FE0 != -1 || (id v5 = (id)_LogCategory_Initialize(), v6 = v11, v5))
      {
        if (a2 > 5) {
          uint64_t v7 = "?";
        }
        else {
          uint64_t v7 = (&off_1002330F8)[a2];
        }
        uint64_t v9 = v7;
        id v10 = v6;
        id v5 = (id)LogPrintF();
        id v6 = v11;
      }
    }
    if (a2 == 5 || a2 == 2)
    {
      id v5 = [*(id *)(a1 + 40) _invalidateMuteBanner:v9, v10];
      id v6 = v11;
    }
  }

  return _objc_release_x1(v5, v6);
}

void sub_100018EAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = sub_100017F48;
  v17[4] = sub_100017F58;
  id v18 = 0;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100018FE0;
  block[3] = &unk_100233028;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v16 = v17;
  id v15 = *(id *)(a1 + 40);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);

  _Block_object_dispose(v17, 8);
}

uint64_t sub_100018FE0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (dword_100260FE0 <= 90)
    {
      if (dword_100260FE0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = *(void **)(a1 + 32), v4))
      {
        LogPrintF();
        int v2 = *(void **)(a1 + 32);
      }
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v2);
  }
  else
  {
    unsigned __int8 v3 = [*(id *)(a1 + 40) isMicIndicatorVisible];
    if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize()))
    {
      [*(id *)(a1 + 40) isMicIndicatorVisible];
      LogPrintF();
    }
    if (v3)
    {
      uint64_t v5 = NSErrorF();
      uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(unsigned int *)(v8 + 96);
      uint64_t v10 = *(void *)(v8 + 104);
      uint64_t v11 = *(void *)(v8 + 152);
      long long v12 = *(_OWORD *)(v8 + 128);
      v14[0] = *(_OWORD *)(v8 + 112);
      v14[1] = v12;
      [(id)v8 _createBannerSessionMuteActionForIOS:v9 auditToken:v14 appName:v10 appBundleID:v11];
    }
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(result + 16))(result, *(void *)(*(void *)(a1 + 48) + 144), *(void *)(*(void *)(a1 + 48) + 104), *(void *)(*(void *)(a1 + 48) + 152), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  }
  return result;
}

void sub_100019F10(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v26 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (!v11)
  {
    id v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(unsigned int *)(a1 + 40);
    id v18 = v26;
    goto LABEL_17;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 40);
  uint64_t v13 = v12;
  if (v12 - 1 <= 2) {
    uint64_t v13 = dword_1001CFBE4[v12 - 1];
  }
  id v14 = v26;
  if (dword_100260FE0 <= 30)
  {
    if (dword_100260FE0 != -1)
    {
LABEL_6:
      if (v12 > 6) {
        id v15 = "?";
      }
      else {
        id v15 = (&off_100233278)[v12];
      }
      if (v13 > 6) {
        id v20 = "?";
      }
      else {
        id v20 = (&off_1002331E0)[(int)v13];
      }
      id v24 = v20;
      id v25 = v11;
      long long v23 = v15;
      LogPrintF();
      id v14 = v26;
      goto LABEL_16;
    }
    int v19 = _LogCategory_Initialize();
    id v14 = v26;
    if (v19)
    {
      unsigned int v12 = *(_DWORD *)(a1 + 40);
      goto LABEL_6;
    }
  }
LABEL_16:
  id v16 = *(void **)(a1 + 32);
  uint64_t v17 = v13;
  id v18 = v14;
LABEL_17:
  [v16 _submitMetricsForMuteAction:v17 auditTokenBundleID:v18 appName:v9 appBundleID:v23];
  uint64_t v21 = *(void *)(a1 + 32);
  long long v22 = *(void **)(v21 + 176);
  *(void *)(v21 + 176) = 0;
}

id sub_10001A10C(uint64_t a1)
{
  if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _deregisterFromAVSystemControllerStateNotifications];
  int v2 = *(void **)(a1 + 32);

  return [v2 _registerForAVSystemControllerStateNotifications];
}

void sub_10001AB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001ABA0(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t result = *(void *)(v1 + 32);
    if (result)
    {
      int v2 = *(uint64_t (**)(void))(result + 16);
      return v2();
    }
  }
  return result;
}

uint64_t sub_10001ADB4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10001AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001AF6C(uint64_t a1)
{
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    int v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_9:
    return v2();
  }
  if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    int v2 = *(uint64_t (**)(void))(result + 16);
    goto LABEL_9;
  }
  return result;
}

void sub_10001B274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B2AC(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t result = *(void *)(v1 + 32);
    if (result)
    {
      int v2 = *(uint64_t (**)(void))(result + 16);
      return v2();
    }
  }
  return result;
}

void sub_10001B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B5F8(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100260FE0 <= 90)
    {
      if (dword_100260FE0 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10001B85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B890(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_100260FE0 <= 90)
    {
      if (dword_100260FE0 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10001BC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001BC50(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t result = *(void *)(v1 + 32);
    if (result)
    {
      int v2 = *(uint64_t (**)(void))(result + 16);
      return v2();
    }
  }
  return result;
}

void sub_10001BD28(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (dword_100260FE0 <= 30 && (dword_100260FE0 != -1 || _LogCategory_Initialize()))
  {
    id v6 = v5;
    LogPrintF();
  }
  [*(id *)(a1 + 32) deviceManagerReportDeviceFound:v5, v6];
}

void sub_10001BFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C014(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t result = *(void *)(v1 + 32);
    if (result)
    {
      int v2 = *(uint64_t (**)(void))(result + 16);
      return v2();
    }
  }
  return result;
}

void sub_10001C384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C3BC(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100260FE0 <= 90 && (dword_100260FE0 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t result = *(void *)(v1 + 32);
    if (result)
    {
      int v2 = *(uint64_t (**)(void))(result + 16);
      return v2();
    }
  }
  return result;
}

uint64_t sub_10001C494(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10001C83C(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100260FE0 <= 30)
  {
    if (dword_100260FE0 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      [*(id *)(*(void *)(v1 + 32) + 56) processIdentifier];
      uint64_t result = LogPrintF();
    }
  }
  *(_DWORD *)(*(void *)(v1 + 32) + 8) = 0;
  return result;
}

void sub_10001DFB4(id a1)
{
  uint64_t v1 = objc_alloc_init(BTSmartRoutingDaemon);
  uint64_t v2 = qword_100263E90;
  qword_100263E90 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_10001E20C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001E21C(uint64_t a1)
{
}

uint64_t sub_10001E224(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _descriptionWithLevel:*(unsigned int *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10001EB64(_Unwind_Exception *a1)
{
}

const char *sub_10001EBA8(unsigned int a1)
{
  if (a1 > 0xF) {
    return "?";
  }
  else {
    return off_1002342D0[a1];
  }
}

void sub_10001EBCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  NSAppendPrintF();
  objc_storeStrong((id *)(v1 + 40), obj);
}

void sub_10001EC1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = [a3 bleDevice];
  NSAppendPrintF();
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10001EC84(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  id v47 = *(void **)(v5 + 40);
  NSAppendPrintF();
  objc_storeStrong((id *)(v5 + 40), v47);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id v46 = *(void **)(v6 + 40);
  NSAppendPrintF();
  objc_storeStrong((id *)(v6 + 40), v46);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v45 = *(void **)(v7 + 40);
  v28 = [v4 deviceAddress:v4];
  NSAppendPrintF();
  objc_storeStrong((id *)(v7 + 40), v45);

  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v8 + 40);
  id v29 = [v4 deviceName:v28];
  NSAppendPrintF();
  objc_storeStrong((id *)(v8 + 40), obj);

  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  id v43 = *(id *)(v9 + 40);
  uint64_t v30 = [v4 deviceVersion:v29];
  NSAppendPrintF();
  objc_storeStrong((id *)(v9 + 40), v43);

  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v12 = *(void **)(v10 + 40);
  id v11 = (id *)(v10 + 40);
  id v42 = v12;
  if (objc_msgSend(v4, "inEar", v30)) {
    uint64_t v13 = "yes";
  }
  else {
    uint64_t v13 = "no";
  }
  uint64_t v31 = v13;
  NSAppendPrintF();
  objc_storeStrong(v11, v42);
  uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
  id v16 = *(void **)(v14 + 40);
  uint64_t v15 = (id *)(v14 + 40);
  id v41 = v16;
  unsigned int v17 = [v4 routingAction:v31];
  if (v17 > 5) {
    id v18 = "?";
  }
  else {
    id v18 = off_100234488[v17];
  }
  v32 = v18;
  NSAppendPrintF();
  objc_storeStrong(v15, v41);
  uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v21 = *(void **)(v19 + 40);
  id v20 = (id *)(v19 + 40);
  id v40 = v21;
  if (objc_msgSend(v4, "routed", v32)) {
    long long v22 = "yes";
  }
  else {
    long long v22 = "no";
  }
  long long v33 = v22;
  NSAppendPrintF();
  objc_storeStrong(v20, v40);
  uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 8);
  id v39 = *(id *)(v23 + 40);
  long long v34 = [v4 otherTipiDeviceBTAddress:v33];
  NSAppendPrintF();
  objc_storeStrong((id *)(v23 + 40), v39);

  uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 8);
  id v38 = *(id *)(v24 + 40);
  long long v35 = [v4 otherTipiDeviceBTName:v34];
  NSAppendPrintF();
  objc_storeStrong((id *)(v24 + 40), v38);

  uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 8);
  id v37 = *(id *)(v25 + 40);
  long long v36 = [v4 otherTipiDeviceVersion:v35];
  NSAppendPrintF();
  objc_storeStrong((id *)(v25 + 40), v37);

  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
  v27 = *(void **)(v26 + 40);
  [v4 isTipiHealingV2Eligible:v36];
  NSAppendPrintF();
  objc_storeStrong((id *)(v26 + 40), v27);
}

void sub_10001EFE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v3 + 40);
  id v4 = [a3 bleDevice];
  NSAppendPrintF();
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10001F04C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [v4 lastSeenTime];
  if (v5 > 0.0) {
    [v4 lastSeenTime];
  }
  [v4 reportTime];
  if (v6 > 0.0) {
    [v4 reportTime];
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  uint64_t v9 = [v4 deviceAddress];
  uint64_t v10 = [v4 name];
  [v4 lastBatteryLevel];
  [v4 lastBatteryType];
  NSAppendPrintF();
  objc_storeStrong((id *)(v7 + 40), v8);
}

id sub_10001F208(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _activate];
}

id sub_10001F8A4(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _lowBatteryReset];
}

id sub_10001F928(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _prefsChanged];
}

id sub_10001F9AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sigTermReceived];
}

void sub_10001F9B4(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 1100)) {
      uint64_t v2 = "yes";
    }
    else {
      uint64_t v2 = "no";
    }
    double v6 = v2;
    LogPrintF();
  }
  uint64_t v3 = +[CloudXPCService sharedInstance];
  CFStringRef v7 = @"srCapable";
  id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1100)];
  uint64_t v8 = v4;
  double v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  [v3 sendCloudKitMsg:@"smartRoutingCapable" args:v5];
}

void sub_10001FB04(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 1104);
  uint64_t state64 = 0;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  *(void *)(*(void *)(a1 + 32) + 1120) = state64 & 0xFFFFFFFFFFFFLL;
  *(void *)(*(void *)(a1 + 32) + 1112) = HIWORD(v3);
  uint64_t v33 = *(void *)(*(void *)(a1 + 32) + 1120);
  NSPrintF();
  id v4 = objc_claimAutoreleasedReturnValue();
  [v4 UTF8String];
  double v5 = NSDataWithHex();
  double v6 = CUPrintNSDataAddress();

  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    CFStringRef v7 = "no";
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 1112);
    if (v8 == 10721) {
      uint64_t v9 = "yes";
    }
    else {
      uint64_t v9 = "no";
    }
    if (v8 == 328) {
      CFStringRef v7 = "yes";
    }
    id v38 = v9;
    id v39 = v7;
    long long v36 = v6;
    uint64_t v37 = *(void *)(*(void *)(a1 + 32) + 1112);
    id v34 = v4;
    LogPrintF();
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 1112);
  if (v11)
  {
    if (v11 == 11818)
    {
      unsigned int v12 = *(void **)(v10 + 1136);
      if (!v12)
      {
        id v13 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void **)(v14 + 1136);
        *(void *)(v14 + 1136) = v13;

        unsigned int v12 = *(void **)(*(void *)(a1 + 32) + 1136);
      }
      [v12 addObject:v6, v34, v36, v37, v38, v39];
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        long long v35 = v6;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 32) + 280) setObject:&off_100244820 forKeyedSubscript:v6];
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(v10 + 1112);
    }
    if (v11 == 328)
    {
      if (*(unsigned char *)(v10 + 376))
      {
        id v20 = *(void **)(v10 + 280);
        if (!v20)
        {
          id v21 = objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v22 = *(void *)(a1 + 32);
          uint64_t v23 = *(void **)(v22 + 280);
          *(void *)(v22 + 280) = v21;

          id v20 = *(void **)(*(void *)(a1 + 32) + 280);
        }
        [v20 setObject:&off_100244820 forKeyedSubscript:v6];
        goto LABEL_28;
      }
    }
    else if (v11 == 10721)
    {
      if (!*(void *)(v10 + 280))
      {
        id v16 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v17 = *(void *)(a1 + 32);
        id v18 = *(void **)(v17 + 280);
        *(void *)(v17 + 280) = v16;
      }
      uint64_t v19 = +[NSNumber numberWithUnsignedLongLong:mach_absolute_time()];
      [*(id *)(*(void *)(a1 + 32) + 280) setObject:v19 forKeyedSubscript:v6];

LABEL_28:
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(v24 + 136);
      uint64_t v25 = (id *)(v24 + 136);
      if (!v26)
      {
        objc_storeStrong(v25, v6);
        [*(id *)(a1 + 32) _cacheBudswapInfo:v6];
        [*(id *)(a1 + 32) _budSwapDetectionStartTimer:v6];
      }
      goto LABEL_43;
    }
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    v27 = [*(id *)(*(void *)(a1 + 32) + 1200) objectForKey:v6, v34];

    if (v27) {
      [*(id *)(*(void *)(a1 + 32) + 1200) removeObjectForKey:v6];
    }
    v28 = [*(id *)(a1 + 32) _getWxFWVersion:v6];
    if (!*(void *)(*(void *)(a1 + 32) + 280))
    {
      id v29 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v31 = *(void **)(v30 + 280);
      *(void *)(v30 + 280) = v29;
    }
    if ([@"6A221" compare:v28 options:64] == (id)-1
      && [*(id *)(a1 + 32) _isAddDeviceToBackoffDueToDisconnect])
    {
      v32 = +[NSNumber numberWithUnsignedLongLong:mach_absolute_time()];
      [*(id *)(*(void *)(a1 + 32) + 280) setObject:v32 forKeyedSubscript:v6];
    }
    else
    {
      [*(id *)(*(void *)(a1 + 32) + 280) setObject:&off_100244820 forKeyedSubscript:v6];
    }
  }
LABEL_43:
}

void sub_10001FF3C(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3032000000;
  uint64_t v11 = sub_10001E20C;
  unsigned int v12 = sub_10001E21C;
  id v13 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 1168);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_10002016C;
  v7[3] = &unk_1002333A0;
  void v7[4] = v2;
  v7[5] = &v8;
  [v3 enumerateKeysAndObjectsUsingBlock:v7];
  if (v9[5])
  {
    id v4 = [[*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:];
    if (v4)
    {
      double v5 = [*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:v9[5]];
      if ([v5 audioStreamState] == 3)
      {
        int v6 = [*(id *)(*(void *)(a1 + 32) + 160) connectedCallCount];

        if (v6 >= 1)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [*(id *)(a1 + 32) _relayConduitMessageSend:1 withOptions:&off_100244390 andWxAddress:v9[5] andOtherAddress:0];
        }
      }
      else
      {
      }
    }
  }
  _Block_object_dispose(&v8, 8);
}

void sub_100020150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002016C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v21 = a2;
  id v8 = a3;
  if (dword_1002610B8 <= 50 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    if ([v8 inEar]) {
      uint64_t v9 = "yes";
    }
    else {
      uint64_t v9 = "no";
    }
    if ([v8 inEarDisabled]) {
      uint64_t v10 = "yes";
    }
    else {
      uint64_t v10 = "no";
    }
    id v11 = [*(id *)(*(void *)(a1 + 32) + 1168) count];
    unsigned int v12 = [v8 otherTipiDeviceBTAddress];
    if (v12) {
      id v13 = "yes";
    }
    else {
      id v13 = "no";
    }
    id v19 = v11;
    id v20 = v13;
    uint64_t v17 = v9;
    id v18 = v10;
    id v16 = v21;
    LogPrintF();
  }
  if (objc_msgSend(v8, "inEarDisabled", v16, v17, v18, v19, v20))
  {
    uint64_t v14 = [v8 otherTipiDeviceBTAddress];

    if (v14) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    }
  }
  if ([v8 inEar])
  {
    uint64_t v15 = [v8 otherTipiDeviceBTAddress];

    if (v15)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }
}

uint64_t sub_10002031C(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 924);
  uint64_t state64 = 0;
  uint64_t result = notify_get_state(v2, &state64);
  uint64_t v4 = state64;
  if (dword_1002610B8 <= 30)
  {
    if (dword_1002610B8 != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 920) = v4 != 0;
  return result;
}

id sub_1000203E8(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 1196);
  uint64_t state64 = 0;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v4 = "yes";
    if (v3) {
      double v5 = "no";
    }
    else {
      double v5 = "yes";
    }
    if (!v3) {
      uint64_t v4 = "no";
    }
    CFStringRef v7 = v5;
    id v8 = v4;
    LogPrintF();
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 1192) = v3 != 0;
  return [*(id *)(a1 + 32) _updateLocalAudioCategory:*(void *)(*(void *)(a1 + 32) + 496) v7, v8];
}

void *sub_1000204B4(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 608);
  uint64_t state64 = 0;
  notify_get_state(v2, &state64);
  uint64_t v3 = state64;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v4 = "no";
    if (v3) {
      uint64_t v4 = "yes";
    }
    int v6 = v4;
    LogPrintF();
  }
  [*(id *)(*(void *)(a1 + 32) + 1184) setMagnetConnected:v3 != 0, v6];
  uint64_t result = *(void **)(a1 + 32);
  if (result[109]) {
    return [result _checkTriangleRecovery];
  }
  return result;
}

void sub_1000205F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  [*(id *)(a1 + 32) _activityMonitorEnsureStopped];
  uint64_t v4 = *(void *)(a1 + 32);
  double v5 = *(void **)(v4 + 72);
  if (v5)
  {
    *(void *)(v4 + 72) = 0;
  }
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  int v6 = *(void **)(*(void *)(a1 + 32) + 24);
  if (v6)
  {
    CFStringRef v7 = v6;
    dispatch_source_cancel(v7);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 24);
    *(void *)(v8 + 24) = 0;
  }
  uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 144);
  if (v10)
  {
    id v11 = v10;
    dispatch_source_cancel(v11);
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 144);
    *(void *)(v12 + 144) = 0;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 504);
  *(void *)(v14 + 504) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 512) = 0;
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(_DWORD *)(v16 + 516);
  if (v17 != -1)
  {
    notify_cancel(v17);
    *(_DWORD *)(*(void *)(a1 + 32) + 516) = -1;
    uint64_t v16 = *(void *)(a1 + 32);
  }
  id v18 = *(void **)(v16 + 520);
  if (v18)
  {
    id v19 = v18;
    dispatch_source_cancel(v19);
    uint64_t v20 = *(void *)(a1 + 32);
    id v21 = *(void **)(v20 + 520);
    *(void *)(v20 + 520) = 0;
  }
  uint64_t v22 = *(void *)(a1 + 32);
  int v23 = *(_DWORD *)(v22 + 648);
  if (v23 != -1)
  {
    notify_cancel(v23);
    *(_DWORD *)(*(void *)(a1 + 32) + 64_Block_object_dispose(&STACK[0x290], 8) = -1;
    uint64_t v22 = *(void *)(a1 + 32);
  }
  int v24 = *(_DWORD *)(v22 + 740);
  if (v24 != -1)
  {
    notify_cancel(v24);
    *(_DWORD *)(*(void *)(a1 + 32) + 740) = -1;
    uint64_t v22 = *(void *)(a1 + 32);
  }
  uint64_t v25 = *(void **)(v22 + 1064);
  if (v25)
  {
    uint64_t v26 = v25;
    dispatch_source_cancel(v26);
    uint64_t v27 = *(void *)(a1 + 32);
    v28 = *(void **)(v27 + 1064);
    *(void *)(v27 + 1064) = 0;
  }
  id v29 = *(void **)(*(void *)(a1 + 32) + 1256);
  if (v29)
  {
    uint64_t v30 = v29;
    dispatch_source_cancel(v30);
    uint64_t v31 = *(void *)(a1 + 32);
    v32 = *(void **)(v31 + 1256);
    *(void *)(v31 + 1256) = 0;
  }
  uint64_t v33 = *(void **)(*(void *)(a1 + 32) + 408);
  if (v33)
  {
    id v34 = v33;
    dispatch_source_cancel(v34);
    uint64_t v35 = *(void *)(a1 + 32);
    long long v36 = *(void **)(v35 + 408);
    *(void *)(v35 + 40_Block_object_dispose(&STACK[0x290], 8) = 0;
  }
  uint64_t v37 = *(void *)(a1 + 32);
  id v38 = *(void **)(v37 + 1168);
  *(void *)(v37 + 116_Block_object_dispose(&STACK[0x290], 8) = 0;

  uint64_t v39 = *(void *)(a1 + 32);
  id v40 = *(void **)(v39 + 1208);
  *(void *)(v39 + 120_Block_object_dispose(&STACK[0x290], 8) = 0;

  uint64_t v41 = *(void *)(a1 + 32);
  id v42 = *(void **)(v41 + 632);
  *(void *)(v41 + 632) = 0;

  uint64_t v43 = *(void *)(a1 + 32);
  id v44 = *(void **)(v43 + 984);
  *(void *)(v43 + 984) = 0;

  uint64_t v45 = *(void *)(a1 + 32);
  id v46 = *(void **)(v45 + 1000);
  *(void *)(v45 + 1000) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 1242) = 0;
  id v47 = *(void **)(*(void *)(a1 + 32) + 1368);
  if (v47)
  {
    id v48 = v47;
    dispatch_source_cancel(v48);
    uint64_t v49 = *(void *)(a1 + 32);
    id v50 = *(void **)(v49 + 1368);
    *(void *)(v49 + 136_Block_object_dispose(&STACK[0x290], 8) = 0;
  }
  [*(id *)(a1 + 32) _evaluatorEnsureStopped];
  [*(id *)(a1 + 32) _connectedDeviceMonitorEnsureStopped];
  [*(id *)(a1 + 32) _mediaRouteMonitorEnsureStopped];
  [*(id *)(a1 + 32) _nearbyInfoDiscoveryEnsureStopped];
  [*(id *)(a1 + 32) _pipeEnsureStopped];
  [*(id *)(a1 + 32) _powerMonitorEnsureStopped];
  [*(id *)(a1 + 32) _wxDiscoveryEnsureStopped];
  [*(id *)(a1 + 32) _TUMonitorEnsureStopped];
  id v60 = +[NSNotificationCenter defaultCenter];
  [v60 removeObserver:*(void *)(a1 + 32) name:@"BTTotalIDSDeviceCountChanged" object:0];
  id v51 = +[NSDistributedNotificationCenter defaultCenter];
  [v51 removeObserver:*(void *)(a1 + 32) name:@"com.apple.BTServer.TriangleRecoveryInitiated" object:0];

  uint64_t v52 = *(void *)(a1 + 32);
  id v53 = *(void **)(v52 + 1416);
  *(void *)(v52 + 1416) = 0;

  [*(id *)(a1 + 32) _mediaRouteDiscoveryStopped];
  uint64_t v54 = *(void *)(a1 + 32);
  int v55 = *(_DWORD *)(v54 + 924);
  if (v55 != -1)
  {
    notify_cancel(v55);
    *(_DWORD *)(*(void *)(a1 + 32) + 924) = -1;
    uint64_t v54 = *(void *)(a1 + 32);
  }
  int v56 = *(_DWORD *)(v54 + 1196);
  if (v56 != -1)
  {
    notify_cancel(v56);
    *(_DWORD *)(*(void *)(a1 + 32) + 1196) = -1;
    uint64_t v54 = *(void *)(a1 + 32);
  }
  int v57 = *(_DWORD *)(v54 + 1104);
  if (v57 != -1)
  {
    notify_cancel(v57);
    *(_DWORD *)(*(void *)(a1 + 32) + 1104) = -1;
    uint64_t v54 = *(void *)(a1 + 32);
  }
  int v58 = *(_DWORD *)(v54 + 168);
  if (v58 != -1)
  {
    notify_cancel(v58);
    *(_DWORD *)(*(void *)(a1 + 32) + 16_Block_object_dispose(&STACK[0x290], 8) = -1;
    uint64_t v54 = *(void *)(a1 + 32);
  }
  v59 = *(void **)(v54 + 1408);
  *(void *)(v54 + 140_Block_object_dispose(&STACK[0x290], 8) = 0;
}

uint64_t sub_100020B6C(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _lowBatteryReset];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

uint64_t sub_100020C0C(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _lowBatterySave:1];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void *sub_100022D80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v2 == result[44]) {
    return [result _update];
  }
  return result;
}

void sub_100023794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000237B4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v10 = a3;
  if (([v10 deviceFlags] & 1) == 0) {
    *(unsigned char *)(*(void *)(a1 + 32) + 184) = 1;
  }
  CFStringRef v7 = [v10 btAddressData];
  uint64_t v8 = CUPrintNSDataAddress();

  uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v8];

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
}

void sub_100024ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 200), 8);
  _Block_object_dispose((const void *)(v33 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100024B20(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v10 = a3;
  signed int v7 = [v10 audioRoutingScore];
  uint64_t v8 = [v10 model];
  if ((([v8 hasPrefix:@"iPhone"] & 1) != 0
     || ([v8 hasPrefix:@"iPad"] & 1) != 0
     || ([v8 hasPrefix:@"iPod"] & 1) != 0
     || ([v8 containsString:@"Mac"] & 1) != 0
     || [v8 hasPrefix:@"Watch"])
    && v7 >= *(_DWORD *)(a1 + 48))
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v9 = [v10 name];
      LogPrintF();
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    if (*(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= 2) {
      *a4 = 1;
    }
  }
}

void sub_100024CB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  signed int v7 = [v6 bleDevice];
  uint64_t v8 = [v7 advertisementFields];

  if (CFDictionaryGetInt64())
  {
    uint64_t v9 = [v6 bleDevice];
    id v10 = [v9 bluetoothAddress];

    if ([v10 length] == (id)6)
    {
      id v87 = [v10 bytes];
      NSPrintF();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v11 = 0;
    }
    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 280);
    if (!v12)
    {
      id v13 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void **)(v14 + 280);
      *(void *)(v14 + 280) = v13;

      uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 280);
    }
    uint64_t v16 = [v12 objectForKeyedSubscript:v11, v87];
    if (v16)
    {
      int v17 = (void *)v16;
      id v18 = [*(id *)(*(void *)(a1 + 32) + 280) objectForKeyedSubscript:v11];
      id v19 = [v18 unsignedLongLongValue];

      if (v19)
      {
        mach_absolute_time();
        uint64_t v20 = [*(id *)(*(void *)(a1 + 32) + 280) objectForKeyedSubscript:v11];
        [v20 unsignedLongLongValue];
        unint64_t v21 = UpTicksToSeconds();

        uint64_t v22 = *(void *)(a1 + 32);
        if (!*(unsigned char *)(v22 + 152))
        {
          int v26 = *(unsigned __int8 *)(v22 + 704);
          BOOL v27 = v21 < 0xA || v26 == 0;
          if (v27 && v21 <= 0x1D)
          {
            if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
            {
              v88 = v11;
              id v90 = (id)(30 - v21);
              LogPrintF();
            }
            v28 = *(void **)(a1 + 32);
            CFStringRef v29 = @"Too soon since last disconnection";
            goto LABEL_36;
          }
        }
      }
    }
    if (!v11 || ([*(id *)(a1 + 32) _supportsTipi:v11] & 1) == 0)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        id v90 = v11;
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset is not running correct OS version";
      goto LABEL_36;
    }
    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged();
    if (Int64Ranged != 1)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        id v90 = (id)Int64Ranged;
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset is not in status subtype";
      goto LABEL_36;
    }
    int v24 = CFDictionaryGetInt64Ranged();
    if ((v24 & 8) != 0)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset is in airplane mode";
      goto LABEL_36;
    }
    uint64_t Int64 = CFDictionaryGetInt64();
    if ((~v24 & 0x12) == 0 && Int64)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset is in case with lid closed";
      goto LABEL_36;
    }
    if ([*(id *)(*(void *)(a1 + 32) + 1136) containsObject:v11])
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset is part of manual disconnection list";
      goto LABEL_36;
    }
    uint64_t v30 = [*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:v11];

    if (v30)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset already connected";
      goto LABEL_36;
    }
    uint64_t v31 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v11];
    unsigned int v32 = [v31 connected];

    if (v32)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset already connected but haven't received connected event yet";
      goto LABEL_36;
    }
    unsigned int v33 = CFDictionaryGetInt64Ranged();
    int v115 = v24 & 0x24;
    uint64_t v34 = CFDictionaryGetInt64Ranged();
    if ([*(id *)(*(void *)(a1 + 32) + 1168) count])
    {
      if (v33 && ([*(id *)(*(void *)(a1 + 32) + 136) isEqual:v11] & 1) == 0)
      {
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          v88 = [v6 name];
          LogPrintF();
        }
        v28 = *(void **)(a1 + 32);
        CFStringRef v29 = @"Headset not idle and we already have a SR device connected, back off";
        goto LABEL_36;
      }
      if (((v24 & 0x24) != 0 || [*(id *)(a1 + 32) _bluetoothProductIDNoEarDetect:v34])
        && [*(id *)(a1 + 32) _isAnyConnectedWxInEarCheck]
        && ([*(id *)(*(void *)(a1 + 32) + 136) isEqual:v11] & 1) == 0)
      {
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          v88 = [v6 name];
          LogPrintF();
        }
        v28 = *(void **)(a1 + 32);
        CFStringRef v29 = @"already have an inEar SR device connected, and current headset is already inEar, back off";
        goto LABEL_36;
      }
    }
    uint64_t v35 = CFDictionaryGetInt64Ranged();
    unsigned int v36 = [*(id *)(*(void *)(a1 + 32) + 1184) incomingCallRingtone];
    uint64_t v37 = *(void *)(a1 + 32);
    if (v36 && v35 == 2 && !*(unsigned char *)(v37 + 152))
    {
      if (dword_1002610B8 > 30 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
        goto LABEL_125;
      }
LABEL_110:
      LogPrintF();
LABEL_125:
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Ringtone shall not participate tipi election when Airpods already have two device connected";
LABEL_36:
      [v28 _logEvalWxError:v11 withError:v29];
LABEL_37:

      goto LABEL_38;
    }
    v112 = (const char *)v35;
    unsigned int v38 = [*(id *)(v37 + 496) intValue];
    uint64_t v39 = *(void *)(a1 + 32);
    BOOL v40 = (*(unsigned char *)(v39 + 704) || (int)[*(id *)(v39 + 496) intValue] >= 301) && v33 == 0;
    uint64_t v41 = *(void *)(a1 + 32);
    BOOL v42 = v38 == 401 || *(void *)(v41 + 688) != 0;
    if (*(unsigned char *)(v41 + 152)) {
      BOOL v40 = 1;
    }
    if ((v24 & 0x24) == 0) {
      BOOL v40 = 0;
    }
    if (*(unsigned char *)(v41 + 1241) && (!v40 || v42))
    {
      if (dword_1002610B8 > 30 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
        goto LABEL_125;
      }
      goto LABEL_110;
    }
    if ((v24 & 0x24) == 0 && *(unsigned char *)(v41 + 184))
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v88 = [v6 name];
        id v90 = v11;
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"Headset is not in ear and a third party BT device is already connected";
      goto LABEL_36;
    }
    int v111 = v40 && !v42;
    unsigned __int8 v43 = CFDictionaryGetInt64Ranged();
    unsigned __int8 v44 = CFDictionaryGetInt64Ranged();
    unsigned __int8 v110 = v43;
    if (v43 == 8 && v112 || v112 == 2 && v44 == 8)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      v28 = *(void **)(a1 + 32);
      CFStringRef v29 = @"SR disabled on current connected source";
      goto LABEL_36;
    }
    unsigned __int8 v107 = v44;
    if (v111)
    {
      uint64_t v45 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v45 + 152))
      {
        CFStringRef v46 = @"Call";
LABEL_132:
        [*(id *)(v45 + 1224) setOnDemandCategory:v46];
        goto LABEL_133;
      }
      if (*(unsigned char *)(v45 + 704))
      {
        CFStringRef v46 = @"Media";
        goto LABEL_132;
      }
    }
LABEL_133:
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v47 = "no";
      if ((v24 & 0x24) != 0) {
        id v48 = "yes";
      }
      else {
        id v48 = "no";
      }
      v108 = v48;
      if (v111) {
        uint64_t v49 = "yes";
      }
      else {
        uint64_t v49 = "no";
      }
      v105 = v49;
      uint64_t v50 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v50 + 152)) {
        id v51 = "yes";
      }
      else {
        id v51 = "no";
      }
      if (*(unsigned char *)(v50 + 704)) {
        id v47 = "yes";
      }
      v102 = v47;
      v103 = v51;
      if (v33 >> 2) {
        uint64_t v52 = "?";
      }
      else {
        uint64_t v52 = off_100234250[v33];
      }
      v100 = v52;
      v98 = sub_10001EBA8(v43);
      v99 = sub_10001EBA8(v107);
      v96 = v102;
      v97 = v100;
      v94 = v105;
      v95 = v103;
      id v90 = (id)v112;
      v93 = v108;
      v88 = v11;
      LogPrintF();
    }
    CFDictionaryGetCFDataOfLength();
    id v109 = (id)objc_claimAutoreleasedReturnValue();
    if (v112)
    {
      uint64_t v129 = 0;
      v130 = &v129;
      uint64_t v131 = 0x2020000000;
      char v132 = 0;
      uint64_t v104 = CFDictionaryGetInt64();
      v106 = [*(id *)(a1 + 32) _getWxFWVersion:v11 v88 v90 v93 v94 v95 v96 v97 v98 v99];
      if (!v109)
      {
LABEL_219:

        _Block_object_dispose(&v129, 8);
        goto LABEL_220;
      }
      if (objc_msgSend(*(id *)(a1 + 32), "_isEligibleForTipiV2:firstDeviceTipiScore:secondDeviceTipiScore:currentDeviceScore:sourceDeviceCount:isOnDemandConnect:address:lastConnectedHost:", v106, v43, v5, v109))
      {
        [*(id *)(*(void *)(a1 + 32) + 1224) setSetupSupportsTipiv2:1];
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        BOOL v71 = v107 < 8u && *(_DWORD *)(a1 + 64) <= (int)v107;
        if (v107 == 15 || v71)
        {
          if (dword_1002610B8 > 30 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
            goto LABEL_219;
          }
        }
        else
        {
          if ([*(id *)(a1 + 32) _isDevicePairedCheck:v109])
          {
            *(unsigned char *)(*(void *)(a1 + 32) + 1242) = 1;
            [*(id *)(a1 + 32) _setPhase1ConnectConfig:v11 andType:3];
            [*(id *)(*(void *)(a1 + 32) + 1224) setWxTipiScore1:v43];
            [*(id *)(*(void *)(a1 + 32) + 1224) setWxTipiScore2:v107];
            [*(id *)(a1 + 32) _setTipiElectionType:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1242) withDevice:0];
            uint64_t v58 = *(void *)(a1 + 40);
            uint64_t v72 = *(void *)(v58 + 8);
            if ((v24 & 0x24) != 0 || !*(void *)(v72 + 40))
            {
              id v73 = v6;
              int v57 = *(void **)(v72 + 40);
              *(void *)(v72 + 40) = v73;
LABEL_204:

              goto LABEL_219;
            }
            goto LABEL_169;
          }
          if (dword_1002610B8 > 30 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
            goto LABEL_219;
          }
        }
        LogPrintF();
        goto LABEL_219;
      }
      if (*(int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) >= 2 && !v111)
      {
        if (dword_1002610B8 > 30 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
          goto LABEL_219;
        }
        int v57 = [v6 name];
        LogPrintF();
        goto LABEL_204;
      }
      uint64_t v58 = *(void *)(a1 + 40);
LABEL_169:
      uint64_t v59 = *(void *)(a1 + 32);
      v101 = *(void **)(v59 + 568);
      v116[0] = _NSConcreteStackBlock;
      v116[1] = 3221225472;
      v116[2] = sub_10002640C;
      v116[3] = &unk_100233418;
      v116[4] = v59;
      v116[5] = v109;
      v116[6] = v11;
      char v124 = v111;
      unsigned __int8 v125 = v110;
      int v121 = (int)v112;
      unsigned __int8 v126 = v107;
      uint64_t v119 = v58;
      v120 = &v129;
      BOOL v127 = (v24 & 0x24) != 0;
      int v122 = v24;
      unsigned int v123 = v33;
      id v60 = v6;
      id v117 = v60;
      v118 = v106;
      BOOL v128 = v104 != 0;
      [v101 enumerateKeysAndObjectsUsingBlock:v116];
      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)
        || !*(void *)(*(void *)(a1 + 32) + 824)
        || (mach_absolute_time(),
            double v61 = (double)(unint64_t)UpTicksToSeconds(),
            v62 = *(double **)(a1 + 32),
            v62[104] >= v61))
      {
LABEL_170:

        goto LABEL_219;
      }
      unsigned int v63 = [v62 _isDevicePairedCheck:v109];
      if (*(unsigned char *)(*(void *)(a1 + 32) + 860)) {
        unsigned int v64 = v63;
      }
      else {
        unsigned int v64 = 0;
      }
      if (v64 != 1
        || *((unsigned char *)v130 + 24)
        || (id v74 = [@"5A274" compare:v106 options:64], (v24 & 0x24) == 0)
        || v74 != (id)-1)
      {
LABEL_178:
        if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)
          && (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1,
              *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
          || (v65 = *(unsigned char **)(a1 + 32), !v65[811])
          || *((unsigned char *)v130 + 24)
          || !v104)
        {
LABEL_271:
          if (*((unsigned char *)v130 + 24)
            && *(unsigned char *)(*(void *)(a1 + 32) + 811)
            && dword_1002610B8 <= 30
            && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            LogPrintF();
          }
          goto LABEL_170;
        }
        id v114 = [v65 _myBluetoothAddressString];
        [v114 UTF8String];
        v66 = NSDataWithHex();
        if ([v66 length] == (id)6)
        {
          v67 = (char *)[v66 bytes];
          v68 = (unsigned __int16 *)[v109 bytes];
          if (*v68 == *(unsigned __int16 *)(v67 + 3) && *((unsigned __int8 *)v68 + 2) == v67[5])
          {
            if (dword_1002610B8 > 30)
            {
LABEL_230:
              if (objc_msgSend(*(id *)(a1 + 32), "_isDevicePairedCheck:", v109, v89, v91))
              {
                uint64_t v75 = *(void *)(a1 + 32);
                if (!*(unsigned char *)(v75 + 360))
                {
                  v76 = *(void **)(v75 + 592);
                  if (!v76)
                  {
                    v77 = objc_alloc_init(BTSmartRoutingNearbyStats);
                    uint64_t v78 = *(void *)(a1 + 32);
                    v79 = *(void **)(v78 + 592);
                    *(void *)(v78 + 592) = v77;

                    v76 = *(void **)(*(void *)(a1 + 32) + 592);
                  }
                  [v76 setNoNearbyDeviceFoundCount:[v76 noNearbyDeviceFoundCount] + 1];
                  [*(id *)(*(void *)(a1 + 32) + 592) setSRConnectedSetCount:[*(id *)(*(void *)(a1 + 32) + 592) SRConnectedSetCount] + 1];
                  v80 = [v60 bleDevice];
                  id v113 = [v80 rssi];

                  if ((int)[*(id *)(*(void *)(a1 + 32) + 592) minRSSIHeadset] > (int)v113) {
                    [*(id *)(*(void *)(a1 + 32) + 592) setMinRSSIHeadset:v113];
                  }
                  if (!v106 || [@"4A345" compare:v106 options:64] == (id)1) {
                    *((unsigned char *)v130 + 24) = 1;
                  }
                  uint64_t v81 = *(void *)(a1 + 32);
                  if (*(int *)(v81 + 1020) < 3 || !v115 || *(_DWORD *)(v81 + 364) > (int)v113) {
                    *((unsigned char *)v130 + 24) = 1;
                  }
                  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
                  {
                    v82 = [v60 name];
                    sub_10001EBA8(*(_DWORD *)(*(void *)(a1 + 32) + 1020));
                    LogPrintF();
                  }
                  if (!*((unsigned char *)v130 + 24))
                  {
                    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
                    *(unsigned char *)(*(void *)(a1 + 32) + 360) = 1;
                    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
                      LogPrintF();
                    }
                  }
                }
              }

              goto LABEL_271;
            }
            if (dword_1002610B8 != -1 || _LogCategory_Initialize()) {
              LogPrintF();
            }
          }
        }
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        goto LABEL_230;
      }
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        v89 = v112;
        LogPrintF();
      }
      unsigned int v83 = CFDictionaryGetInt64Ranged();
      if (v112 == 1 && v83 && v83 <= 3)
      {
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          v89 = sub_10001EBA8(v83);
          LogPrintF();
        }
        goto LABEL_261;
      }
      if (v112 != 2) {
        goto LABEL_178;
      }
      unsigned __int8 v84 = CFDictionaryGetInt64Ranged();
      if (v83 - 1 > 2) {
        goto LABEL_178;
      }
      signed int v85 = v84;
      if (!v84) {
        goto LABEL_178;
      }
      signed int v86 = *(_DWORD *)(a1 + 64);
      if (v86 <= v85) {
        goto LABEL_178;
      }
      if (dword_1002610B8 > 30) {
        goto LABEL_261;
      }
      if (dword_1002610B8 == -1)
      {
        if (!_LogCategory_Initialize()) {
          goto LABEL_261;
        }
        signed int v86 = *(_DWORD *)(a1 + 64);
      }
      v89 = sub_10001EBA8(v86);
      v91 = sub_10001EBA8(v85);
      LogPrintF();
LABEL_261:
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
      goto LABEL_178;
    }
    uint64_t v53 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v55 = *(void *)(v53 + 40);
    uint64_t v54 = (id *)(v53 + 40);
    if (v55)
    {
      if ((v24 & 0x24) == 0)
      {
LABEL_220:

        goto LABEL_37;
      }
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        int v56 = [[*(id *)(*(void *)(a1 + 32) + 336) name:v88, v90, v93, v94, v95, v96, v97, v98, v99];
        v92 = [v6 name];
        LogPrintF();
      }
      uint64_t v54 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    objc_storeStrong(v54, a3);
    goto LABEL_220;
  }
LABEL_38:
}

void sub_1000263CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10002640C(uint64_t a1, uint64_t a2, void *a3)
{
  id v45 = a3;
  uint64_t v4 = [v45 bleDevice];
  id v5 = [v4 advertisementFields];

  id v6 = CFDictionaryGetCFDataOfLength();
  signed int v7 = v6;
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = [v45 model];
    unsigned int v10 = [v9 containsString:@"Mac"];

    if (v10)
    {
      id v11 = *(void **)(a1 + 32);
      uint64_t v12 = [v45 idsIdentifier];
      uint64_t v13 = [v11 _nearbyMacAddressTranslate:v12];

      id v8 = (id)v13;
      if (!v13) {
        goto LABEL_16;
      }
    }
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v14 = *(void **)(a1 + 40);
      uint64_t v15 = [v45 identifier];
      uint64_t v16 = [v15 UUIDString];
      int v17 = [v45 name];
      unsigned int v18 = [v45 audioRoutingScore];
      if (v18 > 0xF) {
        id v19 = "?";
      }
      else {
        id v19 = off_1002342D0[v18];
      }
      unsigned __int8 v43 = v17;
      unsigned __int8 v44 = v19;
      uint64_t v41 = v8;
      BOOL v42 = v16;
      uint64_t v39 = v14;
      LogPrintF();
    }
    id v8 = v8;
    uint64_t v20 = (char *)[v8 bytes];
    unint64_t v21 = (unsigned __int16 *)[*(id *)(a1 + 40) bytes];
    if (*v21 != *(unsigned __int16 *)(v20 + 3) || *((unsigned __int8 *)v21 + 2) != v20[5]) {
      goto LABEL_16;
    }
    if ([v45 audioRoutingScore]
      && ([v45 model],
          int v23 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v24 = [v23 hasPrefix:@"Watch"],
          v23,
          (v24 & 1) == 0))
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
      {
        [*(id *)(a1 + 32) _setTipiElectionType:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1242) withDevice:v45];
        if (!*(unsigned char *)(a1 + 100)
          || *(unsigned char *)(a1 + 101) == 8
          || *(_DWORD *)(a1 + 88) == 2 && *(unsigned char *)(a1 + 102) == 8)
        {
          goto LABEL_43;
        }
        goto LABEL_26;
      }
      if ((*(unsigned char *)(a1 + 92) & 0x24) != 0)
      {
        [*(id *)(a1 + 32) _setTipiElectionType:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1242) withDevice:v45];
        if (*(unsigned char *)(a1 + 100)
          && *(unsigned char *)(a1 + 101) != 8
          && (*(_DWORD *)(a1 + 88) != 2 || *(unsigned char *)(a1 + 102) != 8))
        {
          [*(id *)(a1 + 32) _setPhase1ConnectConfig:andType:2, v39, v41, v42, v43, v44];
        }
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          BOOL v27 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) name:v39];
          [*(id *)(a1 + 56) name];
          v41 = uint64_t v39 = v27;
          LogPrintF();
        }
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v25 = [v45 model:v39, v41, v42, v43, v44];
      if (![v25 hasPrefix:@"Watch"])
      {
LABEL_44:

        goto LABEL_45;
      }
      int v26 = *(unsigned __int8 *)(a1 + 100);

      if (v26 && !*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
      {
        [*(id *)(a1 + 32) _setTipiElectionType:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1242) withDevice:v45];
LABEL_26:
        [*(id *)(a1 + 32) _setPhase1ConnectConfig:*(void *)(a1 + 48) andType:2 v39];
LABEL_43:
        uint64_t v28 = *(void *)(*(void *)(a1 + 72) + 8);
        id v29 = *(id *)(a1 + 56);
        uint64_t v25 = *(void **)(v28 + 40);
        *(void *)(v28 + 40) = v29;
        goto LABEL_44;
      }
    }
LABEL_45:
    if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) && *(unsigned char *)(*(void *)(a1 + 32) + 811)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
    }
    if (!*(unsigned char *)(a1 + 103)) {
      goto LABEL_16;
    }
    uint64_t v30 = [v45 model];
    if ([v30 hasPrefix:@"Watch"])
    {
      int v31 = *(_DWORD *)(a1 + 96);

      if (v31) {
        goto LABEL_16;
      }
      unsigned int v32 = *(void **)(*(void *)(a1 + 32) + 592);
      if (!v32)
      {
        unsigned int v33 = objc_alloc_init(BTSmartRoutingNearbyStats);
        uint64_t v34 = *(void *)(a1 + 32);
        uint64_t v35 = *(void **)(v34 + 592);
        *(void *)(v34 + 592) = v33;

        unsigned int v32 = *(void **)(*(void *)(a1 + 32) + 592);
      }
      [v32 setNearbyDeviceNoTipiScoreCount:[v32 nearbyDeviceNoTipiScoreCount:v39, v41] + 1];
      if ([@"4E20" compare:*(void *)(a1 + 64) options:64] != (id)1 && !*(unsigned char *)(a1 + 104)) {
        goto LABEL_16;
      }
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        BOOL v40 = [*(id *)(a1 + 56) name];
        LogPrintF();
      }
      unsigned int v36 = *(void **)(a1 + 56);
      uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8);
      id v38 = v36;
      uint64_t v30 = *(void **)(v37 + 40);
      *(void *)(v37 + 40) = v38;
    }

LABEL_16:
  }
}

uint64_t sub_100026948(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3) {
    goto LABEL_62;
  }
  unsigned int v32 = v3;
  if (dword_1002610B8 <= 90)
  {
    if (dword_1002610B8 != -1 || (v5 = _LogCategory_Initialize(), id v4 = v32, v5))
    {
      uint64_t v28 = [*(id *)(*(void *)(a1 + 32) + 488) name];
      uint64_t v30 = v32;
      LogPrintF();

      id v4 = v32;
    }
  }
  [*(id *)(a1 + 32) _setOtherTipiDeviceBTAddress:0 andName:0 sourceVersion:0 withResult:v4, v28, v30];
  if (GestaltGetDeviceClass() == 6)
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 1364) = 0;
    [*(id *)(a1 + 32) _update];
  }
  id v6 = CUPrintNSError();
  if ([v32 code] == (id)-6709)
  {
    if (dword_1002610B8 > 90 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_55;
    }
    goto LABEL_11;
  }
  if ([*(id *)(a1 + 32) _isOnDemandConnectInProgress]
    && [v6 isEqualToString:@"kUnknownErr (Cleanup before done)"])
  {
    if (dword_1002610B8 > 90 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_55;
    }
LABEL_11:
    LogPrintF();
    goto LABEL_55;
  }
  uint64_t v7 = [*(id *)(a1 + 32) _getWxFWVersion:*(void *)(a1 + 40)];
  id v8 = (void *)v7;
  uint64_t v9 = &stru_10023D730;
  if (v7) {
    uint64_t v9 = (__CFString *)v7;
  }
  unsigned int v10 = v9;

  id v11 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) identifier];
  uint64_t v12 = [v11 UUIDString];

  if (v12)
  {
    uint64_t v13 = [*(id *)(*(void *)(a1 + 32) + 600) objectForKeyedSubscript:v12];
    if (v13)
    {
      uint64_t v14 = (void *)v13;
      uint64_t v15 = [*(id *)(*(void *)(a1 + 32) + 600) objectForKeyedSubscript:v12];
      id v16 = [v15 audioState];

      if (!v16 && [@"5A187" compare:v10 options:64] == (id)-1)
      {
        int v17 = [*(id *)(*(void *)(a1 + 32) + 1184) isFirstConnectionAfterSREnable];
        unsigned int v18 = [v17 objectForKey:*(void *)(a1 + 40)];

        if (!v18)
        {
          if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            uint64_t v22 = [*(id *)(*(void *)(a1 + 32) + 1184) isFirstConnectionAfterSREnable];
            id v29 = [v22 objectForKeyedSubscript:*(void *)(a1 + 40)];
            LogPrintF();
          }
          *(unsigned char *)(*(void *)(a1 + 32) + 1242) = 1;
          goto LABEL_53;
        }
      }
    }
  }
  if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    id v19 = [*(id *)(*(void *)(a1 + 32) + 600) objectForKeyedSubscript:v12];
    unint64_t v20 = (unint64_t)[v19 audioState];
    if (v20 > 3) {
      unint64_t v21 = "?";
    }
    else {
      unint64_t v21 = off_100234250[v20];
    }
    id v29 = v10;
    int v31 = v21;
    LogPrintF();
  }
  if (objc_msgSend(v32, "code", v29, v31) == (id)-6722)
  {
    if (dword_1002610B8 > 90 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_53;
    }
    goto LABEL_41;
  }
  if ([v32 code] == (id)-6720)
  {
    if (dword_1002610B8 > 90 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
      goto LABEL_53;
    }
LABEL_41:
    LogPrintF();
LABEL_53:
    [*(id *)(*(void *)(a1 + 32) + 352) trigger:v29];
  }

LABEL_55:
  *(unsigned char *)(*(void *)(a1 + 32) + 1243) = 0;
  uint64_t v23 = *(void *)(a1 + 32);
  unsigned __int8 v24 = *(void **)(v23 + 488);
  *(void *)(v23 + 48_Block_object_dispose(&STACK[0x290], 8) = 0;

  if ([*(id *)(a1 + 32) _isOnDemandConnectInProgress]
    && [v6 isEqualToString:@"kUnknownErr (Cleanup before done)"])
  {
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 1241) = 0;
    uint64_t v25 = *(void *)(a1 + 32);
    int v26 = *(void **)(v25 + 336);
    *(void *)(v25 + 336) = 0;
  }
  id v4 = v32;
LABEL_62:

  return _objc_release_x1(v3, v4);
}

void sub_100026ECC(id a1, NSString *a2, SRDiscoveredDevice *a3, BOOL *a4)
{
}

void sub_100027D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100027D70(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  BOOL v5 = [a3 routingAction] == 2;
  id v6 = v7;
  if (!v5)
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    id v6 = v7;
  }
}

void sub_100028380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100028398(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 1344))
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      if (a2 > 6) {
        id v6 = "?";
      }
      else {
        id v6 = off_100233F10[a2];
      }
      uint64_t v7 = *(int *)(a1 + 64);
      if (v7 > 5) {
        id v8 = "?";
      }
      else {
        id v8 = off_100233EE0[v7];
      }
      uint64_t v34 = v8;
      id v35 = v5;
      unsigned int v33 = v6;
      LogPrintF();
    }
    int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    if (a2 == 1)
    {
      if (v9 == 4)
      {
        ++*(_DWORD *)(*(void *)(a1 + 40) + 548);
        int v10 = [*(id *)(*(void *)(a1 + 40) + 160) activeCallCount];
        id v11 = *(void **)(a1 + 40);
        CFStringRef v12 = @"-tacl";
        if (v10 > 0) {
          CFStringRef v12 = @"-tsco";
        }
        uint64_t v13 = +[NSString stringWithFormat:@"%@%@", *(void *)(a1 + 48), v12, v35];
        [v11 _smartRoutingChangeRoute:v13];

        uint64_t v14 = *(void **)(*(void *)(a1 + 40) + 1168);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_1000288FC;
        v39[3] = &unk_1002334D0;
        id v15 = *(id *)(a1 + 48);
        uint64_t v16 = *(void *)(a1 + 40);
        id v40 = v15;
        uint64_t v41 = v16;
        [v14 enumerateKeysAndObjectsUsingBlock:v39];

        int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      }
      if (v9 == 5)
      {
        ++*(_DWORD *)(*(void *)(a1 + 40) + 968);
        ++*(_DWORD *)(*(void *)(a1 + 40) + 976);
        int v17 = [*(id *)(*(void *)(a1 + 40) + 160) activeCallCount];
        unsigned int v18 = *(void **)(a1 + 40);
        CFStringRef v19 = @"-tacl";
        if (v17 > 0) {
          CFStringRef v19 = @"-tsco";
        }
        unint64_t v20 = +[NSString stringWithFormat:@"%@%@", *(void *)(a1 + 48), v19];
        [v18 _smartRoutingChangeRoute:v20];

        unint64_t v21 = *(void **)(*(void *)(a1 + 40) + 1168);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_1000289B4;
        v36[3] = &unk_1002334D0;
        id v22 = *(id *)(a1 + 48);
        uint64_t v23 = *(void *)(a1 + 40);
        id v37 = v22;
        uint64_t v38 = v23;
        [v21 enumerateKeysAndObjectsUsingBlock:v36];

        int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      }
      if (v9 != 3) {
        goto LABEL_51;
      }
      unsigned __int8 v24 = [*(id *)(*(void *)(a1 + 40) + 1208) objectForKeyedSubscript:*(void *)(a1 + 48)];
      uint64_t v25 = [v24 nearbyWxDevice];

      if (v25)
      {
        [*(id *)(a1 + 40) _smartRoutingConnectToEligibleHeadset:v25];
      }
      else if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        unsigned int v33 = *(const char **)(a1 + 48);
        LogPrintF();
      }

      BOOL v27 = "Default";
    }
    else
    {
      if (v9 != 3) {
        goto LABEL_39;
      }
      if (a2 == 2)
      {
        int v26 = [*(id *)(*(void *)(a1 + 40) + 1208) objectForKeyedSubscript:*(void *)(a1 + 48)];
        [v26 _setInUseBannerBackoffReason:@"UserDismiss"];
        [v26 _setInUseBannerBackoffTick:mach_absolute_time()];

        BOOL v27 = "Dismiss";
      }
      else
      {
        BOOL v27 = "Invalid";
        switch(a2)
        {
          case 0u:
            break;
          case 3u:
            BOOL v27 = "Invalidated";
            break;
          case 4u:
            BOOL v27 = "Error";
            break;
          case 6u:
            BOOL v27 = "Timeout";
            break;
          default:
            BOOL v27 = "?";
            break;
        }
      }
    }
    uint64_t v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27, v33, v34);
    [*(id *)(*(void *)(a1 + 40) + 1224) setBannerAction:v28];

    [*(id *)(a1 + 40) _startRouteCheckTimer:*(void *)(a1 + 48) andType:13];
LABEL_39:
    if ((a2 | 4) == 6)
    {
      int v29 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      if (v29 == 5)
      {
        ++*(_DWORD *)(*(void *)(a1 + 40) + 972);
        int v29 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      }
      if (v29 == 4)
      {
        ++*(_DWORD *)(*(void *)(a1 + 40) + 552);
        int v29 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      }
      if (a2 == 2 && v29 == 1)
      {
        uint64_t v30 = 188;
      }
      else
      {
        if (a2 != 6 || v29 != 1) {
          goto LABEL_51;
        }
        uint64_t v30 = 192;
      }
      ++*(_DWORD *)(*(void *)(a1 + 40) + v30);
    }
LABEL_51:
    [*(id *)(*(void *)(a1 + 40) + 1344) invalidate:v33];
    uint64_t v31 = *(void *)(a1 + 40);
    unsigned int v32 = *(void **)(v31 + 1344);
    *(void *)(v31 + 1344) = 0;
  }
}

uint64_t sub_1000288FC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v11 = a3;
  id v7 = [a2 isEqualToString:*(void *)(a1 + 32)];
  id v8 = v11;
  if (v7)
  {
    [v11 _setRoutedState:1];
    [v11 _setRoutingAction:1];
    int v9 = [v11 otherTipiDeviceBTAddress];

    if (v9) {
      id v7 = [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:&off_1002443B8 andWxAddress:*(void *)(a1 + 32) andOtherAddress:0];
    }
    *a4 = 1;
    id v8 = v11;
  }

  return _objc_release_x1(v7, v8);
}

void sub_1000289B4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v8 isEqual:*(void *)(a1 + 32)])
  {
    id v6 = [v5 otherTipiDeviceBTAddress];

    if (v6)
    {
      ++*(_DWORD *)(*(void *)(a1 + 40) + 556);
      [*(id *)(a1 + 40) submitRouteActivityMetric:*(void *)(a1 + 32) activity:@"Reverse"];
      [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:&off_1002443E0 andWxAddress:*(void *)(a1 + 32) andOtherAddress:0];
      [*(id *)(a1 + 40) _sendRouteReversedTipiEventForTipsSupport];
      [*(id *)(a1 + 40) _handleHijackBlockingwithDevice:v8];
      id v7 = [*(id *)(*(void *)(a1 + 40) + 1224) reverseRouteReason];

      if (!v7) {
        [*(id *)(*(void *)(a1 + 40) + 1224) setReverseRouteReason:@"Reverse_banner"];
      }
    }
  }
}

uint64_t sub_100029220(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_1002610B8 <= 90)
    {
      id v7 = v3;
      if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v7, v3))
      {
        id v6 = [*(id *)(*(void *)(a1 + 32) + 488) name];
        LogPrintF();

        id v4 = v7;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000292E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v7 = v3;
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v5 = [*(id *)(*(void *)(a1 + 32) + 488) name];
      id v6 = v7;
      LogPrintF();
    }
    id v4 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:*(void *)(a1 + 40), v5, v6];
    [v4 _setOtherTipiDeviceInfo:0 andName:0 andVersion:0];

    [*(id *)(a1 + 32) _tipiHealingAttempt];
    id v3 = v7;
  }
}

void sub_1000293C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if ([a2 isEqual:*(void *)(a1 + 32)])
  {
    id v6 = [v5 otherTipiDeviceBTAddress];

    if (v6)
    {
      id v7 = [v5 otherTipiDeviceBTAddress];
      [*(id *)(a1 + 40) _updateNearbyDeviceState:*(void *)(a1 + 32) withAddress:v7 withEasyPairing:0 withState:1];
      id v8 = [*(id *)(a1 + 40) _myBluetoothAddressString];
      v11[0] = v7;
      v11[1] = v8;
      int v9 = +[NSArray arrayWithObjects:v11 count:2];
      int v10 = [*(id *)(*(void *)(a1 + 40) + 200) objectForKeyedSubscript:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) _updateAccessoryID:v10 connectionDeviceAddresses:v9 completion:&stru_100233538];
    }
    else if ([*(id *)(*(void *)(a1 + 40) + 1168) count] == (id)1)
    {
      [*(id *)(a1 + 40) _updateNearbyDeviceState:*(void *)(a1 + 32) withAddress:&stru_10023D730 withEasyPairing:0 withState:1];
    }
  }
}

void sub_100029524(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1002610B8 <= 90)
    {
      id v4 = v2;
      if (dword_1002610B8 != -1 || (v2 = (NSError *)_LogCategory_Initialize(), id v3 = v4, v2))
      {
        uint64_t v2 = (NSError *)LogPrintF();
        id v3 = v4;
      }
    }
  }

  _objc_release_x1(v2, v3);
}

void sub_100029AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_100029AEC(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  long long v2 = *(_OWORD *)(a1 + 48);
  int8x16_t v3 = *(int8x16_t *)(a1 + 32);
  int8x16_t v5 = vextq_s8(v3, v3, 8uLL);
  v4[2] = sub_100029B8C;
  v4[3] = &unk_100233560;
  uint64_t v7 = *(void *)(a1 + 64);
  id v1 = (id)v2;
  long long v6 = v2;
  [(id)v3.i64[0] activateWithCompletion:v4];
}

void sub_100029B8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 232) == *(void *)(a1 + 40))
  {
    id v12 = v3;
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      unint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      id v11 = v12;
      LogPrintF();
    }
    *(void *)(*(void *)(a1 + 32) + 1112) = 0;
    *(void *)(*(void *)(a1 + 32) + 24_Block_object_dispose(&STACK[0x290], 8) = mach_absolute_time();
    id v4 = [*(id *)(*(void *)(a1 + 32) + 600) objectForKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    [v4 lastConnectionTicks];
    unint64_t v5 = UpTicksToMilliseconds();

    if (v5 >= 0x1389 && dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      unint64_t v10 = v5;
      LogPrintF();
    }
    [*(id *)(a1 + 48) setLastConnectTime:v5 v10 v11];
    if (v12)
    {
      long long v6 = +[NSString stringWithFormat:@"%@", v12];
      [*(id *)(a1 + 48) setLastConnectResult:v6];
    }
    else
    {
      [*(id *)(a1 + 48) setLastConnectResult:@"Success"];
    }
    [*(id *)(a1 + 32) _smartRoutingConnectionCompleted:v12];
    uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 600) objectForKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    unsigned int v8 = [v7 preemptiveBannerShown];

    id v3 = v12;
    if (!v12 && v8)
    {
      int v9 = [*(id *)(*(void *)(a1 + 32) + 600) objectForKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
      [v9 setFirstPreemptiveBannerShown:0];

      id v3 = 0;
    }
  }
}

void sub_10002ABBC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_10002AC34(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  *a4 = 1;
}

void sub_10002AC6C(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v24 = a2;
  id v8 = a3;
  if (dword_1002610B8 <= 50 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    int v9 = "no";
    if ([v8 inEar]) {
      unint64_t v10 = "yes";
    }
    else {
      unint64_t v10 = "no";
    }
    if ([v8 inEarDisabled]) {
      int v9 = "yes";
    }
    id v22 = v9;
    id v23 = [*(id *)(a1[4] + 1168) count];
    id v20 = v24;
    unint64_t v21 = v10;
    LogPrintF();
  }
  if ((objc_msgSend(v8, "inEarDisabled", v20, v21, v22, v23) & 1) != 0
    || [v8 inEar])
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    uint64_t v11 = [v8 otherTipiDeviceBTAddress];
    uint64_t v12 = *(void *)(a1[6] + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = [v8 otherTipiDeviceVersion];
    uint64_t v15 = *(void *)(a1[7] + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = [v8 deviceVersion];
    uint64_t v18 = *(void *)(a1[8] + 8);
    CFStringRef v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
  if ([v8 inEar]) {
    *a4 = 1;
  }
}

void sub_10002AE18(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  int v9 = [v8 identifier];
  if (v7
    && *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)
    && objc_msgSend(v7, "isEqualToString:"))
  {
    unint64_t v10 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(a1 + 32) clientID]);
    if (!*(unsigned char *)(*(void *)(a1 + 40) + 810))
    {
LABEL_13:

      goto LABEL_14;
    }
    if ([v8 routingAction] == 2
      || [v8 isRoutingActionInitialized]
      && [v8 routingAction] == 1
      && ([v8 otherTipiDeviceBTAddress],
          uint64_t v14 = objc_claimAutoreleasedReturnValue(),
          v14,
          !v14))
    {
      [*(id *)(a1 + 48) setAction:[v8 routingAction]];
      if ([v8 routingAction] == 2) {
        id v11 = 0;
      }
      else {
        id v11 = v7;
      }
      [*(id *)(a1 + 48) setDeviceAddress:v11];
      uint64_t v12 = *(void **)(a1 + 48);
      CFStringRef v13 = @"Not tipi device";
    }
    else
    {
      if ((int)[*(id *)(a1 + 32) audioScore] < 1)
      {
        if (*(unsigned char *)(a1 + 104)
          && [v8 hasOwnership]
          && [v8 otherTipiAudioCategory] <= 0x64)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [*(id *)(a1 + 48) setAction:1];
          [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
          [*(id *)(a1 + 48) setReason:@"Buds in ear, other tipi idle."];
          [*(id *)(a1 + 48) setClientID:[*(id *)(a1 + 32) clientID]];
          [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
          *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
          *a4 = 1;
          goto LABEL_13;
        }
        if ([*(id *)(*(void *)(a1 + 40) + 136) isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)])
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            uint64_t v87 = *(void *)(*(void *)(a1 + 40) + 136);
            LogPrintF();
            [v8 _setRoutingAction:3 v87];
          }
          else
          {
            [v8 _setRoutingAction:3 v86];
          }
        }
        [*(id *)(a1 + 48) setAction:[v8 routingAction]];
        if ([v8 routingAction] == 1) {
          uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        }
        else {
          uint64_t v37 = 0;
        }
        [*(id *)(a1 + 48) setDeviceAddress:v37];
        unsigned int v38 = [v8 routingAction];
        CFStringRef v39 = @"not routed";
        if (v38 == 1) {
          CFStringRef v39 = @"routed";
        }
        id v40 = +[NSString stringWithFormat:@"Tipi device is: %@", v39];
        [*(id *)(a1 + 48) setReason:v40];

        goto LABEL_11;
      }
      mach_absolute_time();
      uint64_t v15 = UpTicksToSeconds();
      mach_absolute_time();
      UpTicksToSecondsF();
      uint64_t v17 = v16;
      mach_absolute_time();
      [v8 otherTipiManuallyRouteTicks];
      uint64_t v18 = UpTicksToSeconds();
      CFStringRef v19 = &unk_100261000;
      if (dword_1002610B8 <= 30)
      {
        uint64_t v20 = v18;
        if (dword_1002610B8 != -1 || _LogCategory_Initialize())
        {
          uint64_t v98 = *(void *)(*(void *)(a1 + 40) + 128);
          uint64_t v101 = v20;
          uint64_t v93 = v17;
          uint64_t v86 = v15;
          LogPrintF();
        }
      }
      unint64_t v109 = v15;
      if ((objc_msgSend(*(id *)(a1 + 32), "flags", v86, v93, v98, v101) & 2) == 0
        || ([*(id *)(*(void *)(a1 + 40) + 1168) objectForKeyedSubscript:v7],
            unint64_t v21 = objc_claimAutoreleasedReturnValue(),
            id v22 = [v21 hijackBackoffTicks],
            v21,
            v22))
      {
        if ([v8 otherTipiDeviceIsWatch]
          && [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) isEqualToString:@"Alarm"])
        {
          id v23 = [*(id *)(a1 + 32) appBundleID];
          id v24 = +[NSString stringWithFormat:@"Opt-out SR for app %@ on phone since the other tipi device is a watch", v23];

          [*(id *)(a1 + 48) setAction:3];
          [*(id *)(a1 + 48) setDeviceAddress:0];
          [*(id *)(a1 + 48) setReason:v24];
          [*(id *)(a1 + 48) setClientID:[*(id *)(a1 + 32) clientID]];
          [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
          *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
          *a4 = 1;

          goto LABEL_13;
        }
        [v8 setAudioRoutingScore:[*(id *)(a1 + 32) audioScore]];
        *(void *)(*(void *)(a1 + 40) + 104) = mach_absolute_time();
        [*(id *)(*(void *)(a1 + 40) + 1224) setHijackRelaySent:0];
        [*(id *)(*(void *)(a1 + 40) + 1224) setHijackScore:[*(id *)(a1 + 32) audioScore]];
        uint64_t v25 = [*(id *)(a1 + 32) appBundleID];
        [*(id *)(*(void *)(a1 + 40) + 1224) setHijackPlayingApp:v25];

        int v26 = [*(id *)(*(void *)(a1 + 40) + 200) objectForKeyedSubscript:v7];
        unsigned int v27 = [v26 audioStreamState];
        if (v27 > 3) {
          uint64_t v28 = "?";
        }
        else {
          uint64_t v28 = off_100234420[v27];
        }
        int v29 = +[NSString stringWithUTF8String:v28];
        [*(id *)(*(void *)(a1 + 40) + 1224) setWxStreamState:v29];

        uint64_t v30 = *(void *)(a1 + 40);
        if (*(void *)(v30 + 800))
        {
          uint64_t v31 = [*(id *)(v30 + 1168) objectForKeyedSubscript:v7];
          id v32 = [v31 hijackBackoffTicks];

          uint64_t v30 = *(void *)(a1 + 40);
          if (v32)
          {
            unsigned int v33 = [*(id *)(v30 + 1168) objectForKeyedSubscript:v7];
            uint64_t v34 = (uint64_t)[v30 _checkTickswithinWindow:objc_msgSend(v33, "hijackBackoffTicks") withWindow:*(void *)(*(void *)(a1 + 40) + 800)];

            if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
            {
              uint64_t v35 = UpTicksToSeconds();
              unsigned int v36 = [*(id *)(*(void *)(a1 + 40) + 1168) objectForKeyedSubscript:v7];
              uint64_t v94 = v35;
              id v99 = [v36 hijackBackoffTicks];
              id v88 = v7;
              LogPrintF();

              CFStringRef v19 = (_DWORD *)&unk_100261000;
            }
            if (v34 >= 1)
            {
              [*(id *)(a1 + 48) setAction:4];
              if (([*(id *)(a1 + 32) flags] & 2) != 0) {
                uint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
              }
              else {
                uint64_t v41 = 0;
              }
              [*(id *)(a1 + 48) setDeviceAddress:v41, v88, v94, v99];
              [*(id *)(a1 + 48) setReason:@"Hijack Block Period"];
              [*(id *)(a1 + 48) setClientID:[*(id *)(a1 + 32) clientID]];
              [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
              [*(id *)(a1 + 40) _startHijackMetricSubmission:4 wxAddress:v7 version:@"NA"];
              goto LABEL_12;
            }
            BOOL v42 = [*(id *)(*(void *)(a1 + 40) + 1168) objectForKeyedSubscript:v7];
            [v42 _setHijackBackoffTick:0];

            uint64_t v30 = *(void *)(a1 + 40);
          }
        }
        unsigned __int8 v43 = [v30 _getWxFWVersion:v7 v88:v94 v99:v99];
        if ([v8 isRoutingActionInitialized])
        {
          if ([*(id *)(a1 + 40) _deviceSupportsHijackV2:v43 withDevice:v8] && v43)
          {
            if (*(unsigned char *)(*(void *)(a1 + 40) + 840))
            {
              [v8 setAudioRoutingResponse:*(void *)(a1 + 56)];
              [v8 setAudioRoutingClientID:[*(id *)(a1 + 32) clientID]];
              unsigned __int8 v44 = *(void **)(a1 + 40);
              id v45 = [*(id *)(a1 + 32) audioScore];
              id v111 = 0;
              id v46 = [v44 allowHijackWithAudioScore:v45 hijackRoute:v7 hijackDeniedReason:&v111];
              id v47 = v111;
              if ([v47 isEqualToString:@"Fall back to legacy hijack"])
              {
                unsigned __int8 v107 = v47;
                v108 = v43;
                goto LABEL_81;
              }
              [*(id *)(a1 + 40) _mediaRouteHijackResponseHandlerFor:v7 allowedToHijack:v46 withReason:v47];
              *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;

LABEL_77:
              *a4 = 1;

              goto LABEL_13;
            }
            v108 = v43;
          }
          else
          {
            int v49 = v19[46];
            v108 = v43;
            if (v49 <= 30 && (v49 != -1 || _LogCategory_Initialize()))
            {
              [v8 otherTipiDeviceVersion];
              v95 = v89 = v43;
              LogPrintF();
            }
          }
          unsigned __int8 v107 = 0;
LABEL_81:
          mach_absolute_time();
          unint64_t v50 = UpTicksToSeconds();
          BOOL v106 = v50 <= 5 && (int)[*(id *)(a1 + 32) audioScore] < 501;
          [*(id *)(*(void *)(a1 + 40) + 1224) setHijackVersion:@"V1" v89, v95];
          mach_absolute_time();
          id v51 = [*(id *)(*(void *)(a1 + 40) + 600) objectForKeyedSubscript:v9];
          [v51 lastConnectionTicks];
          unint64_t v105 = UpTicksToMilliseconds();

          mach_absolute_time();
          uint64_t v52 = [*(id *)(*(void *)(a1 + 40) + 600) objectForKeyedSubscript:v9];
          [v52 lastWxAdvTicks];
          uint64_t v53 = UpTicksToMilliseconds();

          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            uint64_t v54 = "no";
            if (v106) {
              uint64_t v54 = "yes";
            }
            unint64_t v90 = v109;
            unint64_t v96 = v50;
            unint64_t v102 = v105;
            uint64_t v103 = v53;
            v100 = v54;
            LogPrintF();
          }
          unint64_t v104 = v53;
          uint64_t v55 = [*(id *)(*(void *)(a1 + 40) + 200) objectForKeyedSubscript:v7, v90, v96, v100, v102, v103];
          if ([v55 audioStreamState])
          {
            int v56 = [*(id *)(*(void *)(a1 + 40) + 200) objectForKeyedSubscript:v7];
            if ((int)[v56 audioStreamState] <= 1 && v109 > 5)
            {
              int v57 = [v8 otherTipiDeviceBTName];
              unsigned int v110 = [v57 isEqualToString:@"Mac"] | v106;

              if ((v110 & 1) == 0)
              {
                uint64_t v58 = [v8 otherTipiDeviceVersion];
                [v58 doubleValue];
                uint64_t v59 = v108;
                BOOL v61 = v60 < 1.2
                   || [@"3E725" compare:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) options:64] == (id)1;

                if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
                {
                  v68 = "no";
                  if (v61) {
                    v68 = "yes";
                  }
                  unint64_t v91 = (unint64_t)v68;
                  LogPrintF();
                }
                [v8 _setRoutingAction:1, v91];
                [*(id *)(a1 + 48) setAction:1];
                [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
                [*(id *)(a1 + 48) setReason:@"Tipi device should be routed"];
                [*(id *)(a1 + 48) setClientID:[*(id *)(a1 + 32) clientID]];
                [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
                ++*(_DWORD *)(*(void *)(a1 + 40) + 116);
                if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)) {
                  BOOL v69 = v61;
                }
                else {
                  BOOL v69 = 0;
                }
                if (v69)
                {
                  v112[0] = @"audioRoutingScore";
                  v70 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) audioScore]);
                  v113[0] = v70;
                  v113[1] = &__kCFBooleanTrue;
                  v112[1] = @"audioRoutingSetOwnershipToFalse";
                  v112[2] = @"reason";
                  v113[2] = @"LegacyHijack";
                  BOOL v71 = +[NSDictionary dictionaryWithObjects:v113 forKeys:v112 count:3];

                  [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:v71 andWxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) andOtherAddress:0];
                }
                mach_absolute_time();
                uint64_t v72 = UpTicksToSeconds();
                id v73 = *(void **)(*(void *)(a1 + 40) + 1344);
                if (v73)
                {
                  [v73 invalidate];
                  uint64_t v74 = *(void *)(a1 + 40);
                  uint64_t v75 = *(void **)(v74 + 1344);
                  *(void *)(v74 + 1344) = 0;
                }
                if (([v8 routed] & 1) != 0
                  || (uint64_t v76 = *(void *)(a1 + 40), *(void *)(v76 + 1072))
                  && *(double *)(v76 + 1056) > (double)(unint64_t)v72)
                {
                  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
                  {
                    unsigned int v77 = [v8 inEar];
                    uint64_t v78 = "no";
                    if (v77) {
                      uint64_t v78 = "yes";
                    }
                    uint64_t v92 = v72;
                    v97 = v78;
                    LogPrintF();
                  }
                }
                else
                {
                  v79 = [v8 deviceName];
                  uint64_t v80 = [v8 deviceAddress];
                  uint64_t v81 = (void *)v80;
                  if (v80) {
                    CFStringRef v82 = (const __CFString *)v80;
                  }
                  else {
                    CFStringRef v82 = @"?";
                  }
                  id v83 = [v8 productID];
                  CFStringRef v84 = v82;
                  uint64_t v59 = v108;
                  [(id)v76 _smartRoutingShowBanner:1 withDevice:v79 andDeviceAddress:v84 andProductID:v83 andCentralContentItemTxt:@"Connected" andTimeout:0 andDeviceType:4.0];
                }
                signed int v85 = [v8 otherTipiDeviceBTAddress:v92, v97];

                if (v85)
                {
                  [*(id *)(a1 + 40) submitHijackMetric:v7 withV1:1];
                  [*(id *)(a1 + 40) _startRouteCheckTimer:v7 andType:5];
                  [*(id *)(a1 + 40) _startRouteCheckTimer:v7 andType:6];
                  [*(id *)(a1 + 40) submitRouteActivityMetric:v7 activity:@"Hijack_V1AirpodIdle"];
                }
                goto LABEL_148;
              }
LABEL_98:
              [*(id *)(a1 + 40) _setHighPriorityTag:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) withHighPriority:1];
              v62 = [v8 otherTipiDeviceBTAddress];

              uint64_t v63 = *(void *)(a1 + 40);
              uint64_t v59 = v108;
              if (v62)
              {
                ++*(_DWORD *)(v63 + 116);
                [*(id *)(*(void *)(a1 + 40) + 1224) setHijackRelaySent:1];
                v114[0] = @"audioRoutingScore";
                unsigned int v64 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) audioScore]);
                v115[0] = v64;
                v115[1] = v10;
                v114[1] = @"audioRoutingRequestID";
                v114[2] = @"audioRoutingHijackRequest";
                v115[2] = &__kCFBooleanTrue;
                v65 = +[NSDictionary dictionaryWithObjects:v115 forKeys:v114 count:3];

                [v8 setAudioRoutingResponse:*(void *)(a1 + 56)];
                [v8 setAudioRoutingClientID:[*(id *)(a1 + 32) clientID]];
                [v8 setConduitMessageTicks:mach_absolute_time()];
                [*(id *)(a1 + 40) _relayConduitMessageStartTimer:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) withOptions:v65];
                [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:v65 andWxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) andOtherAddress:0];

LABEL_148:
                *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
                *a4 = 1;

                goto LABEL_13;
              }
              v66 = [*(id *)(v63 + 600) objectForKeyedSubscript:v9];
              if ([v66 sourceCount] < 2)
              {
              }
              else
              {
                id v67 = [@"5A187" compare:v108 options:64];

                if (v67 == (id)-1)
                {
                  if (dword_1002610B8 > 30 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
                    goto LABEL_147;
                  }
                  goto LABEL_120;
                }
              }
              if (v104 < v105 || [@"5A187" compare:v108 options:64] != (id)-1)
              {
                [*(id *)(a1 + 48) setAction:1];
                [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
                [*(id *)(a1 + 48) setReason:@"Tipi device should be routed"];
                [*(id *)(a1 + 48) setClientID:[*(id *)(a1 + 32) clientID]];
                [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
                goto LABEL_148;
              }
              if (dword_1002610B8 > 90 || dword_1002610B8 == -1 && !_LogCategory_Initialize())
              {
LABEL_147:
                [v8 setAudioRoutingResponse:*(void *)(a1 + 56), v91, v97];
                [*(id *)(a1 + 40) _tipiHealingHijackTimerStart:withScore:v7 audioScore:[*(id *)(a1 + 32) audioScore]];
                [v8 setAudioRoutingRequest:*(void *)(a1 + 32)];
                goto LABEL_148;
              }
              unint64_t v91 = v105;
              v97 = (const char *)v104;
LABEL_120:
              LogPrintF();
              goto LABEL_147;
            }
          }
          goto LABEL_98;
        }
        int v48 = v19[46];
        if (v48 <= 30 && (v48 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        [*(id *)(a1 + 40) _tipiHealingHijackTimerStart:withScore:v7 audioScore:[*(id *)(a1 + 32) audioScore]];
        [v8 setAudioRoutingRequest:*(void *)(a1 + 32)];
        [v8 setAudioRoutingResponse:*(void *)(a1 + 56)];
        [v8 setAudioRoutingClientID:[*(id *)(a1 + 32) clientID]];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
        goto LABEL_77;
      }
      [*(id *)(a1 + 48) setAction:3];
      [*(id *)(a1 + 48) setDeviceAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
      uint64_t v12 = *(void **)(a1 + 48);
      CFStringRef v13 = @"Fake hijack should not route";
    }
    [v12 setReason:v13];
LABEL_11:
    [*(id *)(a1 + 48) setClientID:[*(id *)(a1 + 32) clientID]];
    [*(id *)(a1 + 40) _respondRoutingRequest:*(void *)(a1 + 48) withResponseHandler:*(void *)(a1 + 56) wxAddress:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
LABEL_12:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    *a4 = 1;
    goto LABEL_13;
  }
LABEL_14:
}

void sub_10002C418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_10002C480(void *a1, uint64_t a2, void *a3)
{
  id v6 = [a3 model];
  if ([v6 hasPrefix:@"iPhone"])
  {
    uint64_t v4 = a1[4];
LABEL_18:
    ++*(_DWORD *)(*(void *)(v4 + 8) + 24);
    goto LABEL_19;
  }
  if ([v6 hasPrefix:@"iPad"])
  {
    uint64_t v4 = a1[5];
    goto LABEL_18;
  }
  if ([v6 hasPrefix:@"iPod"])
  {
    uint64_t v4 = a1[6];
    goto LABEL_18;
  }
  if ([v6 containsString:@"Mac"])
  {
    uint64_t v4 = a1[7];
    goto LABEL_18;
  }
  if ([v6 hasPrefix:@"Watch"])
  {
    uint64_t v4 = a1[8];
    goto LABEL_18;
  }
  if ([v6 hasPrefix:@"AppleTV"])
  {
    uint64_t v4 = a1[9];
    goto LABEL_18;
  }
  id v5 = v6;
  if (([v5 hasPrefix:@"AudioAccessory1,"] & 1) != 0
    || ([v5 hasPrefix:@"AudioAccessory5,"] & 1) != 0
    || ([v5 hasPrefix:@"AudioAccessory6,"] & 1) != 0
    || ([v5 hasPrefix:@"HomePod"] & 1) != 0)
  {

    uint64_t v4 = a1[10];
    goto LABEL_18;
  }

LABEL_19:
}

id sub_10002D04C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _smartRoutingRouteCompleted:a2 withUUID:*(void *)(a1 + 40)];
}

void sub_10002D240(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v10 = a3;
  if ([*(id *)(a1 + 32) containsString:a2] && objc_msgSend(v10, "inEar"))
  {
    id v7 = *(void **)(a1 + 40);
    id v8 = [v10 deviceName];
    int v9 = [v10 deviceAddress];
    [v7 _smartRoutingShowBanner:1 withDevice:v8 andDeviceAddress:v9 andProductID:[v10 productID] andCentralContentItemTxt:@"Connected" andTimeout:0 andDeviceType:4.0];

    *a4 = 1;
  }
}

uint64_t sub_10002D31C(uint64_t a1, uint64_t a2, void *a3)
{
  id v15 = a3;
  id v4 = [v15 inEar];
  id v5 = v15;
  if (v4)
  {
    [v15 _setRoutedState:0];
    id v6 = [*(id *)(*(void *)(a1 + 32) + 1344) trailingAccessoryText];
    unsigned __int8 v7 = [v6 containsString:@"Reverse"];

    id v5 = v15;
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v8 + 945))
      {
        if (*(int *)(v8 + 1020) <= 3)
        {
          id v4 = [*(id *)(v8 + 160) activeCallCount];
          id v5 = v15;
          if ((int)v4 < 1) {
            goto LABEL_8;
          }
          uint64_t v8 = *(void *)(a1 + 32);
        }
        int v9 = [v5 deviceName];
        id v10 = [v15 deviceAddress];
        id v11 = [v15 productID];
        uint64_t v12 = [v15 otherTipiDeviceBTName];
        CFStringRef v13 = +[NSString stringWithFormat:@"%@", v12];
        [(id)v8 _smartRoutingShowBanner:5 withDevice:v9 andDeviceAddress:v10 andProductID:v11 andCentralContentItemTxt:v13 andTimeout:0 andDeviceType:20.0];

        id v5 = v15;
      }
    }
  }
LABEL_8:

  return _objc_release_x1(v4, v5);
}

id sub_10002D584(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 584) scanRate] != (id)20) {
    [*(id *)(*(void *)(a1 + 32) + 584) setScanRate:20];
  }
  id result = [*(id *)(*(void *)(a1 + 32) + 1392) scanRate];
  if (result != (id)20)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 1392);
    return [v3 setScanRate:20];
  }
  return result;
}

void sub_10002DC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10002DCA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _lowBatterySave:1];
}

void sub_10002DCAC(uint64_t a1, void *a2, void *a3)
{
  id v18 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init((Class)NSMutableDictionary);
  [v18 lastBatteryLevel];
  unsigned __int8 v7 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v6 setObject:v7 forKeyedSubscript:@"batteryLevel"];

  uint64_t v8 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v18 lastBatteryType]);
  [v6 setObject:v8 forKeyedSubscript:@"batteryType"];

  int v9 = [v18 deviceAddress];
  if (v9) {
    [v6 setObject:v9 forKeyedSubscript:@"deviceAddress"];
  }

  [v6 setObject:v5 forKeyedSubscript:@"id"];
  [v18 lastSeenTime];
  id v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v6 setObject:v10 forKeyedSubscript:@"lastSeen"];

  id v11 = [v18 name];
  if (v11) {
    [v6 setObject:v11 forKeyedSubscript:@"name"];
  }

  uint64_t v12 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v18 productID]);
  [v6 setObject:v12 forKeyedSubscript:@"productID"];

  [v18 reportTime];
  CFStringRef v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  [v6 setObject:v13 forKeyedSubscript:@"reportTime"];

  uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v14)
  {
    id v15 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  [v14 addObject:v6];
}

void sub_10002E44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_10002E4C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = [v6 bleDevice];
  uint64_t v8 = [v7 advertisementFields];
  if (CFDictionaryGetInt64())
  {
    int v9 = [*(id *)(*(void *)(a1 + 32) + 504) objectForKeyedSubscript:v5];
    [v9 lastBatteryLevel];
    double v11 = v10;
    int Int64Ranged = CFDictionaryGetInt64Ranged();
    id v61 = v5;
    uint64_t v58 = v8;
    uint64_t v59 = v7;
    if (Int64Ranged == 8216 || Int64Ranged == 8213)
    {
      double v13 = 0.1;
      double v14 = 0.2;
      double v15 = 0.4;
    }
    else
    {
      double v13 = 0.05;
      double v15 = 0.2;
      double v14 = 0.1;
    }
    uint64_t v65 = a1;
    if (v11 <= v15) {
      double v16 = v14;
    }
    else {
      double v16 = v15;
    }
    if (v11 > v14) {
      double v17 = v16;
    }
    else {
      double v17 = v13;
    }
    if (v11 > v13) {
      double v18 = v17;
    }
    else {
      double v18 = -1.0;
    }
    if (v11 <= 0.0) {
      double v18 = v15;
    }
    if (v18 > 0.1 && Int64Ranged == 8208) {
      double v20 = 0.1;
    }
    else {
      double v20 = v18;
    }
    int v57 = v9;
    id v64 = [v9 lastBatteryType:0.1];
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    double v60 = v6;
    id obj = [v6 batteryInfo];
    id v21 = [obj countByEnumeratingWithState:&v66 objects:v70 count:16];
    if (v21)
    {
      id v22 = v21;
      char v23 = 0;
      char v24 = 0;
      char v25 = 0;
      id v26 = 0;
      uint64_t v63 = *(void *)v67;
      double v27 = 1.0;
      LOBYTE(v2_Block_object_dispose(&STACK[0x290], 8) = 1;
      do
      {
        for (i = 0; i != v22; i = (char *)i + 1)
        {
          if (*(void *)v67 != v63) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = *(void **)(*((void *)&v66 + 1) + 8 * i);
          id v31 = [v30 batteryType];
          id v32 = v31;
          BOOL v33 = v31 == v64;
          if (v31 == (id)4 || v31 == (id)1) {
            v23 |= [v30 batteryState] == (id)2;
          }
          double v35 = *(double *)(*(void *)(v65 + 32) + 760);
          if (v35 == 0.0) {
            [v30 batteryLevel];
          }
          v25 |= v33;
          int v28 = (v35 >= 0.5) & v28;
          if (v35 < v27) {
            double v36 = v35;
          }
          else {
            double v36 = v27;
          }
          if (v35 < v27) {
            id v37 = v32;
          }
          else {
            id v37 = v26;
          }
          if (v35 <= v20)
          {
            char v24 = 1;
            double v27 = v36;
            id v26 = v37;
          }
        }
        id v22 = [obj countByEnumeratingWithState:&v66 objects:v70 count:16];
      }
      while (v22);
    }
    else
    {
      char v23 = 0;
      char v24 = 0;
      char v25 = 0;
      id v26 = 0;
      double v27 = 1.0;
      int v28 = 1;
    }

    unsigned __int8 v7 = v59;
    char v38 = v23;
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      CFStringRef v39 = "no";
      if (v23) {
        id v40 = "yes";
      }
      else {
        id v40 = "no";
      }
      if (v28) {
        uint64_t v41 = "yes";
      }
      else {
        uint64_t v41 = "no";
      }
      if (v24) {
        CFStringRef v39 = "yes";
      }
      int v56 = v59;
      double v54 = v27 * 100.0;
      double v55 = v20 * 100.0;
      uint64_t v52 = v41;
      uint64_t v53 = v39;
      id v51 = v40;
      LogPrintF();
    }
    id v5 = v61;
    uint64_t v8 = v58;
    if (v38)
    {
      id v6 = v60;
      [*(id *)(v65 + 32) _lowBatteryClearSFDevice:v60 reason:"charging"];
      ++*(_DWORD *)(*(void *)(*(void *)(v65 + 48) + 8) + 24);
    }
    else
    {
      if (v28)
      {
        if (v25)
        {
          uint64_t v43 = v65;
          id v6 = v60;
          [*(id *)(v65 + 32) _lowBatteryClearSFDevice:v60 reason:"high"];
          BOOL v42 = v57;
        }
        else
        {
          id v6 = v60;
          uint64_t v43 = v65;
          BOOL v42 = v57;
          if (v57 && dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            int v48 = [v57 deviceAddress:v51, v52, v53, *(void *)&v54, *(void *)&v55, v56];
            int v49 = [v57 name];
            unint64_t v50 = [v60 bleDevice];
            LogPrintF();
          }
        }
        ++*(_DWORD *)(*(void *)(*(void *)(v43 + 56) + 8) + 24);
        goto LABEL_80;
      }
      if (v24)
      {
        id v6 = v60;
        [*(id *)(v65 + 32) _lowBatteryTrackSFDevice:v60 batteryLevel:v26 batteryType:v27];
        ++*(_DWORD *)(*(void *)(*(void *)(v65 + 64) + 8) + 24);
        BOOL v42 = v57;
        if (v57
          || ([*(id *)(*(void *)(v65 + 32) + 504) objectForKeyedSubscript:v61],
              (BOOL v42 = objc_claimAutoreleasedReturnValue()) != 0))
        {
          unsigned __int8 v44 = *(void **)(*(void *)(*(void *)(v65 + 72) + 8) + 40);
          if (!v44)
          {
            id v45 = objc_alloc_init((Class)NSMutableArray);
            uint64_t v46 = *(void *)(*(void *)(v65 + 72) + 8);
            id v47 = *(void **)(v46 + 40);
            *(void *)(v46 + 40) = v45;

            unsigned __int8 v44 = *(void **)(*(void *)(*(void *)(v65 + 72) + 8) + 40);
          }
          [v44 addObject:v42, v51, v52, v53, v54, v55, v56];
        }
        goto LABEL_80;
      }
      id v6 = v60;
    }
    BOOL v42 = v57;
LABEL_80:

    goto LABEL_81;
  }
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
LABEL_81:
}

void sub_10002F498(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 1336))
  {
    id v11 = v5;
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      if (a2 > 6) {
        id v6 = "?";
      }
      else {
        id v6 = off_100233F10[a2];
      }
      int v9 = v6;
      id v10 = v11;
      LogPrintF();
    }
    [*(id *)(a1 + 32) invalidate:v9, v10];
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 1336);
    *(void *)(v7 + 1336) = 0;

    id v5 = v11;
  }
}

void sub_10002F65C(id a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

uint64_t sub_10002F6D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(a1 + 32) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 8);
      *(void *)(v5 + _Block_object_dispose(&STACK[0x290], 8) = 0;

      goto LABEL_11;
    }
    if (dword_1002610B8 <= 30)
    {
      id v9 = 0;
      if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

id sub_10002F950(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 60);
  if (result != -1)
  {
    uint64_t state64 = 0;
    notify_get_state((int)result, &state64);
    unsigned __int8 v3 = state64;
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      unsigned int v4 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 32);
      if (v4 > 0xE) {
        uint64_t v5 = "?";
      }
      else {
        uint64_t v5 = off_100234178[(char)v4];
      }
      if (v3 > 0xEu) {
        id v6 = "?";
      }
      else {
        id v6 = off_100234178[(char)v3];
      }
      uint64_t v10 = v3;
      id v11 = v6;
      uint64_t v8 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 32);
      id v9 = v5;
      LogPrintF();
    }
    uint64_t v7 = *(unsigned __int8 **)(a1 + 32);
    if (v3 >= 0xBuLL && v7[32] <= 0xAu)
    {
      [v7 _nearbyInfoActivityCriticalStart];
      uint64_t v7 = *(unsigned __int8 **)(a1 + 32);
    }
    v7[32] = v3;
    return [*(id *)(a1 + 32) _nearbyInfoActivityChanged:v8, v9, v10, v11];
  }
  return result;
}

id sub_10002FC18(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (result != *(id *)(v3 + 160)) {
    return result;
  }
  if (dword_1002610B8 <= 30)
  {
    if (dword_1002610B8 != -1)
    {
LABEL_4:
      id v4 = [result callCountIncomingUnconnected];
      id v5 = [*(id *)(*(void *)(a1 + 40) + 160) callCountIncomingConnected];
      id v6 = [*(id *)(*(void *)(a1 + 40) + 160) callCountOutgoingUnconnected];
      id v12 = [*(id *)(*(void *)(a1 + 40) + 160) callCountOutgoingConnected];
      id v13 = [*(id *)(*(void *)(a1 + 40) + 160) activeCallCount];
      id v10 = v5;
      id v11 = v6;
      id v9 = v4;
      LogPrintF();
      uint64_t v3 = *(void *)(a1 + 40);
      goto LABEL_6;
    }
    int v7 = _LogCategory_Initialize();
    uint64_t v3 = *(void *)(a1 + 40);
    if (v7)
    {
      id result = *(id *)(v3 + 160);
      goto LABEL_4;
    }
  }
LABEL_6:
  if ((int)objc_msgSend(*(id *)(v3 + 1184), "callIncomingUnconnected", v9, v10, v11, v12, v13) >= 1
    && ![*(id *)(*(void *)(a1 + 40) + 160) callCountIncomingUnconnected])
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *(void *)(*(void *)(a1 + 40) + 92_Block_object_dispose(&STACK[0x290], 8) = mach_absolute_time();
  }
  [*(id *)(*(void *)(a1 + 40) + 1184) setCallIncomingUnconnected:[*(id *)(*(void *)(a1 + 40) + 160) callCountIncomingUnconnected]];
  uint64_t v8 = *(void **)(a1 + 40);

  return [v8 _update];
}

id sub_100030030(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _connectedDeviceFound:a2];
}

id sub_10003003C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 1184) bluetoothState];
  if (v2 != [*(id *)(*(void *)(a1 + 32) + 208) bluetoothState]
    && dword_1002610B8 <= 30
    && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    unint64_t v3 = (unint64_t)[*(id *)(*(void *)(a1 + 32) + 1184) bluetoothState];
    if (v3 > 0xA) {
      id v4 = "?";
    }
    else {
      id v4 = off_100233FC0[v3];
    }
    unint64_t v5 = (unint64_t)[*(id *)(*(void *)(a1 + 32) + 208) bluetoothState];
    if (v5 > 0xA) {
      id v6 = "?";
    }
    else {
      id v6 = off_100233FC0[v5];
    }
    id v9 = v4;
    id v10 = v6;
    LogPrintF();
  }
  [*(id *)(*(void *)(a1 + 32) + 1184) setBluetoothState:objc_msgSend(*(id *)(*(void *)(a1 + 32) + 208), "bluetoothState", v9, v10)];
  int v7 = *(void **)(*(void *)(a1 + 32) + 352);

  return [v7 trigger];
}

id sub_100030168(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _connectedDeviceLost:a2];
}

uint64_t sub_100030174(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(*(void *)(a1 + 32) + 208);
  if (v4 == *(id *)(a1 + 40))
  {
    id v9 = v3;
    if (v3)
    {
      if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(a1 + 40) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 208);
      *(void *)(v5 + 20_Block_object_dispose(&STACK[0x290], 8) = 0;
    }
    else
    {
      [*(id *)(*(void *)(a1 + 32) + 1184) setBluetoothState:[v4 bluetoothState]];
      id v4 = [*(id *)(a1 + 32) _update];
    }
    id v3 = v9;
  }

  return _objc_release_x1(v4, v3);
}

void sub_1000319F0(id a1, NSString *a2, BTSmartRoutingWxDevice *a3, BOOL *a4)
{
  int v7 = a2;
  uint64_t v5 = a3;
  if ([(BTSmartRoutingWxDevice *)v5 routingAction] == 2)
  {
    uint64_t v6 = [(BTSmartRoutingWxDevice *)v5 routed] ? 1 : 3;
    [(BTSmartRoutingWxDevice *)v5 _setRoutingAction:v6];
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      [(BTSmartRoutingWxDevice *)v5 routingAction];
      LogPrintF();
    }
  }
}

void sub_100031F8C(uint64_t a1)
{
  id v2 = (void *)MRAVRoutingDiscoverySessionCreate();
  MRAVRoutingDiscoverySessionSetDiscoveryMode();
  id v3 = v2;
  id v4 = v3;
  if (v3) {
    [v3 setOnlyDiscoversBluetoothDevices:1];
  }
  v8[7] = _NSConcreteStackBlock;
  v8[8] = 3221225472;
  v8[9] = sub_10003209C;
  v8[10] = &unk_100233778;
  v8[11] = *(void *)(a1 + 32);
  uint64_t v5 = MRAVRoutingDiscoverySessionAddOutputDevicesChangedCallback();
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(NSObject **)(v6 + 312);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100032164;
  v8[3] = &unk_1002337A0;
  v8[4] = v6;
  void v8[5] = v4;
  v8[6] = v5;
  dispatch_async(v7, v8);
}

void sub_10003209C(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = CFRetain(cf);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 312);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_100032128;
  v6[3] = &unk_100233750;
  void v6[4] = v4;
  v6[5] = v3;
  dispatch_async(v5, v6);
}

void sub_100032128(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFTypeRef v3 = *(const void **)(v2 + 536);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(v2 + 536) = *(void *)(a1 + 40);
}

void *sub_100032164(void *result)
{
  *(void *)(result[4] + 28_Block_object_dispose(&STACK[0x290], 8) = result[5];
  *(void *)(result[4] + 304) = result[6];
  *(unsigned char *)(result[4] + 296) = 0;
  return result;
}

void sub_10003227C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (!*(void *)(a1 + 40)
      || (MRAVRoutingDiscoverySessionRemoveOutputDevicesChangedCallback(), *(void *)(a1 + 32)))
    {
      MRAVRoutingDiscoverySessionSetDiscoveryMode();
      uint64_t v2 = *(const void **)(a1 + 32);
      CFRelease(v2);
    }
  }
}

id sub_1000325F8(uint64_t a1)
{
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  uint64_t v3 = kMRAVOutputContextDevicesDidChangeNotification;
  [v2 addObserver:*(void *)(a1 + 32) selector:"_mediaRouteMonitorActiveAudioRouteChanged:" name:kMRAVOutputContextDevicesDidChangeNotification object:MRAVOutputContextGetSharedSystemAudioContext()];

  uint64_t v4 = +[NSNotificationCenter defaultCenter];
  [v4 addObserver:*(void *)(a1 + 32) selector:"_mediaRouteMonitorActiveAudioRouteChanged:" name:v3 object:MRAVOutputContextGetSharedAudioPresentationContext()];

  MRMediaRemoteSetWantsRouteChangeNotifications();
  uint64_t v5 = *(void **)(a1 + 32);

  return _[v5 _mediaRouteMonitorActiveAudioRouteChanged:0];
}

void sub_100032868(uint64_t a1)
{
  SharedSystemAudioContext = (__CFString *)MRAVOutputContextGetSharedSystemAudioContext();
  uint64_t SharedAudioPresentationContext = MRAVOutputContextGetSharedAudioPresentationContext();
  uint64_t v4 = (__CFString *)SharedAudioPresentationContext;
  if (SharedSystemAudioContext)
  {
    uint64_t v5 = (void *)MRAVOutputContextCopyOutputDevices();
    if ([v5 count])
    {
      uint64_t v6 = [v5 firstObject];
      int Type = MRAVOutputDeviceGetType();

      id v8 = [v5 firstObject];
      SharedSystemAudioContext = (__CFString *)MRAVOutputDeviceCopyName();

      id v9 = [v5 firstObject];
      int Subtype = MRAVOutputDeviceGetSubtype();

      id v11 = [v5 firstObject];
      id v12 = (void *)MRAVOutputDeviceCopyUniqueIdentifier();

      id v13 = [v12 stringByReplacingOccurrencesOfString:@"-tacl" withString:&stru_10023D730];
      double v14 = [v13 stringByReplacingOccurrencesOfString:@"-tsco" withString:&stru_10023D730];
      double v15 = [v14 uppercaseString];

      double v16 = v12;
    }
    else
    {
      SharedSystemAudioContext = 0;
      double v16 = 0;
      double v15 = 0;
      int Subtype = 0;
      int Type = 0;
    }

    if (!v4) {
      goto LABEL_16;
    }
  }
  else
  {
    double v16 = 0;
    double v15 = 0;
    int Subtype = 0;
    int Type = 0;
    if (!SharedAudioPresentationContext) {
      goto LABEL_16;
    }
  }
  double v17 = (void *)MRAVOutputContextCopyOutputDevices();
  if (![v17 count])
  {

    uint64_t v4 = 0;
    goto LABEL_16;
  }
  int v48 = SharedSystemAudioContext;
  double v18 = v16;
  CFStringRef v19 = [v17 firstObject];
  int v20 = MRAVOutputDeviceGetType();

  id v21 = [v17 firstObject];
  uint64_t v4 = (__CFString *)MRAVOutputDeviceCopyName();

  id v22 = [v17 firstObject];
  int v23 = MRAVOutputDeviceGetSubtype();

  if (Type == 2 && v20 == 2)
  {
    uint64_t v24 = *(void *)(a1 + 32);
    if (!*(unsigned char *)(v24 + 441))
    {
      *(unsigned char *)(v24 + 441) = 1;
      *(unsigned char *)(*(void *)(a1 + 32) + 442) = 0;
LABEL_13:
      *(unsigned char *)(*(void *)(a1 + 32) + 480) = 0;
      double v16 = v18;
LABEL_14:
      SharedSystemAudioContext = v48;
      goto LABEL_24;
    }
    goto LABEL_58;
  }
  if (Subtype != 1 || v23 != 1)
  {
    if (Subtype == 4 && v23 == 4)
    {
      uint64_t v24 = *(void *)(a1 + 32);
      if (!*(unsigned char *)(v24 + 442))
      {
        *(unsigned char *)(v24 + 441) = 0;
        *(unsigned char *)(*(void *)(a1 + 32) + 442) = 1;
        goto LABEL_13;
      }
LABEL_58:
      double v16 = v18;
      SharedSystemAudioContext = v48;
      goto LABEL_81;
    }
    double v16 = v18;
    SharedSystemAudioContext = v48;
LABEL_16:
    uint64_t v24 = *(void *)(a1 + 32);
    int v25 = *(unsigned __int8 *)(v24 + 441);
    if (*(unsigned char *)(v24 + 441))
    {
      *(unsigned char *)(v24 + 441) = 0;
      uint64_t v24 = *(void *)(a1 + 32);
    }
    if (*(unsigned char *)(v24 + 442))
    {
      *(unsigned char *)(v24 + 442) = 0;
      uint64_t v26 = *(void *)(a1 + 32);
      if (!*(unsigned char *)(v26 + 480)) {
        goto LABEL_24;
      }
      double v27 = (unsigned char *)(v26 + 480);
    }
    else
    {
      if (!*(unsigned char *)(v24 + 480))
      {
        if (!v25) {
          goto LABEL_81;
        }
        goto LABEL_24;
      }
      double v27 = (unsigned char *)(v24 + 480);
    }
    unsigned char *v27 = 0;
    goto LABEL_24;
  }
  uint64_t v24 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v24 + 480)) {
    goto LABEL_58;
  }
  *(unsigned char *)(v24 + 441) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 442) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 480) = 1;
  mach_absolute_time();
  double v16 = v18;
  if ((unint64_t)UpTicksToSeconds() > 1 || dword_1002610B8 > 90) {
    goto LABEL_14;
  }
  SharedSystemAudioContext = v48;
  if (dword_1002610B8 != -1 || _LogCategory_Initialize()) {
    LogPrintF();
  }
LABEL_24:
  int v28 = *(unsigned char **)(a1 + 32);
  if (!v28[441] && !v28[480] && !v28[442])
  {
LABEL_38:
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      CFStringRef v29 = &stru_10023D730;
      if (SharedSystemAudioContext) {
        CFStringRef v30 = SharedSystemAudioContext;
      }
      else {
        CFStringRef v30 = &stru_10023D730;
      }
      if (v4) {
        CFStringRef v29 = v4;
      }
      id v31 = *(unsigned char **)(a1 + 32);
      if (v31[441]) {
        id v32 = "yes";
      }
      else {
        id v32 = "no";
      }
      if (v31[480]) {
        BOOL v33 = "yes";
      }
      else {
        BOOL v33 = "no";
      }
      if (v31[442]) {
        uint64_t v34 = "yes";
      }
      else {
        uint64_t v34 = "no";
      }
      uint64_t v46 = v33;
      id v47 = v34;
      CFStringRef v44 = v29;
      id v45 = v32;
      CFStringRef v43 = v30;
      LogPrintF();
    }
    goto LABEL_62;
  }
  if (dword_1002610B8 <= 30)
  {
    if (dword_1002610B8 != -1 || _LogCategory_Initialize())
    {
      CFStringRef v43 = v15;
      LogPrintF();
    }
    goto LABEL_38;
  }
LABEL_62:
  uint64_t v24 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v24 + 441))
  {
    if (*(unsigned char *)(v24 + 880) && *(unsigned char *)(v24 + 881))
    {
      [(id)v24 _mediaRouteMonitorSpeakRoute];
      *(unsigned char *)(*(void *)(a1 + 32) + 881) = 0;
      uint64_t v24 = *(void *)(a1 + 32);
    }
    double v35 = *(void **)(v24 + 1168);
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472;
    v51[2] = sub_100032F14;
    v51[3] = &unk_1002334D0;
    double v36 = SharedSystemAudioContext;
    uint64_t v37 = *(void *)(a1 + 32);
    uint64_t v52 = v36;
    uint64_t v53 = v37;
    [v35 enumerateKeysAndObjectsUsingBlock:v51];

    uint64_t v24 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v24 + 480) || *(unsigned char *)(v24 + 442))
  {
    if (*(unsigned char *)(v24 + 945))
    {
      *(unsigned char *)(v24 + 945) = 0;
      uint64_t v24 = *(void *)(a1 + 32);
    }
    char v38 = *(void **)(v24 + 1168);
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_100033334;
    v49[3] = &unk_1002337E8;
    v49[4] = v24;
    char v50 = 1;
    [v38 enumerateKeysAndObjectsUsingBlock:v49, v43, v44, v45, v46, v47];
    CFStringRef v39 = [*(id *)(*(void *)(a1 + 32) + 1184) audioDestination];
    if ([*(id *)(*(void *)(a1 + 32) + 1184) audioRoute] == 3)
    {
      if (v39)
      {
        id v40 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v39];

        if (v40)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          uint64_t v41 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v15];
          [v41 setIgnoreManualConnect:1];
        }
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 352) trigger];

    uint64_t v24 = *(void *)(a1 + 32);
  }
LABEL_81:
  if (*(unsigned char *)(v24 + 441))
  {
    uint64_t v42 = 3;
  }
  else if (*(unsigned char *)(v24 + 480))
  {
    uint64_t v42 = 1;
  }
  else
  {
    uint64_t v42 = 2 * *(unsigned __int8 *)(v24 + 442);
  }
  [v24 _updateAudioRoute:v42 withUUID:v15, v43];
}

void sub_100032F14(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = a2;
  id v5 = a3;
  uint64_t v6 = [v5 deviceName];
  int v7 = *(void **)(a1 + 32);
  if (v7) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || ![v7 containsString:v6])
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v21 = v24;
      LogPrintF();
    }
    [v5 _setRoutedState:0, v21];
    if ([v5 routingAction] != 2)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        unsigned int v10 = [v5 routingAction];
        if (v10 > 5) {
          id v11 = "?";
        }
        else {
          id v11 = off_100234488[v10];
        }
        id v22 = v11;
        LogPrintF();
      }
      [v5 _setRoutingAction:3 v22];
    }
    [v5 setIgnoreManualConnect:1];
  }
  else if (([v5 routed] & 1) == 0)
  {
    [v5 _setRoutedState:1];
    id v9 = [v5 otherTipiDeviceBTAddress];

    if (v9)
    {
      if ([v5 routingAction] != 2)
      {
        if ([v5 routingAction] == 1)
        {
          if ([v5 routingAction] == 1
            && [*(id *)(a1 + 40) _isManualConnection:v24])
          {
            if (dword_1002610B8 > 30)
            {
LABEL_59:
              [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:&off_100244430 andWxAddress:v24 andOtherAddress:v21];
              goto LABEL_30;
            }
            if (dword_1002610B8 != -1 || _LogCategory_Initialize()) {
              LogPrintF();
            }
            unsigned int v12 = 1;
          }
          else
          {
            unsigned int v12 = 0;
          }
        }
        else
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            id v21 = v24;
            LogPrintF();
          }
          [v5 _setRoutingAction:1, v21];
          uint64_t v13 = *(void *)(a1 + 40);
          if (*(unsigned char *)(v13 + 945))
          {
            unsigned int v12 = 0;
            *(unsigned char *)(v13 + 945) = 0;
          }
          else
          {
            double v14 = [v5 deviceVersion];
            double v15 = [v5 otherTipiDeviceVersion];
            [v15 doubleValue];
            if (v16 < 1.2 || [@"3E725" compare:v14 options:64] == (id)1)
            {
              unsigned int v12 = 1;
            }
            else
            {
              double v17 = [v5 otherTipiDeviceBTName];
              unsigned int v12 = [v17 isEqualToString:@"Mac"];
            }
          }
        }
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          if (v12) {
            double v18 = "yes";
          }
          else {
            double v18 = "no";
          }
          CFStringRef v19 = [v5 otherTipiDeviceBTName];
          if ([v19 isEqualToString:@"Mac"]) {
            int v20 = "yes";
          }
          else {
            int v20 = "no";
          }
          id v21 = v18;
          int v23 = v20;
          LogPrintF();

          if ((v12 & 1) == 0) {
            goto LABEL_30;
          }
        }
        else if (!v12)
        {
          goto LABEL_30;
        }
        goto LABEL_59;
      }
    }
  }
LABEL_30:
}

void sub_100033334(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 336);
  if (v6)
  {
    int v7 = [v6 bleDevice];
    BOOL v8 = [v7 bluetoothAddress];

    if ([v8 length] == (id)6)
    {
      id v9 = v8;
      id v15 = [v9 bytes];
      unsigned int v10 = NSPrintF();
      id v11 = v10;
      if (v10 && (objc_msgSend(v10, "isEqualToString:", v17, v15) & 1) != 0)
      {

        goto LABEL_24;
      }
    }
    else
    {
      id v11 = 0;
    }
  }
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    id v15 = v17;
    LogPrintF();
  }
  [v5 _setRoutedState:0, v15];
  BOOL v12 = 0;
  if ([v5 routingAction] == 1)
  {
    uint64_t v13 = [v5 otherTipiDeviceBTAddress];
    BOOL v12 = v13 == 0;
  }
  if ([v5 routingAction] != 2 && !v12)
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      [v5 _setRoutingAction:3, v17];
    }
    else
    {
      [v5 _setRoutingAction:3 v16];
    }
  }
  double v14 = *(void **)(a1 + 32);
  if (v14[134] && *(unsigned char *)(a1 + 40)) {
    [v14 _setConnectedBannerTick:0];
  }
LABEL_24:
}

void sub_1000336F0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v4;
    LogPrintF();
  }
  [*(id *)(a1 + 32) invalidate:v3];
}

void sub_100033808(uint64_t a1)
{
  uint64_t v2 = +[AVSystemController sharedAVSystemController];
  id v3 = [v2 attributeForKey:AVSystemController_PlayingSessionsDescriptionAttribute];

  BOOL v4 = [v3 count] != 0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(NSObject **)(v5 + 312);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_1000338D8;
  v7[3] = &unk_100233810;
  void v7[4] = v5;
  BOOL v8 = v4;
  dispatch_async(v6, v7);
}

id sub_1000338D8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = *(unsigned char *)(a1 + 40);
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 56)) {
      uint64_t v2 = "playing";
    }
    else {
      uint64_t v2 = "not playing";
    }
    uint64_t v6 = v2;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _nearbyInfoActivityChanged:v6];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(void **)(v3 + 1168);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_1000339E0;
  v7[3] = &unk_100233650;
  void v7[4] = v3;
  return [v4 enumerateKeysAndObjectsUsingBlock:v7];
}

void sub_1000339E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (([a3 otherTipiDeviceIsWatch] & 1) != 0 || GestaltGetDeviceClass() == 6) {
    [*(id *)(a1 + 32) _sendAudioCategory:v5 withAudioCategory:*(void *)(*(void *)(a1 + 32) + 496)];
  }
}

void sub_100034CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100034D00(uint64_t a1)
{
  uint64_t v2 = +[AVSystemController sharedAVSystemController];
  uint64_t v3 = *(unsigned int *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  id v14 = *(id *)(v5 + 40);
  unsigned __int8 v6 = [v2 shouldClientWithAudioScore:v3 hijackRoute:v4 hijackDeniedReason:&v14];
  objc_storeStrong((id *)(v5 + 40), v14);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v6;

  uint64_t v7 = *(void *)(a1 + 40);
  BOOL v8 = *(NSObject **)(v7 + 312);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100034E18;
  block[3] = &unk_100233838;
  void block[4] = v7;
  int v13 = *(_DWORD *)(a1 + 72);
  id v10 = *(id *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  long long v12 = *(_OWORD *)(a1 + 56);
  dispatch_async(v8, block);
}

id sub_100034E18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _mediaRouteHijackResponse:*(unsigned int *)(a1 + 72) wxAddress:*(void *)(a1 + 40) andAudioResponseID:*(void *)(a1 + 48) andAllowedToHijack:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) withReason:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
}

void sub_100034EB4(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if ([v5 routingAction] == 3)
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      [v5 _setRoutingAction:1, v13];
    }
    else
    {
      [v5 _setRoutingAction:1, v12];
    }
  }
  unsigned __int8 v6 = [v5 otherTipiDeviceBTAddress];

  if (v6)
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v12 = v13;
      LogPrintF();
    }
    id v11 = *(void **)(a1 + 32);
    id v10 = [v5 otherTipiDeviceBTAddress:v12];
    [v11 _relayConduitMessageSend:1 withOptions:&off_100244458 andWxAddress:v13 andOtherAddress:v10];
  }
  else
  {
    int v7 = [*(id *)(*(void *)(a1 + 32) + 160) activeCallCount];
    BOOL v8 = *(void **)(a1 + 32);
    if (v7 < 1) {
      CFStringRef v9 = @"-tacl";
    }
    else {
      CFStringRef v9 = @"-tsco";
    }
    id v10 = +[NSString stringWithFormat:@"%@%@", v13, v9];
    [v8 _smartRoutingChangeRoute:v10];
  }
}

void *sub_100035398(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[73] == *(void *)(a1 + 40)) {
    return _[result _nearbyInfoDeviceFound:a2];
  }
  return result;
}

void *sub_1000353BC(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[73] == *(void *)(a1 + 40)) {
    return [result _nearbyInfoDeviceLost:a2];
  }
  return result;
}

void *sub_1000353E0(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[73] == *(void *)(a1 + 40)) {
    return _[result _nearbyInfoDeviceFound:a2];
  }
  return result;
}

void sub_100035404(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(a1 + 32) + 584) == *(void *)(a1 + 40))
  {
    id v7 = v3;
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v7;
      LogPrintF();
    }
    [*(id *)(a1 + 40) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 584);
    *(void *)(v4 + 584) = 0;

    id v3 = v7;
  }
}

void *sub_1000354CC(void *result)
{
  uint64_t v1 = result;
  if (dword_1002610B8 <= 30)
  {
    if (dword_1002610B8 != -1 || (id result = (void *)_LogCategory_Initialize(), result)) {
      id result = (void *)LogPrintF();
    }
  }
  uint64_t v2 = (void *)v1[4];
  if (v2 == *(void **)(v1[5] + 816))
  {
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v3);
      uint64_t v4 = v1[5];
      id v5 = *(void **)(v4 + 816);
      *(void *)(v4 + 816) = 0;
    }
    id v6 = *(void **)(v1[5] + 352);
    return [v6 trigger];
  }
  return result;
}

void sub_100035A6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100035A88(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v11 = a3;
  id v6 = [v11 model];
  if ([v6 containsString:@"Mac"]) {
    goto LABEL_6;
  }
  id v7 = [v11 model];
  if ([v7 hasPrefix:@"iPhone"])
  {
LABEL_5:

LABEL_6:
LABEL_7:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
    goto LABEL_8;
  }
  BOOL v8 = [v11 model];
  if ([v8 hasPrefix:@"iPad"])
  {

    goto LABEL_5;
  }
  CFStringRef v9 = [v11 model];
  unsigned __int8 v10 = [v9 hasPrefix:@"iPod"];

  if (v10) {
    goto LABEL_7;
  }
LABEL_8:
}

uint64_t sub_1000361B4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1 + 32) invalidate];
  id v4 = v6;
  if (v6)
  {
    if (dword_1002610B8 <= 90)
    {
      if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v6, v3))
      {
        id v3 = (id)LogPrintF();
        id v4 = v6;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_100036754(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_1000367A4(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 routed];
  if (result && *(unsigned char *)(a1 + 48))
  {
    if (dword_1002610B8 <= 30)
    {
      if (dword_1002610B8 != -1 || (id result = (id)_LogCategory_Initialize(), result))
      {
        [*(id *)(*(void *)(a1 + 32) + 160) activeCallCount];
        id result = (id)LogPrintF();
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 6;
  }
  return result;
}

void *sub_100036A28(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 24))
  {
    uint64_t v2 = result;
    if (dword_1002610B8 <= 30)
    {
      if (dword_1002610B8 != -1 || (v3 = _LogCategory_Initialize(), uint64_t v1 = v2[5], v3))
      {
        LogPrintF();
        uint64_t v1 = v2[5];
      }
    }
    id v4 = *(void **)(v1 + 24);
    if (v4)
    {
      id v5 = v4;
      dispatch_source_cancel(v5);
      uint64_t v6 = v2[5];
      id v7 = *(void **)(v6 + 24);
      *(void *)(v6 + 24) = 0;
    }
    BOOL v8 = (void *)v2[5];
    return [v8 _nearbyInfoActivityChanged];
  }
  return result;
}

void sub_100036CF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 672) == *(void *)(a1 + 40))
  {
    id v5 = v3;
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v4 = v5;
      LogPrintF();
    }
    [*(id *)(a1 + 32) _anyPairedDeviceSupportsSmartRouting:v4];
    id v3 = v5;
  }
}

void sub_100036DA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 672) == *(void *)(a1 + 40))
  {
    id v5 = v3;
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v4 = v5;
      LogPrintF();
    }
    [*(id *)(a1 + 32) _anyPairedDeviceSupportsSmartRouting:v4];
    id v3 = v5;
  }
}

uint64_t sub_100036E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4[84] == *(void *)(a1 + 40))
  {
    id v9 = v3;
    if (v3)
    {
      if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(a1 + 40) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(v5 + 672);
      *(void *)(v5 + 672) = 0;
    }
    else
    {
      [v4 _anyPairedDeviceSupportsSmartRouting];
      id v4 = [*(id *)(a1 + 32) _update];
    }
    id v3 = v9;
  }

  return _objc_release_x1(v4, v3);
}

id sub_100037148(uint64_t a1)
{
  return [*(id *)(a1 + 32) _nearbyInfoActivityChanged];
}

id sub_100037458(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result == *(id *)(*(void *)(a1 + 40) + 664))
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 456) = [result primaryAppleIDIsHSA2];
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      if (*(unsigned char *)(*(void *)(a1 + 40) + 456)) {
        id v3 = "yes";
      }
      else {
        id v3 = "no";
      }
      uint64_t v16 = v3;
      LogPrintF();
    }
    [*(id *)(a1 + 40) _prefsChanged:v16];
    if (*(unsigned __int8 *)(*(void *)(a1 + 40) + 1033) != [*(id *)(a1 + 32) screenLocked])*(unsigned char *)(*(void *)(a1 + 40) + 1033) = [*(id *)(a1 + 32) screenLocked]; {
    unsigned int v4 = [*(id *)(a1 + 32) screenOn];
    }
    uint64_t v5 = *(unsigned __int8 **)(a1 + 40);
    if (v5[1032] == v4)
    {
      return [v5 _update];
    }
    else
    {
      *(unsigned char *)(*(void *)(a1 + 40) + 1032) = [*(id *)(a1 + 32) screenOn];
      uint64_t v6 = *(void *)(a1 + 40);
      if (*(unsigned char *)(v6 + 1032))
      {
        if ((int)[*(id *)(v6 + 160) callCountIncomingUnconnected] >= 1)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [*(id *)(a1 + 40) _iPhoneScreenOnPowerEvent];
        }
      }
      else
      {
        id v7 = *(void **)(v6 + 1344);
        if (v7)
        {
          [v7 invalidate];
          uint64_t v8 = *(void *)(a1 + 40);
          id v9 = *(void **)(v8 + 1344);
          *(void *)(v8 + 1344) = 0;
        }
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        unsigned __int8 v10 = *(void **)(*(void *)(a1 + 40) + 384);
        if (v10)
        {
          id v11 = v10;
          dispatch_source_cancel(v11);
          uint64_t v12 = *(void *)(a1 + 40);
          id v13 = *(void **)(v12 + 384);
          *(void *)(v12 + 384) = 0;
        }
        id v14 = *(unsigned char **)(a1 + 40);
        if (v14[32] == 10) {
          [v14 _nearbyInfoActivityChanged];
        }
      }
      uint64_t v15 = *(unsigned char **)(a1 + 40);
      if (v15[1032])
      {
        return [v15 _startAudioStateSnapshotTimer];
      }
      else
      {
        return [v15 _stopAudioStateSnapshotTimer:1];
      }
    }
  }
  return result;
}

void sub_100037728(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (*(void *)(a1 + 32) != *(void *)(v6 + 1088)) {
    goto LABEL_34;
  }
  if (a2) {
    BOOL v7 = a2 < 11;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  *(unsigned char *)(v6 + 1080) = v8;
  *(_DWORD *)(*(void *)(a1 + 40) + 1096) = a2;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    if (a2 > 29)
    {
      switch(a2)
      {
        case 30:
          id v9 = "FullWake";
          goto LABEL_26;
        case 40:
          id v9 = "Restart";
          goto LABEL_26;
        case 50:
          id v9 = "PowerOff";
          goto LABEL_26;
      }
    }
    else
    {
      switch(a2)
      {
        case 0:
          id v9 = "Unknown";
          goto LABEL_26;
        case 10:
          id v9 = "Sleep";
          goto LABEL_26;
        case 20:
          id v9 = "DarkWake";
LABEL_26:
          if (*(unsigned char *)(*(void *)(a1 + 40) + 1080)) {
            unsigned __int8 v10 = "yes";
          }
          else {
            unsigned __int8 v10 = "no";
          }
          id v14 = v9;
          uint64_t v15 = v10;
          LogPrintF();
          goto LABEL_30;
      }
    }
    id v9 = "?";
    goto LABEL_26;
  }
LABEL_30:
  uint64_t v11 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v11 + 1080) && *(void *)(v11 + 280))
  {
    [*(id *)(v11 + 280) removeAllObjects];
    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = *(void **)(v12 + 280);
    *(void *)(v12 + 280) = 0;

    uint64_t v11 = *(void *)(a1 + 40);
  }
  [v11 _update:v14, v15];
  uint64_t v5 = v16;
LABEL_34:
  if (v5)
  {
    v5[2](v16);
    uint64_t v5 = v16;
  }
}

id sub_100037B80(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 1040);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 1040);
    *(void *)(v4 + 1040) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 32);

  return [v6 _update];
}

void sub_100037E48(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v16 = a2;
  id v9 = a3;
  id v10 = a5;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v11 = "?";
    if (a4 == 1) {
      uint64_t v11 = "AudioArbitration";
    }
    if (!a4) {
      uint64_t v11 = "Invalid";
    }
    id v12 = v16;
    id v13 = v9;
    id v14 = v11;
    id v15 = v10;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _relayConduitMessageReceived:v16 andSourceDevice:v9 messageType:a4 messageData:v10, v12, v13, v14, v15];
}

id sub_100037F54(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _triggerTipiTableUpdate:a2];
}

void sub_100037F60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 866))
  {
    uint64_t v5 = [v3 btAddressData];
    uint64_t v6 = CUPrintNSDataAddress();

    BOOL v7 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v6];
    if (!v7)
    {
LABEL_74:

      goto LABEL_75;
    }
    uint64_t v69 = a1;
    char v8 = [*(id *)(a1 + 32) _myBluetoothAddressString];
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    v70 = v4;
    id obj = [v4 tipiDevices];
    uint64_t v72 = v8;
    id v76 = [obj countByEnumeratingWithState:&v78 objects:v82 count:16];
    if (v76)
    {
      id v73 = 0;
      unsigned __int8 v77 = 0;
      uint64_t v75 = *(void *)v79;
      BOOL v71 = v7;
      do
      {
        for (i = 0; i != v76; i = (char *)i + 1)
        {
          if (*(void *)v79 != v75) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v78 + 1) + 8 * i);
          uint64_t v11 = [v10 btAddressData];
          id v12 = CUPrintNSDataAddress();

          unsigned __int8 v13 = [v10 tipiState];
          unsigned int v14 = [v10 tipiState];
          unsigned int v15 = [v10 tipiState];
          unsigned int v16 = [v8 isEqual:v12];
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            id v17 = v6;
            unsigned int v18 = [v10 tipiConnectionStatus];
            CFStringRef v19 = "?";
            if (v18 <= 3) {
              CFStringRef v19 = off_100233F48[(char)v18];
            }
            int v20 = [v10 model];
            unsigned int v21 = [v10 tipiState];
            id v22 = "no";
            if (v16) {
              int v23 = "yes";
            }
            else {
              int v23 = "no";
            }
            if ((v15 & 4) != 0) {
              uint64_t v24 = "yes";
            }
            else {
              uint64_t v24 = "no";
            }
            if ((v14 & 2) != 0) {
              int v25 = "yes";
            }
            else {
              int v25 = "no";
            }
            if (v13) {
              id v22 = "yes";
            }
            long long v67 = v25;
            long long v68 = v22;
            uint64_t v65 = v23;
            long long v66 = v24;
            id v63 = v20;
            uint64_t v64 = v21;
            unint64_t v59 = (unint64_t)v12;
            v62 = v19;
            uint64_t v6 = v17;
            int v57 = v17;
            LogPrintF();

            BOOL v7 = v71;
            char v8 = v72;
          }
          if (objc_msgSend(v10, "tipiConnectionStatus", v57, v59, v62, v63, v64, v65, v66, v67, v68) == 2)
          {
            if (v16)
            {
              [v7 setLastPlay:(v15 >> 2) & 1];
              [v7 _setOwnership:(v14 >> 1) & 1];
            }
            else
            {
              id v26 = v12;

              uint64_t v27 = [v7 otherTipiDeviceBTAddress];
              if (!v27
                || (int v28 = (void *)v27,
                    [v7 otherTipiDeviceBTAddress],
                    CFStringRef v29 = objc_claimAutoreleasedReturnValue(),
                    unsigned int v30 = [v29 isEqualToString:v26],
                    v29,
                    char v8 = v72,
                    v28,
                    v30))
              {
                [v7 setOtherTipiDeviceLastPlay:(v15 >> 2) & 1];
              }
              id v73 = v26;
            }
          }
          if ([v10 tipiConnectionStatus] == 2
            || [v10 tipiConnectionStatus] == 1)
          {
            ++v77;
          }
        }
        id v76 = [obj countByEnumeratingWithState:&v78 objects:v82 count:16];
      }
      while (v76);
    }
    else
    {
      id v73 = 0;
      unsigned __int8 v77 = 0;
    }

    if ([*(id *)(v69 + 32) _isReceivedLegacyTipiConnect:v6])
    {
      uint64_t v4 = v70;
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      goto LABEL_73;
    }
    id v31 = [*(id *)(*(void *)(v69 + 32) + 1176) objectForKeyedSubscript:v6];

    if (!v31)
    {
      id v32 = objc_alloc_init(SmartRoutingStatsWx);
      [*(id *)(*(void *)(v69 + 32) + 1176) setObject:v32 forKeyedSubscript:v6];
    }
    BOOL v33 = [*(id *)(*(void *)(v69 + 32) + 1176) objectForKeyedSubscript:v6];
    unsigned int v34 = [v33 thV2WxCount];
    if (v77 >= 2u && v34 != v77)
    {
      double v35 = [v7 otherTipiDeviceBTAddress];
      unsigned __int8 v36 = [v35 isEqualToString:v73];

      if (v36) {
        goto LABEL_52;
      }
      uint64_t v37 = mach_absolute_time();
      char v38 = [*(id *)(*(void *)(v69 + 32) + 1176) objectForKeyedSubscript:v6];
      [v38 setThV2Ticks:v37];

      if (dword_1002610B8 > 30 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
        goto LABEL_52;
      }
      BOOL v33 = [*(id *)(*(void *)(v69 + 32) + 1176) objectForKeyedSubscript:v6];
      unsigned int v39 = [v33 thV2WxCount];
      id v40 = [*(id *)(*(void *)(v69 + 32) + 1176) objectForKeyedSubscript:v6];
      v62 = (const char *)v39;
      id v63 = [v40 thV2Ticks];
      int v57 = v6;
      unint64_t v59 = v77;
      LogPrintF();
    }
LABEL_52:
    uint64_t v41 = [*(id *)(*(void *)(v69 + 32) + 1176) objectForKeyedSubscript:v6, v57, v59, v62, v63];
    [v41 setThV2WxCount:v77];

    if (v73)
    {
      [v7 isRoutingActionInitialized];
      uint64_t v42 = [v7 otherTipiDeviceBTAddress];
      unsigned __int8 v43 = [v42 isEqualToString:v73];

      uint64_t v4 = v70;
      char v8 = v72;
      if ((v43 & 1) == 0)
      {
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          id v61 = [v7 otherTipiDeviceBTAddress];
          LogPrintF();

          [*(id *)(v69 + 32) _tipiHealing:v6 withDevice:v73, v73, v61];
        }
        else
        {
          [*(id *)(v69 + 32) _tipiHealing:v6 withDevice:v73 withDevice:v58 withDevice:v60];
        }
      }
    }
    else
    {
      uint64_t v4 = v70;
      char v8 = v72;
      if (!*(unsigned char *)(*(void *)(v69 + 32) + 1241))
      {
        uint64_t v44 = [v7 otherTipiDeviceBTAddress];
        if (v44)
        {
          id v45 = (void *)v44;
          uint64_t v46 = [v7 otherTipiDeviceVersion];

          if (v46)
          {
            if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
              LogPrintF();
            }
            [*(id *)(v69 + 32) _removeTiPiState:v6];
            goto LABEL_73;
          }
        }
      }
      if (([v7 isRoutingActionInitialized] & 1) == 0
        && !*(unsigned char *)(*(void *)(v69 + 32) + 1241))
      {
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        if (*(unsigned char *)(*(void *)(v69 + 32) + 681)) {
          uint64_t v47 = 1;
        }
        else {
          uint64_t v47 = 2;
        }
        [v7 _setRoutingAction:v47];
        int v48 = [*(id *)(*(void *)(v69 + 32) + 1208) objectForKeyedSubscript:v6];
        [v48 _setUserConnectedState:0];

        [v7 _setRoutingInitialized:1];
        int v49 = *(void **)(v69 + 32);
        char v50 = (void *)v49[158];
        if (v50)
        {
          id v51 = v50;
          dispatch_source_cancel(v51);
          uint64_t v52 = *(void *)(v69 + 32);
          uint64_t v53 = *(void **)(v52 + 1264);
          *(void *)(v52 + 1264) = 0;

          double v54 = *(void **)(v69 + 32);
          double v55 = [v7 audioRoutingRequest];
          int v56 = [v7 audioRoutingResponse];
          [v54 _smartRoutingAudioRoutingRequest:v55 withResponseHandler:v56];

          char v8 = v72;
          int v49 = *(void **)(v69 + 32);
        }
        [v49 _postNotification:"com.apple.BluetoothServices.AudioRoutingChanged"];
      }
    }
    [*(id *)(v69 + 32) _updateOtherTipiBuildVersion:v6];
LABEL_73:

    goto LABEL_74;
  }
LABEL_75:
}

uint64_t sub_1000387B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v7 = v3;
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      id v3 = [*(id *)(a1 + 32) invalidate:v7];
    }
    else
    {
      id v3 = [[*(id *)(a1 + 32) invalidate:v6];
    }
    goto LABEL_10;
  }
  if (dword_1002610B8 <= 30)
  {
    id v7 = 0;
    if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
    {
      [*(id *)(a1 + 32) bluetoothState];
      [*(id *)(a1 + 32) discoverableState];
      [*(id *)(a1 + 32) inquiryState];
      id v3 = (id)LogPrintF();
LABEL_10:
      id v4 = v7;
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_100038C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_100038C98(void *a1, void *a2, void *a3, unsigned char *a4)
{
  id v18 = a2;
  id v7 = a3;
  if ([v18 isEqualToString:a1[4]])
  {
    if (!*(void *)(*(void *)(a1[7] + 8) + 40))
    {
      id v8 = objc_alloc_init((Class)CBDevice);
      uint64_t v9 = *(void *)(a1[7] + 8);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }
    if (!*(void *)(*(void *)(a1[8] + 8) + 40))
    {
      id v11 = objc_alloc_init((Class)CBDevice);
      uint64_t v12 = *(void *)(a1[8] + 8);
      unsigned __int8 v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
    unsigned int v14 = [v7 conduitDeviceID];
    [*(id *)(*(void *)(a1[7] + 8) + 40) setIdentifier:v14];

    if (a1[5])
    {
      [*(id *)(*(void *)(a1[8] + 8) + 40) setIdentifier:];
    }
    else
    {
      unsigned int v15 = [v7 otherTipiDeviceBTAddress];
      [*(id *)(*(void *)(a1[8] + 8) + 40) setIdentifier:v15];
    }
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      unsigned int v16 = [v7 conduitDeviceID];
      id v17 = [*(id *)(*(void *)(a1[8] + 8) + 40) identifier];
      LogPrintF();
    }
    *a4 = 1;
  }
}

void sub_100038E74(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_1002610B8 <= 90)
  {
    id v4 = v2;
    if (dword_1002610B8 != -1 || (v2 = (NSError *)_LogCategory_Initialize(), id v3 = v4, v2))
    {
      uint64_t v2 = (NSError *)LogPrintF();
      id v3 = v4;
    }
  }

  _objc_release_x1(v2, v3);
}

void sub_100039F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_100039F38(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v40 = a2;
  id v7 = a3;
  if ([v40 containsString:*(void *)(a1 + 32)])
  {
    unsigned int v8 = [v7 audioRoutingClientID];
    if (v8 == [*(id *)(a1 + 40) unsignedIntValue])
    {
      uint64_t v9 = [v7 conduitMessageTimer];
      id v10 = v9;
      if (v9) {
        dispatch_source_cancel(v9);
      }
      [v7 setConduitMessageTimer:0];
      mach_absolute_time();
      [v7 conduitMessageTicks];
      uint64_t v11 = UpTicksToMilliseconds();
      if (dword_1002610B8 <= 30)
      {
        uint64_t v12 = v11;
        if (dword_1002610B8 != -1 || _LogCategory_Initialize())
        {
          uint64_t v35 = v12;
          LogPrintF();
        }
      }
      [v7 setConduitMessageTicks:0, v35];
      id v13 = objc_alloc_init((Class)BTAudioRoutingResponse);
      unsigned int v14 = [*(id *)(a1 + 48) objectForKey:@"audioRoutingHijackAnswer"];
      signed int v15 = [v14 intValue];
      uint64_t v16 = v15;
      switch(v15)
      {
        case 1:
          *(void *)(*(void *)(a1 + 56) + 400) = mach_absolute_time();
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [v13 setAction:1];
          [v13 setDeviceAddress:*(void *)(a1 + 32)];
          [v13 setReason:@"Tipi device hijack was successful"];
          *(void *)(*(void *)(a1 + 56) + 12_Block_object_dispose(&STACK[0x290], 8) = mach_absolute_time();
          break;
        case 2:
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [v13 setAction:3];
          [v13 setDeviceAddress:0];
          CFStringRef v17 = @"Tipi device hijack was ambigious";
          goto LABEL_30;
        case 3:
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [v13 setAction:3];
          [v13 setDeviceAddress:0];
          CFStringRef v17 = @"Tipi device hijack was rejected";
          goto LABEL_30;
        case 4:
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [v13 setAction:4];
          [v13 setDeviceAddress:*(void *)(a1 + 32)];
          CFStringRef v17 = @"Tipi device hijack was backed off";
LABEL_30:
          [v13 setReason:v17];
          break;
        default:
          break;
      }
      id v18 = [v7 audioRoutingResponse];

      if (v18)
      {
        CFStringRef v19 = *(void **)(a1 + 56);
        int v20 = [v7 audioRoutingResponse];
        [v19 _respondRoutingRequest:v13 withResponseHandler:v20 wxAddress:v40];
      }
      if (v16 == 1)
      {
        mach_absolute_time();
        uint64_t v21 = UpTicksToSeconds();
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          unsigned int v22 = [v7 routed];
          int v23 = "no";
          if (v22) {
            int v23 = "yes";
          }
          uint64_t v36 = (uint64_t)v23;
          uint64_t v37 = v21;
          LogPrintF();
        }
        if ((objc_msgSend(v7, "routed", v36, v37) & 1) != 0
          || (uint64_t v24 = *(void *)(a1 + 56), *(void *)(v24 + 1072))
          && *(double *)(v24 + 1056) > (double)(unint64_t)v21)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
          {
            int v25 = v10;
            id v26 = v14;
            if ([v7 inEar]) {
              uint64_t v27 = "yes";
            }
            else {
              uint64_t v27 = "no";
            }
            unsigned int v28 = [v7 inEarDisabled];
            CFStringRef v29 = "no";
            if (v28) {
              CFStringRef v29 = "yes";
            }
            uint64_t v37 = (uint64_t)v27;
            char v38 = v29;
            unsigned int v14 = v26;
            id v10 = v25;
            uint64_t v36 = v21;
            LogPrintF();
          }
        }
        else
        {
          unsigned int v30 = [v7 deviceName];
          uint64_t v31 = [v7 deviceAddress];
          unsigned int v39 = v10;
          id v32 = v14;
          BOOL v33 = (void *)v31;
          if (v31) {
            CFStringRef v34 = (const __CFString *)v31;
          }
          else {
            CFStringRef v34 = @"?";
          }
          [v24 _smartRoutingShowBanner:1 withDevice:v30 andDeviceAddress:v34 andProductID:[v7 productID] andCentralContentItemTxt:@"Connected" andTimeout:0 andDeviceType:4.0];

          unsigned int v14 = v32;
          id v10 = v39;
        }
      }
      [*(id *)(a1 + 56) _startHijackMetricSubmission:wxAddress:version:v16, v40, @"V1", v36, v37, v38];
      *a4 = 1;
    }
  }
}

void sub_10003A510(uint64_t a1, void *a2, void *a3)
{
  id v18 = a3;
  if ([a2 isEqualToString:*(void *)(a1 + 32)])
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 40) + 1168) objectForKeyedSubscript:*(void *)(a1 + 32)];
    uint64_t v6 = [v5 otherTipiDeviceVersion];
    [v6 doubleValue];
    if (v7 < 1.2)
    {
    }
    else
    {
      unsigned int v8 = [*(id *)(*(void *)(a1 + 40) + 1168) objectForKeyedSubscript:*(void *)(a1 + 32)];
      uint64_t v9 = [v8 otherTipiDeviceVersion];

      if (v9)
      {
        if (dword_1002610B8 <= 40 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        uint64_t v12 = *(void *)(a1 + 40);
        if (*(unsigned char *)(a1 + 56))
        {
          int v13 = *(unsigned __int8 *)(v12 + 441);
          int v14 = dword_1002610B8;
          if (v13)
          {
            if (dword_1002610B8 > 40 || dword_1002610B8 == -1 && !_LogCategory_Initialize()) {
              goto LABEL_32;
            }
            goto LABEL_28;
          }
        }
        else
        {
          signed int v15 = [*(id *)(v12 + 1168) objectForKeyedSubscript:*(void *)(a1 + 32)];
          uint64_t v16 = [v15 otherTipiDeviceBTName];
          unsigned int v17 = [v16 isEqualToString:@"Mac"];

          int v14 = dword_1002610B8;
          if (v17)
          {
            if (dword_1002610B8 <= 40 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
              LogPrintF();
            }
            [v18 _setRoutingAction:3];
            [*(id *)(a1 + 40) _setOwnership:*(void *)(a1 + 32) withHijackRequest:0 withOwnership:0];
            goto LABEL_34;
          }
        }
        if (v14 > 40 || v14 == -1 && !_LogCategory_Initialize()) {
          goto LABEL_32;
        }
LABEL_28:
        LogPrintF();
LABEL_32:
        uint64_t v11 = v18;
        uint64_t v10 = 1;
LABEL_33:
        [v11 _setRoutingAction:v10];
LABEL_34:
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        goto LABEL_35;
      }
    }
    if (dword_1002610B8 <= 40 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    if ([v18 routed]) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = 3;
    }
    uint64_t v11 = v18;
    goto LABEL_33;
  }
LABEL_35:
}

uint64_t sub_10003A80C(uint64_t a1, void *a2, void *a3)
{
  id v22 = a3;
  id v5 = [a2 isEqualToString:*(void *)(a1 + 32)];
  id v6 = v22;
  if (v5)
  {
    double v7 = [*(id *)(*(void *)(a1 + 40) + 200) objectForKeyedSubscript:*(void *)(a1 + 32)];
    int v8 = [v7 audioStreamState];
    uint64_t v9 = *(void *)(a1 + 40);
    if (v8 > 1)
    {
      if (*(unsigned char *)(v9 + 56))
      {
        unsigned int v12 = [*(id *)(v9 + 160) activeCallCount];

        uint64_t v11 = v22;
        if (v12) {
          goto LABEL_10;
        }
LABEL_24:
        id v5 = [v11 _setRoutingAction:3];
LABEL_25:
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        id v6 = v22;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v10 = [*(id *)(v9 + 200) objectForKeyedSubscript:*(void *)(a1 + 32)];
      if ([v10 audioStreamState])
      {

        uint64_t v11 = v22;
LABEL_10:
        signed int v15 = [v11 deviceVersion];
        uint64_t v16 = [v22 otherTipiDeviceVersion];
        [v16 doubleValue];
        BOOL v18 = v17 < 1.2 || [@"3E725" compare:v15 options:64] == (id)1;

        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          CFStringRef v19 = "no";
          if (v18) {
            CFStringRef v19 = "yes";
          }
          uint64_t v21 = v19;
          LogPrintF();
        }
        [v22 _setRoutingAction:1, v21];
        if (v18) {
          [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:&off_100244480 andWxAddress:*(void *)(a1 + 32) andOtherAddress:0];
        }

        goto LABEL_25;
      }
      uint64_t v13 = *(void *)(a1 + 40);
      if (*(unsigned char *)(v13 + 56))
      {
        unsigned int v14 = [*(id *)(v13 + 160) activeCallCount];

        uint64_t v11 = v22;
        if (v14) {
          goto LABEL_10;
        }
        goto LABEL_24;
      }
    }
    uint64_t v11 = v22;
    goto LABEL_24;
  }
LABEL_26:

  return _objc_release_x1(v5, v6);
}

void sub_10003AC6C(uint64_t a1, void *a2)
{
  id v19 = a2;
  id v3 = *(id *)(*(void *)(a1 + 32) + 1424);
  if (v19)
  {
    id v17 = v19;
    id v4 = NSErrorF();
    BOOL v5 = v4 != 0;
    if (v4) {
      BOOL v6 = v3 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      if (!v3) {
        goto LABEL_25;
      }
    }
    else
    {
      double v7 = [v3 wxAddress:v19];
      int v8 = *(void **)(a1 + 32);
      uint64_t v9 = NSErrorF();
      [v8 _updateOtherTipiDevice:v7 otherAddress:0 otherName:0 otherVersion:0 withResult:v9, v19];

      BOOL v5 = 1;
    }
  }
  else
  {
    id v4 = 0;
    if (!v3) {
      goto LABEL_25;
    }
    BOOL v5 = 0;
  }
  [*(id *)(*(void *)(a1 + 32) + 1152) _pipeRequestResponse:v3 error:v4];
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    BOOL v18 = [v3 version];
    LogPrintF();
  }
  uint64_t v10 = [v3 version:v18];
  [v10 doubleValue];
  if (v11 < 1.2)
  {
  }
  else
  {
    unsigned int v12 = [v3 version];

    if (v12) {
      goto LABEL_25;
    }
  }
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v13 = *(void **)(*(void *)(a1 + 32) + 1152);
  unsigned int v14 = [v3 wxAddress];
  [v13 _pipeConnectionComplete:v4 andWxHeadset:v14 isSender:0];

  if (!v5)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void **)(v15 + 1424);
    *(void *)(v15 + 1424) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 1241) = 0;
    [*(id *)(a1 + 32) _startTipiSetupTicks];
  }
LABEL_25:
}

void sub_10003B0D0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1002610B8 <= 90)
    {
      id v4 = v2;
      if (dword_1002610B8 != -1 || (v2 = (NSError *)_LogCategory_Initialize(), id v3 = v4, v2))
      {
        uint64_t v2 = (NSError *)LogPrintF();
        id v3 = v4;
      }
    }
  }

  _objc_release_x1(v2, v3);
}

void sub_10003B608(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[174] == *(void *)(a1 + 40))
  {
    id v4 = a2;
    [v2 _wxDeviceFound:v4];
    [*(id *)(a1 + 32) _lowBatteryDeviceFound:v4];
  }
}

void sub_10003B684(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[174] == *(void *)(a1 + 40))
  {
    id v4 = a2;
    [v2 _lowBatteryDeviceLost:v4];
    [*(id *)(a1 + 32) _wxDeviceLost:v4];
  }
}

void sub_10003B700(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[174] == *(void *)(a1 + 40))
  {
    id v4 = a2;
    [v2 _wxDeviceFound:v4];
    [*(id *)(a1 + 32) _lowBatteryDeviceFound:v4];
  }
}

void sub_10003B77C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(v1 + 1392);
  if (v3 == v2)
  {
    *(void *)(v1 + 1392) = 0;
  }
}

void sub_10003B798(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(a1 + 32) + 1392) == *(void *)(a1 + 40))
  {
    id v7 = v3;
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v7;
      LogPrintF();
    }
    [*(id *)(a1 + 40) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 32);
    BOOL v5 = *(void **)(v4 + 1392);
    *(void *)(v4 + 1392) = 0;

    id v3 = v7;
  }
}

id sub_10003CEC0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _wxDiscoveryWatchRecoveryFoundDevice:a2];
}

id sub_10003CECC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _wxDiscoveryWatchRecoveryLostDevice:a2];
}

void sub_10003CED8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 == *(void **)(*(void *)(a1 + 40) + 1400))
  {
    [v2 invalidate];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 1400);
    *(void *)(v3 + 1400) = 0;
  }
}

void sub_10003ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_10003ED0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 model];
  if (([v4 hasPrefix:@"iPhone"] & 1) != 0
    || ([v4 hasPrefix:@"iPad"] & 1) != 0
    || [v4 containsString:@"Mac"])
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

void sub_10004039C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v4 = [*(id *)(a1 + 32) object];
  }
  else
  {
    id v4 = 0;
  }
  uint64_t v78 = 0;
  long long v79 = &v78;
  uint64_t v80 = 0x3032000000;
  long long v81 = sub_10001E20C;
  CFStringRef v82 = sub_10001E21C;
  id v83 = 0;
  v77[0] = _NSConcreteStackBlock;
  v77[1] = 3221225472;
  v77[2] = sub_100040D8C;
  v77[3] = &unk_100232928;
  v77[4] = &v78;
  uint64_t v75 = objc_retainBlock(v77);
  if (!v4)
  {
    uint64_t v58 = v79;
    unint64_t v59 = (void *)v79[5];
    CFStringRef v60 = @"New call is null";
LABEL_77:
    v58[5] = (uint64_t)v60;

    goto LABEL_71;
  }
  BOOL v5 = [v4 callUUID];

  if (!v5)
  {
    uint64_t v58 = v79;
    unint64_t v59 = (void *)v79[5];
    CFStringRef v60 = @"New call uuid is null";
    goto LABEL_77;
  }
  id v6 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];

  if (!v6)
  {
    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    [*(id *)(*(void *)(a1 + 40) + 1184) setTUCallMap:v7];
  }
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    unsigned int v8 = [v4 isIncoming];
    uint64_t v9 = "no";
    if (v8) {
      uint64_t v9 = "yes";
    }
    uint64_t v74 = v9;
    unsigned int v10 = [v4 isOutgoing];
    double v11 = "no";
    if (v10) {
      double v11 = "yes";
    }
    id v73 = v11;
    unsigned int v12 = [v4 status];
    if (v12 > 6) {
      uint64_t v13 = "?";
    }
    else {
      uint64_t v13 = off_100234018[v12];
    }
    uint64_t v72 = v13;
    unsigned int v14 = [v4 isEndpointOnCurrentDevice];
    uint64_t v15 = "no";
    if (v14) {
      uint64_t v15 = "yes";
    }
    BOOL v71 = v15;
    uint64_t v16 = [v4 callUUID];
    id v17 = [v4 provider];
    BOOL v18 = [v17 identifier];
    id v19 = [v4 provider];
    int v20 = [v19 localizedName];
    uint64_t v21 = [v4 provider];
    id v22 = [v21 bundleIdentifier];
    int v23 = [v4 provider];
    unsigned int v24 = [v23 isSystemProvider];
    int v25 = "no";
    if (v24) {
      int v25 = "yes";
    }
    uint64_t v69 = v22;
    v70 = v25;
    long long v67 = v18;
    long long v68 = v20;
    uint64_t v64 = v72;
    uint64_t v65 = v71;
    long long v66 = v16;
    id v61 = v74;
    id v63 = v73;
    LogPrintF();
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "_isPhoneCall:", v4, v61, v63, v64, v65, v66, v67, v68, v69, v70) & 1) == 0)
  {
    uint64_t v58 = v79;
    unint64_t v59 = (void *)v79[5];
    CFStringRef v60 = @"Skip conferencing call";
    goto LABEL_77;
  }
  id v26 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];

  if (!v26)
  {
    id v27 = objc_alloc_init((Class)NSMutableDictionary);
    [*(id *)(*(void *)(a1 + 40) + 1184) setTUCallMap:v27];
  }
  if ([v4 isIncoming])
  {
    unsigned int v28 = [v4 status];
    if (v28 - 5 < 2)
    {
      BOOL v33 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
      CFStringRef v34 = [v4 callUUID];
      uint64_t v35 = [v33 objectForKeyedSubscript:v34];

      if (v35)
      {
        uint64_t v36 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
        uint64_t v37 = [v4 callUUID];
        [v36 setObject:0 forKeyedSubscript:v37];

        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
        {
          char v38 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
          id v62 = [v38 count];
          LogPrintF();
        }
        id v45 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap:v62];
        id v46 = [v45 count];

        if (!v46)
        {
          [*(id *)(a1 + 40) _clearCallSession];
          if (GestaltGetDeviceClass() == 1) {
            [*(id *)(a1 + 40) _notifyOtherTipiCallState:6];
          }
        }
      }
    }
    else
    {
      if (v28 != 1)
      {
        if (v28 == 4)
        {
          [*(id *)(*(void *)(a1 + 40) + 1184) _setIncomingCallRingtoneState:1];
          [*(id *)(a1 + 40) _startRingtoneTimer];
          [*(id *)(a1 + 40) _sendAudioCategoryToAllTipiDevices];
        }
        goto LABEL_71;
      }
      if ([v4 isEndpointOnCurrentDevice])
      {
        unsigned int v39 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
        id v40 = [v4 callUUID];
        uint64_t v41 = [v39 objectForKeyedSubscript:v40];

        if (!v41)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          [*(id *)(a1 + 40) _updateLocalAudioCategory:&off_100244880];
          [*(id *)(*(void *)(a1 + 40) + 1184) setCallStartTicks:mach_absolute_time()];
          [*(id *)(a1 + 40) _startInUseBannerTimer];
          uint64_t v52 = *(void *)(a1 + 40);
          uint64_t v53 = *(void **)(v52 + 1168);
          v76[0] = _NSConcreteStackBlock;
          v76[1] = 3221225472;
          v76[2] = sub_100040E28;
          v76[3] = &unk_100233650;
          v76[4] = v52;
          [v53 enumerateKeysAndObjectsUsingBlock:v76];
          double v54 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
          double v55 = [v4 callUUID];
          [v54 setObject:v4 forKeyedSubscript:v55];
        }
      }
    }
    [*(id *)(*(void *)(a1 + 40) + 1184) _setIncomingCallRingtoneState:0];
    [*(id *)(a1 + 40) _sendAudioCategoryToAllTipiDevices];
    [*(id *)(a1 + 40) _cancelRingtoneTimer];
    goto LABEL_71;
  }
  if ([v4 isOutgoing])
  {
    unsigned int v29 = [v4 status];
    if (v29 - 5 < 2)
    {
      uint64_t v42 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
      unsigned __int8 v43 = [v4 callUUID];
      uint64_t v44 = [v42 objectForKeyedSubscript:v43];

      if (v44)
      {
        if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        uint64_t v47 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
        int v48 = [v4 callUUID];
        [v47 setObject:0 forKeyedSubscript:v48];

        int v49 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
        id v50 = [v49 count];

        if (!v50)
        {
          [*(id *)(a1 + 40) _clearCallSession];
          if (GestaltGetDeviceClass() == 1)
          {
            id v51 = *(unsigned char **)(a1 + 40);
            if (v51[863]) {
              [v51 _notifyOtherTipiCallState:6];
            }
          }
        }
      }
    }
    else if (v29 == 1)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
    }
    else if (v29 == 3)
    {
      if ([v4 isEndpointOnCurrentDevice])
      {
        unsigned int v30 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
        uint64_t v31 = [v4 callUUID];
        id v32 = [v30 objectForKeyedSubscript:v31];

        if (!v32)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          int v56 = [*(id *)(*(void *)(a1 + 40) + 1184) TUCallMap];
          int v57 = [v4 callUUID];
          [v56 setObject:v4 forKeyedSubscript:v57];

          [*(id *)(*(void *)(a1 + 40) + 1184) setCallStartTicks:mach_absolute_time()];
          [*(id *)(a1 + 40) _startInUseBannerTimer];
        }
      }
    }
  }
LABEL_71:
  ((void (*)(void *))v75[2])(v75);

  _Block_object_dispose(&v78, 8);
}

void sub_100040D58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100040D8C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 40))
  {
    if (dword_1002610B8 <= 90)
    {
      if (dword_1002610B8 != -1) {
        return LogPrintF();
      }
      id result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_100040E28(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    double v11 = [v5 otherTipiDeviceBTAddress];
    id v12 = [v5 otherTipiAudioCategory];
    id v10 = v13;
    LogPrintF();
  }
  id v6 = [v5 otherTipiDeviceBTAddress:v10, v11, v12];
  if (v6 && [v5 otherTipiAudioCategory])
  {
    unsigned int v7 = [v5 otherTipiAudioCategory];

    if (v7 <= 0x1F4)
    {
      [v5 _setRoutingAction:1];
      unsigned int v8 = *(void **)(a1 + 32);
      uint64_t v9 = [v5 otherTipiDeviceBTAddress];
      [v8 _relayConduitMessageSend:1 withOptions:&off_1002444A8 andWxAddress:v13 andOtherAddress:v9];

      [*(id *)(a1 + 32) _postNotification:"com.apple.BluetoothServices.AudioRoutingChanged"];
    }
  }
  else
  {
  }
}

void sub_1000411E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [v6 otherTipiDeviceBTAddress];

  if (v7)
  {
    CFStringRef v12 = @"callState";
    unsigned int v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
    id v13 = v8;
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];

    id v10 = *(void **)(a1 + 32);
    double v11 = [v6 otherTipiDeviceBTAddress];
    [v10 _relayConduitMessageSend:1 withOptions:v9 andWxAddress:v5 andOtherAddress:v11];
  }
}

id sub_10004141C(uint64_t a1)
{
  if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) _evaluatorRunInUseBanner:0];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _cancelInUseBannerForCallTimer];
}

id sub_1000415D0(uint64_t a1)
{
  if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(*(void *)(a1 + 32) + 1184) _setIncomingCallRingtoneState:0];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _cancelRingtoneTimer];
}

void sub_100041CC8(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [[*(id *)(*(void *)(a1 + 32) + 264) objectForKeyedSubscript:];
  unsigned int v4 = [v3 mode];

  if (v4 == 1)
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v5 = [*(id *)(*(void *)(a1 + 32) + 264) objectForKeyedSubscript:v6];
    [v5 setMode:2];

    [*(id *)(a1 + 32) _handleSmartRoutingDisabled:v6];
  }
}

void sub_1000427E0(void *a1)
{
  if (*(void *)(a1[4] + 136))
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v4 = a1[6];
      LogPrintF();
    }
    [*(id *)(a1[4] + 1200) removeObjectForKey:a1[5] v4];
    uint64_t v2 = a1[4];
    uint64_t v3 = *(void **)(v2 + 136);
    *(void *)(v2 + 136) = 0;
  }
}

void sub_100042CA4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_1002610B8 <= 90)
    {
      uint64_t v4 = v2;
      if (dword_1002610B8 != -1 || (v2 = (NSError *)_LogCategory_Initialize(), uint64_t v3 = v4, v2))
      {
        uint64_t v2 = (NSError *)LogPrintF();
        uint64_t v3 = v4;
      }
    }
  }

  _objc_release_x1(v2, v3);
}

void sub_100042DF8(id a1, NSString *a2, NearbyWxDevice *a3, BOOL *a4)
{
  uint64_t v9 = a2;
  id v5 = a3;
  if ([(NearbyWxDevice *)v5 paired]
    && dword_1002610B8 <= 50
    && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    id v6 = [(NearbyWxDevice *)v5 address];
    [(NearbyWxDevice *)v5 isUTPConnected];
    [(NearbyWxDevice *)v5 sourceCount];
    unsigned int v7 = [(NearbyWxDevice *)v5 lastConnectHost];
    unsigned int v8 = [(NearbyWxDevice *)v5 zeroSourceLastRouteHost];
    [(NearbyWxDevice *)v5 lidClosed];
    [(NearbyWxDevice *)v5 primaryInEar];
    [(NearbyWxDevice *)v5 secondaryInEar];
    [(NearbyWxDevice *)v5 primaryInCase];
    [(NearbyWxDevice *)v5 secondaryInCase];
    LogPrintF();
  }
}

void sub_100042FB0(id a1, NSString *a2, BTSmartRoutingWxDevice *a3, BOOL *a4)
{
  id v6 = a2;
  id v5 = a3;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    [(BTSmartRoutingWxDevice *)v5 routingAction];
    [(BTSmartRoutingWxDevice *)v5 routed];
    LogPrintF();
  }
}

void sub_100043194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000431AC(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v13 = a2;
  id v8 = a3;
  uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:v13];

  if (v9)
  {
    id v10 = [*(id *)(*(void *)(a1 + 32) + 256) objectForKeyedSubscript:v13];
    unsigned int v11 = [v10 BOOLValue];

    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      CFStringRef v12 = [v8 deviceAddress];
      LogPrintF();
    }
    if (v11)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }
}

void sub_100043A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100043A8C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v9 = a2;
  id v8 = a3;
  if ([v8 isNearby]
    && [v8 nearbyInEar] == 1
    && ![v8 connectionState])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *a4 = 1;
  }
}

void sub_100043F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100043F88(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v7 = a3;
  if ([v7 inEar])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }
}

uint64_t sub_1000441E4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = v2;
  id v7 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 identifier];
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      [v7 tipiAndRoutedState];
      id v6 = CUPrintFlags32();
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 32) + 16) smartRoutingStateUpdated:objc_msgSend(v7, "tipiAndRoutedState", v6) ForDeviceIdentifier:v4];

    goto LABEL_7;
  }
  if (dword_1002610B8 <= 30)
  {
    if (dword_1002610B8 != -1 || (v2 = (void *)_LogCategory_Initialize(), uint64_t v3 = 0, v2))
    {
      uint64_t v2 = (void *)LogPrintF();
LABEL_7:
      uint64_t v3 = v7;
    }
  }

  return _objc_release_x1(v2, v3);
}

void sub_1000444BC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000444D4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v11 = [a3 bleDevice];
  id v6 = [v11 advertisementFields];
  id v7 = CFDictionaryGetCFDataOfLength();
  id v8 = v7;
  if (v7)
  {
    [v7 bytes];
    id v9 = NSPrintF();
  }
  else
  {
    id v9 = 0;
  }
  int Int64Ranged = CFDictionaryGetInt64Ranged();
  if ([*(id *)(a1 + 32) isEqualToString:v9])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFDictionaryGetInt64Ranged();
    if (dword_1002610B8 <= 50 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    if (Int64Ranged == 8209) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    *a4 = 1;
  }
}

uint64_t sub_100044674(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v11 = a3;
  id v7 = [a2 isEqualToString:*(void *)(a1 + 32)];
  id v8 = v11;
  if (v7)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v11 colorCodeBest];
    if (dword_1002610B8 <= 50 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      LogPrintF();
    }
    id v7 = [v11 productID:v10];
    if (v7 == 8209) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    *a4 = 1;
    id v8 = v11;
  }

  return _objc_release_x1(v7, v8);
}

id sub_100044C94(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = [v2 objectForKeyedSubscript:AVSystemController_CallIsActiveNotificationParameter];
  unsigned int v4 = [v3 BOOLValue];

  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4)
  {
    *(unsigned char *)(v5 + 152) = 1;
    [*(id *)(*(void *)(a1 + 40) + 1224) setCallConnected:1];
    id v6 = *(void **)(a1 + 40);
    return [v6 _evaluatorRun];
  }
  else
  {
    *(unsigned char *)(v5 + 152) = 0;
    id v8 = *(void **)(*(void *)(a1 + 40) + 1224);
    return [v8 setCallConnected:0];
  }
}

void sub_100044E68(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = [v2 objectForKeyedSubscript:AVSystemController_NowPlayingAppIsPlayingNotificationParameter];
  unsigned int v4 = [v3 BOOLValue];

  uint64_t v5 = [*(id *)(a1 + 32) userInfo];
  id v11 = [v5 objectForKeyedSubscript:AVSystemController_NowPlayingAppNotificationParameter];

  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v4)
  {
    *(unsigned char *)(v6 + 704) = 1;
    [*(id *)(*(void *)(a1 + 40) + 1224) setMediaPlaying:1];
    [*(id *)(a1 + 40) _startPlaybackTimer];
    [*(id *)(a1 + 40) _evaluatorRun];
  }
  else
  {
    *(unsigned char *)(v6 + 704) = 0;
    [*(id *)(*(void *)(a1 + 40) + 1224) setMediaPlaying:0];
    id v7 = *(void **)(*(void *)(a1 + 40) + 712);
    if (v7)
    {
      id v8 = v7;
      dispatch_source_cancel(v8);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void **)(v9 + 712);
      *(void *)(v9 + 712) = 0;
    }
  }
}

void sub_100045230(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v12 = [v2 objectForKeyedSubscript:AVSystemController_HighestArbitrationPriorityForTipi_AudioScore];

  uint64_t v3 = [*(id *)(a1 + 32) userInfo];
  unsigned int v4 = [v3 objectForKeyedSubscript:AVSystemController_HighestArbitrationPriorityForTipi_BundleID];

  [*(id *)(*(void *)(a1 + 40) + 1224) setHijackPlayingApp:v4];
  [*(id *)(*(void *)(a1 + 40) + 1224) setHijackPlayingCategory:v12];
  [*(id *)(*(void *)(a1 + 40) + 1184) setActivePlayingApp:v4];
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v10 = v4;
    id v11 = v12;
    LogPrintF();
  }
  unsigned int v5 = [*(id *)(*(void *)(a1 + 40) + 496) intValue:v10, v11];
  if (v5 != [v12 intValue]
    || ([*(id *)(*(void *)(a1 + 40) + 1184) activePlayingApp],
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v7 = [v6 isEqualToString:v4],
        v6,
        (v7 & 1) == 0))
  {
    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v12 integerValue]);
    [v8 _updateLocalAudioCategory:v9];
  }
}

void sub_1000456FC(void *a1)
{
  uint64_t v1 = a1[5];
  if (a1[4] != *(void *)(v1 + 408)) {
    return;
  }
  if (*(unsigned char *)(v1 + 56)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = (int)[*(id *)(v1 + 160) activeCallCount] > 0;
  }
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    CFStringRef v4 = @"Off";
    if (v3) {
      CFStringRef v4 = @"On";
    }
    uint64_t v5 = a1[5];
    unint64_t v6 = *(char *)(v5 + 32);
    if (v6 > 0xE) {
      unsigned __int8 v7 = "?";
    }
    else {
      unsigned __int8 v7 = off_100234178[v6];
    }
    uint64_t v8 = *(int *)(v5 + 1020);
    if (v8 > 0xF) {
      uint64_t v9 = "?";
    }
    else {
      uint64_t v9 = off_1002342D0[v8];
    }
    int v23 = v7;
    unsigned int v24 = v9;
    CFStringRef v22 = v4;
    LogPrintF();
    if (v3) {
      goto LABEL_20;
    }
  }
  else if (v3)
  {
LABEL_20:
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v11 = a1[5];
      unsigned __int8 v12 = *(unsigned char *)(v11 + 417) + 1;
      *(unsigned char *)(v11 + 417) = v12;
      CFStringRef v22 = (const __CFString *)v12;
      LogPrintF();
    }
    unsigned int v14 = [[*(id *)(a1[5] + 1168) objectForKeyedSubscript:a1[6], v22, v23, v24];
    [v14 _setHijackBackoffTick:mach_absolute_time()];

    uint64_t v15 = (id *)a1[5];
    uint64_t v16 = [v15[146] objectForKeyedSubscript:a1[6]];
    id v13 = [v15 _checkTickswithinWindow:objc_msgSend(v16, "hijackBackoffTicks") withWindow:[*(void *)(a1[5] + 800)]];

    goto LABEL_26;
  }
  uint64_t v10 = (int *)a1[5];
  if (v10[255] >= 6) {
    goto LABEL_20;
  }
  [v10 _hijackBackoffReset:a1[6] withReason:@"inactivity"];
  id v13 = 0;
LABEL_26:
  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v13, v22);
  id v25 = (id)objc_claimAutoreleasedReturnValue();
  id v17 = objc_alloc_init((Class)NSMutableDictionary);
  [v17 setObject:v25 forKey:@"hijackBackoffTicks"];
  id v19 = (id *)a1[5];
  uint64_t v18 = a1[6];
  int v20 = [v19[146] objectForKeyedSubscript:v18];
  uint64_t v21 = [v20 otherTipiDeviceBTAddress];
  [v19 _relayConduitMessageSend:1 withOptions:v17 andWxAddress:v18 andOtherAddress:v21];
}

void sub_100045D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100045DAC(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 696);
    if (v2)
    {
      uint64_t v5 = v2;
      dispatch_source_cancel(v5);
      uint64_t v3 = *(void *)(a1 + 32);
      CFStringRef v4 = *(void **)(v3 + 696);
      *(void *)(v3 + 696) = 0;
    }
  }
}

void sub_100046384(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = [v2 userInfo];
    CFStringRef v4 = [v3 valueForKey:@"wxAddress"];
    id v5 = [v4 unsignedLongLongValue];

    NSPrintF();
    id v12 = objc_claimAutoreleasedReturnValue();
    [v12 UTF8String];
    unint64_t v6 = NSDataWithHex();
    unsigned __int8 v7 = CUPrintNSDataAddress();

    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v10 = v7;
      LogPrintF();
    }
    uint64_t v8 = [*(id *)(*(void *)(a1 + 40) + 1208) objectForKeyedSubscript:v7, v10];
    uint64_t v9 = [v8 nearbyWxDevice];

    if (v9)
    {
      LOBYTE(v11) = 1;
      [*(id *)(a1 + 40) _smartRoutingAddWxMapDevice:v9 routingAction:3 otherAddress:0 otherName:0 otherSourceVersion:0 isRoutingInitialized:0 newWx:v11];
      [*(id *)(a1 + 40) _smartRoutingConnectToEligibleHeadset:v9];
    }
  }
}

void sub_100046704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004671C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  unint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:a2];
  if (v6)
  {
    id v8 = v6;
    BOOL v7 = (int)[v6 audioStreamState] < 2;
    unint64_t v6 = v8;
    if (!v7)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
    }
  }
}

void sub_100046ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100046EF0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v15 = a2;
  id v7 = a3;
  id v8 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v15];
  uint64_t v9 = [v8 identifier];

  if (v9)
  {
    uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 600) objectForKeyedSubscript:v9];
    unint64_t v11 = [v10 sourceCount];
  }
  else
  {
    unint64_t v11 = 0;
  }
  id v12 = [v7 otherTipiDeviceBTAddress];
  if (v12) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v11 > 1;
  }
  char v14 = v13;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v14;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a4 = 1;
  }
}

void sub_100047124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004713C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  unint64_t v6 = [a3 otherTipiDeviceBTAddress];

  if (v6)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_100047568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10004758C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v6 = a3;
  id v7 = [v6 bleDevice];
  id v8 = [v7 advertisementFields];
  CFDictionaryGetCFDataOfLength();
  id v17 = (id)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    id v16 = [v17 bytes];
    uint64_t v9 = NSPrintF();
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = [v6 bleDevice:v16];
  unint64_t v11 = [v10 advertisementFields];
  char Int64Ranged = CFDictionaryGetInt64Ranged();

  BOOL v13 = [v6 bleDevice];

  char v14 = [v13 advertisementFields];
  uint64_t v15 = CFDictionaryGetInt64Ranged();

  if ([v9 isEqualToString:*(void *)(a1 + 32)])
  {
    if ((Int64Ranged & 0x24) != 0
      || [*(id *)(a1 + 40) _bluetoothProductIDNoEarDetect:v15])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_1000479A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000479C0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  id v6 = [*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:];
  if ([v6 primaryPlacement] == 1)
  {
  }
  else
  {
    id v7 = [*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:v9];
    unsigned int v8 = [v7 secondaryPlacement];

    if (v8 != 1) {
      goto LABEL_5;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  *a4 = 1;
LABEL_5:
}

void sub_100047B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100047B50(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) _isInEarDetectionDisabled:a2];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

void sub_100047C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100047C58(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 productID];
  if (result == 8221)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100048704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100048734(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v26 = a2;
  id v7 = a3;
  if (dword_1002610B8 <= 50 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    unsigned int v8 = "yes";
    if ([v7 inEar]) {
      id v9 = "yes";
    }
    else {
      id v9 = "no";
    }
    if (![v7 inEarDisabled]) {
      unsigned int v8 = "no";
    }
    id v10 = [*(id *)(*(void *)(a1 + 32) + 1168) count];
    unsigned int v11 = [v7 routingAction];
    if (v11 > 5) {
      id v12 = "?";
    }
    else {
      id v12 = off_100234488[v11];
    }
    id v24 = v10;
    id v25 = v12;
    CFStringRef v22 = v9;
    int v23 = v8;
    id v21 = v26;
    LogPrintF();
  }
  if (objc_msgSend(v7, "inEarDisabled", v21, v22, v23, v24, v25))
  {
    BOOL v13 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v26];
    uint64_t v14 = [v13 deviceAddress];
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }
  if ([v7 inEar])
  {
    id v17 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:v26];
    uint64_t v18 = [v17 deviceAddress];
    uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
    int v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    if ([v7 routingAction] == 1 || objc_msgSend(v7, "routingAction") == 2) {
      *a4 = 1;
    }
  }
}

void sub_100048914(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v17 = a2;
  id v7 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "_bluetoothProductIDNoEarDetect:", objc_msgSend(v7, "productID")) & 1) == 0
    && [v7 primaryPlacement] == 1
    && [v7 secondaryPlacement] == 1)
  {
    unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 264) objectForKeyedSubscript:v17];
    if ([v8 mode] == 2)
    {
      unsigned __int8 v9 = [v7 deviceFlags];

      if (v9)
      {
        id v10 = [v7 btAddressData];
        uint64_t v11 = CUPrintNSDataAddress();
        uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
        BOOL v13 = *(void **)(v12 + 40);
        *(void *)(v12 + 40) = v11;

        uint64_t v14 = [v7 name];
        uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
        id v16 = *(void **)(v15 + 40);
        *(void *)(v15 + 40) = v14;

        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v7 productID];
        *a4 = 1;
      }
    }
    else
    {
    }
  }
}

void sub_100048A60(uint64_t a1)
{
  uint64_t v2 = +[AVSystemController sharedAVSystemController];
  uint64_t v3 = [v2 attributeForKey:AVSystemController_PlayingSessionsDescriptionAttribute];

  *(unsigned char *)(*(void *)(a1 + 32) + 56) = [v3 count] != 0;
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100048BAC;
  block[3] = &unk_100233BF0;
  long long v4 = *(_OWORD *)(a1 + 48);
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 312);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = v4;
  dispatch_async(v5, block);
}

void sub_100048BAC(void *a1)
{
  if ((int)[*(id *)(a1[4] + 160) callCountIncomingUnconnected] > 0
    || (uint64_t v6 = a1[4], !*(unsigned char *)(v6 + 56))
    && ((int)[*(id *)(v6 + 160) activeCallCount] < 1
     || ([*(id *)(a1[4] + 1168) objectForKeyedSubscript:*(void *)(*(void *)(a1[5] + 8) + 40)],
         long long v7 = objc_claimAutoreleasedReturnValue(),
         unsigned __int8 v8 = [v7 routed],
         v7,
         (v8 & 1) == 0)))
  {
    uint64_t v2 = *(void *)(*(void *)(a1[6] + 8) + 40);
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = *(void *)(*(void *)(a1[5] + 8) + 40);
    uint64_t v5 = *(unsigned int *)(*(void *)(a1[7] + 8) + 24);
    [v3 _smartRoutingShowBanner:1 withDevice:v2 andDeviceAddress:v4 andProductID:v5 andCentralContentItemTxt:@"Connected" andTimeout:0 andDeviceType:6.0];
  }
}

void sub_100048D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100048D84(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v14 = a3;
  uint64_t v6 = [v14 bleDevice];
  long long v7 = [v6 advertisementFields];

  unsigned __int8 v8 = CFDictionaryGetCFDataOfLength();
  if (v8)
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    unsigned __int8 v9 = (char *)[v8 bytes];
    id v10 = (unsigned __int16 *)[*(id *)(a1 + 32) bytes];
    if (*v10 == *(unsigned __int16 *)(v9 + 3) && *((unsigned __int8 *)v10 + 2) == v9[5])
    {
      uint64_t v12 = [v14 model];
      unsigned int v13 = [v12 hasPrefix:@"Watch"];

      if (v13)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        *a4 = 1;
      }
    }
  }
}

id sub_1000496D0(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[109])
  {
    unsigned int v3 = [v2 isInAnyTipi];
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 1184) magnetConnected];
      uint64_t v5 = "no";
      if (v4) {
        uint64_t v6 = "yes";
      }
      else {
        uint64_t v6 = "no";
      }
      if (v3) {
        long long v7 = "yes";
      }
      else {
        long long v7 = "no";
      }
      if (*(unsigned char *)(*(void *)(a1 + 32) + 1241)) {
        uint64_t v5 = "yes";
      }
      unsigned int v13 = v7;
      id v14 = v5;
      uint64_t v12 = v6;
      LogPrintF();
    }
    unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 1184) magnetConnected:v12, v13, v14] ^ 1 | v3;
    uint64_t v9 = *(void *)(a1 + 32);
    if ((v8 & 1) == 0 && !*(unsigned char *)(v9 + 1241))
    {
      id v10 = *(void **)(v9 + 1168);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10004989C;
      v15[3] = &unk_100233650;
      v15[4] = v9;
      [v10 enumerateKeysAndObjectsUsingBlock:v15];
      uint64_t v9 = *(void *)(a1 + 32);
    }
    return [(id)v9 _cancelTriangleRecoveryTimer];
  }
  else
  {
    return _[v2 _nearbyDeviceInfoCheck];
  }
}

void sub_10004989C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v8 = [v5 otherTipiDeviceBTAddress];
  [*(id *)(a1 + 32) _updateNearbyDeviceState:v6 withAddress:v8 withEasyPairing:1 withState:3];

  if (*(unsigned char *)(*(void *)(a1 + 32) + 681)) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 2;
  }
  [v5 _setRoutingAction:v7];

  [*(id *)(a1 + 32) _postNotification:"com.apple.BluetoothServices.AudioRoutingChanged"];
}

void sub_100049A94(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100049AAC(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v9 = [a3 model];
  id v6 = [v9 hasPrefix:@"Watch"];
  uint64_t v7 = v9;
  if (v6)
  {
    if (dword_1002610B8 <= 30)
    {
      if (dword_1002610B8 != -1 || (id v6 = (id)_LogCategory_Initialize(), v6)) {
        id v6 = (id)LogPrintF();
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
    uint64_t v7 = v9;
  }

  return _objc_release_x1(v6, v7);
}

void sub_100049B74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [v5 otherTipiDeviceBTAddress];
  [*(id *)(a1 + 32) _updateNearbyDeviceState:v6 withAddress:v7 withEasyPairing:1 withState:3];

  [v5 _setRoutingAction:2];
  [*(id *)(a1 + 32) _postNotification:"com.apple.BluetoothServices.AudioRoutingChanged"];
}

void sub_10004B2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B330(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 384);
    if (v2)
    {
      id v5 = v2;
      dispatch_source_cancel(v5);
      uint64_t v3 = *(void *)(a1 + 32);
      unsigned int v4 = *(void **)(v3 + 384);
      *(void *)(v3 + 384) = 0;
    }
  }
}

void sub_10004C7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004C7EC(uint64_t a1)
{
  if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  ++*(_DWORD *)(*(void *)(a1 + 32) + 120);
  [*(id *)(a1 + 32) _setHighPriorityTag:*(void *)(a1 + 40) withHighPriority:0];
  id v27 = objc_alloc_init((Class)BTAudioRoutingResponse);
  uint64_t v2 = [*(id *)(a1 + 48) objectForKey:@"audioRoutingRequestID"];
  [v27 setClientID:[v2 unsignedIntValue]];

  uint64_t v3 = [*(id *)(a1 + 48) objectForKey:@"audioRoutingScore"];
  id v4 = [v3 integerValue];

  id v5 = [*(id *)(*(void *)(a1 + 32) + 200) objectForKeyedSubscript:*(void *)(a1 + 40)];
  unsigned int v6 = [v5 audioStreamState];

  unsigned int v7 = [*(id *)(a1 + 32) _arbitrationTimeout:*(void *)(a1 + 40) withScore:v4];
  if (v7) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = 3;
  }
  [v27 setAction:v8];
  if (v7) {
    uint64_t v9 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v9 = 0;
  }
  [v27 setDeviceAddress:v9];
  unsigned int v10 = [v27 action];
  if (v10 > 5) {
    uint64_t v11 = "?";
  }
  else {
    uint64_t v11 = off_100234488[v10];
  }
  uint64_t v12 = +[NSString stringWithUTF8String:v11];
  unsigned int v13 = +[NSString stringWithFormat:@"Relay message timeout, current Audio Session is %ld, tell MX to %@", v4, v12];
  [v27 setReason:v13];

  id v14 = [*(id *)(*(void *)(a1 + 32) + 1168) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [v14 _setRoutingAction:[v27 action]];

  if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    unsigned int v15 = [v27 action];
    if (v15 > 5) {
      id v16 = "?";
    }
    else {
      id v16 = off_100234488[v15];
    }
    if (v6 > 3) {
      id v17 = "?";
    }
    else {
      id v17 = off_100234420[v6];
    }
    id v25 = v16;
    id v26 = v17;
    id v24 = v4;
    LogPrintF();
  }
  uint64_t v18 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) audioRoutingResponse:v24, v25, v26];

  if (v18)
  {
    uint64_t v19 = *(void **)(a1 + 32);
    int v20 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) audioRoutingResponse];
    [v19 _respondRoutingRequest:v27 withResponseHandler:v20 wxAddress:*(void *)(a1 + 40)];
  }
  id v21 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) conduitMessageTimer];
  CFStringRef v22 = v21;
  if (v21) {
    dispatch_source_cancel(v21);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setConduitMessageTimer:0];
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setConduitMessageTicks:0];
  if ([*(id *)(*(void *)(a1 + 32) + 1224) hijackRelaySent])
  {
    if ([v27 action]) {
      CFStringRef v23 = @"Timeout SR answered";
    }
    else {
      CFStringRef v23 = @"Timeout";
    }
    [*(id *)(*(void *)(a1 + 32) + 1224) setHijackAnswer:v23];
    [*(id *)(*(void *)(a1 + 32) + 1224) setHijackRoundTripTime:(unint64_t)(*(double *)(a1 + 64) * 1000.0)];
    [*(id *)(*(void *)(a1 + 32) + 1224) setHijackContinuousTimeoutCount:*(char *)[*(id *)(*(void *)(a1 + 32) + 1224) hijackContinuousTimeoutCount] + 1];
    [*(id *)(a1 + 32) submitHijackMetric:*(void *)(a1 + 40) withV1:1];
    [*(id *)(a1 + 32) _startRouteCheckTimer:*(void *)(a1 + 40) andType:5];
    [*(id *)(a1 + 32) _startRouteCheckTimer:*(void *)(a1 + 40) andType:6];
    [*(id *)(a1 + 32) submitRouteActivityMetric:*(void *)(a1 + 40) activity:@"Hijack_V1_RemoteTimeout"];
  }
}

uint64_t sub_10004CD70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v11 = v3;
    if (dword_1002610B8 <= 90)
    {
      if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v11, v3))
      {
        id v10 = v4;
        id v3 = (id)LogPrintF();
        id v4 = v11;
      }
    }
    id v5 = *(void **)(a1 + 32);
    if (v5)
    {
      id v6 = v5;
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
      [v7 setObject:v6 forKey:@"audioRoutingRequestID"];
      if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        id v10 = v11;
        LogPrintF();
      }
      uint64_t v8 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 3, v10);
      [v7 setObject:v8 forKey:@"audioRoutingHijackAnswer"];

      [*(id *)(a1 + 40) _relayConduitMessageSend:1 withOptions:v7 andWxAddress:*(void *)(a1 + 48) andOtherAddress:0];
      id v4 = v11;
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_10004D254(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 otherTipiDeviceBTAddress];

  if (v5 && ([*(id *)(*(void *)(a1 + 32) + 176) isEqualToString:v6] & 1) == 0) {
    [*(id *)(a1 + 32) _sendAudioCategory:v6 withAudioCategory:*(void *)(*(void *)(a1 + 32) + 496)];
  }
}

void sub_10004D6B8(uint64_t a1, void *a2, void *a3)
{
  id v21 = a2;
  id v5 = a3;
  id v6 = [v5 otherTipiDeviceBTAddress];

  if (v6)
  {
    id v7 = [*(id *)(a1 + 32) _myBluetoothAddressString];
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    [v8 setObject:v7 forKeyedSubscript:@"btAddress"];
    [v8 setObject:*(void *)(*(void *)(a1 + 32) + 624) forKeyedSubscript:@"btName"];
    uint64_t v9 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 1020)];
    [v8 setObject:v9 forKeyedSubscript:@"nearbyAudioScore"];

    id v10 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
    [v8 setObject:v10 forKeyedSubscript:@"idleTime"];

    if (*(unsigned char *)(a1 + 48)) {
      [v8 setObject:&__kCFBooleanTrue forKeyedSubscript:@"newTipi"];
    }
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v11 = [v5 otherTipiDeviceBTAddress];
      uint64_t v12 = *(int *)(*(void *)(a1 + 32) + 1020);
      if (v12 > 0xF) {
        unsigned int v13 = "?";
      }
      else {
        unsigned int v13 = off_1002342D0[v12];
      }
      if (*(unsigned char *)(a1 + 48)) {
        id v14 = "yes";
      }
      else {
        id v14 = "no";
      }
      uint64_t v19 = v13;
      int v20 = v14;
      id v17 = v21;
      uint64_t v18 = v11;
      LogPrintF();
    }
    unsigned int v15 = *(void **)(a1 + 32);
    id v16 = [v5 otherTipiDeviceBTAddress:v17, v18, v19, v20];
    [v15 _relayConduitMessageSend:1 withOptions:v8 andWxAddress:v21 andOtherAddress:v16];
  }
}

void sub_10004DA34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _getWxFWVersion:v3];
  id v5 = (void *)v4;
  id v6 = &stru_10023D730;
  if (v4) {
    id v6 = (__CFString *)v4;
  }
  id v7 = v6;

  if ([@"5A274" compare:v7 options:64] == (id)-1)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = *(_DWORD *)(v8 + 1020);
    id v10 = [*(id *)(v8 + 264) objectForKeyedSubscript:v3];
    unsigned int v11 = [v10 mode];

    if (v11 == 1) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 8;
    }
    id v13 = +[NSString stringWithFormat:@"%02x0002%02x", 2, v12];
    [v13 UTF8String];
    id v14 = NSDataWithHex();
    id v15 = objc_alloc_init((Class)CBDevice);
    [v15 setIdentifier:v3];
    id v16 = *(void **)(a1 + 40);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10004DBF4;
    v17[3] = &unk_100233C90;
    int v20 = v12;
    char v21 = v11;
    id v18 = v3;
    uint64_t v19 = v14;
    [v16 sendSmartRoutingInformation:v14 device:v15 completionHandler:v17];
  }
}

uint64_t sub_10004DBF4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (dword_1002610B8 <= 30)
  {
    id v5 = v2;
    if (dword_1002610B8 != -1 || (v2 = (id)_LogCategory_Initialize(), id v3 = v5, v2))
    {
      id v2 = (id)LogPrintF();
      id v3 = v5;
    }
  }

  return _objc_release_x1(v2, v3);
}

uint64_t sub_10004DDCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_1002610B8 <= 90)
    {
      id v6 = v3;
      if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v6, v3))
      {
        id v3 = (id)LogPrintF();
        id v4 = v6;
      }
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 392) = 1;
  }

  return _objc_release_x1(v3, v4);
}

void sub_10004DF98(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1002610B8 <= 90)
    {
      id v4 = v2;
      if (dword_1002610B8 != -1 || (v2 = (NSError *)_LogCategory_Initialize(), id v3 = v4, v2))
      {
        id v2 = (NSError *)LogPrintF();
        id v3 = v4;
      }
    }
  }

  _objc_release_x1(v2, v3);
}

uint64_t sub_10004E120(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_1002610B8 <= 90)
    {
      id v6 = v3;
      if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v6, v3))
      {
        id v3 = (id)LogPrintF();
        id v4 = v6;
      }
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 392) = 1;
  }

  return _objc_release_x1(v3, v4);
}

void sub_10004E340(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1002610B8 <= 90)
    {
      id v4 = v2;
      if (dword_1002610B8 != -1 || (v2 = (NSError *)_LogCategory_Initialize(), id v3 = v4, v2))
      {
        id v2 = (NSError *)LogPrintF();
        id v3 = v4;
      }
    }
  }

  _objc_release_x1(v2, v3);
}

void sub_10004EA20(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = [v2 userInfo];
    int Int64Ranged = CFDictionaryGetInt64Ranged();

    uint64_t v5 = *(void *)(a1 + 40);
    if (Int64Ranged != *(void *)(v5 + 1280))
    {
      if (dword_1002610B8 <= 30)
      {
        if (dword_1002610B8 != -1 || (v6 = _LogCategory_Initialize(), uint64_t v5 = *(void *)(a1 + 40), v6))
        {
          LogPrintF();
          uint64_t v5 = *(void *)(a1 + 40);
        }
      }
      *(void *)(v5 + 1280) = Int64Ranged;
      id v7 = *(void **)(a1 + 40);
      [v7 _prefsChanged];
    }
  }
}

void sub_10004EF10(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  [*(id *)(a1 + 32) handleActivityScoreUpdate:12];
  id v2 = *(void **)(*(void *)(a1 + 32) + 424);
  if (v2)
  {
    uint64_t v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 424);
    *(void *)(v3 + 424) = 0;
  }
}

void sub_10004F270(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  id v2 = *(int **)(a1 + 32);
  if (*(void *)(v3 + 8) == 1 || v2[255] >= 6)
  {
    [v2 _proactivelyTakeOwnership];
  }
  else if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
  id v4 = *(void **)(*(void *)(a1 + 32) + 384);
  if (v4)
  {
    id v7 = v4;
    dispatch_source_cancel(v7);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(void **)(v5 + 384);
    *(void *)(v5 + 384) = 0;
  }
}

void sub_10004F47C(uint64_t a1)
{
  [*(id *)(a1 + 32) _handlePhoneOwnershipTriangleTimer];
  id v2 = *(void **)(*(void *)(a1 + 32) + 696);
  if (v2)
  {
    uint64_t v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 696);
    *(void *)(v3 + 696) = 0;
  }
}

id sub_10004F6C0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateCurrentAudioSnapshot];
}

void sub_10004F8F8(uint64_t a1)
{
  [*(id *)(a1 + 32) _submitManualRouteDetectionMetric:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 1224) setManualRouteDestination:@"BT"];
  [*(id *)(a1 + 32) submitRouteActivityMetric:*(void *)(a1 + 40) activity:@"Manual_Route_BT"];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 1224) manualRouteChangeDetectionTimer];
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_source_cancel(v2);
    id v2 = v3;
  }
}

void sub_10004FA74(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 712);
  if (v1)
  {
    uint64_t v5 = v1;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 712);
    *(void *)(v3 + 712) = 0;
  }
}

void sub_10004FC08(uint64_t a1)
{
  [*(id *)(a1 + 32) _submitRouteChangeDetectionMetric:*(void *)(a1 + 40) andAnswer:*(void *)(a1 + 48)];
  id v2 = *(void **)(*(void *)(a1 + 32) + 952);
  if (v2)
  {
    uint64_t v5 = v2;
    dispatch_source_cancel(v5);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 952);
    *(void *)(v3 + 952) = 0;
  }
}

id sub_10004FFD4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2 == 11)
  {
    [*(id *)(a1 + 32) _handleProactiveRoutingRouteCheck:*(void *)(a1 + 40)];
    uint64_t v2 = *(unsigned int *)(a1 + 48);
  }
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);

  return _[v3 _submitRouteCheckMetric:v4 andType:v2];
}

void sub_100050584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1000505CC(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v36 = a3;
  int v6 = [v36 bleDevice];
  id v7 = [v6 advertisementFields];

  CFDictionaryGetCFDataOfLength();
  id v8 = objc_claimAutoreleasedReturnValue();
  unsigned int v9 = (char *)[v8 bytes];
  if (v8)
  {
    id v33 = [v8 bytes];
    id v10 = NSPrintF();
  }
  else
  {
    id v10 = 0;
  }
  unsigned int v11 = *(void **)(a1 + 32);
  uint64_t v12 = [v36 idsIdentifier:v33];
  id v13 = [v11 _nearbyMacAddressTranslate:v12];

  id v14 = v13;
  id v15 = (char *)[v14 bytes];
  if (v14)
  {
    id v34 = [v14 bytes];
    id v16 = NSPrintF();
  }
  else
  {
    id v16 = 0;
  }
  id v17 = &unk_100261000;
  if (dword_1002610B8 <= 30)
  {
    if (dword_1002610B8 != -1 || _LogCategory_Initialize())
    {
      [v36 idsIdentifier:v34];
      uint64_t v35 = v10;
      id v18 = v7;
      v20 = uint64_t v19 = a4;
      char v21 = [v36 model];
      [v21 containsString:@"Mac"];
      LogPrintF();

      id v17 = (_DWORD *)&unk_100261000;
      a4 = v19;
      id v7 = v18;
      id v10 = v35;
    }
    int v22 = v17[46];
    if (v22 <= 30 && (v22 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
  if (v8
    && ((CFStringRef v23 = (unsigned __int16 *)[*(id *)(a1 + 40) bytes],
         *v23 == *(unsigned __int16 *)(v9 + 3))
      ? (BOOL v24 = *((unsigned __int8 *)v23 + 2) == v9[5])
      : (BOOL v24 = 0),
        id v25 = v10,
        v24)
    || v14
    && ((id v26 = (unsigned __int16 *)[*(id *)(a1 + 40) bytes],
         *v26 == *(unsigned __int16 *)(v15 + 3))
      ? (BOOL v27 = *((unsigned __int8 *)v26 + 2) == v15[5])
      : (BOOL v27 = 0),
        id v25 = v16,
        v27))
  {
    unsigned int v28 = v17;
    uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8);
    id v30 = v25;
    uint64_t v31 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v30;
    id v17 = v28;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    int v32 = v17[46];
    if (v32 <= 30 && (v32 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *a4 = 1;
  }
}

void sub_100051EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100051EEC(uint64_t a1, void *a2, void *a3)
{
  id v24 = a2;
  id v6 = a3;
  if (([v6 isTipiHealingV2Eligible] & 1) == 0)
  {
    id v7 = [v6 identifier];
    if (!v7)
    {
LABEL_29:

      goto LABEL_30;
    }
    id v8 = [*(id *)(*(void *)(a1 + 32) + 1384) objectForKeyedSubscript:v7];
    uint64_t v9 = [v8 bleDevice];
    id v10 = [v9 advertisementFields];

    unsigned int Int64Ranged = CFDictionaryGetInt64Ranged();
    uint64_t v12 = CFDictionaryGetCFDataOfLength();
    char v13 = CFDictionaryGetInt64Ranged();
    uint64_t v14 = [*(id *)(a1 + 32) _getWxFWVersion:v24];
    id v15 = (void *)v14;
    if (v13) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16
      && [@"5A187" compare:v14 options:64] == (id)-1
      && ([*(id *)(a1 + 32) _isMyAddress:v12] & 1) == 0)
    {
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      [v6 setIsTipiHealingV2Eligible:1];
      goto LABEL_28;
    }
    id v17 = &unk_100261000;
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      [v6 inEar];
      CFStringRef v23 = [v6 otherTipiDeviceBTAddress];
      LogPrintF();

      id v17 = (_DWORD *)&unk_100261000;
    }
    if (Int64Ranged >= 2)
    {
      id v18 = [v6 otherTipiDeviceBTAddress];

      if (!v18)
      {
        uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v21 = *(void *)(v19 + 40);
        int v20 = (id *)(v19 + 40);
        if (!v21)
        {
LABEL_27:
          objc_storeStrong(v20, a2);
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v12);
          goto LABEL_28;
        }
        if ([v6 inEar])
        {
          int v22 = v17[46];
          if (v22 <= 30 && (v22 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
          int v20 = (id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          goto LABEL_27;
        }
      }
    }
LABEL_28:

    goto LABEL_29;
  }
LABEL_30:
}

uint64_t sub_1000532EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (dword_1002610B8 <= 90)
  {
    id v6 = v3;
    if (dword_1002610B8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v6, v3))
    {
      id v3 = (id)LogPrintF();
      id v4 = v6;
    }
  }
  if (!v4)
  {
    id v3 = [*(id *)(a1 + 48) setTipitableUpdated:1];
    id v4 = 0;
  }

  return _objc_release_x1(v3, v4);
}

uint64_t sub_1000534B4(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_1002610B8 <= 90)
  {
    if (dword_1002610B8 != -1 || (id result = _LogCategory_Initialize(), result)) {
      id result = LogPrintF();
    }
  }
  *(unsigned char *)(*(void *)(v1 + 32) + 1241) = 0;
  return result;
}

void sub_100053680(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_1002610B8 <= 30)
  {
    id v4 = v2;
    if (dword_1002610B8 != -1 || (v2 = (NSError *)_LogCategory_Initialize(), id v3 = v4, v2))
    {
      uint64_t v2 = (NSError *)LogPrintF();
      id v3 = v4;
    }
  }

  _objc_release_x1(v2, v3);
}

void sub_100053994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000539AC(uint64_t a1)
{
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  id v2 = [*(id *)(a1 + 32) _arbitrationTimeout:*(void *)(a1 + 40) withScore:*(unsigned int *)(a1 + 56)];
  if (v2) {
    id v3 = @"Tipi Healing not complete, allowing device to hijack route";
  }
  else {
    id v3 = @"Rejected, buds stream state blocks hijack";
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v3);
  id v4 = *(void **)(*(void *)(a1 + 32) + 1264);
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_source_cancel(v5);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 1264);
    *(void *)(v6 + 1264) = 0;
  }
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);

  return [v8 _mediaRouteHijackResponseHandlerFor:v9 allowedToHijack:v2 withReason:v10];
}

void sub_100053FC8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v5 = [a3 otherTipiDeviceBTAddress];

  if (v5 && ([*(id *)(*(void *)(a1 + 32) + 176) isEqualToString:v6] & 1) == 0) {
    [*(id *)(a1 + 32) _sendAudioCategory:v6 withAudioCategory:*(void *)(a1 + 40)];
  }
}

void *sub_100054A84(void *result)
{
  uint64_t v1 = result[4];
  if (*(uint64_t *)(v1 + 1280) < 3)
  {
    if (dword_1002610B8 > 30) {
      return result;
    }
    if (dword_1002610B8 == -1)
    {
      id result = (void *)_LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
    goto LABEL_8;
  }
  id v2 = result;
  id result = [*(id *)(v1 + 200) count];
  if (result)
  {
    if (dword_1002610B8 > 30) {
      return result;
    }
    if (dword_1002610B8 == -1)
    {
      id result = (void *)_LogCategory_Initialize();
      if (!result) {
        return result;
      }
    }
LABEL_8:
    return (void *)LogPrintF();
  }
  if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(v2[4] + 1364) = 1;
  [(id)v2[4] _update];
  *(unsigned char *)(v2[4] + 32) = 11;
  [(id)v2[4] _nearbyInfoActivityChanged];
  id v3 = (void *)v2[4];

  return _[v3 _watchRecoveryStartTimer];
}

id sub_100054D78(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(unsigned char *)(v1 + 1241))
  {
    id v2 = result;
    *(unsigned char *)(v1 + 1364) = 0;
    *(unsigned char *)(*((void *)result + 4) + 32) = 3;
    [*((id *)result + 4) _nearbyInfoActivityChanged];
    id v3 = (void *)v2[4];
    return [v3 _update];
  }
  return result;
}

void sub_100056968(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v7 = v3;
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v7;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 32) + 48) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(&STACK[0x290], 8) = 0;

    id v3 = v7;
  }
}

id sub_100056A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _pipeReceivedRouteRequest:a2 options:a3 responseHandler:a4];
}

void sub_10005733C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100057380(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v6 = a2;
    uint64_t v3 = NSErrorF();
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 32);
    *(void *)(v4 + 32) = v3;

    [*(id *)(a1 + 32) _pipeConnectionComplete:v6 andWxHeadset:*(void *)(a1 + 40) isSender:1];
  }
}

void sub_100057410(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v21 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 32), a4);
    uint64_t v9 = +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon];
    [v9 _setOtherTipiDeviceBTAddress:0 andName:0 sourceVersion:0 withResult:*(void *)(*(void *)(a1 + 40) + 32)];

    [*(id *)(a1 + 40) _pipeConnectionComplete:*(void *)(*(void *)(a1 + 40) + 32) andWxHeadset:*(void *)(a1 + 48) isSender:1];
  }
  else
  {
    if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v19 = *(void **)(a1 + 32);
      id v20 = v21;
      LogPrintF();
    }
    mach_absolute_time();
    uint64_t v10 = UpTicksToMilliseconds();
    unsigned int v11 = +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon];
    [v11 _setPipeMessageStats:v10];

    LODWORD(v10) = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    CFStringGetTypeID();
    if (v10)
    {
      uint64_t v12 = CFDictionaryGetTypedValue();
      CFStringGetTypeID();
      char v13 = CFDictionaryGetTypedValue();
      uint64_t v14 = [v21 objectForKey:@"version"];
      if (v12 && v13)
      {
        id v15 = +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon];
        unsigned int v16 = [v15 _isOnDemandConnectInProgress];

        if (v16)
        {
          if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
            LogPrintF();
          }
        }
        else
        {
          id v17 = +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon];
          [v17 _setOtherTipiDeviceBTAddress:v12 andName:v13 sourceVersion:v14 withResult:0];

          [v14 doubleValue];
          if (v18 < 1.2 || !v14)
          {
            if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
            {
              LogPrintF();
              [*(id *)(a1 + 40) _pipeConnectionComplete:0 andWxHeadset:*(void *)(a1 + 48) isSender:1 v14 v20];
            }
            else
            {
              [*(id *)(a1 + 40) _pipeConnectionComplete:0 andWxHeadset:*(void *)(a1 + 48) isSender:1 v19, v20];
            }
          }
        }
      }
    }
    else
    {
      uint64_t v12 = CFDictionaryGetTypedValue();
      char v13 = [v21 objectForKey:@"version"];
      if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v19 = v13;
        id v20 = v12;
        LogPrintF();
      }
      [*(id *)(a1 + 40) _pipeConnectionComplete:0 andWxHeadset:*(void *)(a1 + 48) isSender:1 v19, v20];
    }
  }
}

void sub_100058450(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Unwind_Resume(a1);
}

void *sub_1000584C0(void *result)
{
  uint64_t v1 = result[8];
  if (*(void *)(*(void *)(v1 + 8) + 40))
  {
    uint64_t v2 = result;
    if (dword_1002610B8 <= 90)
    {
      if (dword_1002610B8 != -1 || (v3 = _LogCategory_Initialize(), uint64_t v1 = v2[8], v3))
      {
        LogPrintF();
        uint64_t v1 = v2[8];
      }
    }
    uint64_t v4 = (void *)v2[6];
    uint64_t v5 = v2[7];
    uint64_t v6 = *(void *)(*(void *)(v1 + 8) + 40);
    return [v4 _pipeRequestResponse:v5 error:v6];
  }
  return result;
}

void sub_100058594(uint64_t a1)
{
  if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = NSErrorF();
  [v2 _pipeRequestResponse:v3 error:v4];

  uint64_t v5 = *(void **)(a1 + 64);
  id v8 = [*(id *)(a1 + 72) btAddressData];
  uint64_t v6 = CUPrintNSDataAddress();
  id v7 = NSErrorF();
  [v5 _updateOtherTipiDevice:v6 otherAddress:0 otherName:0 otherVersion:0 withResult:v7];
}

void sub_1000586D4(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (v10)
  {
    if (dword_1002610B8 <= 90 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      id v9 = v10;
      uint64_t v7 = *(void *)(a1 + 32);
      LogPrintF();
    }
    uint64_t v3 = *(void **)(a1 + 48);
    uint64_t v4 = [*(id *)(a1 + 56) btAddressData:v7, v8, v9];
    uint64_t v5 = CUPrintNSDataAddress();
    uint64_t v6 = NSErrorF();
    [v3 _updateOtherTipiDevice:v5 otherAddress:0 otherName:0 otherVersion:0 withResult:v6];

    [*(id *)(a1 + 64) _pipeRequestResponse:*(void *)(a1 + 72) error:v10];
  }
  else if (dword_1002610B8 <= 30 && (dword_1002610B8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_1000591B8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) block];

  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(NSObject **)(v3 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100059310;
    v8[3] = &unk_100232710;
    v8[4] = v3;
    dispatch_async(v4, v8);
  }
  uint64_t v5 = +[NSNotificationCenter defaultCenter];
  CFStringRef v9 = @"IsNetworkAvailable";
  uint64_t v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) cachedIsNetworkUp]);
  id v10 = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  [v5 postNotificationName:@"com.apple.bluetooth.services.BTNetworkMonitor.networkChanged" object:0 userInfo:v7];
}

void sub_100059310(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) block];
  v2[2](v2, [*(id *)(a1 + 32) cachedIsNetworkUp]);
}

void sub_100059444(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) evaluator];
  uint64_t v3 = *(void **)(a1 + 40);

  if (v2 == v3)
  {
    id v4 = [*(id *)(a1 + 32) isNetworkUp];
    uint64_t v5 = *(void **)(a1 + 32);
    _[v5 setCachedIsNetworkUp:v4];
  }
}

void sub_1000595A0(id a1)
{
  uint64_t v1 = objc_alloc_init(AAContextManager);
  uint64_t v2 = qword_100263EA0;
  qword_100263EA0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100059700(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 40) invalidate];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  [*(id *)(*(void *)(a1 + 32) + 16) invalidate];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0;

  [*(id *)(*(void *)(a1 + 32) + 32) removeAllObjects];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 32);
  *(void *)(v6 + 32) = 0;
}

void *sub_100059A7C(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[5] == *(void *)(a1 + 40)) {
    return [result _wxDeviceFound:a2];
  }
  return result;
}

void *sub_100059AA0(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[5] == *(void *)(a1 + 40)) {
    return [result _wxDeviceLost:a2];
  }
  return result;
}

void *sub_100059AC4(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (result[5] == *(void *)(a1 + 40)) {
    return [result _wxDeviceFound:a2];
  }
  return result;
}

void sub_100059AE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3 == v2)
  {
    *(void *)(v1 + 40) = 0;
  }
}

void sub_100059B04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(a1 + 32) + 40) == *(void *)(a1 + 40))
  {
    id v7 = v3;
    if (dword_100261128 <= 90 && (dword_100261128 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v7;
      LogPrintF();
    }
    [*(id *)(a1 + 40) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;

    id v3 = v7;
  }
}

void sub_10005A0B0(id a1)
{
  if (dword_100261128 <= 90 && (dword_100261128 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_10005A124(id a1)
{
  if (dword_100261128 <= 90 && (dword_100261128 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF();
  }
}

void sub_10005A198(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if (dword_100261128 <= 30)
  {
    if (dword_100261128 != -1 || (v7 = _LogCategory_Initialize(), id v5 = v10, v7))
    {
      if (a2 > 2) {
        id v6 = "?";
      }
      else {
        id v6 = off_1002345A0[(int)a2];
      }
      id v8 = v5;
      CFStringRef v9 = v6;
      LogPrintF();
      id v5 = v10;
    }
  }
  [*(id *)(a1 + 32) _contextSignalUpdated:v5 withFusedState:a2, v8, v9];
}

void sub_10005A26C(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (v8)
  {
    if (dword_100261128 <= 90 && (dword_100261128 != -1 || _LogCategory_Initialize()))
    {
      id v7 = v8;
      LogPrintF();
    }
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      (*(void (**)(uint64_t, id))(v4 + 16))(v4, v8);
    }
    [*(id *)(*(void *)(a1 + 32) + 16) invalidate:v7];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 16);
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
    if (dword_100261128 <= 30 && (dword_100261128 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
  }
}

uint64_t sub_10005A4E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    id v6 = 0;
    id v3 = [*(id *)(a1 + 32) setContextChangeFlags:[*(id *)(a1 + 40) _generateContextChangedFlags:spl:*(unsigned __int8 *)(a1 + 48) spl:*(unsigned __int8 *)(a1 + 49)]];
    goto LABEL_6;
  }
  if (dword_100261128 <= 90)
  {
    id v6 = v3;
    if (dword_100261128 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v6, v3))
    {
      id v3 = (id)LogPrintF();
LABEL_6:
      id v4 = v6;
    }
  }

  return _objc_release_x1(v3, v4);
}

id sub_10005A9A0(uint64_t a1)
{
  if (dword_100261198 <= 30 && (dword_100261198 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _sfServiceStart];
}

void *sub_10005AA98(void *result)
{
  if (!*(unsigned char *)(result[4] + 24))
  {
    uint64_t v1 = result;
    if (dword_100261198 <= 30 && (dword_100261198 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *(unsigned char *)(v1[4] + 24) = 1;
    uint64_t v2 = (void *)v1[4];
    return [v2 _invalidate];
  }
  return result;
}

void *sub_10005AE00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[6]) {
    return _[result _handleSessionStarted:a2];
  }
  return result;
}

void *sub_10005AE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v4 == result[6]) {
    return [result _handleSessionEnded:a2 error:a3];
  }
  return result;
}

uint64_t sub_10005AE3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 48))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_100261198 <= 90 && (dword_100261198 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 48) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 48);
      *(void *)(v5 + 4_Block_object_dispose(&STACK[0x290], 8) = 0;

      goto LABEL_11;
    }
    if (dword_100261198 <= 30)
    {
      id v9 = 0;
      if (dword_100261198 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

id sub_10005B1C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleShareAudioRequest:responseHandler:];
}

void sub_10005B1C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 72));
  id v10 = v9;
  if (v9)
  {
    (*((void (**)(id, id, id, id))v9 + 2))(v9, v12, v7, v8);
  }
  else
  {
    if (dword_100261198 <= 90 && (dword_100261198 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    unsigned int v11 = BTErrorF();
    (*((void (**)(id, void *, void, void))v8 + 2))(v8, v11, 0, 0);
  }
}

void sub_10005B2F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 80));
  id v10 = v9;
  if (v9)
  {
    (*((void (**)(id, id, id, id))v9 + 2))(v9, v12, v7, v8);
  }
  else
  {
    if (dword_100261198 <= 90 && (dword_100261198 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    unsigned int v11 = BTErrorF();
    (*((void (**)(id, void *, void, void))v8 + 2))(v8, v11, 0, 0);
  }
}

void sub_10005B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005B88C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005B89C(uint64_t a1)
{
}

uint64_t sub_10005B8A4(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261198 <= 90 && (dword_100261198 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_10005BC14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 96))
  {
    id v5 = v3;
    if (v3 && dword_100261198 <= 90 && (dword_100261198 != -1 || _LogCategory_Initialize()))
    {
      id v4 = v5;
      LogPrintF();
    }
    [*(id *)(a1 + 48) setObject:*(void *)(*(void *)(a1 + 40) + 16) forKeyedSubscript:@"btAd"];
    if (dword_100261198 <= 30 && (dword_100261198 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56));
    id v3 = v5;
  }
}

unint64_t sub_10005BF80(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1 || (unint64_t)[v1 length] > 0x18) {
    goto LABEL_3;
  }
  id v5 = (const char *)[v2 UTF8String];
  uint64_t v10 = 0;
  __int16 v9 = 0;
  int v8 = 0;
  if (sscanf(v5, "%hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v8, (char *)&v8 + 1, (char *)&v8 + 2, (char *)&v8 + 3, &v9, (char *)&v9 + 1) == 6)
  {
    unint64_t v3 = ((unint64_t)v8 << 40) | ((unint64_t)BYTE1(v8) << 32) | ((unint64_t)BYTE2(v8) << 24) | ((unint64_t)HIBYTE(v8) << 16) | ((unint64_t)v9 << 8) | HIBYTE(v9);
    goto LABEL_4;
  }
  if (sscanf(v5, "%s %hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v10, &v8, (char *)&v8 + 1, (char *)&v8 + 2, (char *)&v8 + 3, &v9, (char *)&v9 + 1) == 7)
  {
    uint64_t v7 = v10 != 1818391888 || *(_DWORD *)((char *)&v10 + 3) != 6515052;
    unint64_t v3 = (v7 << 48) | ((unint64_t)v8 << 40) | ((unint64_t)BYTE1(v8) << 32) | ((unint64_t)BYTE2(v8) << 24) | ((unint64_t)HIBYTE(v8) << 16) | ((unint64_t)v9 << 8) | HIBYTE(v9);
  }
  else
  {
LABEL_3:
    unint64_t v3 = 0;
  }
LABEL_4:

  return v3;
}

void sub_10005C174(id a1)
{
  id v1 = objc_alloc_init(CBIDSManager);
  uint64_t v2 = qword_100263EB0;
  qword_100263EB0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10005C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005C394(uint64_t a1)
{
  uint64_t v2 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = +[BTSystemConfiguration isBuddyComplete];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "IDS Buddy State Callback : %i", (uint8_t *)v4, 8u);
  }

  if (+[BTSystemConfiguration isBuddyComplete])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained checkFirstUnlockForIDS];
  }
}

void sub_10005C648(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

id sub_10005C66C(uint64_t a1)
{
  return [*(id *)(a1 + 32) initializeIDS];
}

void sub_10005C674(uint64_t a1)
{
  uint64_t v2 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v7 = +[BTSystemConfiguration isFirstUnlocked];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "First Unlock Callback: %i", buf, 8u);
  }

  unint64_t v3 = [*(id *)(a1 + 32) cloudPairingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005C7B0;
  block[3] = &unk_100234688;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  dispatch_async(v3, block);

  objc_destroyWeak(&v5);
}

void sub_10005C7B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained initializeIDS];
}

void sub_10005CB54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [*(id *)(a1 + 32) cloudPairingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005CC30;
  block[3] = &unk_100232B98;
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v8;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);
}

void sub_10005CC30(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    unint64_t v3 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B567C(v2, v3, v4);
    }

    [*(id *)(a1 + 40) retryIDSSetup];
  }
  else
  {
    id v5 = [*(id *)(a1 + 48) objectForKey:@"kCheckInVersion"];
    id v6 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"kPublicAddress"];
    unsigned int v7 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"kCachedLEDevices"];
    uint64_t v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"kSupportsVirtualAddress"];
    [*(id *)(a1 + 40) setSupportsVirtualAddress:[v8 BOOLValue]];

    id v9 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = [*(id *)(a1 + 40) supportsVirtualAddress];
      *(_DWORD *)buf = 67109120;
      LODWORD(v44) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MUC - supportsVirtualAddress %d", buf, 8u);
    }

    if (v6)
    {
      [*(id *)(a1 + 40) setPublicAddress:v6];
      unsigned int v11 = sub_10006CA04("CloudPairing");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = [*(id *)(a1 + 40) publicAddress];
        *(_DWORD *)buf = 138477827;
        uint64_t v44 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received Public Address: %{private}@", buf, 0xCu);
      }
      unsigned int v13 = [v5 isEqual:&off_1002448F8];
      id v14 = sub_10006CA04("CloudPairing");
      id v15 = v14;
      if (v13)
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BTCP XPC Version match!- Starting IDS Service Setup", buf, 2u);
        }

        unsigned int v16 = +[NSMutableDictionary dictionary];
        [*(id *)(a1 + 40) setCPAddressMapping:v16];

        id v17 = +[CBPreferencesManager readUserPreference:@"AddressMapping"];

        if (v17)
        {
          double v18 = +[CBPreferencesManager readUserPreference:@"AddressMapping"];
          id v19 = [v18 mutableCopy];
          [*(id *)(a1 + 40) setCPAddressMapping:v19];
        }
        id v20 = [objc_alloc((Class)IDSService) initWithService:@"com.apple.private.alloy.icloudpairing"];
        [*(id *)(a1 + 40) setService:v20];

        id v21 = *(void **)(a1 + 40);
        int v22 = [v21 service];
        CFStringRef v23 = [v22 accounts];
        [v21 updateActiveAccount:v23];

        id v24 = [*(id *)(a1 + 40) service];
        id v25 = *(void **)(a1 + 40);
        id v26 = [v25 cloudPairingQueue];
        [v24 addDelegate:v25 queue:v26];

        BOOL v27 = *(void **)(a1 + 40);
        unsigned int v28 = [v27 service];
        uint64_t v29 = [v28 devices];
        id v30 = [v27 filteredDevicesForIDSDevices:v29];
        [*(id *)(a1 + 40) setAssociatedDevices:v30];

        uint64_t v31 = sub_10006CA04("CloudPairing");
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          int v32 = [*(id *)(a1 + 40) associatedDevices];
          *(_DWORD *)buf = 138412290;
          uint64_t v44 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "MUC - associatedDevice %@", buf, 0xCu);
        }
        [*(id *)(a1 + 40) setIsReady:1];
        id v33 = [*(id *)(a1 + 40) service];
        id v15 = [v33 devices];

        [*(id *)(a1 + 40) setTotalCloudDeviceCount:[v15 count] + 1];
        id v34 = +[NSNotificationCenter defaultCenter];
        uint64_t v35 = &__NSArray0__struct;
        if (v15) {
          uint64_t v35 = v15;
        }
        uint64_t v36 = +[NSNumber numberWithInteger:[*(id *)(a1 + 40) totalCloudDeviceCount:@"IDSDevices" @"TotalIDSDevices" v35]];
        v42[1] = v36;
        uint64_t v37 = +[NSDictionary dictionaryWithObjects:v42 forKeys:&v41 count:2];
        [v34 postNotificationName:@"BTTotalIDSDeviceCountChanged" object:0 userInfo:v37];

        objc_opt_class();
        LOBYTE(v36) = objc_opt_isKindOfClass();
        char v38 = sub_10006CA04("CloudPairing");
        unsigned int v39 = v38;
        if (v36)
        {
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v44 = v7;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "MUC - Validate cloud pairings from bluetoothd: %@", buf, 0xCu);
          }

          [*(id *)(a1 + 40) validateCloudPairing:v7];
        }
        else
        {
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            sub_1001B5590();
          }
        }
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        sub_1001B55FC();
      }
    }
    else
    {
      id v40 = sub_10006CA04("CloudPairing");
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        sub_1001B555C();
      }

      [*(id *)(a1 + 40) retryIDSSetup];
    }
  }
}

id sub_10005D31C(uint64_t a1)
{
  uint64_t v2 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retrying initializeIDS", v4, 2u);
  }

  return [*(id *)(a1 + 32) initializeIDS];
}

void sub_10005DA40(uint64_t a1, void *a2)
{
  unint64_t v3 = [a2 idsDevice];
  uint64_t v4 = [v3 uniqueID];
  id v5 = [*(id *)(a1 + 32) idsDevice];
  id v6 = [v5 uniqueID];
  unsigned int v7 = [v4 isEqualToString:v6];

  if (v7)
  {
    uint64_t v8 = [*(id *)(a1 + 32) idsDevice];
    [v8 setNSUUID:0];

    [*(id *)(a1 + 32) setState:0];
    id v9 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = [*(id *)(a1 + 32) idsDevice];
      unsigned int v11 = [v10 nsuuid];
      id v12 = [*(id *)(a1 + 32) idsDevice];
      unsigned int v13 = [v12 uniqueID];
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138412802;
      unsigned int v16 = v11;
      __int16 v17 = 2112;
      double v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Removing concurrent BT-UUID %@ from previously cloud paired device %@ as this device is cloud paired with %@", (uint8_t *)&v15, 0x20u);
    }
    [*(id *)(a1 + 48) removeObject:*(void *)(a1 + 32)];
  }
}

void sub_10005DDAC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) cloudPairingQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005DE90;
    block[3] = &unk_1002328D8;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    id v11 = v7;
    uint64_t v12 = v8;
    id v13 = v9;
    dispatch_async(v6, block);
  }
}

void sub_10005DE90(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"kPublicAddress"];

  if (v2)
  {
    unint64_t v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"kPublicAddress"];
    [*(id *)(a1 + 40) setPublicAddress:v3];
  }
  uint64_t v4 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reply for public address: %@", buf, 0xCu);
  }

  if (*(void *)(a1 + 48))
  {
    id v6 = [*(id *)(a1 + 40) publicAddress];

    uint64_t v7 = *(void *)(a1 + 48);
    if (v6)
    {
      (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
    }
    else
    {
      NSErrorUserInfoKey v10 = NSLocalizedFailureErrorKey;
      CFStringRef v11 = @"Public Address Unavailable";
      uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
      id v9 = +[NSError errorWithDomain:@"BTIDSErrorDomain" code:0 userInfo:v8];
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);
    }
  }
}

void sub_10005E0F8(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10005E188;
  v5[3] = &unk_100232A38;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 fetchPublicAddressWithCompletion:v5];
}

void sub_10005E188(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_10006CA04("CloudPairing");
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001B56F0();
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "bluetoothd existing cloud pairings: %@", buf, 0xCu);
    }

    uint64_t v7 = [*(id *)(a1 + 40) cloudPairingQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10005E2FC;
    block[3] = &unk_100232A10;
    int8x16_t v9 = *(int8x16_t *)(a1 + 32);
    id v8 = (id)v9.i64[0];
    int8x16_t v11 = vextq_s8(v9, v9, 8uLL);
    dispatch_async(v7, block);
  }
}

void sub_10005E2FC(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [v1 associatedDevices];
  [v1 updateCloudPairings:v2 newDevices:v3];
}

id sub_10005F3D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) idsDevice];
  id v8 = [v7 nsuuid];
  if (v8)
  {
    int8x16_t v9 = *(void **)(a1 + 40);
    id v3 = [*(id *)(a1 + 32) idsDevice];
    uint64_t v4 = [v3 uniqueID];
    NSErrorUserInfoKey v10 = [v9 publicAddressForIDSDevice:v4];
    if (v10)
    {
      id v11 = 0;
LABEL_6:

      goto LABEL_7;
    }
  }
  uint64_t v12 = [v6 idsDevice];
  uint64_t v13 = [v12 uniqueID];
  uint64_t v14 = [*(id *)(a1 + 32) idsDevice];
  int v15 = [v14 uniqueID];
  id v11 = [v13 isEqualToString:v15];

  if (v8)
  {
    NSErrorUserInfoKey v10 = 0;
    goto LABEL_6;
  }
LABEL_7:

  return v11;
}

id sub_10005F4F0(uint64_t a1, void *a2)
{
  id v3 = [a2 idsDevice];
  uint64_t v4 = [v3 uniqueID];
  uint64_t v5 = [*(id *)(a1 + 32) objectAtIndexedSubscript:*(void *)(a1 + 40)];
  id v6 = [v4 isEqualToString:v5];

  return v6;
}

void sub_100060B84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = [v3 nsuuid];
    id obja = [v69 UUIDString];
    id v60 = [obja UTF8String];
    id v65 = [v3 uniqueID];
    id v58 = [v65 UTF8String];
    id v63 = [v3 modelIdentifier];
    id v56 = [v63 UTF8String];
    id v61 = [v3 productName];
    id v54 = [v61 UTF8String];
    id v5 = [v3 productVersion];
    id v53 = [v5 UTF8String];
    id v6 = [v3 productBuildVersion];
    id v7 = [v6 UTF8String];
    id v8 = [v3 name];
    id v9 = [v8 UTF8String];
    NSErrorUserInfoKey v10 = *(void **)(a1 + 32);
    id v11 = [v3 uniqueID];
    id v12 = [v10 publicAddressForIDSDevice:v11];
    id v13 = [v12 UTF8String];
    *(_DWORD *)buf = 136316930;
    id v77 = v60;
    __int16 v78 = 2080;
    id v79 = v58;
    __int16 v80 = 2080;
    id v81 = v56;
    __int16 v82 = 2080;
    id v83 = v54;
    __int16 v84 = 2080;
    id v85 = v53;
    __int16 v86 = 2080;
    id v87 = v7;
    __int16 v88 = 2080;
    id v89 = v9;
    __int16 v90 = 2080;
    id v91 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT:(%s) IDS:%s model:%s prodName:%s prodVers:%s buildVers:%s Name:%s address:[%s]", buf, 0x52u);
  }
  uint64_t v14 = [v3 modelIdentifier];
  if ([v14 localizedStandardContainsString:@"Phone"])
  {
    int v15 = *(unsigned __int8 *)(a1 + 48);

    if (v15)
    {
      unsigned int v16 = sub_10006CA04("CloudPairing");
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      id v17 = [v3 cpDescription];
      id v18 = [v17 UTF8String];
      *(_DWORD *)buf = 136380675;
      id v77 = v18;
      __int16 v19 = "Ignoring IDS device %{private}s as it is a phone and we are a watch and we cant allow that";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);

      goto LABEL_20;
    }
  }
  else
  {
  }
  uint64_t v20 = [v3 modelIdentifier];
  if ([v20 localizedStandardContainsString:@"Watch"])
  {
    int v21 = *(unsigned __int8 *)(a1 + 49);

    if (v21)
    {
      unsigned int v16 = sub_10006CA04("CloudPairing");
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      id v17 = [v3 cpDescription];
      id v22 = [v17 UTF8String];
      *(_DWORD *)buf = 136380675;
      id v77 = v22;
      __int16 v19 = "Ignoring IDS device %{private}s as it is a watch and we are a phone and we cant allow that.";
      goto LABEL_19;
    }
  }
  else
  {
  }
  if (([v3 supportsiCloudPairing] & 1) == 0)
  {
    unsigned int v16 = sub_10006CA04("CloudPairing");
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    id v17 = [v3 cpDescription];
    id v24 = [v17 UTF8String];
    *(_DWORD *)buf = 136380675;
    id v77 = v24;
    __int16 v19 = "Ignoring IDS device %{private}s as it doesn't support iCloud pairing with us";
    goto LABEL_19;
  }
  if ([v3 isDefaultPairedDevice])
  {
    unsigned int v16 = sub_10006CA04("CloudPairing");
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    id v17 = [v3 cpDescription];
    id v23 = [v17 UTF8String];
    *(_DWORD *)buf = 136380675;
    id v77 = v23;
    __int16 v19 = "Ignoring IDS device %{private}s as it is a 'default paired' device";
    goto LABEL_19;
  }
  id v25 = [v3 uniqueID];
  id v26 = [v25 length];

  if (!v26)
  {
    unsigned int v16 = sub_10006CA04("CloudPairing");
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    id v17 = [v3 cpDescription];
    id v52 = [v17 UTF8String];
    *(_DWORD *)buf = 136380675;
    id v77 = v52;
    __int16 v19 = "Ignoring IDS device %{private}s as it has no uniqueID set";
    goto LABEL_19;
  }
  int v57 = v3;
  unsigned int v16 = +[CloudDevice deviceWithIDSDevice:v3];
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  uint64_t v55 = a1;
  id obj = [*(id *)(a1 + 32) associatedDevices];
  id v70 = [obj countByEnumeratingWithState:&v71 objects:v75 count:16];
  if (!v70) {
    goto LABEL_40;
  }
  uint64_t v27 = *(void *)v72;
  uint64_t v66 = *(void *)v72;
  unint64_t v59 = v16;
  do
  {
    unsigned int v28 = 0;
    do
    {
      if (*(void *)v72 != v27) {
        objc_enumerationMutation(obj);
      }
      uint64_t v29 = *(void **)(*((void *)&v71 + 1) + 8 * (void)v28);
      id v30 = [v29 idsDevice];
      uint64_t v31 = [v30 uniqueID];
      int v32 = [v16 idsDevice];
      id v33 = [v32 uniqueID];
      unsigned int v34 = [v31 isEqualToString:v33];

      if (v34)
      {
        uint64_t v35 = sub_10006CA04("CloudPairing");
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v64 = [v16 idsDevice];
          uint64_t v36 = [v64 uniqueID];
          id v62 = [v16 idsDevice];
          uint64_t v37 = [v62 nsuuid];
          char v38 = [v29 idsDevice];
          unsigned int v39 = [v38 uniqueID];
          id v40 = [v29 idsDevice];
          uint64_t v41 = [v40 nsuuid];
          uint64_t v42 = [v29 stateString];
          *(_DWORD *)buf = 138413314;
          id v77 = v36;
          __int16 v78 = 2112;
          id v79 = v37;
          __int16 v80 = 2112;
          id v81 = v39;
          __int16 v82 = 2112;
          id v83 = v41;
          __int16 v84 = 2112;
          id v85 = v42;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Newly created device: %@ (BT: %@) already associated with device: %@ (BT: %@, state: %@)", buf, 0x34u);

          unsigned int v16 = v59;
        }

        unsigned __int8 v43 = [v16 idsDevice];
        uint64_t v44 = [v43 nsuuid];
        if (v44)
        {
          id v45 = (void *)v44;
          uint64_t v27 = v66;
          goto LABEL_32;
        }
        id v45 = [v29 idsDevice];
        uint64_t v46 = [v45 nsuuid];
        uint64_t v27 = v66;
        if (v46)
        {
          uint64_t v47 = (void *)v46;
          id v48 = [v29 state];

          if (v48)
          {
            unsigned __int8 v43 = [v29 idsDevice];
            id v45 = [v43 nsuuid];
            int v49 = [v16 idsDevice];
            [v49 setNSUUID:v45];

            goto LABEL_32;
          }
        }
        else
        {
LABEL_32:
        }
        -[NSObject setState:](v16, "setState:", [v29 state]);
        -[NSObject setIsConnected:](v16, "setIsConnected:", [v29 isConnected]);
      }
      unsigned int v28 = (char *)v28 + 1;
    }
    while (v70 != v28);
    id v50 = [obj countByEnumeratingWithState:&v71 objects:v75 count:16];
    id v70 = v50;
  }
  while (v50);
LABEL_40:

  id v3 = v57;
  id v51 = [v57 nsuuid];

  if (v51) {
    [v16 setState:6];
  }
  [*(id *)(v55 + 40) addObject:v16];
LABEL_20:
}

id sub_100061624(uint64_t a1, void *a2)
{
  id v3 = [a2 idsDevice];
  uint64_t v4 = [v3 uniqueID];
  id v5 = [*(id *)(a1 + 32) uniqueID];
  id v6 = [v4 isEqualToString:v5];

  return v6;
}

void sub_100061AD0(uint64_t a1)
{
  if (([*(id *)(a1 + 32) processingIDSPush] & 1) == 0)
  {
    [*(id *)(a1 + 32) setProcessingIDSPush:1];
    dispatch_time_t v2 = dispatch_time(0, 20000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100061C4C;
    block[3] = &unk_100232710;
    void block[4] = *(void *)(a1 + 32);
    dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
    id v3 = +[CloudXPCService sharedInstance];
    unsigned __int8 v4 = [v3 manateeZoneUpgraded];

    id v5 = sub_10006CA04("CloudPairing");
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IDS: Manatee getAccessoryKey", v9, 2u);
      }
      id v7 = &off_100231B20;
    }
    else
    {
      if (v6)
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IDS: getAccessoryKey", v9, 2u);
      }
      id v7 = off_100231B18;
    }

    id v8 = [(__objc2_class *)*v7 sharedInstance];
    [v8 fetchAccessoryKeyBlob:0];
  }
}

void sub_100061C4C(uint64_t a1)
{
  [*(id *)(a1 + 32) setProcessingIDSPush:0];
  dispatch_time_t v2 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) processingIDSPush];
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "IDS: Reseting processingPush %d", (uint8_t *)v4, 8u);
  }
}

void sub_1000627B8(_Unwind_Exception *a1)
{
}

id sub_1000627D8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) appendString:a2];
}

id sub_1000627E4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) appendString:a2];
}

uint64_t sub_1000627F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100062800(uint64_t a1)
{
}

void sub_100062808(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    BOOL v6 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for RSA v3 - %@", (uint8_t *)&v13, 0xCu);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    id v7 = [*(id *)(a1 + 32) localDeviceRandomAddress];
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v7 forKeyedSubscript:@"RandomAddress"];

    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    id v9 = *(void **)(a1 + 32);
    NSErrorUserInfoKey v10 = [*(id *)(a1 + 40) idsDevice];
    [v9 sendCloudPairingResponseMessage:v8 toDevice:v10 version:@"Version 3"];

    id v11 = *(void **)(a1 + 32);
    id v12 = [*(id *)(a1 + 40) idsDevice];
    [v11 storePublicAddressMapping:v12 message:*(void *)(a1 + 48)];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 56) localKeys:0 from:*(void *)(a1 + 40) forProtocolID:*(void *)(a1 + 64)];
  }
}

void sub_100062990(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    BOOL v6 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for public address v3 - %@", (uint8_t *)&v12, 0xCu);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) idsDevice];
    [v8 sendCloudPairingResponseMessage:v7 toDevice:v9 version:@"Version 3"];

    NSErrorUserInfoKey v10 = *(void **)(a1 + 32);
    id v11 = [*(id *)(a1 + 40) idsDevice];
    [v10 storePublicAddressMapping:v11 message:*(void *)(a1 + 48)];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 48) localKeys:0 from:*(void *)(a1 + 40) forProtocolID:*(void *)(a1 + 56)];
  }
}

void sub_100062AE8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    BOOL v6 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for public address for v2 - %@", (uint8_t *)&v12, 0xCu);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) idsDevice];
    [v8 sendCloudPairingResponseMessage:v7 toDevice:v9 version:@"Version 2"];

    NSErrorUserInfoKey v10 = *(void **)(a1 + 32);
    id v11 = [*(id *)(a1 + 40) idsDevice];
    [v10 storePublicAddressMapping:v11 message:*(void *)(a1 + 48)];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 56) localKeys:0 from:*(void *)(a1 + 40) forProtocolID:*(void *)(a1 + 64)];
  }
}

void sub_100062E34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reply for generate keys: %@", buf, 0xCu);
  }

  uint64_t v8 = [*(id *)(a1 + 32) cloudPairingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100062FA0;
  block[3] = &unk_1002328D8;
  id v12 = v5;
  id v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_100062FA0(void *a1)
{
  if (a1[4] && !a1[5])
  {
    id v5 = *(uint64_t (**)(void))(a1[6] + 16);
    return v5();
  }
  else
  {
    dispatch_time_t v2 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1001B5D70((uint64_t)a1, v2, v3);
    }

    return (*(uint64_t (**)(void))(a1[6] + 16))();
  }
}

void sub_100063268(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    id v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reply for complete pairing: %{private}@", buf, 0xCu);
  }

  if (v6)
  {
    uint64_t v8 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001B5DE4();
    }
  }
  else
  {
    id v9 = [*(id *)(a1 + 32) cloudPairingQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000633F8;
    block[3] = &unk_100232B98;
    id v10 = v5;
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    id v14 = v10;
    uint64_t v15 = v11;
    id v16 = v12;
    dispatch_async(v9, block);

    uint64_t v8 = v14;
  }
}

void sub_1000633F8(id *a1)
{
  id v1 = a1;
  dispatch_time_t v2 = [a1[4] objectForKeyedSubscript:@"kCloudPairingID"];
  if (v2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v3 = [v1[4] objectForKeyedSubscript:@"kCloudPairingID"];
      id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:v3];
      if (v4)
      {
        id v30 = v3;
        uint64_t v31 = v2;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        id v32 = v4;
        id obj = [v1[5] _fetchArrayOfCloudDevicesForPeripheral:v4];
        id v5 = [obj countByEnumeratingWithState:&v34 objects:v42 count:16];
        if (v5)
        {
          id v6 = v5;
          uint64_t v7 = *(void *)v35;
          do
          {
            for (i = 0; i != v6; i = (char *)i + 1)
            {
              if (*(void *)v35 != v7) {
                objc_enumerationMutation(obj);
              }
              id v9 = *(void **)(*((void *)&v34 + 1) + 8 * i);
              id v10 = [v9 idsDevice];
              uint64_t v11 = [v10 uniqueID];
              id v12 = v1;
              id v13 = [v1[6] idsDevice];
              id v14 = [v13 uniqueID];
              unsigned __int8 v15 = [v11 isEqualToIgnoringCase:v14];

              if ((v15 & 1) == 0)
              {
                id v16 = sub_10006CA04("CloudPairing");
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  id v17 = [v9 idsDevice];
                  id v18 = [v17 uniqueID];
                  *(_DWORD *)buf = 138412546;
                  id v39 = v18;
                  __int16 v40 = 2112;
                  id v41 = v32;
                  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Removing Association from IDS device %@ paired to same BT-UUID %@", buf, 0x16u);
                }
                __int16 v19 = [v9 idsDevice];
                [v19 setNSUUID:0];

                [v9 setState:0];
              }
              id v1 = v12;
            }
            id v6 = [obj countByEnumeratingWithState:&v34 objects:v42 count:16];
          }
          while (v6);
        }

        uint64_t v20 = [v1[6] idsDevice];
        id v4 = v32;
        [v20 setNSUUID:v32];

        int v21 = sub_10006CA04("CloudPairing");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          id v22 = [v1[6] description];
          id v23 = [v22 UTF8String];
          *(_DWORD *)buf = 138412547;
          id v39 = v32;
          __int16 v40 = 2081;
          id v41 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Associated local device \"%@\" with IDS device %{private}s", buf, 0x16u);
        }
        id v24 = sub_10006CA04("CloudPairing");
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = [v1[6] description];
          id v26 = [v25 UTF8String];
          *(_DWORD *)buf = 136380675;
          id v39 = v26;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Completed cloud pairing to IDS device %{private}s", buf, 0xCu);
        }
        [v1[6] setState:6];
        uint64_t v27 = [v1[5] unpairedIDSCloudIdentifiers];
        unsigned int v28 = [v1[6] idsDevice];
        uint64_t v29 = [v28 uniqueID];
        [v27 removeObject:v29];

        uint64_t v3 = v30;
        dispatch_time_t v2 = v31;
      }
      else
      {
        uint64_t v27 = sub_10006CA04("CloudPairing");
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          sub_1001B5E50((uint64_t)v1);
        }
      }
    }
  }
}

void sub_10006414C(id *a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    v15[0] = @"PairingResponse";
    v14[0] = @"MessageType";
    v14[1] = @"DeviceName";
    id v4 = a1[4];
    id v5 = a2;
    id v6 = [v4 localDeviceName];
    v15[1] = v6;
    _OWORD v14[2] = @"PublicAddress";
    uint64_t v7 = [a1[4] publicAddress];
    v15[2] = v7;
    v14[3] = @"EncryptionType";
    uint64_t v8 = [a1[5] objectForKeyedSubscript:];
    v15[3] = v8;
    v14[4] = @"RequestedKeyType";
    id v9 = [a1[4] requestedKeyTypes];
    v15[4] = v9;
    v14[5] = @"RequestedKeyLength";
    id v10 = [a1[5] objectForKeyedSubscript:];
    v14[6] = @"RequestedKeys";
    void v15[5] = v10;
    v15[6] = v5;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:7];

    id v12 = a1[4];
    id v13 = [a1[6] idsDevice];
    [v12 sendCloudPairingResponseMessage:v11 toDevice:v13 version:@"Version 1"];
  }
}

void sub_1000645F8(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    v18[0] = @"KeyDistribution";
    v17[0] = @"MessageType";
    v17[1] = @"DeviceName";
    id v4 = *(void **)(a1 + 32);
    id v5 = a2;
    id v6 = [v4 localDeviceName];
    v18[1] = v6;
    v17[2] = @"PublicAddress";
    uint64_t v7 = [*(id *)(a1 + 32) publicAddress];
    v18[2] = v7;
    v17[3] = @"EncryptionType";
    uint64_t v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:];
    v18[3] = v8;
    void v17[4] = @"RequestedKeyType";
    id v9 = [*(id *)(a1 + 32) requestedKeyTypes];
    v18[4] = v9;
    void v17[5] = @"RequestedKeyLength";
    id v10 = [*(id *)(a1 + 40) objectForKeyedSubscript:];
    uint64_t v11 = *(void *)(a1 + 48);
    v18[5] = v10;
    v18[6] = v11;
    v17[6] = @"LocalKeys";
    v17[7] = @"RequestedKeys";
    v18[7] = v5;
    id v12 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:8];

    id v13 = *(void **)(a1 + 32);
    id v14 = [*(id *)(a1 + 56) idsDevice];
    [v13 sendCloudPairingResponseMessage:v12 toDevice:v14 version:@"Version 1"];

    [*(id *)(a1 + 32) cloudPairingCompletedWithResponse:*(void *)(a1 + 40) localKeys:v5 from:*(void *)(a1 + 56) forProtocolID:@"Version 1"];
    unsigned __int8 v15 = *(void **)(a1 + 32);
    id v16 = [*(id *)(a1 + 56) idsDevice];
    [v15 storePublicAddressMapping:v16 message:*(void *)(a1 + 40)];
  }
}

void sub_100064F90(uint64_t a1)
{
  dispatch_time_t v2 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = (unint64_t)*(double *)(a1 + 48);
    id v4 = *(void **)(a1 + 56);
    if (*(void *)(a1 + 64) == 1) {
      id v5 = "pairing";
    }
    else {
      id v5 = "security";
    }
    id v6 = [*(id *)(a1 + 32) description];
    *(_DWORD *)buf = 134218755;
    unint64_t v26 = v3;
    __int16 v27 = 2048;
    id v28 = v4;
    __int16 v29 = 2080;
    id v30 = v5;
    __int16 v31 = 2081;
    id v32 = [v6 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MUC - Now attempting delayed (%lu) seconds to send (%lu) attempt '%s request' message to IDS device %{private}s", buf, 0x2Au);
  }
  uint64_t v7 = [*(id *)(a1 + 40) associatedDevices];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10006531C;
  v23[3] = &unk_100234908;
  id v24 = *(id *)(a1 + 32);
  uint64_t v8 = [v7 cuFilteredArrayUsingBlock:v23];
  id v9 = [v8 firstObject];

  if (!v9)
  {
    id v12 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)(a1 + 64) == 1) {
        id v17 = "pairing";
      }
      else {
        id v17 = "security";
      }
      id v18 = [*(id *)(a1 + 32) description];
      id v19 = [v18 UTF8String];
      *(_DWORD *)buf = 136315395;
      unint64_t v26 = (unint64_t)v17;
      __int16 v27 = 2081;
      id v28 = v19;
      uint64_t v20 = "MUC - Dropping sending '%s request' message to unpaired IDS device %{private}s";
      goto LABEL_25;
    }
LABEL_26:

    goto LABEL_14;
  }
  id v10 = [v9 idsDevice];
  uint64_t v11 = [v10 nsuuid];

  id v12 = sub_10006CA04("CloudPairing");
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (v13)
    {
      if (*(void *)(a1 + 64) == 1) {
        int v21 = "pairing";
      }
      else {
        int v21 = "security";
      }
      id v18 = [v9 description];
      id v22 = [v18 UTF8String];
      *(_DWORD *)buf = 136315395;
      unint64_t v26 = (unint64_t)v21;
      __int16 v27 = 2081;
      id v28 = v22;
      uint64_t v20 = "MUC - Dropping sending '%s request' message to IDS device %{private}s because we got paired";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v20, buf, 0x16u);

      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v13)
  {
    if (*(void *)(a1 + 64) == 1) {
      id v14 = "pairing";
    }
    else {
      id v14 = "security";
    }
    id v15 = [*(id *)(a1 + 32) description];
    id v16 = [v15 UTF8String];
    *(_DWORD *)buf = 136315395;
    unint64_t v26 = (unint64_t)v14;
    __int16 v27 = 2081;
    id v28 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "MUC - Sending delayed '%s request' message to IDS device %{private}s", buf, 0x16u);
  }
  [*(id *)(a1 + 40) initiatePairing:*(void *)(a1 + 32)];
LABEL_14:
}

id sub_10006531C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 idsDevice];
  id v5 = [v4 uniqueID];
  id v6 = [*(id *)(a1 + 32) idsDevice];
  uint64_t v7 = [v6 uniqueID];
  if ([v5 isEqualToString:v7]) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;

  return v9;
}

void sub_100065AE0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_100065B0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v8 = WeakRetained;
  if (!v6 && WeakRetained)
  {
    id v9 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for public address: %@", buf, 0xCu);
    }

    id v10 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 32)];
    [v10 setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    [*(id *)(a1 + 40) setObject:v10 forKey:@"Version 2"];
    if (!*(_DWORD *)(a1 + 88)
      && ([*(id *)(a1 + 48) localDeviceRandomAddress],
          uint64_t v11 = objc_claimAutoreleasedReturnValue(),
          BOOL v12 = v11 == 0,
          v11,
          v12))
    {
      uint64_t v20 = sub_10006CA04("CloudPairing");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v29 = v5;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "MUC - generated keys with V2 RSA: %@", buf, 0xCu);
      }

      [*(id *)(a1 + 40) setObject:v10 forKey:@"Version 3"];
      [*(id *)(a1 + 40) setObject:@"CloudPairing" forKey:@"MessageType"];
      [v8 sendInitialPairingIDSMessage:*(void *)(a1 + 40) forDevice:*(void *)(a1 + 56) withRole:*(void *)(a1 + 80)];
    }
    else
    {
      BOOL v13 = [*(id *)(a1 + 48) localDeviceRandomAddress];

      if (v13)
      {
        id v14 = *(void **)(a1 + 48);
        uint64_t v22 = *(void *)(a1 + 64);
        id v15 = [v14 keyLength];
        id v16 = [*(id *)(a1 + 48) localDeviceRandomAddress];
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_100065E48;
        v23[3] = &unk_100234958;
        objc_copyWeak(v27, (id *)(a1 + 72));
        id v24 = *(id *)(a1 + 32);
        int8x16_t v21 = *(int8x16_t *)(a1 + 40);
        id v17 = (id)v21.i64[0];
        int8x16_t v25 = vextq_s8(v21, v21, 8uLL);
        id v18 = *(id *)(a1 + 56);
        id v19 = *(void **)(a1 + 80);
        id v26 = v18;
        v27[1] = v19;
        [v14 generateKeyDictForTypes:v22 keyLength:v15 forAddress:v16 withCompletion:v23];

        objc_destroyWeak(v27);
      }
    }
  }
}

void sub_100065E2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100065E48(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v7 = WeakRetained;
  if (!a3 && WeakRetained)
  {
    uint64_t v8 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MUC - generated keys for updated RSA: %@", (uint8_t *)&v11, 0xCu);
    }

    id v9 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 32)];
    [v9 setObject:v5 forKeyedSubscript:@"RequestedKeys"];
    id v10 = [*(id *)(a1 + 40) localDeviceRandomAddress];
    [v9 setObject:v10 forKeyedSubscript:@"RandomAddress"];

    [*(id *)(a1 + 48) setObject:v9 forKey:@"Version 3"];
    [*(id *)(a1 + 48) setObject:@"CloudPairing" forKey:@"MessageType"];
    [v7 sendInitialPairingIDSMessage:*(void *)(a1 + 48) forDevice:*(void *)(a1 + 56) withRole:*(void *)(a1 + 72)];
  }
}

id sub_100066464(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendRePairRequest:*(void *)(a1 + 40) forBundleID:*(void *)(a1 + 48)];
}

id sub_100066A78(uint64_t a1, void *a2)
{
  return [a2 containsString:*(void *)(a1 + 32)];
}

void sub_100066A84(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) messageIdentifiersWaitingForAck];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100066C34;
  v8[3] = &unk_1002349A8;
  v8[4] = *(void *)(a1 + 40);
  id v3 = [v2 keysOfEntriesPassingTest:v8];

  if ([v3 count])
  {
    id v4 = *(void **)(a1 + 32);
    v9[0] = @"MessageType";
    v9[1] = @"DeviceName";
    v10[0] = @"RepairRequest";
    id v5 = [v4 localDeviceName];
    v10[1] = v5;
    id v6 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];
    [v4 sendRePairCloudPairingMessage:v6 toDevice:*(void *)(a1 + 56) bundleID:*(void *)(a1 + 64)];
  }
  else
  {
    id v5 = sub_10006CA04("CloudPairing");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stopping here as message was delivered to device %@", buf, 0xCu);
    }
  }
}

id sub_100066C34(uint64_t a1, void *a2)
{
  return [a2 containsString:*(void *)(a1 + 32)];
}

void sub_100067BBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_10006CA04("CloudPairing");
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B67C8(a1, (uint64_t)v6, v8);
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Unpaired Cloud Device", buf, 2u);
    }

    id v9 = [*(id *)(a1 + 32) cloudPairingQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100067D00;
    v10[3] = &unk_100232A10;
    int v11 = v5;
    id v12 = *(id *)(a1 + 40);
    dispatch_async(v9, v10);

    uint64_t v8 = v11;
  }
}

void sub_100067D00(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"kSuccess"];
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"kSuccess"];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"kSuccess"];
      unsigned int v7 = [v6 BOOLValue];

      if (v7)
      {
        uint64_t v8 = sub_10006CA04("CloudPairing");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_1001B6844(a1);
        }
      }
      else
      {
        id v9 = [*(id *)(a1 + 40) idsDevice];
        [v9 setNSUUID:0];

        id v10 = *(void **)(a1 + 40);
        [v10 setState:0];
      }
    }
  }
}

void sub_100068794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000687AC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _statedumpAndRecordDailyMetric];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100069334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

int64_t sub_100069384(id a1, CloudDevice *a2, CloudDevice *a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  id v6 = [(CloudDevice *)v4 idsDevice];
  unsigned int v7 = [v6 name];
  uint64_t v8 = [(CloudDevice *)v5 idsDevice];
  id v9 = [v8 name];
  if ([v7 compare:v9] == (id)1)
  {
    id v10 = [(CloudDevice *)v4 idsDevice];
    int v11 = [v10 nsuuid];
    if (v11)
    {
      id v12 = [(CloudDevice *)v5 idsDevice];
      BOOL v13 = [v12 nsuuid];
      int64_t v14 = v13 != 0;
    }
    else
    {
      int64_t v14 = 0;
    }
  }
  else
  {
    int64_t v14 = 0;
  }

  return v14;
}

id sub_10006949C(id a1, CloudDevice *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = [(CloudDevice *)v2 idsDevice];
  uint64_t v4 = [v3 nsuuid];
  if (v4) {
    id v5 = v2;
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;

  return v6;
}

void sub_100069500(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  int v22 = 0;
  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x3032000000;
  v19[3] = sub_1000627F0;
  void v19[4] = sub_100062800;
  id v20 = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  _OWORD v14[2] = sub_1000696FC;
  v14[3] = &unk_100234A78;
  id v17 = v21;
  id v18 = v19;
  id v15 = *(id *)(a1 + 32);
  id v7 = v5;
  id v16 = v7;
  [v6 enumerateKeysAndObjectsUsingBlock:v14];
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v8 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v8 + 40), obj);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(id *)(v9 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v9 + 40), v12);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v11 = *(id *)(v10 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v10 + 40), v11);

  _Block_object_dispose(v19, 8);
  _Block_object_dispose(v21, 8);
}

void sub_1000696D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1000696FC(uint64_t a1, void *a2, void *a3)
{
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v6 = a3;
  id v7 = a2;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v6 intValue] + v5;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v8 + 40);
  id v12 = v6;
  NSAppendPrintF_safe();

  objc_storeStrong((id *)(v8 + 40), obj);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  id v13 = *(id *)(v9 + 40);
  uint64_t v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40) v7 v12];
  id v11 = [v10 objectForKeyedSubscript:v7];

  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v9 + 40), v13);
}

void sub_1000697F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v1 + 40), obj);
}

void sub_100069848(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = a3;
  id v6 = a2;
  id v7 = [v5 idsDevice];
  uint64_t v8 = [v7 uniqueID];
  uint64_t v9 = [v5 idsDevice];

  uint64_t v10 = [v9 name];
  NSAppendPrintF_safe();

  objc_storeStrong((id *)(v4 + 40), obj);
}

void sub_10006B120(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _fetchCloudPairingIdentifierForPeripheral:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10006B238(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) service];
  id v2 = [v3 devices];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_10006B4FC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10006B534(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10006B564(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10006B588(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10006B5B0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

uint64_t sub_10006B5D0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10006B5E4()
{
  return v0;
}

void sub_10006B610(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_10006BF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10006BF50(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_copyWeak(&to, (id *)(a1 + 56));
  id v4 = objc_loadWeakRetained(&to);
  BOOL v5 = v4 == 0;

  if (v5)
  {
    uint64_t v6 = sub_10006CA04("BTXPCTimer");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001B6958(a1, v6, v8, v9, v10, v11, v12, v13);
    }
  }
  else if (*(void *)(a1 + 40))
  {
    if (xpc_activity_get_state(v3))
    {
      if (xpc_activity_should_defer(v3))
      {
        if (xpc_activity_set_state(v3, 3))
        {
          uint64_t v6 = sub_10006CA04("BTXPCTimer");
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v7 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            uint64_t v50 = v7;
          }
        }
        else
        {
          uint64_t v6 = sub_10006CA04("BTXPCTimer");
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            sub_1001B6A38(a1, v6, v36, v37, v38, v39, v40, v41);
          }
        }
        goto LABEL_33;
      }
      xpc_activity_state_t state = xpc_activity_get_state(v3);
      uint64_t v6 = xpc_activity_copy_criteria(v3);
      if (state == 2)
      {
        BOOL v26 = xpc_activity_set_state(v3, 5);
        uint64_t v27 = *(void *)(a1 + 32);
        id v28 = +[NSUUID UUID];
        id v29 = [v28 UUIDString];
        id v30 = +[NSString stringWithFormat:@"%@-%@", v27, v29];

        int v22 = v30;
        [v22 UTF8String];
        __int16 v31 = (void *)os_transaction_create();
        id v32 = sub_10006CA04("BTXPCTimer");
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          uint64_t v50 = v33;
          __int16 v51 = 1024;
          LODWORD(v52) = v26;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "BTXPCTimer triggered. Updating to done so that it can be cleaned. success : %@ : %d", buf, 0x12u);
        }

        uint64_t v34 = *(void *)(a1 + 48);
        id v35 = objc_loadWeakRetained(&to);
        (*(void (**)(uint64_t, id))(v34 + 16))(v34, v35);
      }
      else
      {
        int v22 = sub_10006CA04("BTXPCTimer");
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v42 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412802;
          uint64_t v50 = v42;
          __int16 v51 = 2048;
          xpc_activity_state_t v52 = state;
          __int16 v53 = 2048;
          id v54 = v6;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "BTXPCTimer %@ changed to state %ld with criteria %p", buf, 0x20u);
        }
      }
LABEL_32:

      goto LABEL_33;
    }
    id v20 = objc_loadWeakRetained(&to);
    [v20 setActivity:v3];

    uint64_t v6 = xpc_activity_copy_criteria(v3);
    int8x16_t v21 = *(void **)(a1 + 40);
    if (v6)
    {
      if (xpc_equal(v21, v6))
      {
        int v22 = sub_10006CA04("BTXPCTimer");
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        uint64_t v23 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v50 = v23;
        __int16 v51 = 2112;
        xpc_activity_state_t v52 = (xpc_activity_state_t)v6;
        id v24 = "BTXPCTimer Check-in: %@, with existing criteria: %@";
      }
      else
      {
        xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 40));
        int v22 = sub_10006CA04("BTXPCTimer");
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        uint64_t v46 = *(void *)(a1 + 32);
        xpc_activity_state_t v47 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v50 = v46;
        __int16 v51 = 2112;
        xpc_activity_state_t v52 = v47;
        id v24 = "BTXPCTimer Check-in: %@, with updating criteria: %@";
      }
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 0x16u);
      goto LABEL_32;
    }
    if (v21)
    {
      unsigned __int8 v43 = sub_10006CA04("BTXPCTimer");
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v44 = *(void *)(a1 + 32);
        xpc_activity_state_t v45 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v50 = v44;
        __int16 v51 = 2112;
        xpc_activity_state_t v52 = v45;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "BTXPCTimer Check-in: %@, with criteria: %@", buf, 0x16u);
      }

      xpc_activity_set_criteria(v3, *(xpc_object_t *)(a1 + 40));
    }
  }
  else
  {
    uint64_t v6 = sub_10006CA04("BTXPCTimer");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1001B69C8(a1, v6, v14, v15, v16, v17, v18, v19);
    }
  }
LABEL_33:

  objc_destroyWeak(&to);
}

void sub_10006C434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_10006C71C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t start()
{
  sub_10006C93C((uint64_t)"cloudpaird");
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    uint64_t v1 = os_log_create("com.apple.bluetooth", "cloudpaird");
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1001B6B28();
    }
  }
  if (!confstr(65537, v12, 0x400uLL))
  {
    id v2 = os_log_create("com.apple.bluetooth", "cloudpaird");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1001B6AA8();
    }
  }
  id v3 = +[BTIdentityDaemon sharedBTIdentityDaemon];
  [v3 activate];

  id v4 = +[BTServicesDaemon sharedBTServicesDaemon];
  [v4 activate];

  BOOL v5 = +[BTSmartRoutingDaemon sharedBTSmartRoutingDaemon];
  [v5 activate];

  uint64_t v6 = +[CloudXPCService sharedInstance];
  [v6 activate];

  uint64_t v7 = +[BTUserCloudServicesDaemon sharedBTServicesDaemon];
  [v7 activate];

  uint64_t v8 = +[AAServicesDaemon sharedAAServicesDaemon];
  [v8 activate];

  uint64_t v9 = +[HMServiceDaemon sharedHMServiceDaemon];
  [v9 activate];

  uint64_t v10 = +[NSRunLoop mainRunLoop];
  [v10 run];

  return 0;
}

void sub_10006C91C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_10006C93C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006C9C4;
  block[3] = &unk_100232EC8;
  void block[4] = a1;
  if (qword_100263EC0 != -1) {
    dispatch_once(&qword_100263EC0, block);
  }
}

uint64_t sub_10006C9C4(uint64_t a1)
{
  os_log_t v1 = os_log_create("com.apple.bluetoothcloud", *(const char **)(a1 + 32));
  uint64_t v2 = qword_10026AAD8;
  qword_10026AAD8 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

id sub_10006CA04(const char *a1)
{
  if (qword_100263ED0 != -1) {
    dispatch_once(&qword_100263ED0, &stru_100234B38);
  }
  pthread_mutex_lock(&stru_100261268);
  uint64_t v2 = +[NSString stringWithUTF8String:a1];
  id v3 = [(id)qword_100263EC8 objectForKey:v2];
  if (!v3)
  {
    id v3 = os_log_create("com.apple.bluetoothcloud", a1);
    [(id)qword_100263EC8 setObject:v3 forKey:v2];
  }
  pthread_mutex_unlock(&stru_100261268);

  return v3;
}

void sub_10006CADC(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  uint64_t v2 = qword_100263EC8;
  qword_100263EC8 = v1;

  _objc_release_x1(v1, v2);
}

void sub_10006CB70(id a1)
{
  uint64_t v1 = objc_alloc_init(MPCloudKit);
  uint64_t v2 = qword_100263ED8;
  qword_100263ED8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10006CE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006CEA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained buddySetupDone];
}

uint64_t sub_10006D08C(uint64_t a1)
{
  int out_token = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10006D118;
  v2[3] = &unk_100234BD0;
  int v3 = 0;
  v2[4] = *(void *)(a1 + 32);
  return notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, (dispatch_queue_t)&_dispatch_main_q, v2);
}

id sub_10006D118(uint64_t a1)
{
  uint64_t v2 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "device unlocked after boot ", v4, 2u);
  }

  notify_cancel(*(_DWORD *)(a1 + 40));
  return [*(id *)(a1 + 32) initializeCloudKit];
}

void sub_10006D238(id a1, int64_t a2, NSError *a3)
{
  id v4 = a3;
  BOOL v5 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134218242;
    int64_t v10 = a2;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "non-Manatee forceAccountStatus accountStatusWithCompletionHandler accountStatus %ld error %@", (uint8_t *)&v9, 0x16u);
  }

  if (!v4)
  {
    if (a2 == 1)
    {
      uint64_t v7 = +[CloudXPCService sharedInstance];
      uint64_t v6 = v7;
      uint64_t v8 = 1;
    }
    else
    {
      if (a2 == 4)
      {
        uint64_t v6 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v9) = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "non-Manatee forceAccountStatus Account Available but Not Ready, Try again in sometime...", (uint8_t *)&v9, 2u);
        }
        goto LABEL_11;
      }
      uint64_t v7 = +[CloudXPCService sharedInstance];
      uint64_t v6 = v7;
      uint64_t v8 = 0;
    }
    [v7 accountStatusAvailable:v8 force:1];
LABEL_11:
  }
}

void sub_10006DA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006DAB8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = sub_10006CA04("MagicPairing");
  int v9 = v8;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      uint64_t v25 = a2;
      __int16 v26 = 2112;
      id v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "non-Manatee accountStatusWithCompletionHandler accountStatus %ld error %@", buf, 0x16u);
    }

    if (!v5)
    {
      if (a2 == 1)
      {
        if (([WeakRetained isAccountActive] & 1) == 0)
        {
          [WeakRetained setupSubscriptions];
          int64_t v10 = [WeakRetained readUserPreference:@"kMagicPairingLegacyMasterKeyRemoved"];

          if (!v10) {
            [WeakRetained deleteLegacyMasterKey];
          }
        }
        [WeakRetained setIsAccountActive:1];
        dispatch_time_t v11 = dispatch_time(0, 5000000000);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10006DF5C;
        block[3] = &unk_100232710;
        void block[4] = WeakRetained;
        dispatch_after(v11, (dispatch_queue_t)&_dispatch_main_q, block);
        uint64_t v12 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v13 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v25 = 1;
          __int16 v26 = 1024;
          LODWORD(v27) = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "non-Manatee accountStatusDidChange Accounts available accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }
      }
      else if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        [WeakRetained setIsAccountActive:0];
        [WeakRetained setMasterBlob:0];
        [WeakRetained setShouldPauseFetch:0];
        [WeakRetained setPauseErrorReason:0];
        [WeakRetained setIsFetchInProgress:0];
        [WeakRetained setIsFetchMasterKeyInProgress:0];
        id v14 = objc_loadWeakRetained(v6);
        unsigned __int8 v15 = [v14 reinitAfterBuddy];

        uint64_t v16 = sub_10006CA04("MagicPairing");
        BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (v17)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "non-Manatee Not sending accounts status, since we are still in buddy. ", buf, 2u);
          }
        }
        else
        {
          if (v17)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "non-Manatee Sending accounts status, as signed out. ", buf, 2u);
          }

          uint64_t v18 = +[CloudXPCService sharedInstance];
          [v18 accountStatusAvailable:objc_msgSend(WeakRetained, "isAccountActive") force:0];

          uint64_t v19 = [WeakRetained readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];

          if (v19)
          {
            [WeakRetained removeuserPreference:@"MagicCloudPairingManateeUpgradedAccount" sync:1];
            id v20 = sub_10006CA04("MagicPairing");
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "non-Manatee delete kMagicCloudPairingManateeUpgraded key", buf, 2u);
            }
          }
          [WeakRetained removeuserPreference:@"MagicCloudPairingMasterSubscriptionID" sync:1];
          [WeakRetained removeuserPreference:@"MagicCloudPairingAccessorySubscriptionID" sync:1];
          [WeakRetained removeuserPreference:@"MagicPairingMasterKeySubscriptionDisabled" sync:1];
          [WeakRetained removeuserPreference:@"kMagicPairingLegacyMasterKeyRemoved" sync:1];
        }
        int8x16_t v21 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v22 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v25 = a2;
          __int16 v26 = 1024;
          LODWORD(v27) = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "non-Manatee accountStatusDidChange Account unavailable accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001B6BA8();
    }
  }
}

void sub_10006DF5C(uint64_t a1)
{
  id v2 = +[CloudXPCService sharedInstance];
  [v2 accountStatusAvailable:[*(id *)(a1 + 32) isAccountActive] force:0];
}

uint64_t sub_10006E154(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10006E33C(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:0];
  [*(id *)(a1 + 32) setPauseErrorReason:0];
  id v2 = *(void **)(a1 + 32);

  return [v2 fetchAccessoryKeyBlob:0];
}

void sub_10006E7B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v5 recordID];
    int v9 = [v8 zoneID];
    *(_DWORD *)buf = 138412802;
    unint64_t v48 = (unint64_t)v6;
    __int16 v49 = 2112;
    uint64_t v50 = v9;
    __int16 v51 = 2112;
    id v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);
  }
  if (v6)
  {
    if ([v6 code] != (id)26 && objc_msgSend(v6, "code") != (id)11)
    {
      if ([v6 code] == (id)6 || objc_msgSend(v6, "code") == (id)7)
      {
        __int16 v26 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_1001B6BDC();
        }

        id v27 = [v6 userInfo];
        id v28 = [v27 objectForKeyedSubscript:CKErrorRetryAfterKey];

        if (v28)
        {
          id v29 = [v6 userInfo];
          id v30 = [v29 objectForKeyedSubscript:CKErrorRetryAfterKey];
          [v30 doubleValue];
          double v32 = v31;

          uint64_t v33 = sub_10006CA04("MagicPairing");
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            unint64_t v48 = (unint64_t)v32;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "MP fetchKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu", buf, 0xCu);
          }

          dispatch_time_t v34 = dispatch_time(0, (uint64_t)(v32 * 1000000000.0));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10006EE98;
          block[3] = &unk_100233750;
          uint64_t v35 = *(void *)(a1 + 40);
          void block[4] = *(void *)(a1 + 32);
          void block[5] = v35;
          dispatch_after(v34, (dispatch_queue_t)&_dispatch_main_q, block);
        }
      }
      goto LABEL_25;
    }
    int64_t v10 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob CKErrorZoneNotFound", buf, 2u);
    }

    dispatch_time_t v11 = +[MPCloudKit_Manatee sharedInstance];
    [v11 fetchKeyBlob:*(void *)(a1 + 40)];
    goto LABEL_9;
  }
  uint64_t v12 = [v5 recordID];
  unsigned int v13 = [v12 zoneID];
  id v14 = [v13 zoneName];
  unsigned __int8 v15 = [*(id *)(a1 + 32) recordZoneBlob];
  uint64_t v16 = [v15 zoneID];
  BOOL v17 = [v16 zoneName];
  unsigned int v18 = [v14 isEqualToString:v17];

  if (!v18) {
    goto LABEL_25;
  }
  uint64_t v19 = [v5 encryptedValues];
  dispatch_time_t v11 = [v19 objectForKey:@"EncryptedMasterKeyBlob"];

  id v20 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    unint64_t v48 = (unint64_t)v11;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "MP fetchKeyBlob record %@", buf, 0xCu);
  }

  int8x16_t v21 = [v5 valuesByKey];
  unsigned int v22 = [v21 objectForKey:@"KeyBlob"];

  if (v22)
  {
    uint64_t v23 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [v5 valuesByKey];
      uint64_t v25 = [v24 objectForKey:@"KeyBlob"];
      *(_DWORD *)buf = 138412290;
      unint64_t v48 = (unint64_t)v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Found Legacy Key, Remove this: %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) deleteLegacyMasterKey];
  }
  else
  {
    if ([v11 length] != (id)2)
    {
      if ((unint64_t)[v11 length] > 0x20)
      {
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472;
        void v42[2] = sub_10006EF50;
        v42[3] = &unk_100232B98;
        id v40 = v11;
        uint64_t v41 = *(void *)(a1 + 32);
        id v43 = v40;
        uint64_t v44 = v41;
        id v45 = v5;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, v42);
      }
      else
      {
        uint64_t v39 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "fetchKeyBlob NO record", buf, 2u);
        }

        dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_100234C80);
      }
LABEL_9:

LABEL_25:
      [*(id *)(a1 + 32) setIsFetchMasterKeyInProgress:0];
      dispatch_time_t v11 = +[CloudXPCService sharedInstance];
      [v11 endTransaction:@"fetchKeyBlob"];
      goto LABEL_26;
    }
    uint64_t v36 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Master zone has been upgraded. Dont generate keys", buf, 2u);
    }

    uint64_t v37 = [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];

    if (!v37) {
      [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
    }
    uint64_t v38 = +[MPCloudKit_Manatee sharedInstance];
    [v38 fetchKeyBlob:0];
  }
LABEL_26:
}

id sub_10006EE98(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_10006EEA8(id a1)
{
  char v4 = 0;
  uint64_t v1 = +[CloudXPCService sharedInstance];
  id v2 = +[NSData dataWithBytes:&v4 length:1];
  int v3 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v2, @"kMasterKeyBlob", 0];
  [v1 sendCloudKitMsg:@"MasterKeysNotAvailable" args:v3];
}

void sub_10006EF50(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] == (id)33)
  {
    id v2 = [*(id *)(a1 + 40) masterBlob];

    if (!v2)
    {
      id v3 = [*(id *)(a1 + 32) mutableCopy];
      [*(id *)(a1 + 40) setMasterBlob:v3];

      char v4 = +[CloudXPCService sharedInstance];
      id v5 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:*(void *)(a1 + 32), @"kMasterKeyBlob", 0];
      [v4 sendCloudKitMsg:@"MasterKeysAvailable" args:v5];

      id v6 = +[CloudXPCService sharedInstance];
      uint64_t v7 = [v6 deviceManager];
      [v7 addAccountMagicKeysWithCloudRecord:*(void *)(a1 + 48)];

      uint64_t v8 = *(void **)(a1 + 40);
      [v8 fetchAccessoryKeyBlob:0];
    }
  }
}

void sub_10006F200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006F22C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v6 = [v4 domain];
    if ([v6 isEqualToString:CKErrorDomain])
    {
      if ([v4 code] == (id)3 || objc_msgSend(v4, "code") == (id)4)
      {
      }
      else
      {
        id v19 = [v4 code];

        if (v19 != (id)9) {
          goto LABEL_14;
        }
      }
      uint64_t v7 = [v4 userInfo];
      uint64_t v8 = [v7 objectForKeyedSubscript:CKErrorRetryAfterKey];

      if (v8)
      {
        int v9 = [v4 userInfo];
        int64_t v10 = [v9 objectForKeyedSubscript:CKErrorRetryAfterKey];
        [v10 doubleValue];
        double v12 = v11;

        int64_t v13 = (uint64_t)(v12 * 1000000000.0);
      }
      else
      {
        int64_t v13 = 60000000000;
      }
      dispatch_time_t v15 = dispatch_time(0, v13);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006F434;
      block[3] = &unk_100234CD0;
      uint64_t v16 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v17 = v16;
      uint64_t v18 = *(void *)(a1 + 56);
      id v21 = v17;
      uint64_t v22 = v18;
      dispatch_after(v15, (dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
    }
  }
  else
  {
    id v14 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1001B6C44();
    }
  }
LABEL_14:
}

id sub_10006F434(uint64_t a1)
{
  return _[*(id *)(a1 + 32) checkAccountStatusWithCompletionHandler:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10006F834(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v5 recordID];
    int v9 = [v8 zoneID];
    *(_DWORD *)buf = 138412802;
    unint64_t v42 = (unint64_t)v6;
    __int16 v43 = 2112;
    uint64_t v44 = v9;
    __int16 v45 = 2112;
    id v46 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fetchAccessoryKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);
  }
  int64_t v10 = SmartRoutingStatsWx;
  if (!v6)
  {
    double v12 = [v5 recordID];
    int64_t v13 = [v12 zoneID];
    id v14 = [v13 zoneName];
    dispatch_time_t v15 = [*(id *)(a1 + 32) recordZoneAccessoryDatabase];
    uint64_t v16 = [v15 zoneID];
    id v17 = [v16 zoneName];
    unsigned int v18 = [v14 isEqualToString:v17];

    int64_t v10 = SmartRoutingStatsWx;
    if (!v18) {
      goto LABEL_30;
    }
    id v19 = [v5 encryptedValues];
    id v20 = [v19 objectForKey:@"EncryptedAccessoryBlob"];

    id v21 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = [v5 modifiedByDevice];
      *(_DWORD *)buf = 138412546;
      unint64_t v42 = (unint64_t)v22;
      __int16 v43 = 2112;
      uint64_t v44 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "MP: Record Modified by %@: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0x16u);
    }
    if ([v20 length] == (id)4)
    {
      uint64_t v23 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Accessory zone has been upgraded. Dont generate keys", buf, 2u);
      }

      id v24 = [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];

      if (!v24) {
        [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      }
      uint64_t v25 = +[MPCloudKit_Manatee sharedInstance];
      [v25 fetchAccessoryKeyBlob:0];
    }
    else
    {
      if ((unint64_t)[v20 length] < 0x99)
      {
LABEL_29:

        goto LABEL_30;
      }
      uint64_t v25 = +[CloudXPCService sharedInstance];
      uint64_t v36 = [v25 deviceManager];
      [v36 addLegacyMagicPairingRecordsWithCloudRecord:v5 userInitiated:0 completion:&stru_100234D18];
    }
    goto LABEL_29;
  }
  if ([v6 code] == (id)26 || objc_msgSend(v6, "code") == (id)11)
  {
    double v11 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "fetchAccessoryKeyBlob CKErrorZoneNotFound or CKErrorUnknownItem", buf, 2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006FE24;
    block[3] = &unk_100232A10;
    void block[4] = *(void *)(a1 + 32);
    id v40 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  else if ([v6 code] == (id)6 || objc_msgSend(v6, "code") == (id)7)
  {
    __int16 v26 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_1001B6C78();
    }

    id v27 = [v6 userInfo];
    id v28 = [v27 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v28)
    {
      id v29 = [v6 userInfo];
      id v30 = [v29 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v30 doubleValue];
      double v32 = v31;

      uint64_t v33 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v42 = (unint64_t)v32;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "MP fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu", buf, 0xCu);
      }

      dispatch_time_t v34 = dispatch_time(0, (uint64_t)(v32 * 1000000000.0));
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_10006FE90;
      v38[3] = &unk_100233750;
      uint64_t v35 = *(void *)(a1 + 40);
      v38[4] = *(void *)(a1 + 32);
      v38[5] = v35;
      dispatch_after(v34, (dispatch_queue_t)&_dispatch_main_q, v38);
    }
  }
LABEL_30:
  [*(id *)(a1 + 32) setIsFetchInProgress:0];
  uint64_t v37 = [&v10[29] sharedInstance];
  [v37 endTransaction:@"fetchAccessoryKeyBlob"];
}

void sub_10006FE24(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:1];
  [*(id *)(a1 + 32) setPauseErrorReason:*(void *)(a1 + 40)];
  id v2 = +[MPCloudKit_Manatee sharedInstance];
  [v2 fetchAccessoryKeyBlob:0];
}

id sub_10006FE90(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_10006FEA0(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B6CE0();
    }
  }
}

void sub_100070228(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B6D48();
    }

    [*(id *)(a1 + 32) handleModifyMasterKeyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48)];
    goto LABEL_22;
  }
  if (v5)
  {
    uint64_t v8 = [v5 encryptedValues];
    int v9 = [v8 objectForKey:@"EncryptedAccessoryBlob"];

    if ([v9 length] == (id)2
      && ([v9 isEqualToData:*(void *)(a1 + 40)] & 1) == 0)
    {
      id v21 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Manatee: Accessory zone has been upgraded. Dont modify non-manate master keys", buf, 2u);
      }

      uint64_t v22 = [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];

      if (!v22) {
        [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      }
      id v17 = +[MPCloudKit_Manatee sharedInstance];
      [v17 modifyKeyBlob:*(void *)(a1 + 40) withRetryCount:0];
    }
    else
    {
      if ([v9 length] != (id)33)
      {
LABEL_21:
        [*(id *)(a1 + 32) setIsWriteMasterKeysInProgress:0];

        goto LABEL_22;
      }
      int64_t v10 = [v5 encryptedValues];
      double v11 = [v10 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
      [*(id *)(a1 + 32) setMasterBlob:v11];

      double v12 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int64_t v13 = [*(id *)(a1 + 32) masterBlob];
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Fetched existing master key record: encryptedBlob %@", buf, 0xCu);
      }
      id v14 = +[CloudXPCService sharedInstance];
      dispatch_time_t v15 = [*(id *)(a1 + 32) masterBlob];
      uint64_t v16 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v15, @"kMasterKeyBlob", 0];
      [v14 sendCloudKitMsg:@"MasterKeysAvailable" args:v16];

      id v17 = +[CloudXPCService sharedInstance];
      unsigned int v18 = [v17 deviceManager];
      [v18 addAccountMagicKeysWithCloudRecord:v5];
    }
    goto LABEL_21;
  }
  id v19 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v25 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "No master key record found: write new key: %@", buf, 0xCu);
  }

  [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:0];
LABEL_22:
  uint64_t v23 = +[CloudXPCService sharedInstance];
  [v23 endTransaction:@"modifyKeyBlob"];
}

id sub_100070900(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100070DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100070E24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100070E34(uint64_t a1)
{
}

void sub_100070E3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v23 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone record  %@", buf, 0xCu);
    }

    id v24 = [*(id *)(a1 + 32) cloudKitDatabase];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    id v27[2] = sub_100071260;
    v27[3] = &unk_100234D68;
    uint64_t v31 = *(void *)(a1 + 80);
    long long v30 = *(_OWORD *)(a1 + 64);
    uint64_t v25 = *(void **)(a1 + 40);
    uint64_t v26 = *(void *)(a1 + 48);
    v27[4] = *(void *)(a1 + 32);
    id v28 = v25;
    id v29 = *(id *)(a1 + 56);
    [v24 saveRecord:v26 completionHandler:v27];

    uint64_t v22 = v28;
    goto LABEL_19;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
  uint64_t v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v36 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone: error %@ ", buf, 0xCu);
  }

  uint64_t v8 = [v6 domain];
  if (![v8 isEqualToString:CKErrorDomain]
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)2
    && [v6 code] != (id)6)
  {

    goto LABEL_21;
  }
  unint64_t v9 = *(void *)(a1 + 80);

  if (v9 <= 3)
  {
    int64_t v10 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 138412546;
      id v36 = v6;
      __int16 v37 = 2048;
      uint64_t v38 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "writeKeyBlob failed with error %@, retry count = %lu", buf, 0x16u);
    }

    double v12 = [v6 userInfo];
    int64_t v13 = [v12 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v13)
    {
      id v14 = [v6 userInfo];
      dispatch_time_t v15 = [v14 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v15 doubleValue];
      double v17 = v16;

      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      dispatch_time_t v18 = dispatch_time(0, (uint64_t)(v17 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10007124C;
      block[3] = &unk_100233AA8;
      id v19 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v20 = v19;
      uint64_t v21 = *(void *)(a1 + 80);
      id v33 = v20;
      uint64_t v34 = v21;
      dispatch_after(v18, (dispatch_queue_t)&_dispatch_main_q, block);
      uint64_t v22 = v33;
LABEL_19:
    }
  }
LABEL_21:
}

id sub_10007124C(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100071260(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v8 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MagicCloudPairingProtectedMasterBlob, saveRecord %@", buf, 0xCu);
    }
    goto LABEL_17;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  uint64_t v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecord: error %@ ", buf, 0xCu);
  }

  uint64_t v8 = [v6 domain];
  if (![v8 isEqualToString:CKErrorDomain]
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)2)
  {
LABEL_17:

    goto LABEL_18;
  }
  unint64_t v9 = *(void *)(a1 + 72);

  if (v9 <= 3)
  {
    int64_t v10 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 138412546;
      id v26 = v6;
      __int16 v27 = 2048;
      uint64_t v28 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "writeKeyBlob:saveRecord failed with error %@, retry count = %lu", buf, 0x16u);
    }

    double v12 = [v6 userInfo];
    int64_t v13 = [v12 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v13)
    {
      id v14 = [v6 userInfo];
      dispatch_time_t v15 = [v14 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v15 doubleValue];
      double v17 = v16;

      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      dispatch_time_t v18 = dispatch_time(0, (uint64_t)(v17 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000715B0;
      block[3] = &unk_100233AA8;
      id v19 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v20 = v19;
      uint64_t v21 = *(void *)(a1 + 72);
      id v23 = v20;
      uint64_t v24 = v21;
      dispatch_after(v18, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
LABEL_18:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_1000715B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100071728(uint64_t a1)
{
  id v2 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 1024;
    int v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "updateCloudKitAccessoryZone with %@, delete: %i", buf, 0x12u);
  }

  id v5 = [*(id *)(a1 + 40) modifyOperationTimer];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 40) modifyOperationTimer];
    [v6 invalidate];
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000718B0;
  v10[3] = &unk_100234DE0;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v7;
  uint64_t v12 = v8;
  char v13 = *(unsigned char *)(a1 + 48);
  unint64_t v9 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:v10 block:3.0];
  [*(id *)(a1 + 40) setModifyOperationTimer:v9];
}

void sub_1000718B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating Accessory Zone Now with %@", buf, 0xCu);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  id v6 = [*(id *)(a1 + 40) modifyOperationQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_100071A50;
  v7[3] = &unk_100234DB8;
  char v10 = *(unsigned char *)(a1 + 48);
  objc_copyWeak(&v9, (id *)buf);
  id v8 = *(id *)(a1 + 32);
  [v6 addOperationWithBlock:v7];

  objc_destroyWeak(&v9);
  objc_destroyWeak((id *)buf);
}

void sub_100071A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100071A50(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (v2) {
    [WeakRetained deleteCloudKitAccessoryZone];
  }
  else {
    [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
  }
}

void sub_100071CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100071CF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (v6)
  {
    id v8 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001B6E90();
    }

    [WeakRetained handleAccessoryKeyModifyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 56)];
  }
  else if (v5)
  {
    id v9 = [v5 encryptedValues];
    char v10 = [v9 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];

    if ([v10 length] == (id)4
      && ([v10 isEqualToData:*(void *)(a1 + 40)] & 1) == 0)
    {
      uint64_t v22 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Master zone has been upgraded. Dont non-manatee accessory keys", buf, 2u);
      }

      id v23 = [WeakRetained readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];
      BOOL v24 = v23 == 0;

      if (v24) {
        [WeakRetained setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      }
      uint64_t v25 = +[MPCloudKit_Manatee sharedInstance];
      [v25 modifyAccessoryBlob:*(void *)(a1 + 40) withRetryCount:0];
    }
    else
    {
      unsigned __int8 v11 = [v10 isEqualToData:*(void *)(a1 + 40)];
      uint64_t v12 = sub_10006CA04("MagicPairing");
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Dropping same modify record: MagicCloudPairingProtectedAccessoryBlob", buf, 2u);
        }
      }
      else
      {
        if (v13)
        {
          uint64_t v16 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          uint64_t v31 = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "modify record: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0xCu);
        }

        uint64_t v17 = *(void *)(a1 + 40);
        dispatch_time_t v18 = [v5 encryptedValues];
        [v18 setObject:v17 forKeyedSubscript:@"EncryptedAccessoryBlob"];

        objc_initWeak((id *)buf, WeakRetained);
        id v19 = [WeakRetained cloudKitDatabase];
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100072114;
        v26[3] = &unk_100234E30;
        id v27 = v5;
        objc_copyWeak(v29, (id *)buf);
        id v20 = *(id *)(a1 + 40);
        uint64_t v21 = *(void **)(a1 + 56);
        id v28 = v20;
        v29[1] = v21;
        [v19 saveRecord:v27 completionHandler:v26];

        objc_destroyWeak(v29);
        objc_destroyWeak((id *)buf);
      }
    }
  }
  else
  {
    id v14 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v31 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No record found: write new data: %@", buf, 0xCu);
    }

    [WeakRetained writeAccessoryBlob:*(void *)(a1 + 40) withRetryCount:0];
  }
}

void sub_1000720E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100072114(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B6EF8();
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained handleAccessoryKeyModifyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 56)];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully saved the modified record - %@", buf, 0xCu);
    }

    char v10 = +[CloudXPCService sharedInstance];
    unsigned __int8 v11 = [v10 deviceManager];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100072334;
    v15[3] = &unk_100232738;
    id v16 = v5;
    [v11 addLegacyMagicPairingRecordsWithCloudRecord:v16 userInitiated:1 completion:v15];

    uint64_t v12 = +[CloudXPCService sharedInstance];
    BOOL v13 = +[NSNumber numberWithBool:1];
    id v14 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v13, @"kUploadStatus", 0];
    [v12 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v14];

    id WeakRetained = v16;
  }
}

void sub_100072334(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B6F60();
    }
  }
}

void sub_100072924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100072950(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v2 = [*(id *)(a1 + 32) modifyOperationQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100072A50;
  v5[3] = &unk_100234E58;
  objc_copyWeak(v7, &location);
  id v3 = *(id *)(a1 + 40);
  id v4 = *(void **)(a1 + 48);
  id v6 = v3;
  v7[1] = v4;
  [v2 addOperationWithBlock:v5];

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100072A2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100072A50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100072AA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained writeAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
}

void sub_100072E54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob saveRecordZone: error %@ ", buf, 0xCu);
    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000730A4;
    block[3] = &unk_100232710;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    id v8 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "saveRecordZone record %@, resume fetches", buf, 0xCu);
    }

    id v9 = [*(id *)(a1 + 32) modifyOperationQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1000730E8;
    v14[3] = &unk_100234EA8;
    char v10 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 32);
    id v11 = v10;
    uint64_t v12 = *(void *)(a1 + 64);
    id v15 = v11;
    uint64_t v17 = v12;
    id v16 = *(id *)(a1 + 48);
    [v9 addOperationWithBlock:v14];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  BOOL v13 = +[CloudXPCService sharedInstance];
  [v13 endTransaction:@"WriteAccessoryBlob"];
}

id sub_1000730A4(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:0];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setPauseErrorReason:0];
}

void sub_1000730E8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cloudKitDatabase];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1000731A0;
  v6[3] = &unk_100234D40;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  void v6[4] = v3;
  id v7 = v5;
  [v2 saveRecord:v4 completionHandler:v6];
}

void sub_1000731A0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  uint64_t v8 = v7;
  if (!v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v42 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob createRecordZone record  %@", buf, 0xCu);
    }

    char v10 = +[CloudXPCService sharedInstance];
    id v11 = [v10 deviceManager];
    id v33 = _NSConcreteStackBlock;
    uint64_t v34 = 3221225472;
    uint64_t v35 = sub_100073744;
    id v36 = &unk_100232738;
    id v37 = v5;
    [v11 addLegacyMagicPairingRecordsWithCloudRecord:v37 userInitiated:1 completion:&v33];

    uint64_t v12 = +[CloudXPCService sharedInstance];
    BOOL v13 = +[NSNumber numberWithBool:1];
    id v14 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v13, @"kUploadStatus", 0, v33, v34, v35, v36];
    [v12 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v14];

    id v15 = v37;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1001B7238();
  }

  if (a1[6] >= 5uLL)
  {
    id v9 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001B7168();
    }
LABEL_19:

    goto LABEL_20;
  }
  id v16 = [v6 domain];
  if ([v16 isEqualToString:CKErrorDomain])
  {
    if ([v6 code] == (id)3 || objc_msgSend(v6, "code") == (id)4 || objc_msgSend(v6, "code") == (id)9)
    {

LABEL_16:
      uint64_t v17 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_1001B71D0();
      }

      id v9 = +[CloudXPCService sharedInstance];
      id v18 = +[NSNumber numberWithBool:0];
      id v19 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v18, @"kUploadStatus", 0];
      [v9 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v19];

      goto LABEL_19;
    }
    id v32 = [v6 code];

    if (v32 == (id)6) {
      goto LABEL_16;
    }
  }
  else
  {
  }
  if ([v6 code] == (id)7)
  {
    id v20 = [v6 userInfo];
    uint64_t v21 = [v20 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v21)
    {
      uint64_t v22 = [v6 userInfo];
      id v23 = [v22 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v23 doubleValue];
      double v25 = v24 + 5.0;

      id v26 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = a1[6];
        *(_DWORD *)buf = 138412802;
        id v42 = v6;
        __int16 v43 = 2048;
        uint64_t v44 = v27;
        __int16 v45 = 2048;
        unint64_t v46 = (unint64_t)v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob failed with error %@, retry count = %lu, retry time: %lu", buf, 0x20u);
      }

      dispatch_time_t v28 = dispatch_time(0, (uint64_t)(v25 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100073688;
      block[3] = &unk_100233AA8;
      id v29 = (void *)a1[5];
      void block[4] = a1[4];
      id v30 = v29;
      uint64_t v31 = a1[6];
      id v39 = v30;
      uint64_t v40 = v31;
      dispatch_after(v28, (dispatch_queue_t)&_dispatch_main_q, block);
      id v15 = v39;
LABEL_10:
    }
  }
LABEL_20:
}

void sub_100073688(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) modifyOperationQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_100073730;
  v6[3] = &unk_100233AA8;
  uint64_t v3 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  [v2 addOperationWithBlock:v6];
}

id sub_100073730(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyAccessoryBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100073744(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    uint64_t v3 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B72AC();
    }
  }
}

void sub_1000739D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = sub_10006CA04("MagicPairing");
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v4;
      id v7 = "deleteCloudKitAccessoryZone: error %@ ";
      uint64_t v8 = v5;
      uint32_t v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
    }
  }
  else if (v6)
  {
    *(_WORD *)buf = 0;
    id v7 = "Successfully deleted record";
    uint64_t v8 = v5;
    uint32_t v9 = 2;
    goto LABEL_6;
  }

  char v10 = +[CloudXPCService sharedInstance];
  id v11 = +[NSNumber numberWithInt:v4 == 0, @"kUploadStatus"];
  id v14 = v11;
  uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
  [v10 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v12];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100073B5C(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001B7314();
  }
}

void sub_100073FE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B73E4();
    }

    uint32_t v9 = [v6 userInfo];
    char v10 = [v9 objectForKeyedSubscript:NSUnderlyingErrorKey];

    id v11 = [v6 domain];
    if (![v11 isEqualToString:CKErrorDomain] || !CKErrorIsCode() || !v10) {
      goto LABEL_12;
    }
    id v12 = [v10 code];

    if (v12 == (id)2032 && *(void *)(a1 + 32))
    {
      uint64_t v13 = [v6 localizedDescription];
      id v14 = [v13 rangeOfString:@"'"];
      uint64_t v16 = v15;

      uint64_t v17 = [v6 localizedDescription];
      id v18 = [v17 rangeOfString:@"'" options:4];

      id v19 = &v14[v16];
      int64_t v20 = v18 - &v14[v16];
      uint64_t v21 = [v6 localizedDescription];
      id v11 = [v21 substringWithRange:v19, v20];

      uint64_t v22 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_1001B737C();
      }

      [*(id *)(a1 + 40) verifyAndCacheSubscriptionID:v11];
LABEL_12:
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = 138412290;
      id v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "saveSubscription record  %@", (uint8_t *)&v26, 0xCu);
    }

    uint64_t v25 = a1 + 32;
    uint64_t v23 = *(void *)(a1 + 32);
    double v24 = *(void **)(v25 + 8);
    char v10 = [v5 subscriptionID];
    [v24 setuserPreference:v23 value:v10 sync:1];
  }
}

void sub_1000744A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B74B4();
    }

    uint32_t v9 = [v6 domain];
    if ([v9 isEqualToString:CKErrorDomain])
    {
      id v10 = [v6 code];

      if (v10 == (id)26)
      {
        [*(id *)(a1 + 40) removeuserPreference:*(void *)(a1 + 48) sync:1];
        [*(id *)(a1 + 40) createSubscritionForRecordType:*(void *)(a1 + 56)];
      }
      goto LABEL_16;
    }
LABEL_15:

    goto LABEL_16;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 138412290;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found existing subscription - %@", (uint8_t *)&v18, 0xCu);
  }

  id v11 = *(void **)(a1 + 32);
  id v12 = [v5 subscriptionID];
  unsigned int v13 = [v11 isEqualToString:v12];

  id v14 = sub_10006CA04("MagicPairing");
  uint32_t v9 = v14;
  if (!v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1001B744C();
    }
    goto LABEL_15;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 138412290;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: Already created this subscription - %@", (uint8_t *)&v18, 0xCu);
  }

  uint64_t v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = [v5 subscriptionID];
  [v15 setuserPreference:v16 value:v17 sync:1];

  [*(id *)(a1 + 40) setCloudSubscription:v5];
LABEL_16:
}

void sub_100074844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100074870(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (!a3)
    {
      id v7 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 138412290;
        id v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found subscription - %@", (uint8_t *)&v13, 0xCu);
      }

      uint64_t v8 = *(void **)(a1 + 32);
      uint32_t v9 = [v5 subscriptionID];
      LODWORD(v_Block_object_dispose(&STACK[0x290], 8) = [v8 isEqualToString:v9];

      if (v8)
      {
        id v10 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 138412290;
          id v14 = v5;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Already have subscription - %@", (uint8_t *)&v13, 0xCu);
        }

        id v11 = [v5 subscriptionID];
        [WeakRetained setuserPreference:@"MagicCloudPairingAccessorySubscriptionID" value:v11 sync:1];

        [WeakRetained setCloudSubscription:v5];
      }
    }
  }
  else
  {
    id v12 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1001B751C();
    }
  }
}

void sub_100074BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 64));
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100074C08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v19 = a3;
  id val = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "fetchAllSubscriptionsWithCompletionHandler: error %@ ", buf, 0xCu);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v25;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v7);
        }
        id v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v12 = v11;
          int v13 = [v12 recordType];
          unsigned int v14 = [v13 isEqualToString:*(void *)(a1 + 32)];

          if (v14)
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
            uint64_t v15 = sub_10006CA04("MagicPairing");
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v16 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              id v29 = v16;
              __int16 v30 = 2112;
              id v31 = v12;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Delete Subscription for record type: %@ and sub: %@", buf, 0x16u);
            }

            objc_initWeak((id *)buf, val);
            uint64_t v17 = [val cloudKitDatabase];
            uint64_t v18 = [v12 subscriptionID];
            v21[0] = _NSConcreteStackBlock;
            v21[1] = 3221225472;
            v21[2] = sub_100074F7C;
            void v21[3] = &unk_100234FB8;
            id v22 = *(id *)(a1 + 32);
            objc_copyWeak(&v23, (id *)buf);
            [v17 deleteSubscriptionWithID:v18 completionHandler:v21];

            objc_destroyWeak(&v23);
            objc_destroyWeak((id *)buf);
          }
        }
      }
      id v8 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v8);
  }

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    [val setuserPreference:@"MagicPairingMasterKeySubscriptionDisabled" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_100074F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100074F7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = sub_10006CA04("MagicPairing");
  BOOL v8 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v9;
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Error Deleting Subscription for record type: %@ with error: %@ ", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Successfully deleted Subscription for record type - %@ with ID - %@", (uint8_t *)&v11, 0x16u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained setuserPreference:@"MagicPairingMasterKeySubscriptionDisabled" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_100075368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100075394(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error getting server preferred push environment %@", (uint8_t *)&v11, 0xCu);
    }
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
  id v10 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100075C08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100075C44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  int v11 = [v9 recordName];
  id v12 = [*(id *)(a1 + 32) recordName];
  unsigned int v13 = [v11 isEqual:v12];

  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 48);
  }
  else
  {
    uint64_t v15 = [v9 recordName];
    id v12 = [*(id *)(a1 + 40) recordName];
    unsigned int v16 = [v15 isEqual:v12];

    if (!v16) {
      goto LABEL_6;
    }
    uint64_t v14 = *(void *)(a1 + 56);
  }
  objc_storeStrong((id *)(*(void *)(v14 + 8) + 40), a2);
LABEL_6:
  if (v10)
  {
    uint64_t v17 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1001B7550();
    }
  }
  else
  {
    int v18 = IsAppleInternalBuild();
    uint64_t v17 = sub_10006CA04("MagicPairing");
    BOOL v19 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      if (v19)
      {
        int64_t v20 = [v8 encryptedValues];
        uint64_t v21 = [v20 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
        id v22 = v21;
        if (!v21)
        {
          id v12 = [v8 encryptedValues];
          id v22 = [v12 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
        }
        int v23 = 138412546;
        id v24 = v8;
        __int16 v25 = 2112;
        long long v26 = v22;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@", (uint8_t *)&v23, 0x16u);
        if (!v21)
        {
        }
      }
    }
    else if (v19)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record", (uint8_t *)&v23, 2u);
    }
  }
}

void sub_100075EB0(uint64_t a1)
{
  __int16 v29 = -1;
  id v2 = +[NSData dataWithBytes:&v29 length:2];
  int v28 = -1;
  uint64_t v3 = +[NSData dataWithBytes:&v28 length:4];
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (v4)
  {
    id v5 = [v4 encryptedValues];
    id v6 = [v5 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
    unsigned int v7 = [v2 isEqualToData:v6];

    if (v7) {
      goto LABEL_7;
    }
  }
  else
  {
    id v8 = [objc_alloc((Class)CKRecord) initWithRecordType:@"MasterKey" recordID:*(void *)(a1 + 40)];
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  int v11 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  if (!v11)
  {
    id v15 = [objc_alloc((Class)CKRecord) initWithRecordType:@"AccessoryDatabase" recordID:*(void *)(a1 + 48)];
    uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    goto LABEL_9;
  }
  id v12 = [v11 encryptedValues];
  unsigned int v13 = [v12 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
  unsigned int v14 = [v3 isEqualToData:v13];

  if (!v14)
  {
LABEL_9:
    int v18 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) encryptedValues];
    [v18 setObject:v2 forKeyedSubscript:@"EncryptedMasterKeyBlob"];

    BOOL v19 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) encryptedValues];
    [v19 setObject:v3 forKeyedSubscript:@"EncryptedAccessoryBlob"];

    id v20 = objc_alloc((Class)CKModifyRecordZonesOperation);
    uint64_t v21 = [*(id *)(a1 + 32) recordZoneBlob];
    v30[0] = v21;
    id v22 = [*(id *)(a1 + 32) recordZoneAccessoryDatabase];
    v30[1] = v22;
    int v23 = +[NSArray arrayWithObjects:v30 count:2];
    id v24 = [v20 initWithRecordZonesToSave:v23 recordZoneIDsToDelete:0];

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000761CC;
    v25[3] = &unk_100235080;
    uint64_t v27 = *(void *)(a1 + 72);
    v25[4] = *(void *)(a1 + 32);
    long long v26 = *(_OWORD *)(a1 + 56);
    [v24 setModifyRecordZonesCompletionBlock:v25];
    [*(id *)(a1 + 56) addOperation:v24];

    goto LABEL_10;
  }
LABEL_7:
  [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
LABEL_10:
}

void sub_1000761CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = sub_10006CA04("MagicPairing");
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (v7) {
      sub_1001B7628();
    }
  }
  else
  {
    if (v7) {
      sub_1001B75B8(v6, v8, v9, v10, v11, v12, v13, v14);
    }

    id v15 = objc_alloc((Class)CKModifyRecordsOperation);
    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    v19[0] = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    v19[1] = v16;
    uint64_t v17 = +[NSArray arrayWithObjects:v19 count:2];
    id v6 = [v15 initWithRecordsToSave:v17 recordIDsToDelete:0];

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100076340;
    v18[3] = &unk_100235058;
    v18[4] = *(void *)(a1 + 32);
    [v6 setModifyRecordsCompletionBlock:v18];
    [*(id *)(a1 + 40) addOperation:v6];
  }
}

void sub_100076340(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = sub_10006CA04("MagicPairing");
  uint64_t v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001B7690();
    }
LABEL_4:

    goto LABEL_23;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v32 = v7;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " >>> Successfully Marked LegacyNonManateeContainer Migrated %@", buf, 0xCu);
  }

  if (IsAppleInternalBuild())
  {
    uint64_t v22 = a1;
    uint64_t v23 = 0;
    id v24 = v8;
    id v25 = v7;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id obj = v7;
    id v12 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v28;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v28 != v14) {
            objc_enumerationMutation(obj);
          }
          uint64_t v16 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          uint64_t v17 = sub_10006CA04("MagicPairing");
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = [v16 encryptedValues];
            BOOL v19 = [v18 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
            id v20 = v19;
            if (!v19)
            {
              a3 = [v16 encryptedValues];
              uint64_t v11 = [a3 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
              id v20 = v11;
            }
            *(_DWORD *)buf = 138412546;
            id v32 = v16;
            __int16 v33 = 2112;
            uint64_t v34 = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " >>> Successfully Marked LegacyNonManateeContainer Record %@, %@", buf, 0x16u);
            if (!v19)
            {
            }
          }
        }
        id v13 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
      }
      while (v13);
    }

    id v8 = v24;
    id v7 = v25;
    id v9 = 0;
  }
  uint64_t v21 = [*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount" v22, v23, v24, v25];

  if (!v21)
  {
    [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
    uint64_t v11 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, ">>> Successfully Marked Defaults for Legacy Container zone upgraded successfully", buf, 2u);
    }
    goto LABEL_4;
  }
LABEL_23:
}

void sub_100076B1C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100076B50(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = [v9 recordName];
  id v12 = [*(id *)(a1 + 32) recordName];
  unsigned int v13 = [v11 isEqual:v12];

  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 48);
  }
  else
  {
    id v15 = [v9 recordName];
    id v12 = [*(id *)(a1 + 40) recordName];
    unsigned int v16 = [v15 isEqual:v12];

    if (!v16) {
      goto LABEL_6;
    }
    uint64_t v14 = *(void *)(a1 + 56);
  }
  objc_storeStrong((id *)(*(void *)(v14 + 8) + 40), a2);
LABEL_6:
  if (v10)
  {
    uint64_t v17 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_1001B7550();
    }
  }
  else
  {
    int v18 = IsAppleInternalBuild();
    uint64_t v17 = sub_10006CA04("MagicPairing");
    BOOL v19 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      if (v19)
      {
        id v20 = [v8 encryptedValues];
        uint64_t v21 = [v20 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
        uint64_t v22 = v21;
        if (!v21)
        {
          id v12 = [v8 encryptedValues];
          uint64_t v22 = [v12 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
        }
        int v23 = 138412546;
        id v24 = v8;
        __int16 v25 = 2112;
        long long v26 = v22;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@", (uint8_t *)&v23, 0x16u);
        if (!v21)
        {
        }
      }
    }
    else if (v19)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record", (uint8_t *)&v23, 2u);
    }
  }
}

void sub_100076DBC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) encryptedValues];
  uint64_t v3 = [v2 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
  id v4 = [v3 length];

  if (v4 == (id)33)
  {
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) encryptedValues];
    id v6 = [v5 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
    id v7 = [v6 length];

    if ((unint64_t)v7 <= 0x99)
    {
      uint64_t v14 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1001B7794();
      }
    }
    else
    {
      id v8 = objc_alloc((Class)CKModifyRecordZonesOperation);
      id v9 = +[MPCloudKit_Manatee sharedInstance];
      id v10 = [v9 recordZoneBlob];
      v21[0] = v10;
      uint64_t v11 = +[MPCloudKit_Manatee sharedInstance];
      id v12 = [v11 recordZoneAccessoryDatabase];
      v21[1] = v12;
      unsigned int v13 = +[NSArray arrayWithObjects:v21 count:2];
      uint64_t v14 = [v8 initWithRecordZonesToSave:v13 recordZoneIDsToDelete:0];

      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100077034;
      v16[3] = &unk_1002350F8;
      id v17 = *(id *)(a1 + 32);
      id v18 = *(id *)(a1 + 40);
      long long v15 = *(_OWORD *)(a1 + 48);
      long long v20 = *(_OWORD *)(a1 + 64);
      long long v19 = v15;
      [v14 setModifyRecordZonesCompletionBlock:v16];
      [*(id *)(a1 + 56) addOperation:v14];
    }
  }
  else
  {
    uint64_t v14 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1001B77C8();
    }
  }
}

void sub_100077034(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = sub_10006CA04("MagicPairing");
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v9)
  {
    if (v11) {
      sub_1001B7830();
    }
  }
  else
  {
    if (v11) {
      sub_1001B77FC();
    }

    uint64_t v36 = 0;
    id v37 = &v36;
    uint64_t v38 = 0x3032000000;
    id v39 = sub_100070E24;
    uint64_t v40 = sub_100070E34;
    id v41 = [objc_alloc((Class)CKRecord) initWithRecordType:@"MasterKey" recordID:*(void *)(a1 + 32)];
    uint64_t v30 = 0;
    id v31 = &v30;
    uint64_t v32 = 0x3032000000;
    __int16 v33 = sub_100070E24;
    uint64_t v34 = sub_100070E34;
    id v35 = [objc_alloc((Class)CKRecord) initWithRecordType:@"AccessoryDatabase" recordID:*(void *)(a1 + 40)];
    id v12 = objc_alloc((Class)CKFetchRecordsOperation);
    unsigned int v13 = [(id)v37[5] recordID];
    v42[0] = v13;
    uint64_t v14 = [(id)v31[5] recordID];
    v42[1] = v14;
    long long v15 = +[NSArray arrayWithObjects:v42 count:2];
    id v16 = [v12 initWithRecordIDs:v15];

    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000773A4;
    v25[3] = &unk_100235030;
    id v26 = *(id *)(a1 + 32);
    long long v28 = &v36;
    id v27 = *(id *)(a1 + 40);
    long long v29 = &v30;
    [v16 setPerRecordCompletionBlock:v25];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100077614;
    v19[3] = &unk_1002350D0;
    uint64_t v17 = *(void *)(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v21 = &v36;
    uint64_t v22 = v17;
    int v23 = &v30;
    uint64_t v24 = v18;
    long long v20 = *(_OWORD *)(a1 + 48);
    [v16 setCompletionBlock:v19];
    [*(id *)(a1 + 56) addOperation:v16];

    _Block_object_dispose(&v30, 8);
    _Block_object_dispose(&v36, 8);
  }
}

void sub_100077370(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_1000773A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v10)
  {
    BOOL v11 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1001B7550();
    }
    goto LABEL_18;
  }
  int v12 = IsAppleInternalBuild();
  unsigned int v13 = sub_10006CA04("MagicPairing");
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v14)
    {
      long long v15 = [v8 encryptedValues];
      id v16 = [v15 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
      uint64_t v17 = v16;
      if (!v16)
      {
        id v4 = [v8 encryptedValues];
        uint64_t v17 = [v4 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
      }
      int v27 = 138412546;
      id v28 = v8;
      __int16 v29 = 2112;
      uint64_t v30 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record %@, %@", (uint8_t *)&v27, 0x16u);
      if (!v16)
      {
      }
    }
  }
  else if (v14)
  {
    LOWORD(v27) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " >>> Successfully fetched LegacyNonManateeContainer Record", (uint8_t *)&v27, 2u);
  }

  uint64_t v18 = [v9 recordName];
  long long v19 = [*(id *)(a1 + 32) recordName];
  unsigned int v20 = [v18 isEqual:v19];

  if (v20)
  {
    uint64_t v21 = *(void *)(a1 + 48);
LABEL_17:
    uint64_t v25 = *(void *)(v21 + 8);
    id v26 = v8;
    BOOL v11 = *(NSObject **)(v25 + 40);
    *(void *)(v25 + 40) = v26;
LABEL_18:

    goto LABEL_19;
  }
  uint64_t v22 = [v9 recordName];
  int v23 = [*(id *)(a1 + 40) recordName];
  unsigned int v24 = [v22 isEqual:v23];

  if (v24)
  {
    uint64_t v21 = *(void *)(a1 + 56);
    goto LABEL_17;
  }
LABEL_19:
}

void sub_100077614(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) encryptedValues];
  uint64_t v3 = [v2 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) encryptedValues];
  [v4 setObject:v3 forKeyedSubscript:@"EncryptedMasterKeyBlob"];

  id v5 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) encryptedValues];
  id v6 = [v5 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
  id v7 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) encryptedValues];
  [v7 setObject:v6 forKeyedSubscript:@"EncryptedAccessoryBlob"];

  id v8 = objc_alloc((Class)CKModifyRecordsOperation);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  v13[0] = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v13[1] = v9;
  id v10 = +[NSArray arrayWithObjects:v13 count:2];
  id v11 = [v8 initWithRecordsToSave:v10 recordIDsToDelete:0];

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100077800;
  v12[3] = &unk_100235058;
  v12[4] = *(void *)(a1 + 32);
  [v11 setModifyRecordsCompletionBlock:v12];
  [*(id *)(a1 + 40) addOperation:v11];
}

void sub_100077800(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = sub_10006CA04("MagicPairing");
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001B7898();
    }
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " >>> Successfully Upgraded to Legacy ManateeContainer Migrated %@", buf, 0xCu);
    }

    if (IsAppleInternalBuild())
    {
      uint64_t v21 = a1;
      uint64_t v22 = 0;
      id v23 = v8;
      id v24 = v7;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id obj = v7;
      id v12 = [obj countByEnumeratingWithState:&v26 objects:v34 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v27;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(void *)v27 != v14) {
              objc_enumerationMutation(obj);
            }
            id v16 = *(void **)(*((void *)&v26 + 1) + 8 * i);
            uint64_t v17 = sub_10006CA04("MagicPairing");
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v18 = [v16 encryptedValues];
              long long v19 = [v18 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
              unsigned int v20 = v19;
              if (!v19)
              {
                id v8 = [v16 encryptedValues];
                id v11 = [v8 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];
                unsigned int v20 = v11;
              }
              *(_DWORD *)buf = 138412546;
              id v31 = v16;
              __int16 v32 = 2112;
              __int16 v33 = v20;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " >>> Successfully Upgraded to Legacy ManateeContainer Record %@, %@", buf, 0x16u);
              if (!v19)
              {
              }
            }
          }
          id v13 = [obj countByEnumeratingWithState:&v26 objects:v34 count:16];
        }
        while (v13);
      }

      id v8 = v23;
      id v7 = v24;
      a1 = v21;
      id v9 = 0;
    }
    [*(id *)(a1 + 32) markLegacyNonManateeContainerMigrated:v21, v22, v23, v24];
  }
}

void sub_100077C84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v9 = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "deleteLegacyMasterKey deleteRecordWithID: error %@ ", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    if (v8)
    {
      int v9 = 138412290;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "deleteLegacyMasterKey deleteRecordWithID record:  %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) setuserPreference:@"kMagicPairingLegacyMasterKeyRemoved" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_1000781F4(id a1, CKRecordZoneID *a2, NSError *a3)
{
  uint64_t v3 = a3;
  id v4 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, ">>> resetOldZones recordZoneBlob: error %@ ", (uint8_t *)&v5, 0xCu);
  }
}

void sub_1000782A8(id a1, CKRecordZoneID *a2, NSError *a3)
{
  uint64_t v3 = a3;
  id v4 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, ">>> resetOldZones recordZoneAccessoryDatabase: error %@ ", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10007835C(id a1, CKRecordZoneID *a2, NSError *a3)
{
  uint64_t v3 = a3;
  id v4 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, ">>> Manatee: resetOldZones recordZoneBlob: error %@ ", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100078410(id a1, CKRecordZoneID *a2, NSError *a3)
{
  uint64_t v3 = a3;
  id v4 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, ">>> Manatee:  resetOldZones recordZoneAccessoryDatabase: error %@ ", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100078764(uint64_t a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_11;
  }
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 recordZoneID];
  id v4 = [v3 zoneName];
  unsigned int v5 = [v4 isEqualToString:@"MagicCloudPairingCustomKeyBlobZone"];

  if (!v5)
  {
LABEL_10:

LABEL_11:
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100078920;
    block[3] = &unk_100232710;
    void block[4] = *(void *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    return;
  }
  id v6 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "*****>>>> Master Key Updated", buf, 2u);
  }

  if (([*(id *)(a1 + 40) isWriteMasterKeysInProgress] & 1) == 0)
  {
    [*(id *)(a1 + 40) setMasterBlob:0];
    [*(id *)(a1 + 40) fetchKeyBlob:0];
    goto LABEL_10;
  }
  id v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "*****>>>> Master Key Updated but we are in process to push new key. Dont fetch", buf, 2u);
  }
}

id sub_100078920(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:0];
  [*(id *)(a1 + 32) setPauseErrorReason:0];
  id v2 = *(void **)(a1 + 32);

  return [v2 fetchAccessoryKeyBlob:0];
}

void sub_100078DCC(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x290], 8) = a1;
}

void sub_100079384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
}

void sub_1000793D0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isWatchingBuddy]
    && +[BTSystemConfiguration isBuddyComplete])
  {
    id v2 = [*(id *)(a1 + 32) block];
    v2[2]();
  }
}

void sub_100079454(uint64_t a1)
{
  id v2 = (void *)qword_10026AAD8;
  if (os_log_type_enabled((os_log_t)qword_10026AAD8, OS_LOG_TYPE_DEBUG)) {
    sub_1001B7A88(a1, v2);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained directoryChanged];
}

void sub_1000794B4(uint64_t a1)
{
  id v2 = (void *)qword_10026AAD8;
  if (os_log_type_enabled((os_log_t)qword_10026AAD8, OS_LOG_TYPE_DEBUG)) {
    sub_1001B7B30(a1, v2);
  }
  uint64_t v3 = (void *)qword_10026AAD8;
  if (os_log_type_enabled((os_log_t)qword_10026AAD8, OS_LOG_TYPE_DEBUG)) {
    sub_1001B7B30(a1, v3);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained cancel];
}

void sub_10007972C(uint64_t a1)
{
  notify_cancel(*(_DWORD *)(a1 + 40));
  id v2 = qword_10026AAD8;
  if (os_log_type_enabled((os_log_t)qword_10026AAD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Buddy complete notification callback", v5, 2u);
  }
  uint64_t v3 = [*(id *)(a1 + 32) block];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) block];
    v4[2]();
  }
}

void sub_1000798D4(uint64_t a1)
{
  notify_cancel(*(_DWORD *)(a1 + 40));
  id v2 = qword_10026AAD8;
  if (os_log_type_enabled((os_log_t)qword_10026AAD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "device unlocked after boot callback", v5, 2u);
  }
  uint64_t v3 = [*(id *)(a1 + 32) block];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) block];
    v4[2]();
  }
}

void sub_100079C08(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) block];
  v1[2]();
}

void sub_100079D14(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) block];
  v1[2]();
}

void sub_100079F60(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_100079F80()
{
  return v0;
}

void sub_100079FE0(id a1)
{
  uint64_t v1 = objc_alloc_init(BTUserCloudServicesDaemon);
  uint64_t v2 = qword_100263EF0;
  qword_100263EF0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10007A388(uint64_t a1)
{
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _activate];
}

uint64_t sub_10007A4E0(uint64_t a1)
{
  return _CUStateDumpWithObject("BTUserCloudServices", *(void *)(a1 + 32), &dword_100261308);
}

id sub_10007A570(uint64_t a1)
{
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _invalidate];
}

void sub_10007AC7C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_10007AC9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _xpcConnectionInvalidated:*(void *)(a1 + 32)];
}

void sub_10007B114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B150(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007B160(uint64_t a1)
{
}

uint64_t sub_10007B168(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_10007B654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007B690(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_10007B76C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_10007BA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007BA68(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_10007BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007BD84(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_10007C09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C0D8(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007C474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C4B0(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007C7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C824(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007C8C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_10007CBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007CC30(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007CCD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  if (dword_100261308 <= 30)
  {
    if (dword_100261308 != -1 || (int v4 = _LogCategory_Initialize(), v3 = v8, v4))
    {
      id v7 = v3;
      LogPrintF();
      id v3 = v8;
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v3, v7);
  (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0);
}

void sub_10007CFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D020(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007D300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D33C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007D674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D6B0(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007D750(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_10007DA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007DABC(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007DB5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_10007DE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007DE90(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007E170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E1AC(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007E48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E4C8(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007E800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007E83C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007E8DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_10007EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007EC48(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007ECE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
}

void sub_10007EFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007F01C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007F354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007F394(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261308 <= 90)
    {
      if (dword_100261308 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

void sub_10007F720(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007F75C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_10007F838(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [*(id *)(a1 + 32) dispatchQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10007F91C;
  v8[3] = &unk_1002352F8;
  id v9 = v3;
  id v11 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  id v10 = v5;
  uint64_t v12 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

uint64_t sub_10007F91C(void *a1)
{
  if (a1[4])
  {
    if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  }
  else
  {
    if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v3 = a1[6];
    uint64_t v4 = BTErrorF();
    uint64_t v5 = *(void *)(a1[7] + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    uint64_t v2 = *(uint64_t (**)(void))(v3 + 16);
  }

  return v2();
}

void sub_10007FD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007FD88(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_1000800C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  (*(void (**)(uint64_t))(v17 + 16))(v17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100080104(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_1000801E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_10008029C;
  v6[3] = &unk_100232620;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_10008029C(uint64_t a1)
{
  if (dword_100261308 <= 30 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_100080544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100080580(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_100080860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008089C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_100080D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100080D4C(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_1000811B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100081204(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_1000812D8(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10008138C;
  v5[3] = &unk_100232620;
  id v6 = a2;
  id v3 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  dispatch_async(v3, v5);
}

void sub_10008138C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v1 = +[CloudXPCService sharedInstance];
  [v1 endTransaction:@"createSoundProfileRecordURL"];
}

void sub_100081684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000816C0(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_100081798(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008186C;
  block[3] = &unk_100235370;
  id v11 = a3;
  id v6 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v12 = v5;
  id v13 = v7;
  id v8 = v5;
  id v9 = v11;
  dispatch_async(v6, block);
}

void sub_10008186C(void *a1)
{
  if (a1[4])
  {
    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    if (v1)
    {
      (*(void (**)(void, uint64_t, void))(v2 + 16))(a1[6], v1, 0);
    }
    else
    {
      id v3 = BTErrorF();
      (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0, v3);
    }
  }
  id v4 = +[CloudXPCService sharedInstance];
  [v4 endTransaction:@"fetchSoundProfileRecord"];
}

void sub_100081BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100081BF0(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261308 <= 90 && (dword_100261308 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_100081CC4(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100081D78;
  v5[3] = &unk_100232620;
  id v6 = a2;
  id v3 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  dispatch_async(v3, v5);
}

uint64_t sub_100081D78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100081EC8(id a1)
{
  uint64_t v1 = objc_alloc_init(CloudXPCService);
  uint64_t v2 = qword_100263F00;
  qword_100263F00 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100082190(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sigTermReceived];
}

void sub_100082584(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1000825DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained axHeadTrackingSettingChanged];
}

void sub_10008261C(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleEvent:v3];
}

void sub_100082678(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  CFStringRef v6 = @"kOnlineStatus";
  uint64_t v4 = +[NSNumber numberWithBool:a2];
  id v7 = v4;
  id v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  [WeakRetained sendCloudKitMsg:@"OnlineStatusChanged" argsObject:v5];
}

void sub_100082824(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) activeTransactions];
  [v1 removeAllObjects];
}

void sub_1000828F0(uint64_t a1)
{
  uint64_t v2 = sub_10006CA04("CloudXPCService");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " handleAXSAccessibilityHTNotification", buf, 2u);
  }

  uint64_t v3 = _AXSSpatialAudioHeadTracking();
  uint64_t v4 = sub_10006CA04("CloudXPCService");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v10 = v3;
    __int16 v11 = 1024;
    BOOL v12 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AccessibilityHeadtracking: headTrackStatus:%lu, newHT:%u", buf, 0x12u);
  }

  id v5 = +[NSNumber numberWithBool:v3 != 0, @"kAccessHeadTracking"];
  id v8 = v5;
  CFStringRef v6 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

  [*(id *)(a1 + 32) sendCloudKitMsg:@"kBTAccessHeadTrackUpdate" args:v6];
}

void sub_100082E94(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cloudKitConnection];

  if (v2)
  {
    uint64_t v3 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Already established connection to bluetoothd", v14, 2u);
    }
LABEL_8:

    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
    return;
  }
  uint64_t v4 = [*(id *)(a1 + 32) xpcQueue];
  xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.bluetooth.cloudkit.xpc", v4, 2uLL);
  [*(id *)(a1 + 32) setCloudKitConnection:mach_service];

  CFStringRef v6 = [*(id *)(a1 + 32) cloudKitConnection];

  uint64_t v7 = sub_10006CA04("XPC");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Established connection to bluetoothd", v14, 2u);
    }

    id v9 = [*(id *)(a1 + 32) cloudKitConnection];
    xpc_connection_set_event_handler(v9, &stru_100235480);

    uint64_t v3 = [*(id *)(a1 + 32) cloudKitConnection];
    xpc_connection_resume((xpc_connection_t)v3);
    goto LABEL_8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1001B7ED8();
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    NSErrorUserInfoKey v15 = NSLocalizedFailureReasonErrorKey;
    CFStringRef v16 = @"Failed to establish connection to bluetoothd";
    BOOL v12 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    id v13 = +[NSError errorWithDomain:@"BTUserErrorDomain" code:0 userInfo:v12];
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v13);
  }
}

void sub_1000831DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000831F8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
    id v8 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001B7F0C();
    }
    goto LABEL_10;
  }
  if (!a2)
  {
    id v5 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v11 = 138412547;
      uint64_t v12 = v6;
      __int16 v13 = 2113;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending CK XPC object: (%@)%{private}@", (uint8_t *)&v11, 0x16u);
    }

    id v8 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v8, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    if (*(void *)(a1 + 40))
    {
      id v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      xpc_dictionary_set_value(v8, "kMsgArgs", v9);
    }
    uint64_t v10 = [WeakRetained cloudKitConnection];
    xpc_connection_send_message(v10, v8);

LABEL_10:
  }
}

void sub_100083478(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100083494(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    id v8 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001B7F74();
    }
    goto LABEL_13;
  }
  if (!a2)
  {
    id v5 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v17 = 138412547;
      uint64_t v18 = v6;
      __int16 v19 = 2113;
      uint64_t v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending CK XPC message: (%@)%{private}@", (uint8_t *)&v17, 0x16u);
    }

    id v8 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v8, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    if (*(void *)(a1 + 40))
    {
      id v9 = [*(id *)(a1 + 48) deviceManager];
      uint64_t v10 = [v9 cloudAccountInfo];

      int v11 = [v10 loginID];
      id v12 = [v11 length];

      if (v12)
      {
        __int16 v13 = +[NSMutableDictionary dictionaryWithDictionary:*(void *)(a1 + 40)];
        uint64_t v14 = [v10 loginID];
        [v13 setObject:v14 forKey:@"loginID"];

        NSErrorUserInfoKey v15 = (void *)_CFXPCCreateXPCMessageWithCFObject();
        xpc_dictionary_set_value(v8, "kMsgArgs", v15);
      }
      else
      {
        __int16 v13 = (void *)_CFXPCCreateXPCMessageWithCFObject();
        xpc_dictionary_set_value(v8, "kMsgArgs", v13);
      }
    }
    CFStringRef v16 = [WeakRetained cloudKitConnection];
    xpc_connection_send_message(v16, v8);

LABEL_13:
  }
}

void sub_1000837F4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100083810(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    id v8 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1001B7FDC();
    }
    goto LABEL_14;
  }
  id v5 = sub_10006CA04("XPC");
  uint64_t v6 = v5;
  if (!v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412547;
      uint64_t v18 = v9;
      __int16 v19 = 2113;
      uint64_t v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reply: Sending CK XPC message: (%@)%{private}@", buf, 0x16u);
    }

    id v8 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v8, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    if (*(void *)(a1 + 40))
    {
      int v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      xpc_dictionary_set_value(v8, "kMsgArgs", v11);
    }
    id v12 = [WeakRetained cloudKitConnection];
    __int16 v13 = [WeakRetained xpcQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_100083A80;
    v14[3] = &unk_1002354F8;
    id v16 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 32);
    xpc_connection_send_message_with_reply(v12, v8, v13, v14);

LABEL_14:
    goto LABEL_15;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1001B8044();
  }

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, &__NSDictionary0__struct, v3);
  }
LABEL_15:
}

void sub_100083A80(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  id v5 = +[NSDictionary dictionary];
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v7 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    uint64_t v14 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "received reply msg: %@", buf, 0xCu);
    }

    id v12 = [v7 objectForKey:@"kMsgArgs"];
    uint64_t v15 = *(void *)(a1 + 40);
    if (v12 && v15)
    {
      (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v12, 0);
    }
    else
    {
      NSErrorUserInfoKey v20 = NSLocalizedFailureErrorKey;
      CFStringRef v21 = @"Reply Key Not Found";
      id v16 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
      int v17 = +[NSError errorWithDomain:@"BTUserErrorDomain" code:0 userInfo:v16];
      (*(void (**)(uint64_t, void *, void *))(v15 + 16))(v15, v5, v17);
    }
    goto LABEL_16;
  }
  uint64_t v6 = sub_10006CA04("XPC");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1001B8124();
  }

  uint64_t v7 = +[NSString stringWithFormat:@"Unexpected object type from reply: %@", v3];
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    string = xpc_dictionary_get_string(v3, _xpc_error_key_description);
    uint64_t v9 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001B80B0();
    }

    uint64_t v10 = +[NSString stringWithUTF8String:string];

    uint64_t v7 = (void *)v10;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    NSErrorUserInfoKey v18 = NSLocalizedFailureErrorKey;
    __int16 v19 = v7;
    id v12 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    __int16 v13 = +[NSError errorWithDomain:@"BTUserErrorDomain" code:0 userInfo:v12];
    (*(void (**)(uint64_t, void *, void *))(v11 + 16))(v11, v5, v13);

LABEL_16:
  }
}

void sub_100083EBC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100083ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
  {
    uint64_t v7 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B7FDC();
    }
    goto LABEL_30;
  }
  if (!v3)
  {
    id v8 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412547;
      __int16 v33 = v9;
      __int16 v34 = 2113;
      uint64_t v35 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sync reply: Sending CK XPC message: (%@)%{private}@", buf, 0x16u);
    }

    uint64_t v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v7, "kMsgId", (const char *)[*(id *)(a1 + 32) UTF8String]);
    if (*(void *)(a1 + 40))
    {
      uint64_t v11 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      xpc_dictionary_set_value(v7, "kMsgArgs", v11);
    }
    id v12 = [WeakRetained cloudKitConnection];
    xpc_object_t v13 = xpc_connection_send_message_with_reply_sync(v12, v7);

    xpc_type_t type = xpc_get_type(v13);
    uint64_t v15 = +[NSDictionary dictionary];
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      int v17 = (void *)_CFXPCCreateCFObjectFromXPCObject();
      id v24 = sub_10006CA04("XPC");
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int16 v33 = v17;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "received sync reply msg: %@", buf, 0xCu);
      }

      uint64_t v22 = [v17 objectForKey:@"kMsgArgs"];
      uint64_t v25 = *(void *)(a1 + 48);
      if (v22 && v25)
      {
        (*(void (**)(uint64_t, void *, void))(v25 + 16))(v25, v22, 0);
      }
      else
      {
        NSErrorUserInfoKey v30 = NSLocalizedFailureErrorKey;
        CFStringRef v31 = @"Reply Key Not Found";
        long long v26 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
        long long v27 = +[NSError errorWithDomain:@"BTUserErrorDomain" code:0 userInfo:v26];
        (*(void (**)(uint64_t, void *, void *))(v25 + 16))(v25, v15, v27);
      }
    }
    else
    {
      id v16 = sub_10006CA04("XPC");
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_1001B8210((void *)(a1 + 32));
      }

      int v17 = +[NSString stringWithFormat:@"Unexpected object type from reply: %@", v13];
      if (type == (xpc_type_t)&_xpc_type_error)
      {
        string = xpc_dictionary_get_string(v13, _xpc_error_key_description);
        __int16 v19 = sub_10006CA04("XPC");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          sub_1001B8198((void *)(a1 + 32));
        }

        uint64_t v20 = +[NSString stringWithUTF8String:string];

        int v17 = (void *)v20;
      }
      uint64_t v21 = *(void *)(a1 + 48);
      if (!v21) {
        goto LABEL_29;
      }
      NSErrorUserInfoKey v28 = NSLocalizedFailureErrorKey;
      long long v29 = v17;
      uint64_t v22 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      id v23 = +[NSError errorWithDomain:@"BTUserErrorDomain" code:0 userInfo:v22];
      (*(void (**)(uint64_t, void *, void *))(v21 + 16))(v21, v15, v23);
    }
LABEL_29:

LABEL_30:
    goto LABEL_31;
  }
  id v5 = sub_10006CA04("CloudPairing");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1001B8288();
  }

  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, void *, id))(v6 + 16))(v6, &__NSDictionary0__struct, v3);
  }
LABEL_31:
}

void sub_100085F40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3 && *(unsigned char *)(a1 + 32))
  {
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_100235540);
    id v3 = 0;
  }
}

void sub_100085FA4(id a1)
{
  id v1 = +[MPCloudKit sharedInstance];
  [v1 fetchKeyBlob:0];
}

void sub_100087EBC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = v9;
  if (v9 && (BOOL v7 = [v9 accountStatus] == (id)1, v6 = v9, v7))
  {
    uint64_t v8 = 1;
  }
  else
  {
    if ([v6 accountStatus] == (id)4) {
      goto LABEL_8;
    }
    uint64_t v8 = 0;
  }
  [*(id *)(a1 + 32) accountStatusAvailable:v8 force:1];
LABEL_8:
  [*(id *)(a1 + 32) endTransaction:@"SignInStatusChanged"];
}

void sub_100087F60(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  uint64_t v6 = v12;
  if (v12 && (BOOL v7 = [v12 accountStatus] == (id)1, v6 = v12, v7))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = (uint64_t)[v12 supportsDeviceToDeviceEncryption];
    uint64_t v10 = v8;
    uint64_t v11 = 1;
  }
  else
  {
    if ([v6 accountStatus] == (id)4) {
      goto LABEL_8;
    }
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = 0;
    uint64_t v9 = 1;
  }
  [v10 accountStatusAvailable:v11 force:v9];
LABEL_8:
  [*(id *)(a1 + 32) endTransaction:@"SignInStatusChanged"];
}

void sub_10008801C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1000880B8;
  v6[3] = &unk_100232A10;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
}

void sub_1000880B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 length] == (id)33)
    {
      id v3 = *(void **)(a1 + 40);
      uint64_t v4 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:*(void *)(a1 + 32), @"kMasterKeyBlob", 0];
      [v3 sendCloudKitMsg:@"MasterKeysAvailable" args:v4];
    }
  }
  else
  {
    unsigned __int8 v5 = [*(id *)(a1 + 40) manateeZoneUpgraded];
    uint64_t v6 = sub_10006CA04("XPC");
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee getMasterKey", buf, 2u);
      }

      uint64_t v8 = MPCloudKit_Manatee;
    }
    else
    {
      if (v7)
      {
        *(_WORD *)id v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "getMasterKey", v12, 2u);
      }

      uint64_t v8 = MPCloudKit;
    }
    uint64_t v9 = [(__objc2_class *)v8 sharedInstance];
    [v9 fetchKeyBlob:0];
  }
  uint64_t v10 = [*(id *)(a1 + 40) deviceManager];
  [v10 fetchCached];
}

void sub_10008820C(void *a1, void *a2)
{
  xpc_object_t original = a1;
  id v3 = a2;
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    if (v3)
    {
      unsigned __int8 v5 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      xpc_dictionary_set_value(reply, "kMsgArgs", v5);
    }
    xpc_dictionary_get_remote_connection(original);
    uint64_t v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(v6, reply);
  }
}

void sub_1000882BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = sub_10006CA04("XPC");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1001B87B4();
    }

    unsigned __int8 v5 = *(void **)(a1 + 32);
    CFStringRef v8 = @"error";
    uint64_t v6 = [v3 localizedDescription];
    uint64_t v9 = v6;
    BOOL v7 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    sub_10008820C(v5, v7);
  }
  else
  {
    sub_10008820C(*(void **)(a1 + 32), &off_1002445E8);
  }
}

void sub_1000883C8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2)
  {
    v5[0] = @"status";
    v5[1] = @"devices";
    v6[0] = &off_100244958;
    v6[1] = a2;
    id v3 = a2;
    id v4 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:2];
    sub_10008820C(v2, v4);
  }
  else
  {
    id v4 = 0;
    sub_10008820C(v2, &off_100244610);
  }
}

void sub_1000884A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10006CA04("XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Add nickname Error? - %@", (uint8_t *)&v6, 0xCu);
  }

  if (v3) {
    unsigned __int8 v5 = &off_100244638;
  }
  else {
    unsigned __int8 v5 = &off_100244660;
  }
  sub_10008820C(*(void **)(a1 + 32), v5);
}

void sub_100088584(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10006CA04("XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Add nickname Error? - %@", (uint8_t *)&v6, 0xCu);
  }

  if (v3) {
    unsigned __int8 v5 = &off_1002446D8;
  }
  else {
    unsigned __int8 v5 = &off_100244700;
  }
  sub_10008820C(*(void **)(a1 + 32), v5);
}

void sub_100088664(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10006CA04("XPC");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reset Cached Data, error? - %@", (uint8_t *)&v6, 0xCu);
  }

  if (v3) {
    unsigned __int8 v5 = &off_100244778;
  }
  else {
    unsigned __int8 v5 = &off_1002447A0;
  }
  sub_10008820C(*(void **)(a1 + 32), v5);
}

void sub_100088744(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    v16[0] = @"bluetoothAddress";
    unsigned __int8 v5 = [v3 bluetoothAddress];
    v16[1] = @"nickname";
    v17[0] = v5;
    int v6 = [v4 nickname];
    v17[1] = v6;
    id v7 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
    id v13 = 0;
    CFStringRef v8 = +[NSJSONSerialization dataWithJSONObject:v7 options:0 error:&v13];
    id v9 = v13;

    uint64_t v10 = *(void **)(a1 + 32);
    if (!v8 || v9)
    {
      sub_10008820C(v10, &__NSDictionary0__struct);
    }
    else
    {
      uint64_t v11 = +[XPCArguments CloudDevice];
      uint64_t v14 = v11;
      uint64_t v15 = v8;
      id v12 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
      sub_10008820C(v10, v12);
    }
  }
  else
  {
    sub_10008820C(*(void **)(a1 + 32), &__NSDictionary0__struct);
  }
}

void sub_1000889D0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) transactionIdentifierForActionIdentifier:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) activeTransactions];
  id v4 = [v3 objectForKey:v2];

  unsigned __int8 v5 = sub_10006CA04("TXN");
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v11 = 138412290;
      id v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Already holding xpc transaction: %@", (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    if (v6)
    {
      int v11 = 138412290;
      id v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Beginning xpc transaction: %@", (uint8_t *)&v11, 0xCu);
    }

    id v7 = [*(id *)(a1 + 32) activeTransactions];
    id v8 = v2;
    [v8 UTF8String];
    id v9 = (void *)os_transaction_create();
    [v7 setObject:v9 forKey:v8];

    unsigned __int8 v5 = sub_10006CA04("TXN");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = [*(id *)(a1 + 32) activeTransactions];
      int v11 = 138412290;
      id v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Active transactions: %@", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_100088C6C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) transactionIdentifierForActionIdentifier:*(void *)(a1 + 40)];
  id v3 = sub_10006CA04("TXN");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    uint64_t v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ending xpc transaction: %@", (uint8_t *)&v9, 0xCu);
  }

  id v4 = [*(id *)(a1 + 32) activeTransactions];
  unsigned __int8 v5 = [v4 objectForKey:v2];

  BOOL v6 = [*(id *)(a1 + 32) activeTransactions];
  [v6 removeObjectForKey:v2];

  id v7 = sub_10006CA04("TXN");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) activeTransactions];
    int v9 = 138412290;
    uint64_t v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Active transactions: %@", (uint8_t *)&v9, 0xCu);
  }
}

void sub_100088FC4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_10008911C(id a1)
{
  id v1 = objc_alloc_init(MPCloudKit_Manatee);
  uint64_t v2 = qword_100263F18;
  qword_100263F18 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100089434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100089450(uint64_t a1)
{
  unsigned int v2 = +[BTSystemConfiguration isBuddyComplete];
  id WeakRetained = sub_10006CA04("MagicPairing");
  BOOL v4 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Buddy State Done", buf, 2u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained buddySetupDone];
  }
  else if (v4)
  {
    *(_WORD *)unsigned __int8 v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Buddy State Update, Not Done", v5, 2u);
  }
}

uint64_t sub_1000896CC(uint64_t a1)
{
  int out_token = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100089758;
  v2[3] = &unk_100234BD0;
  int v3 = 0;
  v2[4] = *(void *)(a1 + 32);
  return notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, (dispatch_queue_t)&_dispatch_main_q, v2);
}

id sub_100089758(uint64_t a1)
{
  unsigned int v2 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Manatee: device unlocked after boot ", v4, 2u);
  }

  notify_cancel(*(_DWORD *)(a1 + 40));
  return [*(id *)(a1 + 32) initializeCloudKit];
}

void sub_100089878(id a1, int64_t a2, NSError *a3)
{
  BOOL v4 = a3;
  unsigned __int8 v5 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134218242;
    int64_t v10 = a2;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Manatee: forceAccountStatus accountStatusWithCompletionHandler accountStatus %ld error %@", (uint8_t *)&v9, 0x16u);
  }

  if (!v4)
  {
    if (a2 == 1)
    {
      id v7 = +[CloudXPCService sharedInstance];
      BOOL v6 = v7;
      uint64_t v8 = 1;
    }
    else
    {
      if (a2 == 4)
      {
        BOOL v6 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v9) = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee: forceAccountStatus Account Available but Not Ready, Try again in sometime...", (uint8_t *)&v9, 2u);
        }
        goto LABEL_11;
      }
      id v7 = +[CloudXPCService sharedInstance];
      BOOL v6 = v7;
      uint64_t v8 = 0;
    }
    [v7 accountStatusAvailable:v8 force:1];
LABEL_11:
  }
}

uint64_t sub_100089DE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100089F3C(id a1, CKAccountInfo *a2, NSError *a3)
{
  BOOL v4 = a2;
  unsigned __int8 v5 = a3;
  if (v4
    && [(CKAccountInfo *)v4 accountStatus] == (id)1
    && [(CKAccountInfo *)v4 supportsDeviceToDeviceEncryption])
  {
    BOOL v6 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee: Account manateeZoneAvailable, wait for cloud activity to settle", v8, 2u);
    }

    dispatch_time_t v7 = dispatch_time(0, 15000000000);
    dispatch_after(v7, (dispatch_queue_t)&_dispatch_main_q, &stru_1002356B0);
  }
}

void sub_10008A018(id a1)
{
  id v1 = +[CBIDSManager sharedInstance];
  unsigned int v2 = [v1 shouldUpgradeToManatee];

  if (v2)
  {
    id v3 = +[MPCloudKit sharedInstance];
    [v3 upgradeLegacyNonManateeContainerToManatee];
  }
}

void sub_10008A44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008A470(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  dispatch_time_t v7 = sub_10006CA04("MagicPairing");
  uint64_t v8 = v7;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      uint64_t v23 = a2;
      __int16 v24 = 2112;
      id v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee accountStatusWithCompletionHandler accountStatus %ld error %@", buf, 0x16u);
    }

    if (!v5)
    {
      if (a2 == 1)
      {
        if (([WeakRetained isAccountActive] & 1) == 0) {
          [WeakRetained setupSubscriptions];
        }
        [WeakRetained setIsAccountActive:1];
        dispatch_time_t v9 = dispatch_time(0, 5000000000);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10008A8D4;
        block[3] = &unk_100232710;
        void block[4] = WeakRetained;
        dispatch_after(v9, (dispatch_queue_t)&_dispatch_main_q, block);
        int64_t v10 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v11 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v23 = 1;
          __int16 v24 = 1024;
          LODWORD(v25) = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Manatee accountStatusDidChange Accounts available accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }
      }
      else if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        [WeakRetained setIsAccountActive:0];
        [WeakRetained setMasterBlob:0];
        [WeakRetained setShouldPauseFetch:0];
        [WeakRetained setPauseErrorReason:0];
        [WeakRetained setIsFetchInProgress:0];
        [WeakRetained setIsFetchMasterKeyInProgress:0];
        id v12 = objc_loadWeakRetained((id *)(a1 + 40));
        unsigned __int8 v13 = [v12 reinitAfterBuddy];

        uint64_t v14 = sub_10006CA04("MagicPairing");
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          if (v15)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not sending accounts status, since we are still in buddy. ", buf, 2u);
          }
        }
        else
        {
          if (v15)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Manatee Sending accounts status, as signed out. ", buf, 2u);
          }

          id v16 = +[CloudXPCService sharedInstance];
          [v16 accountStatusAvailable:[*(id *)(a1 + 32) isAccountActive] force:0];

          int v17 = [WeakRetained readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];

          if (v17)
          {
            [WeakRetained removeuserPreference:@"MagicCloudPairingManateeUpgradedAccount" sync:1];
            NSErrorUserInfoKey v18 = sub_10006CA04("MagicPairing");
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Manatee delete kMagicCloudPairingManateeUpgraded key", buf, 2u);
            }
          }
          [*(id *)(a1 + 32) removeuserPreference:@"MagicCloudPairingMasterSubscriptionManateeID" sync:1];
          [*(id *)(a1 + 32) removeuserPreference:@"MagicCloudPairingAccessorySubscriptionManateeID" sync:1];
          [*(id *)(a1 + 32) removeuserPreference:@"MagicPairingMasterKeySubscriptionManateeDisabled" sync:1];
        }
        __int16 v19 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v20 = [WeakRetained isAccountActive];
          *(_DWORD *)buf = 134218240;
          uint64_t v23 = a2;
          __int16 v24 = 1024;
          LODWORD(v25) = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "accountStatusDidChange Account unavailable accountStatus %ld self.isAccountActive %d \n", buf, 0x12u);
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B893C();
    }
  }
}

void sub_10008A8D4(uint64_t a1)
{
  id v2 = +[CloudXPCService sharedInstance];
  [v2 accountStatusAvailable:[*(id *)(a1 + 32) isAccountActive] force:0];
}

id sub_10008ABD4(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:0];
  [*(id *)(a1 + 32) setPauseErrorReason:0];
  id v2 = *(void **)(a1 + 32);

  return [v2 fetchAccessoryKeyBlob:0];
}

void sub_10008AC98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([v5 accountStatus] == (id)1
      && [v5 supportsDeviceToDeviceEncryption])
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_10008AD94;
      v9[3] = &unk_100233750;
      uint64_t v7 = *(void *)(a1 + 40);
      v9[4] = *(void *)(a1 + 32);
      v9[5] = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);
    }
    else
    {
      uint64_t v8 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1001B8970();
      }
    }
  }
}

id sub_10008AD94(uint64_t a1)
{
  id v2 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob Account manateeZoneAvailable ", v4, 2u);
  }

  return [*(id *)(a1 + 32) _fetchKeyBlob:*(void *)(a1 + 40)];
}

void sub_10008B2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008B2D8(uint64_t a1, void *a2, void *a3)
{
  id v63 = a2;
  id v5 = a3;
  id v6 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = [v63 recordID];
    uint64_t v8 = [v7 zoneID];
    *(_DWORD *)buf = 138412802;
    unint64_t v75 = (unint64_t)v5;
    __int16 v76 = 2112;
    id v77 = v8;
    __int16 v78 = 2112;
    id v79 = v63;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);
  }
  dispatch_time_t v9 = SmartRoutingStatsWx;
  if (!v5)
  {
    uint64_t v14 = [v63 recordID];
    BOOL v15 = [v14 zoneID];
    id v16 = [v15 zoneName];
    int v17 = [*(id *)(a1 + 32) recordZoneBlob];
    NSErrorUserInfoKey v18 = [v17 zoneID];
    __int16 v19 = [v18 zoneName];
    unsigned int v20 = [v16 isEqualToString:v19];

    dispatch_time_t v9 = SmartRoutingStatsWx;
    if (!v20) {
      goto LABEL_25;
    }
    uint64_t v21 = [v63 encryptedValues];
    id WeakRetained = [v21 objectForKey:@"EncryptedMasterKeyBlob"];

    uint64_t v22 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v75 = (unint64_t)WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob record %@", buf, 0xCu);
    }

    if ((unint64_t)[WeakRetained length] > 0x20)
    {
      v64[0] = _NSConcreteStackBlock;
      v64[1] = 3221225472;
      v64[2] = sub_10008BCDC;
      v64[3] = &unk_100232B98;
      id v35 = WeakRetained;
      uint64_t v36 = *(void *)(a1 + 32);
      id v65 = v35;
      uint64_t v66 = v36;
      id v67 = v63;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v64);
    }
    else
    {
      uint64_t v23 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob NO record", buf, 2u);
      }

      dispatch_async((dispatch_queue_t)&_dispatch_main_q, &stru_100235720);
    }
    goto LABEL_9;
  }
  if ([v5 code] == (id)26 || objc_msgSend(v5, "code") == (id)11)
  {
    int64_t v10 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob CKErrorZoneNotFound or Record does not exist", buf, 2u);
    }

    buf[0] = 0;
    id WeakRetained = +[CloudXPCService sharedInstance];
    id v12 = +[NSData dataWithBytes:buf length:1];
    unsigned __int8 v13 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v12, @"kMasterKeyBlob", 0];
    [WeakRetained sendCloudKitMsg:@"MasterKeysNotAvailable" args:v13];

    goto LABEL_9;
  }
  if ([v5 code] == (id)6 || objc_msgSend(v5, "code") == (id)7)
  {
    __int16 v24 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v75 = (unint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob unavailable service: %@", buf, 0xCu);
    }

    id v25 = [v5 userInfo];
    long long v26 = [v25 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v26)
    {
      long long v27 = [v5 userInfo];
      NSErrorUserInfoKey v28 = [v27 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v28 doubleValue];
      double v30 = v29;

      CFStringRef v31 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v75 = (unint64_t)v30;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob retry after %lu", buf, 0xCu);
      }

      dispatch_time_t v32 = dispatch_time(0, (uint64_t)(v30 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008BC24;
      block[3] = &unk_100233750;
      uint64_t v33 = *(void *)(a1 + 48);
      void block[4] = *(void *)(a1 + 32);
      void block[5] = v33;
      dispatch_after(v32, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  else
  {
    id v37 = [v5 domain];
    uint64_t v38 = CKErrorDomain;
    if ([v37 isEqualToString:CKErrorDomain])
    {
      id v39 = [v5 code];

      if (v39 == (id)112)
      {
        uint64_t v40 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob lost access to manatee data. Reset and recreate zone.", buf, 2u);
        }

        id v41 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob. Reset and recreate zone DONE!", buf, 2u);
        }

        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
        [WeakRetained resetCloudContainerManateeIdentityLost];
        goto LABEL_9;
      }
    }
    else
    {
    }
    id WeakRetained = [v5 domain];
    if (([WeakRetained isEqualToString:CKErrorDomain] & 1) == 0)
    {
LABEL_9:

      goto LABEL_25;
    }
    id v42 = [v5 userInfo];
    __int16 v43 = [v42 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

    dispatch_time_t v9 = SmartRoutingStatsWx;
    if (v43)
    {
      uint64_t v62 = a1;
      uint64_t v44 = [v5 userInfo];
      __int16 v45 = [v44 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      id v46 = v45;
      id v47 = [v46 countByEnumeratingWithState:&v68 objects:v73 count:16];
      if (v47)
      {
        id v48 = v47;
        uint64_t v49 = *(void *)v69;
        uint64_t v50 = &objc_retain_x5_ptr;
        while (2)
        {
          for (i = 0; i != v48; i = (char *)i + 1)
          {
            if (*(void *)v69 != v49) {
              objc_enumerationMutation(v46);
            }
            id v52 = [v46 objectForKey:*(void *)(*((void *)&v68 + 1) + 8 * i)];
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              __int16 v53 = [v52 domain];
              if ([v53 isEqualToString:v38])
              {
                id v54 = v50;
                uint64_t v55 = v38;
                id v56 = [v52 code];

                BOOL v57 = v56 == (id)112;
                uint64_t v38 = v55;
                uint64_t v50 = v54;
                if (v57)
                {
                  id v58 = sub_10006CA04("MagicPairing");
                  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    unint64_t v75 = (unint64_t)v52;
                    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                  }

                  id v60 = sub_10006CA04("MagicPairing");
                  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Manatee: fetchKeyBlob. Reset and recreate zone DONE!", buf, 2u);
                  }

                  id v61 = objc_loadWeakRetained((id *)(v62 + 40));
                  [v61 resetCloudContainerManateeIdentityLost];

                  goto LABEL_56;
                }
              }
              else
              {
              }
            }
          }
          id v48 = [v46 countByEnumeratingWithState:&v68 objects:v73 count:16];
          if (v48) {
            continue;
          }
          break;
        }
      }
LABEL_56:

      a1 = v62;
      dispatch_time_t v9 = SmartRoutingStatsWx;
    }
  }
LABEL_25:
  [*(id *)(a1 + 32) setIsFetchMasterKeyInProgress:0];
  __int16 v34 = [&v9[29] sharedInstance];
  [v34 endTransaction:@"ManateefetchKeyBlob"];
}

id sub_10008BC24(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_10008BC34(id a1)
{
  char v4 = 0;
  id v1 = +[CloudXPCService sharedInstance];
  id v2 = +[NSData dataWithBytes:&v4 length:1];
  id v3 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v2, @"kMasterKeyBlob", 0];
  [v1 sendCloudKitMsg:@"MasterKeysNotAvailable" args:v3];
}

void sub_10008BCDC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] == (id)33)
  {
    id v2 = [*(id *)(a1 + 40) masterBlob];

    if (!v2)
    {
      id v3 = [*(id *)(a1 + 40) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];

      if (!v3)
      {
        [*(id *)(a1 + 40) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
        char v4 = +[MPCloudKit sharedInstance];
        [v4 markLegacyNonManateeContainerMigrated];
      }
      id v5 = [*(id *)(a1 + 32) mutableCopy];
      [*(id *)(a1 + 40) setMasterBlob:v5];

      id v6 = +[CloudXPCService sharedInstance];
      uint64_t v7 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:*(void *)(a1 + 32), @"kMasterKeyBlob", 0];
      [v6 sendCloudKitMsg:@"MasterKeysAvailable" args:v7];

      uint64_t v8 = +[CloudXPCService sharedInstance];
      dispatch_time_t v9 = [v8 deviceManager];
      [v9 addAccountMagicKeysWithCloudRecord:*(void *)(a1 + 48)];

      int64_t v10 = *(void **)(a1 + 40);
      [v10 fetchAccessoryKeyBlob:0];
    }
  }
}

void sub_10008C03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008C068(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v6 = [v4 domain];
    if ([v6 isEqualToString:CKErrorDomain])
    {
      if ([v4 code] == (id)3 || objc_msgSend(v4, "code") == (id)4)
      {

LABEL_6:
        uint64_t v7 = [v4 userInfo];
        uint64_t v8 = [v7 objectForKeyedSubscript:CKErrorRetryAfterKey];

        if (v8)
        {
          dispatch_time_t v9 = [v4 userInfo];
          int64_t v10 = [v9 objectForKeyedSubscript:CKErrorRetryAfterKey];
          [v10 doubleValue];
          double v12 = v11;

          int64_t v13 = (uint64_t)(v12 * 1000000000.0);
        }
        else
        {
          int64_t v13 = 60000000000;
        }
        dispatch_time_t v15 = dispatch_time(0, v13);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10008C28C;
        block[3] = &unk_100234CD0;
        void block[4] = WeakRetained;
        id v16 = *(id *)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 48);
        id v20 = v16;
        uint64_t v21 = v17;
        dispatch_after(v15, (dispatch_queue_t)&_dispatch_main_q, block);

        goto LABEL_13;
      }
      id v18 = [v4 code];

      if (v18 == (id)9) {
        goto LABEL_6;
      }
    }
    else
    {
    }
LABEL_13:
    uint64_t v14 = +[CloudXPCService sharedInstance];
    [v14 endTransaction:@"ManateeCheckAccountStatusWithCompletionHandler"];
    goto LABEL_14;
  }
  uint64_t v14 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_1001B89D8();
  }
LABEL_14:
}

id sub_10008C28C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) checkAccountStatusWithCompletionHandler:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10008C314(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([v5 accountStatus] == (id)1
      && [v5 supportsDeviceToDeviceEncryption])
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_10008C410;
      v9[3] = &unk_100233750;
      uint64_t v7 = *(void *)(a1 + 40);
      v9[4] = *(void *)(a1 + 32);
      v9[5] = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);
    }
    else
    {
      uint64_t v8 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1001B8A0C();
      }
    }
  }
}

id sub_10008C410(uint64_t a1)
{
  id v2 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob Account manateeZoneAvailable ", v4, 2u);
  }

  return [*(id *)(a1 + 32) _fetchAccessoryKeyBlob:*(void *)(a1 + 40)];
}

void sub_10008C7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008C828(uint64_t a1, void *a2, void *a3)
{
  uint64_t v61 = a1;
  id v62 = a2;
  id v4 = a3;
  id v5 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v62 recordID];
    uint64_t v7 = [v6 zoneID];
    *(_DWORD *)buf = 138412802;
    unint64_t v72 = (unint64_t)v4;
    __int16 v73 = 2112;
    long long v74 = v7;
    __int16 v75 = 2112;
    id v76 = v62;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob completion error %@ recordZoneID %@, record: %@", buf, 0x20u);
  }
  uint64_t v8 = SmartRoutingStatsWx;
  if (!v4)
  {
    int64_t v10 = [v62 recordID];
    double v11 = [v10 zoneID];
    double v12 = [v11 zoneName];
    int64_t v13 = [*(id *)(v61 + 32) recordZoneAccessoryDatabase];
    uint64_t v14 = [v13 zoneID];
    dispatch_time_t v15 = [v14 zoneName];
    unsigned int v16 = [v12 isEqualToString:v15];

    uint64_t v8 = SmartRoutingStatsWx;
    if (!v16) {
      goto LABEL_27;
    }
    uint64_t v17 = [v62 encryptedValues];
    id WeakRetained = [v17 objectForKey:@"EncryptedAccessoryBlob"];

    __int16 v19 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [v62 modifiedByDevice];
      *(_DWORD *)buf = 138412546;
      unint64_t v72 = (unint64_t)v20;
      __int16 v73 = 2112;
      long long v74 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Manatee: Record Modified by %@: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0x16u);
    }
    if ((unint64_t)[WeakRetained length] >= 0x99)
    {
      uint64_t v21 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Manatee: Accessory zone has been upgraded. Dont generate keys", buf, 2u);
      }

      uint64_t v22 = [*(id *)(v61 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount"];

      if (!v22)
      {
        [*(id *)(v61 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
        uint64_t v23 = +[MPCloudKit sharedInstance];
        [v23 markLegacyNonManateeContainerMigrated];
      }
      __int16 v24 = +[CloudXPCService sharedInstance];
      id v25 = [v24 deviceManager];
      [v25 addLegacyMagicPairingRecordsWithCloudRecord:v62 userInitiated:0 completion:&stru_1002357B0];
    }
    goto LABEL_18;
  }
  if ([v4 code] == (id)26 || objc_msgSend(v4, "code") == (id)11)
  {
    dispatch_time_t v9 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob CKErrorZoneNotFound", buf, 2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008D130;
    block[3] = &unk_100232A10;
    void block[4] = *(void *)(v61 + 32);
    id v69 = v4;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

    goto LABEL_27;
  }
  if ([v4 code] == (id)6 || objc_msgSend(v4, "code") == (id)7)
  {
    long long v26 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_1001B8A74();
    }

    long long v27 = [v4 userInfo];
    NSErrorUserInfoKey v28 = [v27 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v28)
    {
      double v29 = [v4 userInfo];
      double v30 = [v29 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v30 doubleValue];
      double v32 = v31;

      uint64_t v33 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v72 = (unint64_t)v32;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob CKErrorServiceUnavailable/RateLimited, retry after: %lu", buf, 0xCu);
      }

      dispatch_time_t v34 = dispatch_time(0, (uint64_t)(v32 * 1000000000.0));
      v67[0] = _NSConcreteStackBlock;
      v67[1] = 3221225472;
      v67[2] = sub_10008D210;
      v67[3] = &unk_100233750;
      uint64_t v35 = *(void *)(v61 + 48);
      v67[4] = *(void *)(v61 + 32);
      v67[5] = v35;
      dispatch_after(v34, (dispatch_queue_t)&_dispatch_main_q, v67);
    }
    goto LABEL_27;
  }
  id v37 = [v4 domain];
  uint64_t v38 = CKErrorDomain;
  if ([v37 isEqualToString:CKErrorDomain])
  {
    id v39 = [v4 code];

    if (v39 == (id)112)
    {
      uint64_t v40 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob lost access to manatee data. Reset and recreate zone.", buf, 2u);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(v61 + 40));
      [WeakRetained resetCloudContainerManateeIdentityLost];
      goto LABEL_18;
    }
  }
  else
  {
  }
  id WeakRetained = [v4 domain:v61];
  if (([WeakRetained isEqualToString:CKErrorDomain] & 1) == 0)
  {
LABEL_18:

    goto LABEL_27;
  }
  id v41 = [v4 userInfo];
  id v42 = [v41 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

  uint64_t v8 = SmartRoutingStatsWx;
  if (v42)
  {
    __int16 v43 = [v4 userInfo];
    uint64_t v44 = [v43 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v45 = v44;
    id v46 = [v45 countByEnumeratingWithState:&v63 objects:v70 count:16];
    if (v46)
    {
      id v47 = v46;
      uint64_t v48 = *(void *)v64;
      uint64_t v49 = &objc_retain_x5_ptr;
      while (2)
      {
        for (i = 0; i != v47; i = (char *)i + 1)
        {
          if (*(void *)v64 != v48) {
            objc_enumerationMutation(v45);
          }
          __int16 v51 = [v45 objectForKey:*(void *)(*((void *)&v63 + 1) + 8 * i)];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v52 = [v51 domain];
            if ([v52 isEqualToString:v38])
            {
              __int16 v53 = v49;
              id v54 = v38;
              id v55 = [v51 code];

              BOOL v56 = v55 == (id)112;
              uint64_t v38 = v54;
              uint64_t v49 = v53;
              if (v56)
              {
                BOOL v57 = sub_10006CA04("MagicPairing");
                if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  unint64_t v72 = (unint64_t)v51;
                  _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                }

                unint64_t v59 = sub_10006CA04("MagicPairing");
                if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAccessoryKeyBlob. Reset and recreate zone DONE!", buf, 2u);
                }

                id v60 = objc_loadWeakRetained((id *)(v61 + 40));
                [v60 resetCloudContainerManateeIdentityLost];

                goto LABEL_55;
              }
            }
            else
            {
            }
          }
        }
        id v47 = [v45 countByEnumeratingWithState:&v63 objects:v70 count:16];
        if (v47) {
          continue;
        }
        break;
      }
    }
LABEL_55:

    uint64_t v8 = SmartRoutingStatsWx;
  }
LABEL_27:
  [*(id *)(v61 + 32) setIsFetchInProgress:0, v61];
  uint64_t v36 = [&v8[29] sharedInstance];
  [v36 endTransaction:@"ManateeFetchAccessoryKeyBlob"];
}

void sub_10008D130(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:1];
  [*(id *)(a1 + 32) setPauseErrorReason:*(void *)(a1 + 40)];
  id v3 = +[CloudXPCService sharedInstance];
  id v2 = [v3 deviceManager];
  [v2 deleteLegacyMagicPairingRecordsWithUserInitiated:0 completion:&stru_100235790];
}

void sub_10008D1B4(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001B8ADC();
  }
}

id sub_10008D210(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAccessoryKeyBlob:*(void *)(a1 + 40) + 1];
}

void sub_10008D220(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B8B44();
    }
  }
}

void sub_10008D544(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B8BAC();
    }

    [*(id *)(a1 + 32) handleModifyMasterKeyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48)];
  }
  else if (v5)
  {
    uint64_t v8 = [v5 encryptedValues];
    dispatch_time_t v9 = [v8 objectForKeyedSubscript:@"EncryptedMasterKeyBlob"];
    [*(id *)(a1 + 32) setMasterBlob:v9];

    int64_t v10 = [*(id *)(a1 + 32) masterBlob];
    id v11 = [v10 length];

    if (v11 == (id)33)
    {
      double v12 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int64_t v13 = [*(id *)(a1 + 32) masterBlob];
        *(_DWORD *)buf = 138412290;
        uint64_t v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Manatee: fetched existing master key record: encryptedBlob %@", buf, 0xCu);
      }
      uint64_t v14 = +[CloudXPCService sharedInstance];
      dispatch_time_t v15 = [*(id *)(a1 + 32) masterBlob];
      unsigned int v16 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v15, @"kMasterKeyBlob", 0];
      [v14 sendCloudKitMsg:@"MasterKeysAvailable" args:v16];

      uint64_t v17 = +[CloudXPCService sharedInstance];
      id v18 = [v17 deviceManager];
      [v18 addAccountMagicKeysWithCloudRecord:v5];
    }
    [*(id *)(a1 + 32) setIsWriteMasterKeysInProgress:0];
  }
  else
  {
    __int16 v19 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v23 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Manatee: No master key record found: write new key: %@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:0];
  }
  uint64_t v21 = +[CloudXPCService sharedInstance];
  [v21 endTransaction:@"ManateeModifyKeyBlob"];
}

id sub_10008DEAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) modifyKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10008E35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008E3B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10008E3C8(uint64_t a1)
{
}

void sub_10008E3D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    __int16 v19 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v67 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone record  %@", buf, 0xCu);
    }

    id v20 = [*(id *)(a1 + 32) cloudKitDatabase];
    uint64_t v21 = *(void **)(a1 + 40);
    uint64_t v22 = *(void *)(a1 + 48);
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472;
    v53[2] = sub_10008EB2C;
    v53[3] = &unk_1002357D8;
    uint64_t v23 = *(void *)(a1 + 80);
    uint64_t v56 = *(void *)(a1 + 64);
    uint64_t v57 = v23;
    v53[4] = *(void *)(a1 + 32);
    id v54 = v21;
    id v55 = *(id *)(a1 + 56);
    [v20 saveRecord:v22 completionHandler:v53];

    __int16 v24 = v54;
    goto LABEL_52;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
  uint64_t v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v67 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecordZone: error %@ ", buf, 0xCu);
  }

  uint64_t v8 = [v6 domain];
  if ([v8 isEqualToString:CKErrorDomain]
    && ([v6 code] == (id)3
     || [v6 code] == (id)7
     || [v6 code] == (id)4
     || [v6 code] == (id)9
     || [v6 code] == (id)2
     || [v6 code] == (id)6))
  {
    unint64_t v9 = *(void *)(a1 + 80);

    if (v9 <= 3)
    {
      int64_t v10 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 80);
        *(_DWORD *)buf = 138412546;
        id v67 = v6;
        __int16 v68 = 2048;
        uint64_t v69 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "writeKeyBlob failed with error %@, retry count = %lu", buf, 0x16u);
      }

      double v12 = [v6 userInfo];
      int64_t v13 = [v12 objectForKeyedSubscript:CKErrorRetryAfterKey];

      if (v13)
      {
        uint64_t v14 = [v6 userInfo];
        dispatch_time_t v15 = [v14 objectForKeyedSubscript:CKErrorRetryAfterKey];
        [v15 doubleValue];
        double v17 = v16;

        int64_t v18 = (uint64_t)(v17 * 1000000000.0);
      }
      else
      {
        int64_t v18 = 60000000000;
      }
      dispatch_time_t v47 = dispatch_time(0, v18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10008EB18;
      block[3] = &unk_100233AA8;
      uint64_t v48 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v49 = v48;
      uint64_t v50 = *(void *)(a1 + 80);
      id v63 = v49;
      uint64_t v64 = v50;
      dispatch_after(v47, (dispatch_queue_t)&_dispatch_main_q, block);
      __int16 v24 = v63;
LABEL_52:

      goto LABEL_53;
    }
  }
  else
  {
  }
  id v25 = [v6 domain];
  if ([v25 isEqualToString:CKErrorDomain])
  {
    id v26 = [v6 code];

    if (v26 == (id)112)
    {
      long long v27 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob saveRecordZone lost access to manatee data. Reset and recreate zone.", buf, 2u);
      }

      NSErrorUserInfoKey v28 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob saveRecordZone. Reset and recreate zone DONE!", buf, 2u);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
      [WeakRetained resetCloudContainerManateeIdentityLost];

      goto LABEL_53;
    }
  }
  else
  {
  }
  double v30 = [v6 domain];
  if ([v30 isEqualToString:CKErrorDomain])
  {
    double v31 = [v6 userInfo];
    double v32 = [v31 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

    if (v32)
    {
      uint64_t v51 = a1;
      id v52 = v5;
      uint64_t v33 = [v6 userInfo];
      dispatch_time_t v34 = [v33 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      id v35 = v34;
      id v36 = [v35 countByEnumeratingWithState:&v58 objects:v65 count:16];
      if (v36)
      {
        id v37 = v36;
        uint64_t v38 = *(void *)v59;
        while (2)
        {
          for (i = 0; i != v37; i = (char *)i + 1)
          {
            if (*(void *)v59 != v38) {
              objc_enumerationMutation(v35);
            }
            uint64_t v40 = [v35 objectForKey:*(void *)(*((void *)&v58 + 1) + 8 * i)];
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v41 = [v40 domain];
              if ([v41 isEqualToString:CKErrorDomain])
              {
                id v42 = [v40 code];

                if (v42 == (id)112)
                {
                  __int16 v43 = sub_10006CA04("MagicPairing");
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v67 = v40;
                    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                  }

                  id v45 = sub_10006CA04("MagicPairing");
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Manatee: writeKeyBlob. Reset and recreate zone DONE!", buf, 2u);
                  }

                  id v46 = objc_loadWeakRetained((id *)(v51 + 72));
                  [v46 resetCloudContainerManateeIdentityLost];

                  goto LABEL_49;
                }
              }
              else
              {
              }
            }
          }
          id v37 = [v35 countByEnumeratingWithState:&v58 objects:v65 count:16];
          if (v37) {
            continue;
          }
          break;
        }
      }
LABEL_49:

      id v5 = v52;
    }
  }
  else
  {
  }
LABEL_53:
}

id sub_10008EB18(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10008EB2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v8 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MagicCloudPairingProtectedMasterBlob, saveRecord %@", buf, 0xCu);
    }
    goto LABEL_17;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  uint64_t v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeKeyBlob saveRecord: error %@ ", buf, 0xCu);
  }

  uint64_t v8 = [v6 domain];
  if (![v8 isEqualToString:CKErrorDomain]
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)2)
  {
LABEL_17:

    goto LABEL_18;
  }
  unint64_t v9 = *(void *)(a1 + 64);

  if (v9 <= 3)
  {
    int64_t v10 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412546;
      id v27 = v6;
      __int16 v28 = 2048;
      uint64_t v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "writeKeyBlob:saveRecord failed with error %@, retry count = %lu", buf, 0x16u);
    }

    double v12 = [v6 userInfo];
    int64_t v13 = [v12 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v13)
    {
      uint64_t v14 = [v6 userInfo];
      dispatch_time_t v15 = [v14 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v15 doubleValue];
      double v17 = v16;

      int64_t v18 = (uint64_t)(v17 * 1000000000.0);
    }
    else
    {
      int64_t v18 = 60000000000;
    }
    dispatch_time_t v19 = dispatch_time(0, v18);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008EE7C;
    block[3] = &unk_100233AA8;
    id v20 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v21 = v20;
    uint64_t v22 = *(void *)(a1 + 64);
    id v24 = v21;
    uint64_t v25 = v22;
    dispatch_after(v19, (dispatch_queue_t)&_dispatch_main_q, block);
  }
LABEL_18:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_10008EE7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeKeyBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10008EF78(uint64_t a1)
{
  id v2 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 1024;
    int v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Manatee: updateCloudKitAccessoryZone with %@, delete: %i", buf, 0x12u);
  }

  id v5 = [*(id *)(a1 + 40) modifyOperationTimer];

  if (v5)
  {
    id v6 = [*(id *)(a1 + 40) modifyOperationTimer];
    [v6 invalidate];
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10008F100;
  v10[3] = &unk_100234DE0;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v11 = v7;
  uint64_t v12 = v8;
  char v13 = *(unsigned char *)(a1 + 48);
  unint64_t v9 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:v10 block:3.0];
  [*(id *)(a1 + 40) setModifyOperationTimer:v9];
}

void sub_10008F100(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Manatee: Updating Accessory Zone Now with %@", buf, 0xCu);
  }

  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  id v6 = [*(id *)(a1 + 40) modifyOperationQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  id v7[2] = sub_10008F2A0;
  v7[3] = &unk_100234DB8;
  char v10 = *(unsigned char *)(a1 + 48);
  objc_copyWeak(&v9, (id *)buf);
  id v8 = *(id *)(a1 + 32);
  [v6 addOperationWithBlock:v7];

  objc_destroyWeak(&v9);
  objc_destroyWeak((id *)buf);
}

void sub_10008F274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008F2A0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (v2) {
    [WeakRetained deleteCloudKitAccessoryZone];
  }
  else {
    [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
  }
}

void sub_10008F548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008F574(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v6)
    {
      id v8 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1001B8D68();
      }

      [WeakRetained handleAccessoryModifyError:v6 forBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 56)];
    }
    else
    {
      id v9 = [v5 encryptedValues];
      char v10 = [v9 objectForKeyedSubscript:@"EncryptedAccessoryBlob"];

      if (v5)
      {
        unsigned __int8 v11 = [v10 isEqualToData:*(void *)(a1 + 32)];
        uint64_t v12 = sub_10006CA04("MagicPairing");
        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        if (v11)
        {
          if (v13)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Dropping same modify record: MagicCloudPairingProtectedAccessoryBlob", buf, 2u);
          }
        }
        else
        {
          if (v13)
          {
            uint64_t v16 = *(void *)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            uint64_t v28 = v16;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Manatee: modify record: MagicCloudPairingProtectedAccessoryBlob fetch:  encryptedBlob %@", buf, 0xCu);
          }

          uint64_t v17 = *(void *)(a1 + 32);
          int64_t v18 = [v5 encryptedValues];
          [v18 setObject:v17 forKeyedSubscript:@"EncryptedAccessoryBlob"];

          objc_initWeak((id *)buf, WeakRetained);
          dispatch_time_t v19 = [WeakRetained cloudKitDatabase];
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3221225472;
          v23[2] = sub_10008F8E8;
          v23[3] = &unk_100234E30;
          id v24 = v5;
          objc_copyWeak(v26, (id *)buf);
          id v20 = *(id *)(a1 + 32);
          id v21 = *(void **)(a1 + 56);
          id v25 = v20;
          v26[1] = v21;
          [v19 saveRecord:v24 completionHandler:v23];

          objc_destroyWeak(v26);
          objc_destroyWeak((id *)buf);
        }
      }
      else
      {
        uint64_t v14 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          uint64_t v28 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Manatee: No record found: write new data: %@", buf, 0xCu);
        }

        [WeakRetained writeAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
      }
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    uint64_t v22 = +[CloudXPCService sharedInstance];
    [v22 endTransaction:@"ManateeModifyAccessoryBlob"];
  }
}

void sub_10008F8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10008F8E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B8DD0();
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained handleAccessoryModifyError:v6 forBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 56)];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: Successfully saved the modified record - %@", buf, 0xCu);
    }

    char v10 = +[CloudXPCService sharedInstance];
    unsigned __int8 v11 = [v10 deviceManager];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10008FB08;
    v15[3] = &unk_100232738;
    id v16 = v5;
    [v11 addLegacyMagicPairingRecordsWithCloudRecord:v16 userInitiated:1 completion:v15];

    uint64_t v12 = +[CloudXPCService sharedInstance];
    BOOL v13 = +[NSNumber numberWithBool:1];
    uint64_t v14 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v13, @"kUploadStatus", 0];
    [v12 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v14];

    id WeakRetained = v16;
  }
}

void sub_10008FB08(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B8E38();
    }
  }
}

void sub_100090418(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_100090444(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v2 = [*(id *)(a1 + 32) modifyOperationQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100090544;
  v5[3] = &unk_100234E58;
  objc_copyWeak(v7, &location);
  id v3 = *(id *)(a1 + 40);
  id v4 = *(void **)(a1 + 48);
  id v6 = v3;
  v7[1] = v4;
  [v2 addOperationWithBlock:v5];

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100090520(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100090544(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_10009059C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained writeAccessoryBlob:*(void *)(a1 + 32) withRetryCount:0];
}

void sub_10009093C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100090968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v45 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "writeAccessoryBlob saveRecordZone: error %@ ", buf, 0xCu);
    }

    id v8 = [v6 domain];
    if ([v8 isEqualToString:CKErrorDomain])
    {
      id v9 = [v6 code];

      if (v9 == (id)112)
      {
        char v10 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob saveRecordZone lost access to manatee data. Reset and recreate zone.", buf, 2u);
        }

        unsigned __int8 v11 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob saveRecordZone. Reset and recreate zone DONE!", buf, 2u);
        }

        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
        [WeakRetained resetCloudContainerManateeIdentityLost];
        goto LABEL_30;
      }
    }
    else
    {
    }
    id WeakRetained = [v6 domain];
    if (([WeakRetained isEqualToString:CKErrorDomain] & 1) == 0)
    {
LABEL_30:

      goto LABEL_37;
    }
    uint64_t v17 = [v6 userInfo];
    id v18 = [v17 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

    if (v18)
    {
      uint64_t v34 = a1;
      dispatch_time_t v19 = [v6 userInfo];
      id v20 = [v19 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id v21 = v20;
      id v22 = [v21 countByEnumeratingWithState:&v39 objects:v43 count:16];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = *(void *)v40;
        while (2)
        {
          for (i = 0; i != v23; i = (char *)i + 1)
          {
            if (*(void *)v40 != v24) {
              objc_enumerationMutation(v21);
            }
            id v26 = [v21 objectForKey:*(void *)(*((void *)&v39 + 1) + 8 * i)];
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v27 = [v26 domain];
              if ([v27 isEqualToString:CKErrorDomain])
              {
                id v28 = [v26 code];

                if (v28 == (id)112)
                {
                  uint64_t v29 = sub_10006CA04("MagicPairing");
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v45 = v26;
                    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Manatee: handleAccessoryModifyError lost access to manatee data. Reset and recreate zone due to - %@", buf, 0xCu);
                  }

                  double v31 = sub_10006CA04("MagicPairing");
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Manatee: handleAccessoryModifyError. Reset and recreate zone DONE!", buf, 2u);
                  }

                  id v32 = objc_loadWeakRetained((id *)(v34 + 64));
                  [v32 resetCloudContainerManateeIdentityLost];

                  goto LABEL_36;
                }
              }
              else
              {
              }
            }
          }
          id v23 = [v21 countByEnumeratingWithState:&v39 objects:v43 count:16];
          if (v23) {
            continue;
          }
          break;
        }
      }
LABEL_36:

      a1 = v34;
    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100090F00;
    block[3] = &unk_100232710;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    BOOL v13 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v45 = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Manatee: saveRecordZone record %@, resume fetches", buf, 0xCu);
    }

    uint64_t v14 = [*(id *)(a1 + 32) cloudKitDatabase];
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100090F44;
    v35[3] = &unk_100234D40;
    uint64_t v37 = *(void *)(a1 + 72);
    v35[4] = v15;
    id v36 = *(id *)(a1 + 48);
    [v14 saveRecord:v16 completionHandler:v35];
  }
LABEL_37:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  uint64_t v33 = +[CloudXPCService sharedInstance];
  [v33 endTransaction:@"ManateeWriteAccessoryBlob"];
}

id sub_100090F00(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:0];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 setPauseErrorReason:0];
}

void sub_100090F44(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  id v8 = v7;
  if (!v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v42 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob createRecordZone record  %@", buf, 0xCu);
    }

    char v10 = +[CloudXPCService sharedInstance];
    unsigned __int8 v11 = [v10 deviceManager];
    uint64_t v33 = _NSConcreteStackBlock;
    uint64_t v34 = 3221225472;
    id v35 = sub_100091584;
    id v36 = &unk_100232738;
    id v37 = v5;
    [v11 addLegacyMagicPairingRecordsWithCloudRecord:v37 userInitiated:1 completion:&v33];

    uint64_t v12 = +[CloudXPCService sharedInstance];
    BOOL v13 = +[NSNumber numberWithBool:1];
    uint64_t v14 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v13, @"kUploadStatus", 0, v33, v34, v35, v36];
    [v12 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v14];

    uint64_t v15 = v37;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1001B7238();
  }

  if (a1[6] >= 5uLL)
  {
    id v9 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001B9040();
    }
LABEL_19:

    goto LABEL_20;
  }
  uint64_t v16 = [v6 domain];
  if ([v16 isEqualToString:CKErrorDomain])
  {
    if ([v6 code] == (id)3 || objc_msgSend(v6, "code") == (id)4 || objc_msgSend(v6, "code") == (id)9)
    {

LABEL_16:
      uint64_t v17 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_1001B90A8();
      }

      id v9 = +[CloudXPCService sharedInstance];
      id v18 = +[NSNumber numberWithBool:0];
      dispatch_time_t v19 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v18, @"kUploadStatus", 0];
      [v9 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v19];

      goto LABEL_19;
    }
    id v32 = [v6 code];

    if (v32 == (id)6) {
      goto LABEL_16;
    }
  }
  else
  {
  }
  if ([v6 code] == (id)7)
  {
    id v20 = [v6 userInfo];
    id v21 = [v20 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v21)
    {
      id v22 = [v6 userInfo];
      id v23 = [v22 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v23 doubleValue];
      double v25 = v24 + 5.0;

      id v26 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = a1[6];
        *(_DWORD *)buf = 138412802;
        id v42 = v6;
        __int16 v43 = 2048;
        uint64_t v44 = v27;
        __int16 v45 = 2048;
        unint64_t v46 = (unint64_t)v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Manatee: writeAccessoryBlob failed with error %@, retry count = %lu, retry time: %lu", buf, 0x20u);
      }

      dispatch_time_t v28 = dispatch_time(0, (uint64_t)(v25 * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10009142C;
      block[3] = &unk_100233AA8;
      uint64_t v29 = (void *)a1[5];
      void block[4] = a1[4];
      id v30 = v29;
      uint64_t v31 = a1[6];
      id v39 = v30;
      uint64_t v40 = v31;
      dispatch_after(v28, (dispatch_queue_t)&_dispatch_main_q, block);
      uint64_t v15 = v39;
LABEL_10:
    }
  }
LABEL_20:
}

void sub_10009142C(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v2 = [*(id *)(a1 + 32) modifyOperationQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10009152C;
  v5[3] = &unk_100234E58;
  objc_copyWeak(v7, &location);
  id v3 = *(id *)(a1 + 40);
  id v4 = *(void **)(a1 + 48);
  id v6 = v3;
  v7[1] = v4;
  [v2 addOperationWithBlock:v5];

  objc_destroyWeak(v7);
  objc_destroyWeak(&location);
}

void sub_100091508(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10009152C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained modifyAccessoryBlob:*(void *)(a1 + 32) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100091584(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001B9110();
    }
  }
}

void sub_100091860(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = sub_10006CA04("MagicPairing");
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v4;
      id v7 = "Manatee: deleteCloudKitAccessoryZone: error %@ ";
      id v8 = v5;
      uint32_t v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
    }
  }
  else if (v6)
  {
    *(_WORD *)buf = 0;
    id v7 = "Manatee: Successfully deleted record";
    id v8 = v5;
    uint32_t v9 = 2;
    goto LABEL_6;
  }

  char v10 = +[CloudXPCService sharedInstance];
  unsigned __int8 v11 = +[NSNumber numberWithInt:v4 == 0, @"kUploadStatus"];
  uint64_t v14 = v11;
  uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
  [v10 sendCloudKitMsg:@"DeviceInfoUploadStatus" args:v12];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000919E4(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1001B9178();
  }
}

void sub_100091E08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B9248();
    }

    uint32_t v9 = [v6 userInfo];
    char v10 = [v9 objectForKeyedSubscript:NSUnderlyingErrorKey];

    unsigned __int8 v11 = [v6 domain];
    if ([v11 isEqualToString:CKErrorDomain] && CKErrorIsCode() && v10)
    {
      id v12 = [v10 code];

      if (v12 != (id)2032 || !*(void *)(a1 + 32)) {
        goto LABEL_18;
      }
      uint64_t v13 = [v6 localizedDescription];
      uint64_t v14 = [v13 rangeOfString:@"'"];
      uint64_t v16 = v15;

      uint64_t v17 = [v6 localizedDescription];
      id v18 = [v17 rangeOfString:@"'" options:4];

      dispatch_time_t v19 = &v14[v16];
      int64_t v20 = v18 - &v14[v16];
      id v21 = [v6 localizedDescription];
      unsigned __int8 v11 = [v21 substringWithRange:v19, v20];

      id v22 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_1001B91E0();
      }

      uint64_t v23 = *(void *)(a1 + 32);
      if (v23) {
        [*(id *)(a1 + 40) setuserPreference:v23 value:v11 sync:1];
      }
    }

LABEL_18:
    goto LABEL_19;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = 138412290;
    id v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: saveSubscription record: %@", (uint8_t *)&v26, 0xCu);
  }

  uint64_t v24 = *(void *)(a1 + 32);
  if (v24)
  {
    double v25 = *(void **)(a1 + 40);
    char v10 = [v5 subscriptionID];
    [v25 setuserPreference:v24 value:v10 sync:1];
    goto LABEL_18;
  }
LABEL_19:
}

void sub_1000922E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1001B9318();
    }

    uint32_t v9 = [v6 domain];
    if ([v9 isEqualToString:CKErrorDomain])
    {
      id v10 = [v6 code];

      if (v10 == (id)11)
      {
        [*(id *)(a1 + 40) removeuserPreference:*(void *)(a1 + 48) sync:1];
        [*(id *)(a1 + 40) createSubscritionForRecordType:*(void *)(a1 + 56)];
      }
      goto LABEL_16;
    }
LABEL_15:

    goto LABEL_16;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 138412290;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Manatee: Found existing subscription - %@", (uint8_t *)&v18, 0xCu);
  }

  unsigned __int8 v11 = *(void **)(a1 + 32);
  id v12 = [v5 subscriptionID];
  unsigned int v13 = [v11 isEqualToString:v12];

  uint64_t v14 = sub_10006CA04("MagicPairing");
  uint32_t v9 = v14;
  if (!v13)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1001B92B0();
    }
    goto LABEL_15;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 138412290;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: Already created this subscription - %@", (uint8_t *)&v18, 0xCu);
  }

  uint64_t v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = [v5 subscriptionID];
  [v15 setuserPreference:v16 value:v17 sync:1];

  [*(id *)(a1 + 40) setCloudSubscription:v5];
LABEL_16:
}

void sub_100092654(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    id v6 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee: Found subscription - %@", (uint8_t *)&v12, 0xCu);
    }

    id v7 = *(void **)(a1 + 32);
    id v8 = [v5 subscriptionID];
    LODWORD(v7) = [v7 isEqualToString:v8];

    if (v7)
    {
      uint32_t v9 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Manatee: Already have subscription - %@", (uint8_t *)&v12, 0xCu);
      }

      id v10 = *(void **)(a1 + 40);
      unsigned __int8 v11 = [v5 subscriptionID];
      [v10 setuserPreference:@"MagicCloudPairingAccessorySubscriptionManateeID" value:v11 sync:1];

      [*(id *)(a1 + 40) setCloudSubscription:v5];
    }
  }
}

void sub_100092968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 64));
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1000929A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v19 = a3;
  id val = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Manatee: fetchAllSubscriptionsWithCompletionHandler: error %@ ", buf, 0xCu);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v25;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v7);
        }
        unsigned __int8 v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v12 = v11;
          id v13 = [v12 recordType];
          unsigned int v14 = [v13 isEqualToString:*(void *)(a1 + 32)];

          if (v14)
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
            uint64_t v15 = sub_10006CA04("MagicPairing");
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v16 = *(void **)(a1 + 32);
              *(_DWORD *)buf = 138412546;
              id v29 = v16;
              __int16 v30 = 2112;
              id v31 = v12;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Manatee: Delete Subscription for record type: %@ and sub: %@", buf, 0x16u);
            }

            objc_initWeak((id *)buf, val);
            uint64_t v17 = [val cloudKitDatabase];
            uint64_t v18 = [v12 subscriptionID];
            v21[0] = _NSConcreteStackBlock;
            v21[1] = 3221225472;
            void v21[2] = sub_100092D1C;
            void v21[3] = &unk_100234FB8;
            id v22 = *(id *)(a1 + 32);
            objc_copyWeak(&v23, (id *)buf);
            [v17 deleteSubscriptionWithID:v18 completionHandler:v21];

            objc_destroyWeak(&v23);
            objc_destroyWeak((id *)buf);
          }
        }
      }
      id v8 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v8);
  }

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    [val setuserPreference:@"MagicPairingMasterKeySubscriptionManateeDisabled" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_100092CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100092D1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = sub_10006CA04("MagicPairing");
  BOOL v8 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v9;
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Error Deleting Subscription for record type: %@ with error: %@ ", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Manatee: Successfully deleted Subscription for record type - %@ with ID - %@", (uint8_t *)&v11, 0x16u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained setuserPreference:@"MagicPairingMasterKeySubscriptionManateeDisabled" value:&__kCFBooleanTrue sync:1];
  }
}

void sub_100093108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100093134(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error getting server preferred push environment %@", (uint8_t *)&v11, 0xCu);
    }
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
  id v10 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000934D4(uint64_t a1)
{
  id v2 = +[CloudXPCService sharedInstance];
  [v2 beginTransaction:@"ManateeIdentityLost"];

  id v3 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) recordZoneBlob];
    id v5 = [v4 zoneID];
    id v6 = [v5 zoneName];
    id v7 = [*(id *)(a1 + 32) recordZoneAccessoryDatabase];
    uint64_t v8 = [v7 zoneID];
    uint64_t v9 = [v8 zoneName];
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, " >>> Manatee Identity Lost Reset Both Zones %@ - %@", buf, 0x16u);
  }
  dispatch_time_t v10 = dispatch_time(0, 5000000000);
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  id v12 = [*(id *)(a1 + 32) cloudKitDatabase];
  __int16 v13 = [*(id *)(a1 + 32) recordZoneBlob];
  id v14 = [v13 zoneID];
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  void v42[2] = sub_100093958;
  v42[3] = &unk_100235898;
  dispatch_semaphore_t v43 = v11;
  uint64_t v15 = v11;
  [v12 deleteRecordZoneWithID:v14 completionHandler:v42];

  dispatch_semaphore_wait(v15, v10);
  dispatch_semaphore_t v16 = dispatch_semaphore_create(0);
  uint64_t v17 = [*(id *)(a1 + 32) cloudKitDatabase];
  uint64_t v18 = [*(id *)(a1 + 32) recordZoneAccessoryDatabase];
  id v19 = [v18 zoneID];
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_100093A3C;
  v40[3] = &unk_100235898;
  int64_t v20 = v16;
  long long v41 = v20;
  [v17 deleteRecordZoneWithID:v19 completionHandler:v40];

  dispatch_semaphore_wait(v20, v10);
  id v21 = dispatch_group_create();
  *(void *)buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000;
  char v45 = 0;
  id v22 = +[CloudXPCService sharedInstance];
  id v23 = [v22 deviceManager];

  dispatch_group_enter(v21);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_100093B20;
  v36[3] = &unk_1002358C0;
  long long v24 = v21;
  uint64_t v25 = *(void *)(a1 + 32);
  id v37 = v24;
  uint64_t v38 = v25;
  id v39 = buf;
  [v23 fetchAccountMagicKeysBlobWithCompletion:v36];
  dispatch_group_enter(v24);
  id v29 = _NSConcreteStackBlock;
  uint64_t v30 = 3221225472;
  id v31 = sub_100093B78;
  id v32 = &unk_1002358E8;
  uint64_t v26 = *(void *)(a1 + 32);
  id v35 = buf;
  uint64_t v33 = v26;
  long long v27 = v24;
  uint64_t v34 = v27;
  [v23 fetchLegacyMagicPairingRecordsWithCompletion:&v29];
  dispatch_group_notify(v27, (dispatch_queue_t)&_dispatch_main_q, &stru_100235908);
  dispatch_time_t v28 = +[CloudXPCService sharedInstance];
  [v28 endTransaction:@"ManateeIdentityLost"];

  _Block_object_dispose(buf, 8);
}

void sub_100093938(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100093958(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee Identity Lost resetMasterZone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v8, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100093A3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee Identity Lost Reset Accessory Zone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v8, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100093B20(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    [*(id *)(a1 + 40) writeKeyBlob:a2 withRetryCount:0];
  }
  id v3 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v3);
}

void sub_100093B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    [*(id *)(a1 + 32) writeAccessoryBlob:v3 withRetryCount:0];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100093BF8(id a1)
{
  uint64_t v1 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Manatee Identity Lost Reset Done", v2, 2u);
  }
}

id sub_100094030(uint64_t a1)
{
  return _[*(id *)(a1 + 32) resetMasterZone:*(void *)(a1 + 40) accessoryblob:*(void *)(a1 + 48)];
}

void sub_100094040(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "resetMasterZone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v8, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000943F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob saveRecordZone: error %@ ", buf, 0xCu);
    }
  }
  else
  {
    if (v8)
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob saveRecordZone record  %@", buf, 0xCu);
    }

    id v9 = [*(id *)(a1 + 32) cloudKitDatabase];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_1000945B4;
    v14[3] = &unk_100235930;
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    [v9 saveRecord:v10 completionHandler:v14];

    id v7 = v15;
  }

  __int16 v13 = +[CloudXPCService sharedInstance];
  [v13 endTransaction:@"updateMasterZoneBlob"];
}

void sub_1000945B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob createRecordZone: error %@ ", buf, 0xCu);
    }
LABEL_13:

    goto LABEL_14;
  }
  if ((unint64_t)[*(id *)(a1 + 32) length] < 3)
  {
    id v7 = xpc_create_with_format();
    CFRetain(v7);
    id v9 = [[*(id *)(a1 + 40) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount" defaultValue:1];

    if (!v9)
    {
      [*(id *)(a1 + 40) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      uint64_t v10 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob Master zone has been upgraded successfully", buf, 2u);
      }
    }
    id v11 = +[CloudXPCService sharedInstance];
    uint64_t v12 = +[NSNumber numberWithBool:1];
    __int16 v13 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v12, @"kUploadStatus", 0];
    [v11 sendCloudKitMsg:@"manateeUdpateStatus" args:v13];

    goto LABEL_13;
  }
  BOOL v8 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateMasterZoneBlob record  %@", buf, 0xCu);
  }

  [*(id *)(a1 + 40) resetAccessoryZone:*(void *)(a1 + 32)];
LABEL_14:
}

void sub_1000949E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "resetAccessoryZone (%@) deleteRecordWithID: error %@ ", (uint8_t *)&v8, 0x16u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100094D98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (v8)
    {
      *(_DWORD *)buf = 138412290;
      id v41 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob saveRecordZone record  %@", buf, 0xCu);
    }

    int64_t v20 = [*(id *)(a1 + 32) cloudKitDatabase];
    uint64_t v30 = _NSConcreteStackBlock;
    uint64_t v31 = 3221225472;
    id v32 = sub_100095174;
    uint64_t v33 = &unk_100234D40;
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 32);
    id v23 = *(void **)(a1 + 40);
    uint64_t v36 = *(void *)(a1 + 56);
    uint64_t v34 = v22;
    id v35 = v23;
    [v20 saveRecord:v21 completionHandler:&v30];

    long long v24 = v35;
    goto LABEL_21;
  }
  if (v8)
  {
    *(_DWORD *)buf = 138412290;
    id v41 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "upgradeAccessoryBlob upgradeRecordZone: error %@ ", buf, 0xCu);
  }

  id v9 = [v6 domain];
  if ([v9 isEqualToString:CKErrorDomain]
    && ([v6 code] == (id)3
     || [v6 code] == (id)7
     || [v6 code] == (id)4
     || [v6 code] == (id)9
     || [v6 code] == (id)6))
  {
    unint64_t v10 = *(void *)(a1 + 56);

    if (v10 <= 3)
    {
      id v11 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138412546;
        id v41 = v6;
        __int16 v42 = 2048;
        uint64_t v43 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob failed with error %@, retry count = %lu", buf, 0x16u);
      }

      __int16 v13 = [v6 userInfo];
      id v14 = [v13 objectForKeyedSubscript:CKErrorRetryAfterKey];

      if (v14)
      {
        id v15 = [v6 userInfo];
        uint64_t v16 = [v15 objectForKeyedSubscript:CKErrorRetryAfterKey];
        [v16 doubleValue];
        double v18 = v17;

        int64_t v19 = (uint64_t)(v18 * 1000000000.0);
      }
      else
      {
        int64_t v19 = 60000000000;
      }
      dispatch_time_t v25 = dispatch_time(0, v19);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100095160;
      block[3] = &unk_100233AA8;
      uint64_t v26 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v27 = v26;
      uint64_t v28 = *(void *)(a1 + 56);
      id v38 = v27;
      uint64_t v39 = v28;
      dispatch_after(v25, (dispatch_queue_t)&_dispatch_main_q, block);
      long long v24 = v38;
LABEL_21:
    }
  }
  else
  {
  }
  id v29 = +[CloudXPCService sharedInstance];
  [v29 endTransaction:@"upgradeAccessoryBlob"];
}

id sub_100095160(uint64_t a1)
{
  return [*(id *)(a1 + 32) upgradeAccessoryBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_100095174(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10006CA04("MagicPairing");
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (v8)
    {
      *(_DWORD *)buf = 138412290;
      id v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob record  %@", buf, 0xCu);
    }

    id v9 = (void *)xpc_create_with_format();
    CFRetain(v9);
    int64_t v20 = [[*(id *)(a1 + 32) readUserPreference:@"MagicCloudPairingManateeUpgradedAccount" defaultValue:1];

    if (!v20)
    {
      [*(id *)(a1 + 32) setuserPreference:@"MagicCloudPairingManateeUpgradedAccount" value:&__kCFBooleanTrue sync:1];
      uint64_t v21 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob Master zone has been upgraded successfully", buf, 2u);
      }
    }
    uint64_t v22 = +[CloudXPCService sharedInstance];
    id v23 = +[NSNumber numberWithBool:1];
    long long v24 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:v23, @"kUploadStatus", 0];
    [v22 sendCloudKitMsg:@"manateeUdpateStatus" args:v24];

    goto LABEL_22;
  }
  if (v8)
  {
    *(_DWORD *)buf = 138412290;
    id v33 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob: error %@ ", buf, 0xCu);
  }

  id v9 = [v6 domain];
  if (![v9 isEqualToString:CKErrorDomain]
    || [v6 code] != (id)3
    && [v6 code] != (id)7
    && [v6 code] != (id)4
    && [v6 code] != (id)9
    && [v6 code] != (id)6)
  {
LABEL_22:

    goto LABEL_23;
  }
  unint64_t v10 = *(void *)(a1 + 48);

  if (v10 <= 3)
  {
    id v11 = sub_10006CA04("MagicPairing");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      id v33 = v6;
      __int16 v34 = 2048;
      uint64_t v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Manatee: upgradeAccessoryBlob failed with error %@, retry count = %lu", buf, 0x16u);
    }

    __int16 v13 = [v6 userInfo];
    id v14 = [v13 objectForKeyedSubscript:CKErrorRetryAfterKey];

    if (v14)
    {
      id v15 = [v6 userInfo];
      uint64_t v16 = [v15 objectForKeyedSubscript:CKErrorRetryAfterKey];
      [v16 doubleValue];
      double v18 = v17;

      int64_t v19 = (uint64_t)(v18 * 1000000000.0);
    }
    else
    {
      int64_t v19 = 60000000000;
    }
    dispatch_time_t v25 = dispatch_time(0, v19);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000955A8;
    block[3] = &unk_100233AA8;
    uint64_t v26 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v27 = v26;
    uint64_t v28 = *(void *)(a1 + 48);
    id v30 = v27;
    uint64_t v31 = v28;
    dispatch_after(v25, (dispatch_queue_t)&_dispatch_main_q, block);
  }
LABEL_23:
}

id sub_1000955A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) upgradeAccessoryBlob:*(void *)(a1 + 40) withRetryCount:*(void *)(a1 + 48) + 1];
}

void sub_1000957F4(uint64_t a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = *(id *)(a1 + 32);
    id v3 = [v2 recordZoneID];
    id v4 = [v3 zoneName];
    unsigned int v5 = [v4 isEqualToString:@"MagicCloudPairingCustomKeyBlobZone"];

    if (v5)
    {
      id v6 = sub_10006CA04("MagicPairing");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "*****>>>> Manatee: Master Key Updated", buf, 2u);
      }

      if ([*(id *)(a1 + 40) isWriteMasterKeysInProgress])
      {
        id v7 = sub_10006CA04("MagicPairing");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "*****>>>> Manatee: Master Key Updated but we are in process to push new key. Dont fetch", buf, 2u);
        }
      }
      else
      {
        [*(id *)(a1 + 40) setMasterBlob:0];
        [*(id *)(a1 + 40) fetchKeyBlob:0];
      }
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000959B0;
  block[3] = &unk_100232710;
  void block[4] = *(void *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

id sub_1000959B0(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPauseFetch:0];
  [*(id *)(a1 + 32) setPauseErrorReason:0];
  id v2 = *(void **)(a1 + 32);

  return [v2 fetchAccessoryKeyBlob:0];
}

void sub_100095E78(id a1)
{
  uint64_t v1 = objc_alloc_init(BTIdentityDaemon);
  uint64_t v2 = qword_100263F30;
  qword_100263F30 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100096024(uint64_t a1)
{
  if (dword_1002614F8 <= 30 && (dword_1002614F8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) == -1)
  {
    id v3 = *(NSObject **)(v2 + 16);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000961EC;
    handler[3] = &unk_1002329C0;
    handler[4] = v2;
    notify_register_dispatch("com.apple.bluetooth.daemonStarted", (int *)(v2 + 8), v3, handler);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (!*(unsigned char *)(v2 + 40))
  {
    id v4 = +[NSNotificationCenter defaultCenter];
    [v4 addObserver:*(void *)(a1 + 32) selector:"_idsDevicesChanged:" name:@"BTTotalIDSDeviceCountChanged" object:0];
    *(unsigned char *)(*(void *)(a1 + 32) + 40) = 1;
  }
  unsigned int v5 = +[CBIDSManager sharedInstance];
  unsigned int v6 = [v5 isReady];

  if (v6)
  {
    id v7 = +[CBIDSManager sharedInstance];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100096278;
    v8[3] = &unk_1002355D8;
    void v8[4] = *(void *)(a1 + 32);
    [v7 fetchIDSDevicesWithCompletion:v8];
  }
}

id sub_1000961EC(uint64_t a1)
{
  if (dword_1002614F8 <= 30 && (dword_1002614F8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 12) = 0;
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _idsScheduleUpdateIdentities];
}

void sub_100096278(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  id v7[2] = sub_100096314;
  v7[3] = &unk_100232A10;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_100096314(uint64_t a1)
{
  if (dword_1002614F8 <= 30 && (dword_1002614F8 != -1 || _LogCategory_Initialize()))
  {
    [*(id *)(a1 + 32) count];
    LogPrintF();
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 32), *(id *)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 40);

  return [v2 _idsScheduleUpdateIdentities];
}

void sub_10009642C(uint64_t a1)
{
  if (dword_1002614F8 <= 30 && (dword_1002614F8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 8);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x290], 8) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(unsigned char *)(v2 + 40))
  {
    uint64_t v4 = +[NSNotificationCenter defaultCenter];
    [v4 removeObserver:*(void *)(a1 + 32) name:@"BTTotalIDSDeviceCountChanged" object:0];

    *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  unsigned int v5 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;

  [*(id *)(*(void *)(a1 + 32) + 24) invalidate];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 24);
  *(void *)(v6 + 24) = 0;
}

uint64_t sub_10009664C(uint64_t a1)
{
  if (dword_1002614F8 <= 30 && (dword_1002614F8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  if (![*(id *)(a1 + 32) caseInsensitiveCompare:@"idsUpForce"]) {
    *(unsigned char *)(*(void *)(a1 + 40) + 12) = 0;
  }
  [*(id *)(a1 + 40) _idsScheduleUpdateIdentities];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

void sub_1000967A0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  CFArrayGetTypeID();
  int v3 = CFDictionaryGetTypedValue();

  if (dword_1002614F8 <= 30 && (dword_1002614F8 != -1 || _LogCategory_Initialize()))
  {
    [v3 count];
    LogPrintF();
  }
  uint64_t v4 = *(void *)(a1 + 40);
  unsigned int v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = v3;
  id v6 = v3;

  [*(id *)(a1 + 40) _idsScheduleUpdateIdentities];
}

void *sub_100096988(void *result)
{
  if (result[4] == *(void *)(result[5] + 24))
  {
    uint64_t v1 = result;
    if (dword_1002614F8 <= 30 && (dword_1002614F8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = (void *)v1[5];
    return _[v2 _idsUpdateIdentities];
  }
  return result;
}

void sub_100097118(id a1, NSString *a2, CBDeviceIdentity *a3, BOOL *a4)
{
}

uint64_t sub_100097124(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1 + 32) invalidate];
  id v4 = v6;
  if (v6)
  {
    if (dword_1002614F8 <= 90)
    {
      if (dword_1002614F8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = v6, v3))
      {
        id v3 = (id)LogPrintF();
        id v4 = v6;
      }
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 12) = 1;
  }

  return _objc_release_x1(v3, v4);
}

uint64_t sub_100097600()
{
  ccaes_ecb_decrypt_mode();

  return ccecb_one_shot();
}

uint64_t sub_100097658()
{
  ccaes_ecb_encrypt_mode();

  return ccecb_one_shot();
}

void sub_100098B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100098BA4(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleEvent:v3];
}

void sub_1000996D4(id a1)
{
  uint64_t v1 = objc_alloc_init(BTServicesDaemon);
  uint64_t v2 = qword_100263F40;
  qword_100263F40 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100099E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

uint64_t sub_100099E7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100099E8C(uint64_t a1)
{
}

void sub_100099E94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v3 + 40);
  id v4 = [a3 bleDevice];
  NSAppendPrintF();
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10009A300(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 16))
  {
    id v11 = v5;
    if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize()))
    {
      if (a2 > 6) {
        id v6 = "?";
      }
      else {
        id v6 = off_100235C38[a2];
      }
      uint64_t v9 = v6;
      id v10 = v11;
      LogPrintF();
    }
    switch(a2)
    {
      case 1u:
        if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
          LogPrintF();
        }
        [*(id *)(a1 + 40) openRadarforAudioQuality:v9, v10];
        break;
      case 2u:
        if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
          goto LABEL_22;
        }
        break;
      case 4u:
        if (dword_100261638 <= 90 && (dword_100261638 != -1 || _LogCategory_Initialize()))
        {
          uint64_t v9 = *(const char **)(a1 + 48);
          goto LABEL_22;
        }
        break;
      case 6u:
        if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
LABEL_22:
        }
          LogPrintF();
        break;
      default:
        break;
    }
    [*(id *)(*(void *)(a1 + 40) + 16) invalidate:v9];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 16);
    *(void *)(v7 + 16) = 0;

    id v5 = v11;
  }
}

id sub_10009A5EC(uint64_t a1)
{
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _activate];
}

id sub_10009AA74(uint64_t a1)
{
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _prefsChanged];
}

uint64_t sub_10009AAF8(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100261638 <= 30)
  {
    if (dword_100261638 != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF();
    }
  }
  *(unsigned char *)(*(void *)(v1 + 32) + 184) = 1;
  return result;
}

id sub_10009AB74(uint64_t a1)
{
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 _audioQualityShowBanner:1 title:@"AirPods Audio Experience" deviceAddressString:@"deviceAddressString" messageKey:@"Click here to report audio quality related feedback" messageArgs:0 timeoutSeconds:10.0];
}

uint64_t sub_10009AC1C(uint64_t a1)
{
  return _CUStateDumpWithObject("BTServices", *(void *)(a1 + 32), &dword_100261638);
}

unsigned char *sub_10009AC38(uint64_t a1)
{
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[184])
  {
    [result showCrashBannerIfNeeded:&off_1002447C8];
    uint64_t result = *(unsigned char **)(a1 + 32);
  }
  result[184] = 0;
  return result;
}

void sub_10009ACC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v5 = v3;
    if (dword_100261638 <= 90 && (dword_100261638 != -1 || _LogCategory_Initialize()))
    {
      id v4 = v5;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 32) + 32) invalidate:v4];
    id v3 = v5;
  }
}

id sub_10009ADE8(uint64_t a1)
{
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 56);
  if (v3 != -1)
  {
    notify_cancel(v3);
    *(_DWORD *)(*(void *)(a1 + 32) + 56) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  int v4 = *(_DWORD *)(v2 + 52);
  if (v4 != -1)
  {
    notify_cancel(v4);
    *(_DWORD *)(*(void *)(a1 + 32) + 52) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  int v5 = *(_DWORD *)(v2 + 8);
  if (v5 != -1)
  {
    notify_cancel(v5);
    *(_DWORD *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x290], 8) = -1;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  if (*(void *)(v2 + 136))
  {
    os_state_remove_handler();
    *(void *)(*(void *)(a1 + 32) + 136) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  [*(id *)(v2 + 176) invalidate];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 176);
  *(void *)(v6 + 176) = 0;

  [*(id *)(*(void *)(a1 + 32) + 32) invalidate];
  [*(id *)(a1 + 32) _cbConnectedDiscoveryEnsureStopped];
  [*(id *)(a1 + 32) _shareAudioActionScannerEnsureStopped];
  id v8 = *(void **)(a1 + 32);

  return _[v8 _shareAudioConnectedMonitorEnsureStopped];
}

id sub_10009B33C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10009B790(uint64_t a1, unsigned int a2, void *a3)
{
  id v8 = a3;
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize()))
  {
    if (a2 > 5) {
      int v5 = "?";
    }
    else {
      int v5 = off_100235C70[a2];
    }
    uint64_t v6 = v5;
    id v7 = v8;
    LogPrintF();
  }
  [*(id *)(a1 + 32) invalidate:v6 with:v7];
}

id sub_10009B858(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);

  return _[v2 _fileRadarForFWCrash:v3];
}

void sub_10009C0D4(uint64_t a1, unsigned int a2, void *a3)
{
  id v8 = a3;
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize()))
  {
    if (a2 > 5) {
      int v5 = "?";
    }
    else {
      int v5 = off_100235C70[a2];
    }
    uint64_t v6 = v5;
    id v7 = v8;
    LogPrintF();
  }
  [*(id *)(a1 + 32) invalidate:v6 withCompletionHandler:v7];
}

void sub_10009C4B8(uint64_t a1, unsigned int a2, void *a3)
{
  id v8 = a3;
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize()))
  {
    if (a2 > 5) {
      int v5 = "?";
    }
    else {
      int v5 = off_100235C70[a2];
    }
    uint64_t v6 = v5;
    id v7 = v8;
    LogPrintF();
  }
  [*(id *)(a1 + 32) invalidate:v6, v7];
}

id sub_10009C580(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);

  return _[v2 _fileRadarForHIDLag:v3];
}

id sub_10009C8C4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _showConnectBannerIfEnabled:a2];
}

void sub_10009C8D0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    if (dword_100261638 <= 90 && (dword_100261638 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
      [*(id *)(*(void *)(a1 + 32) + 24) invalidate:v4];
    }
    else
    {
      [*(id *)(*(void *)(a1 + 32) + 24) invalidate:v3];
    }
  }
  else
  {
    [*(id *)(a1 + 32) _update];
  }
}

id sub_10009CCEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcConnectionInvalidated:*(void *)(a1 + 40)];
}

void *sub_10009CFF8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[8] == *(void *)(a1 + 40)) {
    return _[result _shareAudioActionScannerDeviceFound:a2];
  }
  return result;
}

void *sub_10009D01C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[8] == *(void *)(a1 + 40)) {
    return [result _shareAudioActionScannerDeviceLost:a2];
  }
  return result;
}

void *sub_10009D040(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[8] == *(void *)(a1 + 40)) {
    return _[result _shareAudioActionScannerDeviceFound:a2];
  }
  return result;
}

void sub_10009D064(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(a1 + 32) + 64) == *(void *)(a1 + 40))
  {
    id v7 = v3;
    if (dword_100261768 <= 90 && (dword_100261768 != -1 || _LogCategory_Initialize()))
    {
      id v6 = v7;
      LogPrintF();
    }
    [*(id *)(a1 + 40) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 64);
    *(void *)(v4 + 64) = 0;

    id v3 = v7;
  }
}

void *sub_10009D85C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[11]) {
    return _[result _shareAudioConnectedDeviceFound:a2];
  }
  return result;
}

void *sub_10009D878(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[11]) {
    return _[result _shareAudioConnectedDeviceLost:a2];
  }
  return result;
}

void sub_10009DE78(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 96))
  {
    id v11 = v5;
    if (dword_100261768 <= 30 && (dword_100261768 != -1 || _LogCategory_Initialize()))
    {
      if (a2 > 5) {
        id v6 = "?";
      }
      else {
        id v6 = off_100235C70[a2];
      }
      uint64_t v9 = v6;
      id v10 = v11;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 40) + 96) invalidate:v9, v10];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 96);
    *(void *)(v7 + 96) = 0;

    id v5 = v11;
  }
}

void *sub_10009DF64(void *result)
{
  if (result[4] == *(void *)(result[5] + 96))
  {
    uint64_t v1 = result;
    if (dword_100261768 <= 30 && (dword_100261768 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    [(id)v1[4] invalidate];
    uint64_t v2 = v1[5];
    uint64_t v3 = *(void **)(v2 + 96);
    *(void *)(v2 + 96) = 0;

    uint64_t v4 = (void *)v1[5];
    uint64_t v5 = v1[6];
    uint64_t v6 = v1[7];
    return [v4 _shareAudioSessionStartWithDarwinDevice:v5 wxDevice:v6];
  }
  return result;
}

void *sub_10009E1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v4 == result[13]) {
    return _[result _shareAudioSessionProgressEvent:a2 info:a3];
  }
  return result;
}

uint64_t sub_10009E99C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10009EE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009EE44(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261638 <= 90 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_10009F0D0(uint64_t a1, unsigned int a2, void *a3)
{
  id v8 = a3;
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize()))
  {
    if (a2 > 5) {
      uint64_t v5 = "?";
    }
    else {
      uint64_t v5 = off_100235C70[a2];
    }
    uint64_t v6 = v5;
    id v7 = v8;
    LogPrintF();
  }
  [*(id *)(a1 + 32) invalidate:v6, v7];
}

id sub_10009F198(uint64_t a1)
{
  if (dword_100261638 <= 30 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 invalidate];
}

void sub_10009F47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  (*(void (**)(uint64_t))(v10 + 16))(v10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F4C8(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261638 <= 90 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_10009F878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  (*(void (**)(uint64_t))(v17 + 16))(v17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009F8B4(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_100261638 <= 90 && (dword_100261638 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 40) + 16);
    return v2();
  }
  return result;
}

void sub_10009F98C(int8x16_t *a1, int a2, void *a3)
{
  id v5 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  int8x16_t v6 = vextq_s8(a1[2], a1[2], 8uLL);
  uint64_t v7 = a1[2].i64[0];
  void v10[2] = sub_10009FA3C;
  v10[3] = &unk_100235C18;
  id v8 = *(NSObject **)(v7 + 32);
  int8x16_t v11 = v6;
  int v13 = a2;
  id v12 = v5;
  id v9 = v5;
  dispatch_async(v8, v10);
}

void sub_10009FA3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v1 + 40))
  {
    id v3 = [*(id *)(v1 + 56) remoteObjectProxy];
    [v3 shareAudioProgressEvent:*(unsigned int *)(a1 + 56) info:*(void *)(a1 + 48)];
  }
}

void sub_10009FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009FCCC(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    if (dword_100261638 <= 90)
    {
      if (dword_100261638 != -1) {
        return LogPrintF();
      }
      uint64_t result = _LogCategory_Initialize();
      if (result) {
        return LogPrintF();
      }
    }
  }
  return result;
}

id sub_10009FF40(uint64_t a1)
{
  if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v2 = *(int *)(*(void *)(a1 + 32) + 236);
    if (v2 > 2) {
      id v3 = "?";
    }
    else {
      id v3 = off_100235D18[v2];
    }
    int8x16_t v6 = v3;
    LogPrintF();
  }
  [*(id *)(a1 + 32) _reportProgress:10 v6];
  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _run];
}

void *sub_1000A0078(void *result)
{
  if (!*(unsigned char *)(result[4] + 181))
  {
    uint64_t v1 = result;
    if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    *(unsigned char *)(v1[4] + 181) = 1;
    uint64_t v2 = (void *)v1[4];
    return [v2 _invalidate];
  }
  return result;
}

void *sub_1000A09FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _bleScannerProxPairingDeviceFound:a2];
  }
  return result;
}

void *sub_1000A0A18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return _[result _bleScannerProxPairingDeviceFound:a2];
  }
  return result;
}

uint64_t sub_1000A0A34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 24) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = 0;

      goto LABEL_11;
    }
    if (dword_1002617D8 <= 30)
    {
      id v9 = 0;
      if (dword_1002617D8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void *sub_1000A0DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[2]) {
    return _[result _bleScannerNearbyInfoDeviceFound:a2];
  }
  return result;
}

void *sub_1000A0DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[2]) {
    return _[result _bleScannerNearbyInfoDeviceFound:a2];
  }
  return result;
}

uint64_t sub_1000A0DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 16))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 16) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 16);
      *(void *)(v5 + 16) = 0;

      goto LABEL_11;
    }
    if (dword_1002617D8 <= 30)
    {
      id v9 = 0;
      if (dword_1002617D8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000A1094(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void))
{
  uint64_t v5 = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == v5[24])
  {
    id v8 = a4;
    [v5 _runShareAudioServiceConfigRequest:a3 responseHandler:];
  }
  else
  {
    int8x16_t v6 = a4;
    BTErrorF();
    id v8 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    a4[2](v6);
  }
}

void sub_1000A1144(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void))
{
  uint64_t v5 = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == v5[24])
  {
    id v8 = a4;
    [v5 _runShareAudioServiceConnectRequest:a3 responseHandler:];
  }
  else
  {
    int8x16_t v6 = a4;
    BTErrorF();
    id v8 = (void (**)(void))objc_claimAutoreleasedReturnValue();
    a4[2](v6);
  }
}

void sub_1000A146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A14A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A14B4(uint64_t a1)
{
}

uint64_t sub_1000A14BC(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

void sub_1000A176C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000A17A4(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v1 + 32) + 16);
    return v2();
  }
  return result;
}

uint64_t sub_1000A1B3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
      {
        id v8 = v9;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 8) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 8);
      *(void *)(v5 + _Block_object_dispose(&STACK[0x290], 8) = 0;

      goto LABEL_11;
    }
    if (dword_1002617D8 <= 30)
    {
      id v9 = 0;
      if (dword_1002617D8 != -1 || (v3 = (id)_LogCategory_Initialize(), id v4 = 0, v3))
      {
        id v3 = (id)LogPrintF();
LABEL_11:
        id v4 = v9;
      }
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000A20E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160))
  {
    id v9 = v3;
    if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
    {
      id v8 = v9;
      LogPrintF();
    }
    [*(id *)(*(void *)(a1 + 40) + 160) invalidate:v8];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 160);
    *(void *)(v4 + 160) = 0;

    *(_DWORD *)(*(void *)(a1 + 40) + 132) = 3;
    int8x16_t v6 = *(void **)(a1 + 40);
    if (v9)
    {
      [v6 _reportError:v9];
    }
    else
    {
      uint64_t v7 = NSErrorF();
      [v6 _reportError:v7];
    }
    id v3 = v9;
  }
}

uint64_t sub_1000A2208(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 160) && dword_1002617D8 <= 90)
  {
    if (dword_1002617D8 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      return LogPrintF();
    }
  }
  return result;
}

uint64_t sub_1000A228C(uint64_t result)
{
  if (*(void *)(result + 32) == *(void *)(*(void *)(result + 40) + 160) && dword_1002617D8 <= 90)
  {
    if (dword_1002617D8 != -1 || (uint64_t result = _LogCategory_Initialize(), result))
    {
      return LogPrintF();
    }
  }
  return result;
}

void *sub_1000A2310(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 160) && *(_DWORD *)(v1 + 132) == 1)
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 132) = 4;
    if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
      LogPrintF();
    }
    id v3 = (void *)v2[5];
    return [v3 _run];
  }
  return result;
}

void sub_1000A23C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160))
  {
    id v8 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
      {
        id v7 = v4;
        LogPrintF();
      }
      [*(id *)(*(void *)(a1 + 40) + 160) invalidate:v7];
      uint64_t v5 = *(void *)(a1 + 40);
      int8x16_t v6 = *(void **)(v5 + 160);
      *(void *)(v5 + 160) = 0;

      *(_DWORD *)(*(void *)(a1 + 40) + 132) = 3;
      [*(id *)(a1 + 40) _reportError:v4];
    }
    else if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF();
    }

    id v3 = v8;
  }
}

void sub_1000A2664(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160))
  {
    id v6 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
      {
        id v5 = v4;
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 152) = 3;
      [*(id *)(a1 + 40) _reportError:v4, v5];
    }
    else
    {
      if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      [*(id *)(a1 + 40) _reportProgressTriggeredDevice:210];
      *(_DWORD *)(*(void *)(a1 + 40) + 152) = 4;
      [*(id *)(a1 + 40) _run];
    }

    id v3 = v6;
  }
}

void sub_1000A2AA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) != *(void *)(*(void *)(a1 + 40) + 160)) {
    goto LABEL_15;
  }
  if (!v3) {
    goto LABEL_7;
  }
  if (dword_1002617D8 <= 90)
  {
    if (dword_1002617D8 != -1 || _LogCategory_Initialize())
    {
      id v7 = v4;
      LogPrintF();
    }
LABEL_7:
    if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
    {
      id v7 = *(void **)(a1 + 48);
      LogPrintF();
    }
  }
  [*(id *)(a1 + 40) _reportProgressTriggeredDevice:220 v7];
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(_DWORD *)(*(void *)(a1 + 40) + 236) == 1) {
    CFStringRef v6 = @"_shCf";
  }
  else {
    CFStringRef v6 = @"_shAu";
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000A2C24;
  v8[3] = &unk_100235CD0;
  long long v9 = *(_OWORD *)(a1 + 32);
  [(id)v9 sendRequestID:v6 options:0 request:v5 responseHandler:v8];
LABEL_15:
}

void *sub_1000A2C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v5 == result[20]) {
    return _[result _runGuestiOSShareAudioProcessResponse:a4 error:a2];
  }
  return result;
}

void sub_1000A2E88(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 160))
  {
    if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
    {
      double v18 = [v6 identifier];
      id v19 = v7;
      LogPrintF();
    }
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 136), a2);
    CFStringGetTypeID();
    id v8 = CFDictionaryGetTypedValue();
    long long v9 = v8;
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = *(_DWORD *)(v10 + 236);
      id v12 = v8;
      if (v11 == 1)
      {
        int v13 = *(void **)(v10 + 72);
        *(void *)(v10 + 72) = v12;
      }
      else
      {
        id v14 = *(void **)(v10 + 80);
        *(void *)(v10 + 80) = v12;

        *(_DWORD *)(*(void *)(a1 + 40) + 8_Block_object_dispose(&STACK[0x290], 8) = CFDictionaryGetInt64Ranged();
        *(_DWORD *)(*(void *)(a1 + 40) + 112) = CFDictionaryGetInt64Ranged();
      }
      if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        id v19 = (id)*(unsigned int *)(v15 + 112);
        id v20 = v19;
        double v18 = *(void **)(v15 + 80);
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 16_Block_object_dispose(&STACK[0x290], 8) = 4;
      [*(id *)(a1 + 40) _run:v18, v19, v20];
    }
    else
    {
      if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 16_Block_object_dispose(&STACK[0x290], 8) = 3;
      uint64_t v16 = *(void **)(a1 + 40);
      uint64_t v17 = NSErrorF();
      [v16 _reportError:v17];
    }
  }
}

void *sub_1000A32D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v5 == result[20]) {
    return _[result _runGuestiOSShareAudioConnectProcessResponse:a4 error:a2];
  }
  return result;
}

void sub_1000A371C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 104))
  {
    id v6 = v3;
    id v4 = v3;
    if (v4)
    {
      if (dword_1002617D8 <= 90 && (dword_1002617D8 != -1 || _LogCategory_Initialize()))
      {
        id v5 = v4;
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 92) = 3;
      [*(id *)(a1 + 40) _reportError:v4, v5];
    }
    else
    {
      if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
        LogPrintF();
      }
      *(_DWORD *)(*(void *)(a1 + 40) + 92) = 4;
      [*(id *)(a1 + 40) _reportProgressTriggeredDevice:310];
      [*(id *)(a1 + 40) _run];
    }

    id v3 = v6;
  }
}

id sub_1000A4834(uint64_t a1)
{
  if (dword_1002617D8 <= 30 && (dword_1002617D8 != -1 || _LogCategory_Initialize())) {
    LogPrintF();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _pickableRoutesChanged];
}

void *sub_1000A51E8(void *result)
{
  uint64_t v1 = result;
  if (dword_1002617D8 <= 30)
  {
    if (dword_1002617D8 != -1 || (uint64_t result = (void *)_LogCategory_Initialize(), result)) {
      uint64_t result = (void *)LogPrintF();
    }
  }
  uint64_t v2 = v1[4];
  if (*(_DWORD *)(v2 + 68) == 1)
  {
    *(unsigned char *)(v2 + 64) = *((unsigned char *)v1 + 40);
    *(_DWORD *)(v1[4] + 6_Block_object_dispose(&STACK[0x290], 8) = 4;
    id v3 = (void *)v1[4];
    return [v3 _run];
  }
  return result;
}

uint64_t sub_1000A54A4()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v5, qword_10026AAE0);
  sub_1000AA0CC(v3, (uint64_t)qword_10026AAE0);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

BOOL sub_1000A566C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1000A5684()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000A56C4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v98 = (char *)&v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v3 - 8);
  unint64_t v102 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v103 = (uint64_t)&v97 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v97 - v8;
  __chkstk_darwin(v10);
  id v12 = (char *)&v97 - v11;
  id v13 = sub_1000B6DE4();
  uint64_t v105 = 0;
  unint64_t v106 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v14._countAndFlagsBits = 0x6552656369766544;
  v14._object = (void *)0xED00002864726F63;
  String.append(_:)(v14);
  uint64_t v15 = (int *)type metadata accessor for DeviceRecord();
  type metadata accessor for UUID();
  sub_1000A9FDC((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 2108704;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  double v18 = (uint64_t *)(v0 + v15[6]);
  uint64_t v20 = *v18;
  id v19 = (void *)v18[1];
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v20;
  v21._object = v19;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 8236;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  id v23 = (uint64_t *)(v0 + v15[7]);
  uint64_t v24 = *v23;
  dispatch_time_t v25 = (void *)v23[1];
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 8236;
  v27._object = (void *)0xE200000000000000;
  String.append(_:)(v27);
  uint64_t v28 = (uint64_t *)(v0 + v15[9]);
  uint64_t v29 = *v28;
  id v30 = (void *)v28[1];
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 8236;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  id v33 = (uint64_t *)(v0 + v15[8]);
  uint64_t v34 = *v33;
  uint64_t v35 = (void *)v33[1];
  swift_bridgeObjectRetain();
  v36._countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 0x203A646970202CLL;
  v37._object = (void *)0xE700000000000000;
  String.append(_:)(v37);
  id v38 = (uint64_t *)(v0 + v15[10]);
  uint64_t v39 = *v38;
  uint64_t v40 = (void *)v38[1];
  swift_bridgeObjectRetain();
  v41._countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 0x203A646976202CLL;
  v42._object = (void *)0xE700000000000000;
  String.append(_:)(v42);
  uint64_t v43 = (uint64_t *)(v0 + v15[11]);
  uint64_t v44 = *v43;
  char v45 = (void *)v43[1];
  swift_bridgeObjectRetain();
  v46._countAndFlagsBits = v44;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 10;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  uint64_t v100 = v105;
  unint64_t v101 = v106;
  uint64_t v105 = 0;
  unint64_t v106 = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v48._object = (void *)0x80000001001F6D50;
  v48._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v48);
  id v104 = v13;
  id v49 = [v13 creationDate];
  if (v49)
  {
    uint64_t v50 = v49;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v51 = v99;
    id v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
    v52(v9, 0, 1, v1);
  }
  else
  {
    uint64_t v51 = v99;
    id v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
    v52(v9, 1, 1, v1);
  }
  sub_1000AA798((uint64_t)v9, (uint64_t)v12);
  __int16 v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  if (v53(v12, 1, v1))
  {
    sub_1000AA894((uint64_t)v12, &qword_100261D90);
    id v54 = (void *)0xE200000000000000;
    uint64_t v55 = 15932;
  }
  else
  {
    uint64_t v56 = v98;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v98, v12, v1);
    sub_1000AA894((uint64_t)v12, &qword_100261D90);
    uint64_t v57 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v59 = [v57 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v54 = v60;

    (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v1);
  }
  v61._countAndFlagsBits = v55;
  v61._object = v54;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._countAndFlagsBits = 0x696669646F6D202CLL;
  v62._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v62);
  id v63 = v104;
  id v64 = [v104 modificationDate];
  if (v64)
  {
    long long v65 = v64;
    long long v66 = v102;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = 1;
    long long v66 = v102;
  }
  v52(v66, v67, 1, v1);
  uint64_t v68 = (uint64_t)v66;
  uint64_t v69 = v103;
  sub_1000AA798(v68, v103);
  if (v53((char *)v69, 1, v1))
  {
    sub_1000AA894(v69, &qword_100261D90);
    long long v70 = (void *)0xE200000000000000;
    uint64_t v71 = 15932;
  }
  else
  {
    unint64_t v72 = v98;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v98, v69, v1);
    sub_1000AA894(v69, &qword_100261D90);
    __int16 v73 = self;
    Class v74 = Date._bridgeToObjectiveC()().super.isa;
    id v75 = [v73 localizedStringFromDate:v74 dateStyle:2 timeStyle:2];

    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v51;
    long long v70 = v77;

    (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v1);
  }
  v78._countAndFlagsBits = v71;
  v78._object = v70;
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  v79._countAndFlagsBits = 0x696669646F6D202CLL;
  v79._object = (void *)0xEF203A7962206465;
  String.append(_:)(v79);
  id v80 = [v63 modifiedByDevice];
  if (v80)
  {
    id v81 = v80;
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    __int16 v84 = v83;
  }
  else
  {
    __int16 v84 = (void *)0xE200000000000000;
    uint64_t v82 = 15932;
  }
  v85._countAndFlagsBits = v82;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._countAndFlagsBits = 0x203A67617465202CLL;
  v86._object = (void *)0xE800000000000000;
  String.append(_:)(v86);
  id v87 = [v63 recordChangeTag];
  if (v87)
  {
    __int16 v88 = v87;
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v91 = v90;
  }
  else
  {
    id v91 = (void *)0xE200000000000000;
    uint64_t v89 = 15932;
  }
  v92._countAndFlagsBits = v89;
  v92._object = v91;
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  uint64_t v93 = v105;
  uint64_t v94 = (void *)v106;
  uint64_t v105 = v100;
  unint64_t v106 = v101;
  swift_bridgeObjectRetain();
  v95._countAndFlagsBits = v93;
  v95._object = v94;
  String.append(_:)(v95);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v105;
}

uint64_t sub_1000A5EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a5 = a2;
  a5[1] = a3;
  id v13 = (int *)type metadata accessor for DeviceRecord();
  Swift::String v14 = (char *)a5 + v13[5];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  Swift::String v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v55 = a1;
  v17(v14, a1, v15);
  unint64_t v54 = a3;
  sub_1000AA680(a2, a3);
  id v18 = [a4 bluetoothAddress];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  Swift::String v22 = (uint64_t *)((char *)a5 + v13[6]);
  *Swift::String v22 = v19;
  v22[1] = v21;
  id v23 = [a4 nickname];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;
  }
  else
  {
    uint64_t v25 = 0;
    unint64_t v27 = 0xE000000000000000;
  }
  uint64_t v28 = (uint64_t *)((char *)a5 + v13[7]);
  uint64_t *v28 = v25;
  v28[1] = v27;
  id v29 = [a4 modelNumber];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    unint64_t v33 = 0xE000000000000000;
  }
  uint64_t v34 = (uint64_t *)((char *)a5 + v13[8]);
  *uint64_t v34 = v31;
  v34[1] = v33;
  id v35 = [a4 manufacturer];
  if (v35)
  {
    Swift::String v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v39 = 0xE000000000000000;
  }
  uint64_t v40 = (uint64_t *)((char *)a5 + v13[9]);
  *uint64_t v40 = v37;
  v40[1] = v39;
  id v41 = [a4 productID];
  if (v41)
  {
    Swift::String v42 = v41;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v45 = 0xE000000000000000;
  }
  Swift::String v46 = (uint64_t *)((char *)a5 + v13[10]);
  *Swift::String v46 = v43;
  v46[1] = v45;
  id v47 = [a4 vendorID];
  if (v47)
  {
    Swift::String v48 = v47;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v51 = v50;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v51 = 0xE000000000000000;
  }
  id v52 = (uint64_t *)((char *)a5 + v13[11]);
  *id v52 = v49;
  v52[1] = v51;
  static Date.now.getter();

  sub_1000AA8F0(a2, v54);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v55, v15);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v56 + 32))((char *)a5 + v13[12], v12, v57);
}

uint64_t sub_1000A6204@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a2;
  sub_1000AA024(&qword_100261D90);
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v106 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  unsigned __int8 v107 = (char *)&v100 - v6;
  __chkstk_darwin(v5);
  uint64_t v110 = (uint64_t)&v100 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v111 = *(void *)(v8 - 8);
  uint64_t v112 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v105 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v109 = (char *)&v100 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  id v113 = *(char **)(v12 - 8);
  uint64_t v114 = v12;
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000AA024(&qword_100261BF0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v115 = v15;
  uint64_t v116 = v16;
  __chkstk_darwin(v15);
  id v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DeviceRecord();
  uint64_t v20 = __chkstk_darwin(v19);
  Swift::String v22 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v100 - v24;
  __chkstk_darwin(v23);
  unint64_t v27 = (uint64_t *)((char *)&v100 - v26);
  uint64_t v28 = a1[3];
  id v117 = a1;
  sub_1000ABF58(a1, v28);
  sub_1000ABF9C();
  id v29 = v118;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29) {
    return sub_1000ABFF0((uint64_t)v117);
  }
  unint64_t v102 = v22;
  uint64_t v103 = v25;
  id v104 = (int *)v19;
  v118 = v27;
  char v121 = 0;
  sub_1000AC040();
  uint64_t v30 = v115;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  id v33 = v119[0];
  id v32 = v119[1];
  uint64_t v34 = v118;
  uint64_t *v118 = (uint64_t)v119[0];
  v34[1] = (uint64_t)v32;
  LOBYTE(v119[0]) = 1;
  sub_1000A9FDC((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v35 = v30;
  Swift::String v36 = v14;
  uint64_t v37 = v114;
  uint64_t v38 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v100 = (unint64_t)v32;
  uint64_t v101 = (uint64_t)v33;
  unint64_t v39 = v104;
  (*((void (**)(char *, char *, uint64_t))v113 + 4))((char *)v34 + v104[5], v36, v37);
  LOBYTE(v119[0]) = 2;
  uint64_t v40 = KeyedDecodingContainer.decode(_:forKey:)();
  id v41 = (uint64_t *)((char *)v34 + v39[6]);
  *id v41 = v40;
  v41[1] = v42;
  LOBYTE(v119[0]) = 3;
  uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)();
  int v120 = 1;
  unint64_t v44 = (uint64_t *)((char *)v34 + v39[7]);
  *unint64_t v44 = v43;
  v44[1] = v45;
  LOBYTE(v119[0]) = 4;
  uint64_t v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v47) {
    uint64_t v48 = v46;
  }
  else {
    uint64_t v48 = 0;
  }
  if (v47) {
    unint64_t v49 = v47;
  }
  else {
    unint64_t v49 = 0xE000000000000000;
  }
  unint64_t v50 = (uint64_t *)((char *)v34 + v39[8]);
  *unint64_t v50 = v48;
  v50[1] = v49;
  LOBYTE(v119[0]) = 5;
  uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v52) {
    uint64_t v53 = v51;
  }
  else {
    uint64_t v53 = 0;
  }
  if (v52) {
    unint64_t v54 = v52;
  }
  else {
    unint64_t v54 = 0xE000000000000000;
  }
  uint64_t v55 = (uint64_t *)((char *)v34 + v39[9]);
  *uint64_t v55 = v53;
  v55[1] = v54;
  LOBYTE(v119[0]) = 6;
  uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v57) {
    uint64_t v58 = v56;
  }
  else {
    uint64_t v58 = 0;
  }
  if (v57) {
    unint64_t v59 = v57;
  }
  else {
    unint64_t v59 = 0xE000000000000000;
  }
  long long v60 = (uint64_t *)((char *)v34 + v39[10]);
  *long long v60 = v58;
  v60[1] = v59;
  LOBYTE(v119[0]) = 7;
  uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v62) {
    uint64_t v63 = v61;
  }
  else {
    uint64_t v63 = 0;
  }
  if (v62) {
    unint64_t v64 = v62;
  }
  else {
    unint64_t v64 = 0xE000000000000000;
  }
  long long v65 = v104;
  long long v66 = v118;
  uint64_t v67 = (uint64_t *)((char *)v118 + v104[11]);
  uint64_t *v67 = v63;
  v67[1] = v64;
  uint64_t v68 = (char *)v66 + v65[12];
  static Date.now.getter();
  LOBYTE(v119[0]) = 8;
  sub_1000A9FDC(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v69 = v110;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  id v113 = v18;
  uint64_t v114 = (uint64_t)v68;
  long long v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  id v104 = (int *)(v111 + 48);
  uint64_t v71 = v70;
  if (v70(v69, 1, v112) == 1)
  {
    unint64_t v74 = v100;
    uint64_t v73 = v101;
    sub_1000AA680(v101, v100);
    Class isa = sub_100130420(v73, v74);
    sub_1000AA8F0(v73, v74);
    sub_1000AA6D8((uint64_t)v118, (uint64_t)v103);
    if (isa)
    {
      uint64_t v76 = (uint64_t)v103;
    }
    else
    {
      uint64_t v77 = (uint64_t)v103;
      Class isa = sub_1000B4B34().super.isa;
      uint64_t v76 = v77;
    }
    sub_1000AA73C(v76);
    v119[0] = isa;
    sub_1000A7948(v119);
    id v78 = [isa modificationDate];

    if (v78)
    {
      Swift::String v79 = v105;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v80 = v111;
      id v81 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
      uint64_t v82 = (uint64_t)v107;
      id v83 = v79;
      uint64_t v84 = v112;
      v81((uint64_t)v107, v83, v112);
      Swift::String v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
      v85(v82, 0, 1, v84);
      if (v71(v82, 1, v84) != 1)
      {
        (*(void (**)(char *, uint64_t))(v116 + 8))(v113, v38);
        v81((uint64_t)v109, v107, v112);
LABEL_46:
        sub_1000AA894(v110, &qword_100261D90);
        goto LABEL_47;
      }
    }
    else
    {
      Swift::String v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
      v85((uint64_t)v107, 1, 1, v112);
    }
    id v87 = v118;
    uint64_t v89 = *v118;
    unint64_t v88 = v118[1];
    sub_1000AA680(*v118, v88);
    __int16 v90 = sub_100130420(v89, v88);
    sub_1000AA8F0(v89, v88);
    sub_1000AA6D8((uint64_t)v87, (uint64_t)v102);
    if (v90)
    {
      uint64_t v91 = (uint64_t)v102;
    }
    else
    {
      uint64_t v92 = (uint64_t)v102;
      __int16 v90 = sub_1000B4B34().super.isa;
      uint64_t v91 = v92;
    }
    sub_1000AA73C(v91);
    v119[0] = v90;
    sub_1000A7948(v119);
    id v93 = [v90 creationDate];

    if (v93)
    {
      uint64_t v94 = v105;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::String v95 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
      uint64_t v96 = (uint64_t)v106;
      uint64_t v97 = v94;
      uint64_t v98 = v112;
      v95((uint64_t)v106, v97, v112);
      v85(v96, 0, 1, v98);
      if (v71(v96, 1, v98) != 1)
      {
        (*(void (**)(char *, uint64_t))(v116 + 8))(v113, v38);
        v95((uint64_t)v109, v106, v112);
LABEL_45:
        sub_1000AA894((uint64_t)v107, &qword_100261D90);
        goto LABEL_46;
      }
    }
    else
    {
      v85((uint64_t)v106, 1, 1, v112);
    }
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v116 + 8))(v113, v38);
    sub_1000AA894((uint64_t)v106, &qword_100261D90);
    goto LABEL_45;
  }
  (*(void (**)(char *, uint64_t))(v116 + 8))(v113, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v109, v110, v112);
LABEL_47:
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 40))(v114, v109, v112);
  uint64_t v99 = v118;
  sub_1000AA6D8((uint64_t)v118, v108);
  sub_1000ABFF0((uint64_t)v117);
  return sub_1000AA73C((uint64_t)v99);
}

void sub_1000A6E98(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v4 - 8);
  id v83 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  Swift::String v85 = (char *)&v75 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v84 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v82 = (char *)&v75 - v12;
  uint64_t v13 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v87 = *(void *)(v16 - 8);
  uint64_t v88 = v16;
  __chkstk_darwin(v16);
  Swift::String v86 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0x6552656369766544 && v18 == 0xEC00000064726F63)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      sub_1000AA800();
      swift_allocError();
      *id v29 = 0;
      swift_willThrow();
LABEL_27:

      return;
    }
  }
  uint64_t v80 = v9;
  uint64_t v81 = v8;
  id v20 = [a1 encryptedValues];
  Objectint Type = swift_getObjectType();
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v20 objectForKeyedSubscript:v22];

  if (!v23 || (id v91 = v23, sub_1000AA024(&qword_1002629D0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_24:
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = xmmword_1001CFDB0;
    *(void *)(v68 + 56) = sub_1000AA854();
    *(void *)(v68 + 64) = sub_1000A9FDC((unint64_t *)&qword_100261A40, (void (*)(uint64_t))sub_1000AA854);
    *(void *)(v68 + 32) = a1;
    a1 = a1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000AA800();
    swift_allocError();
    *uint64_t v69 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_27;
  }
  id v78 = a2;
  id v79 = v20;
  unint64_t v24 = v90;
  uint64_t v76 = v89;
  uint64_t v77 = ObjectType;
  id v25 = [a1 recordID];
  id v26 = [v25 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = v87;
  uint64_t v27 = v88;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v15, 1, v88) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1000AA894((uint64_t)v15, &qword_100261EA0);
    goto LABEL_24;
  }
  unint64_t v75 = v24;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v86, v15, v27);
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v79 objectForKeyedSubscript:v30];

  if (!v31 || (id v91 = v31, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v86, v27);
    goto LABEL_24;
  }
  uint64_t v32 = v89;
  unint64_t v33 = v90;
  uint64_t v34 = (int *)type metadata accessor for DeviceRecord();
  uint64_t v35 = v28;
  Swift::String v36 = v78;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))((char *)v78 + v34[5], v86, v27);
  uint64_t v37 = (uint64_t *)((char *)v36 + v34[6]);
  unint64_t v38 = v75;
  *uint64_t v37 = v76;
  v37[1] = v38;
  unint64_t v39 = (uint64_t *)((char *)v36 + v34[7]);
  *unint64_t v39 = v32;
  v39[1] = v33;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v41 = v89;
  unint64_t v40 = v90;
  if (!v90)
  {
    uint64_t v41 = 0;
    unint64_t v40 = 0xE000000000000000;
  }
  uint64_t v42 = (uint64_t *)((char *)v36 + v34[8]);
  *uint64_t v42 = v41;
  v42[1] = v40;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v44 = v89;
  unint64_t v43 = v90;
  if (!v90)
  {
    uint64_t v44 = 0;
    unint64_t v43 = 0xE000000000000000;
  }
  uint64_t v45 = (uint64_t *)((char *)v36 + v34[9]);
  *uint64_t v45 = v44;
  v45[1] = v43;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v47 = v89;
  unint64_t v46 = v90;
  if (!v90)
  {
    uint64_t v47 = 0;
    unint64_t v46 = 0xE000000000000000;
  }
  uint64_t v48 = (uint64_t *)((char *)v36 + v34[10]);
  *uint64_t v48 = v47;
  v48[1] = v46;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v50 = v89;
  unint64_t v49 = v90;
  if (!v90)
  {
    uint64_t v50 = 0;
    unint64_t v49 = 0xE000000000000000;
  }
  uint64_t v77 = (uint64_t)v34;
  uint64_t v51 = (uint64_t *)((char *)v36 + v34[11]);
  *uint64_t v51 = v50;
  v51[1] = v49;
  id v52 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v52];
  [v52 finishEncoding];
  id v53 = [v52 encodedData];
  uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;

  *Swift::String v36 = v54;
  v36[1] = v56;
  id v57 = [a1 modificationDate];
  if (!v57)
  {
    uint64_t v61 = v80;
    uint64_t v60 = v81;
    unint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
    v64((uint64_t)v85, 1, 1, v81);
    uint64_t v66 = (uint64_t)v83;
LABEL_29:
    id v70 = [a1 creationDate];
    if (v70)
    {
      uint64_t v71 = v70;
      unint64_t v72 = v84;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v73 = v72;
      unint64_t v74 = *(void (**)(uint64_t, char *, uint64_t))(v61 + 32);
      v74(v66, v73, v60);
      v64(v66, 0, 1, v60);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v66, 1, v60) != 1)
      {
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
        uint64_t v67 = v82;
        v74((uint64_t)v82, (char *)v66, v60);
LABEL_34:
        sub_1000AA894((uint64_t)v85, &qword_100261D90);
        unint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(v61 + 32);
        goto LABEL_35;
      }
    }
    else
    {
      v64(v66, 1, 1, v60);
    }
    uint64_t v67 = v82;
    static Date.now.getter();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
    sub_1000AA894(v66, &qword_100261D90);
    goto LABEL_34;
  }
  uint64_t v58 = v57;
  unint64_t v59 = v84;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v61 = v80;
  uint64_t v60 = v81;
  unint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(v80 + 32);
  uint64_t v63 = (uint64_t)v85;
  v62((uint64_t)v85, v59, v81);
  unint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
  v64(v63, 0, 1, v60);
  int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v63, 1, v60);
  uint64_t v66 = (uint64_t)v83;
  if (v65 == 1) {
    goto LABEL_29;
  }
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
  uint64_t v67 = v82;
  v62((uint64_t)v82, v85, v60);
LABEL_35:
  v62((uint64_t)v78 + *(int *)(v77 + 48), v67, v60);
}

uint64_t sub_1000A7948(id *a1)
{
  static os_log_type_t.debug.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001CFDB0;
  id v4 = *a1;
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1000AA5E0();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v9 = [v4 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v10 = (int *)type metadata accessor for DeviceRecord();
  uint64_t v11 = (uint64_t *)(v1 + v10[6]);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  if (!v35) {
    goto LABEL_8;
  }
  if (v34 != v13 || v35 != v12)
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v34 = v13;
    uint64_t v35 = v12;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v15 = (uint64_t *)(v1 + v10[7]);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  if (!v35) {
    goto LABEL_15;
  }
  if (v34 == v17 && v35 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
LABEL_15:
    uint64_t v34 = v17;
    uint64_t v35 = v16;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_16:
  CKRecordKeyValueSetting.subscript.getter();
  char v19 = (uint64_t *)(v1 + v10[8]);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  if (!v35) {
    goto LABEL_21;
  }
  if (v34 != v21 || v35 != v20)
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v34 = v21;
    uint64_t v35 = v20;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  CKRecordKeyValueSetting.subscript.getter();
  id v23 = (uint64_t *)(v1 + v10[9]);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  if (!v35) {
    goto LABEL_27;
  }
  if (v34 == v25 && v35 == v24)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
  {
LABEL_27:
    uint64_t v34 = v25;
    uint64_t v35 = v24;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_28:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v27 = (uint64_t *)(v1 + v10[10]);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  if (!v35) {
    goto LABEL_33;
  }
  if (v34 != v29 || v35 != v28)
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_34;
    }
LABEL_33:
    uint64_t v34 = v29;
    uint64_t v35 = v28;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
LABEL_34:
  CKRecordKeyValueSetting.subscript.getter();
  id v31 = (void *)(v1 + v10[11]);
  if (!v35) {
    goto LABEL_39;
  }
  if (v34 == *v31 && v35 == v31[1])
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1000A7F34(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000A83C8(a1))
  {
    id v7 = [a1 nickname];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      uint64_t v12 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceRecord() + 28));
      BOOL v13 = *v12 == v9 && v12[1] == v11;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *uint64_t v12 = v9;
        v12[1] = v11;
      }
    }
    id v21 = [a1 modelNumber];
    if (v21)
    {
      char v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = v24;

      char v26 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceRecord() + 32));
      BOOL v27 = *v26 == v23 && v26[1] == v25;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *char v26 = v23;
        v26[1] = v25;
      }
    }
    id v28 = [a1 manufacturer];
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      char v33 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceRecord() + 36));
      if (*v33 == v30 && v33[1] == v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *char v33 = v30;
        v33[1] = v32;
      }
    }
    id v34 = [a1 productID];
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      unint64_t v39 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceRecord() + 40));
      if (*v39 == v36 && v39[1] == v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *unint64_t v39 = v36;
        v39[1] = v38;
      }
    }
    id v40 = [a1 vendorID];
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v43;

      uint64_t v45 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceRecord() + 44));
      if (*v45 == v42 && v45[1] == v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *uint64_t v45 = v42;
        v45[1] = v44;
      }
    }
    static Date.now.getter();
    uint64_t v46 = type metadata accessor for DeviceRecord();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(v46 + 48), v6, v3);
  }
  else
  {
    static os_log_type_t.info.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1001CFDB0;
    id v15 = a1;
    id v16 = [v15 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_1000AA5E0();
    *(void *)(v14 + 32) = v17;
    *(void *)(v14 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000A83C8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DeviceRecord();
  __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  id v7 = (char *)&v95 - v6;
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  uint64_t v99 = (char *)&v95 - v11;
  __chkstk_darwin(v12);
  uint64_t v100 = (uint64_t)&v95 - v13;
  __chkstk_darwin(v14);
  id v16 = (char *)&v95 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v95 - v18;
  __chkstk_darwin(v20);
  char v26 = (char *)&v95 - v25;
  if (!a1)
  {
    char v43 = 0;
    return v43 & 1;
  }
  uint64_t v97 = v24;
  uint64_t v98 = v23;
  BOOL v27 = v21;
  uint64_t v96 = v22;
  id v28 = a1;
  id v29 = [v28 nickname];
  if (!v29)
  {
    sub_1000AA6D8(v2, (uint64_t)v26);
    goto LABEL_13;
  }
  uint64_t v30 = v29;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  swift_bridgeObjectRelease();
  sub_1000AA6D8(v2, (uint64_t)v26);
  if (!v32)
  {
LABEL_13:
    sub_1000AA73C((uint64_t)v26);
LABEL_14:
    uint64_t v41 = (uint64_t)v7;
    sub_1000AA6D8(v2, (uint64_t)v19);
    uint64_t v42 = v98;
    goto LABEL_15;
  }
  id v33 = [v28 nickname];
  if (!v33)
  {
    sub_1000AA73C((uint64_t)v26);
    sub_1000AA6D8(v2, (uint64_t)v19);
    uint64_t v41 = (uint64_t)v7;
    uint64_t v42 = v98;
LABEL_49:
    sub_1000AA73C((uint64_t)v19);
LABEL_54:
    uint64_t v54 = v100;
    sub_1000AA6D8(v2, v100);
LABEL_55:
    sub_1000AA73C(v54);
LABEL_56:
    sub_1000AA6D8(v2, v42);
LABEL_57:
    sub_1000AA73C(v42);
LABEL_58:
    sub_1000AA6D8(v2, v41);
LABEL_59:
    sub_1000AA73C(v41);

    char v43 = 1;
    return v43 & 1;
  }
  id v34 = v33;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  uint64_t v38 = &v26[v27[7]];
  if (v35 == *(void *)v38 && v37 == *((void *)v38 + 1))
  {
    sub_1000AA73C((uint64_t)v26);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1000AA73C((uint64_t)v26);
  swift_bridgeObjectRelease();
  sub_1000AA6D8(v2, (uint64_t)v19);
  uint64_t v41 = (uint64_t)v7;
  uint64_t v42 = v98;
  if ((v40 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_15:
  id v44 = [v28 manufacturer];
  if (!v44)
  {
    sub_1000AA6D8((uint64_t)v19, (uint64_t)v16);
    goto LABEL_22;
  }
  uint64_t v45 = v44;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v47 = v46;

  swift_bridgeObjectRelease();
  sub_1000AA6D8((uint64_t)v19, (uint64_t)v16);
  if (!v47)
  {
LABEL_22:
    sub_1000AA73C((uint64_t)v16);
    sub_1000AA73C((uint64_t)v19);
    goto LABEL_23;
  }
  id v48 = [v28 manufacturer];
  if (!v48)
  {
    swift_bridgeObjectRetain();
    sub_1000AA73C((uint64_t)v16);
    sub_1000AA73C((uint64_t)v19);
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  unint64_t v49 = v48;
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  id v53 = &v16[v27[9]];
  if (v50 == *(void *)v53 && v52 == *((void *)v53 + 1))
  {
    swift_bridgeObjectRetain();
    sub_1000AA73C((uint64_t)v16);
    sub_1000AA73C((uint64_t)v19);
    swift_bridgeObjectRelease_n();
LABEL_23:
    uint64_t v54 = v100;
    sub_1000AA6D8(v2, v100);
    uint64_t v55 = (uint64_t)v99;
    goto LABEL_24;
  }
  char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000AA73C((uint64_t)v16);
  sub_1000AA73C((uint64_t)v19);
  swift_bridgeObjectRelease_n();
  uint64_t v54 = v100;
  sub_1000AA6D8(v2, v100);
  uint64_t v55 = (uint64_t)v99;
  if ((v92 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_24:
  id v56 = [v28 modelNumber];
  if (!v56)
  {
    sub_1000AA6D8(v54, v55);
    goto LABEL_31;
  }
  id v57 = v56;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;

  swift_bridgeObjectRelease();
  sub_1000AA6D8(v54, v55);
  if (!v59)
  {
LABEL_31:
    sub_1000AA73C(v55);
    sub_1000AA73C(v54);
    goto LABEL_32;
  }
  id v60 = [v28 modelNumber];
  if (!v60)
  {
    swift_bridgeObjectRetain();
    sub_1000AA73C(v55);
    sub_1000AA73C(v54);
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  uint64_t v61 = v60;
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v63;

  int v65 = (void *)(v55 + v27[8]);
  if (v62 == *v65 && v64 == v65[1])
  {
    swift_bridgeObjectRetain();
    sub_1000AA73C(v55);
    sub_1000AA73C(v54);
    swift_bridgeObjectRelease_n();
LABEL_32:
    sub_1000AA6D8(v2, v42);
    goto LABEL_33;
  }
  char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000AA73C(v55);
  sub_1000AA73C(v54);
  swift_bridgeObjectRelease_n();
  sub_1000AA6D8(v2, v42);
  if ((v93 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_33:
  id v66 = [v28 productID];
  if (!v66)
  {
    uint64_t v70 = v97;
    sub_1000AA6D8(v42, v97);
    goto LABEL_40;
  }
  uint64_t v67 = v66;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v68;

  swift_bridgeObjectRelease();
  uint64_t v70 = v97;
  sub_1000AA6D8(v42, v97);
  if (!v69)
  {
LABEL_40:
    sub_1000AA73C(v70);
    sub_1000AA73C(v42);
    goto LABEL_41;
  }
  id v71 = [v28 productID];
  if (!v71)
  {
    swift_bridgeObjectRetain();
    sub_1000AA73C(v70);
    sub_1000AA73C(v42);
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  unint64_t v72 = v71;
  uint64_t v73 = v70;
  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v76 = v75;

  uint64_t v77 = (void *)(v73 + v27[10]);
  if (v74 == *v77 && v76 == v77[1])
  {
    swift_bridgeObjectRetain();
    sub_1000AA73C(v97);
    sub_1000AA73C(v42);
    swift_bridgeObjectRelease_n();
LABEL_41:
    sub_1000AA6D8(v2, v41);
    goto LABEL_42;
  }
  char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000AA73C(v97);
  sub_1000AA73C(v42);
  swift_bridgeObjectRelease_n();
  sub_1000AA6D8(v2, v41);
  if ((v94 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_42:
  id v78 = [v28 vendorID];
  if (!v78)
  {
    uint64_t v82 = v96;
    sub_1000AA6D8(v41, v96);
    goto LABEL_51;
  }
  id v79 = v78;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v80;

  swift_bridgeObjectRelease();
  uint64_t v82 = v96;
  sub_1000AA6D8(v41, v96);
  if (!v81)
  {
LABEL_51:

    sub_1000AA73C(v82);
    sub_1000AA73C(v41);
    char v43 = 0;
    return v43 & 1;
  }
  id v83 = [v28 vendorID];
  if (v83)
  {
    uint64_t v84 = v83;
    uint64_t v85 = v82;
    uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v88 = v87;

    uint64_t v89 = (void *)(v85 + v27[11]);
    if (v86 == *v89 && v88 == v89[1]) {
      char v90 = 1;
    }
    else {
      char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRetain();

    sub_1000AA73C(v96);
    sub_1000AA73C(v41);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();

    sub_1000AA73C(v82);
    sub_1000AA73C(v41);
    char v90 = 0;
  }
  swift_bridgeObjectRelease();
  char v43 = v90 ^ 1;
  return v43 & 1;
}

uint64_t sub_1000A8C5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000AA680(v2, v3);
  Data.hash(into:)();
  sub_1000AA8F0(v2, v3);
  type metadata accessor for DeviceRecord();
  type metadata accessor for UUID();
  sub_1000A9FDC((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_1000A9FDC(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

unint64_t sub_1000A8E84(char a1)
{
  unint64_t result = 0x74654D64756F6C63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x656D616E6B63696ELL;
      break;
    case 4:
      unint64_t result = 0x6D754E6C65646F6DLL;
      break;
    case 5:
      unint64_t result = 0x74636166756E616DLL;
      break;
    case 6:
      unint64_t result = 0x49746375646F7270;
      break;
    case 7:
      unint64_t result = 0x4449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_1000A8FC0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000A9008()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_1000A904C()
{
  return sub_1000A8E84(*v0);
}

uint64_t sub_1000A9054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AC528(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A907C()
{
  return 0;
}

void sub_1000A9088(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1000A9094(uint64_t a1)
{
  unint64_t v2 = sub_1000ABF9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A90D0(uint64_t a1)
{
  unint64_t v2 = sub_1000ABF9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A910C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000AA024(&qword_100261C18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000ABF58(a1, a1[3]);
  sub_1000ABF9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_1000AC094();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for DeviceRecord();
    LOBYTE(v11) = 1;
    type metadata accessor for UUID();
    sub_1000A9FDC(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    type metadata accessor for Date();
    sub_1000A9FDC(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000A9478()
{
  return 0x6552656369766544;
}

unint64_t sub_1000A9498()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000A94B4()
{
  uint64_t v1 = *(void *)v0;
  sub_1000AA680(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_1000A94E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

Swift::Int sub_1000A955C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A95A0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A95E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000A9654@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A6204(a1, a2);
}

uint64_t sub_1000A966C(void *a1)
{
  return sub_1000A910C(a1);
}

uint64_t variable initialization expression of BTUserTransaction.name()
{
  return 0;
}

uint64_t variable initialization expression of BTUserTransaction.underlyingActivity()
{
  return 0;
}

void *variable initialization expression of DarwinNotificationManager.helpers()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of HMDeviceCloudRecord.topMicFaultCountLeft()
{
  return 0x100000000;
}

uint64_t _s15audioaccessoryd19HMDeviceCloudRecordC30latestDiagnosticTimestampRight10Foundation4DateVSgvpfi_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

double variable initialization expression of LocalDispatchTimer.millisecondsPerSecond()
{
  return 1000.0;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
}

__n128 sub_1000A9768(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000A9778(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000A9798(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x290], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

uint64_t sub_1000A97D4(uint64_t a1, uint64_t a2)
{
  return sub_1000AA448(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000A97F8(uint64_t a1, uint64_t a2)
{
  return sub_1000AA448(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void sub_1000A9818(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1000A9820@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000A9834(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000A9864(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000A9878(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_1000A988C(uint64_t a1)
{
  uint64_t v2 = sub_1000A9FDC(&qword_100261BA0, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000A98F8(uint64_t a1)
{
  uint64_t v2 = sub_1000A9FDC(&qword_100261BA0, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000A9964(uint64_t a1)
{
  uint64_t v2 = sub_1000A9FDC(&qword_100261BD8, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_1000A99D0()
{
  return *v0;
}

uint64_t sub_1000A99D8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1000A99E0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x290], 8) = 0;
  return result;
}

void sub_1000A99F0(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000A99FC(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000A9A74(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000A9AF4@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000A9B38()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_1000A9B84()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_1000A9BDC()
{
  return Hasher._finalize()();
}

void *sub_1000A9C48@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1000A9C54()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000A9C64()
{
  sub_1000A9FDC(&qword_100261BD8, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_1000A9CD0(uint64_t a1)
{
  uint64_t v2 = sub_1000A9FDC(&qword_100261BD8, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000A9D3C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000A9FDC(&qword_100261BD8, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000A9DCC()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000A9E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000A9FDC(&qword_100261BD8, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000A9E80()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A9EE0()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_1000A9F4C()
{
  return sub_1000A9FDC(&qword_1002619F0, type metadata accessor for CFString);
}

uint64_t sub_1000A9F94()
{
  return sub_1000A9FDC(&qword_1002619F8, type metadata accessor for CFString);
}

uint64_t sub_1000A9FDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000AA024(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t *sub_1000AA068(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1000AA0CC(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000AA108@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000AA134(uint64_t a1)
{
  uint64_t v2 = sub_1000A9FDC(&qword_100261C58, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_1000A9FDC((unint64_t *)&unk_100261C60, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000AA1F0(uint64_t a1)
{
  uint64_t v2 = sub_1000A9FDC(&qword_100261C48, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_1000A9FDC(&qword_100261C50, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000AA2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000A9FDC(&qword_100261BD8, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_1000AA330(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000AA344@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000AA38C(uint64_t a1)
{
  uint64_t v2 = sub_1000A9FDC((unint64_t *)&qword_100261C38, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_1000A9FDC(&qword_100261C40, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000AA448(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000AA48C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000AA4E0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000AA554()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

unint64_t sub_1000AA5E0()
{
  unint64_t result = qword_100261A10;
  if (!qword_100261A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261A10);
  }
  return result;
}

uint64_t type metadata accessor for DeviceRecord()
{
  uint64_t result = qword_100261AD8;
  if (!qword_100261AD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AA680(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1000AA6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA73C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeviceRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AA798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AA800()
{
  unint64_t result = qword_100261A30;
  if (!qword_100261A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261A30);
  }
  return result;
}

unint64_t sub_1000AA854()
{
  unint64_t result = qword_100262960;
  if (!qword_100262960)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100262960);
  }
  return result;
}

uint64_t sub_1000AA894(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000AA024(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000AA8F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for NotificationType(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

unsigned char *initializeBufferWithCopyOfBuffer for DeviceRecord.DeviceRecordError(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceRecord.DeviceRecordError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceRecord.DeviceRecordError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AAAECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1000AAB14(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000AAB20(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceRecord.DeviceRecordError()
{
  return &type metadata for DeviceRecord.DeviceRecordError;
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t *sub_1000AAB74(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v41 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v41 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000AA680(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    long long v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    id v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (uint64_t *)((char *)a1 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (uint64_t *)((char *)a1 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    char v26 = (uint64_t *)((char *)a1 + v22);
    BOOL v27 = (uint64_t *)((char *)a2 + v22);
    uint64_t v28 = v27[1];
    *char v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = a3[10];
    uint64_t v30 = a3[11];
    uint64_t v31 = (uint64_t *)((char *)a1 + v29);
    uint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    id v34 = (uint64_t *)((char *)a1 + v30);
    uint64_t v35 = (uint64_t *)((char *)a2 + v30);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    uint64_t v38 = a3[12];
    char v43 = (char *)a1 + v38;
    id v44 = (char *)a2 + v38;
    *id v34 = v36;
    v34[1] = v37;
    uint64_t v39 = type metadata accessor for Date();
    char v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40(v43, v44, v39);
  }
  return a1;
}

uint64_t sub_1000AAD5C(uint64_t a1, uint64_t a2)
{
  sub_1000AA8F0(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t v7 = type metadata accessor for Date();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t *sub_1000AAE80(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000AA680(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v12);
  uint64_t v15 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (uint64_t *)((char *)a1 + v13);
  uint64_t v18 = (uint64_t *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)((char *)a1 + v20);
  uint64_t v23 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (uint64_t *)((char *)a1 + v21);
  char v26 = (uint64_t *)((char *)a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = a3[10];
  uint64_t v29 = a3[11];
  uint64_t v30 = (uint64_t *)((char *)a1 + v28);
  uint64_t v31 = (uint64_t *)((char *)a2 + v28);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = (uint64_t *)((char *)a1 + v29);
  id v34 = (uint64_t *)((char *)a2 + v29);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v37 = a3[12];
  uint64_t v41 = (char *)a1 + v37;
  uint64_t v42 = (char *)a2 + v37;
  *uint64_t v33 = v35;
  v33[1] = v36;
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v39(v41, v42, v38);
  return a1;
}

uint64_t *sub_1000AB018(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000AA680(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1000AA8F0(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (uint64_t *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (uint64_t *)((char *)a1 + v23);
  uint64_t v25 = (uint64_t *)((char *)a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[10];
  uint64_t v27 = (uint64_t *)((char *)a1 + v26);
  uint64_t v28 = (uint64_t *)((char *)a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[11];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[12];
  uint64_t v33 = (char *)a1 + v32;
  id v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 24))(v33, v34, v35);
  return a1;
}

_OWORD *sub_1000AB208(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[12];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

uint64_t *sub_1000AB318(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000AA8F0(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)((char *)a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (uint64_t *)((char *)a1 + v27);
  uint64_t v29 = (uint64_t *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  uint64_t v33 = (uint64_t *)((char *)a1 + v32);
  id v34 = (uint64_t *)((char *)a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[11];
  uint64_t v38 = (uint64_t *)((char *)a1 + v37);
  uint64_t v39 = (uint64_t *)((char *)a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  uint64_t v42 = a3[12];
  char v43 = (char *)a1 + v42;
  id v44 = (char *)a2 + v42;
  uint64_t v45 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 40))(v43, v44, v45);
  return a1;
}

uint64_t sub_1000AB4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AB4B4);
}

uint64_t sub_1000AB4B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[5];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[6] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[12];
    return v14(v16, a2, v15);
  }
}

uint64_t sub_1000AB5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AB5FC);
}

uint64_t sub_1000AB5FC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[5];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + _Block_object_dispose(&STACK[0x290], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[12];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t sub_1000AB730()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000AB818(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000A9FDC((unint64_t *)&unk_100261B30, (void (*)(uint64_t))type metadata accessor for DeviceRecord);
  uint64_t result = sub_1000A9FDC((unint64_t *)&unk_100263C10, (void (*)(uint64_t))type metadata accessor for DeviceRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AB89C()
{
  return sub_1000A9FDC(&qword_100261B40, (void (*)(uint64_t))type metadata accessor for DeviceRecord);
}

uint64_t sub_1000AB8E4()
{
  return sub_1000A9FDC(&qword_100261B48, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1000AB92C()
{
  return sub_1000A9FDC(&qword_100261B50, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1000AB974()
{
  return sub_1000A9FDC(&qword_100261B58, type metadata accessor for FileProtectionType);
}

uint64_t sub_1000AB9BC()
{
  return sub_1000A9FDC(&qword_100261B60, type metadata accessor for FileProtectionType);
}

uint64_t sub_1000ABA04()
{
  return sub_1000A9FDC(&qword_100261B68, type metadata accessor for FileProtectionType);
}

uint64_t sub_1000ABA4C()
{
  return sub_1000A9FDC(&qword_100261B70, type metadata accessor for CKError);
}

uint64_t sub_1000ABA94()
{
  return sub_1000A9FDC(&qword_100261B78, type metadata accessor for CKError);
}

unint64_t sub_1000ABAE0()
{
  unint64_t result = qword_100261B80;
  if (!qword_100261B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261B80);
  }
  return result;
}

uint64_t sub_1000ABB34()
{
  return sub_1000A9FDC(&qword_100261B88, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000ABB7C()
{
  return sub_1000A9FDC(&qword_100261B90, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000ABBC4()
{
  return sub_1000A9FDC(&qword_100261B98, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000ABC0C()
{
  return sub_1000A9FDC(&qword_100261BA0, type metadata accessor for CKError);
}

uint64_t sub_1000ABC54()
{
  return sub_1000A9FDC(&qword_100261BA8, type metadata accessor for CKError);
}

uint64_t sub_1000ABC9C()
{
  return sub_1000A9FDC(&qword_100261BB0, type metadata accessor for CKError);
}

uint64_t sub_1000ABCE4()
{
  return sub_1000A9FDC(&qword_100261BB8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_1000ABD40(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000ABD88()
{
  return sub_1000A9FDC(&qword_100261BC0, type metadata accessor for Code);
}

unint64_t sub_1000ABDD4()
{
  unint64_t result = qword_100261BC8;
  if (!qword_100261BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261BC8);
  }
  return result;
}

uint64_t sub_1000ABE28()
{
  return sub_1000A9FDC(&qword_100261BD0, type metadata accessor for Code);
}

uint64_t sub_1000ABE70()
{
  return sub_1000A9FDC(&qword_100261BD8, type metadata accessor for CKError);
}

uint64_t sub_1000ABEB8()
{
  return sub_1000A9FDC(&qword_100261BE0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1000ABF00(uint64_t a1)
{
  uint64_t result = sub_1000A9FDC(&qword_100261BE8, (void (*)(uint64_t))type metadata accessor for DeviceRecord);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

void *sub_1000ABF58(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1000ABF9C()
{
  unint64_t result = qword_100261BF8;
  if (!qword_100261BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261BF8);
  }
  return result;
}

uint64_t sub_1000ABFF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_1000AC040()
{
  unint64_t result = qword_100261C00;
  if (!qword_100261C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261C00);
  }
  return result;
}

unint64_t sub_1000AC094()
{
  unint64_t result = qword_100261C20;
  if (!qword_100261C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261C20);
  }
  return result;
}

uint64_t sub_1000AC0E8(uint64_t a1, uint64_t a2)
{
  if ((sub_1000E4B6C(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for DeviceRecord();
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v4[6];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v4[7];
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(a1 + v10 + 8);
  uint64_t v13 = (void *)(a2 + v10);
  BOOL v14 = v11 == *v13 && v12 == v13[1];
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v15 = v4[8];
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a1 + v15 + 8);
  uint64_t v18 = (void *)(a2 + v15);
  BOOL v19 = v16 == *v18 && v17 == v18[1];
  if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v20 = v4[9];
  uint64_t v21 = *(void *)(a1 + v20);
  uint64_t v22 = *(void *)(a1 + v20 + 8);
  uint64_t v23 = (void *)(a2 + v20);
  if ((v21 != *v23 || v22 != v23[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v24 = v4[10];
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a1 + v24 + 8);
  uint64_t v27 = (void *)(a2 + v24);
  if ((v25 != *v27 || v26 != v27[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v28 = v4[11];
  uint64_t v29 = *(void *)(a1 + v28);
  uint64_t v30 = *(void *)(a1 + v28 + 8);
  uint64_t v31 = (void *)(a2 + v28);
  if ((v29 != *v31 || v30 != v31[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v32 = v4[12];

  return static Date.== infix(_:_:)(a1 + v32, a2 + v32);
}

uint64_t getEnumTagSinglePayload for DeviceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AC3E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceRecord.CodingKeys()
{
  return &type metadata for DeviceRecord.CodingKeys;
}

unint64_t sub_1000AC424()
{
  unint64_t result = qword_100261C80;
  if (!qword_100261C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261C80);
  }
  return result;
}

unint64_t sub_1000AC47C()
{
  unint64_t result = qword_100261C88;
  if (!qword_100261C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261C88);
  }
  return result;
}

unint64_t sub_1000AC4D4()
{
  unint64_t result = qword_100261C90;
  if (!qword_100261C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261C90);
  }
  return result;
}

uint64_t sub_1000AC528(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D616E6B63696ELL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D754E6C65646F6DLL && a2 == 0xEB00000000726562 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74636166756E616DLL && a2 == 0xEC00000072657275 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

unint64_t sub_1000AC968()
{
  sub_1000AA024(&qword_100261D68);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 504;
  uint64_t v1 = NSFilePosixPermissions;
  unint64_t result = sub_1000AF470(inited);
  qword_10026AAF8 = result;
  return result;
}

uint64_t sub_1000AC9E4()
{
  id v0 = [self defaultManager];
  char v25 = 0;
  URL.path.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v2 = [v0 fileExistsAtPath:v1 isDirectory:&v25];

  if (v2)
  {
    if (v25)
    {
LABEL_11:

      return v2 ^ 1;
    }
    static os_log_type_t.error.getter();
    if (qword_100261950 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1001CFDB0;
    uint64_t v5 = URL.description.getter();
    uint64_t v7 = v6;
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_1000AA5E0();
    *(void *)(v4 + 32) = v5;
    *(void *)(v4 + 40) = v7;
LABEL_10:
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  URL._bridgeToObjectiveC()(v3);
  BOOL v9 = v8;
  type metadata accessor for FileAttributeKey(0);
  sub_1000ACE28(&qword_100261C58, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v24 = 0;
  unsigned int v11 = [v0 createDirectoryAtURL:v9 withIntermediateDirectories:1 attributes:isa error:&v24];

  if (v11)
  {
    id v12 = v24;
    static os_log_type_t.default.getter();
    if (qword_100261950 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1001CFDB0;
    type metadata accessor for URL();
    sub_1000ACE28((unint64_t *)&unk_100263280, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_1000AA5E0();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    goto LABEL_10;
  }
  id v17 = v24;
  uint64_t v18 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  static os_log_type_t.error.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1001CFDB0;
  id v24 = v18;
  swift_errorRetain();
  sub_1000AA024(&qword_100261D60);
  uint64_t v20 = String.init<A>(describing:)();
  uint64_t v22 = v21;
  *(void *)(v19 + 56) = &type metadata for String;
  *(void *)(v19 + 64) = sub_1000AA5E0();
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  swift_errorRelease();
  return v2 ^ 1;
}

uint64_t sub_1000ACE28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ACE70()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  int v3 = v2;
  id v20 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v20];

  if (!v4)
  {
    id v11 = v20;
    id v12 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v20 = v12;
    swift_errorRetain();
    sub_1000AA024(&qword_100261D60);
    sub_1000AD178();
    if (!swift_dynamicCast()) {
      return swift_errorRelease();
    }
    swift_errorRelease();
    id v13 = [v19 domain];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v17 == v16)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
LABEL_12:
        swift_willThrow();
        return swift_errorRelease();
      }
    }
    if ([v19 code] == (id)4)
    {

      return swift_errorRelease();
    }
    goto LABEL_12;
  }
  id v5 = v20;
  static os_log_type_t.default.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001CFDB0;
  type metadata accessor for URL();
  sub_1000ACE28((unint64_t *)&unk_100263280, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000AA5E0();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000AD178()
{
  unint64_t result = qword_100261D70;
  if (!qword_100261D70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100261D70);
  }
  return result;
}

void sub_1000AD1B8(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1001CFDB0;
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = sub_1000AA5E0();
    *(void *)(v10 + 32) = a4;
    *(void *)(v10 + 40) = a5;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v11 = sub_1000AD31C(a4, a5);
    a2();
  }
  else
  {
    a2();
  }
}

void *sub_1000AD31C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  char v25 = &type metadata for AudioAccessoryFeatures;
  unint64_t v8 = sub_1000AE4C4();
  unint64_t v26 = v8;
  char v9 = isFeatureEnabled(_:)();
  sub_1000ABFF0((uint64_t)v24);
  uint64_t v10 = 0;
  if (v9)
  {
    sub_1000C2280();
    char v25 = &type metadata for AudioAccessoryFeatures;
    unint64_t v26 = v8;
    char v11 = isFeatureEnabled(_:)();
    sub_1000ABFF0((uint64_t)v24);
    if (v11)
    {
      char v25 = &type metadata for AudioAccessoryFeatures;
      unint64_t v26 = v8;
      char v12 = isFeatureEnabled(_:)();
      sub_1000ABFF0((uint64_t)v24);
      if (v12)
      {
        if ([self isFirstUnlocked])
        {
          sub_10015F0D4();
          if (qword_100261918 != -1) {
            swift_once();
          }
          uint64_t v13 = sub_1000AA0CC(v4, (uint64_t)qword_10026AD60);
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
          uint64_t v14 = (void *)sub_10015CF70((uint64_t)v7);
          swift_release();
          (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
        }
        else
        {
          static os_log_type_t.error.getter();
          if (qword_100261948 != -1) {
            swift_once();
          }
          uint64_t v14 = _swiftEmptyArrayStorage;
          os_log(_:dso:log:_:_:)();
        }
      }
      else
      {
        uint64_t v14 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_100196BC8((unint64_t)v14, a1, a2);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v10)
      {
        static os_log_type_t.default.getter();
        if (qword_100261940 != -1) {
          swift_once();
        }
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = xmmword_1001CFDB0;
        id v16 = v10;
        id v17 = [v16 description];
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        *(void *)(v15 + 56) = &type metadata for String;
        *(void *)(v15 + 64) = sub_1000AA5E0();
        *(void *)(v15 + 32) = v18;
        *(void *)(v15 + 40) = v20;
        os_log(_:dso:log:_:_:)();
LABEL_20:
        swift_bridgeObjectRelease();
        return v10;
      }
    }
    else
    {
      swift_release();
    }
    static os_log_type_t.debug.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1001CFDB0;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1000AA5E0();
    *(void *)(v21 + 32) = a1;
    *(void *)(v21 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    uint64_t v10 = 0;
    goto LABEL_20;
  }
  return v10;
}

uint64_t sub_1000AD784(uint64_t a1, uint64_t a2)
{
  id v16 = &type metadata for AudioAccessoryFeatures;
  unint64_t v17 = sub_1000AE4C4();
  char v5 = isFeatureEnabled(_:)();
  sub_1000ABFF0((uint64_t)aBlock);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v19 = 0;
  uint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  uint64_t v7 = (void *)swift_allocObject();
  id v7[2] = a1;
  v7[3] = a2;
  void v7[4] = &v19;
  void v7[5] = v2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1000AF238;
  *(void *)(v8 + 24) = v7;
  unint64_t v17 = (unint64_t)sub_1000AF254;
  uint64_t v18 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106FFC;
  id v16 = (ValueMetadata *)&unk_100236548;
  char v9 = _Block_copy(aBlock);
  uint64_t v10 = v6;
  swift_bridgeObjectRetain();
  char v11 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v10, v9);

  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v14 = v19;
    swift_release();
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AD948(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001CFDB0;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000AA5E0();
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1000AD31C(a1, a2);
  uint64_t v8 = *a3;
  *a3 = (uint64_t)v7;

  return _objc_release_x1(v7, v8);
}

uint64_t sub_1000ADADC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1001CFDB0;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1000AA5E0();
    *(void *)(v11 + 32) = a4;
    *(void *)(v11 + 40) = a5;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000C2280();
    sub_100172290(a4, a5, 0x6563697665444141, 0xEE0064726F636552, a2, a3);

    return swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v13 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000ADCA8(void *a1, int a2, int a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  _Block_copy(v7);
  id v11 = a1;
  a5(v8, v10, v11, v7);
  _Block_release(v7);
  _Block_release(v7);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000ADD4C(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1001CFDB0;
    id v10 = a4;
    id v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_1000AA5E0();
    *(void *)(v9 + 32) = v12;
    *(void *)(v9 + 40) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000C2280();
    sub_10017C9BC((char *)v10, a2, a3);

    return swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *id v16 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000ADF98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = &type metadata for AudioAccessoryFeatures;
  unint64_t v6 = sub_1000AE4C4();
  unint64_t v41 = v6;
  char v7 = isFeatureEnabled(_:)();
  uint64_t result = sub_1000ABFF0((uint64_t)&v39);
  if (v7)
  {
    v9._object = (void *)0x80000001001F70C0;
    v9._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001001F70F0;
    v10._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001001F7120;
    v11._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v11);
    v12._object = (void *)0x80000001001F7150;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    static os_log_type_t.default.getter();
    if (qword_100261960 != -1) {
      swift_once();
    }
    unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
    sub_1000C2280();
    uint64_t v40 = &type metadata for AudioAccessoryFeatures;
    unint64_t v41 = v6;
    char v14 = isFeatureEnabled(_:)();
    sub_1000ABFF0((uint64_t)&v39);
    if ((v14 & 1) == 0) {
      goto LABEL_11;
    }
    if (![self isFirstUnlocked])
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      goto LABEL_11;
    }
    sub_10015F0D4();
    if (qword_100261918 != -1) {
      goto LABEL_23;
    }
    while (1)
    {
      uint64_t v15 = sub_1000AA0CC(v2, (uint64_t)qword_10026AD60);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
      unint64_t v13 = sub_10015CF70((uint64_t)v5);
      swift_release();
      id v16 = *(void (**)(char *, uint64_t))(v3 + 8);
      v3 += 8;
      v16(v5, v2);
LABEL_11:
      swift_release();
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v17) {
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v17 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v17) {
          return swift_bridgeObjectRelease();
        }
      }
      if (v17 >= 1) {
        break;
      }
      __break(1u);
LABEL_23:
      swift_once();
    }
    uint64_t v18 = 0;
    unint64_t v37 = v13 & 0xC000000000000001;
    long long v36 = xmmword_1001CFDB0;
    uint64_t v38 = a1;
    unint64_t v35 = v13;
    do
    {
      if (v37) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v19 = *(id *)(v13 + 8 * v18 + 32);
      }
      uint64_t v20 = v19;
      ++v18;
      static os_log_type_t.default.getter();
      sub_1000AA024((uint64_t *)&unk_100262110);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = v36;
      id v22 = v20;
      id v23 = [v22 description];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      *(void *)(v21 + 56) = &type metadata for String;
      *(void *)(v21 + 64) = sub_1000AA5E0();
      *(void *)(v21 + 32) = v24;
      *(void *)(v21 + 40) = v26;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      id v27 = v22;
      id v28 = [v27 description];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      v39._countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v39._object = (void *)0xE700000000000000;
      v32._countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v33._countAndFlagsBits = 10;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      String.append(_:)(v39);

      swift_bridgeObjectRelease();
      unint64_t v13 = v35;
    }
    while (v17 != v18);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000AE4C4()
{
  unint64_t result = qword_100261D78;
  if (!qword_100261D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261D78);
  }
  return result;
}

uint64_t sub_1000AE518(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v22 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  Swift::String v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  id v27 = &type metadata for AudioAccessoryFeatures;
  unint64_t v28 = sub_1000AE4C4();
  _Block_copy(a4);
  char v14 = isFeatureEnabled(_:)();
  sub_1000ABFF0((uint64_t)aBlock);
  if (v14)
  {
    uint64_t v15 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = (void *)swift_allocObject();
    void v17[2] = v16;
    v17[3] = sub_1000AF25C;
    uint64_t v18 = v22;
    void v17[4] = v13;
    void v17[5] = v18;
    v17[6] = a2;
    unint64_t v28 = (unint64_t)sub_1000AF2BC;
    uint64_t v29 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100106F90;
    id v27 = (ValueMetadata *)&unk_1002365C0;
    id v19 = _Block_copy(aBlock);
    id v20 = v15;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_1000AF0E0();
    sub_1000AA024(&qword_100263550);
    sub_1000AF138();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v23);
    swift_release();
    swift_release();
  }
  else
  {
    a4[2](a4, 0);
  }
  return swift_release();
}

uint64_t sub_1000AE878(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v24 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  Swift::String v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  uint64_t v29 = &type metadata for AudioAccessoryFeatures;
  unint64_t v30 = sub_1000AE4C4();
  _Block_copy(a4);
  char v14 = isFeatureEnabled(_:)();
  sub_1000ABFF0((uint64_t)aBlock);
  if (v14)
  {
    uint64_t v15 = *(void **)(a3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = (void *)swift_allocObject();
    void v17[2] = v16;
    v17[3] = sub_1000AF2EC;
    uint64_t v18 = v24;
    void v17[4] = v13;
    void v17[5] = v18;
    v17[6] = a2;
    unint64_t v30 = (unint64_t)sub_1000AF1E0;
    uint64_t v31 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100106F90;
    uint64_t v29 = (ValueMetadata *)&unk_1002364D0;
    id v19 = _Block_copy(aBlock);
    id v20 = v15;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    id v27 = _swiftEmptyArrayStorage;
    sub_1000AF0E0();
    sub_1000AA024(&qword_100263550);
    sub_1000AF138();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v25);
    swift_release();
    swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v21 = 4;
    uint64_t v22 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v22);

    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1000AEC14(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v25 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  uint64_t v29 = &type metadata for AudioAccessoryFeatures;
  unint64_t v30 = sub_1000AE4C4();
  _Block_copy(a3);
  char v13 = isFeatureEnabled(_:)();
  sub_1000ABFF0((uint64_t)aBlock);
  if (v13)
  {
    uint64_t v24 = v9;
    char v14 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = v15;
    v16[3] = sub_1000AEFE0;
    uint64_t v17 = v25;
    void v16[4] = v12;
    v16[5] = v17;
    unint64_t v30 = (unint64_t)sub_1000AF0BC;
    uint64_t v31 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100106F90;
    uint64_t v29 = (ValueMetadata *)&unk_100236458;
    uint64_t v18 = _Block_copy(aBlock);
    id v19 = v14;
    swift_retain();
    swift_retain();
    id v20 = v17;
    static DispatchQoS.unspecified.getter();
    id v27 = _swiftEmptyArrayStorage;
    sub_1000AF0E0();
    sub_1000AA024(&qword_100263550);
    sub_1000AF138();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v24);
    swift_release();
    swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v21 = 4;
    uint64_t v22 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v22);

    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1000AEFA8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000AEFE0(uint64_t a1)
{
  sub_100136A08(a1, *(void *)(v1 + 16));
}

unint64_t sub_1000AEFE8()
{
  unint64_t result = qword_100261D80;
  if (!qword_100261D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261D80);
  }
  return result;
}

uint64_t sub_1000AF03C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AF074()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000AF0BC()
{
  return sub_1000ADD4C(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000AF0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AF0D8()
{
  return swift_release();
}

unint64_t sub_1000AF0E0()
{
  unint64_t result = qword_100263140;
  if (!qword_100263140)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100263140);
  }
  return result;
}

unint64_t sub_1000AF138()
{
  unint64_t result = qword_100263150;
  if (!qword_100263150)
  {
    sub_1000AF194(&qword_100263550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100263150);
  }
  return result;
}

uint64_t sub_1000AF194(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000AF1E0()
{
  return sub_1000AF2D4((uint64_t (*)(void, void, void, void, void))sub_1000ADADC);
}

uint64_t sub_1000AF1F8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000AF238()
{
  return sub_1000AD948(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_1000AF244()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AF254()
{
  return sub_100106FD4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000AF25C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1000AF274()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000AF2BC()
{
  return sub_1000AF2D4((uint64_t (*)(void, void, void, void, void))sub_1000AD1B8);
}

uint64_t sub_1000AF2D4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

Swift::Int sub_1000AF310()
{
  return Hasher._finalize()();
}

unint64_t sub_1000AF470(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000AA024((uint64_t *)&unk_100263B20);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000B6A44(v6, (uint64_t)&v13, &qword_100261E90);
    uint64_t v7 = v13;
    unint64_t result = sub_1000B4F30(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000B66DC(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000AF5A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000AA024((uint64_t *)&unk_100261E80);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_1000B4F30((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000AF6AC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000AA024(&qword_100261ED0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000B4FC4(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000AF7C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000AA024(&qword_100261EE0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000B6A44(v6, (uint64_t)&v15, &qword_100261EE8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000B4FC4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000B66DC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000AF8F8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000AA024((uint64_t *)&unk_100261EB0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1000B4FC4(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = (uint64_t *)(v2[6] + 16 * result);
    *char v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000AFA24(uint64_t a1)
{
  return sub_1000AFA64(a1, (uint64_t *)&unk_100261EC0, (uint64_t (*)(id))sub_1000B5140);
}

unint64_t sub_1000AFA44(uint64_t a1)
{
  return sub_1000AFA64(a1, &qword_100263190, (uint64_t (*)(id))sub_1000B50F0);
}

unint64_t sub_1000AFA64(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000AA024(a2);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  uint64_t v7 = (_OWORD *)(a1 + 40);
  while (1)
  {
    long long v14 = *v7;
    id v8 = *((id *)v7 - 1);
    swift_retain();
    unint64_t result = a3(v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v5[6] + 8 * result) = v8;
    *(_OWORD *)(v5[7] + 16 * result) = v14;
    uint64_t v11 = v5[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v5[2] = v13;
    uint64_t v7 = (_OWORD *)((char *)v7 + 24);
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000AFB88(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000AA024(&qword_100261E98);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_1000B4FC4(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_UNKNOWN **static AAProxCardsRecord.ProxCardKeys.allCases.getter()
{
  return &off_100235F18;
}

uint64_t AAProxCardsRecord.ProxCardKeys.rawValue.getter(char a1)
{
  uint64_t result = 0x62756F4465736163;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7473654764616568;
      break;
    case 2:
      uint64_t result = 0x41676E6972616568;
      break;
    case 3:
      uint64_t result = 0x54676E6972616568;
      break;
    case 4:
      uint64_t result = 0x7461527472616568;
      break;
    case 5:
      uint64_t result = 0x6175516563696F76;
      break;
    case 6:
      uint64_t result = 0x77654E7374616877;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000AFDD0(unsigned __int8 *a1, char *a2)
{
  return sub_10013A990(*a1, *a2);
}

Swift::Int sub_1000AFDDC()
{
  return sub_1000AF310();
}

uint64_t sub_1000AFDE8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000AFF34()
{
  return sub_1000AF310();
}

unint64_t sub_1000AFF3C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s15audioaccessoryd17AAProxCardsRecordC12ProxCardKeysO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000AFF6C(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xED0000706154656CLL;
  uint64_t v3 = 0x62756F4465736163;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000073657275;
      uint64_t v3 = 0x7473654764616568;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "hearingAssist");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 3:
      *(void *)a1 = 0x54676E6972616568;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = 0xEB00000000747365;
      break;
    case 4:
      *(void *)a1 = 0x7461527472616568;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = 0xE900000000000065;
      break;
    case 5:
      strcpy((char *)a1, "voiceQuality");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 6:
      *(void *)a1 = 0x77654E7374616877;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = v2;
      break;
  }
}

void sub_1000B009C(void *a1@<X8>)
{
  *a1 = &off_100235F18;
}

uint64_t sub_1000B00AC()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v7, qword_10026AB00);
  sub_1000AA0CC(v3, (uint64_t)qword_10026AB00);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

void *AAProxCardsRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v2 - 8);
  uint64_t v88 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v89 = (uint64_t)&v83 - v5;
  __chkstk_darwin(v6);
  uint64_t v85 = (char *)&v83 - v7;
  __chkstk_darwin(v8);
  uint64_t v86 = (uint64_t)&v83 - v9;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v87 = v11;
  __chkstk_darwin(v10);
  char v90 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = &v0[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  uint64_t v15 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  unint64_t v16 = *((void *)v14 + 1);
  sub_1000AA680(v15, v16);
  Class isa = sub_100130420(v15, v16);
  sub_1000AA8F0(v15, v16);
  if (!isa)
  {
    uint64_t v18 = v1;
    Class isa = sub_1000B4D50((uint64_t)v18, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x80000001001D0B90).super.isa;
  }
  uint64_t v96 = isa;
  sub_1000B37D0((unint64_t)&v96);
  swift_beginAccess();
  uint64_t v19 = swift_bridgeObjectRetain();
  id v20 = sub_1000B0B90(v19);
  swift_bridgeObjectRelease();
  char v92 = v20;
  sub_1000AA024(&qword_100261DA0);
  sub_1000B5E24(&qword_100261DA8, &qword_100261DA0);
  uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  char v92 = 0;
  unint64_t v93 = 0xE000000000000000;
  _StringGuts.grow(_:)(152);
  char v94 = v92;
  unint64_t v95 = v93;
  v24._object = (void *)0x80000001001F7300;
  v24._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v24);
  type metadata accessor for UUID();
  sub_1000B5C40((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 2108704;
  v26._object = (void *)0xE300000000000000;
  String.append(_:)(v26);
  uint64_t v27 = *(void *)&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  unint64_t v28 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8];
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._object = (void *)0x80000001001F7320;
  v30._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v21;
  v31._object = v23;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._object = (void *)0x80000001001F7340;
  v32._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v32);
  Swift::String v33 = &v1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate];
  swift_beginAccess();
  uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v11[2];
  unint64_t v35 = v11;
  long long v36 = v90;
  id v83 = v34;
  v34(v90, (uint64_t)v33, v10);
  sub_1000B5C40(&qword_1002633B0, (void (*)(uint64_t))&type metadata accessor for Date);
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  uint64_t v84 = (void (*)(char *, uint64_t))v35[1];
  v84(v36, v10);
  v38._countAndFlagsBits = 0xD00000000000001ALL;
  v38._object = (void *)0x80000001001F7360;
  String.append(_:)(v38);
  id v39 = [isa creationDate];
  id v91 = isa;
  if (v39)
  {
    uint64_t v40 = v39;
    uint64_t v41 = (uint64_t)v85;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v42 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v35[7];
    v42(v41, 0, 1, v10);
  }
  else
  {
    uint64_t v42 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v35[7];
    uint64_t v41 = (uint64_t)v85;
    v42((uint64_t)v85, 1, 1, v10);
  }
  uint64_t v43 = v86;
  sub_1000AA798(v41, v86);
  id v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v35[6];
  if (v44(v43, 1, v10))
  {
    sub_1000AA894(v43, &qword_100261D90);
    uint64_t v45 = (void *)0xE200000000000000;
    uint64_t v46 = 15932;
  }
  else
  {
    uint64_t v85 = (char *)(v35 + 6);
    uint64_t v47 = v90;
    v83(v90, v43, v10);
    sub_1000AA894(v43, &qword_100261D90);
    id v48 = self;
    Class v49 = Date._bridgeToObjectiveC()().super.isa;
    id v50 = [v48 localizedStringFromDate:v49 dateStyle:2 timeStyle:2];

    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v51;

    v84(v47, v10);
  }
  v52._countAndFlagsBits = v46;
  v52._object = v45;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._object = (void *)0x80000001001F7380;
  v53._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v53);
  id v54 = [v91 modificationDate];
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = (uint64_t)v88;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v57 = 1;
    uint64_t v56 = (uint64_t)v88;
  }
  v42(v56, v57, 1, v10);
  uint64_t v58 = v89;
  sub_1000AA798(v56, v89);
  if (v44(v58, 1, v10))
  {
    sub_1000AA894(v58, &qword_100261D90);
    uint64_t v59 = (void *)0xE200000000000000;
    uint64_t v60 = 15932;
  }
  else
  {
    uint64_t v61 = v90;
    v83(v90, v58, v10);
    sub_1000AA894(v58, &qword_100261D90);
    uint64_t v62 = self;
    Class v63 = Date._bridgeToObjectiveC()().super.isa;
    id v64 = [v62 localizedStringFromDate:v63 dateStyle:2 timeStyle:2];

    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v65;

    v84(v61, v10);
  }
  id v66 = v91;
  v67._countAndFlagsBits = v60;
  v67._object = v59;
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v68._countAndFlagsBits = 0xD000000000000013;
  v68._object = (void *)0x80000001001F73A0;
  String.append(_:)(v68);
  id v69 = [v66 modifiedByDevice];
  if (v69)
  {
    uint64_t v70 = v69;
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v73 = v72;
  }
  else
  {
    uint64_t v73 = (void *)0xE200000000000000;
    uint64_t v71 = 15932;
  }
  v74._countAndFlagsBits = v71;
  v74._object = v73;
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  v75._countAndFlagsBits = 0x746520202020202CLL;
  v75._object = (void *)0xEC000000203A6761;
  String.append(_:)(v75);
  id v76 = [v66 recordChangeTag];
  if (v76)
  {
    uint64_t v77 = v76;
    uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v80 = v79;
  }
  else
  {
    uint64_t v80 = (void *)0xE200000000000000;
    uint64_t v78 = 15932;
  }
  v81._countAndFlagsBits = v78;
  v81._object = v80;
  String.append(_:)(v81);

  swift_bridgeObjectRelease();
  return v94;
}

void *sub_1000B0B90(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100190958(0, v1, 0);
  uint64_t result = (void *)sub_1000B5B6C(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  int64_t v22 = v1;
  int v23 = v4;
  uint64_t v24 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v25 = v6;
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
    uint64_t v26 = *v11;
    uint64_t v27 = v11[1];
    swift_bridgeObjectRetain_n();
    v12._countAndFlagsBits = 58;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v15 = _swiftEmptyArrayStorage[2];
    unint64_t v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1) {
      uint64_t result = (void *)sub_100190958(v14 > 1, v15 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v15 + 1;
    unint64_t v16 = &_swiftEmptyArrayStorage[2 * v15];
    void v16[4] = v26;
    v16[5] = v27;
    int64_t v8 = 1 << *(unsigned char *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v17 = *(void *)(v24 + 8 * v10);
    if ((v17 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v23;
    if (*(_DWORD *)(a1 + 36) != v23) {
      goto LABEL_27;
    }
    unint64_t v18 = v17 & (-2 << (v5 & 0x3F));
    if (v18)
    {
      int64_t v8 = __clz(__rbit64(v18)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v22;
    }
    else
    {
      unint64_t v19 = v10 + 1;
      unint64_t v20 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v22;
      if (v10 + 1 < v20)
      {
        unint64_t v21 = *(void *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v10)
          {
            unint64_t v21 = *(void *)(a1 + 80 + 8 * v10++);
            if (v21)
            {
              unint64_t v19 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v25 + 1;
    uint64_t v5 = v8;
    if (v25 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t HMDeviceCloudRecord.debugDescription.getter()
{
  id v1 = [v0 description];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

char *sub_1000B0ED8(char *a1)
{
  uint64_t v3 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v3 - 8);
  uint64_t v84 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v90 = (char *)&v83 - v6;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v87 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v86 = (char *)&v83 - v11;
  uint64_t v12 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v89 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v1;
  if (CKRecord.recordType.getter() == 0xD000000000000011 && v18 == 0x80000001001D0B90)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {

      sub_1000B66EC();
      swift_allocError();
      unsigned char *v32 = 0;
      swift_willThrow();

      goto LABEL_13;
    }
  }
  uint64_t v85 = v15;
  id v20 = [a1 encryptedValues];
  NSString v21 = String._bridgeToObjectiveC()();
  id v92 = v20;
  id v22 = [v20 objectForKeyedSubscript:v21];

  if (!v22 || (v96 = (uint64_t)v22, uint64_t v91 = sub_1000AA024(&qword_1002629D0), (swift_dynamicCast() & 1) == 0))
  {

LABEL_10:
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      goto LABEL_49;
    }
    goto LABEL_11;
  }
  id v23 = v93;
  uint64_t v83 = v94;
  id v24 = [a1 recordID];
  id v25 = [v24 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = a1;

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v89;
  uint64_t v28 = v85;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v14, 1, v85) == 1)
  {
    swift_bridgeObjectRelease();

    sub_1000AA894((uint64_t)v14, &qword_100261EA0);
    a1 = v26;
    goto LABEL_10;
  }
  uint64_t v34 = v88;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v88, v14, v28);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(&v17[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier], v34, v28);
  unint64_t v35 = &v17[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
  uint64_t v36 = v83;
  *(void *)unint64_t v35 = v23;
  *((void *)v35 + 1) = v36;
  id v37 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v26 encodeSystemFieldsWithCoder:v37];
  [v37 finishEncoding];
  id v38 = [v37 encodedData];
  uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;

  uint64_t v42 = (uint64_t *)&v17[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  *uint64_t v42 = v39;
  v42[1] = v41;
  id v43 = [v26 modificationDate];
  id v44 = v26;
  if (!v43)
  {
    uint64_t v46 = v87;
    Class v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v87 + 7);
    v49((uint64_t)v90, 1, 1, v7);
    uint64_t v51 = v92;
LABEL_19:
    id v53 = [v26 creationDate];
    if (v53)
    {
      id v54 = v53;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v55 = (void (*)(void))*((void *)v46 + 4);
      uint64_t v56 = v84;
      v55();
      v49((uint64_t)v56, 0, 1, v7);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v46 + 6))(v56, 1, v7) != 1)
      {
        Swift::String v52 = v86;
        ((void (*)(char *, char *, uint64_t))v55)(v86, v56, v7);
LABEL_24:
        sub_1000AA894((uint64_t)v90, &qword_100261D90);
        uint64_t v47 = (void (*)(uint64_t, char *, uint64_t))*((void *)v46 + 4);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v56 = v84;
      v49((uint64_t)v84, 1, 1, v7);
    }
    Swift::String v52 = v86;
    static Date.now.getter();
    sub_1000AA894((uint64_t)v56, &qword_100261D90);
    goto LABEL_24;
  }
  uint64_t v45 = v43;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = v87;
  uint64_t v47 = (void (*)(uint64_t, char *, uint64_t))*((void *)v87 + 4);
  uint64_t v48 = (uint64_t)v90;
  v47((uint64_t)v90, v9, v7);
  Class v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v46 + 7);
  v49(v48, 0, 1, v7);
  int v50 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v46 + 6))(v48, 1, v7);
  uint64_t v51 = v92;
  if (v50 == 1) {
    goto LABEL_19;
  }
  Swift::String v52 = v86;
  v47((uint64_t)v86, v90, v7);
LABEL_25:
  v47((uint64_t)&v17[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], v52, v7);
  *(void *)&v17[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions] = sub_1000AF6AC((uint64_t)_swiftEmptyArrayStorage);

  uint64_t v57 = (objc_class *)type metadata accessor for AAProxCardsRecord();
  v95.receiver = v17;
  v95.super_class = v57;
  uint64_t v58 = 7;
  uint64_t v86 = (char *)[super init];
  uint64_t v87 = v44;
  a1 = &v86[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  uint64_t v84 = v86;
  uint64_t v59 = &byte_100235F38;
  uint64_t v60 = &selRef_hijackAwayRemoteScore;
  while (1)
  {
    int v62 = *v59++;
    int v61 = v62;
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v64 = [v51 v60[216]:v63];

    if (v64)
    {
      id v93 = v64;
      if (swift_dynamicCast()) {
        break;
      }
    }
LABEL_28:
    if (!--v58)
    {
      swift_unknownObjectRelease();

      int64_t v9 = v86;
      (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v85);
      return v9;
    }
  }
  uint64_t v65 = 0xED0000706154656CLL;
  char v90 = (char *)v96;
  uint64_t v66 = 0x62756F4465736163;
  switch(v61)
  {
    case 0:
      break;
    case 1:
      uint64_t v66 = 0x7473654764616568;
      uint64_t v65 = 0xEC00000073657275;
      break;
    case 2:
      uint64_t v66 = 0x41676E6972616568;
      uint64_t v65 = 0xED00007473697373;
      break;
    case 3:
      uint64_t v66 = 0x54676E6972616568;
      uint64_t v65 = 0xEB00000000747365;
      break;
    case 4:
      uint64_t v66 = 0x7461527472616568;
      uint64_t v65 = 0xE900000000000065;
      break;
    case 5:
      uint64_t v66 = 0x6175516563696F76;
      uint64_t v65 = 0xEC0000007974696CLL;
      break;
    case 6:
      uint64_t v65 = 0xE800000000000000;
      uint64_t v66 = 0x77654E7374616877;
      break;
    default:
      JUMPOUT(0);
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v96 = *(void *)a1;
  uint64_t v68 = v96;
  *(void *)a1 = 0x8000000000000000;
  unint64_t v70 = sub_1000B4FC4(v66, v65);
  uint64_t v71 = *(void *)(v68 + 16);
  BOOL v72 = (v69 & 1) == 0;
  uint64_t v73 = v71 + v72;
  if (!__OFADD__(v71, v72))
  {
    char v74 = v69;
    if (*(void *)(v68 + 24) >= v73)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100124070();
      }
    }
    else
    {
      sub_100122D50(v73, isUniquelyReferenced_nonNull_native);
      unint64_t v75 = sub_1000B4FC4(v66, v65);
      if ((v74 & 1) != (v76 & 1)) {
        goto LABEL_51;
      }
      unint64_t v70 = v75;
    }
    uint64_t v77 = (uint64_t)v90;
    uint64_t v78 = (void *)v96;
    if (v74)
    {
      *(void *)(*(void *)(v96 + 56) + 8 * v70) = v90;
    }
    else
    {
      *(void *)(v96 + 8 * (v70 >> 6) + 64) |= 1 << v70;
      id v79 = (uint64_t *)(v78[6] + 16 * v70);
      uint64_t *v79 = v66;
      v79[1] = v65;
      *(void *)(v78[7] + 8 * v70) = v77;
      uint64_t v80 = v78[2];
      BOOL v81 = __OFADD__(v80, 1);
      uint64_t v82 = v80 + 1;
      if (v81)
      {
        __break(1u);
LABEL_51:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x1000B1BD4);
      }
      v78[2] = v82;
      swift_bridgeObjectRetain();
    }
    *(void *)a1 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v51 = v92;
    uint64_t v60 = &selRef_hijackAwayRemoteScore;
    goto LABEL_28;
  }
  __break(1u);
LABEL_49:
  swift_once();
LABEL_11:
  int64_t v9 = (char *)qword_10026ADE8;
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1001CFDB0;
  *(void *)(v29 + 56) = sub_1000B66A0(0, (unint64_t *)&qword_100262960);
  *(void *)(v29 + 64) = sub_1000B6740();
  *(void *)(v29 + 32) = a1;
  Swift::String v30 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000B66EC();
  swift_allocError();
  *Swift::String v31 = 4;
  swift_willThrow();
  swift_unknownObjectRelease();

LABEL_13:
  type metadata accessor for AAProxCardsRecord();
  swift_deallocPartialClassInstance();
  return v9;
}

void (*sub_1000B1C0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6))(uint64_t, uint64_t)
{
  uint64_t v34 = a6;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v32 = *(void *)(v12 - 8);
  uint64_t v33 = v12;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = &v6[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
  uint64_t v35 = a2;
  unint64_t v36 = a3;
  *(void *)uint64_t v15 = a2;
  *((void *)v15 + 1) = a3;
  uint64_t v16 = &v6[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier];
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  char v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v38 = a1;
  v19(v16, a1, v17);
  uint64_t v20 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v20 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20
    || a4 == 0xD000000000000011 && a5 == 0x80000001001F75A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    NSString v21 = v6;
    uint64_t v23 = v35;
    unint64_t v22 = v36;
    sub_1000AA680(v35, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B66EC();
    swift_allocError();
    *id v24 = 3;
    swift_willThrow();
    sub_1000AA8F0(v23, v22);
    id v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v25(v38, v17);
    sub_1000AA8F0(*(void *)v15, *((void *)v15 + 1));
    v25((uint64_t)v16, v17);

    type metadata accessor for AAProxCardsRecord();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v27 = &v6[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
    *(void *)uint64_t v27 = a4;
    *((void *)v27 + 1) = a5;
    uint64_t v28 = v6;
    uint64_t v30 = v35;
    unint64_t v29 = v36;
    sub_1000AA680(v35, v36);
    static Date.now.getter();
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], v14, v33);
    *(void *)&v28[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions] = sub_1000AF6AC((uint64_t)_swiftEmptyArrayStorage);

    Swift::String v31 = (objc_class *)type metadata accessor for AAProxCardsRecord();
    v37.receiver = v28;
    v37.super_class = v31;
    id v25 = (void (*)(uint64_t, uint64_t))[v37 init];
    sub_1000B1F84(v34);
    swift_bridgeObjectRelease();

    sub_1000AA8F0(v30, v29);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v38, v17);
  }
  return v25;
}

uint64_t sub_1000B1F84(uint64_t a1)
{
  uint64_t v2 = 7;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  uint64_t v5 = &byte_100235F38;
  while (2)
  {
    unsigned int v8 = *v5++;
    unsigned int v7 = v8;
    uint64_t v9 = 0xED0000706154656CLL;
    uint64_t v10 = 0x62756F4465736163;
    switch(v8)
    {
      case 1u:
        uint64_t v10 = 0x7473654764616568;
        uint64_t v9 = 0xEC00000073657275;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_2;
        }
        goto LABEL_14;
      case 2u:
        uint64_t v10 = 0x41676E6972616568;
        uint64_t v9 = 0xED00007473697373;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_2;
        }
        goto LABEL_14;
      case 3u:
        uint64_t v10 = 0x54676E6972616568;
        uint64_t v9 = 0xEB00000000747365;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_2;
        }
        goto LABEL_14;
      case 4u:
        uint64_t v10 = 0x7461527472616568;
        uint64_t v9 = 0xE900000000000065;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_2;
        }
        goto LABEL_14;
      case 5u:
        uint64_t v10 = 0x6175516563696F76;
        uint64_t v9 = 0xEC0000007974696CLL;
        goto LABEL_13;
      case 6u:
        uint64_t v9 = 0xE800000000000000;
        uint64_t v10 = 0x77654E7374616877;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_2;
        }
        goto LABEL_14;
      default:
LABEL_13:
        if (!*(void *)(a1 + 16)) {
          goto LABEL_2;
        }
LABEL_14:
        unint64_t v11 = sub_1000B4FC4(v10, v9);
        if ((v12 & 1) == 0)
        {
LABEL_2:
          uint64_t result = swift_bridgeObjectRelease();
          if (!--v2) {
            return result;
          }
          continue;
        }
        uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
        swift_bridgeObjectRelease();
        uint64_t v13 = 0xED0000706154656CLL;
        uint64_t v14 = v7;
        uint64_t v15 = 0x62756F4465736163;
        switch(v14)
        {
          case 0:
            break;
          case 1:
            uint64_t v15 = 0x7473654764616568;
            uint64_t v13 = 0xEC00000073657275;
            break;
          case 2:
            uint64_t v15 = 0x41676E6972616568;
            uint64_t v13 = 0xED00007473697373;
            break;
          case 3:
            uint64_t v15 = 0x54676E6972616568;
            uint64_t v13 = 0xEB00000000747365;
            break;
          case 4:
            uint64_t v15 = 0x7461527472616568;
            uint64_t v13 = 0xE900000000000065;
            break;
          case 5:
            uint64_t v15 = 0x6175516563696F76;
            uint64_t v13 = 0xEC0000007974696CLL;
            break;
          case 6:
            uint64_t v13 = 0xE800000000000000;
            uint64_t v15 = 0x77654E7374616877;
            break;
          default:
            JUMPOUT(0);
        }
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v17 = (void *)*v4;
        uint64_t v32 = (void *)*v4;
        *uint64_t v4 = 0x8000000000000000;
        unint64_t v19 = sub_1000B4FC4(v15, v13);
        uint64_t v20 = v17[2];
        BOOL v21 = (v18 & 1) == 0;
        uint64_t v22 = v20 + v21;
        if (__OFADD__(v20, v21))
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x1000B23A0);
        }
        char v23 = v18;
        if (v17[3] >= v22)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v26 = v32;
            if (v18) {
              goto LABEL_31;
            }
          }
          else
          {
            sub_100124070();
            uint64_t v26 = v32;
            if (v23) {
              goto LABEL_31;
            }
          }
        }
        else
        {
          sub_100122D50(v22, isUniquelyReferenced_nonNull_native);
          unint64_t v24 = sub_1000B4FC4(v15, v13);
          if ((v23 & 1) != (v25 & 1)) {
            goto LABEL_39;
          }
          unint64_t v19 = v24;
          uint64_t v26 = v32;
          if (v23)
          {
LABEL_31:
            *(void *)(v26[7] + 8 * v19) = v31;
            goto LABEL_35;
          }
        }
        v26[(v19 >> 6) + 8] |= 1 << v19;
        uint64_t v27 = (uint64_t *)(v26[6] + 16 * v19);
        uint64_t *v27 = v15;
        v27[1] = v13;
        *(void *)(v26[7] + 8 * v19) = v31;
        uint64_t v28 = v26[2];
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_38;
        }
        id v26[2] = v30;
        swift_bridgeObjectRetain();
LABEL_35:
        *uint64_t v4 = v26;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_endAccess();
        if (--v2) {
          continue;
        }
        return result;
    }
  }
}

unint64_t AAProxCardsRecord.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return AAProxCardsRecord.init(from:)(a1);
}

unint64_t AAProxCardsRecord.init(from:)(void *a1)
{
  uint64_t v3 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v3 - 8);
  char v76 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v77 = (uint64_t)&v72 - v6;
  __chkstk_darwin(v7);
  id v79 = (char *)&v72 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v81 = v9;
  uint64_t v82 = v10;
  __chkstk_darwin(v9);
  uint64_t v78 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v80 = (char *)&v72 - v13;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v83 = *(char **)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000AA024(&qword_100261DB0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v84 = v17;
  uint64_t v85 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1[3];
  uint64_t v86 = a1;
  sub_1000ABF58(a1, v21);
  unint64_t v22 = sub_1000B5C88();
  char v23 = v1;
  unint64_t v24 = v87;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    char v90 = 0;
    sub_1000AC040();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v23[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata] = v88;
    LOBYTE(v8_Block_object_dispose(&STACK[0x290], 8) = 1;
    sub_1000B5C40((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*((void (**)(char *, char *, uint64_t))v83 + 4))(&v23[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier], v16, v14);
    LOBYTE(v8_Block_object_dispose(&STACK[0x290], 8) = 2;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = (uint64_t *)&v23[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress];
    uint64_t *v27 = v26;
    v27[1] = v28;
    *(void *)&v23[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions] = sub_1000AF6AC((uint64_t)_swiftEmptyArrayStorage);
    BOOL v29 = v80;
    static Date.now.getter();
    uint64_t v30 = v20;
    uint64_t v31 = (char *)(v82 + 32);
    uint64_t v32 = v81;
    uint64_t v87 = *(void (**)(void, void, void))(v82 + 32);
    v87(&v23[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate], v29, v81);

    uint64_t v33 = (objc_class *)type metadata accessor for AAProxCardsRecord();
    v89.receiver = v23;
    v89.super_class = v33;
    id v34 = [super init];
    sub_1000AA024(&qword_100261DC0);
    char v90 = 3;
    sub_1000B5D28((unint64_t *)&unk_100261DC8);
    uint64_t v35 = (char *)v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v83 = v31;
    sub_1000B1F84(v88);
    swift_bridgeObjectRelease();
    LOBYTE(v8_Block_object_dispose(&STACK[0x290], 8) = 4;
    sub_1000B5C40(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t v36 = v79;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    objc_super v37 = v35;
    uint64_t v38 = v32;
    unint64_t v75 = v37;
    uint64_t v39 = v30;
    uint64_t v40 = v82;
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
    if (v41(v36, 1, v38) != 1)
    {
      (*(void (**)(char *, uint64_t))(v85 + 8))(v30, v84);
      id v54 = v78;
      v87(v78, v36, v38);
      uint64_t v55 = (uint64_t)v86;
      uint64_t v56 = (void *)&unk_10026A000;
LABEL_22:
      uint64_t v68 = v56[358];
      id v69 = v75;
      unint64_t v70 = &v75[v68];
      swift_beginAccess();
      uint64_t v71 = v70;
      unint64_t v22 = (unint64_t)v69;
      (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v71, v54, v38);
      swift_endAccess();
      sub_1000ABFF0(v55);

      return v22;
    }
    char v74 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v41;
    id v43 = v75;
    uint64_t v44 = *(void *)&v75[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
    unint64_t v45 = *(void *)&v75[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata + 8];
    uint64_t v73 = (uint64_t *)&v75[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata];
    sub_1000AA680(v44, v45);
    Class isa = sub_100130420(v44, v45);
    sub_1000AA8F0(v44, v45);
    if (!isa)
    {
      id v47 = v43;
      Class isa = sub_1000B4D50((uint64_t)v47, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x80000001001D0B90).super.isa;
    }
    *(void *)&long long v88 = isa;
    sub_1000B37D0((unint64_t)&v88);
    id v48 = [isa modificationDate];

    uint64_t v49 = (uint64_t)v79;
    if (v48)
    {
      int v50 = v80;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v51 = v77;
      Swift::String v52 = v50;
      uint64_t v38 = v81;
      v87(v77, v52, v81);
      id v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v53(v51, 0, 1, v38);
      if (v74(v51, 1, v38) != 1)
      {
        (*(void (**)(char *, uint64_t))(v85 + 8))(v39, v84);
        id v54 = v78;
        v87(v78, v51, v38);
        uint64_t v55 = (uint64_t)v86;
        uint64_t v56 = (void *)&unk_10026A000;
LABEL_21:
        sub_1000AA894(v49, &qword_100261D90);
        goto LABEL_22;
      }
    }
    else
    {
      id v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v53(v77, 1, 1, v81);
    }
    uint64_t v83 = v39;
    uint64_t v57 = *v73;
    unint64_t v58 = v73[1];
    sub_1000AA680(*v73, v58);
    uint64_t v59 = sub_100130420(v57, v58);
    sub_1000AA8F0(v57, v58);
    if (!v59)
    {
      int v61 = v75;
      uint64_t v59 = sub_1000B4D50((uint64_t)v61, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x80000001001D0B90).super.isa;
    }
    uint64_t v60 = (uint64_t)v76;
    *(void *)&long long v88 = v59;
    sub_1000B37D0((unint64_t)&v88);
    id v62 = [v59 creationDate];

    uint64_t v49 = (uint64_t)v79;
    if (v62)
    {
      NSString v63 = v80;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v64 = v63;
      uint64_t v38 = v81;
      uint64_t v65 = v53;
      uint64_t v66 = (void (*)(char *, uint64_t, uint64_t))v87;
      v87(v60, v64, v81);
      v65(v60, 0, 1, v38);
      unsigned int v67 = v74(v60, 1, v38);
      uint64_t v55 = (uint64_t)v86;
      if (v67 != 1)
      {
        (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v84);
        id v54 = v78;
        v66(v78, v60, v38);
LABEL_20:
        uint64_t v56 = &unk_10026A000;
        sub_1000AA894(v77, &qword_100261D90);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v38 = v81;
      v53(v60, 1, 1, v81);
      uint64_t v55 = (uint64_t)v86;
    }
    id v54 = v78;
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v84);
    sub_1000AA894(v60, &qword_100261D90);
    goto LABEL_20;
  }

  sub_1000ABFF0((uint64_t)v86);
  type metadata accessor for AAProxCardsRecord();
  swift_deallocPartialClassInstance();
  return v22;
}

id HMDeviceCloudRecord.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void AAProxCardsRecord.init()()
{
}

unint64_t sub_1000B3008(char a1)
{
  unint64_t result = 0x74654D64756F6C63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
    case 3:
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B30B4()
{
  return sub_1000B3008(*v0);
}

uint64_t sub_1000B30BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000B646C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B30E4(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000B30F0(uint64_t a1)
{
  unint64_t v2 = sub_1000B5C88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B312C(uint64_t a1)
{
  unint64_t v2 = sub_1000B5C88();

  return CodingKey.debugDescription.getter(a1, v2);
}

id AAProxCardsRecord.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AAProxCardsRecord();
  return [super dealloc];
}

uint64_t AAProxCardsRecord.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AA024(&qword_100261DD8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000ABF58(a1, a1[3]);
  sub_1000B5C88();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v21 = *(_OWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata);
  LOBYTE(v20) = 0;
  sub_1000AC094();
  uint64_t v11 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v19 = v8;
  uint64_t v17 = v6;
  uint64_t v13 = v18;
  LOBYTE(v21) = 1;
  type metadata accessor for UUID();
  sub_1000B5C40(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v21) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess();
  uint64_t v20 = *v14;
  char v22 = 3;
  sub_1000AA024(&qword_100261DC0);
  sub_1000B5D28((unint64_t *)&unk_100261DE0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v15 = v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
  swift_beginAccess();
  uint64_t v16 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v15, v4);
  char v22 = 4;
  sub_1000B5C40(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v10, v7);
}

unint64_t sub_1000B36A8()
{
  return 0xD000000000000011;
}

unint64_t sub_1000B36C4()
{
  return 0xD000000000000012;
}

uint64_t sub_1000B36E0()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_cloudMetadata;
  uint64_t v2 = *(void *)v1;
  sub_1000AA680(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000B3724@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000B37AC(unint64_t a1)
{
  return sub_1000B37D0(a1);
}

uint64_t sub_1000B37D0(unint64_t a1)
{
  uint64_t v2 = v1;
  static os_log_type_t.debug.getter();
  if (qword_100261948 != -1) {
    goto LABEL_37;
  }
  while (1)
  {
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1001CFDB0;
    id v5 = *(id *)a1;
    id v6 = [v5 description];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_1000AA5E0();
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v9;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v10 = [v5 encryptedValues];
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.getter();
    id v12 = *(id *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress);
    uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_bluetoothAddress + 8);
    if (!v31) {
      goto LABEL_7;
    }
    if (v30 == v12 && v31 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
LABEL_7:
      id v30 = v12;
      uint64_t v31 = v11;
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
    }
LABEL_8:
    uint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
    swift_beginAccess();
    uint64_t v2 = *v14;
    uint64_t v28 = v2 + 64;
    uint64_t v15 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v16 = -1;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    a1 = v16 & *(void *)(v2 + 64);
    int64_t v17 = (unint64_t)(v15 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v18 = 0;
    if (a1)
    {
      while (1)
      {
        unint64_t v19 = __clz(__rbit64(a1));
        a1 &= a1 - 1;
        unint64_t v20 = v19 | (v18 << 6);
LABEL_29:
        unint64_t v24 = *(void **)(*(void *)(v2 + 56) + 8 * v20);
        swift_bridgeObjectRetain();
        NSString v25 = String._bridgeToObjectiveC()();
        id v26 = [v10 objectForKeyedSubscript:v25];

        if (v26 && (id v30 = v26, sub_1000AA024(&qword_1002629D0), (swift_dynamicCast() & 1) != 0))
        {
          if (v29 >= (unint64_t)v24) {
            goto LABEL_32;
          }
LABEL_13:
          id v30 = v24;
          CKRecordKeyValueSetting.subscript.setter();
          if (!a1) {
            break;
          }
        }
        else
        {
          if (v24) {
            goto LABEL_13;
          }
LABEL_32:
          swift_bridgeObjectRelease();
          if (!a1) {
            break;
          }
        }
      }
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v21 >= v17) {
      break;
    }
    unint64_t v22 = *(void *)(v28 + 8 * v21);
    ++v18;
    if (v22) {
      goto LABEL_28;
    }
    int64_t v18 = v21 + 1;
    if (v21 + 1 >= v17) {
      break;
    }
    unint64_t v22 = *(void *)(v28 + 8 * v18);
    if (v22) {
      goto LABEL_28;
    }
    int64_t v18 = v21 + 2;
    if (v21 + 2 >= v17) {
      break;
    }
    unint64_t v22 = *(void *)(v28 + 8 * v18);
    if (v22)
    {
LABEL_28:
      a1 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
      goto LABEL_29;
    }
    int64_t v23 = v21 + 3;
    if (v23 >= v17) {
      break;
    }
    unint64_t v22 = *(void *)(v28 + 8 * v23);
    if (v22)
    {
      int64_t v18 = v23;
      goto LABEL_28;
    }
    while (1)
    {
      int64_t v18 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        break;
      }
      if (v18 >= v17) {
        goto LABEL_34;
      }
      unint64_t v22 = *(void *)(v28 + 8 * v18);
      ++v23;
      if (v22) {
        goto LABEL_28;
      }
    }
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once();
  }
LABEL_34:
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_1000B3BF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier;
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

unint64_t sub_1000B3C6C@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for AAProxCardsRecord());
  unint64_t result = AAProxCardsRecord.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000B3CC4(void *a1)
{
  return AAProxCardsRecord.encode(to:)(a1);
}

Swift::UInt64 __swiftcall AAProxCardsRecord.version(for:)(audioaccessoryd::AAProxCardsRecord::ProxCardKeys a1)
{
  uint64_t v2 = 0xED0000706154656CLL;
  uint64_t v3 = 0x62756F4465736163;
  switch(a1)
  {
    case audioaccessoryd_AAProxCardsRecord_ProxCardKeys_headGestures:
      uint64_t v2 = 0xEC00000073657275;
      uint64_t v3 = 0x7473654764616568;
      break;
    case audioaccessoryd_AAProxCardsRecord_ProxCardKeys_hearingAssist:
      uint64_t v2 = 0xED00007473697373;
      uint64_t v3 = 0x41676E6972616568;
      break;
    case audioaccessoryd_AAProxCardsRecord_ProxCardKeys_hearingTest:
      uint64_t v2 = 0xEB00000000747365;
      uint64_t v3 = 0x54676E6972616568;
      break;
    case audioaccessoryd_AAProxCardsRecord_ProxCardKeys_heartRate:
      uint64_t v2 = 0xE900000000000065;
      uint64_t v3 = 0x7461527472616568;
      break;
    case audioaccessoryd_AAProxCardsRecord_ProxCardKeys_voiceQuality:
      uint64_t v2 = 0xEC0000007974696CLL;
      uint64_t v3 = 0x6175516563696F76;
      break;
    case audioaccessoryd_AAProxCardsRecord_ProxCardKeys_whatsNew:
      uint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x77654E7374616877;
      break;
    default:
      break;
  }
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1000B4FC4(v3, v2);
    if (v7) {
      Swift::UInt64 v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
    }
    else {
      Swift::UInt64 v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::UInt64 v8 = 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000B3E9C(char *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1000B44E4((uint64_t)a1) & 1) == 0)
  {
    static os_log_type_t.info.getter();
    if (qword_100261948 != -1) {
LABEL_50:
    }
      swift_once();
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1001CFDB0;
    uint64_t v46 = a1;
    id v47 = [v46 description];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;

    *(void *)(v45 + 56) = &type metadata for String;
    *(void *)(v45 + 64) = sub_1000AA5E0();
    *(void *)(v45 + 32) = v48;
    *(void *)(v45 + 40) = v50;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t v56 = v6;
  uint64_t v58 = v4;
  uint64_t v59 = v3;
  char v7 = &a1[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(*(void *)v7 + 64);
  uint64_t v61 = *(void *)v7 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v57 = v1;
  char v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v14 = 0;
  int64_t v62 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v60 = (uint64_t)&_swiftEmptyDictionarySingleton;
  long long v63 = xmmword_1001D0A20;
  while (1)
  {
    while (1)
    {
      if (v12)
      {
        unint64_t v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v16 = v15 | (v14 << 6);
      }
      else
      {
        int64_t v17 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (v17 >= v62) {
          goto LABEL_44;
        }
        unint64_t v18 = *(void *)(v61 + 8 * v17);
        ++v14;
        if (!v18)
        {
          int64_t v14 = v17 + 1;
          if (v17 + 1 >= v62) {
            goto LABEL_44;
          }
          unint64_t v18 = *(void *)(v61 + 8 * v14);
          if (!v18)
          {
            int64_t v14 = v17 + 2;
            if (v17 + 2 >= v62) {
              goto LABEL_44;
            }
            unint64_t v18 = *(void *)(v61 + 8 * v14);
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v62)
              {
LABEL_44:
                swift_release();
                if (!*(void *)(v60 + 16)) {
                  return swift_bridgeObjectRelease();
                }
                uint64_t v52 = v57;
                sub_1000B1F84(v60);
                swift_bridgeObjectRelease();
                id v53 = v56;
                static Date.now.getter();
                uint64_t v54 = v52 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_lastModifiedDate;
                swift_beginAccess();
                (*(void (**)(uint64_t, char *, uint64_t))(v58 + 40))(v54, v53, v59);
                return swift_endAccess();
              }
              unint64_t v18 = *(void *)(v61 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v14 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_48;
                  }
                  if (v14 >= v62) {
                    goto LABEL_44;
                  }
                  unint64_t v18 = *(void *)(v61 + 8 * v14);
                  ++v19;
                  if (v18) {
                    goto LABEL_20;
                  }
                }
              }
              int64_t v14 = v19;
            }
          }
        }
LABEL_20:
        unint64_t v12 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }
      uint64_t v20 = *(void *)(v8 + 48) + 16 * v16;
      a1 = *(char **)v20;
      uint64_t v21 = *(void *)(v20 + 8);
      unint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v16);
      uint64_t v23 = *v13;
      uint64_t v24 = *(void *)(*v13 + 16);
      swift_bridgeObjectRetain();
      if (!v24) {
        break;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v25 = sub_1000B4FC4((uint64_t)a1, v21);
      if ((v26 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      }
      unint64_t v27 = *(void *)(*(void *)(v23 + 56) + 8 * v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v27 < v22) {
        goto LABEL_24;
      }
LABEL_30:
      static os_log_type_t.info.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      sub_1000AA024((uint64_t *)&unk_100262110);
      uint64_t v37 = swift_allocObject();
      *(_OWORD *)(v37 + 16) = v63;
      *(void *)(v37 + 56) = &type metadata for String;
      unint64_t v38 = sub_1000AA5E0();
      *(void *)(v37 + 32) = a1;
      *(void *)(v37 + 40) = v21;
      *(void *)(v37 + 96) = &type metadata for UInt64;
      *(void *)(v37 + 104) = &protocol witness table for UInt64;
      *(void *)(v37 + 64) = v38;
      *(void *)(v37 + 72) = v22;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
    }
    if (!v22) {
      goto LABEL_30;
    }
LABEL_24:
    uint64_t v28 = v60;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v64 = v28;
    unint64_t v31 = sub_1000B4FC4((uint64_t)a1, v21);
    uint64_t v32 = *(void *)(v28 + 16);
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      goto LABEL_49;
    }
    if (*(void *)(v28 + 24) >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        char v44 = v30;
        sub_100124070();
        LOBYTE(v30) = v44;
      }
    }
    else
    {
      LODWORD(v60) = v30;
      sub_100122D50(v34, isUniquelyReferenced_nonNull_native);
      unint64_t v35 = sub_1000B4FC4((uint64_t)a1, v21);
      int v36 = v30 & 1;
      LOBYTE(v30) = v60;
      if ((v60 & 1) != v36) {
        goto LABEL_52;
      }
      unint64_t v31 = v35;
    }
    uint64_t v39 = (void *)v64;
    uint64_t v60 = v64;
    if (v30)
    {
      *(void *)(*(void *)(v64 + 56) + 8 * v31) = v22;
      goto LABEL_39;
    }
    *(void *)(v64 + 8 * (v31 >> 6) + 64) |= 1 << v31;
    uint64_t v40 = (void *)(v39[6] + 16 * v31);
    *uint64_t v40 = a1;
    v40[1] = v21;
    *(void *)(v39[7] + 8 * v31) = v22;
    uint64_t v41 = v39[2];
    BOOL v42 = __OFADD__(v41, 1);
    uint64_t v43 = v41 + 1;
    if (v42) {
      break;
    }
    v39[2] = v43;
    swift_bridgeObjectRetain();
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B44E4(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = (char *)result;
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions);
  swift_beginAccess();
  unint64_t v4 = *(void *)(*v3 + 16);
  uint64_t v5 = &v2[OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_proxCardVersions];
  swift_beginAccess();
  uint64_t v6 = *(void *)v5;
  if (v4 < *(void *)(v6 + 16)) {
    return 1;
  }
  uint64_t v7 = v6 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v6 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  char v26 = v2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v15 >= v11) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v11) {
        goto LABEL_29;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v11) {
          goto LABEL_29;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_24:
    unint64_t v18 = *(void *)(*(void *)(v6 + 56) + 8 * v14);
    uint64_t v19 = *v3;
    if (!*(void *)(*v3 + 16)) {
      goto LABEL_7;
    }
    uint64_t v20 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_1000B4FC4(v22, v21);
    if (v24)
    {
      unint64_t v25 = *(void *)(*(void *)(v19 + 56) + 8 * v23);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v25 < v18)
      {
LABEL_27:

        swift_release();
        return 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_7:
      if (v18) {
        goto LABEL_27;
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v11)
  {
LABEL_29:

    swift_release();
    return 0;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v11) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

CKRecord sub_1000B4720(uint64_t a1)
{
  return sub_1000B478C(a1, 0xD000000000000024, (void *)0x80000001001F74C0, 0xD000000000000011, (void *)0x80000001001F74F0);
}

CKRecord sub_1000B4758(uint64_t a1)
{
  return sub_1000B478C(a1, 0xD000000000000022, (void *)0x80000001001F75C0, 0x654B72657473614DLL, (void *)0xE900000000000079);
}

CKRecord sub_1000B478C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  sub_1000B66A0(0, &qword_1002629E0);
  uint64_t v9 = UUID.uuidString.getter();
  int64_t v11 = v10;
  sub_1000B66A0(0, (unint64_t *)&unk_100261E70);
  v12._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12._object = v13;
  v14._countAndFlagsBits = a2;
  v14._object = a3;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v14, v12).super.isa;
  v16._countAndFlagsBits = v9;
  v16._object = v11;
  v17.super.Class isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)isa).super.isa;
  static os_log_type_t.default.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1001CFDB0;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000AA5E0();
  *(void *)(v18 + 32) = a4;
  *(void *)(v18 + 40) = a5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000B66A0(0, (unint64_t *)&qword_100262960);
  v19._countAndFlagsBits = a4;
  v19._object = a5;
  return CKRecord.init(recordType:recordID:)(v19, v17);
}

CKRecord sub_1000B4934(uint64_t a1)
{
  return sub_1000B478C(a1, 0xD00000000000001ELL, (void *)0x80000001001F6D00, 0x746553636967614DLL, (void *)0xED000073676E6974);
}

CKRecord sub_1000B4970()
{
  sub_1000B66A0(0, &qword_1002629E0);
  type metadata accessor for SoundProfileRecord();
  uint64_t v0 = UUID.uuidString.getter();
  uint64_t v2 = v1;
  sub_1000B66A0(0, (unint64_t *)&unk_100261E70);
  v3._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3._object = v4;
  v5._countAndFlagsBits = 0xD000000000000010;
  v5._object = (void *)0x80000001001F7460;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v3).super.isa;
  v7._countAndFlagsBits = v0;
  v7._object = v2;
  v8.super.Class isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)isa).super.isa;
  static os_log_type_t.default.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001CFDB0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000AA5E0();
  *(void *)(v9 + 32) = 0xD000000000000012;
  *(void *)(v9 + 40) = 0x80000001001F6CA0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000B66A0(0, (unint64_t *)&qword_100262960);
  v10._countAndFlagsBits = 0xD000000000000012;
  v10._object = (void *)0x80000001001F6CA0;
  return CKRecord.init(recordType:recordID:)(v10, v8);
}

CKRecord sub_1000B4B34()
{
  sub_1000B66A0(0, &qword_1002629E0);
  type metadata accessor for DeviceRecord();
  uint64_t v0 = UUID.uuidString.getter();
  uint64_t v2 = v1;
  sub_1000B66A0(0, (unint64_t *)&unk_100261E70);
  v3._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3._object = v4;
  v5._object = (void *)0x80000001001F6D00;
  v5._countAndFlagsBits = 0xD00000000000001ELL;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v3).super.isa;
  v7._countAndFlagsBits = v0;
  v7._object = v2;
  v8.super.Class isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)isa).super.isa;
  static os_log_type_t.default.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001CFDB0;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000AA5E0();
  strcpy((char *)(v9 + 32), "DeviceRecord");
  *(unsigned char *)(v9 + 45) = 0;
  *(_WORD *)(v9 + 46) = -5120;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000B66A0(0, (unint64_t *)&qword_100262960);
  v10._countAndFlagsBits = 0x6552656369766544;
  v10._object = (void *)0xEC00000064726F63;
  return CKRecord.init(recordType:recordID:)(v10, v8);
}

CKRecord sub_1000B4D08(uint64_t a1)
{
  return sub_1000B4D50(a1, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier, 0xD000000000000013, (void *)0x80000001001F7610);
}

CKRecord sub_1000B4D2C(uint64_t a1)
{
  return sub_1000B4D50(a1, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd17AAProxCardsRecord_identifier, 0xD000000000000011, (void *)0x80000001001D0B90);
}

CKRecord sub_1000B4D50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_1000B66A0(0, &qword_1002629E0);
  uint64_t v6 = UUID.uuidString.getter();
  CKRecordID v8 = v7;
  sub_1000B66A0(0, (unint64_t *)&unk_100261E70);
  v9._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9._object = v10;
  v11._object = (void *)0x80000001001F75F0;
  v11._countAndFlagsBits = 0xD000000000000012;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v11, v9).super.isa;
  v13._countAndFlagsBits = v6;
  v13._object = v8;
  v14.super.Class isa = CKRecordID.init(recordName:zoneID:)(v13, (CKRecordZoneID)isa).super.isa;
  static os_log_type_t.default.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1001CFDB0;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_1000AA5E0();
  *(void *)(v15 + 32) = a3;
  *(void *)(v15 + 40) = a4;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000B66A0(0, (unint64_t *)&qword_100262960);
  v16._countAndFlagsBits = a3;
  v16._object = a4;
  return CKRecord.init(recordType:recordID:)(v16, v14);
}

CKRecord sub_1000B4F04(uint64_t a1)
{
  return sub_1000B4D50(a1, (uint64_t)&OBJC_IVAR____TtC15audioaccessoryd14AADeviceRecord_identifier, 0x6563697665444141, (void *)0xEE0064726F636552);
}

unint64_t sub_1000B4F30(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1000B5224(a1, v2);
}

unint64_t sub_1000B4FC4(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000B539C(a1, a2, v4);
}

unint64_t sub_1000B503C(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_1000B5C40(&qword_100263370, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000B5480(a1, v2);
}

unint64_t sub_1000B50F0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000B55DC(a1, v4, (unint64_t *)&qword_100262960);
}

unint64_t sub_1000B5140(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000B55DC(a1, v4, &qword_1002629E0);
}

unint64_t sub_1000B5190(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000B55DC(a1, v4, (unint64_t *)&unk_100261E70);
}

unint64_t sub_1000B51E0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000B56F0(a1, v4);
}

unint64_t sub_1000B5224(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1000B539C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    Swift::String v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000B5480(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    unint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1000B5C40(&qword_100263370, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000B55DC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1000B66A0(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000B56F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000B67A8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000B6804((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000B57B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  id v10 = (void *)*v4;
  unint64_t v12 = sub_1000B4FC4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100124070();
    goto LABEL_7;
  }
  sub_100122D50(result, a4 & 1);
  uint64_t result = sub_1000B4FC4(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100123FE0(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

void sub_1000B58EC(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  id v7 = (void *)*v3;
  unint64_t v9 = sub_1000B5190((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = *v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1001243E4();
    goto LABEL_7;
  }
  sub_100123668(v12, a3 & 1);
  unint64_t v17 = sub_1000B5190((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    sub_1000B66A0(0, (unint64_t *)&unk_100261E70);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = *v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100124028(v9, (uint64_t)a2, a1, v15);

  id v19 = a2;
}

uint64_t sub_1000B5A2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000B4FC4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    char v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10012458C();
    goto LABEL_7;
  }
  sub_10012393C(v15, a4 & 1);
  unint64_t v21 = sub_1000B4FC4(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100123FE0(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B5B6C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t _s15audioaccessoryd17AAProxCardsRecordC12ProxCardKeysO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100235E50, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000B5C40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B5C88()
{
  unint64_t result = qword_100261DB8;
  if (!qword_100261DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261DB8);
  }
  return result;
}

uint64_t type metadata accessor for AAProxCardsRecord()
{
  uint64_t result = qword_100261E48;
  if (!qword_100261E48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B5D28(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000AF194(&qword_100261DC0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000B5D94()
{
  unint64_t result = qword_100261DF0;
  if (!qword_100261DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261DF0);
  }
  return result;
}

uint64_t sub_1000B5DE8()
{
  return sub_1000B5E24(&qword_100261DF8, &qword_100261E00);
}

uint64_t sub_1000B5E24(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000AF194(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B5E68(uint64_t a1)
{
  uint64_t result = sub_1000B5C40(&qword_100261E08, (void (*)(uint64_t))type metadata accessor for AAProxCardsRecord);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

uint64_t sub_1000B5EC0(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000B5C40((unint64_t *)&unk_100261E10, (void (*)(uint64_t))type metadata accessor for AAProxCardsRecord);
  uint64_t result = sub_1000B5C40((unint64_t *)&unk_100263C20, (void (*)(uint64_t))type metadata accessor for AAProxCardsRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000B5F44()
{
  return type metadata accessor for AAProxCardsRecord();
}

uint64_t sub_1000B5F4C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AAProxCardsRecord.ProxCardKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AAProxCardsRecord.ProxCardKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B6198);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.ProxCardKeys()
{
  return &type metadata for AAProxCardsRecord.ProxCardKeys;
}

uint64_t getEnumTagSinglePayload for AAProxCardsRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AAProxCardsRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B632CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.CodingKeys()
{
  return &type metadata for AAProxCardsRecord.CodingKeys;
}

unint64_t sub_1000B6368()
{
  unint64_t result = qword_100261E58;
  if (!qword_100261E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261E58);
  }
  return result;
}

unint64_t sub_1000B63C0()
{
  unint64_t result = qword_100261E60;
  if (!qword_100261E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261E60);
  }
  return result;
}

unint64_t sub_1000B6418()
{
  unint64_t result = qword_100261E68;
  if (!qword_100261E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261E68);
  }
  return result;
}

uint64_t sub_1000B646C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F7420 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1000B66A0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

_OWORD *sub_1000B66DC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1000B66EC()
{
  unint64_t result = qword_100261EA8;
  if (!qword_100261EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261EA8);
  }
  return result;
}

unint64_t sub_1000B6740()
{
  unint64_t result = qword_100261A40;
  if (!qword_100261A40)
  {
    sub_1000B66A0(255, (unint64_t *)&qword_100262960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261A40);
  }
  return result;
}

uint64_t sub_1000B67A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B6804(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for AAProxCardsRecord.AAProxCardsRecordError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AAProxCardsRecord.AAProxCardsRecordError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B69B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AAProxCardsRecord.AAProxCardsRecordError()
{
  return &type metadata for AAProxCardsRecord.AAProxCardsRecordError;
}

unint64_t sub_1000B69F0()
{
  unint64_t result = qword_100261ED8;
  if (!qword_100261ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261ED8);
  }
  return result;
}

uint64_t sub_1000B6A44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000AA024(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

id sub_1000B6AA8()
{
  return sub_1000B6B50((uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords, (uint64_t (*)(char *))sub_1000B4720, (void (*)(id *))sub_1001051C0);
}

id sub_1000B6AFC()
{
  return sub_1000B6B50((uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord, (uint64_t (*)(char *))sub_1000B4758, (void (*)(id *))sub_1000BF1F4);
}

id sub_1000B6B50(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(char *), void (*a4)(id *))
{
  uint64_t v8 = a1(0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  char v11 = (char *)&v18 - v10;
  uint64_t v13 = (uint64_t *)(v4 + *(int *)(v9 + 32));
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_1000AA680(*v13, v15);
  id v16 = sub_100130420(v14, v15);
  sub_1000AA8F0(v14, v15);
  sub_1000BA54C(v4, (uint64_t)v11, a2);
  if (!v16) {
    id v16 = (id)a3(v11);
  }
  sub_1000BA5B4((uint64_t)v11, a2);
  id v19 = v16;
  a4(&v19);
  return v16;
}

void *sub_1000B6C74()
{
  uint64_t v1 = type metadata accessor for MagicPairingSettingsRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v6 = (uint64_t *)(v0 + *(int *)(v2 + 28));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_1000AA680(*v6, v8);
  Class isa = sub_100130420(v7, v8);
  sub_1000AA8F0(v7, v8);
  sub_1000BA54C(v0, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
  if (!isa) {
    Class isa = sub_1000B4934((uint64_t)v4).super.isa;
  }
  sub_1000BA5B4((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
  id v12 = isa;
  sub_1000DE038(&v12);
  return isa;
}

id sub_1000B6D90()
{
  return sub_1000B6E38((uint64_t (*)(void))type metadata accessor for SoundProfileRecord, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord, (uint64_t (*)(char *))sub_1000B4970, sub_1000B98F0);
}

id sub_1000B6DE4()
{
  return sub_1000B6E38((uint64_t (*)(void))type metadata accessor for DeviceRecord, (uint64_t (*)(void))type metadata accessor for DeviceRecord, (uint64_t (*)(char *))sub_1000B4B34, (void (*)(id *))sub_1000A7948);
}

id sub_1000B6E38(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t (*a3)(char *), void (*a4)(id *))
{
  uint64_t v8 = a1(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v12 = *v4;
  unint64_t v13 = v4[1];
  sub_1000AA680(*v4, v13);
  id v14 = sub_100130420(v12, v13);
  sub_1000AA8F0(v12, v13);
  sub_1000BA54C((uint64_t)v4, (uint64_t)v10, a2);
  if (!v14) {
    id v14 = (id)a3(v10);
  }
  sub_1000BA5B4((uint64_t)v10, a2);
  id v17 = v14;
  a4(&v17);
  return v14;
}

BOOL sub_1000B6F50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000B6F68(uint64_t a1)
{
  return sub_1000B6FB0(a1, qword_10026AB38);
}

uint64_t sub_1000B6F8C(uint64_t a1)
{
  return sub_1000B6FB0(a1, qword_10026AB50);
}

uint64_t sub_1000B6FB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v10, a2);
  sub_1000AA0CC(v6, (uint64_t)a2);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

uint64_t sub_1000B7170()
{
  uint64_t v1 = type metadata accessor for SoundProfileRecord();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v99 = (char *)&v90 - v5;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v91 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000AA024(&qword_100261D90);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  id v92 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  id v93 = (char *)&v90 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v90 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v90 - v17;
  id v19 = sub_1000B6E38((uint64_t (*)(void))type metadata accessor for SoundProfileRecord, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord, (uint64_t (*)(char *))sub_1000B4970, sub_1000B98F0);
  uint64_t v101 = 0;
  unint64_t v102 = 0xE000000000000000;
  int v20 = IsAppleInternalBuild();
  uint64_t v94 = v4;
  uint64_t v97 = v0;
  v100._uint64_t countAndFlagsBits = 0;
  v100._object = (void *)0xE000000000000000;
  if (v20)
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v100._uint64_t countAndFlagsBits = 0xD000000000000013;
    v100._object = (void *)0x80000001001F7660;
    type metadata accessor for UUID();
    sub_1000B7C08((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 2108704;
    v22._object = (void *)0xE300000000000000;
    String.append(_:)(v22);
    type metadata accessor for URL();
    sub_1000B7C08((unint64_t *)&unk_100263280, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  else
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v100._uint64_t countAndFlagsBits = 0xD000000000000013;
    v100._object = (void *)0x80000001001F7660;
    type metadata accessor for UUID();
    sub_1000B7C08((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
    v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 2108704;
    v26._object = (void *)0xE300000000000000;
    String.append(_:)(v26);
    uint64_t v23 = URL.lastPathComponent.getter();
  }
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 10;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  uint64_t v28 = v101;
  unint64_t v29 = (void *)v102;
  v100._uint64_t countAndFlagsBits = 0;
  v100._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v30._uint64_t countAndFlagsBits = 0xD000000000000011;
  v30._object = (void *)0x80000001001F6D50;
  String.append(_:)(v30);
  id v31 = [v19 creationDate];
  id v98 = v19;
  uint64_t v95 = v28;
  uint64_t v96 = v1;
  if (v31)
  {
    uint64_t v32 = v31;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    BOOL v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v33(v16, 0, 1, v6);
  }
  else
  {
    BOOL v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v33(v16, 1, 1, v6);
  }
  uint64_t v34 = (uint64_t)v99;
  sub_1000AA798((uint64_t)v16, (uint64_t)v18);
  unint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v35(v18, 1, v6))
  {
    sub_1000AA894((uint64_t)v18, &qword_100261D90);
    sub_1000BA54C(v97, v34, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
  }
  else
  {
    int v36 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    char v90 = v29;
    uint64_t v37 = v91;
    v36(v91, v18, v6);
    sub_1000AA894((uint64_t)v18, &qword_100261D90);
    unint64_t v38 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v40 = [v38 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v43 = v42;

    uint64_t v44 = (uint64_t)v99;
    uint64_t v45 = v37;
    unint64_t v29 = v90;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v45, v6);
    sub_1000BA54C(v97, v44, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    if (v43) {
      goto LABEL_11;
    }
  }
  uint64_t v46 = self;
  Class v47 = Date._bridgeToObjectiveC()().super.isa;
  id v48 = [v46 localizedStringFromDate:v47 dateStyle:2 timeStyle:2];

  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v49;

  uint64_t v44 = (uint64_t)v99;
LABEL_11:
  sub_1000BA5B4(v44, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
  v50._uint64_t countAndFlagsBits = v41;
  v50._object = v43;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v51._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v51);
  id v52 = [v98 modificationDate];
  if (v52)
  {
    id v53 = v52;
    uint64_t v54 = (uint64_t)v92;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v55 = 0;
    uint64_t v56 = v97;
  }
  else
  {
    uint64_t v55 = 1;
    uint64_t v56 = v97;
    uint64_t v54 = (uint64_t)v92;
  }
  uint64_t v57 = (uint64_t)v93;
  v33((char *)v54, v55, 1, v6);
  sub_1000AA798(v54, v57);
  if (v35((char *)v57, 1, v6))
  {
    sub_1000AA894(v57, &qword_100261D90);
    uint64_t v58 = (uint64_t)v94;
    sub_1000BA54C(v56, (uint64_t)v94, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    id v59 = v98;
  }
  else
  {
    uint64_t v60 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v91, v57, v6);
    sub_1000AA894(v57, &qword_100261D90);
    uint64_t v61 = self;
    Class v62 = Date._bridgeToObjectiveC()().super.isa;
    id v63 = [v61 localizedStringFromDate:v62 dateStyle:2 timeStyle:2];

    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;

    (*(void (**)(char *, uint64_t))(v7 + 8))(v60, v6);
    uint64_t v58 = (uint64_t)v94;
    sub_1000BA54C(v56, (uint64_t)v94, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    id v59 = v98;
    if (v66) {
      goto LABEL_18;
    }
  }
  unsigned int v67 = self;
  Class v68 = Date._bridgeToObjectiveC()().super.isa;
  id v69 = [v67 localizedStringFromDate:v68 dateStyle:2 timeStyle:2];

  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v70;

LABEL_18:
  sub_1000BA5B4(v58, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
  v71._uint64_t countAndFlagsBits = v64;
  v71._object = v66;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  v72._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v72._object = (void *)0xEF203A7962206465;
  String.append(_:)(v72);
  id v73 = [v59 modifiedByDevice];
  if (v73)
  {
    char v74 = v73;
    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v77 = v76;
  }
  else
  {
    uint64_t v77 = (void *)0xE200000000000000;
    uint64_t v75 = 15932;
  }
  v78._uint64_t countAndFlagsBits = v75;
  v78._object = v77;
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  v79._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v79._object = (void *)0xE800000000000000;
  String.append(_:)(v79);
  id v80 = [v59 recordChangeTag];
  if (v80)
  {
    uint64_t v81 = v80;
    uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v84 = v83;
  }
  else
  {
    uint64_t v84 = (void *)0xE200000000000000;
    uint64_t v82 = 15932;
  }
  v85._uint64_t countAndFlagsBits = v82;
  v85._object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v100._countAndFlagsBits;
  object = v100._object;
  v100._uint64_t countAndFlagsBits = v95;
  v100._object = v29;
  swift_bridgeObjectRetain();
  v88._uint64_t countAndFlagsBits = countAndFlagsBits;
  v88._object = object;
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v100._countAndFlagsBits;
}

uint64_t type metadata accessor for SoundProfileRecord()
{
  uint64_t result = qword_100261F60;
  if (!qword_100261F60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B7C08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B7C50@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v92 = a2;
  uint64_t v3 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v3 - 8);
  uint64_t v89 = (uint64_t)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v93 = (uint64_t)&v83 - v6;
  __chkstk_darwin(v7);
  uint64_t v94 = (char *)&v83 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v96 = *(void **)(v9 - 8);
  uint64_t v97 = v9;
  __chkstk_darwin(v9);
  char v90 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v91 = (char *)&v83 - v12;
  uint64_t v101 = (void *)type metadata accessor for URL();
  uint64_t v98 = *(v101 - 1);
  __chkstk_darwin(v101);
  uint64_t v95 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v99 = *(void *)(v14 - 8);
  uint64_t v100 = v14;
  __chkstk_darwin(v14);
  unint64_t v102 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000AA024(&qword_100261FD8);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v103 = v16;
  uint64_t v104 = v17;
  __chkstk_darwin(v16);
  id v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SoundProfileRecord();
  __chkstk_darwin(v20);
  Swift::String v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  Swift::String v25 = (char *)&v83 - v24;
  __chkstk_darwin(v26);
  uint64_t v28 = (uint64_t *)((char *)&v83 - v27);
  sub_1000ABF58(a1, a1[3]);
  sub_1000BB484();
  unint64_t v29 = v105;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v29) {
    return sub_1000ABFF0((uint64_t)a1);
  }
  Swift::String v30 = v102;
  uint64_t v86 = v25;
  uint64_t v87 = v20;
  Swift::String v85 = v22;
  Swift::String v88 = v28;
  uint64_t v105 = a1;
  char v107 = 0;
  sub_1000AC040();
  id v31 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  id v34 = v106[0];
  id v33 = v106[1];
  unint64_t v35 = v88;
  uint64_t *v88 = (uint64_t)v106[0];
  v35[1] = (uint64_t)v33;
  LOBYTE(v106[0]) = 1;
  sub_1000B7C08((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v36 = v100;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v83 = (unint64_t)v33;
  uint64_t v84 = (uint64_t)v34;
  uint64_t v38 = v87;
  uint64_t v37 = v88;
  (*(void (**)(uint64_t, char *, uint64_t))(v99 + 32))((uint64_t)v88 + *(int *)(v87 + 20), v30, v36);
  LOBYTE(v106[0]) = 2;
  sub_1000B7C08(&qword_100261FE0, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v39 = v95;
  id v40 = v101;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, void *))(v98 + 32))((char *)v37 + *(int *)(v38 + 24), v39, v40);
  uint64_t v41 = (char *)v37 + *(int *)(v38 + 28);
  static Date.now.getter();
  LOBYTE(v106[0]) = 3;
  sub_1000B7C08(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
  BOOL v42 = v94;
  uint64_t v43 = v97;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  unint64_t v102 = v31;
  uint64_t v44 = v96;
  uint64_t v45 = v42;
  uint64_t v46 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v96[6];
  if (v46((uint64_t)v42, 1, v43) == 1)
  {
    uint64_t v48 = v84;
    unint64_t v49 = v83;
    sub_1000AA680(v84, v83);
    Class isa = sub_100130420(v48, v49);
    sub_1000AA8F0(v48, v49);
    uint64_t v51 = (uint64_t)v86;
    sub_1000BA54C((uint64_t)v88, (uint64_t)v86, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    uint64_t v95 = v41;
    if (!isa) {
      Class isa = sub_1000B4970().super.isa;
    }
    sub_1000BA5B4(v51, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    id v52 = v90;
    v106[0] = isa;
    sub_1000B98F0(v106);
    id v53 = [isa modificationDate];

    if (v53)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v54 = v43;
      uint64_t v55 = v96;
      uint64_t v56 = v93;
      uint64_t v101 = (void *)v96[4];
      ((void (*)(uint64_t, char *, uint64_t))v101)(v93, v52, v54);
      uint64_t v57 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55[7];
      v57(v56, 0, 1, v54);
      if (v46(v56, 1, v54) != 1)
      {
        uint64_t v58 = v55;
        (*(void (**)(char *, uint64_t))(v104 + 8))(v102, v103);
        id v59 = v91;
        uint64_t v60 = v97;
        ((void (*)(char *, uint64_t, uint64_t))v101)(v91, v93, v97);
        uint64_t v61 = (uint64_t)v105;
        uint64_t v62 = v92;
        uint64_t v63 = (uint64_t)v94;
LABEL_20:
        sub_1000AA894(v63, &qword_100261D90);
        uint64_t v41 = v95;
        uint64_t v64 = v60;
        uint64_t v44 = v58;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v57 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v96[7];
      v57(v93, 1, 1, v43);
    }
    uint64_t v66 = v88;
    uint64_t v68 = *v88;
    unint64_t v67 = v88[1];
    sub_1000AA680(*v88, v67);
    id v69 = sub_100130420(v68, v67);
    sub_1000AA8F0(v68, v67);
    uint64_t v70 = (uint64_t)v85;
    sub_1000BA54C((uint64_t)v66, (uint64_t)v85, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    if (!v69) {
      id v69 = sub_1000B4970().super.isa;
    }
    sub_1000BA5B4(v70, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    id v59 = v91;
    uint64_t v71 = v89;
    v106[0] = v69;
    sub_1000B98F0(v106);
    id v72 = [v69 creationDate];

    if (v72)
    {
      id v73 = v90;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      char v74 = v57;
      uint64_t v75 = v96;
      uint64_t v76 = v71;
      uint64_t v77 = v73;
      uint64_t v78 = v71;
      uint64_t v79 = v97;
      uint64_t v101 = (void *)v96[4];
      ((void (*)(uint64_t, char *, uint64_t))v101)(v76, v77, v97);
      v74(v78, 0, 1, v79);
      unsigned int v80 = v46(v78, 1, v79);
      uint64_t v61 = (uint64_t)v105;
      uint64_t v62 = v92;
      uint64_t v63 = (uint64_t)v94;
      if (v80 != 1)
      {
        uint64_t v58 = v75;
        (*(void (**)(char *, uint64_t))(v104 + 8))(v102, v103);
        ((void (*)(char *, uint64_t, uint64_t))v101)(v59, v89, v97);
LABEL_19:
        sub_1000AA894(v93, &qword_100261D90);
        uint64_t v60 = v97;
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v81 = v57;
      uint64_t v75 = v96;
      v81(v71, 1, 1, v97);
      uint64_t v61 = (uint64_t)v105;
      uint64_t v62 = v92;
      uint64_t v63 = (uint64_t)v94;
    }
    uint64_t v58 = v75;
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v102, v103);
    sub_1000AA894(v89, &qword_100261D90);
    goto LABEL_19;
  }
  (*(void (**)(char *, uint64_t))(v104 + 8))(v102, v103);
  id v59 = v91;
  ((void (*)(char *, char *, uint64_t))v44[4])(v91, v45, v43);
  uint64_t v64 = v43;
  uint64_t v61 = (uint64_t)v105;
  uint64_t v62 = v92;
LABEL_21:
  ((void (*)(char *, char *, uint64_t))v44[5])(v41, v59, v64);
  uint64_t v82 = v88;
  sub_1000BA54C((uint64_t)v88, v62, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
  sub_1000ABFF0(v61);
  return sub_1000BA5B4((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
}

void sub_1000B882C(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v4 - 8);
  id v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v74 = (uint64_t)&v65 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v70 = *(void *)(v8 - 8);
  uint64_t v71 = (void (*)(void, void, void, void))v8;
  __chkstk_darwin(v8);
  id v72 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v73 = (char *)&v65 - v11;
  uint64_t v12 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v78 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v76 = (char *)&v65 - v19;
  uint64_t v20 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v20 - 8);
  Swift::String v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v79 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0xD000000000000012 && v26 == 0x80000001001D0DD0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      sub_1000BA4F8();
      swift_allocError();
      *uint64_t v55 = 1;
LABEL_17:
      swift_willThrow();

      return;
    }
  }
  uint64_t v68 = v2;
  id v28 = [a1 recordID];
  id v29 = [v28 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_1000AA894((uint64_t)v22, &qword_100261EA0);
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1001CFDB0;
    *(void *)(v30 + 56) = sub_1000B66A0(0, (unint64_t *)&qword_100262960);
    *(void *)(v30 + 64) = sub_1000B6740();
    *(void *)(v30 + 32) = a1;
    a1 = a1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000BA4F8();
    swift_allocError();
    *id v31 = 0;
    goto LABEL_17;
  }
  uint64_t v32 = v79;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v79, v22, v23);
  id v33 = [a1 valueStore];
  sub_1000B66A0(0, (unint64_t *)&unk_100263B70);
  CKRecordKeyValueSetting.subscript.getter();

  if (!v81)
  {
    uint64_t v56 = (uint64_t *)&unk_100261F00;
    uint64_t v57 = &v80;
LABEL_21:
    sub_1000AA894((uint64_t)v57, v56);
    goto LABEL_22;
  }
  sub_1000AA024((uint64_t *)&unk_100263B80);
  sub_1000B66A0(0, &qword_100261EF0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    sub_1000BA4F8();
    swift_allocError();
    *uint64_t v58 = 1;
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v24 + 8))(v32, v23);
    return;
  }
  id v67 = v82;
  id v34 = [v82 fileURL];
  if (!v34)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v14, 1, 1, v78);
    goto LABEL_20;
  }
  unint64_t v35 = v34;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v36 = v77;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
  uint64_t v38 = v17;
  uint64_t v39 = v78;
  v37(v14, v38, v78);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v14, 0, 1, v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v14, 1, v39) == 1)
  {
LABEL_20:

    uint64_t v56 = (uint64_t *)&unk_100261A00;
    uint64_t v57 = v14;
    goto LABEL_21;
  }
  v37(v76, v14, v39);
  uint64_t v66 = (int *)type metadata accessor for SoundProfileRecord();
  id v40 = v75;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))((char *)v75 + v66[5], v32, v23);
  id v41 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v41];
  [v41 finishEncoding];
  id v42 = [v41 encodedData];
  uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  *id v40 = v43;
  v40[1] = v45;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))((char *)v40 + v66[6], v76, v78);
  id v46 = [a1 modificationDate];
  if (!v46)
  {
    uint64_t v50 = v70;
    unint64_t v49 = v71;
    id v53 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v70 + 56);
    v53(v74, 1, 1, v71);
LABEL_24:
    uint64_t v71 = v53;
    id v59 = [a1 creationDate];
    uint64_t v54 = v73;
    uint64_t v60 = v77;
    if (v59)
    {
      uint64_t v61 = v59;
      uint64_t v62 = v72;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v63 = (uint64_t)v69;
      uint64_t v64 = v62;
      uint64_t v54 = v73;
      id v72 = *(char **)(v50 + 32);
      ((void (*)(char *, char *, void (*)(void, void, void, void)))v72)(v69, v64, v49);
      v71(v63, 0, 1, v49);
      if ((*(unsigned int (**)(uint64_t, uint64_t, void (*)(void, void, void, void)))(v50 + 48))(v63, 1, v49) != 1)
      {

        (*(void (**)(char *, uint64_t))(v60 + 8))(v76, v78);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v79, v23);
        ((void (*)(char *, uint64_t, void (*)(void, void, void, void)))v72)(v54, v63, v49);
LABEL_29:
        sub_1000AA894(v74, &qword_100261D90);
        uint64_t v51 = *(void (**)(void, void, void))(v50 + 32);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v63 = (uint64_t)v69;
      v71(v69, 1, 1, v49);
    }
    static Date.now.getter();

    (*(void (**)(char *, uint64_t))(v60 + 8))(v76, v78);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v79, v23);
    sub_1000AA894(v63, &qword_100261D90);
    goto LABEL_29;
  }
  Class v47 = v46;
  uint64_t v48 = v72;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = v70;
  unint64_t v49 = v71;
  uint64_t v51 = *(void (**)(void, void, void))(v70 + 32);
  uint64_t v52 = v74;
  v51(v74, v48, v71);
  id v53 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v50 + 56);
  v53(v52, 0, 1, v49);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void (*)(void, void, void, void)))(v50 + 48))(v52, 1, v49) == 1)goto LABEL_24; {

  }
  (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v79, v23);
  uint64_t v54 = v73;
  v51(v73, v74, v49);
LABEL_30:
  v51((char *)v75 + v66[7], v54, v49);
}

uint64_t sub_1000B934C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v46 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v47 = a1;
  if (CKRecord.recordType.getter() == 0xD000000000000012 && v14 == 0x80000001001D0DD0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      sub_1000BA4F8();
      swift_allocError();
      char v24 = 1;
      id v21 = v47;
      goto LABEL_11;
    }
  }
  id v16 = v47;
  id v17 = [v47 recordID];
  id v18 = [v17 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v42 = type metadata accessor for SoundProfileRecord();
    uint64_t v25 = v46;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v46 + *(int *)(v42 + 20), v13, v10);
    id v26 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    [v16 encodeSystemFieldsWithCoder:v26];
    [v26 finishEncoding];
    id v27 = [v26 encodedData];
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    id v41 = v13;
    id v29 = v16;
    uint64_t v30 = a2;
    uint64_t v32 = v31;

    *uint64_t v25 = v28;
    v25[1] = v32;
    uint64_t v33 = v42;
    id v34 = (char *)v25 + *(int *)(v42 + 24);
    uint64_t v35 = type metadata accessor for URL();
    uint64_t v36 = *(void *)(v35 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v30, v35);
    uint64_t v37 = v43;
    static Date.now.getter();

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v30, v35);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v41, v10);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 32))((char *)v25 + *(int *)(v33 + 28), v37, v45);
  }
  uint64_t v19 = a2;
  sub_1000AA894((uint64_t)v9, &qword_100261EA0);
  static os_log_type_t.error.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1001CFDB0;
  *(void *)(v20 + 56) = sub_1000B66A0(0, (unint64_t *)&qword_100262960);
  *(void *)(v20 + 64) = sub_1000B6740();
  id v21 = v47;
  *(void *)(v20 + 32) = v47;
  id v22 = v21;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000BA4F8();
  swift_allocError();
  char v24 = 0;
  a2 = v19;
LABEL_11:
  *uint64_t v23 = v24;
  swift_willThrow();

  uint64_t v39 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a2, v39);
}

void sub_1000B98F0(id *a1)
{
  static os_log_type_t.debug.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1001CFDB0;
  id v3 = *a1;
  id v4 = [v3 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_1000AA5E0();
  *(void *)(v2 + 32) = v5;
  *(void *)(v2 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v12 = [v3 valueStore];
  type metadata accessor for SoundProfileRecord();
  id v8 = objc_allocWithZone((Class)CKAsset);
  URL._bridgeToObjectiveC()(v9);
  uint64_t v11 = v10;
  [v8 initWithFileURL:v10];

  sub_1000B66A0(0, &qword_100261EF0);
  sub_1000B66A0(0, (unint64_t *)&unk_100263B70);
  CKRecordKeyValueSetting.subscript.setter();
}

uint64_t sub_1000B9AF4(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_1000AA024(&qword_100261FC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000ABF58(a1, a1[3]);
  sub_1000BB484();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_1000AC094();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for SoundProfileRecord();
    LOBYTE(v11) = 1;
    type metadata accessor for UUID();
    sub_1000B7C08(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for URL();
    sub_1000B7C08(&qword_100261FD0, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    type metadata accessor for Date();
    sub_1000B7C08(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000B9DB8()
{
  unint64_t result = 0x74654D64756F6C63;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B9E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BB6E4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000B9E8C(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000B9E98(uint64_t a1)
{
  unint64_t v2 = sub_1000BB484();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000B9ED4(uint64_t a1)
{
  unint64_t v2 = sub_1000BB484();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000B9F10()
{
  return 0xD000000000000012;
}

unint64_t sub_1000B9F2C()
{
  return 0xD000000000000010;
}

uint64_t sub_1000B9F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

Swift::Int sub_1000B9FBC()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000AA680(v2, v3);
  Data.hash(into:)();
  sub_1000AA8F0(v2, v3);
  type metadata accessor for UUID();
  sub_1000B7C08((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for URL();
  sub_1000B7C08(&qword_100261FE8, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  sub_1000B7C08(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000BA13C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000AA680(v2, v3);
  Data.hash(into:)();
  sub_1000AA8F0(v2, v3);
  type metadata accessor for UUID();
  sub_1000B7C08((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for URL();
  sub_1000B7C08(&qword_100261FE8, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  sub_1000B7C08(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1000BA2AC()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000AA680(v2, v3);
  Data.hash(into:)();
  sub_1000AA8F0(v2, v3);
  type metadata accessor for UUID();
  sub_1000B7C08((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for URL();
  sub_1000B7C08(&qword_100261FE8, (void (*)(uint64_t))&type metadata accessor for URL);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  sub_1000B7C08(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000BA428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_1000E4B6C(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0
    || (static UUID.== infix(_:_:)() & 1) == 0
    || (static URL.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 28);

  return static Date.== infix(_:_:)(a1 + v6, a2 + v6);
}

uint64_t sub_1000BA4C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000B7C50(a1, a2);
}

uint64_t sub_1000BA4E0(void *a1)
{
  return sub_1000B9AF4(a1);
}

unint64_t sub_1000BA4F8()
{
  unint64_t result = qword_100261EF8;
  if (!qword_100261EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261EF8);
  }
  return result;
}

uint64_t sub_1000BA54C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000BA5B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SoundProfileRecord.SoundProfileRecordError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SoundProfileRecord.SoundProfileRecordError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BA770);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000BA798(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SoundProfileRecord.SoundProfileRecordError()
{
  return &type metadata for SoundProfileRecord.SoundProfileRecordError;
}

uint64_t *sub_1000BA7B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000AA680(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    long long v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    char v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[7];
    id v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t sub_1000BA92C(uint64_t a1, int *a2)
{
  sub_1000AA8F0(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t *sub_1000BAA30(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000AA680(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  id v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t *sub_1000BAB58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000AA680(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1000AA8F0(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_1000BAC88(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t *sub_1000BADA4(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000AA8F0(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t sub_1000BAECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BAEE0);
}

uint64_t sub_1000BAEE0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for URL();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[7];

  return v15(v17, a2, v16);
}

uint64_t sub_1000BB064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BB078);
}

char *sub_1000BB078(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)unint64_t result = 0;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for URL();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[7]];

  return (char *)v15(v17, a2, a2, v16);
}

uint64_t sub_1000BB1F8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Date();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000BB308(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000B7C08(&qword_100261FA0, (void (*)(uint64_t))type metadata accessor for SoundProfileRecord);
  uint64_t result = sub_1000B7C08(&qword_100263B90, (void (*)(uint64_t))type metadata accessor for SoundProfileRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000BB38C()
{
  return sub_1000B7C08(&qword_100261FA8, (void (*)(uint64_t))type metadata accessor for SoundProfileRecord);
}

unint64_t sub_1000BB3D8()
{
  unint64_t result = qword_100261FB0;
  if (!qword_100261FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261FB0);
  }
  return result;
}

uint64_t sub_1000BB42C(uint64_t a1)
{
  uint64_t result = sub_1000B7C08(&qword_100261FB8, (void (*)(uint64_t))type metadata accessor for SoundProfileRecord);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

unint64_t sub_1000BB484()
{
  unint64_t result = qword_100261FC8;
  if (!qword_100261FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261FC8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SoundProfileRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BB5A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SoundProfileRecord.CodingKeys()
{
  return &type metadata for SoundProfileRecord.CodingKeys;
}

unint64_t sub_1000BB5E0()
{
  unint64_t result = qword_100261FF0;
  if (!qword_100261FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261FF0);
  }
  return result;
}

unint64_t sub_1000BB638()
{
  unint64_t result = qword_100261FF8;
  if (!qword_100261FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100261FF8);
  }
  return result;
}

unint64_t sub_1000BB690()
{
  unint64_t result = qword_100262000;
  if (!qword_100262000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262000);
  }
  return result;
}

uint64_t sub_1000BB6E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001001F7720 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000BB8C4(char *a1, char *a2)
{
  return sub_10013AC44(*a1, *a2);
}

Swift::Int sub_1000BB8D0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BB940()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000BB994()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BBA00@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100235F40, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1000BBA60(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x657461647075;
  if (*v1) {
    uint64_t v2 = 0x6574656C6564;
  }
  *a1 = v2;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1000BBA90()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000BBAF0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000BBB40(void *a1)
{
  Swift::Int v3 = v1;
  uint64_t v5 = sub_1000AA024(&qword_1002620B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000ABF58(a1, a1[3]);
  sub_1000BCE8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = *v3;
  char v12 = 0;
  sub_1000BCEE0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v9 = type metadata accessor for BTDeferredRecord();
    LOBYTE(v11) = 2;
    type metadata accessor for UUID();
    sub_1000BCF88(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)&v3[*(int *)(v9 + 36)];
    char v12 = 5;
    sub_1000AC094();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000BBDDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AA024(&qword_1002620C8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for BTDeferredRecord();
  __chkstk_darwin(v27);
  char v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  id v26 = a1;
  sub_1000ABF58(a1, v13);
  sub_1000BCE8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_1000ABFF0((uint64_t)v26);
  }
  uint64_t v22 = v8;
  char v29 = 0;
  sub_1000BCF34();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *char v12 = v28;
  LOBYTE(v2_Block_object_dispose(&STACK[0x290], 8) = 1;
  *((void *)v12 + 1) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v12 + 2) = v14;
  LOBYTE(v2_Block_object_dispose(&STACK[0x290], 8) = 2;
  sub_1000BCF88((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v15 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = (int *)v27;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v12[*(int *)(v27 + 24)], v6, v15);
  LOBYTE(v2_Block_object_dispose(&STACK[0x290], 8) = 3;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v18 = (uint64_t *)&v12[v16[7]];
  *uint64_t v18 = v17;
  v18[1] = v19;
  LOBYTE(v2_Block_object_dispose(&STACK[0x290], 8) = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v12[v16[8]] = v20;
  char v29 = 5;
  sub_1000AC040();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v7);
  *(_OWORD *)&v12[v16[9]] = v28;
  sub_1000BCFD0((uint64_t)v12, v23);
  sub_1000ABFF0((uint64_t)v26);
  return sub_1000BD034((uint64_t)v12);
}

unint64_t sub_1000BC2B4()
{
  unint64_t result = 0x7079547265666564;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x795464726F636572;
      break;
    case 2:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 5:
      unint64_t result = 0x614464726F636572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000BC394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BD3F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000BC3BC(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000BC3C8(uint64_t a1)
{
  unint64_t v2 = sub_1000BCE8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BC404(uint64_t a1)
{
  unint64_t v2 = sub_1000BCE8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BC440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t *sub_1000BC4B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    char v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (uint64_t *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v18 = a3[9];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (_OWORD *)((char *)a2 + v18);
    unint64_t v21 = *(uint64_t *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain();
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *v20;
    }
    else
    {
      uint64_t v23 = *(void *)v20;
      sub_1000AA680(v23, v21);
      *(void *)uint64_t v19 = v23;
      *((void *)v19 + 1) = v21;
    }
  }
  return v4;
}

uint64_t sub_1000BC60C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 36));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return sub_1000AA8F0(v9, v8);
  }
  return result;
}

uint64_t sub_1000BC6CC(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  unint64_t v20 = *(void *)(v19 + 8);
  swift_bridgeObjectRetain();
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *(void *)v19;
    sub_1000AA680(v21, v20);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + _Block_object_dispose(&STACK[0x290], 8) = v20;
  }
  return a1;
}

uint64_t sub_1000BC7D8(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v13 = a3[9];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a2 + v13 + 8);
  if (*(void *)(a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v18 = *v15;
      sub_1000AA680(v18, v16);
      uint64_t v19 = *v14;
      unint64_t v20 = v14[1];
      *uint64_t v14 = v18;
      v14[1] = v16;
      sub_1000AA8F0(v19, v20);
      return a1;
    }
    sub_1000BC93C((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    return a1;
  }
  uint64_t v17 = *v15;
  sub_1000AA680(v17, v16);
  *uint64_t v14 = v17;
  v14[1] = v16;
  return a1;
}

uint64_t sub_1000BC93C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BC990(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000BCA44(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v17 = (uint64_t *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  unint64_t v19 = *(void *)(a1 + v16 + 8);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v17;
      *uint64_t v17 = *v18;
      v17[1] = v20;
      sub_1000AA8F0(v21, v19);
      return a1;
    }
    sub_1000BC93C((uint64_t)v17);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t sub_1000BCB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BCB68);
}

uint64_t sub_1000BCB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000BCC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BCC2C);
}

uint64_t sub_1000BCC2C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for BTDeferredRecord()
{
  uint64_t result = qword_100262060;
  if (!qword_100262060) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000BCD20()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000BCDD8(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000BCF88(&qword_100263C80, (void (*)(uint64_t))type metadata accessor for BTDeferredRecord);
  uint64_t result = sub_1000BCF88(&qword_1002620A8, (void (*)(uint64_t))type metadata accessor for BTDeferredRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000BCE5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000BBDDC(a1, a2);
}

uint64_t sub_1000BCE74(void *a1)
{
  return sub_1000BBB40(a1);
}

unint64_t sub_1000BCE8C()
{
  unint64_t result = qword_1002620B8;
  if (!qword_1002620B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620B8);
  }
  return result;
}

unint64_t sub_1000BCEE0()
{
  unint64_t result = qword_1002620C0;
  if (!qword_1002620C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620C0);
  }
  return result;
}

unint64_t sub_1000BCF34()
{
  unint64_t result = qword_1002620D0;
  if (!qword_1002620D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620D0);
  }
  return result;
}

uint64_t sub_1000BCF88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BCFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BTDeferredRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BD034(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BTDeferredRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for BTDeferredRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BD15CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BTDeferredRecord.CodingKeys()
{
  return &type metadata for BTDeferredRecord.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BTDeferredRecord.BTDeferType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BD260);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BTDeferredRecord.BTDeferType()
{
  return &type metadata for BTDeferredRecord.BTDeferType;
}

unint64_t sub_1000BD29C()
{
  unint64_t result = qword_1002620D8;
  if (!qword_1002620D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620D8);
  }
  return result;
}

unint64_t sub_1000BD2F4()
{
  unint64_t result = qword_1002620E0;
  if (!qword_1002620E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620E0);
  }
  return result;
}

unint64_t sub_1000BD34C()
{
  unint64_t result = qword_1002620E8;
  if (!qword_1002620E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620E8);
  }
  return result;
}

unint64_t sub_1000BD3A4()
{
  unint64_t result = qword_1002620F0;
  if (!qword_1002620F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620F0);
  }
  return result;
}

uint64_t sub_1000BD3F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7079547265666564 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x795464726F636572 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614464726F636572 && a2 == 0xEA00000000006174)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t sub_1000BD698()
{
  unint64_t result = qword_1002620F8;
  if (!qword_1002620F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002620F8);
  }
  return result;
}

uint64_t sub_1000BD6EC()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  BOOL v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v7, qword_10026AB68);
  sub_1000AA0CC(v3, (uint64_t)qword_10026AB68);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_1000BD8B0()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v81 = (char *)&v80 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v2 - 8);
  unint64_t v83 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v6 = (char *)&v80 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v80 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v80 - v11;
  id v85 = sub_1000B6AFC();
  v86[0] = 0;
  v86[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v86[0] = 0xD000000000000011;
  v86[1] = 0x80000001001F77C0;
  type metadata accessor for UUID();
  sub_1000C0ACC((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x3A79656B202D2029;
  v14._object = (void *)0xE900000000000020;
  String.append(_:)(v14);
  int v15 = IsAppleInternalBuild();
  type metadata accessor for LegacyAccountMagicKeysRecord();
  uint64_t v16 = Data.subdata(in:)();
  uint64_t v18 = v16;
  unint64_t v19 = v17;
  if (v15) {
    uint64_t v20 = Data.hexString.getter(v16, v17);
  }
  else {
    uint64_t v20 = Data.description.getter();
  }
  uint64_t v22 = v20;
  uint64_t v23 = v21;
  sub_1000AA8F0(v18, v19);
  v24._uint64_t countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0x203A746E6968202CLL;
  v25._object = (void *)0xE800000000000000;
  String.append(_:)(v25);
  LODWORD(v23) = IsAppleInternalBuild();
  uint64_t v26 = Data.subdata(in:)();
  uint64_t v28 = v26;
  unint64_t v29 = v27;
  if (v23) {
    uint64_t v30 = Data.hexString.getter(v26, v27);
  }
  else {
    uint64_t v30 = Data.description.getter();
  }
  uint64_t v32 = v30;
  uint64_t v33 = v31;
  sub_1000AA8F0(v28, v29);
  v34._uint64_t countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 10;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t v36 = v86[1];
  uint64_t v82 = v86[0];
  v86[0] = 0;
  v86[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  strcpy((char *)v86, "   createdOn: ");
  HIBYTE(v86[1]) = -18;
  id v37 = [v85 creationDate];
  if (v37)
  {
    uint64_t v38 = v37;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v39 = v84;
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56);
    v40(v9, 0, 1, v0);
  }
  else
  {
    uint64_t v39 = v84;
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v84 + 56);
    v40(v9, 1, 1, v0);
  }
  sub_1000AA798((uint64_t)v9, (uint64_t)v12);
  id v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  if (v41(v12, 1, v0))
  {
    sub_1000BFE50((uint64_t)v12);
    uint64_t v42 = (void *)0xE200000000000000;
    uint64_t v43 = 15932;
  }
  else
  {
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    uint64_t v80 = v36;
    uint64_t v45 = v81;
    v44(v81, v12, v0);
    sub_1000BFE50((uint64_t)v12);
    id v46 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v48 = [v46 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v49 = v39;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v50;

    uint64_t v51 = v45;
    uint64_t v36 = v80;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v0);
  }
  v52._uint64_t countAndFlagsBits = v43;
  v52._object = v42;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v53._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v53);
  id v54 = v85;
  id v55 = [v85 modificationDate];
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v57 = (uint64_t)v83;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v58 = 1;
    uint64_t v57 = (uint64_t)v83;
  }
  uint64_t v59 = v84;
  v40((char *)v57, v58, 1, v0);
  sub_1000AA798(v57, (uint64_t)v6);
  if (v41(v6, 1, v0))
  {
    sub_1000BFE50((uint64_t)v6);
    uint64_t v60 = (void *)0xE200000000000000;
    uint64_t v61 = 15932;
  }
  else
  {
    uint64_t v62 = v81;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v81, v6, v0);
    sub_1000BFE50((uint64_t)v6);
    uint64_t v63 = self;
    Class v64 = Date._bridgeToObjectiveC()().super.isa;
    id v65 = [v63 localizedStringFromDate:v64 dateStyle:2 timeStyle:2];

    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v59;
    uint64_t v60 = v67;

    (*(void (**)(char *, uint64_t))(v66 + 8))(v62, v0);
  }
  v68._uint64_t countAndFlagsBits = v61;
  v68._object = v60;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v69._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v69._object = (void *)0xEF203A7962206465;
  String.append(_:)(v69);
  id v70 = [v54 modifiedByDevice];
  if (v70)
  {
    uint64_t v71 = v70;
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v74 = v73;
  }
  else
  {
    uint64_t v74 = (void *)0xE200000000000000;
    uint64_t v72 = 15932;
  }
  v75._uint64_t countAndFlagsBits = v72;
  v75._object = v74;
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  uint64_t v76 = v86[0];
  uint64_t v77 = (void *)v86[1];
  v86[0] = v82;
  v86[1] = v36;
  swift_bridgeObjectRetain();
  v78._uint64_t countAndFlagsBits = v76;
  v78._object = v77;
  String.append(_:)(v78);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v86[0];
}

uint64_t sub_1000BDFC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v4 - 8);
  uint64_t v61 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v65 = (char *)&v56 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v64 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v62 = (char *)&v56 - v12;
  uint64_t v13 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v13 - 8);
  int v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    goto LABEL_33;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v15, v16);
  if (CKRecord.recordType.getter() == 0x654B72657473614DLL && v18 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      sub_1000BFD80();
      swift_allocError();
      *uint64_t v26 = 0;
      swift_willThrow();
LABEL_22:

      return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
    }
  }
  id v20 = [a1 encryptedValues];
  uint64_t v21 = a2;
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v20 objectForKeyedSubscript:v22];

  a2 = v21;
  if (!v23 || (id v68 = v23, sub_1000AA024(&qword_1002629D0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_19:
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_1001CFDB0;
    *(void *)(v48 + 56) = sub_1000AA854();
    *(void *)(v48 + 64) = sub_1000C0ACC((unint64_t *)&qword_100261A40, (void (*)(uint64_t))sub_1000AA854);
    *(void *)(v48 + 32) = a1;
    id v49 = a1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000BFD80();
    swift_allocError();
    *uint64_t v50 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_22;
  }
  unint64_t v24 = v67;
  switch(v67 >> 62)
  {
    case 1uLL:
      LODWORD(v25) = HIDWORD(v66) - v66;
      if (__OFSUB__(HIDWORD(v66), v66))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        JUMPOUT(0x1000BE808);
      }
      uint64_t v25 = (int)v25;
LABEL_14:
      if (v25 != 33)
      {
LABEL_18:
        sub_1000AA8F0(v66, v67);
        goto LABEL_19;
      }
      id v59 = v20;
      uint64_t v30 = v66;
      uint64_t v60 = (int *)type metadata accessor for LegacyAccountMagicKeysRecord();
      uint64_t v31 = (uint64_t *)(v21 + v60[5]);
      *uint64_t v31 = v30;
      v31[1] = v24;
      id v32 = objc_allocWithZone((Class)NSKeyedArchiver);
      unint64_t v33 = v24;
      id v34 = v32;
      uint64_t v57 = v30;
      unint64_t v58 = v33;
      sub_1000AA680(v30, v33);
      id v35 = [v34 initRequiringSecureCoding:1];
      [a1 encodeSystemFieldsWithCoder:v35];
      [v35 finishEncoding];
      id v36 = [v35 encodedData];
      uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      uint64_t v40 = (uint64_t *)(v21 + v60[6]);
      *uint64_t v40 = v37;
      v40[1] = v39;
      id v41 = [a1 modificationDate];
      if (!v41)
      {
        uint64_t v44 = v63;
        uint64_t v43 = v64;
        uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
        v56((uint64_t)v65, 1, 1, v64);
LABEL_24:
        id v52 = [a1 creationDate];
        id v47 = v62;
        if (v52)
        {
          Swift::String v53 = v52;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v54 = *(void (**)(void))(v44 + 32);
          uint64_t v55 = (uint64_t)v61;
          v54();
          v56(v55, 0, 1, v43);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v55, 1, v43) != 1)
          {
            swift_unknownObjectRelease();

            sub_1000AA8F0(v57, v58);
            ((void (*)(char *, uint64_t, uint64_t))v54)(v47, v55, v43);
LABEL_29:
            sub_1000BFE50((uint64_t)v65);
            uint64_t v45 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32);
            return v45(v21 + v60[7], v47, v43);
          }
        }
        else
        {
          uint64_t v55 = (uint64_t)v61;
          v56((uint64_t)v61, 1, 1, v43);
        }
        static Date.now.getter();

        sub_1000AA8F0(v57, v58);
        swift_unknownObjectRelease();
        sub_1000BFE50(v55);
        goto LABEL_29;
      }
      uint64_t v42 = v41;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v44 = v63;
      uint64_t v43 = v64;
      uint64_t v45 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v63 + 32);
      uint64_t v46 = (uint64_t)v65;
      v45((uint64_t)v65, v10, v64);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56);
      v56(v46, 0, 1, v43);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v46, 1, v43) == 1) {
        goto LABEL_24;
      }
      swift_unknownObjectRelease();

      sub_1000AA8F0(v57, v58);
      id v47 = v62;
      v45((uint64_t)v62, v65, v43);
      return v45(v21 + v60[7], v47, v43);
    case 2uLL:
      uint64_t v28 = *(void *)(v66 + 16);
      uint64_t v27 = *(void *)(v66 + 24);
      BOOL v29 = __OFSUB__(v27, v28);
      uint64_t v25 = v27 - v28;
      if (!v29) {
        goto LABEL_14;
      }
      goto LABEL_32;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v25 = BYTE6(v67);
      goto LABEL_14;
  }
}

uint64_t sub_1000BE818@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v4 - 8);
  Swift::String v75 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v79 = (char *)&v68 - v7;
  __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v68 - v9;
  uint64_t v10 = type metadata accessor for Date();
  id v85 = *(void **)(v10 - 8);
  uint64_t v86 = v10;
  __chkstk_darwin(v10);
  Swift::String v78 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v80 = (char *)&v68 - v13;
  uint64_t v14 = sub_1000AA024(&qword_1002621E0);
  uint64_t v83 = *(void *)(v14 - 8);
  uint64_t v84 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v17 - 8);
  char v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v20 = (int *)type metadata accessor for LegacyAccountMagicKeysRecord();
  __chkstk_darwin(v20);
  uint64_t v76 = (uint64_t)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v77 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v68 - v23);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v68 - v25;
  UUID.init(uuidString:)();
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v27);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v19, v27);
    uint64_t v30 = a1[3];
    uint64_t v87 = a1;
    sub_1000ABF58(a1, v30);
    sub_1000C09B8();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    if (v2)
    {
      sub_1000ABFF0((uint64_t)v87);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    }
    char v89 = 1;
    sub_1000AC040();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v26[v20[5]] = *(_OWORD *)v88;
    char v89 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v31 = (uint64_t)v88[1];
    id v32 = (uint64_t *)&v26[v20[6]];
    unint64_t v73 = (unint64_t)v88[1];
    uint64_t v74 = (uint64_t)v88[0];
    uint64_t *v32 = (uint64_t)v88[0];
    v32[1] = v31;
    uint64_t v71 = v32;
    uint64_t v72 = &v26[v20[7]];
    static Date.now.getter();
    LOBYTE(v88[0]) = 3;
    sub_1000C0ACC(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t v33 = v16;
    id v34 = v82;
    uint64_t v35 = v86;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v37 = v73;
    uint64_t v36 = v74;
    id v70 = v33;
    uint64_t v38 = v85;
    uint64_t v39 = (unsigned int (*)(char *, uint64_t, uint64_t))v85[6];
    if (v39(v34, 1, v35) != 1)
    {
      (*(void (**)(char *, uint64_t))(v83 + 8))(v70, v84);
      uint64_t v50 = v80;
      ((void (*)(char *, char *, uint64_t))v38[4])(v80, v34, v35);
      uint64_t v51 = (uint64_t)v87;
      uint64_t v55 = v35;
      uint64_t v53 = v81;
      id v54 = v72;
LABEL_22:
      ((void (*)(char *, char *, uint64_t))v38[5])(v54, v50, v55);
      sub_1000C0A0C((uint64_t)v26, v53);
      sub_1000ABFF0(v51);
      return sub_1000C0A70((uint64_t)v26);
    }
    uint64_t v40 = v36;
    sub_1000AA680(v36, v37);
    Class isa = sub_100130420(v36, v37);
    sub_1000AA8F0(v40, v37);
    uint64_t v42 = v77;
    sub_1000C0A0C((uint64_t)v26, (uint64_t)v77);
    if (!isa) {
      Class isa = sub_1000B4758((uint64_t)v42).super.isa;
    }
    sub_1000C0A70((uint64_t)v42);
    uint64_t v77 = v39;
    v88[0] = isa;
    sub_1000BF1F4(v88);
    id v43 = [isa modificationDate];

    if (v43)
    {
      uint64_t v44 = v78;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v45 = v35;
      uint64_t v46 = v85;
      id v47 = (void (*)(uint64_t, char *, uint64_t))v85[4];
      uint64_t v48 = (uint64_t)v79;
      v47((uint64_t)v79, v44, v45);
      id v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v46[7];
      v49(v48, 0, 1, v45);
      if (v77((char *)v48, 1, v45) != 1)
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v70, v84);
        uint64_t v50 = v80;
        v47((uint64_t)v80, v79, v86);
        uint64_t v51 = (uint64_t)v87;
        uint64_t v38 = v85;
        uint64_t v53 = v81;
        uint64_t v52 = (uint64_t)v82;
        id v54 = v72;
LABEL_21:
        sub_1000BFE50(v52);
        uint64_t v55 = v86;
        goto LABEL_22;
      }
    }
    else
    {
      id v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v85[7];
      v49((uint64_t)v79, 1, 1, v35);
    }
    uint64_t v57 = *v71;
    unint64_t v58 = v71[1];
    sub_1000AA680(*v71, v58);
    id v59 = sub_100130420(v57, v58);
    sub_1000AA8F0(v57, v58);
    uint64_t v60 = v76;
    sub_1000C0A0C((uint64_t)v26, v76);
    if (!v59) {
      id v59 = sub_1000B4758(v60).super.isa;
    }
    sub_1000C0A70(v60);
    v88[0] = v59;
    sub_1000BF1F4(v88);
    id v61 = [v59 creationDate];

    uint64_t v51 = (uint64_t)v87;
    if (v61)
    {
      uint64_t v62 = v78;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v63 = (void (*)(char *, char *, uint64_t))v85[4];
      uint64_t v64 = (uint64_t)v75;
      id v65 = v62;
      uint64_t v66 = v86;
      v63(v75, v65, v86);
      v49(v64, 0, 1, v66);
      unsigned int v67 = v77((char *)v64, 1, v66);
      uint64_t v53 = v81;
      if (v67 != 1)
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v70, v84);
        uint64_t v50 = v80;
        v63(v80, (char *)v64, v86);
LABEL_20:
        uint64_t v52 = (uint64_t)v82;
        id v54 = v72;
        sub_1000BFE50((uint64_t)v79);
        uint64_t v38 = v85;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v64 = (uint64_t)v75;
      v49((uint64_t)v75, 1, 1, v86);
      uint64_t v53 = v81;
    }
    uint64_t v50 = v80;
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v70, v84);
    sub_1000BFE50(v64);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BF1F4(id *a1)
{
  id v2 = [*a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for LegacyAccountMagicKeysRecord() + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_1000AA680(*v3, v5);
  if (v13 >> 60 == 15)
  {
    sub_1000BFEB0(v12, v13);
    sub_1000BFEB0(v4, v5);
  }
  else
  {
    sub_1000BFEC4(v12, v13);
    char v6 = sub_1000E4B6C(v12, v13, v4, v5);
    sub_1000AA8F0(v4, v5);
    sub_1000BFEB0(v12, v13);
    sub_1000BFEB0(v12, v13);
    if (v6) {
      return swift_unknownObjectRelease();
    }
  }
  static os_log_type_t.info.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001CFDB0;
  uint64_t v8 = Data.hexString.getter(v4, v5);
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000AA5E0();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000AA680(v4, v5);
  CKRecordKeyValueSetting.subscript.setter();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000BF438(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AA024((uint64_t *)&unk_1002621F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000ABF58(a1, a1[3]);
  sub_1000C09B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_1000C0ACC(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for LegacyAccountMagicKeysRecord();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v9 + 20));
    char v12 = 1;
    sub_1000AC094();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    char v12 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for Date();
    sub_1000C0ACC(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000BF6C4()
{
  unint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x4B746E756F636361;
      break;
    case 2:
      unint64_t result = 0x74654D64756F6C63;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000BF774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000C0D20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000BF79C(uint64_t a1)
{
  unint64_t v2 = sub_1000C09B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BF7D8(uint64_t a1)
{
  unint64_t v2 = sub_1000C09B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BF814()
{
  return 0x654B72657473614DLL;
}

unint64_t sub_1000BF830()
{
  return 0xD000000000000022;
}

uint64_t sub_1000BF84C(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 24);
  uint64_t v3 = *(void *)v2;
  sub_1000AA680(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

Swift::Int sub_1000BF88C(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000C0ACC((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_1000AA680(*v3, v5);
  Data.hash(into:)();
  sub_1000AA8F0(v4, v5);
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_1000AA680(*v6, v8);
  Data.hash(into:)();
  sub_1000AA8F0(v7, v8);
  type metadata accessor for Date();
  sub_1000C0ACC(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000BF9E0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  sub_1000C0ACC((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  sub_1000AA680(*v4, v6);
  Data.hash(into:)();
  sub_1000AA8F0(v5, v6);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000AA680(*v7, v9);
  Data.hash(into:)();
  sub_1000AA8F0(v8, v9);
  type metadata accessor for Date();
  sub_1000C0ACC(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1000BFB24(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_1000C0ACC((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  sub_1000AA680(*v4, v6);
  Data.hash(into:)();
  sub_1000AA8F0(v5, v6);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000AA680(*v7, v9);
  Data.hash(into:)();
  sub_1000AA8F0(v8, v9);
  type metadata accessor for Date();
  sub_1000C0ACC(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_1000BFC74(uint64_t a1, uint64_t a2, int *a3)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (sub_1000E4B6C(*(void *)(a1 + a3[5]), *(void *)(a1 + a3[5] + 8), *(void *)(a2 + a3[5]), *(void *)(a2 + a3[5] + 8)) & 1) == 0|| (sub_1000E4B6C(*(void *)(a1 + a3[6]), *(void *)(a1 + a3[6] + 8), *(void *)(a2 + a3[6]), *(void *)(a2 + a3[6] + 8)) & 1) == 0)
  {
    return 0;
  }
  uint64_t v6 = a3[7];

  return static Date.== infix(_:_:)(a1 + v6, a2 + v6);
}

uint64_t sub_1000BFD18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

unint64_t sub_1000BFD80()
{
  unint64_t result = qword_100262108;
  if (!qword_100262108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262108);
  }
  return result;
}

uint64_t sub_1000BFDD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000BE818(a1, a2);
}

uint64_t sub_1000BFDEC(void *a1)
{
  return sub_1000BF438(a1);
}

uint64_t type metadata accessor for LegacyAccountMagicKeysRecord()
{
  uint64_t result = qword_100262178;
  if (!qword_100262178) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000BFE50(uint64_t a1)
{
  uint64_t v2 = sub_1000AA024(&qword_100261D90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BFEB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000AA8F0(a1, a2);
  }
  return a1;
}

uint64_t sub_1000BFEC4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000AA680(a1, a2);
  }
  return a1;
}

ValueMetadata *type metadata accessor for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError()
{
  return &type metadata for LegacyAccountMagicKeysRecord.LegacyAccountMagicKeysRecordError;
}

uint64_t *sub_1000BFEF0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000AA680(*v10, v12);
    *unint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    sub_1000AA680(*v15, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = a3[7];
    char v19 = (char *)a1 + v18;
    id v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t sub_1000C0040(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_1000AA8F0(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  sub_1000AA8F0(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1000C0108(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000AA680(*v9, v11);
  uint64_t *v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000AA680(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t sub_1000C0208(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000AA680(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  uint64_t *v8 = v10;
  v8[1] = v11;
  sub_1000AA8F0(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (uint64_t *)(a1 + v14);
  unint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_1000AA680(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_1000AA8F0(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

uint64_t sub_1000C0318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000C03E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_1000AA8F0(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_1000AA8F0(v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_1000C04CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C04E0);
}

uint64_t sub_1000C04E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 12)
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000C061C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C0630);
}

uint64_t sub_1000C0630(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 12)
  {
    uint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    *uint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 28);
    return v13(v15, a2, a2, v14);
  }
  return result;
}

uint64_t sub_1000C0768()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C083C(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000C0ACC(&qword_100263BB0, (void (*)(uint64_t))type metadata accessor for LegacyAccountMagicKeysRecord);
  uint64_t result = sub_1000C0ACC(&qword_1002621C0, (void (*)(uint64_t))type metadata accessor for LegacyAccountMagicKeysRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000C08C0()
{
  return sub_1000C0ACC(&qword_1002621C8, (void (*)(uint64_t))type metadata accessor for LegacyAccountMagicKeysRecord);
}

uint64_t sub_1000C0908(uint64_t a1)
{
  uint64_t result = sub_1000C0ACC(&qword_1002621D0, (void (*)(uint64_t))type metadata accessor for LegacyAccountMagicKeysRecord);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

unint64_t sub_1000C0964()
{
  unint64_t result = qword_1002621D8;
  if (!qword_1002621D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002621D8);
  }
  return result;
}

unint64_t sub_1000C09B8()
{
  unint64_t result = qword_1002621E8;
  if (!qword_1002621E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002621E8);
  }
  return result;
}

uint64_t sub_1000C0A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyAccountMagicKeysRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C0A70(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LegacyAccountMagicKeysRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C0ACC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s15audioaccessoryd28LegacyAccountMagicKeysRecordV33LegacyAccountMagicKeysRecordErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C0BE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyAccountMagicKeysRecord.CodingKeys()
{
  return &type metadata for LegacyAccountMagicKeysRecord.CodingKeys;
}

unint64_t sub_1000C0C1C()
{
  unint64_t result = qword_100262210;
  if (!qword_100262210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262210);
  }
  return result;
}

unint64_t sub_1000C0C74()
{
  unint64_t result = qword_100262218;
  if (!qword_100262218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262218);
  }
  return result;
}

unint64_t sub_1000C0CCC()
{
  unint64_t result = qword_100262220;
  if (!qword_100262220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262220);
  }
  return result;
}

uint64_t sub_1000C0D20(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B746E756F636361 && a2 == 0xEF626F6C42737965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000C1244(uint64_t a1)
{
  uint64_t v2 = sub_1000AA024(&qword_1002631A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000C12A4(const char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &description[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v10 = &v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  *(void *)&v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction] = 0;
  *(void *)&v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity] = 0;
  uint64_t v11 = &v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState];
  uint64_t v12 = (objc_class *)type metadata accessor for BTUserTransaction();
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  v51.receiver = v3;
  v51.super_class = v12;
  uint64_t v13 = (char *)[super init];
  uint64_t v16 = v13;
  HIDWORD(v4_Block_object_dispose(&STACK[0x290], 8) = a3;
  if (a3)
  {
    unint64_t v14 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v14) = a1 >> 11;
      if (a1 >> 11 == 27) {
        goto LABEL_45;
      }
      LODWORD(v14) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) != 0) {
          goto LABEL_34;
        }
        if (a1 <= 0xFF)
        {
          unsigned int v18 = ((_BYTE)a1 + 1);
          goto LABEL_10;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v17 = v13;
  while (1)
  {
    *(void *)description = static String._fromUTF8Repairing(_:)();
    uint64_t v50 = v20;
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = 46;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    a3 = *(uint64_t **)description;
    uint64_t v22 = v50;
    UUID.init()();
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v25 = v24;
    uint64_t v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v7 += 8;
    v26(v9, v6);
    *(void *)description = a3;
    uint64_t v50 = v22;
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = v23;
    v27._object = v25;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = v50;
    BOOL v29 = &v16[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name];
    uint64_t v9 = *(char **)&v16[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_name + 8];
    *(void *)BOOL v29 = *(void *)description;
    *((void *)v29 + 1) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = os_transaction_create();
    swift_release();
    *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction] = v6;
    swift_unknownObjectRelease();
    LODWORD(v14) = HIDWORD(v48);
    if ((v48 & 0x100000000) == 0) {
      break;
    }
    unint64_t v14 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v14) = a1 >> 11;
      if (a1 >> 11 == 27) {
        goto LABEL_46;
      }
      LODWORD(v14) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) == 0)
        {
          a3 = &qword_100262000;
          if (a1 <= 0xFF)
          {
            unsigned int v31 = ((_BYTE)a1 + 1);
            goto LABEL_22;
          }
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
LABEL_42:
        int v15 = (a1 & 0x3F) << 8;
        a3 = &qword_100262000;
        if (a1 < 0x800)
        {
          unsigned int v31 = (v15 | (a1 >> 6)) + 33217;
          goto LABEL_22;
        }
        goto LABEL_48;
      }
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    int v42 = (a1 & 0x3F) << 8;
    unsigned int v43 = (v42 | (a1 >> 6)) + 33217;
    unsigned int v44 = (v42 | (a1 >> 6) & 0x3F) << 8;
    unsigned int v45 = (((v44 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    unsigned int v46 = (v44 | (a1 >> 12)) + 8487393;
    if (v14) {
      unsigned int v18 = v45;
    }
    else {
      unsigned int v18 = v46;
    }
    if (a1 < 0x800) {
      unsigned int v18 = v43;
    }
LABEL_10:
    *(void *)description = (v18 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v18) >> 3)) & 7)));
    uint64_t v19 = v16;
  }
  if (!a1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (qword_1002618A8 != -1) {
    swift_once();
  }
  os_activity_t v30 = _os_activity_create((void *)&_mh_execute_header, a1, (os_activity_t)qword_100262820, OS_ACTIVITY_FLAG_DEFAULT);
  a3 = &qword_100262000;
  while (1)
  {
    uint64_t v32 = OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity;
    *(void *)&v16[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingActivity] = v30;
    swift_unknownObjectRelease();
    if (*(void *)&v16[v32]) {
      break;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    unsigned int v47 = (v15 | (a1 >> 6) & 0x3F) << 8;
    if (v14) {
      unsigned int v31 = (((v47 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    }
    else {
      unsigned int v31 = (v47 | (a1 >> 12)) + 8487393;
    }
LABEL_22:
    *(void *)description = (v31 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v31) & 0x38)) & 0x38));
    if (qword_1002618A8 != -1) {
      swift_once();
    }
    os_activity_t v30 = _os_activity_create((void *)&_mh_execute_header, description, (os_activity_t)qword_100262820, OS_ACTIVITY_FLAG_DEFAULT);
  }
  unint64_t v33 = (os_activity_scope_state_s *)&v16[a3[71]];
  swift_beginAccess();
  id v34 = swift_unknownObjectRetain();
  os_activity_scope_enter(v34, v33);
  swift_endAccess();
  swift_unknownObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_100261968 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1001CFDB0;
  uint64_t v36 = v16;
  id v37 = [v36 description];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  *(void *)(v35 + 56) = &type metadata for String;
  *(void *)(v35 + 64) = sub_1000AA5E0();
  *(void *)(v35 + 32) = v38;
  *(void *)(v35 + 40) = v40;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  return v36;
}

void static BTUserTransaction.named(_:with:)(const char *a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  id v8 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
  uint64_t v9 = sub_1000C12A4(a1, a2, a3);
  a4();
}

{
  id v8;
  char *v9;

  id v8 = objc_allocWithZone((Class)type metadata accessor for BTUserTransaction());
  uint64_t v9 = sub_1000C12A4(a1, a2, a3);
  a4();
}

uint64_t type metadata accessor for BTUserTransaction()
{
  return self;
}

id BTUserTransaction.__deallocating_deinit()
{
  uint64_t v1 = OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction;
  if (*(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_underlyingTransaction])
  {
    static os_log_type_t.default.getter();
    if (qword_100261968 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1001CFDB0;
    int v3 = v0;
    id v4 = [v3 description];
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_1000AA5E0();
    *(void *)(v2 + 32) = v5;
    *(void *)(v2 + 40) = v7;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v8 = (os_activity_scope_state_s *)&v3[OBJC_IVAR____TtC15audioaccessoryd17BTUserTransaction_activityState];
    swift_beginAccess();
    os_activity_scope_leave(v8);
    swift_endAccess();
    *(void *)&v0[v1] = 0;
    swift_unknownObjectRelease();
  }
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for BTUserTransaction();
  return [super dealloc];
}

void BTUserTransaction.init()()
{
}

uint64_t BTUserTransaction.description.getter()
{
  swift_bridgeObjectRetain();
  sub_1000AA024(&qword_1002632D0);
  v0._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0x3A4E58545BLL;
}

uint64_t sub_1000C1DAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_1000C1DC4()
{
  return 1;
}

Swift::Int sub_1000C1DCC()
{
  return Hasher._finalize()();
}

void sub_1000C1E10()
{
}

Swift::Int sub_1000C1E38()
{
  return Hasher._finalize()();
}

const char *sub_1000C1E78()
{
  return "AudioAccessoryFeatures";
}

const char *sub_1000C1E8C()
{
  return "AADeviceRecordCloudSync";
}

void sub_1000C1EA0()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for DeviceManager()) init];
  sub_1000C2E48();
  qword_10026AB80 = (uint64_t)v0;
}

unint64_t sub_1000C1F3C(char a1)
{
  switch(a1)
  {
    case 1:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v4;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x290], 8) = 0x2064696C61766E49;
      unint64_t v3 = 0xEE0064726F636572;
      break;
    case 2:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v5;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x290], 8) = 0xD000000000000015;
      uint64_t v6 = "Record already exists";
      goto LABEL_7;
    case 3:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v7;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x290], 8) = 0xD000000000000010;
      uint64_t v6 = "Record not found";
      goto LABEL_7;
    case 4:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v8;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x290], 8) = 0xD000000000000017;
      uint64_t v6 = "Feature not implemented";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v2;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x290], 8) = 0x206E776F6E6B6E55;
      unint64_t v3 = 0xED0000726F727265;
      break;
  }
  *(void *)(inited + 56) = v3;
  return sub_1000AF7C0(inited);
}

unint64_t sub_1000C21A8()
{
  return sub_1000C1F3C(*v0);
}

uint64_t sub_1000C21B0(uint64_t a1)
{
  unint64_t v2 = sub_1000D90E0();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000C21EC(uint64_t a1)
{
  unint64_t v2 = sub_1000D90E0();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000C2280()
{
  Swift::String v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore;
  if (*(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore])
  {
    uint64_t v6 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore];
  }
  else
  {
    type metadata accessor for DeviceStore();
    sub_10013ACBC((uint64_t)v4);
    uint64_t v7 = *(void **)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
    swift_allocObject();
    id v8 = v7;
    uint64_t v9 = v0;
    uint64_t v6 = sub_1001968B4((uint64_t)v0, (uint64_t)&off_100236CA0, (uint64_t)v4, v8);

    *(void *)&v1[v5] = v6;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v6;
}

char *sub_1000C2470()
{
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v20);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_pushService] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = 0;
  *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher] = 0;
  uint64_t v21 = OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue;
  void v19[2] = sub_1000B66A0(0, (unint64_t *)&qword_100263210);
  unsigned int v23 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v22 = *(void (**)(char *))(v2 + 104);
  v22(v4);
  uint64_t v5 = v0;
  static DispatchQoS.unspecified.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&unk_100263C90, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v19[1] = sub_1000AA024((uint64_t *)&unk_100263220);
  sub_1000D8D38((unint64_t *)&qword_100263CA0, (uint64_t *)&unk_100263220);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v21] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v5[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager____lazy_storage___deviceStore] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  ((void (*)(char *, void, uint64_t))v22)(v4, v23, v24);
  static DispatchQoS.unspecified.getter();
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v5[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  uint64_t v6 = (objc_class *)type metadata accessor for DeviceManager();
  v31.receiver = v5;
  v31.super_class = v6;
  uint64_t v7 = (char *)[super init];
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  if (qword_100261888 != -1) {
    swift_once();
  }
  id v8 = (void *)static DarwinNotificationManager.shared;
  uint64_t v9 = static OS_dispatch_queue.main.getter();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  BOOL v29 = sub_1000D8DC0;
  uint64_t v30 = v10;
  aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  Swift::String v27 = sub_1000D9AC4;
  uint64_t v28 = &unk_100238740;
  uint64_t v11 = _Block_copy(&aBlock);
  id v12 = v8;
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v9, v11);
  _Block_release(v11);

  uint64_t v13 = self;
  LODWORD(v11) = [v13 isBuddyComplete];
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if (v11)
  {
    sub_1000C2E48();
    unint64_t v14 = v7;
  }
  else
  {
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    BOOL v29 = sub_1000D8DC8;
    uint64_t v30 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    Swift::String v27 = sub_100106F90;
    uint64_t v28 = &unk_100238768;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_release();
    id v17 = [v13 addBuddyCompleteObserver:v16];

    _Block_release(v16);
    unint64_t v14 = *(void **)&v7[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher];
    *(void *)&v7[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = v17;
  }

  return v7;
}

void sub_1000C2ABC()
{
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001CFDB0;
  unsigned __int8 v1 = [self isBuddyComplete];
  *(void *)(v0 + 56) = &type metadata for Bool;
  *(void *)(v0 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v0 + 32) = v1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1000C2E48();
  }
  swift_beginAccess();
  uint64_t v4 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v4)
  {
    uint64_t v5 = *(void **)&v4[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher];
    *(void *)&v4[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_buddyStateWatcher] = 0;
  }
}

id sub_1000C2C3C()
{
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceManager();
  return [super dealloc];
}

void sub_1000C2E48()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = self;
  if ([v9 isFirstUnlocked])
  {
    uint64_t v20 = v2;
    uint64_t v21 = v5;
    uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
    uint64_t v11 = swift_allocObject();
    swift_unknownObjectWeakInit();
    Swift::String v27 = sub_1000D8B80;
    uint64_t v28 = v11;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    uint64_t v25 = sub_100106F90;
    uint64_t v26 = &unk_1002382E0;
    uint64_t v12 = v6;
    uint64_t v13 = _Block_copy(&aBlock);
    id v14 = v10;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v21);
    swift_release();
    swift_release();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    Swift::String v27 = sub_1000D8B78;
    uint64_t v28 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v24 = 1107296256;
    uint64_t v25 = sub_100106F90;
    uint64_t v26 = &unk_1002382B8;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_release();
    id v17 = [v9 addFirstUnlockObserver:v16];
    _Block_release(v16);
    unsigned int v18 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher);
    *(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher) = v17;
  }
}

void sub_1000C327C()
{
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_1000C2E48();
  }
  swift_beginAccess();
  uint64_t v2 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v2)
  {
    uint64_t v3 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher];
    *(void *)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_firstUnlockStateWatcher] = 0;
  }
}

uint64_t sub_1000C3370()
{
  uint64_t v0 = type metadata accessor for CloudCoordinatorConfiguration();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    sub_1000C2280();
    static os_log_type_t.default.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10015F534((unint64_t)v2);
    sub_1000D737C((uint64_t)v2);
    sub_1000D8B88((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for CloudCoordinatorConfiguration);
    sub_100160454();
    sub_100108B28();

    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000C34D0()
{
  return sub_1000C6AA4((uint64_t)sub_1000D8B70, (uint64_t)&unk_100238290);
}

uint64_t sub_1000C34F0()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v2 = sub_1000C2280();
    static os_log_type_t.default.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100160454();
    sub_100125330(v2);

    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000C368C()
{
  return sub_1000C6AA4((uint64_t)sub_1000D8B68, (uint64_t)&unk_100238268);
}

uint64_t sub_1000C36AC()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100263BA0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for LegacyMagicPairingSettingsRecords();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  static os_log_type_t.default.getter();
  if (Strong)
  {
    uint64_t v24 = v6;
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1000C2280();
    id v26 = self;
    unsigned int v12 = [v26 isFirstUnlocked];
    uint64_t v25 = v4;
    if (v12)
    {
      sub_10015F0D4();
      if (qword_100261850 != -1) {
        swift_once();
      }
      uint64_t v13 = sub_1000AA0CC(v7, (uint64_t)qword_10026AAE0);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
      id v14 = sub_10015CF90((uint64_t)v10);
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      id v14 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    swift_release();
    sub_10013B124((uint64_t)v14);
    swift_bridgeObjectRelease();
    sub_1000C2280();
    if ([v26 isFirstUnlocked])
    {
      sub_10015F0D4();
      if (qword_1002618E8 != -1) {
        swift_once();
      }
      uint64_t v16 = sub_1000AA0CC(v7, (uint64_t)qword_10026AD20);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v16, v7);
      id v17 = sub_10015D000((uint64_t)v10);
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      id v17 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    swift_release();
    sub_10013B14C((uint64_t)v17);
    swift_bridgeObjectRelease();
    sub_1000C2280();
    sub_100161850((uint64_t)v2);
    swift_release();
    uint64_t v18 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v2, 1, v3) == 1)
    {
      sub_1000AA894((uint64_t)v2, (uint64_t *)&unk_100263BA0);
    }
    else
    {
      uint64_t v19 = (uint64_t)v24;
      sub_1000D8544((uint64_t)v2, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_1000AA024((uint64_t *)&unk_100263BC0);
      unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_1001CFDB0;
      sub_1000D8C04(v19, v21 + v20, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
      sub_10013B174(v21);
      swift_bridgeObjectRelease();
      sub_1000D8B88(v19, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    sub_1000C2280();
    if ([v26 isFirstUnlocked])
    {
      sub_10015F0D4();
      if (qword_100261890 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_1000AA0CC(v7, (uint64_t)qword_10026AB90);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v22, v7);
      unsigned int v23 = sub_10015D070((uint64_t)v10);
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      unsigned int v23 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    swift_release();
    sub_10013B19C((uint64_t)v23);

    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100261940 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
}

uint64_t sub_1000C3EAC(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_1002381D8, (uint64_t)sub_1000D8AB0, (uint64_t)&unk_1002381F0);
}

uint64_t sub_1000C3ED4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5 = sub_1000AA024((uint64_t *)&unk_100263A10);
  __chkstk_darwin(v5 - 8);
  uint64_t v97 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v92 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for DispatchQoS();
  uint64_t v91 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  char v90 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for BTDeferredRecord();
  uint64_t v103 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v98 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v102 = (char *)&v89 - v11;
  __chkstk_darwin(v12);
  uint64_t v104 = (char *)&v89 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v89 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v89 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v89 - v21;
  uint64_t v110 = type metadata accessor for DeviceRecord();
  uint64_t v107 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v96 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  id v26 = (char *)&v89 - v25;
  __chkstk_darwin(v27);
  uint64_t v112 = (uint64_t)&v89 - v28;
  *(void *)&long long v109 = type metadata accessor for URL();
  BOOL v29 = *(void **)(v109 - 8);
  __chkstk_darwin(v109);
  objc_super v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v100 = a2;
  uint64_t v101 = a3;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    goto LABEL_65;
  }
  while (1)
  {
    os_log(_:dso:log:_:_:)();
    unint64_t v115 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v32 = sub_1000C2280();
    unsigned int v33 = [self isFirstUnlocked];
    uint64_t v34 = (uint64_t)v104;
    if (v33)
    {
      uint64_t v106 = v32;
      sub_10015F0D4();
      if (qword_100261850 != -1) {
        swift_once();
      }
      uint64_t v35 = v109;
      uint64_t v36 = sub_1000AA0CC(v109, (uint64_t)qword_10026AAE0);
      ((void (*)(char *, uint64_t, uint64_t))v29[2])(v31, v36, v35);
      id v37 = sub_10015CF90((uint64_t)v31);
      swift_release();
      ((void (*)(char *, uint64_t))v29[1])(v31, v35);
      BOOL v29 = v37;
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      BOOL v29 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    swift_release();
    uint64_t v106 = v29[2];
    if (!v106) {
      break;
    }
    unint64_t v39 = 0;
    uint64_t v105 = (char *)v29 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
    uint64_t v99 = v29;
    while (v39 < v29[2])
    {
      sub_1000D8C04((uint64_t)&v105[*(void *)(v107 + 72) * v39], v112, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      sub_1000C2280();
      uint64_t v40 = sub_1001607FC();
      swift_release();
      uint64_t v41 = *(void *)(v40 + 16);
      if (v41)
      {
        uint64_t v42 = v103;
        uint64_t v43 = v40;
        objc_super v31 = (char *)(v40
                     + ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80)));
        *(void *)&long long v109 = v43;
        swift_bridgeObjectRetain();
        uint64_t v44 = *(void *)(v42 + 72);
        uint64_t v45 = v110;
        while (1)
        {
          sub_1000D8C04((uint64_t)v31, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          if (*((void *)v22 + 1) == 0x6552656369766544 && *((void *)v22 + 2) == 0xEC00000064726F63)
          {
            sub_1000D8C04((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            sub_1000D8C04(v112, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
          }
          else
          {
            char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_1000D8C04((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            sub_1000D8C04(v112, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
            if ((v47 & 1) == 0)
            {
              sub_1000D8B88((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
              sub_1000D8B88((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
              sub_1000D8C04((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
              goto LABEL_20;
            }
          }
          uint64_t v48 = &v19[*(int *)(v111 + 28)];
          uint64_t v49 = *(void *)v48;
          uint64_t v50 = *((void *)v48 + 1);
          objc_super v51 = &v26[*(int *)(v45 + 24)];
          if (v49 == *(void *)v51 && v50 == *((void *)v51 + 1))
          {
            sub_1000D8B88((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            sub_1000D8B88((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
            sub_1000D8C04((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_36:
            if (*v16 == 1)
            {
              swift_bridgeObjectRelease();
              sub_1000D8B88((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
              sub_1000D8B88((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_14:
              swift_bridgeObjectRelease_n();
              uint64_t v34 = (uint64_t)v104;
              BOOL v29 = v99;
              goto LABEL_15;
            }
            char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            sub_1000D8B88((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            uint64_t v45 = v110;
            sub_1000D8B88((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            if (v54) {
              goto LABEL_14;
            }
            goto LABEL_21;
          }
          char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_1000D8B88((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          sub_1000D8B88((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
          sub_1000D8C04((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          if (v53) {
            goto LABEL_36;
          }
LABEL_20:
          sub_1000D8B88((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          sub_1000D8B88((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_21:
          v31 += v44;
          if (!--v41)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v34 = (uint64_t)v104;
            BOOL v29 = v99;
            goto LABEL_41;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_41:
      objc_super v31 = (char *)sub_1000C50F4();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_15:
      ++v39;
      sub_1000D8B88(v112, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      if (v39 == v106) {
        goto LABEL_44;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
  }
LABEL_44:
  swift_bridgeObjectRelease();
  sub_1000C2280();
  uint64_t v55 = sub_1001607FC();
  swift_release();
  uint64_t v56 = *(void *)(v55 + 16);
  uint64_t v57 = v101;
  unint64_t v58 = v100;
  if (v56)
  {
    uint64_t v59 = *(unsigned __int8 *)(v103 + 80);
    uint64_t v105 = (char *)v55;
    uint64_t v60 = v55 + ((v59 + 32) & ~v59);
    uint64_t v112 = *(void *)(v103 + 72);
    v107 += 56;
    long long v109 = xmmword_1001CFDB0;
    id v61 = v102;
    do
    {
      sub_1000D8C04(v60, v34, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      if (*(void *)(v34 + 8) == 0x6552656369766544 && *(void *)(v34 + 16) == 0xEC00000064726F63)
      {
        sub_1000D8C04(v34, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      }
      else
      {
        char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_1000D8C04(v34, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
        if ((v67 & 1) == 0)
        {
          sub_1000D8B88((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          goto LABEL_47;
        }
      }
      if ((*v61 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1000D8B88((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_59:
        uint64_t v69 = v34 + *(int *)(v111 + 36);
        unint64_t v70 = *(void *)(v69 + 8);
        if (v70 >> 60 == 15)
        {
          static os_log_type_t.default.getter();
          sub_1000AA024((uint64_t *)&unk_100262110);
          uint64_t v62 = swift_allocObject();
          *(_OWORD *)(v62 + 16) = v109;
          sub_1000D8C04(v34, v98, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          uint64_t v63 = String.init<A>(describing:)();
          uint64_t v65 = v64;
          *(void *)(v62 + 56) = &type metadata for String;
          *(void *)(v62 + 64) = sub_1000AA5E0();
          *(void *)(v62 + 32) = v63;
          *(void *)(v62 + 40) = v65;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v57 = v101;
          unint64_t v58 = v100;
          id v61 = v102;
        }
        else
        {
          uint64_t v71 = *(void *)v69;
          sub_1000AA680(*(void *)v69, *(void *)(v69 + 8));
          type metadata accessor for PropertyListDecoder();
          swift_allocObject();
          PropertyListDecoder.init()();
          sub_1000D79CC((unint64_t *)&unk_100261B30, (void (*)(uint64_t))type metadata accessor for DeviceRecord);
          uint64_t v73 = (uint64_t)v97;
          uint64_t v74 = v110;
          dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
          uint64_t v106 = v71;
          swift_release();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))v107)(v73, 0, 1, v74);
          uint64_t v75 = v96;
          sub_1000D8544(v73, v96, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
          static os_log_type_t.default.getter();
          sub_1000AA024((uint64_t *)&unk_100262110);
          uint64_t v76 = swift_allocObject();
          *(_OWORD *)(v76 + 16) = v109;
          uint64_t v77 = sub_1000A56C4();
          uint64_t v79 = v78;
          *(void *)(v76 + 56) = &type metadata for String;
          *(void *)(v76 + 64) = sub_1000AA5E0();
          *(void *)(v76 + 32) = v77;
          *(void *)(v76 + 40) = v79;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          sub_1000C50F4();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_1000BFEB0(v106, v70);
          sub_1000D8B88(v75, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
          uint64_t v57 = v101;
          unint64_t v58 = v100;
          id v61 = v102;
          uint64_t v34 = (uint64_t)v104;
        }
        goto LABEL_47;
      }
      char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      sub_1000D8B88((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      if (v68) {
        goto LABEL_59;
      }
LABEL_47:
      sub_1000D8B88(v34, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      v60 += v112;
      --v56;
    }
    while (v56);
  }
  swift_bridgeObjectRelease();
  uint64_t v80 = (void *)Strong;
  uint64_t v81 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  unint64_t v82 = v115;
  uint64_t v83 = (void *)swift_allocObject();
  v83[2] = v82;
  v83[3] = v58;
  v83[4] = v57;
  aBlock[4] = sub_1000D8B2C;
  aBlock[5] = v83;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100238240;
  uint64_t v84 = _Block_copy(aBlock);
  id v85 = v81;
  swift_retain();
  uint64_t v86 = v90;
  static DispatchQoS.unspecified.getter();
  id v113 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  uint64_t v87 = v92;
  uint64_t v88 = v95;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v84);

  (*(void (**)(char *, uint64_t))(v94 + 8))(v87, v88);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v86, v93);
  return swift_release();
}

id sub_1000C50F4()
{
  type metadata accessor for DeviceRecord();
  id v0 = objc_allocWithZone((Class)BTCloudDevice);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithBluetoothAddress:v1];

  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setNickname:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setModelNumber:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  [v2 setManufacturer:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v2 setProductID:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  [v2 setVendorID:v7];

  return v2;
}

uint64_t sub_1000C5298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CEDF8(a1, a2, a3, a4, (uint64_t)&unk_1002380E8, (uint64_t)sub_1000D8820, (uint64_t)&unk_100238100);
}

uint64_t sub_1000C52C0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v82 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v80 = *(void *)(v11 - 8);
  uint64_t v81 = v11;
  __chkstk_darwin(v11);
  uint64_t v78 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v73 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000AA024((uint64_t *)&unk_100263A10);
  __chkstk_darwin(v16 - 8);
  uint64_t v77 = (uint64_t)v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DeviceRecord();
  uint64_t v83 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v75 = (uint64_t)v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v67 - v21;
  uint64_t v74 = v23;
  __chkstk_darwin(v24);
  uint64_t v76 = (uint64_t)v67 - v25;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  unint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v72 = v9;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  v67[1] = sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v26 = swift_allocObject();
  long long v68 = xmmword_1001CFDB0;
  *(_OWORD *)(v26 + 16) = xmmword_1001CFDB0;
  *(void *)(v26 + 56) = &type metadata for String;
  unint64_t v69 = sub_1000AA5E0();
  *(void *)(v26 + 64) = v69;
  *(void *)(v26 + 32) = a4;
  *(void *)(v26 + 40) = a5;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000C2280();
  if ([self isFirstUnlocked])
  {
    sub_10015F0D4();
    if (qword_100261850 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_1000AA0CC(v13, (uint64_t)qword_10026AAE0);
    uint64_t v28 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v15, v27, v13);
    BOOL v29 = sub_10015CF90((uint64_t)v15);
    swift_release();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v13);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    BOOL v29 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v31 = v71;
  uint64_t v32 = v83;
  swift_release();
  uint64_t v33 = v29[2];
  if (v33)
  {
    uint64_t v34 = (uint64_t)v29 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
    uint64_t v35 = *(void *)(v32 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000D8C04(v34, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      uint64_t v36 = &v22[*(int *)(v18 + 24)];
      BOOL v37 = *(void *)v36 == a4 && *((void *)v36 + 1) == a5;
      if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_1000D8B88((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      v34 += v35;
      if (!--v33)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = 1;
        uint64_t v32 = v83;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v39 = (uint64_t)v22;
    uint64_t v40 = v77;
    sub_1000D8544(v39, v77, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
    uint64_t v38 = 0;
    uint64_t v32 = v83;
  }
  else
  {
    uint64_t v38 = 1;
LABEL_23:
    uint64_t v40 = v77;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v40, v38, 1, v18);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v40, 1, v18) == 1)
  {
    sub_1000AA894(v40, (uint64_t *)&unk_100263A10);
    static os_log_type_t.debug.getter();
    uint64_t v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = v68;
    unint64_t v42 = v69;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = v42;
    *(void *)(v41 + 32) = a4;
    *(void *)(v41 + 40) = a5;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v43 = (void *)Strong;
    uint64_t v44 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v70;
    *(void *)(v45 + 24) = v31;
    char v90 = sub_1000D8838;
    uint64_t v91 = v45;
    aBlock = _NSConcreteStackBlock;
    uint64_t v87 = 1107296256;
    uint64_t v88 = sub_100106F90;
    uint64_t v89 = &unk_100238150;
    unsigned int v46 = _Block_copy(&aBlock);
    swift_retain();
    id v47 = v44;
    uint64_t v48 = v78;
    static DispatchQoS.unspecified.getter();
    id v85 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    uint64_t v49 = v79;
    uint64_t v50 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v49, v50);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v81);
  }
  else
  {
    uint64_t v51 = v32;
    uint64_t v52 = v76;
    sub_1000D8544(v40, v76, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
    static os_log_type_t.default.getter();
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = v68;
    uint64_t v54 = sub_1000A56C4();
    unint64_t v55 = v69;
    *(void *)(v53 + 56) = &type metadata for String;
    *(void *)(v53 + 64) = v55;
    *(void *)(v53 + 32) = v54;
    *(void *)(v53 + 40) = v56;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v57 = (void *)Strong;
    unint64_t v58 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
    uint64_t v59 = v75;
    sub_1000D8C04(v52, v75, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
    unint64_t v60 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = v70;
    *(void *)(v61 + 24) = v31;
    sub_1000D8544(v59, v61 + v60, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
    char v90 = sub_1000D8A00;
    uint64_t v91 = v61;
    aBlock = _NSConcreteStackBlock;
    uint64_t v87 = 1107296256;
    uint64_t v88 = sub_100106F90;
    uint64_t v89 = &unk_1002381A0;
    uint64_t v62 = _Block_copy(&aBlock);
    id v63 = v58;
    swift_retain();
    uint64_t v64 = v78;
    static DispatchQoS.unspecified.getter();
    id v85 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    uint64_t v65 = v79;
    uint64_t v66 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v62);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v65, v66);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v64, v81);
    sub_1000D8B88(v52, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
  }
  return swift_release();
}

uint64_t sub_1000C5E68(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  NSString v5 = *(void **)&v2[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  NSString v6 = (void *)swift_allocObject();
  void v6[2] = a1;
  v6[3] = a2;
  void v6[4] = v2;
  void v6[5] = &v15;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1000D8800;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1000D913C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106FFC;
  void aBlock[3] = &unk_1002380B0;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v5;
  swift_bridgeObjectRetain();
  uint64_t v10 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = v15;
    swift_release();
    return v13;
  }
  return result;
}

void sub_1000C5FF4(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v41 = a4;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v39 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000AA024((uint64_t *)&unk_100263A10);
  __chkstk_darwin(v9 - 8);
  uint64_t v42 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DeviceRecord();
  uint64_t v43 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v40 = (uint64_t)&v38 - v15;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  uint64_t v45 = sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v16 = swift_allocObject();
  long long v44 = xmmword_1001CFDB0;
  *(_OWORD *)(v16 + 16) = xmmword_1001CFDB0;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v46 = sub_1000AA5E0();
  *(void *)(v16 + 64) = v46;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000C2280();
  if ([self isFirstUnlocked])
  {
    sub_10015F0D4();
    if (qword_100261850 != -1) {
      swift_once();
    }
    uint64_t v17 = v6;
    uint64_t v18 = sub_1000AA0CC(v6, (uint64_t)qword_10026AAE0);
    uint64_t v19 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v8, v18, v17);
    uint64_t v20 = sub_10015CF90((uint64_t)v8);
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v17);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    uint64_t v20 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  swift_release();
  uint64_t v21 = v43;
  uint64_t v22 = v20[2];
  if (v22)
  {
    uint64_t v23 = (uint64_t)v20 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
    uint64_t v24 = *(void *)(v43 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000D8C04(v23, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      uint64_t v25 = &v13[*(int *)(v11 + 24)];
      BOOL v26 = *(void *)v25 == a1 && *((void *)v25 + 1) == a2;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_1000D8B88((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      v23 += v24;
      if (!--v22)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = v42;
    sub_1000D8544((uint64_t)v13, v42, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
    uint64_t v27 = 0;
  }
  else
  {
LABEL_19:
    uint64_t v27 = 1;
    uint64_t v28 = v42;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v28, v27, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v28, 1, v11) == 1)
  {
    sub_1000AA894(v28, (uint64_t *)&unk_100263A10);
    static os_log_type_t.debug.getter();
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = v44;
    unint64_t v30 = v46;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = v30;
    *(void *)(v29 + 32) = a1;
    *(void *)(v29 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = v40;
    sub_1000D8544(v28, v40, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
    static os_log_type_t.default.getter();
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = v44;
    uint64_t v33 = sub_1000A56C4();
    unint64_t v34 = v46;
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = v34;
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 40) = v35;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v36 = sub_1000C50F4();
    sub_1000D8B88(v31, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
    BOOL v37 = *v41;
    *uint64_t v41 = v36;
  }
}

uint64_t sub_1000C66AC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_1000D8788;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100238038;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v10;
  swift_retain();
  id v15 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_1000C69A4(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (void *)result;
    sub_1000C2280();
    sub_100171B60(a2);

    return swift_release();
  }
  return result;
}

uint64_t sub_1000C6A84()
{
  return sub_1000C6AA4((uint64_t)sub_1000D8740, (uint64_t)&unk_100237FE8);
}

uint64_t sub_1000C6AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = a1;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_1000C6D68()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1000C2280();
    sub_100171F28();

    return swift_release();
  }
  return result;
}

uint64_t sub_1000C6E18(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_100237FA8, (uint64_t)sub_1000D8734, (uint64_t)&unk_100237FC0);
}

void sub_1000C6E40(uint64_t a1, void (*a2)(uint64_t, unint64_t))
{
  uint64_t v3 = sub_1000AA024(&qword_1002623C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LegacyAccountMagicKeysRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    sub_1000C2280();
    sub_10015F1F8((uint64_t)v5);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_1000AA894((uint64_t)v5, &qword_1002623C0);
      a2(0, 0xF000000000000000);
    }
    else
    {
      sub_1000D8544((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
      uint64_t v12 = (uint64_t *)&v9[*(int *)(v6 + 20)];
      uint64_t v13 = *v12;
      unint64_t v14 = v12[1];
      sub_1000AA680(*v12, v14);
      a2(v13, v14);

      sub_1000AA8F0(v13, v14);
      sub_1000D8B88((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
    }
  }
  else
  {
    a2(0, 0xF000000000000000);
  }
}

uint64_t sub_1000C709C(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

void sub_1000C7130(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t sub_1000C719C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05A4(a1, a2, a3, (uint64_t)&unk_100237EB8, (uint64_t)sub_1000D8628, (uint64_t)&unk_100237ED0);
}

uint64_t sub_1000C71C4(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v38 = 0;
    a2();
    return swift_errorRelease();
  }
  uint64_t v59 = v14;
  unint64_t v60 = (char *)Strong;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v52 = v12;
  uint64_t v53 = v10;
  uint64_t v54 = v11;
  uint64_t v55 = v8;
  uint64_t v56 = v7;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1001D0A20;
  id v17 = [a4 bluetoothAddress];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000AA5E0();
  *(void *)(v16 + 64) = v21;
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  id v22 = a4;
  id v23 = [v22 description];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v21;
  *(void *)(v16 + 72) = v24;
  *(void *)(v16 + 80) = v26;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v27 = [v22 bluetoothAddress];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v29;

  swift_bridgeObjectRelease();
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v32 = v59;
  uint64_t v33 = v60;
  if (!v31) {
    goto LABEL_12;
  }
  id v34 = [v22 bluetoothAddress];
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  if (v35 == 0xD000000000000011 && v37 == 0x80000001001F75A0)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v41 = *(void **)&v33[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v42 = (void *)swift_allocObject();
    uint64_t v43 = (uint64_t)v57;
    uint64_t v44 = v58;
    void v42[2] = v22;
    v42[3] = v43;
    void v42[4] = v44;
    aBlock[4] = sub_1000D8678;
    aBlock[5] = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100106F90;
    void aBlock[3] = &unk_100237F20;
    uint64_t v45 = _Block_copy(aBlock);
    id v46 = v22;
    id v47 = v41;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v61 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    uint64_t v48 = v53;
    uint64_t v49 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v32, v54);
    return swift_release();
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v40) {
    goto LABEL_12;
  }
  uint64_t v50 = sub_1000C2280();
  swift_unknownObjectWeakInit();
  uint64_t v51 = v58;
  swift_retain();
  sub_1001975C8(v22, v50, (uint64_t)aBlock, (uint64_t)v57, v51);
  swift_release();

  swift_release();
  return swift_unknownObjectWeakDestroy();
}

uint64_t sub_1000C776C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_100237F58, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237F70);
}

uint64_t sub_1000C77C8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05A4(a1, a2, a3, (uint64_t)&unk_100237DC8, (uint64_t)sub_1000D85B8, (uint64_t)&unk_100237DE0);
}

uint64_t sub_1000C77F0(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v26 = 0;
    a2();
    return swift_errorRelease();
  }
  uint64_t v16 = (char *)Strong;
  uint64_t v44 = v11;
  uint64_t v45 = v8;
  id v46 = a2;
  uint64_t v47 = a3;
  id v17 = [a4 bluetoothAddress];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    id v22 = [a4 bluetoothAddress];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    if (v23 == 0xD000000000000011 && v25 == 0x80000001001F75A0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        static os_log_type_t.default.getter();
        if (qword_100261940 != -1) {
          swift_once();
        }
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1001CFDB0;
        id v37 = a4;
        id v38 = [v37 description];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        *(void *)(v36 + 56) = &type metadata for String;
        *(void *)(v36 + 64) = sub_1000AA5E0();
        *(void *)(v36 + 32) = v39;
        *(void *)(v36 + 40) = v41;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v42 = sub_1000C2280();
        swift_unknownObjectWeakInit();
        uint64_t v43 = v47;
        swift_retain();
        sub_100197640(v37, v42, (uint64_t)aBlock, (uint64_t)v46, v43);
        swift_release();

        swift_unknownObjectWeakDestroy();
        return swift_release();
      }
    }
  }
  unint64_t v29 = *(void **)&v16[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  unint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = (uint64_t)v46;
  uint64_t v32 = v47;
  void v30[2] = a4;
  v30[3] = v31;
  v30[4] = v32;
  aBlock[4] = sub_1000D93F8;
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237E30;
  uint64_t v33 = _Block_copy(aBlock);
  id v34 = v29;
  id v35 = a4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v44);
  return swift_release();
}

uint64_t sub_1000C7D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_100237E68, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237E80);
}

uint64_t sub_1000C7DA0(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

uint64_t sub_1000C7E48(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05A4(a1, a2, a3, (uint64_t)&unk_100237CD8, (uint64_t)sub_1000D84F8, (uint64_t)&unk_100237CF0);
}

uint64_t sub_1000C7E70(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v71 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for DispatchQoS();
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  unint64_t v69 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v68 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000AA024((uint64_t *)&unk_100263A10);
  __chkstk_darwin(v14 - 8);
  uint64_t v73 = (uint64_t)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for DeviceRecord();
  uint64_t v75 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  id v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v63 - v19;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v63 = (void *)v11;
    uint64_t v64 = v20;
    uint64_t v74 = (char *)Strong;
    char v67 = a2;
    uint64_t v66 = v8;
    uint64_t v65 = v7;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1001CFDB0;
    id v23 = a4;
    id v24 = [v23 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;
    id v76 = v23;

    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_1000AA5E0();
    *(void *)(v22 + 32) = v25;
    *(void *)(v22 + 40) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    char v28 = v74;
    sub_1000C2280();
    if ([self isFirstUnlocked])
    {
      sub_10015F0D4();
      if (qword_100261850 != -1) {
        swift_once();
      }
      uint64_t v29 = (uint64_t)v63;
      uint64_t v30 = sub_1000AA0CC((uint64_t)v63, (uint64_t)qword_10026AAE0);
      uint64_t v31 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v13, v30, v29);
      uint64_t v32 = sub_10015CF90((uint64_t)v13);
      swift_release();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v29);
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      uint64_t v32 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    swift_release();
    uint64_t v35 = v32[2];
    if (v35)
    {
      uint64_t v68 = a3;
      uint64_t v36 = (uint64_t)v32 + ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80));
      uint64_t v37 = *(void *)(v75 + 72);
      id v63 = v32;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000D8C04(v36, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
        id v38 = &v17[*(int *)(v77 + 24)];
        uint64_t v40 = *(void *)v38;
        uint64_t v39 = *((void *)v38 + 1);
        id v41 = [v76 bluetoothAddress];
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v44 = v43;

        if (v40 == v42 && v39 == v44) {
          break;
        }
        char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v46) {
          goto LABEL_24;
        }
        sub_1000D8B88((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
        v36 += v37;
        if (!--v35)
        {
          swift_bridgeObjectRelease();
          uint64_t v47 = 1;
          a3 = v68;
          uint64_t v48 = v66;
          char v28 = v74;
          goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease();
LABEL_24:
      a3 = v68;
      char v28 = v74;
      swift_bridgeObjectRelease();
      uint64_t v49 = v73;
      sub_1000D8544((uint64_t)v17, v73, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      uint64_t v47 = 0;
      uint64_t v48 = v66;
    }
    else
    {
      uint64_t v47 = 1;
      uint64_t v48 = v66;
LABEL_22:
      uint64_t v49 = v73;
    }
    uint64_t v50 = v75;
    uint64_t v51 = v77;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v49, v47, 1, v77);
    swift_bridgeObjectRelease();
    int v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v49, 1, v51);
    uint64_t v53 = (uint64_t)v67;
    if (v52 == 1)
    {
      sub_1000AA894(v49, (uint64_t *)&unk_100263A10);
      uint64_t v54 = *(void **)&v28[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
      uint64_t v55 = swift_allocObject();
      *(void *)(v55 + 16) = v53;
      *(void *)(v55 + 24) = a3;
      aBlock[4] = sub_1000D853C;
      aBlock[5] = v55;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100106F90;
      void aBlock[3] = &unk_100237D40;
      uint64_t v56 = _Block_copy(aBlock);
      id v57 = v54;
      swift_retain();
      uint64_t v58 = v69;
      static DispatchQoS.unspecified.getter();
      uint64_t v78 = _swiftEmptyArrayStorage;
      sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000AA024(&qword_100263550);
      sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
      uint64_t v59 = v71;
      uint64_t v60 = v65;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v56);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v59, v60);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v58, v72);
      return swift_release();
    }
    else
    {
      uint64_t v61 = (uint64_t)v64;
      sub_1000D8544(v49, (uint64_t)v64, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      uint64_t v62 = sub_1000C2280();
      swift_unknownObjectWeakInit();
      swift_retain();
      sub_1001983DC(v61, v62, (uint64_t)aBlock, v53, a3);

      swift_release();
      swift_release();
      sub_1000D8B88(v61, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      return swift_unknownObjectWeakDestroy();
    }
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v33 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000C87F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_100237D78, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237D90);
}

uint64_t sub_1000C8820(void (*a1)(void))
{
  sub_1000AEFE8();
  swift_allocError();
  unsigned char *v2 = 3;
  a1();

  return swift_errorRelease();
}

uint64_t sub_1000C88C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CEDF8(a1, a2, a3, a4, (uint64_t)&unk_100237C38, (uint64_t)sub_1000D84D4, (uint64_t)&unk_100237C50);
}

uint64_t sub_1000C88EC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1001CFDB0;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1000AA5E0();
    *(void *)(v11 + 32) = a4;
    *(void *)(v11 + 40) = a5;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_1000C2280();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    sub_10019E91C(a4, a5, 0x6552656369766544, 0xEC00000064726F63, v12, v13, (uint64_t)a2, a3);

    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v15 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000C8ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D1928(a1, a2, a3, a4, (uint64_t)&unk_100237C88, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237CA0);
}

uint64_t sub_1000C8B38(void *a1, int a2, int a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v10;
  id v15 = a1;
  a7(v11, v13, a6, v14);

  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_1000C8BF8(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_100237B98, (uint64_t)sub_1000D846C, (uint64_t)&unk_100237BB0);
}

uint64_t sub_1000C8C20(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5 = sub_1000AA024((uint64_t *)&unk_100263A00);
  __chkstk_darwin(v5 - 8);
  uint64_t v94 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v89 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for DispatchQoS();
  uint64_t v88 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v87 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for BTDeferredRecord();
  uint64_t v100 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v95 = (uint64_t)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v99 = (char *)&v87 - v11;
  __chkstk_darwin(v12);
  uint64_t v101 = (char *)&v87 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v87 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v87 - v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v87 - v21;
  uint64_t v108 = type metadata accessor for DeviceSupportInformationRecord();
  uint64_t v104 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v93 = (uint64_t)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v87 - v25;
  __chkstk_darwin(v27);
  uint64_t v111 = (uint64_t)&v87 - v28;
  uint64_t v109 = type metadata accessor for URL();
  uint64_t v29 = *(void **)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v31 = (char *)&v87 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v97 = a2;
  uint64_t v98 = a3;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    goto LABEL_60;
  }
  while (1)
  {
    os_log(_:dso:log:_:_:)();
    unint64_t v114 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v32 = sub_1000C2280();
    unsigned int v33 = [self isFirstUnlocked];
    uint64_t v34 = (uint64_t)v101;
    if (v33)
    {
      *(void *)&long long v107 = v32;
      sub_10015F0D4();
      if (qword_1002618E8 != -1) {
        swift_once();
      }
      uint64_t v35 = v109;
      uint64_t v36 = sub_1000AA0CC(v109, (uint64_t)qword_10026AD20);
      ((void (*)(char *, uint64_t, uint64_t))v29[2])(v31, v36, v35);
      uint64_t v37 = sub_10015D000((uint64_t)v31);
      swift_release();
      ((void (*)(char *, uint64_t))v29[1])(v31, v35);
      uint64_t v29 = v37;
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      uint64_t v29 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    swift_release();
    uint64_t v103 = v29[2];
    if (!v103) {
      break;
    }
    unint64_t v39 = 0;
    unint64_t v102 = (char *)v29 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
    *(void *)&long long v107 = "SoundProfileRecord";
    uint64_t v109 = 0x80000001001F6CC0;
    uint64_t v96 = v29;
    while (v39 < v29[2])
    {
      sub_1000D8C04((uint64_t)&v102[*(void *)(v104 + 72) * v39], v111, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
      sub_1000C2280();
      uint64_t v40 = sub_1001607FC();
      swift_release();
      uint64_t v41 = *(void *)(v40 + 16);
      if (v41)
      {
        uint64_t v42 = v100;
        uint64_t v43 = (const char *)v40;
        uint64_t v31 = (char *)(v40
                     + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80)));
        uint64_t v106 = v43;
        swift_bridgeObjectRetain();
        uint64_t v44 = *(void *)(v42 + 72);
        uint64_t v45 = v108;
        while (1)
        {
          sub_1000D8C04((uint64_t)v31, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          if (*((void *)v22 + 1) == 0xD00000000000001ELL && *((void *)v22 + 2) == v109)
          {
            sub_1000D8C04((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            sub_1000D8C04(v111, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
          }
          else
          {
            char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_1000D8C04((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            sub_1000D8C04(v111, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
            if ((v46 & 1) == 0)
            {
              sub_1000D8B88((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
              sub_1000D8B88((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
              sub_1000D8C04((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
              goto LABEL_20;
            }
          }
          uint64_t v47 = &v19[*(int *)(v110 + 28)];
          uint64_t v48 = *(void *)v47;
          uint64_t v49 = *((void *)v47 + 1);
          uint64_t v50 = &v26[*(int *)(v45 + 24)];
          if (v48 == *(void *)v50 && v49 == *((void *)v50 + 1))
          {
            sub_1000D8B88((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            sub_1000D8B88((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
            sub_1000D8C04((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_33:
            if (*v16 == 1)
            {
              swift_bridgeObjectRelease();
              sub_1000D8B88((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
              sub_1000D8B88((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_14:
              swift_bridgeObjectRelease_n();
              uint64_t v34 = (uint64_t)v101;
              uint64_t v29 = v96;
              goto LABEL_15;
            }
            char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            sub_1000D8B88((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            uint64_t v45 = v108;
            sub_1000D8B88((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
            if (v53) {
              goto LABEL_14;
            }
            goto LABEL_21;
          }
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_1000D8B88((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          sub_1000D8B88((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
          sub_1000D8C04((uint64_t)v22, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          if (v52) {
            goto LABEL_33;
          }
LABEL_20:
          sub_1000D8B88((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          sub_1000D8B88((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_21:
          v31 += v44;
          if (!--v41)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v34 = (uint64_t)v101;
            uint64_t v29 = v96;
            goto LABEL_38;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_38:
      uint64_t v31 = (char *)sub_1000C9E80();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_15:
      ++v39;
      sub_1000D8B88(v111, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
      if (v39 == v103) {
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_60:
    swift_once();
  }
LABEL_41:
  swift_bridgeObjectRelease();
  sub_1000C2280();
  uint64_t v54 = sub_1001607FC();
  swift_release();
  uint64_t v55 = *(void *)(v54 + 16);
  uint64_t v56 = v98;
  id v57 = v97;
  if (v55)
  {
    unint64_t v58 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    unint64_t v102 = (char *)v54;
    uint64_t v59 = v54 + v58;
    uint64_t v111 = *(void *)(v100 + 72);
    v104 += 56;
    uint64_t v106 = "SoundProfileRecord";
    uint64_t v109 = 0x80000001001F6CC0;
    long long v107 = xmmword_1001CFDB0;
    uint64_t v60 = v99;
    do
    {
      sub_1000D8C04(v59, v34, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      if (*(void *)(v34 + 8) == 0xD00000000000001ELL && *(void *)(v34 + 16) == v109)
      {
        sub_1000D8C04(v34, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      }
      else
      {
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_1000D8C04(v34, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
        if ((v65 & 1) == 0)
        {
          sub_1000D8B88((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          goto LABEL_44;
        }
      }
      if ((*v60 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_1000D8B88((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_53:
        uint64_t v67 = v34 + *(int *)(v110 + 36);
        unint64_t v68 = *(void *)(v67 + 8);
        if (v68 >> 60 == 15)
        {
          static os_log_type_t.default.getter();
          sub_1000AA024((uint64_t *)&unk_100262110);
          uint64_t v61 = swift_allocObject();
          *(_OWORD *)(v61 + 16) = v107;
          sub_1000D8C04(v34, v95, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
          uint64_t v62 = String.init<A>(describing:)();
          uint64_t v64 = v63;
          *(void *)(v61 + 56) = &type metadata for String;
          *(void *)(v61 + 64) = sub_1000AA5E0();
          *(void *)(v61 + 32) = v62;
          *(void *)(v61 + 40) = v64;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v56 = v98;
          id v57 = v97;
          uint64_t v60 = v99;
        }
        else
        {
          uint64_t v69 = *(void *)v67;
          sub_1000AA680(*(void *)v67, *(void *)(v67 + 8));
          type metadata accessor for PropertyListDecoder();
          swift_allocObject();
          PropertyListDecoder.init()();
          sub_1000D79CC(&qword_100263A70, (void (*)(uint64_t))type metadata accessor for DeviceSupportInformationRecord);
          uint64_t v71 = (uint64_t)v94;
          uint64_t v72 = v108;
          dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
          uint64_t v103 = v69;
          swift_release();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))v104)(v71, 0, 1, v72);
          uint64_t v73 = v93;
          sub_1000D8544(v71, v93, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
          static os_log_type_t.default.getter();
          sub_1000AA024((uint64_t *)&unk_100262110);
          uint64_t v74 = swift_allocObject();
          *(_OWORD *)(v74 + 16) = v107;
          uint64_t v75 = sub_1000F8EB8();
          uint64_t v77 = v76;
          *(void *)(v74 + 56) = &type metadata for String;
          *(void *)(v74 + 64) = sub_1000AA5E0();
          *(void *)(v74 + 32) = v75;
          *(void *)(v74 + 40) = v77;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          sub_1000C9E80();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_1000BFEB0(v103, v68);
          sub_1000D8B88(v73, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
          uint64_t v56 = v98;
          id v57 = v97;
          uint64_t v60 = v99;
          uint64_t v34 = (uint64_t)v101;
        }
        goto LABEL_44;
      }
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      sub_1000D8B88((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      if (v66) {
        goto LABEL_53;
      }
LABEL_44:
      sub_1000D8B88(v34, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      v59 += v111;
      --v55;
    }
    while (v55);
  }
  swift_bridgeObjectRelease();
  uint64_t v78 = (void *)Strong;
  uint64_t v79 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  unint64_t v80 = v114;
  uint64_t v81 = (void *)swift_allocObject();
  v81[2] = v80;
  v81[3] = v57;
  v81[4] = v56;
  aBlock[4] = sub_1000D8494;
  aBlock[5] = v81;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237C00;
  uint64_t v82 = _Block_copy(aBlock);
  id v83 = v79;
  swift_retain();
  uint64_t v84 = v87;
  static DispatchQoS.unspecified.getter();
  uint64_t v112 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  id v85 = v89;
  uint64_t v86 = v92;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v82);

  (*(void (**)(char *, uint64_t))(v91 + 8))(v85, v86);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v84, v90);
  return swift_release();
}

id sub_1000C9E80()
{
  type metadata accessor for DeviceSupportInformationRecord();
  id v0 = objc_allocWithZone((Class)BTCloudDeviceSupportInformation);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithBluetoothAddress:v1];

  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setBudsFirmwareVersion:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setCaseName:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  [v2 setCaseFirmwareVersion:v5];

  NSString v6 = String._bridgeToObjectiveC()();
  [v2 setCaseSerialNumber:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  [v2 setHardwareVersion:v7];

  NSString v8 = String._bridgeToObjectiveC()();
  [v2 setLeftBudSerialNumber:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [v2 setRightBudSerialNumber:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  [v2 setAncAssetVersion:v10];

  return v2;
}

uint64_t sub_1000CA074(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t *a4)
{
  static os_log_type_t.debug.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001CFDB0;
  sub_1000B66A0(0, a4);
  swift_bridgeObjectRetain();
  uint64_t v8 = Array.description.getter();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000AA5E0();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a2(a1);
}

void sub_1000CA1EC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a1)
  {
    sub_1000B66A0(0, a3);
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v4.super.Class isa = 0;
  }
  Class isa = v4.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1000CA26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CEDF8(a1, a2, a3, a4, (uint64_t)&unk_100237A08, (uint64_t)sub_1000D7F84, (uint64_t)&unk_100237A20);
}

uint64_t sub_1000CA294(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v195 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v187 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v185 = (char *)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v186 = (char *)&v161 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = type metadata accessor for URL();
  uint64_t v179 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  v178 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1000AA024((uint64_t *)&unk_100263A00);
  __chkstk_darwin(v14 - 8);
  v167 = (char *)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v173 = (uint64_t)&v161 - v17;
  __chkstk_darwin(v18);
  uint64_t v182 = (uint64_t)&v161 - v19;
  uint64_t v193 = type metadata accessor for DeviceSupportInformationRecord();
  uint64_t v191 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v176 = (uint64_t)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v166 = (uint64_t)&v161 - v22;
  __chkstk_darwin(v23);
  v190 = (char *)&v161 - v24;
  __chkstk_darwin(v25);
  uint64_t v168 = (uint64_t)&v161 - v26;
  __chkstk_darwin(v27);
  v183 = (char *)&v161 - v28;
  uint64_t v175 = v29;
  __chkstk_darwin(v30);
  v174 = (unsigned __int8 *)&v161 - v31;
  uint64_t v32 = sub_1000AA024(&qword_1002623D8);
  __chkstk_darwin(v32 - 8);
  uint64_t v188 = (uint64_t)&v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for BTDeferredRecord();
  uint64_t v192 = *(void *)(v194 - 8);
  __chkstk_darwin(v194);
  uint64_t v184 = (uint64_t)&v161 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v37 = (char *)&v161 - v36;
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v161 - v39;
  uint64_t v172 = v41;
  __chkstk_darwin(v42);
  v189 = (unsigned __int8 *)&v161 - v43;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v45 = (char *)Strong;
  v181 = a2;
  uint64_t v169 = v8;
  uint64_t v170 = v11;
  uint64_t v171 = v10;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  uint64_t v164 = sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v46 = swift_allocObject();
  long long v163 = xmmword_1001CFDB0;
  *(_OWORD *)(v46 + 16) = xmmword_1001CFDB0;
  *(void *)(v46 + 56) = &type metadata for String;
  unint64_t v165 = sub_1000AA5E0();
  *(void *)(v46 + 64) = v165;
  *(void *)(v46 + 32) = v195;
  *(void *)(v46 + 40) = a5;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000C2280();
  uint64_t v47 = sub_1001607FC();
  swift_release();
  uint64_t v48 = *(void *)(v47 + 16);
  uint64_t v49 = a3;
  v177 = v45;
  if (!v48)
  {
LABEL_20:
    uint64_t v58 = v192;
    uint64_t v59 = v188;
    uint64_t v60 = v194;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56))(v188, 1, 1, v194);
    goto LABEL_23;
  }
  v162 = a3;
  uint64_t v50 = v47;
  uint64_t v51 = v47 + ((*(unsigned __int8 *)(v192 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80));
  uint64_t v52 = *(void *)(v192 + 72);
  uint64_t v161 = v50;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000D8C04(v51, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
    if (*((void *)v40 + 1) == 0xD00000000000001ELL && *((void *)v40 + 2) == 0x80000001001F6CC0)
    {
      sub_1000D8C04((uint64_t)v40, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
    }
    else
    {
      char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_1000D8C04((uint64_t)v40, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      if ((v53 & 1) == 0)
      {
        sub_1000D8B88((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
        goto LABEL_7;
      }
    }
    uint64_t v54 = &v37[*(int *)(v194 + 28)];
    if (*(void *)v54 == v195 && *((void *)v54 + 1) == a5) {
      break;
    }
    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_1000D8B88((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
    if (v56) {
      goto LABEL_22;
    }
LABEL_7:
    sub_1000D8B88((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
    v51 += v52;
    if (!--v48)
    {
      swift_bridgeObjectRelease();
      uint64_t v45 = v177;
      uint64_t v49 = v162;
      goto LABEL_20;
    }
  }
  sub_1000D8B88((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v59 = v188;
  sub_1000D8544((uint64_t)v40, v188, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
  uint64_t v58 = v192;
  uint64_t v60 = v194;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v192 + 56))(v59, 0, 1, v194);
  uint64_t v45 = v177;
  uint64_t v49 = v162;
LABEL_23:
  swift_bridgeObjectRelease();
  int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1, v60);
  uint64_t v63 = (uint64_t)v190;
  uint64_t v62 = v191;
  uint64_t v64 = v189;
  if (v61 == 1)
  {
    sub_1000AA894(v59, &qword_1002623D8);
    sub_1000C2280();
    if ([self isFirstUnlocked])
    {
      uint64_t v65 = v62;
      char v66 = v49;
      sub_10015F0D4();
      uint64_t v67 = v193;
      if (qword_1002618E8 != -1) {
        swift_once();
      }
      uint64_t v68 = v180;
      uint64_t v69 = sub_1000AA0CC(v180, (uint64_t)qword_10026AD20);
      uint64_t v70 = v179;
      uint64_t v71 = (uint64_t)v178;
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v178, v69, v68);
      uint64_t v72 = sub_10015D000(v71);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v71, v68);
      uint64_t v49 = v66;
      uint64_t v62 = v65;
      uint64_t v45 = v177;
    }
    else
    {
      static os_log_type_t.error.getter();
      uint64_t v67 = v193;
      if (qword_100261948 != -1) {
        swift_once();
      }
      uint64_t v72 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    uint64_t v83 = (uint64_t)v183;
    swift_release();
    uint64_t v84 = v72[2];
    if (v84)
    {
      uint64_t v85 = (uint64_t)v72 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
      uint64_t v86 = v62;
      uint64_t v87 = *(void *)(v62 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000D8C04(v85, v83, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
        uint64_t v88 = (void *)(v83 + *(int *)(v67 + 24));
        BOOL v89 = *v88 == v195 && v88[1] == a5;
        if (v89 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_1000D8B88(v83, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
        v85 += v87;
        if (!--v84)
        {
          swift_bridgeObjectRelease();
          uint64_t v62 = v86;
          goto LABEL_45;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v90 = v182;
      sub_1000D8544(v83, v182, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v62 = v86;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v90, 0, 1, v67);
    }
    else
    {
LABEL_45:
      uint64_t v90 = v182;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v182, 1, 1, v67);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v90, 1, v67) == 1)
    {
      sub_1000AA894(v90, (uint64_t *)&unk_100263A00);
      uint64_t v111 = *(void **)&v45[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
      uint64_t v112 = (void *)swift_allocObject();
      v112[2] = v195;
      void v112[3] = a5;
      v112[4] = v181;
      v112[5] = v49;
      v201 = sub_1000D7FDC;
      v202 = v112;
      aBlock = _NSConcreteStackBlock;
      uint64_t v198 = 1107296256;
      v199 = sub_100106F90;
      v200 = &unk_100237A70;
      id v113 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      id v114 = v111;
      unint64_t v115 = v45;
      uint64_t v116 = v186;
      static DispatchQoS.unspecified.getter();
      v196 = _swiftEmptyArrayStorage;
      sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000AA024(&qword_100263550);
      sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
      id v117 = v185;
      uint64_t v118 = v169;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();

      _Block_release(v113);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v117, v118);
      (*(void (**)(char *, uint64_t))(v170 + 8))(v116, v171);
      return swift_release();
    }
    uint64_t v119 = v187;
    uint64_t v64 = v174;
    sub_1000D8544(v90, (uint64_t)v174, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    int v120 = *(void **)&v45[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v121 = v176;
    sub_1000D8C04((uint64_t)v64, v176, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    unint64_t v122 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    unint64_t v123 = (v175 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v124 = swift_allocObject();
    sub_1000D8544(v121, v124 + v122, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    unsigned __int8 v125 = (uint64_t (**)(void))(v124 + v123);
    *unsigned __int8 v125 = v181;
    v125[1] = v49;
    v201 = sub_1000D7FEC;
    v202 = (void *)v124;
    aBlock = _NSConcreteStackBlock;
    uint64_t v198 = 1107296256;
    v199 = sub_100106F90;
    v200 = &unk_100237AC0;
    unsigned __int8 v126 = _Block_copy(&aBlock);
    swift_retain();
    id v127 = v120;
    BOOL v128 = v45;
    uint64_t v129 = v186;
    static DispatchQoS.unspecified.getter();
    v196 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    v130 = v185;
    uint64_t v131 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v126);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v130, v131);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v129, v171);
    uint64_t v110 = type metadata accessor for DeviceSupportInformationRecord;
LABEL_53:
    v159 = v110;
    uint64_t v160 = (uint64_t)v64;
    goto LABEL_54;
  }
  sub_1000D8544(v59, (uint64_t)v189, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
  int v73 = *v64;
  static os_log_type_t.default.getter();
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = v163;
  sub_1000D8C04((uint64_t)v64, v184, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
  uint64_t v75 = String.init<A>(describing:)();
  unint64_t v76 = v165;
  *(void *)(v74 + 56) = &type metadata for String;
  *(void *)(v74 + 64) = v76;
  *(void *)(v74 + 32) = v75;
  *(void *)(v74 + 40) = v77;
  if (v73 == 1)
  {
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000C2280();
    if ([self isFirstUnlocked])
    {
      sub_10015F0D4();
      if (qword_1002618E8 != -1) {
        swift_once();
      }
      uint64_t v78 = v180;
      uint64_t v79 = sub_1000AA0CC(v180, (uint64_t)qword_10026AD20);
      uint64_t v80 = v179;
      uint64_t v81 = (uint64_t)v178;
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v178, v79, v78);
      uint64_t v82 = sub_10015D000(v81);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v78);
      uint64_t v63 = (uint64_t)v190;
    }
    else
    {
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      uint64_t v82 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)();
    }
    uint64_t v132 = (uint64_t)v64;
    uint64_t v133 = v191;
    swift_release();
    uint64_t v134 = v82[2];
    if (v134)
    {
      uint64_t v135 = (uint64_t)v82
           + ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80));
      v136 = &v64[*(int *)(v194 + 28)];
      uint64_t v137 = *(void *)(v133 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000D8C04(v135, v63, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
        v138 = (void *)(v63 + *(int *)(v193 + 24));
        BOOL v139 = *v138 == *(void *)v136 && v138[1] == *((void *)v136 + 1);
        if (v139 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_1000D8B88(v63, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
        v135 += v137;
        if (!--v134)
        {
          swift_bridgeObjectRelease();
          uint64_t v132 = (uint64_t)v64;
          uint64_t v133 = v191;
          goto LABEL_68;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v140 = v173;
      sub_1000D8544(v63, v173, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v133 = v191;
      uint64_t v141 = v193;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v191 + 56))(v140, 0, 1, v193);
      uint64_t v132 = (uint64_t)v64;
    }
    else
    {
LABEL_68:
      uint64_t v140 = v173;
      uint64_t v141 = v193;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56))(v173, 1, 1, v193);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v140, 1, v141) == 1)
    {
      sub_1000AA894(v140, (uint64_t *)&unk_100263A00);
    }
    else
    {
      uint64_t v142 = v140;
      uint64_t v143 = v168;
      sub_1000D8544(v142, v168, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
      v144 = (char *)sub_1000C2280();
      sub_10017A750(v143, v144);
      swift_release();
      sub_1000D8B88(v143, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    }
    ((void (*)(void))v181)(0);

    return sub_1000D8B88(v132, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
  }
  else
  {
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v91 = (uint64_t *)&v64[*(int *)(v60 + 36)];
    unint64_t v92 = v91[1];
    if (v92 >> 60 == 15)
    {
      uint64_t v98 = *(void **)&v45[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
      uint64_t v99 = v184;
      sub_1000D8C04((uint64_t)v64, v184, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      unint64_t v100 = (*(unsigned __int8 *)(v192 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v192 + 80);
      unint64_t v101 = (v172 + v100 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v102 = swift_allocObject();
      sub_1000D8544(v99, v102 + v100, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      uint64_t v103 = (uint64_t (**)(void))(v102 + v101);
      char *v103 = v181;
      v103[1] = v49;
      v201 = sub_1000D815C;
      v202 = (void *)v102;
      aBlock = _NSConcreteStackBlock;
      uint64_t v198 = 1107296256;
      v199 = sub_100106F90;
      v200 = &unk_100237B10;
      uint64_t v104 = _Block_copy(&aBlock);
      swift_retain();
      id v105 = v98;
      uint64_t v106 = v45;
      long long v107 = v186;
      static DispatchQoS.unspecified.getter();
      v196 = _swiftEmptyArrayStorage;
      sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000AA024(&qword_100263550);
      sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
      uint64_t v108 = v185;
      uint64_t v109 = v169;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();

      _Block_release(v104);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v108, v109);
      (*(void (**)(char *, uint64_t))(v170 + 8))(v107, v171);
      uint64_t v110 = type metadata accessor for BTDeferredRecord;
      goto LABEL_53;
    }
    uint64_t v93 = v45;
    v162 = v49;
    uint64_t v94 = *v91;
    sub_1000AA680(*v91, v92);
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_1000D79CC(&qword_100263A70, (void (*)(uint64_t))type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v96 = (uint64_t)v167;
    uint64_t v97 = v193;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v145 = v191 + 56;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v191 + 56))(v96, 0, 1, v97);
    uint64_t v146 = v166;
    sub_1000D8544(v96, v166, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    v147 = *(void **)&v93[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v148 = v176;
    sub_1000D8C04(v146, v176, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    unint64_t v149 = (*(unsigned __int8 *)(v145 + 24) + 16) & ~(unint64_t)*(unsigned __int8 *)(v145 + 24);
    unint64_t v150 = (v175 + v149 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v151 = swift_allocObject();
    sub_1000D8544(v148, v151 + v149, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    v152 = (uint64_t (**)(void))(v151 + v150);
    v153 = v162;
    *v152 = v181;
    v152[1] = v153;
    v201 = sub_1000D8378;
    v202 = (void *)v151;
    aBlock = _NSConcreteStackBlock;
    uint64_t v198 = 1107296256;
    v199 = sub_100106F90;
    v200 = &unk_100237B60;
    v154 = _Block_copy(&aBlock);
    id v155 = v147;
    swift_retain();
    v156 = v186;
    static DispatchQoS.unspecified.getter();
    v196 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    v157 = v185;
    uint64_t v158 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    sub_1000BFEB0(v94, v92);
    _Block_release(v154);

    (*(void (**)(char *, uint64_t))(v187 + 8))(v157, v158);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v156, v171);
    sub_1000D8B88(v166, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    v159 = type metadata accessor for BTDeferredRecord;
    uint64_t v160 = (uint64_t)v189;
LABEL_54:
    sub_1000D8B88(v160, (uint64_t (*)(void))v159);
    return swift_release();
  }
}

uint64_t sub_1000CBD38()
{
  static os_log_type_t.debug.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001CFDB0;
  swift_errorRetain();
  sub_1000AA024(&qword_100263C40);
  uint64_t v1 = String.init<A>(describing:)();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_1000AA5E0();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

void sub_1000CBE4C(uint64_t a1, void (*a2)(void))
{
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001CFDB0;
  NSArray v4 = sub_1000F8EB8();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1000AA5E0();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v7 = sub_1000C9E80();
  a2();
}

uint64_t sub_1000CBF78(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = type metadata accessor for BTDeferredRecord();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001CFDB0;
  sub_1000D8C04(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000AA5E0();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a2(0);
}

uint64_t sub_1000CC0F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  static os_log_type_t.debug.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001CFDB0;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000AA5E0();
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a3(0);
}

void sub_1000CC200(uint64_t a1, void (*a2)(void))
{
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1001CFDB0;
  uint64_t v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 24));
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000AA5E0();
  *(void *)(v4 + 32) = v7;
  *(void *)(v4 + 40) = v6;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v8 = sub_1000C9E80();
  a2();
}

uint64_t sub_1000CC370(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05A4(a1, a2, a3, (uint64_t)&unk_1002378C8, (uint64_t)sub_1000D7F3C, (uint64_t)&unk_1002378E0);
}

uint64_t sub_1000CC398(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v87 = type metadata accessor for DeviceSupportInformationRecord();
  uint64_t v7 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v86 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v78 = *(void *)(v9 - 8);
  uint64_t v79 = v9;
  __chkstk_darwin(v9);
  uint64_t v77 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000AA024((uint64_t *)&unk_100263A00);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v84 = *(void *)(v18 - 8);
  uint64_t v85 = (void *)v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v37 = 0;
    a2();
    return swift_errorRelease();
  }
  uint64_t v80 = v15;
  uint64_t v75 = v13;
  uint64_t v76 = v7;
  uint64_t v82 = a3;
  uint64_t v83 = (char *)Strong;
  uint64_t v81 = a2;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1001CFDB0;
  id v23 = a4;
  id v24 = [v23 description];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_1000AA5E0();
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v27;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v28 = [v23 bluetoothAddress];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  swift_bridgeObjectRelease();
  uint64_t v32 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
  }
  if (!v32) {
    goto LABEL_12;
  }
  id v33 = [v23 bluetoothAddress];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  if (v34 == 0xD000000000000011 && v36 == 0x80000001001F75A0)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v40 = v83;
    uint64_t v41 = *(void **)&v83[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    uint64_t v42 = (void *)swift_allocObject();
    uint64_t v43 = v81;
    uint64_t v44 = v82;
    void v42[2] = v23;
    v42[3] = v43;
    void v42[4] = v44;
    aBlock[4] = sub_1000D7F4C;
    aBlock[5] = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100106F90;
    void aBlock[3] = &unk_100237930;
    uint64_t v45 = _Block_copy(aBlock);
    id v46 = v23;
    id v47 = v41;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v88 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v14);
    (*(void (**)(char *, void *))(v84 + 8))(v20, v85);
    return swift_release();
  }
  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v39) {
    goto LABEL_12;
  }
  sub_1000C2280();
  if ([self isFirstUnlocked])
  {
    sub_10015F0D4();
    uint64_t v48 = v76;
    if (qword_1002618E8 != -1) {
      swift_once();
    }
    uint64_t v49 = v79;
    uint64_t v50 = sub_1000AA0CC(v79, (uint64_t)qword_10026AD20);
    uint64_t v52 = (uint64_t)v77;
    uint64_t v51 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v50, v49);
    char v53 = sub_10015D000(v52);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v49);
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v48 = v76;
    if (qword_100261948 != -1) {
      swift_once();
    }
    char v53 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  swift_release();
  uint64_t v54 = v53[2];
  if (v54)
  {
    uint64_t v55 = (uint64_t)v53 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v56 = *(void *)(v48 + 72);
    uint64_t v85 = v53;
    swift_bridgeObjectRetain();
    uint64_t v57 = v86;
    while (1)
    {
      sub_1000D8C04(v55, v57, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
      uint64_t v58 = (uint64_t *)(v57 + *(int *)(v87 + 24));
      uint64_t v60 = *v58;
      uint64_t v59 = v58[1];
      id v61 = [v23 bluetoothAddress];
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      if (v60 == v62 && v59 == v64) {
        break;
      }
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v66) {
        goto LABEL_32;
      }
      uint64_t v57 = v86;
      sub_1000D8B88(v86, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
      v55 += v56;
      if (!--v54)
      {
        swift_bridgeObjectRelease();
        uint64_t v67 = 1;
        uint64_t v69 = (uint64_t)v81;
        uint64_t v68 = v82;
        uint64_t v70 = v83;
        uint64_t v48 = v76;
        uint64_t v71 = (uint64_t)v75;
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease();
LABEL_32:
    uint64_t v69 = (uint64_t)v81;
    uint64_t v68 = v82;
    uint64_t v70 = v83;
    uint64_t v48 = v76;
    swift_bridgeObjectRelease();
    uint64_t v71 = (uint64_t)v75;
    sub_1000D8544(v86, (uint64_t)v75, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = 1;
    uint64_t v69 = (uint64_t)v81;
    uint64_t v68 = v82;
    uint64_t v70 = v83;
    uint64_t v71 = (uint64_t)v75;
  }
LABEL_33:
  uint64_t v72 = v87;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v71, v67, 1, v87);
  swift_bridgeObjectRelease();
  int v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v71, 1, v72);
  sub_1000AA894(v71, (uint64_t *)&unk_100263A00);
  uint64_t v74 = sub_1000C2280();
  if (v73 != 1)
  {
    swift_unknownObjectWeakInit();
    swift_retain();
    sub_10019EA7C(v23, v74, (uint64_t)aBlock, v69, v68);
    swift_release();

    swift_unknownObjectWeakDestroy();
    return swift_release();
  }
  swift_unknownObjectWeakInit();
  swift_retain();
  sub_10019EA04(v23, v74, (uint64_t)aBlock, v69, v68);
  swift_release();

  swift_release();
  return swift_unknownObjectWeakDestroy();
}

uint64_t sub_1000CCDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_100237968, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237980);
}

uint64_t sub_1000CCDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_1002379B8, (uint64_t)sub_1000D77C4, (uint64_t)&unk_1002379D0);
}

uint64_t sub_1000CCE34(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05A4(a1, a2, a3, (uint64_t)&unk_1002377D8, (uint64_t)sub_1000D7EF4, (uint64_t)&unk_1002377F0);
}

uint64_t sub_1000CCE5C(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v26 = 0;
    a2();
    return swift_errorRelease();
  }
  uint64_t v16 = (char *)Strong;
  uint64_t v44 = v11;
  uint64_t v45 = v8;
  id v46 = a2;
  uint64_t v47 = a3;
  id v17 = [a4 bluetoothAddress];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    id v22 = [a4 bluetoothAddress];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    if (v23 == 0xD000000000000011 && v25 == 0x80000001001F75A0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        static os_log_type_t.default.getter();
        if (qword_100261940 != -1) {
          swift_once();
        }
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1001CFDB0;
        id v37 = a4;
        id v38 = [v37 description];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        *(void *)(v36 + 56) = &type metadata for String;
        *(void *)(v36 + 64) = sub_1000AA5E0();
        *(void *)(v36 + 32) = v39;
        *(void *)(v36 + 40) = v41;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v42 = sub_1000C2280();
        swift_unknownObjectWeakInit();
        uint64_t v43 = v47;
        swift_retain();
        sub_10019F608(v37, v42, (uint64_t)aBlock, (uint64_t)v46, v43);
        swift_release();

        swift_unknownObjectWeakDestroy();
        return swift_release();
      }
    }
  }
  uint64_t v29 = *(void **)&v16[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  unint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = (uint64_t)v46;
  uint64_t v32 = v47;
  void v30[2] = a4;
  v30[3] = v31;
  v30[4] = v32;
  aBlock[4] = sub_1000D7F04;
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237840;
  id v33 = _Block_copy(aBlock);
  id v34 = v29;
  id v35 = a4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v44);
  return swift_release();
}

uint64_t sub_1000CD3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_100237878, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237890);
}

uint64_t sub_1000CD40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CEDF8(a1, a2, a3, a4, (uint64_t)&unk_100237738, (uint64_t)sub_1000D7ED0, (uint64_t)&unk_100237750);
}

uint64_t sub_1000CD434(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1001CFDB0;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1000AA5E0();
    *(void *)(v11 + 32) = a4;
    *(void *)(v11 + 40) = a5;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_1000C2280();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    sub_1001A4D64(a4, a5, 0xD00000000000001ELL, 0x80000001001F6CC0, v12, v13, (uint64_t)a2, a3);

    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v15 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000CD620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D1928(a1, a2, a3, a4, (uint64_t)&unk_100237788, (uint64_t)sub_1000D77C4, (uint64_t)&unk_1002377A0);
}

uint64_t sub_1000CD67C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v23 = a2;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = *(void **)(v5 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = a3;
  *(void *)(v17 + 32) = a4;
  *(void *)(v17 + 40) = a1;
  *(unsigned char *)(v17 + 4_Block_object_dispose(&STACK[0x290], 8) = v23;
  aBlock[4] = sub_1000D7EBC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237700;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v15;
  swift_retain();
  swift_retain();
  id v20 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v24);
  swift_release();
  return swift_release();
}

uint64_t sub_1000CD994(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, void *a4, char a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v10 = (void *)Strong;
  sub_1000C2280();
  sub_1001813E4(a4, a5 & 1, (void (*)(uint64_t))a2, a3);

  return swift_release();
}

uint64_t sub_1000CDAEC(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void **)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = a2;
  *(void *)(v16 + 32) = a3;
  *(unsigned char *)(v16 + 40) = a1;
  aBlock[4] = sub_1000D7EA4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_1002376B0;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v14;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  int v23 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_1000CDDF8(uint64_t a1, uint64_t (*a2)(void), void *a3, char a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v8 = (void *)Strong;
  sub_1000C2280();
  sub_100183434(a4 & 1, (void (*)(void))a2, a3);

  return swift_release();
}

uint64_t sub_1000CDF2C(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_100237648, (uint64_t)sub_1000D7E7C, (uint64_t)&unk_100237660);
}

void sub_1000CDF54(uint64_t a1, void (*a2)(uint64_t, unint64_t))
{
  uint64_t v3 = sub_1000AA024((uint64_t *)&unk_100263BA0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_1000C2280();
    sub_100161850((uint64_t)v5);
    swift_release();
    uint64_t v8 = type metadata accessor for LegacyMagicPairingSettingsRecords();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v5, 1, v8) == 1)
    {
      sub_1000AA894((uint64_t)v5, (uint64_t *)&unk_100263BA0);
      static os_log_type_t.default.getter();
      if (qword_100261940 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      a2(0, 0xF000000000000000);
    }
    else
    {
      uint64_t v9 = (uint64_t *)&v5[*(int *)(v8 + 20)];
      uint64_t v10 = *v9;
      unint64_t v11 = v9[1];
      sub_1000AA680(*v9, v11);
      sub_1000D8B88((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
      static os_log_type_t.default.getter();
      if (qword_100261940 != -1) {
        swift_once();
      }
      sub_1000AA024((uint64_t *)&unk_100262110);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_1001CFDB0;
      sub_1000AA680(v10, v11);
      uint64_t v13 = Data.description.getter();
      uint64_t v15 = v14;
      sub_1000AA8F0(v10, v11);
      *(void *)(v12 + 56) = &type metadata for String;
      *(void *)(v12 + 64) = sub_1000AA5E0();
      *(void *)(v12 + 32) = v13;
      *(void *)(v12 + 40) = v15;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_1000AA680(v10, v11);
      a2(v10, v11);
      sub_1000AA8F0(v10, v11);
      sub_1000AA8F0(v10, v11);
    }
  }
  else
  {
    a2(0, 0xF000000000000000);
  }
}

uint64_t sub_1000CE29C(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_1002375A8, (uint64_t)sub_1000D7DFC, (uint64_t)&unk_1002375C0);
}

uint64_t sub_1000CE2C4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MagicPairingSettingsRecord();
  uint64_t v38 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v42 = a3;
  uint64_t v37 = v6;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  unint64_t v46 = (unint64_t)_swiftEmptyArrayStorage;
  sub_1000C2280();
  unsigned int v17 = [self isFirstUnlocked];
  uint64_t v36 = v8;
  if (v17)
  {
    sub_10015F0D4();
    if (qword_100261890 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_1000AA0CC(v13, (uint64_t)qword_10026AB90);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v18, v13);
    id v19 = sub_10015D070((uint64_t)v16);
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    id v19 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v21 = v42;
  uint64_t v22 = a2;
  swift_release();
  uint64_t v23 = v19[2];
  if (v23)
  {
    uint64_t v35 = v5;
    uint64_t v24 = (uint64_t)v19 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    uint64_t v25 = *(void *)(v38 + 72);
    do
    {
      sub_1000D8C04(v24, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
      sub_1000CE96C();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_1000D8B88((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
      v24 += v25;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    uint64_t v5 = v35;
    uint64_t v21 = v42;
    uint64_t v22 = a2;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v26 = (void *)Strong;
  uint64_t v27 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  unint64_t v28 = v46;
  uint64_t v29 = (void *)swift_allocObject();
  id v29[2] = v28;
  v29[3] = v22;
  v29[4] = v21;
  aBlock[4] = sub_1000D7E24;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237610;
  unint64_t v30 = _Block_copy(aBlock);
  id v31 = v27;
  swift_retain();
  uint64_t v32 = v39;
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  id v33 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v5);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v36);
  return swift_release();
}

id sub_1000CE96C()
{
  type metadata accessor for MagicPairingSettingsRecord();
  id v0 = objc_allocWithZone((Class)BTMagicPairingSettings);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithBluetoothAddress:v1];

  NSString v3 = String._bridgeToObjectiveC()();
  [v2 setProductID:v3];

  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setVendorID:v4];

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v2 setMasterKey:isa];

  Class v6 = Data._bridgeToObjectiveC()().super.isa;
  [v2 setMasterHint:v6];

  Class v7 = Data._bridgeToObjectiveC()().super.isa;
  [v2 setAccessoryKey:v7];

  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  [v2 setAccessoryHint:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [v2 setButtonModes:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  [v2 setColor:v10];

  NSString v11 = String._bridgeToObjectiveC()();
  [v2 setDeviceIDFeatureBitsV1:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v2 setDeviceIDFeatureBitsV2:v12];

  Class v13 = Data._bridgeToObjectiveC()().super.isa;
  [v2 setEncryptionKey:v13];

  Class v14 = Data._bridgeToObjectiveC()().super.isa;
  [v2 setIrk:v14];

  NSString v15 = String._bridgeToObjectiveC()();
  [v2 setListeningServices:v15];

  NSString v16 = String._bridgeToObjectiveC()();
  [v2 setListeningServicesV2:v16];

  NSString v17 = String._bridgeToObjectiveC()();
  [v2 setOptimizedBatteryCharging:v17];

  NSString v18 = String._bridgeToObjectiveC()();
  [v2 setOptimizedBatteryFullChargeDeadline:v18];

  NSString v19 = String._bridgeToObjectiveC()();
  [v2 setRatchet:v19];

  NSString v20 = String._bridgeToObjectiveC()();
  [v2 setReserved:v20];

  NSString v21 = String._bridgeToObjectiveC()();
  [v2 setSettingsMask:v21];

  NSString v22 = String._bridgeToObjectiveC()();
  [v2 setSupportedServices:v22];

  NSString v23 = String._bridgeToObjectiveC()();
  [v2 setVersion:v23];

  return v2;
}

uint64_t sub_1000CEDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000CEDF8(a1, a2, a3, a4, (uint64_t)&unk_100237508, (uint64_t)sub_1000D7D8C, (uint64_t)&unk_100237520);
}

uint64_t sub_1000CEDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  NSString v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v16 = *(void **)(v7 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  NSString v18 = (void *)swift_allocObject();
  uint64_t v19 = v25;
  v18[2] = v17;
  v18[3] = v19;
  uint64_t v20 = v26;
  v18[4] = a4;
  void v18[5] = v20;
  v18[6] = a2;
  aBlock[4] = v27;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = v28;
  NSString v21 = _Block_copy(aBlock);
  id v22 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  id v31 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v29);
  swift_release();
  return swift_release();
}

uint64_t sub_1000CF104(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v66 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for DispatchQoS();
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v62 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000AA024((uint64_t *)&unk_100263BA0);
  __chkstk_darwin(v12 - 8);
  uint64_t v60 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v58 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  NSString v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000AA024(&qword_1002623D0);
  __chkstk_darwin(v17 - 8);
  id v61 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for MagicPairingSettingsRecord();
  uint64_t v67 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  NSString v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v59 = (uint64_t)&v55 - v23;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a2();
  }
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v57 = v9;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1001CFDB0;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_1000AA5E0();
  *(void *)(v24 + 32) = a4;
  *(void *)(v24 + 40) = a5;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000C2280();
  if ([self isFirstUnlocked])
  {
    sub_10015F0D4();
    if (qword_100261890 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_1000AA0CC(v14, (uint64_t)qword_10026AB90);
    uint64_t v26 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v16, v25, v14);
    uint64_t v27 = sub_10015D070((uint64_t)v16);
    swift_release();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v14);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    uint64_t v27 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  swift_release();
  uint64_t v29 = v27[2];
  if (v29)
  {
    uint64_t v30 = (uint64_t)v27 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
    uint64_t v31 = *(void *)(v67 + 72);
    swift_bridgeObjectRetain();
    uint64_t v32 = (uint64_t)v61;
    while (1)
    {
      sub_1000D8C04(v30, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
      id v33 = &v21[*(int *)(v19 + 24)];
      BOOL v34 = *(void *)v33 == a4 && *((void *)v33 + 1) == a5;
      if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      sub_1000D8B88((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
      v30 += v31;
      if (!--v29)
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = 1;
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000D8544((uint64_t)v21, v32, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = 1;
    uint64_t v32 = (uint64_t)v61;
  }
LABEL_23:
  uint64_t v36 = v67;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v32, v35, 1, v19);
  swift_bridgeObjectRelease();
  int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v32, 1, v19);
  uint64_t v38 = v57;
  uint64_t v39 = v56;
  if (v37 == 1)
  {
    sub_1000AA894(v32, &qword_1002623D0);
    sub_1000C2280();
    uint64_t v40 = v60;
    sub_100161850(v60);
    swift_release();
    uint64_t v41 = type metadata accessor for LegacyMagicPairingSettingsRecords();
    int v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41);
    uint64_t v43 = v55;
    if (v42 == 1)
    {
      sub_1000AA894(v40, (uint64_t *)&unk_100263BA0);
      uint64_t v44 = 0;
    }
    else
    {
      unint64_t v46 = sub_100101DD0();
      sub_1000D8B88(v40, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_1000D7AE0((unint64_t)v46, a4, a5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v45 = v59;
    sub_1000D8544(v32, v59, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v44 = sub_1000CE96C();
    sub_1000D8B88(v45, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v43 = v55;
  }
  uint64_t v47 = (void *)Strong;
  uint64_t v48 = *(void **)(Strong + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  uint64_t v49 = (void *)swift_allocObject();
  v49[2] = v43;
  v49[3] = v39;
  v49[4] = v44;
  aBlock[4] = sub_1000D7DD8;
  aBlock[5] = v49;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237570;
  uint64_t v50 = _Block_copy(aBlock);
  id v51 = v44;
  id v52 = v48;
  swift_retain();
  char v53 = v62;
  static DispatchQoS.unspecified.getter();
  uint64_t v69 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  uint64_t v54 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v50);

  (*(void (**)(char *, uint64_t))(v66 + 8))(v54, v38);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v53, v65);
  return swift_release();
}

uint64_t sub_1000CFAB8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05A4(a1, a2, a3, (uint64_t)&unk_1002373C8, (uint64_t)sub_1000D7D44, (uint64_t)&unk_1002373E0);
}

uint64_t sub_1000CFAE0(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v87 = type metadata accessor for MagicPairingSettingsRecord();
  uint64_t v7 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v86 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v78 = *(void *)(v9 - 8);
  uint64_t v79 = v9;
  __chkstk_darwin(v9);
  uint64_t v77 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000AA024(&qword_1002623D0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v84 = *(void *)(v18 - 8);
  uint64_t v85 = (void *)v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000AEFE8();
    swift_allocError();
    *int v37 = 0;
    a2();
    return swift_errorRelease();
  }
  uint64_t v80 = v15;
  uint64_t v75 = v13;
  uint64_t v76 = v7;
  uint64_t v82 = a3;
  uint64_t v83 = (char *)Strong;
  uint64_t v81 = a2;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1001CFDB0;
  id v23 = a4;
  id v24 = [v23 description];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_1000AA5E0();
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v27;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v28 = [v23 bluetoothAddress];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  swift_bridgeObjectRelease();
  uint64_t v32 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0) {
    uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
  }
  if (!v32) {
    goto LABEL_12;
  }
  id v33 = [v23 bluetoothAddress];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  if (v34 == 0xD000000000000011 && v36 == 0x80000001001F75A0)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v40 = v83;
    uint64_t v41 = *(void **)&v83[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
    int v42 = (void *)swift_allocObject();
    uint64_t v43 = v81;
    uint64_t v44 = v82;
    void v42[2] = v23;
    v42[3] = v43;
    void v42[4] = v44;
    aBlock[4] = sub_1000D7D54;
    aBlock[5] = v42;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100106F90;
    void aBlock[3] = &unk_100237430;
    uint64_t v45 = _Block_copy(aBlock);
    id v46 = v23;
    id v47 = v41;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v88 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v17, v14);
    (*(void (**)(char *, void *))(v84 + 8))(v20, v85);
    return swift_release();
  }
  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v39) {
    goto LABEL_12;
  }
  sub_1000C2280();
  if ([self isFirstUnlocked])
  {
    sub_10015F0D4();
    uint64_t v48 = v76;
    if (qword_100261890 != -1) {
      swift_once();
    }
    uint64_t v49 = v79;
    uint64_t v50 = sub_1000AA0CC(v79, (uint64_t)qword_10026AB90);
    uint64_t v52 = (uint64_t)v77;
    uint64_t v51 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v50, v49);
    char v53 = sub_10015D070(v52);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v49);
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v48 = v76;
    if (qword_100261948 != -1) {
      swift_once();
    }
    char v53 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  swift_release();
  uint64_t v54 = v53[2];
  if (v54)
  {
    uint64_t v55 = (uint64_t)v53 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v56 = *(void *)(v48 + 72);
    uint64_t v85 = v53;
    swift_bridgeObjectRetain();
    uint64_t v57 = v86;
    while (1)
    {
      sub_1000D8C04(v55, v57, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
      uint64_t v58 = (uint64_t *)(v57 + *(int *)(v87 + 24));
      uint64_t v60 = *v58;
      uint64_t v59 = v58[1];
      id v61 = [v23 bluetoothAddress];
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      if (v60 == v62 && v59 == v64) {
        break;
      }
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v66) {
        goto LABEL_32;
      }
      uint64_t v57 = v86;
      sub_1000D8B88(v86, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
      v55 += v56;
      if (!--v54)
      {
        swift_bridgeObjectRelease();
        uint64_t v67 = 1;
        uint64_t v69 = (uint64_t)v81;
        uint64_t v68 = v82;
        uint64_t v70 = v83;
        uint64_t v48 = v76;
        uint64_t v71 = (uint64_t)v75;
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease();
LABEL_32:
    uint64_t v69 = (uint64_t)v81;
    uint64_t v68 = v82;
    uint64_t v70 = v83;
    uint64_t v48 = v76;
    swift_bridgeObjectRelease();
    uint64_t v71 = (uint64_t)v75;
    sub_1000D8544(v86, (uint64_t)v75, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
    uint64_t v67 = 0;
  }
  else
  {
    uint64_t v67 = 1;
    uint64_t v69 = (uint64_t)v81;
    uint64_t v68 = v82;
    uint64_t v70 = v83;
    uint64_t v71 = (uint64_t)v75;
  }
LABEL_33:
  uint64_t v72 = v87;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v71, v67, 1, v87);
  swift_bridgeObjectRelease();
  int v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v71, 1, v72);
  sub_1000AA894(v71, &qword_1002623D0);
  uint64_t v74 = sub_1000C2280();
  if (v73 != 1)
  {
    swift_unknownObjectWeakInit();
    swift_retain();
    sub_1001A66E8(v23, v74, (uint64_t)aBlock, v69, v68);
    swift_release();

    swift_unknownObjectWeakDestroy();
    return swift_release();
  }
  swift_unknownObjectWeakInit();
  swift_retain();
  sub_1001A6670(v23, v74, (uint64_t)aBlock, v69, v68);
  swift_release();

  swift_release();
  return swift_unknownObjectWeakDestroy();
}

uint64_t sub_1000D04F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_100237468, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237480);
}

uint64_t sub_1000D0520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_1002374B8, (uint64_t)sub_1000D77C4, (uint64_t)&unk_1002374D0);
}

uint64_t sub_1000D057C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D05A4(a1, a2, a3, (uint64_t)&unk_1002372D8, (uint64_t)sub_1000D7CFC, (uint64_t)&unk_1002372F0);
}

uint64_t sub_1000D05A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a2;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void **)(v6 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = v23;
  void v17[2] = v16;
  v17[3] = v18;
  void v17[4] = a3;
  void v17[5] = a1;
  aBlock[4] = v24;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = v25;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v15;
  swift_retain();
  swift_retain();
  id v21 = a1;
  static DispatchQoS.unspecified.getter();
  id v28 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v26);
  swift_release();
  return swift_release();
}

uint64_t sub_1000D08A4(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v26 = 0;
    a2();
    return swift_errorRelease();
  }
  uint64_t v16 = (char *)Strong;
  uint64_t v44 = v11;
  uint64_t v45 = v8;
  id v46 = a2;
  uint64_t v47 = a3;
  id v17 = [a4 bluetoothAddress];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    id v22 = [a4 bluetoothAddress];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    if (v23 == 0xD000000000000011 && v25 == 0x80000001001F75A0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        static os_log_type_t.default.getter();
        if (qword_100261940 != -1) {
          swift_once();
        }
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1001CFDB0;
        id v37 = a4;
        id v38 = [v37 description];
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v41 = v40;

        *(void *)(v36 + 56) = &type metadata for String;
        *(void *)(v36 + 64) = sub_1000AA5E0();
        *(void *)(v36 + 32) = v39;
        *(void *)(v36 + 40) = v41;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v42 = sub_1000C2280();
        swift_unknownObjectWeakInit();
        uint64_t v43 = v47;
        swift_retain();
        sub_1001A7780(v37, v42, (uint64_t)aBlock, (uint64_t)v46, v43);
        swift_release();

        swift_unknownObjectWeakDestroy();
        return swift_release();
      }
    }
  }
  uint64_t v29 = *(void **)&v16[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue];
  unint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = (uint64_t)v46;
  uint64_t v32 = v47;
  void v30[2] = a4;
  v30[3] = v31;
  v30[4] = v32;
  aBlock[4] = sub_1000D7D0C;
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237340;
  id v33 = _Block_copy(aBlock);
  id v34 = v29;
  id v35 = a4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v44);
  return swift_release();
}

uint64_t sub_1000D0DF8(void *a1, void (*a2)(void))
{
  static os_log_type_t.error.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001D0A20;
  id v4 = [a1 bluetoothAddress];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v3 + 56) = &type metadata for String;
  unint64_t v8 = sub_1000AA5E0();
  *(void *)(v3 + 64) = v8;
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v7;
  id v9 = a1;
  id v10 = [v9 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(v3 + 96) = &type metadata for String;
  *(void *)(v3 + 104) = v8;
  *(void *)(v3 + 72) = v11;
  *(void *)(v3 + 80) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000AEFE8();
  swift_allocError();
  *uint64_t v14 = 1;
  a2();

  return swift_errorRelease();
}

uint64_t sub_1000D0FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D45D0(a1, a2, a3, a4, (uint64_t)&unk_100237378, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100237390);
}

uint64_t sub_1000D100C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  uint64_t v40 = sub_1000D7A4C;
  uint64_t v41 = (void *)v14;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  id v38 = sub_1000D1550;
  uint64_t v39 = &unk_100237160;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  [v4 removeAADeviceRecordWithBluetoothAddress:v13 completion:v15];
  _Block_release(v15);

  NSString v16 = String._bridgeToObjectiveC()();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  uint64_t v40 = sub_1000D7A74;
  uint64_t v41 = (void *)v17;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  id v38 = sub_1000D1550;
  uint64_t v39 = &unk_1002371B0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  [v4 removeAAProxCardsInfoWithBluetoothAddress:v16 completion:v18];
  _Block_release(v18);

  NSString v19 = String._bridgeToObjectiveC()();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  uint64_t v40 = sub_1000D7A9C;
  uint64_t v41 = (void *)v20;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  id v38 = sub_1000D1550;
  uint64_t v39 = &unk_100237200;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  [v4 removeHMDeviceCloudRecordWithBluetoothAddress:v19 completion:v21];
  _Block_release(v21);

  id v22 = *(void **)&v4[OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue];
  uint64_t v23 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v30;
  uint64_t v26 = v31;
  v24[2] = v23;
  v24[3] = v25;
  v24[4] = v26;
  v24[5] = a1;
  v24[6] = a2;
  uint64_t v40 = sub_1000D7AC8;
  uint64_t v41 = v24;
  aBlock = _NSConcreteStackBlock;
  uint64_t v37 = 1107296256;
  id v38 = sub_100106F90;
  uint64_t v39 = &unk_100237250;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  id v28 = v22;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v35 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  swift_release();
  return swift_release();
}

void sub_1000D1550(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000D15BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1001D0A20;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_1000AA5E0();
    *(void *)(v5 + 32) = a2;
    *(void *)(v5 + 40) = a3;
    swift_bridgeObjectRetain();
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v5 + 96) = sub_1000B66A0(0, (unint64_t *)&qword_100261D70);
    *(void *)(v5 + 104) = sub_1000D7C8C();
    *(void *)(v5 + 72) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1000D170C(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1001CFDB0;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1000AA5E0();
    *(void *)(v11 + 32) = a4;
    *(void *)(v11 + 40) = a5;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_1000C2280();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    sub_1001ACEDC(a4, a5, 0x746553636967614DLL, 0xED000073676E6974, v12, v13, (uint64_t)a2, a3);

    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v15 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000D1900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000D1928(a1, a2, a3, a4, (uint64_t)&unk_100237288, (uint64_t)sub_1000D77C4, (uint64_t)&unk_1002372A0);
}

uint64_t sub_1000D1928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v21 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v17 = (void *)result;
    id v18 = *(id *)(result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);

    NSString v19 = (void *)swift_allocObject();
    void v19[2] = v21;
    void v19[3] = a4;
    void v19[4] = a1;
    aBlock[4] = v22;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100106F90;
    void aBlock[3] = v23;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000D1C54@<X0>(uint64_t a1@<X8>)
{
  v17[1] = a1;
  v17[0] = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v17[0] - 8);
  __chkstk_darwin(v17[0]);
  uint64_t v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v17 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v17 - v12;
  type metadata accessor for DeviceStore();
  sub_10013ACBC((uint64_t)v10);
  if (qword_100261870 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_1000AA0CC(v4, (uint64_t)qword_10026AB50);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
  URL.path.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  URL.appendingPathComponent(_:isDirectory:)();
  swift_bridgeObjectRelease();
  v15(v10, v4);
  if (qword_100261858 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_1000AC9E4();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, void))(v1 + 8))(v3, v17[0]);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)();
  v15(v10, v4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v4);
}

uint64_t sub_1000D2070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = *(id *)(v4 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v25, v12);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  id v18 = (char *)swift_allocObject();
  uint64_t v19 = v26;
  *((void *)v18 + 2) = v16;
  *((void *)v18 + 3) = v19;
  *((void *)v18 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v18[v17], v15, v12);
  aBlock[4] = sub_1000D7964;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237110;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v24;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_1000D2440(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  uint64_t v7 = sub_1000AA024(&qword_1002623B8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    v23[1] = static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1001D0A20;
    sub_1000C2280();
    sub_100161B8C((uint64_t)v9);
    swift_release();
    uint64_t v13 = type metadata accessor for SoundProfileRecord();
    int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v9, 1, v13);
    sub_1000AA894((uint64_t)v9, &qword_1002623B8);
    unint64_t v15 = sub_1000AA5E0();
    unint64_t v16 = v15;
    uint64_t v17 = 0x676E697461647055;
    if (v14 == 1) {
      uint64_t v17 = 0x676E69646441;
    }
    unint64_t v18 = 0xE800000000000000;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = v15;
    if (v14 == 1) {
      unint64_t v18 = 0xE600000000000000;
    }
    *(void *)(v12 + 32) = v17;
    *(void *)(v12 + 40) = v18;
    type metadata accessor for URL();
    sub_1000D79CC((unint64_t *)&unk_100263280, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v16;
    *(void *)(v12 + 72) = v19;
    *(void *)(v12 + 80) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000C2280();
    sub_100185DB0(a4, (void (*)(void))a2, a3);

    return swift_release();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v22 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000D2840(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_1002370A8, (uint64_t)sub_1000D7884, (uint64_t)&unk_1002370C0);
}

void sub_1000D2868(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v5 = sub_1000AA024(&qword_1002623B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SoundProfileRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000AEFE8();
    uint64_t v23 = swift_allocError();
    *id v24 = 0;
    a2(0, v23);
    swift_errorRelease();
    return;
  }
  uint64_t v13 = (void *)Strong;
  sub_1000C2280();
  if (IsAppleInternalBuild())
  {
    id v14 = [self standardUserDefaults];
    uint64_t v36 = v13;
    uint64_t v15 = v8;
    unint64_t v16 = v11;
    uint64_t v17 = a3;
    unint64_t v18 = a2;
    id v19 = v14;
    NSString v20 = String._bridgeToObjectiveC()();
    unsigned __int8 v21 = [v19 BOOLForKey:v20];
    swift_release();

    a2 = v18;
    uint64_t v22 = v17;
    uint64_t v11 = v16;
    uint64_t v8 = v15;
    uint64_t v13 = v36;

    if (v21)
    {
      sub_1000D2DAC((uint64_t)a2, v22);
LABEL_11:

      return;
    }
  }
  else
  {
    swift_release();
  }
  sub_1000C2280();
  sub_100161B8C((uint64_t)v7);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000AA894((uint64_t)v7, &qword_1002623B8);
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1000AEFE8();
    uint64_t v25 = swift_allocError();
    *uint64_t v26 = 3;
    a2(0, v25);
    swift_errorRelease();
    goto LABEL_11;
  }
  sub_1000D8544((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1001CFDB0;
  uint64_t v28 = sub_1000B7170();
  uint64_t v30 = v29;
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 64) = sub_1000AA5E0();
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v31 = objc_allocWithZone((Class)BTCloudSoundProfileRecord);
  URL._bridgeToObjectiveC()(v32);
  uint64_t v34 = v33;
  id v35 = [v31 initWithFileURL:v33];

  a2(v35, 0);
  sub_1000D8B88((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
}

void sub_1000D2D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_1000D2DAC(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_100236FE0, (uint64_t)sub_1000D783C, (uint64_t)&unk_100236FF8);
}

uint64_t sub_1000D2DD4(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v6 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1000C2280();
    uint64_t v7 = (void *)swift_allocObject();
    id v7[2] = v6;
    v7[3] = a2;
    void v7[4] = a3;
    id v8 = v6;
    swift_retain();
    sub_100187FA8((uint64_t)sub_1000D784C, (uint64_t)v7);

    swift_release();
    return swift_release();
  }
  else
  {
    sub_1000AEFE8();
    uint64_t v10 = swift_allocError();
    *uint64_t v11 = 0;
    a2(0, v10);
    return swift_errorRelease();
  }
}

uint64_t sub_1000D2F50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v21[0] - 8);
  __chkstk_darwin(v21[0]);
  id v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void **)(a2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  unint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a1;
  v16[3] = a3;
  void v16[4] = a4;
  aBlock[4] = sub_1000D785C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100237070;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a1;
  swift_retain();
  id v19 = v15;
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, void))(v12 + 8))(v14, v21[0]);
  return swift_release();
}

void sub_1000D3220(void *a1, void (*a2)(void *, uint64_t))
{
  if (a1)
  {
    id v4 = a1;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1001CFDB0;
    id v6 = v4;
    id v7 = [v6 description];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_1000AA5E0();
    *(void *)(v5 + 32) = v8;
    *(void *)(v5 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v13 = v6;
    a2(a1, 0);
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1000AEFE8();
    uint64_t v11 = swift_allocError();
    *uint64_t v12 = 3;
    a2(0, v11);
    swift_errorRelease();
  }
}

uint64_t sub_1000D349C(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_100236F90, (uint64_t)sub_1000D7814, (uint64_t)&unk_100236FA8);
}

void sub_1000D34C4(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t v5 = sub_1000AA024(&qword_1002623B8);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SoundProfileRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v13 = (void *)Strong;
    sub_1000C2280();
    sub_100161B8C((uint64_t)v7);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_1000AA894((uint64_t)v7, &qword_1002623B8);
      static os_log_type_t.default.getter();
      if (qword_100261940 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      ((void (*)(void))a2)(0);
    }
    else
    {
      sub_1000D8544((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
      static os_log_type_t.default.getter();
      if (qword_100261940 != -1) {
        swift_once();
      }
      sub_1000AA024((uint64_t *)&unk_100262110);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1001CFDB0;
      uint64_t v16 = sub_1000B7170();
      uint64_t v18 = v17;
      *(void *)(v15 + 56) = &type metadata for String;
      *(void *)(v15 + 64) = sub_1000AA5E0();
      *(void *)(v15 + 32) = v16;
      *(void *)(v15 + 40) = v18;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_1000C2280();
      sub_100187500(a2, a3);
      swift_release();

      sub_1000D8B88((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    }
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *id v14 = 0;
    a2();
    swift_errorRelease();
  }
}

uint64_t sub_1000D385C(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_100236EC8, (uint64_t)sub_1000D77E8, (uint64_t)&unk_100236EE0);
}

uint64_t sub_1000D3884(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1000C2280();
    swift_unknownObjectWeakInit();
    swift_retain();
    static os_log_type_t.default.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id v7 = *(NSObject **)(sub_10015F0D4() + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue);
    v11[4] = sub_1000C1DC0;
    v11[5] = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    void v11[2] = sub_100106FFC;
    v11[3] = &unk_100236F08;
    uint64_t v8 = _Block_copy(v11);
    swift_release();
    dispatch_sync(v7, v8);
    _Block_release(v8);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      sub_1000D45D0(0, (uint64_t)v12, (uint64_t)a2, a3, (uint64_t)&unk_100236F40, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100236F58);
      swift_release();

      swift_release();
      return swift_unknownObjectWeakDestroy();
    }
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *uint64_t v10 = 0;
    a2();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1000D3B70(uint64_t a1, uint64_t a2)
{
  return sub_1000D3B98(a1, a2, (uint64_t)&unk_100236DD8, (uint64_t)sub_1000D776C, (uint64_t)&unk_100236DF0);
}

uint64_t sub_1000D3B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(void **)(v5 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v15;
  v16[3] = a1;
  void v16[4] = a2;
  aBlock[4] = v21;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100106F90;
  void aBlock[3] = v22;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v14;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  swift_release();
  return swift_release();
}

uint64_t sub_1000D3E8C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v11 = sub_1000C2280();
    id v41 = v10;
    swift_unknownObjectWeakInit();
    swift_retain();
    static os_log_type_t.default.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    uint64_t v42 = a2;
    os_log(_:dso:log:_:_:)();
    uint64_t v40 = v11;
    uint64_t v12 = sub_100160454();
    static os_log_type_t.default.getter();
    if (qword_100261938 != -1) {
      swift_once();
    }
    id v13 = &unk_10026A000;
    os_log(_:dso:log:_:_:)();
    uint64_t v14 = v12 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    uint64_t v15 = *(void *)(*(void *)(v14 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration() + 32)) + 16);
    if (v15)
    {
      uint64_t v39 = a3;
      uint64_t v51 = v12 + 24;
      id v46 = CKCurrentUserDefaultName;
      uint64_t v45 = v58;
      uint64_t v44 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v43 = (void (**)(char *, uint64_t))(v7 + 8);
      uint64_t v38 = swift_bridgeObjectRetain();
      uint64_t v16 = (NSObject **)(v38 + 40);
      long long v55 = xmmword_1001CFDB0;
      do
      {
        uint64_t v18 = (uint64_t)*(v16 - 1);
        uint64_t v17 = *v16;
        swift_bridgeObjectRetain();
        static os_log_type_t.default.getter();
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = v55;
        *(void *)(v19 + 56) = &type metadata for String;
        *(void *)(v19 + 64) = sub_1000AA5E0();
        *(void *)(v19 + 32) = v18;
        *(void *)(v19 + 40) = v17;
        swift_bridgeObjectRetain();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        if ((sub_1001147DC(v18, v17) & 1) != 0 && (uint64_t v20 = swift_unknownObjectWeakLoadStrong()) != 0)
        {
          uint64_t v21 = v20;
          sub_1000B66A0(0, (unint64_t *)&unk_100261E70);
          v22._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v22._object = v23;
          v24._uint64_t countAndFlagsBits = v18;
          v24._object = v17;
          Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v24, v22).super.isa;
          uint64_t v26 = *(void **)(v21 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
          uint64_t v27 = swift_allocObject();
          *(void *)(v27 + 16) = isa;
          *(void *)(v27 + 24) = v21;
          v58[2] = sub_1000D77B8;
          v58[3] = v27;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          v58[0] = sub_100106F90;
          v58[1] = &unk_100236E40;
          char v53 = _Block_copy(aBlock);
          id v52 = v26;
          uint64_t v54 = isa;
          swift_unknownObjectRetain();
          uint64_t v28 = v47;
          static DispatchQoS.unspecified.getter();
          uint64_t v56 = _swiftEmptyArrayStorage;
          sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_1000AA024(&qword_100263550);
          sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
          uint64_t v29 = v49;
          uint64_t v30 = v13;
          uint64_t v31 = v50;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          uint64_t v32 = v52;
          uint64_t v33 = v53;
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v33);

          uint64_t v34 = v31;
          id v13 = v30;
          (*v44)(v29, v34);
          (*v43)(v28, v48);

          swift_unknownObjectRelease();
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v16 += 2;
        --v15;
      }
      while (v15);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v39;
    }
    else
    {
      swift_unknownObjectRelease();
    }
    sub_1000D45D0(0, (uint64_t)v59, (uint64_t)v42, a3, (uint64_t)&unk_100236E78, (uint64_t)sub_1000D77C4, (uint64_t)&unk_100236E90);
    swift_release();

    swift_release();
    return swift_unknownObjectWeakDestroy();
  }
  else
  {
    sub_1000AEFE8();
    swift_allocError();
    *id v35 = 0;
    a2();
    return swift_errorRelease();
  }
}

uint64_t sub_1000D45D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v21 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v17 = (void *)result;
    id v18 = *(id *)(result + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);

    uint64_t v19 = (void *)swift_allocObject();
    void v19[2] = v21;
    void v19[3] = a4;
    void v19[4] = a1;
    aBlock[4] = v22;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100106F90;
    void aBlock[3] = v23;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000AA024(&qword_100263550);
    sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
    return swift_release();
  }
  return result;
}

char *sub_1000D48F8()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v4 = (char *)sub_1000C2280();
  uint64_t v5 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
  uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue];
  *uint64_t v3 = v6;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.notOnQueue(_:), v0);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v3, v0);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  id v8 = *(id *)&v4[v5];
  sub_1000AA024(&qword_1002623B0);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();

  id v4 = v16;
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
LABEL_5:
  }
    swift_once();
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001CFDB0;
  uint64_t v16 = v4;
  uint64_t v10 = v4;
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000AA5E0();
  *(void *)(v9 + 32) = v11;
  *(void *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t type metadata accessor for DeviceManager()
{
  return self;
}

uint64_t sub_1000D4C3C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  id v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue;
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC15audioaccessoryd11DeviceStore_clientQueue);
  void *v8 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4, v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v13 = 0x65736C6166;
  id v14 = *(id *)(a1 + v9);
  sub_1000AA024(&qword_1002623B0);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t countAndFlagsBits = (void *)aBlock._countAndFlagsBits;
  v47[0] = 0xD00000000000002BLL;
  v47[1] = 0x80000001001F7C60;
  v16._object = (void *)0x80000001001F7C90;
  v16._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v17._object = (void *)0x80000001001F7CC0;
  String.append(_:)(v17);
  if (!countAndFlagsBits)
  {
    aBlock._uint64_t countAndFlagsBits = 0x6C62616C69617641;
    aBlock._object = (void *)0xEB00000000203A65;
LABEL_8:
    unint64_t v25 = 0xE500000000000000;
    uint64_t v26 = 0x65736C6166;
    goto LABEL_9;
  }
  id v18 = [countAndFlagsBits loginID];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    aBlock._uint64_t countAndFlagsBits = 540689481;
    aBlock._object = (void *)0xE400000000000000;
    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 10;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    String.append(_:)(aBlock);
    swift_bridgeObjectRelease();
  }
  aBlock._uint64_t countAndFlagsBits = 0x6C62616C69617641;
  aBlock._object = (void *)0xEB00000000203A65;
  if (([countAndFlagsBits isSignedIn] & 1) == 0) {
    goto LABEL_8;
  }
  unint64_t v25 = 0xE400000000000000;
  uint64_t v26 = 1702195828;
LABEL_9:
  unint64_t v27 = v25;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 10;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  String.append(_:)(aBlock);
  swift_bridgeObjectRelease();
  aBlock._uint64_t countAndFlagsBits = 0x3A656574616E614DLL;
  aBlock._object = (void *)0xE900000000000020;
  if (countAndFlagsBits && ([countAndFlagsBits manateeAvailable] & 1) != 0)
  {
    uint64_t v29 = (void *)0xE400000000000000;
    uint64_t v13 = 1702195828;
  }
  else
  {
    uint64_t v29 = (void *)0xE500000000000000;
  }
  v30._uint64_t countAndFlagsBits = v13;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 10;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  String.append(_:)(aBlock);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v32._object = (void *)0x80000001001F7CF0;
  String.append(_:)(v32);
  uint64_t v33 = *(void **)(v2 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_managerQueue);
  uint64_t v34 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v35 = (void *)swift_allocObject();
  v35[2] = v34;
  v35[3] = v47;
  v35[4] = a1;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = sub_1000D7734;
  *(void *)(v36 + 24) = v35;
  uint64_t v45 = sub_1000AF254;
  uint64_t v46 = v36;
  aBlock._uint64_t countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  uint64_t v43 = sub_100106FFC;
  uint64_t v44 = &unk_100236DA0;
  uint64_t v37 = _Block_copy(&aBlock);
  uint64_t v38 = v33;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v38, v37);

  _Block_release(v37);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v40 = v47[0];
    swift_release();
    return v40;
  }
LABEL_16:
  __break(1u);
  return result;
}

void sub_1000D5128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v198 = a3;
  uint64_t v183 = type metadata accessor for BTDeferredRecord();
  uint64_t v182 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  v200 = (char *)&v175 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v202 = (uint64_t)&v175 - v6;
  uint64_t v7 = type metadata accessor for MagicPairingSettingsRecord();
  uint64_t v181 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v201 = (uint64_t)&v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  *(void *)&long long v203 = (char *)&v175 - v10;
  uint64_t v11 = sub_1000AA024(&qword_1002623B8);
  __chkstk_darwin(v11 - 8);
  uint64_t v189 = (uint64_t)&v175 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = type metadata accessor for SoundProfileRecord();
  uint64_t v187 = *(void *)(v188 - 8);
  __chkstk_darwin(v188);
  id v14 = (char *)&v175 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DeviceSupportInformationRecord();
  unint64_t v194 = *(void *)(v15 - 8);
  __chkstk_darwin(v15 - 8);
  Swift::String v17 = (char *)&v175 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000AA024((uint64_t *)&unk_100263BA0);
  __chkstk_darwin(v18 - 8);
  uint64_t v186 = (uint64_t)&v175 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = type metadata accessor for LegacyMagicPairingSettingsRecords();
  uint64_t v184 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  uint64_t v179 = (uint64_t)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v180 = (uint64_t)&v175 - v22;
  uint64_t v23 = type metadata accessor for DeviceRecord();
  *(void *)&long long v199 = *(void *)(v23 - 8);
  __chkstk_darwin(v23 - 8);
  unint64_t v25 = (char *)&v175 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = (void *)type metadata accessor for URL();
  uint64_t v192 = *(v193 - 1);
  __chkstk_darwin(v193);
  uint64_t v191 = (char *)&v175 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_1000AA024(&qword_1002623C0);
  __chkstk_darwin(v27 - 8);
  uint64_t v29 = (char *)&v175 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for LegacyAccountMagicKeysRecord();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v175 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v175 - v35;
  swift_beginAccess();
  id Strong = (id)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v176 = v14;
  unint64_t v197 = (unint64_t)"===========================\n";
  v37._object = (void *)0x80000001001F70F0;
  v37._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 0xD000000000000029;
  v38._object = (void *)0x80000001001F7D20;
  uint64_t v178 = 0xD000000000000029;
  String.append(_:)(v38);
  v39._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  unint64_t v196 = (unint64_t)"Device Record]------------\n";
  v39._object = (void *)0x80000001001F7150;
  String.append(_:)(v39);
  static os_log_type_t.default.getter();
  if (qword_100261960 != -1) {
    swift_once();
  }
  uint64_t v40 = (void *)qword_10026AE00;
  os_log(_:dso:log:_:_:)();
  sub_10015F1F8((uint64_t)v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_1000AA894((uint64_t)v29, &qword_1002623C0);
  }
  else
  {
    id v190 = v40;
    uint64_t v41 = (uint64_t)v36;
    sub_1000D8544((uint64_t)v29, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
    LODWORD(v177) = static os_log_type_t.default.getter();
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_1001CFDB0;
    sub_1000D8C04((uint64_t)v36, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
    uint64_t v43 = sub_1000BD8B0();
    uint64_t v45 = v44;
    sub_1000D8B88((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
    *(void *)(v42 + 56) = &type metadata for String;
    *(void *)(v42 + 64) = sub_1000AA5E0();
    *(void *)(v42 + 32) = v43;
    *(void *)(v42 + 40) = v45;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000D8C04(v41, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
    uint64_t v46 = sub_1000BD8B0();
    uint64_t v48 = v47;
    sub_1000D8B88((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
    v205._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v205._object = (void *)0xE700000000000000;
    v49._uint64_t countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v50._uint64_t countAndFlagsBits = 10;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    String.append(_:)(v205);
    swift_bridgeObjectRelease();
    sub_1000D8B88(v41, (uint64_t (*)(void))type metadata accessor for LegacyAccountMagicKeysRecord);
  }
  v51._object = (void *)(v197 | 0x8000000000000000);
  v51._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v51);
  v52._object = (void *)0x80000001001F7D80;
  v52._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v52);
  v53._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v53._object = (void *)(v196 | 0x8000000000000000);
  String.append(_:)(v53);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  id v190 = self;
  uint64_t v54 = &unk_100261000;
  if ([v190 isFirstUnlocked])
  {
    sub_10015F0D4();
    if (qword_100261850 != -1) {
      swift_once();
    }
    uint64_t v55 = (uint64_t)v193;
    uint64_t v56 = sub_1000AA0CC((uint64_t)v193, (uint64_t)qword_10026AAE0);
    uint64_t v57 = v192;
    uint64_t v58 = (uint64_t)v191;
    (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v191, v56, v55);
    uint64_t v59 = (char *)sub_10015CF90(v58);
    swift_release();
    uint64_t v60 = v55;
    id v61 = v59;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v60);
    uint64_t v54 = (void *)&unk_100261000;
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    id v61 = (char *)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v62 = *((void *)v61 + 2);
  uint64_t v204 = a2;
  if (v62)
  {
    unint64_t v63 = (*(unsigned __int8 *)(v199 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v199 + 80);
    unint64_t v177 = (unint64_t)v61;
    uint64_t v64 = (uint64_t)&v61[v63];
    uint64_t v65 = *(void *)(v199 + 72);
    long long v199 = xmmword_1001CFDB0;
    do
    {
      sub_1000D8C04(v64, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      static os_log_type_t.default.getter();
      sub_1000AA024((uint64_t *)&unk_100262110);
      uint64_t v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = v199;
      uint64_t v67 = sub_1000A56C4();
      uint64_t v69 = v68;
      *(void *)(v66 + 56) = &type metadata for String;
      *(void *)(v66 + 64) = sub_1000AA5E0();
      *(void *)(v66 + 32) = v67;
      *(void *)(v66 + 40) = v69;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      v70._uint64_t countAndFlagsBits = sub_1000A56C4();
      v205._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v205._object = (void *)0xE700000000000000;
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v71._uint64_t countAndFlagsBits = 10;
      v71._object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      String.append(_:)(v205);
      swift_bridgeObjectRelease();
      sub_1000D8B88((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for DeviceRecord);
      v64 += v65;
      --v62;
    }
    while (v62);
    swift_bridgeObjectRelease();
    uint64_t v54 = (void *)&unk_100261000;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v72._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  unint64_t v177 = (unint64_t)"==========================\n\n";
  v72._object = (void *)0x80000001001F7CF0;
  String.append(_:)(v72);
  v73._object = (void *)(v197 | 0x8000000000000000);
  v73._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v73);
  v74._object = (void *)0x80000001001F7E30;
  v74._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v74);
  v75._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v75._object = (void *)(v196 | 0x8000000000000000);
  String.append(_:)(v75);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if ([v190 isFirstUnlocked])
  {
    sub_10015F0D4();
    if (qword_1002618E8 != -1) {
      swift_once();
    }
    uint64_t v76 = (uint64_t)v193;
    uint64_t v77 = sub_1000AA0CC((uint64_t)v193, (uint64_t)qword_10026AD20);
    uint64_t v78 = v192;
    uint64_t v79 = (uint64_t)v191;
    (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v191, v77, v76);
    uint64_t v80 = sub_10015D000(v79);
    swift_release();
    uint64_t v81 = v76;
    uint64_t v82 = v80;
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v79, v81);
    uint64_t v83 = v80[2];
    if (v83)
    {
LABEL_23:
      unint64_t v84 = (*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
      uint64_t v175 = v82;
      uint64_t v85 = (uint64_t)v82 + v84;
      uint64_t v86 = *(void *)(v194 + 72);
      long long v199 = xmmword_1001CFDB0;
      do
      {
        sub_1000D8C04(v85, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
        static os_log_type_t.default.getter();
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v87 = swift_allocObject();
        *(_OWORD *)(v87 + 16) = v199;
        uint64_t v88 = sub_1000F8EB8();
        uint64_t v90 = v89;
        *(void *)(v87 + 56) = &type metadata for String;
        *(void *)(v87 + 64) = sub_1000AA5E0();
        *(void *)(v87 + 32) = v88;
        *(void *)(v87 + 40) = v90;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v91._uint64_t countAndFlagsBits = (uint64_t)sub_1000F8EB8();
        v205._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
        v205._object = (void *)0xE700000000000000;
        String.append(_:)(v91);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v92._uint64_t countAndFlagsBits = 10;
        v92._object = (void *)0xE100000000000000;
        String.append(_:)(v92);
        swift_bridgeObjectRelease();
        String.append(_:)(v205);
        swift_bridgeObjectRelease();
        sub_1000D8B88((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord);
        v85 += v86;
        --v83;
      }
      while (v83);
      swift_bridgeObjectRelease();
      uint64_t v54 = (void *)&unk_100261000;
      goto LABEL_30;
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    if (v54[297] != -1) {
      swift_once();
    }
    uint64_t v82 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
    uint64_t v83 = _swiftEmptyArrayStorage[2];
    if (v83) {
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
LABEL_30:
  unint64_t v194 = (unint64_t)"audioaccessoryd";
  v93._object = (void *)0x80000001001F70C0;
  v93._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v93);
  v94._object = (void *)(v197 | 0x8000000000000000);
  v94._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v94);
  v95._object = (void *)0x80000001001F7EF0;
  v95._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v95);
  v96._object = (void *)(v196 | 0x8000000000000000);
  v96._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v96);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v97 = v186;
  sub_100161850(v186);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v97, 1, v185) == 1)
  {
    sub_1000AA894(v97, (uint64_t *)&unk_100263BA0);
  }
  else
  {
    uint64_t v98 = v180;
    sub_1000D8544(v97, v180, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
    static os_log_type_t.default.getter();
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v99 = swift_allocObject();
    *(_OWORD *)(v99 + 16) = xmmword_1001CFDB0;
    uint64_t v100 = v179;
    sub_1000D8C04(v98, v179, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
    uint64_t v101 = sub_100103500();
    uint64_t v103 = v102;
    sub_1000D8B88(v100, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
    *(void *)(v99 + 56) = &type metadata for String;
    *(void *)(v99 + 64) = sub_1000AA5E0();
    *(void *)(v99 + 32) = v101;
    *(void *)(v99 + 40) = v103;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v54 = &unk_100261000;
    sub_1000D8C04(v98, v100, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
    uint64_t v104 = sub_100103500();
    uint64_t v106 = v105;
    sub_1000D8B88(v100, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
    v205._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v205._object = (void *)0xE700000000000000;
    v107._uint64_t countAndFlagsBits = v104;
    v107._object = v106;
    String.append(_:)(v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v108._uint64_t countAndFlagsBits = 10;
    v108._object = (void *)0xE100000000000000;
    String.append(_:)(v108);
    swift_bridgeObjectRelease();
    String.append(_:)(v205);
    swift_bridgeObjectRelease();
    sub_1000D8B88(v98, (uint64_t (*)(void))type metadata accessor for LegacyMagicPairingSettingsRecords);
  }
  v109._object = (void *)(v194 | 0x8000000000000000);
  v109._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v109);
  v110._object = (void *)(v197 | 0x8000000000000000);
  v110._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v110);
  v111._object = (void *)0x80000001001F7F50;
  v111._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v111);
  v112._object = (void *)(v196 | 0x8000000000000000);
  v112._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v112);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  if ([v190 isFirstUnlocked])
  {
    sub_10015F0D4();
    uint64_t v113 = v203;
    if (qword_100261890 != -1) {
      swift_once();
    }
    uint64_t v114 = (uint64_t)v193;
    uint64_t v115 = sub_1000AA0CC((uint64_t)v193, (uint64_t)qword_10026AB90);
    uint64_t v116 = v192;
    uint64_t v117 = (uint64_t)v191;
    (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v191, v115, v114);
    uint64_t v118 = sub_10015D070(v117);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v117, v114);
    uint64_t v119 = v118[2];
    if (v119)
    {
LABEL_37:
      uint64_t v120 = *(unsigned __int8 *)(v181 + 80);
      uint64_t v193 = v118;
      uint64_t v121 = (uint64_t)v118 + ((v120 + 32) & ~v120);
      uint64_t v122 = *(void *)(v181 + 72);
      long long v199 = xmmword_1001CFDB0;
      uint64_t v123 = v201;
      do
      {
        sub_1000D8C04(v121, v113, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
        static os_log_type_t.default.getter();
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v124 = swift_allocObject();
        *(_OWORD *)(v124 + 16) = v199;
        sub_1000D8C04(v203, v123, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
        uint64_t v125 = sub_1000DA054();
        uint64_t v127 = v126;
        sub_1000D8B88(v201, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
        *(void *)(v124 + 56) = &type metadata for String;
        *(void *)(v124 + 64) = sub_1000AA5E0();
        *(void *)(v124 + 32) = v125;
        *(void *)(v124 + 40) = v127;
        uint64_t v123 = v201;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_1000D8C04(v203, v123, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
        uint64_t v128 = sub_1000DA054();
        v130 = v129;
        sub_1000D8B88(v123, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
        v205._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
        v205._object = (void *)0xE700000000000000;
        v131._uint64_t countAndFlagsBits = v128;
        v131._object = v130;
        String.append(_:)(v131);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v132._uint64_t countAndFlagsBits = 10;
        v132._object = (void *)0xE100000000000000;
        String.append(_:)(v132);
        swift_bridgeObjectRelease();
        String.append(_:)(v205);
        uint64_t v113 = v203;
        swift_bridgeObjectRelease();
        sub_1000D8B88(v113, (uint64_t (*)(void))type metadata accessor for MagicPairingSettingsRecord);
        v121 += v122;
        --v119;
      }
      while (v119);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    uint64_t v113 = v203;
    if (v54[297] != -1) {
      swift_once();
    }
    uint64_t v118 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();
    uint64_t v119 = _swiftEmptyArrayStorage[2];
    if (v119) {
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRelease();
  v133._object = (void *)(v194 | 0x8000000000000000);
  v133._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v133);
  v134._object = (void *)(v197 | 0x8000000000000000);
  v134._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v134);
  v135._object = (void *)0x80000001001F8010;
  v135._uint64_t countAndFlagsBits = v178;
  String.append(_:)(v135);
  v136._object = (void *)(v196 | 0x8000000000000000);
  v136._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v136);
  v205._uint64_t countAndFlagsBits = 0x203A70696B53;
  v205._object = (void *)0xE600000000000000;
  sub_1000C2280();
  if (!IsAppleInternalBuild())
  {
    swift_release();
    goto LABEL_47;
  }
  id v137 = [self standardUserDefaults];
  NSString v138 = String._bridgeToObjectiveC()();
  unsigned __int8 v139 = [v137 BOOLForKey:v138];
  swift_release();

  if ((v139 & 1) == 0)
  {
LABEL_47:
    unint64_t v140 = 0xE500000000000000;
    uint64_t v141 = 0x65736C6166;
    goto LABEL_48;
  }
  unint64_t v140 = 0xE400000000000000;
  uint64_t v141 = 1702195828;
LABEL_48:
  unint64_t v142 = v140;
  String.append(_:)(*(Swift::String *)&v141);
  swift_bridgeObjectRelease();
  v143._uint64_t countAndFlagsBits = 10;
  v143._object = (void *)0xE100000000000000;
  String.append(_:)(v143);
  String.append(_:)(v205);
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  static os_log_type_t.default.getter();
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v144 = swift_allocObject();
  long long v203 = xmmword_1001CFDB0;
  *(_OWORD *)(v144 + 16) = xmmword_1001CFDB0;
  if (IsAppleInternalBuild())
  {
    id v145 = [self standardUserDefaults];
    NSString v146 = String._bridgeToObjectiveC()();
    unsigned __int8 v147 = [v145 BOOLForKey:v146];
  }
  else
  {
    unsigned __int8 v147 = 0;
  }
  *(void *)(v144 + 56) = &type metadata for Bool;
  *(void *)(v144 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v144 + 32) = v147;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v148 = v189;
  sub_100161B8C(v189);
  int v149 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v148, 1, v188);
  uint64_t v150 = v204;
  if (v149 == 1)
  {
    sub_1000AA894(v148, &qword_1002623B8);
  }
  else
  {
    uint64_t v153 = (uint64_t)v176;
    sub_1000D8544(v148, (uint64_t)v176, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
    v154._uint64_t countAndFlagsBits = sub_1000B7170();
    v205._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
    v205._object = (void *)0xE700000000000000;
    String.append(_:)(v154);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v155._uint64_t countAndFlagsBits = 10;
    v155._object = (void *)0xE100000000000000;
    String.append(_:)(v155);
    swift_bridgeObjectRelease();
    String.append(_:)(v205);
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    uint64_t v156 = swift_allocObject();
    *(_OWORD *)(v156 + 16) = v203;
    uint64_t v157 = sub_1000B7170();
    uint64_t v159 = v158;
    *(void *)(v156 + 56) = &type metadata for String;
    *(void *)(v156 + 64) = sub_1000AA5E0();
    *(void *)(v156 + 32) = v157;
    *(void *)(v156 + 40) = v159;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1000D8B88(v153, (uint64_t (*)(void))type metadata accessor for SoundProfileRecord);
  }
  uint64_t v151 = (uint64_t)v200;
  uint64_t v152 = v202;
  sub_1000ADF98(v150);
  sub_1001341AC(v150);
  sub_100136A6C(v150);
  v160._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v160._object = (void *)(v177 | 0x8000000000000000);
  String.append(_:)(v160);
  v161._object = (void *)(v197 | 0x8000000000000000);
  v161._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v161);
  v162._object = (void *)0x80000001001F8090;
  v162._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v162);
  v163._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v163._object = (void *)(v196 | 0x8000000000000000);
  String.append(_:)(v163);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v164 = sub_1001607FC();
  uint64_t v165 = *(void *)(v164 + 16);
  if (v165)
  {
    uint64_t v166 = *(unsigned __int8 *)(v182 + 80);
    *(void *)&long long v199 = v164;
    uint64_t v167 = v164 + ((v166 + 32) & ~v166);
    uint64_t v201 = *(void *)(v182 + 72);
    do
    {
      sub_1000D8C04(v167, v152, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      static os_log_type_t.default.getter();
      uint64_t v168 = swift_allocObject();
      *(_OWORD *)(v168 + 16) = v203;
      sub_1000D8C04(v202, v151, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      uint64_t v169 = String.init<A>(describing:)();
      uint64_t v171 = v170;
      *(void *)(v168 + 56) = &type metadata for String;
      *(void *)(v168 + 64) = sub_1000AA5E0();
      *(void *)(v168 + 32) = v169;
      *(void *)(v168 + 40) = v171;
      uint64_t v151 = (uint64_t)v200;
      os_log(_:dso:log:_:_:)();
      uint64_t v152 = v202;
      swift_bridgeObjectRelease();
      sub_1000D8C04(v152, v151, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      v172._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      v205._uint64_t countAndFlagsBits = 0xA2D2D2D2D2D0ALL;
      v205._object = (void *)0xE700000000000000;
      String.append(_:)(v172);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v173._uint64_t countAndFlagsBits = 10;
      v173._object = (void *)0xE100000000000000;
      String.append(_:)(v173);
      swift_bridgeObjectRelease();
      String.append(_:)(v205);
      swift_bridgeObjectRelease();
      sub_1000D8B88(v152, (uint64_t (*)(void))type metadata accessor for BTDeferredRecord);
      v167 += v201;
      --v165;
    }
    while (v165);
  }
  swift_bridgeObjectRelease();
  v174._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v174._object = (void *)(v194 | 0x8000000000000000);
  String.append(_:)(v174);
}

uint64_t sub_1000D6D80(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v3 + OBJC_IVAR____TtC15audioaccessoryd13DeviceManager_clientQueue);
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = v13;
  *(unsigned char *)(v14 + 32) = a2;
  aBlock[4] = sub_1000D76D4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100106F90;
  void aBlock[3] = &unk_100236D28;
  uint64_t v15 = _Block_copy(aBlock);
  id v16 = v12;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_1000D79CC((unint64_t *)&qword_100263140, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000AA024(&qword_100263550);
  sub_1000D8D38((unint64_t *)&qword_100263150, &qword_100263550);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v19);
  swift_release();
  return swift_release();
}

void sub_1000D7080(char a1, uint64_t a2, char a3)
{
  static os_log_type_t.default.getter();
  if (qword_100261940 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001CFDB0;
  *(void *)(v5 + 56) = &type metadata for Bool;
  *(void *)(v5 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v5 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = (void *)swift_unknownObjectWeakLoadStrong();

    if (v8)
    {
      [v8 accountStatusUpdateWithAvailable:a1 & 1 forced:a3 & 1];
      swift_unknownObjectRelease();
    }
  }
}

void sub_1000D71D4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    static os_log_type_t.default.getter();
    if (qword_100261940 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1001CFDB0;
    sub_1000B66A0(0, (unint64_t *)&unk_100263B40);
    swift_bridgeObjectRetain();
    uint64_t v3 = Array.description.getter();
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_1000AA5E0();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v6 = swift_unknownObjectWeakLoadStrong();
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [v7 magicPairingRecordsRemovedWithRecords:isa];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t sub_1000D737C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudCoordinatorConfiguration();
  __chkstk_darwin(v2);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10015F0D4();
  uint64_t v12 = a1;
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  static os_log_type_t.default.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001CFDB0;
  sub_1000D8C04(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for CloudCoordinatorConfiguration);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000AA5E0();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D7664()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D769C()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

void sub_1000D76D4()
{
  sub_1000D7080(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_1000D76E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D76F4()
{
  return swift_release();
}

void sub_1000D76FC(uint64_t a1@<X8>)
{
  sub_10015EC68(v1, a1);
}

uint64_t sub_1000D7718()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

void sub_1000D7734()
{
  sub_1000D5128(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000D7740()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D7750()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D776C()
{
  return sub_1000D3E8C(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000D7778()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D77B8()
{
  return sub_10018BCA8(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000D77C4()
{
  return sub_1000D86E8();
}

uint64_t sub_1000D77CC()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D77E8()
{
  return sub_1000D3884(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000D77F8()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

void sub_1000D7814()
{
  sub_1000D34C4(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_1000D7820()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D783C()
{
  return sub_1000D2DD4(*(void *)(v0 + 16), *(void (**)(void, uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000D784C(void *a1)
{
  return sub_1000D2F50(a1, v1[2], v1[3], v1[4]);
}

void sub_1000D785C()
{
  sub_1000D3220(*(void **)(v0 + 16), *(void (**)(void *, uint64_t))(v0 + 24));
}

uint64_t sub_1000D7868()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

void sub_1000D7884()
{
  sub_1000D2868(*(void *)(v0 + 16), *(void (**)(void, uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000D7890()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D7964()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = (void (*)(void))v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)((char *)v0
                + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_1000D2440(v2, v3, v4, v5);
}

uint64_t sub_1000D79CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D7A14()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D7A4C(uint64_t a1)
{
  return sub_1000D15BC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000D7A74(uint64_t a1)
{
  return sub_1000D15BC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000D7A9C(uint64_t a1)
{
  return sub_1000D15BC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000D7AC8()
{
  return sub_1000D7DA4((uint64_t (*)(void, void, void, void, void))sub_1000D170C);
}

void *sub_1000D7AE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v22 = v4;
      unint64_t v23 = v7;
      unint64_t v24 = v7 & 0xC000000000000001;
      uint64_t v4 = 4;
      do
      {
        uint64_t v9 = v4 - 4;
        if (v24)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v10 = *(id *)(v7 + 8 * v4);
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        uint64_t v13 = v10;
        uint64_t v14 = a3;
        id v15 = [v10 bluetoothAddress:v22];
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        a3 = v14;
        BOOL v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_18;
        }

        ++v4;
        uint64_t v8 = v12;
        BOOL v19 = v11 == v12;
        unint64_t v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1000D7C8C()
{
  unint64_t result = qword_1002623C8;
  if (!qword_1002623C8)
  {
    sub_1000B66A0(255, (unint64_t *)&qword_100261D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002623C8);
  }
  return result;
}

uint64_t sub_1000D7CF4()
{
  return sub_1000D85D4(48);
}

uint64_t sub_1000D7CFC()
{
  return sub_1000D08A4(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000D7D0C()
{
  return sub_1000D0DF8(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1000D7D3C()
{
  return sub_1000D85D4(48);
}

uint64_t sub_1000D7D44()
{
  return sub_1000CFAE0(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000D7D54()
{
  return sub_1000D0DF8(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1000D7D8C()
{
  return sub_1000D7DA4((uint64_t (*)(void, void, void, void, void))sub_1000CF104);
}

uint64_t sub_1000D7DA4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000D7DBC()
{
  return sub_1000D87AC((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D7DD8()
{
  return sub_1000D86E8();
}

uint64_t sub_1000D7DE0()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D7DFC()
{
  return sub_1000CE2C4(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000D7E08()
{
  return sub_1000D8AD8((void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000D7E24()
{
  return sub_1000CA074(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), (unint64_t *)&unk_100263B40);
}

uint64_t sub_1000D7E60()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

void sub_1000D7E7C()
{
  sub_1000CDF54(*(void *)(v0 + 16), *(void (**)(uint64_t, unint64_t))(v0 + 24));
}

uint64_t sub_1000D7E88()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 41);
}

uint64_t sub_1000D7EA4()
{
  return sub_1000CDDF8(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_1000D7EB4()
{
  return sub_1000D85D4(49);
}

uint64_t sub_1000D7EBC()
{
  return sub_1000CD994(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t sub_1000D7ED0()
{
  return sub_1000D7DA4((uint64_t (*)(void, void, void, void, void))sub_1000CD434);
}

uint64_t sub_1000D7EEC()
{
  return sub_1000D85D4(48);
}

uint64_t sub_1000D7EF4()
{
  return sub_1000CCE5C(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000D7F04()
{
  return sub_1000D0DF8(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1000D7F34()
{
  return sub_1000D85D4(48);
}

uint64_t sub_1000D7F3C()
{
  return sub_1000CC398(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000D7F4C()
{
  return sub_1000D0DF8(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1000D7F84()
{
  return sub_1000D7DA4((uint64_t (*)(void, void, void, void, void))sub_1000CA294);
}

uint64_t sub_1000D7F9C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000D7FDC()
{
  return sub_1000CC0F8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_1000D7FEC()
{
  return sub_1000D83A4((uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CC200);
}

uint64_t sub_1000D8018()
{
  uint64_t v1 = (int *)(type metadata accessor for BTDeferredRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[8];
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)(v0 + v3 + v1[11]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_1000AA8F0(*v7, v8);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000D815C()
{
  return sub_1000D83A4((uint64_t (*)(void))type metadata accessor for BTDeferredRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CBF78);
}

uint64_t sub_1000D818C()
{
  uint64_t v1 = (int *)(type metadata accessor for DeviceSupportInformationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_1000AA8F0(*(void *)(v6 + v1[7]), *(void *)(v6 + v1[7] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v6 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000D8378()
{
  return sub_1000D83A4((uint64_t (*)(void))type metadata accessor for DeviceSupportInformationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000CBE4C);
}

uint64_t sub_1000D83A4(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v2 + v4;
  uint64_t v6 = (uint64_t *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return a2(v5, v7, v8);
}

uint64_t sub_1000D8450()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D846C()
{
  return sub_1000C8C20(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000D8478()
{
  return sub_1000D8AD8((void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000D8494()
{
  return sub_1000CA074(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), &qword_1002623E0);
}

uint64_t sub_1000D84D4()
{
  return sub_1000D7DA4((uint64_t (*)(void, void, void, void, void))sub_1000C88EC);
}

uint64_t sub_1000D84F0()
{
  return sub_1000D85D4(48);
}

uint64_t sub_1000D84F8()
{
  return sub_1000C7E70(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000D8504()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D853C()
{
  return sub_1000C8820(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1000D8544(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D85B0()
{
  return sub_1000D85D4(48);
}

uint64_t sub_1000D85B8()
{
  return sub_1000C77F0(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000D85CC()
{
  return sub_1000D85D4(48);
}

uint64_t sub_1000D85D4(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000D8628()
{
  return sub_1000C71C4(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000D8638()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D8678()
{
  return sub_1000D0DF8(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_1000D86A8()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D86E8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t sub_1000D8718()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

void sub_1000D8734()
{
  sub_1000C6E40(*(void *)(v0 + 16), *(void (**)(uint64_t, unint64_t))(v0 + 24));
}

uint64_t sub_1000D8740()
{
  return sub_1000C6D68();
}

uint64_t sub_1000D8748()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D8788()
{
  return sub_1000C69A4(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000D8790()
{
  return sub_1000D87AC((void (*)(void))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_1000D87AC(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, a2, 7);
}

void sub_1000D8800()
{
  sub_1000C5FF4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void ***)(v0 + 40));
}

uint64_t sub_1000D880C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D8820()
{
  return sub_1000D7DA4((uint64_t (*)(void, void, void, void, void))sub_1000C52C0);
}

uint64_t sub_1000D8838()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_1000D8864()
{
  uint64_t v1 = (int *)(type metadata accessor for DeviceRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_1000AA8F0(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v6 + v1[14];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);

  return _swift_deallocObject(v0, v4, v5);
}

void sub_1000D8A00()
{
  type metadata accessor for DeviceRecord();
  uint64_t v1 = *(void (**)(void))(v0 + 16);
  id v2 = sub_1000C50F4();
  v1();
}

uint64_t sub_1000D8A94()
{
  return sub_1000D8AD8((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D8AB0()
{
  return sub_1000C3ED4(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000D8ABC()
{
  return sub_1000D8AD8((void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1000D8AD8(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 16));
  swift_release();

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1000D8B2C()
{
  return sub_1000CA074(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), &qword_100263B50);
}

uint64_t sub_1000D8B68()
{
  return sub_1000C36AC();
}

uint64_t sub_1000D8B70()
{
  return sub_1000C34F0();
}

void sub_1000D8B78()
{
}

uint64_t sub_1000D8B80()
{
  return sub_1000C3370();
}

uint64_t sub_1000D8B88(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1000D8BE8()
{
  sub_10015650C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000D8C04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D8C6C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000D8CA4(uint64_t a1, uint64_t a2)
{
  sub_1000D2D3C(a1, a2, *(void *)(v2 + 16));
}

void sub_1000D8CAC(uint64_t a1)
{
  sub_1000CA1EC(a1, *(void *)(v1 + 16), (unint64_t *)&unk_100263B40);
}

void sub_1000D8CD8(uint64_t a1, unint64_t a2)
{
  sub_1000C7130(a1, a2, *(void *)(v2 + 16));
}

void sub_1000D8CE0(uint64_t a1)
{
  sub_1000CA1EC(a1, *(void *)(v1 + 16), &qword_1002623E0);
}

void sub_1000D8D0C(uint64_t a1)
{
  sub_1000CA1EC(a1, *(void *)(v1 + 16), &qword_100263B50);
}

uint64_t sub_1000D8D38(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000AF194(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D8D88()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D8DC0(void *a1)
{
  return sub_1000D97A8(a1, *(void *)(v1 + 16));
}

void sub_1000D8DC8()
{
}

uint64_t sub_1000D8DD0(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for DeviceManager.DeviceManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D8EC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceManager.DeviceManagerError()
{
  return &type metadata for DeviceManager.DeviceManagerError;
}

uint64_t getEnumTagSinglePayload for AudioAccessoryFeatures(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AudioAccessoryFeatures(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000D8FECLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D9014()
{
  return 0;
}

ValueMetadata *type metadata accessor for AudioAccessoryFeatures()
{
  return &type metadata for AudioAccessoryFeatures;
}

unint64_t sub_1000D9030()
{
  unint64_t result = qword_1002623E8;
  if (!qword_1002623E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002623E8);
  }
  return result;
}

unint64_t sub_1000D908C()
{
  unint64_t result = qword_1002623F0;
  if (!qword_1002623F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002623F0);
  }
  return result;
}

unint64_t sub_1000D90E0()
{
  unint64_t result = qword_1002623F8;
  if (!qword_1002623F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002623F8);
  }
  return result;
}

uint64_t *DarwinNotificationManager.shared.unsafeMutableAddressor()
{
  if (qword_100261888 != -1) {
    swift_once();
  }
  return &static DarwinNotificationManager.shared;
}

id sub_1000D944C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for DarwinNotificationManager()) init];
  static DarwinNotificationManager.shared = (uint64_t)result;
  return result;
}

id static DarwinNotificationManager.shared.getter()
{
  if (qword_100261888 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static DarwinNotificationManager.shared;

  return v0;
}

uint64_t DarwinNotificationManager.registerHelper(helper:)()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t DarwinNotificationManager.unregisterHelper(helper:)(uint64_t a1)
{
  int v3 = (void *)(v1 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
  swift_beginAccess();
  swift_retain();
  unint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000D9C68(v4, a1);
  swift_bridgeObjectRelease();
  swift_release();
  *int v3 = v5;
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall DarwinNotificationManager.setUp()()
{
  uint64_t v1 = v0;
  sub_1000D9DC4();
  int v2 = static OS_dispatch_queue.main.getter();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  void v6[4] = sub_1000D8DC0;
  void v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  void v6[2] = sub_1000D9AC4;
  v6[3] = &unk_1002388D8;
  unint64_t v4 = _Block_copy(v6);
  id v5 = v1;
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v2, v4);
  _Block_release(v4);
}

uint64_t sub_1000D97A8(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v6 = v5;
    static os_log_type_t.default.getter();
    if (qword_100261928 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1001CFDB0;
    *(void *)(v7 + 56) = &type metadata for String;
    unint64_t v26 = sub_1000AA5E0();
    *(void *)(v7 + 64) = v26;
    *(void *)(v7 + 32) = v4;
    *(void *)(v7 + 40) = v6;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = (uint64_t *)(a2 + OBJC_IVAR____TtC15audioaccessoryd25DarwinNotificationManager_helpers);
    swift_beginAccess();
    uint64_t v9 = *v8;
    if ((unint64_t)*v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v10 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v10)
      {
LABEL_6:
        if (v10 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v11 = 0;
        unint64_t v12 = v9 & 0xC000000000000001;
        unint64_t v24 = v9 & 0xC000000000000001;
        uint64_t v25 = v9;
        do
        {
          if (v12)
          {
            uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v13 = *(void *)(v9 + 8 * v11 + 32);
            swift_retain();
          }
          NSString v14 = String._bridgeToObjectiveC()();
          uint64_t v15 = *(void *)(v13 + 16);
          if (*(void *)(v15 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v16 = sub_1000B503C((uint64_t)v14);
            if (v17)
            {
              uint64_t v27 = *(void (**)(uint64_t))(*(void *)(v15 + 56) + 16 * v16);
              swift_retain();
              swift_bridgeObjectRelease();
              static os_log_type_t.default.getter();
              uint64_t v18 = v4;
              uint64_t v19 = v6;
              uint64_t v20 = swift_allocObject();
              *(_OWORD *)(v20 + 16) = xmmword_1001CFDB0;
              uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              *(void *)(v20 + 56) = &type metadata for String;
              *(void *)(v20 + 64) = v26;
              *(void *)(v20 + 32) = v21;
              *(void *)(v20 + 40) = v22;
              os_log(_:dso:log:_:_:)();
              uint64_t v6 = v19;
              uint64_t v4 = v18;
              unint64_t v12 = v24;
              uint64_t v23 = swift_bridgeObjectRelease();
              v27(v23);
              swift_release();

              uint64_t v9 = v25;
              swift_release();
            }
            else
            {
              swift_release();

              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_release();
          }
          ++v11;
        }
        while (v10 != v11);
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000D9AC4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

id DarwinNotificationManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DarwinNotificationManager();
  return [super dealloc];
}

void *sub_1000D9C68(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_1000D9DC4()
{
  unint64_t result = qword_100263210;
  if (!qword_100263210)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100263210);
  }
  return result;
}

uint64_t sub_1000D9E04()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D9E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D9E4C()
{
  return swift_release();
}

uint64_t type metadata accessor for DarwinNotificationManager()
{
  return self;
}

uint64_t sub_1000D9E88()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v5, qword_10026AB90);
  sub_1000AA0CC(v3, (uint64_t)qword_10026AB90);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

uint64_t sub_1000DA054()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for MagicPairingSettingsRecord();
  __chkstk_darwin(v2);
  uint64_t v195 = (uint64_t)&v188 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v196 = (char *)&v188 - v5;
  uint64_t v192 = (void *)type metadata accessor for Date();
  uint64_t v6 = *(v192 - 1);
  __chkstk_darwin(v192);
  uint64_t v188 = (char *)&v188 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v8 - 8);
  uint64_t v193 = (char *)&v188 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v194 = (char *)&v188 - v11;
  __chkstk_darwin(v12);
  NSString v14 = (char *)&v188 - v13;
  __chkstk_darwin(v15);
  char v17 = (char *)&v188 - v16;
  id v197 = sub_1000B6C74();
  uint64_t v198 = 0;
  unint64_t v199 = 0xE000000000000000;
  _StringGuts.grow(_:)(436);
  v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v18._object = (void *)0x80000001001F9130;
  String.append(_:)(v18);
  type metadata accessor for UUID();
  sub_1000E6964((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  uint64_t v21 = (uint64_t *)(v0 + v2[6]);
  uint64_t v23 = *v21;
  uint64_t v22 = (void *)v21[1];
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v23;
  v24._object = v22;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0x203A646970202CLL;
  v25._object = (void *)0xE700000000000000;
  String.append(_:)(v25);
  unint64_t v26 = (uint64_t *)(v0 + v2[13]);
  uint64_t v27 = *v26;
  uint64_t v28 = (void *)v26[1];
  swift_bridgeObjectRetain();
  v29._uint64_t countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0x203A646976202CLL;
  v30._object = (void *)0xE700000000000000;
  String.append(_:)(v30);
  uint64_t v31 = (uint64_t *)(v0 + v2[14]);
  uint64_t v32 = *v31;
  uint64_t v33 = (void *)v31[1];
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 0x72657473616D202CLL;
  v35._object = (void *)0xEE00203A746E6948;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = Data.hexString.getter(*(void *)(v1 + v2[8]), *(void *)(v1 + v2[8] + 8));
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0x72657473616D202CLL;
  v37._object = (void *)0xED0000203A79654BLL;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = Data.hexString.getter(*(void *)(v1 + v2[7]), *(void *)(v1 + v2[7] + 8));
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._object = (void *)0x80000001001F9150;
  v39._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v39);
  v40._uint64_t countAndFlagsBits = Data.hexString.getter(*(void *)(v1 + v2[10]), *(void *)(v1 + v2[10] + 8));
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._object = (void *)0x80000001001F9170;
  v41._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v41);
  v42._uint64_t countAndFlagsBits = Data.hexString.getter(*(void *)(v1 + v2[9]), *(void *)(v1 + v2[9] + 8));
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._object = (void *)0x80000001001F9190;
  v43._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v43);
  v44._uint64_t countAndFlagsBits = Data.hexString.getter(*(void *)(v1 + v2[12]), *(void *)(v1 + v2[12] + 8));
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 0x203A6B7269202CLL;
  v45._object = (void *)0xE700000000000000;
  String.append(_:)(v45);
  v46._uint64_t countAndFlagsBits = Data.hexString.getter(*(void *)(v1 + v2[11]), *(void *)(v1 + v2[11] + 8));
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 0x6E6F74747562202CLL;
  v47._object = (void *)0xEF203A7365646F4DLL;
  String.append(_:)(v47);
  uint64_t v48 = (uint64_t *)(v0 + v2[15]);
  uint64_t v49 = *v48;
  Swift::String v50 = (void *)v48[1];
  swift_bridgeObjectRetain();
  v51._uint64_t countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._uint64_t countAndFlagsBits = 0x3A726F6C6F63202CLL;
  v52._object = (void *)0xE900000000000020;
  String.append(_:)(v52);
  Swift::String v53 = (uint64_t *)(v0 + v2[16]);
  uint64_t v54 = *v53;
  uint64_t v55 = (void *)v53[1];
  swift_bridgeObjectRetain();
  v56._uint64_t countAndFlagsBits = v54;
  v56._object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._object = (void *)0x80000001001F91B0;
  v57._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v57);
  uint64_t v58 = (uint64_t *)(v0 + v2[17]);
  uint64_t v59 = *v58;
  uint64_t v60 = (void *)v58[1];
  swift_bridgeObjectRetain();
  v61._uint64_t countAndFlagsBits = v59;
  v61._object = v60;
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v62._object = (void *)0x80000001001F91D0;
  v62._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v62);
  unint64_t v63 = (uint64_t *)(v0 + v2[18]);
  uint64_t v64 = *v63;
  uint64_t v65 = (void *)v63[1];
  swift_bridgeObjectRetain();
  v66._uint64_t countAndFlagsBits = v64;
  v66._object = v65;
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v67._object = (void *)0x80000001001F91F0;
  v67._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v67);
  uint64_t v68 = (uint64_t *)(v0 + v2[21]);
  uint64_t v69 = *v68;
  Swift::String v70 = (void *)v68[1];
  swift_bridgeObjectRetain();
  v71._uint64_t countAndFlagsBits = v69;
  v71._object = v70;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  v72._object = (void *)0x80000001001F9210;
  v72._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v72);
  Swift::String v73 = (uint64_t *)(v0 + v2[19]);
  uint64_t v74 = *v73;
  Swift::String v75 = (void *)v73[1];
  swift_bridgeObjectRetain();
  v76._uint64_t countAndFlagsBits = v74;
  v76._object = v75;
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  v77._uint64_t countAndFlagsBits = 0xD000000000000017;
  v77._object = (void *)0x80000001001F9230;
  String.append(_:)(v77);
  uint64_t v78 = (uint64_t *)(v0 + v2[20]);
  uint64_t v79 = *v78;
  uint64_t v80 = (void *)v78[1];
  swift_bridgeObjectRetain();
  v81._uint64_t countAndFlagsBits = v79;
  v81._object = v80;
  String.append(_:)(v81);
  swift_bridgeObjectRelease();
  v82._object = (void *)0xEB00000000203A74;
  v82._uint64_t countAndFlagsBits = 0x656863746172202CLL;
  String.append(_:)(v82);
  uint64_t v83 = (uint64_t *)(v0 + v2[24]);
  uint64_t v84 = *v83;
  uint64_t v85 = (void *)v83[1];
  swift_bridgeObjectRetain();
  v86._uint64_t countAndFlagsBits = v84;
  v86._object = v85;
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87._object = (void *)0x80000001001F9250;
  v87._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v87);
  uint64_t v88 = (uint64_t *)(v0 + v2[26]);
  uint64_t v89 = *v88;
  uint64_t v90 = (void *)v88[1];
  swift_bridgeObjectRetain();
  v91._uint64_t countAndFlagsBits = v89;
  v91._object = v90;
  String.append(_:)(v91);
  swift_bridgeObjectRelease();
  v92._object = (void *)0x80000001001F9270;
  v92._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v92);
  Swift::String v93 = (uint64_t *)(v0 + v2[27]);
  uint64_t v94 = *v93;
  Swift::String v95 = (void *)v93[1];
  swift_bridgeObjectRetain();
  v96._uint64_t countAndFlagsBits = v94;
  v96._object = v95;
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._uint64_t countAndFlagsBits = 0x6F6973726576202CLL;
  v97._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v97);
  uint64_t v98 = (uint64_t *)(v0 + v2[28]);
  uint64_t v99 = *v98;
  uint64_t v100 = (void *)v98[1];
  swift_bridgeObjectRetain();
  v101._uint64_t countAndFlagsBits = v99;
  v101._object = v100;
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  v102._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v102._object = (void *)0x80000001001F9290;
  String.append(_:)(v102);
  uint64_t v103 = (uint64_t *)(v0 + v2[22]);
  uint64_t v104 = *v103;
  id v105 = (void *)v103[1];
  swift_bridgeObjectRetain();
  v106._uint64_t countAndFlagsBits = v104;
  v106._object = v105;
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v107._uint64_t countAndFlagsBits = 0xD000000000000026;
  v107._object = (void *)0x80000001001F92B0;
  String.append(_:)(v107);
  Swift::String v108 = (uint64_t *)(v0 + v2[23]);
  uint64_t v109 = *v108;
  Swift::String v110 = (void *)v108[1];
  swift_bridgeObjectRetain();
  v111._uint64_t countAndFlagsBits = v109;
  v111._object = v110;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._uint64_t countAndFlagsBits = 2604;
  v112._object = (void *)0xE200000000000000;
  String.append(_:)(v112);
  uint64_t v114 = v198;
  unint64_t v113 = v199;
  uint64_t v198 = 0;
  unint64_t v199 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v115._uint64_t countAndFlagsBits = 0x7461657263202020;
  v115._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v115);
  id v116 = [v197 creationDate];
  unint64_t v191 = v113;
  if (v116)
  {
    uint64_t v117 = v116;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v6 + 56);
    uint64_t v119 = v14;
    uint64_t v120 = 0;
  }
  else
  {
    uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v6 + 56);
    uint64_t v119 = v14;
    uint64_t v120 = 1;
  }
  uint64_t v121 = v192;
  uint64_t v189 = v118;
  v118((uint64_t)v119, v120, 1, v192);
  uint64_t v122 = (uint64_t)v196;
  sub_1000AA798((uint64_t)v14, (uint64_t)v17);
  uint64_t v192 = *(void **)(v6 + 48);
  int v123 = ((uint64_t (*)(char *, uint64_t, void *))v192)(v17, 1, v121);
  uint64_t v190 = v114;
  if (v123)
  {
    uint64_t v124 = v121;
    sub_1000AA894((uint64_t)v17, &qword_100261D90);
    sub_1000E4E04(v1, v122);
  }
  else
  {
    uint64_t v125 = v188;
    (*(void (**)(char *, char *, void *))(v6 + 16))(v188, v17, v121);
    sub_1000AA894((uint64_t)v17, &qword_100261D90);
    uint64_t v126 = v6;
    uint64_t v127 = v121;
    uint64_t v128 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v130 = [v128 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v133 = v132;

    Swift::String v134 = *(void (**)(char *, void *))(v126 + 8);
    Swift::String v135 = v125;
    uint64_t v124 = v127;
    Swift::String v136 = v127;
    uint64_t v6 = v126;
    uint64_t v122 = (uint64_t)v196;
    v134(v135, v136);
    sub_1000E4E04(v1, v122);
    if (v133) {
      goto LABEL_8;
    }
  }
  id v137 = self;
  Class v138 = Date._bridgeToObjectiveC()().super.isa;
  id v139 = [v137 localizedStringFromDate:v138 dateStyle:2 timeStyle:2];

  uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v133 = v140;

LABEL_8:
  sub_1000E4E68(v122);
  v141._uint64_t countAndFlagsBits = v131;
  v141._object = v133;
  String.append(_:)(v141);
  swift_bridgeObjectRelease();
  v142._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v142._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v142);
  id v143 = [v197 modificationDate];
  if (v143)
  {
    uint64_t v144 = v143;
    uint64_t v145 = (uint64_t)v193;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v146 = 0;
    unsigned __int8 v147 = v124;
  }
  else
  {
    uint64_t v146 = 1;
    unsigned __int8 v147 = v124;
    uint64_t v145 = (uint64_t)v193;
  }
  uint64_t v148 = (uint64_t)v194;
  uint64_t v149 = v190;
  uint64_t v150 = (unsigned int (*)(uint64_t, uint64_t, void *))v192;
  v189(v145, v146, 1, v147);
  sub_1000AA798(v145, v148);
  if (v150(v148, 1, v147))
  {
    sub_1000AA894(v148, &qword_100261D90);
    uint64_t v151 = v1;
    uint64_t v152 = v195;
    sub_1000E4E04(v151, v195);
    id v153 = v197;
    unint64_t v154 = v191;
  }
  else
  {
    Swift::String v155 = v188;
    (*(void (**)(char *, uint64_t, void *))(v6 + 16))(v188, v148, v147);
    sub_1000AA894(v148, &qword_100261D90);
    uint64_t v156 = v6;
    uint64_t v157 = v147;
    uint64_t v158 = self;
    Class v159 = Date._bridgeToObjectiveC()().super.isa;
    id v160 = [v158 localizedStringFromDate:v159 dateStyle:2 timeStyle:2];

    uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v163 = v162;

    (*(void (**)(char *, void *))(v156 + 8))(v155, v157);
    uint64_t v164 = v1;
    uint64_t v152 = v195;
    sub_1000E4E04(v164, v195);
    id v153 = v197;
    unint64_t v154 = v191;
    if (v163) {
      goto LABEL_15;
    }
  }
  uint64_t v165 = self;
  Class v166 = Date._bridgeToObjectiveC()().super.isa;
  id v167 = [v165 localizedStringFromDate:v166 dateStyle:2 timeStyle:2];

  uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v163 = v168;

LABEL_15:
  sub_1000E4E68(v152);
  v169._uint64_t countAndFlagsBits = v161;
  v169._object = v163;
  String.append(_:)(v169);
  swift_bridgeObjectRelease();
  v170._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v170._object = (void *)0xEF203A7962206465;
  String.append(_:)(v170);
  id v171 = [v153 modifiedByDevice];
  if (v171)
  {
    Swift::String v172 = v171;
    uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v175 = v174;
  }
  else
  {
    uint64_t v175 = (void *)0xE200000000000000;
    uint64_t v173 = 15932;
  }
  v176._uint64_t countAndFlagsBits = v173;
  v176._object = v175;
  String.append(_:)(v176);
  swift_bridgeObjectRelease();
  v177._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v177._object = (void *)0xE800000000000000;
  String.append(_:)(v177);
  id v178 = [v153 recordChangeTag];
  if (v178)
  {
    uint64_t v179 = v178;
    uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v182 = v181;
  }
  else
  {
    uint64_t v182 = (void *)0xE200000000000000;
    uint64_t v180 = 15932;
  }
  v183._uint64_t countAndFlagsBits = v180;
  v183._object = v182;
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  uint64_t v184 = v198;
  uint64_t v185 = (void *)v199;
  uint64_t v198 = v149;
  unint64_t v199 = v154;
  swift_bridgeObjectRetain();
  v186._uint64_t countAndFlagsBits = v184;
  v186._object = v185;
  String.append(_:)(v186);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v198;
}

uint64_t sub_1000DAE44@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v154 = *(void *)(v6 - 8);
  uint64_t v155 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for MagicPairingSettingsRecord();
  *(_OWORD *)(a3 + v9[5]) = xmmword_1001D1A50;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v153 = a1;
  v12(a3, a1, v10);
  id v13 = [a2 bluetoothAddress];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  char v17 = (uint64_t *)(a3 + v9[6]);
  *char v17 = v14;
  v17[1] = v16;
  id v18 = [a2 productID];
  if (v18)
  {
    Swift::String v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v22 = 0xE000000000000000;
  }
  uint64_t v23 = (uint64_t *)(a3 + v9[13]);
  *uint64_t v23 = v20;
  v23[1] = v22;
  id v24 = [a2 vendorID];
  if (v24)
  {
    Swift::String v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v28 = 0xE000000000000000;
  }
  Swift::String v29 = (uint64_t *)(a3 + v9[14]);
  *Swift::String v29 = v26;
  v29[1] = v28;
  id v30 = [a2 masterHint];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v34 = 0xC000000000000000;
  }
  Swift::String v35 = (uint64_t *)(a3 + v9[8]);
  *Swift::String v35 = v32;
  v35[1] = v34;
  id v36 = [a2 masterKey];
  if (v36)
  {
    Swift::String v37 = v36;
    uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v40 = 0xC000000000000000;
  }
  Swift::String v41 = (uint64_t *)(a3 + v9[7]);
  *Swift::String v41 = v38;
  v41[1] = v40;
  id v42 = [a2 accessoryHint];
  if (v42)
  {
    Swift::String v43 = v42;
    uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v46 = 0xC000000000000000;
  }
  Swift::String v47 = (uint64_t *)(a3 + v9[10]);
  *Swift::String v47 = v44;
  v47[1] = v46;
  id v48 = [a2 accessoryKey];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v52 = v51;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v52 = 0xC000000000000000;
  }
  Swift::String v53 = (uint64_t *)(a3 + v9[9]);
  *Swift::String v53 = v50;
  v53[1] = v52;
  id v54 = [a2 buttonModes];
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;
  }
  else
  {
    uint64_t v56 = 0;
    unint64_t v58 = 0xE000000000000000;
  }
  uint64_t v59 = (uint64_t *)(a3 + v9[15]);
  uint64_t *v59 = v56;
  v59[1] = v58;
  id v60 = [a2 color];
  if (v60)
  {
    Swift::String v61 = v60;
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v64 = v63;
  }
  else
  {
    uint64_t v62 = 0;
    unint64_t v64 = 0xE000000000000000;
  }
  uint64_t v65 = (uint64_t *)(a3 + v9[16]);
  uint64_t *v65 = v62;
  v65[1] = v64;
  id v66 = [a2 deviceIDFeatureBitsV1];
  if (v66)
  {
    Swift::String v67 = v66;
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v70 = v69;
  }
  else
  {
    uint64_t v68 = 0;
    unint64_t v70 = 0xE000000000000000;
  }
  Swift::String v71 = (uint64_t *)(a3 + v9[17]);
  *Swift::String v71 = v68;
  v71[1] = v70;
  id v72 = [a2 deviceIDFeatureBitsV2];
  if (v72)
  {
    Swift::String v73 = v72;
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v76 = v75;
  }
  else
  {
    uint64_t v74 = 0;
    unint64_t v76 = 0xE000000000000000;
  }
  Swift::String v77 = (uint64_t *)(a3 + v9[18]);
  uint64_t *v77 = v74;
  v77[1] = v76;
  id v78 = [a2 encryptionKey];
  if (v78)
  {
    uint64_t v79 = v78;
    uint64_t v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v82 = v81;
  }
  else
  {
    uint64_t v80 = 0;
    unint64_t v82 = 0xC000000000000000;
  }
  uint64_t v83 = (uint64_t *)(a3 + v9[12]);
  *uint64_t v83 = v80;
  v83[1] = v82;
  id v84 = [a2 irk];
  if (v84)
  {
    uint64_t v85 = v84;
    uint64_t v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v88 = v87;
  }
  else
  {
    uint64_t v86 = 0;
    unint64_t v88 = 0xC000000000000000;
  }
  uint64_t v89 = (uint64_t *)(a3 + v9[11]);
  uint64_t *v89 = v86;
  v89[1] = v88;
  id v90 = [a2 listeningServices];
  if (v90)
  {
    Swift::String v91 = v90;
    uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v94 = v93;
  }
  else
  {
    uint64_t v92 = 0;
    unint64_t v94 = 0xE000000000000000;
  }
  Swift::String v95 = (uint64_t *)(a3 + v9[19]);
  uint64_t *v95 = v92;
  v95[1] = v94;
  id v96 = [a2 listeningServicesV2];
  if (v96)
  {
    Swift::String v97 = v96;
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v100 = v99;
  }
  else
  {
    uint64_t v98 = 0;
    unint64_t v100 = 0xE000000000000000;
  }
  Swift::String v101 = (uint64_t *)(a3 + v9[20]);
  uint64_t *v101 = v98;
  v101[1] = v100;
  id v102 = [a2 spatialAudio];
  if (v102)
  {
    uint64_t v103 = v102;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v106 = v105;
  }
  else
  {
    uint64_t v104 = 0;
    unint64_t v106 = 0xE000000000000000;
  }
  Swift::String v107 = (uint64_t *)(a3 + v9[21]);
  *Swift::String v107 = v104;
  v107[1] = v106;
  id v108 = [a2 optimizedBatteryCharging];
  if (v108)
  {
    uint64_t v109 = v108;
    uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v112 = v111;
  }
  else
  {
    uint64_t v110 = 0;
    unint64_t v112 = 0xE000000000000000;
  }
  unint64_t v113 = (uint64_t *)(a3 + v9[22]);
  *unint64_t v113 = v110;
  v113[1] = v112;
  id v114 = [a2 optimizedBatteryFullChargeDeadline];
  if (v114)
  {
    Swift::String v115 = v114;
    uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v118 = v117;
  }
  else
  {
    uint64_t v116 = 0;
    unint64_t v118 = 0xE000000000000000;
  }
  uint64_t v119 = (uint64_t *)(a3 + v9[23]);
  *uint64_t v119 = v116;
  v119[1] = v118;
  id v120 = [a2 ratchet];
  if (v120)
  {
    uint64_t v121 = v120;
    uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v124 = v123;
  }
  else
  {
    uint64_t v122 = 0;
    unint64_t v124 = 0xE000000000000000;
  }
  uint64_t v125 = (uint64_t *)(a3 + v9[24]);
  *uint64_t v125 = v122;
  v125[1] = v124;
  id v126 = [a2 reserved];
  if (v126)
  {
    uint64_t v127 = v126;
    uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v130 = v129;
  }
  else
  {
    uint64_t v128 = 0;
    unint64_t v130 = 0xE000000000000000;
  }
  uint64_t v131 = (uint64_t *)(a3 + v9[25]);
  *uint64_t v131 = v128;
  v131[1] = v130;
  id v132 = [a2 settingsMask];
  if (v132)
  {
    Swift::String v133 = v132;
    uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v136 = v135;
  }
  else
  {
    uint64_t v134 = 0;
    unint64_t v136 = 0xE000000000000000;
  }
  id v137 = (uint64_t *)(a3 + v9[26]);
  *id v137 = v134;
  v137[1] = v136;
  id v138 = [a2 supportedServices];
  if (v138)
  {
    id v139 = v138;
    uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v142 = v141;
  }
  else
  {
    uint64_t v140 = 0;
    unint64_t v142 = 0xE000000000000000;
  }
  id v143 = (uint64_t *)(a3 + v9[27]);
  *id v143 = v140;
  v143[1] = v142;
  id v144 = [a2 version];
  if (v144)
  {
    uint64_t v145 = v144;
    uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v148 = v147;
  }
  else
  {
    uint64_t v146 = 0;
    unint64_t v148 = 0xE000000000000000;
  }
  uint64_t v149 = (uint64_t *)(a3 + v9[28]);
  *uint64_t v149 = v146;
  v149[1] = v148;
  uint64_t v150 = (void *)(a3 + v9[29]);
  *uint64_t v150 = 0;
  v150[1] = 0xE000000000000000;
  static Date.now.getter();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v153, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v154 + 32))(a3 + v9[30], v8, v155);
}

uint64_t sub_1000DB63C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v224 = a2;
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v4 - 8);
  uint64_t v219 = (uint64_t)&v205 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v221 = (uint64_t)&v205 - v7;
  __chkstk_darwin(v8);
  uint64_t v223 = (uint64_t)&v205 - v9;
  uint64_t v207 = type metadata accessor for Date();
  uint64_t v206 = *(void *)(v207 - 8);
  __chkstk_darwin(v207);
  v218 = (char *)&v205 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v222 = (char *)&v205 - v12;
  uint64_t v209 = type metadata accessor for UUID();
  uint64_t v208 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  uint64_t v14 = (char *)&v205 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000AA024(&qword_100262570);
  uint64_t v225 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  char v17 = (char *)&v205 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = (int *)type metadata accessor for MagicPairingSettingsRecord();
  __chkstk_darwin(v228);
  Swift::String v19 = (char *)&v205 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  unint64_t v22 = (char *)&v205 - v21;
  __chkstk_darwin(v23);
  uint64_t v229 = (uint64_t)&v205 - v24;
  uint64_t v25 = a1[3];
  uint64_t v220 = (uint64_t)a1;
  sub_1000ABF58(a1, v25);
  sub_1000E6910();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v26 = v14;
    uint64_t v216 = (uint64_t)v22;
    uint64_t v217 = (uint64_t)v19;
    char v233 = 1;
    unint64_t v27 = sub_1000AC040();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    unint64_t v28 = v17;
    v226 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v27;
    uint64_t v40 = v15;
    unint64_t v41 = v231;
    Swift::String v43 = v228;
    uint64_t v42 = v229;
    uint64_t v44 = (uint64_t *)(v229 + v228[5]);
    uint64_t v213 = (uint64_t)v230;
    *uint64_t v44 = (uint64_t)v230;
    v44[1] = v41;
    LOBYTE(v230) = 0;
    sub_1000E6964((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t v45 = v28;
    unint64_t v46 = v26;
    uint64_t v47 = v209;
    uint64_t v214 = (uint64_t)v45;
    uint64_t v215 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v211 = v44;
    unint64_t v212 = v41;
    (*(void (**)(uint64_t, char *, uint64_t))(v208 + 32))(v42, v46, v47);
    LOBYTE(v230) = 2;
    uint64_t v48 = v214;
    uint64_t v49 = v215;
    uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
    unint64_t v51 = (uint64_t *)(v42 + v43[6]);
    *unint64_t v51 = v50;
    v51[1] = v52;
    LOBYTE(v230) = 9;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if (v54) {
      uint64_t v55 = v53;
    }
    else {
      uint64_t v55 = 0;
    }
    if (v54) {
      unint64_t v56 = v54;
    }
    else {
      unint64_t v56 = 0xE000000000000000;
    }
    unint64_t v57 = (uint64_t *)(v42 + v43[13]);
    *unint64_t v57 = v55;
    v57[1] = v56;
    LOBYTE(v230) = 10;
    uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if (v59) {
      uint64_t v60 = v58;
    }
    else {
      uint64_t v60 = 0;
    }
    if (v59) {
      unint64_t v61 = v59;
    }
    else {
      unint64_t v61 = 0xE000000000000000;
    }
    uint64_t v62 = (uint64_t *)(v42 + v43[14]);
    uint64_t *v62 = v60;
    v62[1] = v61;
    char v233 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    id v63 = v230;
    unint64_t v64 = v231;
    if (v231 >> 60 == 15)
    {
      id v63 = 0;
      unint64_t v64 = 0xC000000000000000;
    }
    uint64_t v65 = (void *)(v42 + v43[8]);
    void *v65 = v63;
    v65[1] = v64;
    char v233 = 3;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    id v66 = v230;
    unint64_t v67 = v231;
    if (v231 >> 60 == 15)
    {
      id v66 = 0;
      unint64_t v67 = 0xC000000000000000;
    }
    uint64_t v68 = (void *)(v42 + v43[7]);
    void *v68 = v66;
    v68[1] = v67;
    char v233 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v69 = v213;
    id v70 = v230;
    unint64_t v71 = v231;
    if (v231 >> 60 == 15)
    {
      id v70 = 0;
      unint64_t v71 = 0xC000000000000000;
    }
    id v72 = (void *)(v42 + v43[10]);
    *id v72 = v70;
    v72[1] = v71;
    char v233 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    id v73 = v230;
    unint64_t v74 = v231;
    if (v231 >> 60 == 15)
    {
      id v73 = 0;
      unint64_t v74 = 0xC000000000000000;
    }
    unint64_t v75 = (void *)(v42 + v43[9]);
    *unint64_t v75 = v73;
    v75[1] = v74;
    LOBYTE(v230) = 11;
    uint64_t v76 = v49;
    uint64_t v77 = v48;
    uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = 0;
    if (v79) {
      uint64_t v80 = v78;
    }
    else {
      uint64_t v80 = 0;
    }
    if (v79) {
      unint64_t v81 = v79;
    }
    else {
      unint64_t v81 = 0xE000000000000000;
    }
    unint64_t v82 = (uint64_t *)(v229 + v228[15]);
    uint64_t *v82 = v80;
    v82[1] = v81;
    LOBYTE(v230) = 12;
    uint64_t v83 = v227;
    uint64_t v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v83;
    if (v83)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 3711;
      goto LABEL_4;
    }
    if (v85) {
      uint64_t v86 = v84;
    }
    else {
      uint64_t v86 = 0;
    }
    if (v85) {
      unint64_t v87 = v85;
    }
    else {
      unint64_t v87 = 0xE000000000000000;
    }
    unint64_t v88 = (uint64_t *)(v229 + v228[16]);
    uint64_t *v88 = v86;
    v88[1] = v87;
    LOBYTE(v230) = 13;
    uint64_t v89 = v227;
    uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v89;
    if (v89)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 7807;
      goto LABEL_4;
    }
    if (v91) {
      uint64_t v92 = v90;
    }
    else {
      uint64_t v92 = 0;
    }
    if (v91) {
      unint64_t v93 = v91;
    }
    else {
      unint64_t v93 = 0xE000000000000000;
    }
    unint64_t v94 = (uint64_t *)(v229 + v228[17]);
    uint64_t *v94 = v92;
    v94[1] = v93;
    LOBYTE(v230) = 14;
    uint64_t v95 = v227;
    uint64_t v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v95;
    if (v95)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 15999;
      goto LABEL_4;
    }
    if (v97) {
      uint64_t v98 = v96;
    }
    else {
      uint64_t v98 = 0;
    }
    if (v97) {
      unint64_t v99 = v97;
    }
    else {
      unint64_t v99 = 0xE000000000000000;
    }
    unint64_t v100 = (uint64_t *)(v229 + v228[18]);
    uint64_t *v100 = v98;
    v100[1] = v99;
    char v233 = 8;
    uint64_t v101 = v227;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v227 = v101;
    if (v101)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 32383;
      goto LABEL_4;
    }
    id v102 = v230;
    unint64_t v103 = v231;
    if (v231 >> 60 == 15)
    {
      id v102 = 0;
      unint64_t v103 = 0xC000000000000000;
    }
    uint64_t v104 = (void *)(v229 + v228[12]);
    *uint64_t v104 = v102;
    v104[1] = v103;
    char v233 = 7;
    uint64_t v105 = v227;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v227 = v105;
    if (v105)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 32639;
      goto LABEL_4;
    }
    id v106 = v230;
    unint64_t v107 = v231;
    if (v231 >> 60 == 15)
    {
      id v106 = 0;
      unint64_t v107 = 0xC000000000000000;
    }
    id v108 = (void *)(v229 + v228[11]);
    void *v108 = v106;
    v108[1] = v107;
    LOBYTE(v230) = 15;
    uint64_t v109 = v227;
    uint64_t v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v109;
    if (v109)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 0x7FFF;
      goto LABEL_4;
    }
    if (v111) {
      uint64_t v112 = v110;
    }
    else {
      uint64_t v112 = 0;
    }
    if (v111) {
      unint64_t v113 = v111;
    }
    else {
      unint64_t v113 = 0xE000000000000000;
    }
    id v114 = (uint64_t *)(v229 + v228[19]);
    *id v114 = v112;
    v114[1] = v113;
    LOBYTE(v230) = 16;
    uint64_t v115 = v227;
    uint64_t v116 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v115;
    if (v115)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 0xFFFF;
      goto LABEL_4;
    }
    if (v117) {
      uint64_t v118 = v116;
    }
    else {
      uint64_t v118 = 0;
    }
    if (v117) {
      unint64_t v119 = v117;
    }
    else {
      unint64_t v119 = 0xE000000000000000;
    }
    id v120 = (uint64_t *)(v229 + v228[20]);
    uint64_t *v120 = v118;
    v120[1] = v119;
    LOBYTE(v230) = 17;
    uint64_t v121 = v227;
    uint64_t v122 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v121;
    if (v121)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 0x1FFFF;
      goto LABEL_4;
    }
    if (v123) {
      uint64_t v124 = v122;
    }
    else {
      uint64_t v124 = 0;
    }
    if (v123) {
      unint64_t v125 = v123;
    }
    else {
      unint64_t v125 = 0xE000000000000000;
    }
    id v126 = (uint64_t *)(v229 + v228[21]);
    *id v126 = v124;
    v126[1] = v125;
    LOBYTE(v230) = 18;
    uint64_t v127 = v227;
    uint64_t v128 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v127;
    if (v127)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 0x3FFFF;
      goto LABEL_4;
    }
    if (v129) {
      uint64_t v130 = v128;
    }
    else {
      uint64_t v130 = 0;
    }
    if (v129) {
      unint64_t v131 = v129;
    }
    else {
      unint64_t v131 = 0xE000000000000000;
    }
    id v132 = (uint64_t *)(v229 + v228[22]);
    *id v132 = v130;
    v132[1] = v131;
    LOBYTE(v230) = 19;
    uint64_t v133 = v227;
    uint64_t v134 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v133;
    if (v133)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v224) = 0;
      unsigned int v29 = 0x7FFFF;
      goto LABEL_4;
    }
    if (v135) {
      uint64_t v136 = v134;
    }
    else {
      uint64_t v136 = 0;
    }
    if (v135) {
      unint64_t v137 = v135;
    }
    else {
      unint64_t v137 = 0xE000000000000000;
    }
    id v138 = (uint64_t *)(v229 + v228[23]);
    uint64_t *v138 = v136;
    v138[1] = v137;
    LOBYTE(v230) = 20;
    uint64_t v139 = v227;
    uint64_t v140 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v139;
    if (v139)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      unsigned int v29 = 0xFFFFF;
      LODWORD(v224) = 1;
      goto LABEL_4;
    }
    if (v141) {
      uint64_t v142 = v140;
    }
    else {
      uint64_t v142 = 0;
    }
    if (v141) {
      unint64_t v143 = v141;
    }
    else {
      unint64_t v143 = 0xE000000000000000;
    }
    id v144 = (uint64_t *)(v229 + v228[24]);
    uint64_t *v144 = v142;
    v144[1] = v143;
    LOBYTE(v230) = 21;
    uint64_t v145 = v227;
    uint64_t v146 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v226) = v145 == 0;
    uint64_t v227 = v145;
    if (v145) {
      goto LABEL_173;
    }
    uint64_t v148 = v147 ? v146 : 0;
    unint64_t v149 = v147 ? v147 : 0xE000000000000000;
    uint64_t v150 = (uint64_t *)(v229 + v228[25]);
    *uint64_t v150 = v148;
    v150[1] = v149;
    LOBYTE(v230) = 22;
    uint64_t v151 = v227;
    uint64_t v152 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v151;
    if (v151)
    {
LABEL_173:
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v221) = 0;
      LODWORD(v222) = 0;
      LODWORD(v223) = 0;
      LODWORD(v225) = 0;
LABEL_174:
      sub_1000ABFF0(v220);
      LOBYTE(v39) = 1;
      int v33 = 1;
      int v34 = 1;
      int v35 = 1;
      int v36 = 1;
      int v37 = 1;
      int v38 = 1;
      int v232 = 1;
      LODWORD(v210) = 1;
      LODWORD(v211) = 1;
      LODWORD(v212) = 1;
      LODWORD(v213) = 1;
      LODWORD(v214) = 1;
      LODWORD(v215) = 1;
      LODWORD(v216) = 1;
      LODWORD(v217) = 1;
      LODWORD(v21_Block_object_dispose(&STACK[0x290], 8) = 1;
      LODWORD(v219) = 1;
      LODWORD(v224) = 1;
      LODWORD(v220) = 1;
      uint64_t v31 = v228;
      uint64_t v30 = v229;
      goto LABEL_32;
    }
    if (v153) {
      uint64_t v154 = v152;
    }
    else {
      uint64_t v154 = 0;
    }
    if (v153) {
      unint64_t v155 = v153;
    }
    else {
      unint64_t v155 = 0xE000000000000000;
    }
    uint64_t v156 = (uint64_t *)(v229 + v228[26]);
    uint64_t *v156 = v154;
    v156[1] = v155;
    LOBYTE(v230) = 23;
    uint64_t v157 = v227;
    uint64_t v158 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v157;
    if (v157)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v222) = 0;
      LODWORD(v223) = 0;
      LODWORD(v225) = 0;
      LODWORD(v221) = 1;
      goto LABEL_174;
    }
    if (v159) {
      uint64_t v160 = v158;
    }
    else {
      uint64_t v160 = 0;
    }
    if (v159) {
      unint64_t v161 = v159;
    }
    else {
      unint64_t v161 = 0xE000000000000000;
    }
    Swift::String v162 = (uint64_t *)(v229 + v228[27]);
    *Swift::String v162 = v160;
    v162[1] = v161;
    LOBYTE(v230) = 24;
    uint64_t v163 = v227;
    uint64_t v164 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v163;
    if (v163)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v223) = 0;
      LODWORD(v225) = 0;
      LODWORD(v221) = 1;
      LODWORD(v222) = 1;
      goto LABEL_174;
    }
    if (v165) {
      uint64_t v166 = v164;
    }
    else {
      uint64_t v166 = 0;
    }
    if (v165) {
      unint64_t v167 = v165;
    }
    else {
      unint64_t v167 = 0xE000000000000000;
    }
    uint64_t v168 = (uint64_t *)(v229 + v228[28]);
    *uint64_t v168 = v166;
    v168[1] = v167;
    LOBYTE(v230) = 25;
    uint64_t v169 = v227;
    uint64_t v170 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v227 = v169;
    if (v169)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v225) = 0;
      LODWORD(v221) = 1;
      LODWORD(v222) = 1;
      LODWORD(v223) = 1;
      goto LABEL_174;
    }
    if (v171) {
      uint64_t v172 = v170;
    }
    else {
      uint64_t v172 = 0;
    }
    unint64_t v173 = 0xE000000000000000;
    if (v171) {
      unint64_t v173 = v171;
    }
    uint64_t v175 = v228;
    uint64_t v174 = v229;
    Swift::String v176 = (uint64_t *)(v229 + v228[29]);
    *Swift::String v176 = v172;
    v176[1] = v173;
    uint64_t v210 = v174 + v175[30];
    static Date.now.getter();
    LOBYTE(v230) = 26;
    sub_1000E6964(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v177 = v227;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v227 = v177;
    if (v177)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      LODWORD(v221) = 1;
      LODWORD(v222) = 1;
      LODWORD(v223) = 1;
      LODWORD(v225) = 1;
      goto LABEL_174;
    }
    id v178 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v206 + 48);
    v228 = (int *)(v206 + 48);
    v226 = v178;
    if (v178(v223, 1, v207) != 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v48, v76);
      (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v222, v223, v207);
LABEL_225:
      (*(void (**)(uint64_t, char *, uint64_t))(v206 + 40))(v210, v222, v207);
      uint64_t v204 = v229;
      sub_1000E4E04(v229, v224);
      sub_1000ABFF0(v220);
      return sub_1000E4E68(v204);
    }
    unint64_t v180 = v212;
    sub_1000AA680(v69, v212);
    Class isa = sub_100130420(v69, v180);
    sub_1000AA8F0(v69, v180);
    sub_1000E4E04(v229, v216);
    if (isa)
    {
      uint64_t v182 = v216;
    }
    else
    {
      uint64_t v183 = v216;
      Class isa = sub_1000B4934(v216).super.isa;
      uint64_t v182 = v183;
    }
    sub_1000E4E68(v182);
    id v230 = isa;
    sub_1000DE038(&v230);
    id v184 = [isa modificationDate];

    if (v184)
    {
      uint64_t v185 = v218;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v186 = v206;
      uint64_t v187 = *(void (**)(uint64_t, char *, uint64_t))(v206 + 32);
      uint64_t v188 = v221;
      uint64_t v189 = v185;
      uint64_t v190 = v207;
      v187(v221, v189, v207);
      unint64_t v191 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v186 + 56);
      v191(v188, 0, 1, v190);
      if (v226(v188, 1, v190) != 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v77, v76);
        v187((uint64_t)v222, (char *)v221, v207);
LABEL_224:
        sub_1000AA894(v223, &qword_100261D90);
        goto LABEL_225;
      }
    }
    else
    {
      unint64_t v191 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56);
      v191(v221, 1, 1, v207);
    }
    uint64_t v193 = *v211;
    unint64_t v194 = v211[1];
    sub_1000AA680(*v211, v194);
    uint64_t v195 = sub_100130420(v193, v194);
    sub_1000AA8F0(v193, v194);
    sub_1000E4E04(v229, v217);
    if (v195)
    {
      uint64_t v196 = v217;
    }
    else
    {
      uint64_t v197 = v217;
      uint64_t v195 = sub_1000B4934(v217).super.isa;
      uint64_t v196 = v197;
    }
    sub_1000E4E68(v196);
    id v230 = v195;
    sub_1000DE038(&v230);
    id v198 = [v195 creationDate];

    if (v198)
    {
      unint64_t v199 = v218;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v200 = *(void (**)(uint64_t, char *, uint64_t))(v206 + 32);
      uint64_t v201 = v219;
      uint64_t v202 = v199;
      uint64_t v203 = v207;
      v200(v219, v202, v207);
      v191(v201, 0, 1, v203);
      if (v226(v201, 1, v203) != 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v77, v76);
        v200((uint64_t)v222, (char *)v219, v207);
LABEL_223:
        sub_1000AA894(v221, &qword_100261D90);
        goto LABEL_224;
      }
    }
    else
    {
      v191(v219, 1, 1, v207);
    }
    static Date.now.getter();
    (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v77, v76);
    sub_1000AA894(v219, &qword_100261D90);
    goto LABEL_223;
  }
  uint64_t v227 = v2;
  LODWORD(v224) = 0;
  unsigned int v29 = 0;
LABEL_4:
  uint64_t v31 = v228;
  uint64_t v30 = v229;
  uint64_t result = sub_1000ABFF0(v220);
  int v33 = (v29 >> 2) & 1;
  int v34 = (v29 >> 3) & 1;
  int v35 = (v29 >> 4) & 1;
  int v36 = (v29 >> 5) & 1;
  int v37 = (v29 >> 6) & 1;
  int v38 = (v29 >> 7) & 1;
  int v232 = (v29 >> 8) & 1;
  LODWORD(v210) = (v29 >> 9) & 1;
  LODWORD(v211) = (v29 >> 10) & 1;
  LODWORD(v212) = (v29 >> 11) & 1;
  LODWORD(v213) = (v29 >> 12) & 1;
  LODWORD(v214) = (v29 >> 13) & 1;
  LODWORD(v215) = (v29 >> 14) & 1;
  LODWORD(v216) = (v29 >> 15) & 1;
  LODWORD(v217) = HIWORD(v29) & 1;
  LODWORD(v21_Block_object_dispose(&STACK[0x290], 8) = (v29 >> 17) & 1;
  LODWORD(v219) = (v29 >> 18) & 1;
  if ((v29 & 1) == 0)
  {
    LODWORD(v225) = 0;
    LODWORD(v223) = 0;
    LODWORD(v222) = 0;
    LODWORD(v221) = 0;
    LODWORD(v226) = 0;
    LODWORD(v220) = 0;
    if ((v29 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
  LODWORD(v220) = 0;
  LODWORD(v226) = 0;
  LODWORD(v221) = 0;
  LODWORD(v222) = 0;
  LODWORD(v223) = 0;
  LODWORD(v225) = 0;
  int v39 = (v29 >> 1) & 1;
LABEL_32:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v208 + 8))(v30, v209);
  if ((v39 & 1) == 0)
  {
LABEL_6:
    if (v33) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = sub_1000AA8F0(*(void *)(v30 + v31[5]), *(void *)(v30 + v31[5] + 8));
  if (v33)
  {
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v34 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  if (!v34)
  {
LABEL_8:
    if (v35) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = sub_1000AA8F0(*(void *)(v30 + v31[7]), *(void *)(v30 + v31[7] + 8));
  if (v35)
  {
LABEL_9:
    uint64_t result = sub_1000AA8F0(*(void *)(v30 + v31[8]), *(void *)(v30 + v31[8] + 8));
    if ((v36 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  if (!v36)
  {
LABEL_10:
    if (v37) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = sub_1000AA8F0(*(void *)(v30 + v31[9]), *(void *)(v30 + v31[9] + 8));
  if (v37)
  {
LABEL_11:
    uint64_t result = sub_1000AA8F0(*(void *)(v30 + v31[10]), *(void *)(v30 + v31[10] + 8));
    if ((v38 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  if (!v38)
  {
LABEL_12:
    if (v232) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = sub_1000AA8F0(*(void *)(v30 + v31[11]), *(void *)(v30 + v31[11] + 8));
  if (v232)
  {
LABEL_13:
    uint64_t result = sub_1000AA8F0(*(void *)(v30 + v31[12]), *(void *)(v30 + v31[12] + 8));
    if ((v210 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  if (!v210)
  {
LABEL_14:
    if (v211) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = swift_bridgeObjectRelease();
  if (v211)
  {
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v212 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  if (!v212)
  {
LABEL_16:
    if (v213) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = swift_bridgeObjectRelease();
  if (v213)
  {
LABEL_17:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v214 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  if (!v214)
  {
LABEL_18:
    if (v215) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = swift_bridgeObjectRelease();
  if (v215)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v216 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  if (!v216)
  {
LABEL_20:
    if (v217) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = swift_bridgeObjectRelease();
  if (v217)
  {
LABEL_21:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v218 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  if (!v218)
  {
LABEL_22:
    if (v219) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = swift_bridgeObjectRelease();
  if (v219)
  {
LABEL_23:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v224 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  if (!v224)
  {
LABEL_24:
    if (v220) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = swift_bridgeObjectRelease();
  if (v220)
  {
LABEL_25:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v226 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  if (!v226)
  {
LABEL_26:
    if (v221) {
      goto LABEL_27;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = swift_bridgeObjectRelease();
  if (v221)
  {
LABEL_27:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v222 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_55;
  }
LABEL_54:
  if (!v222)
  {
LABEL_28:
    if (v223) {
      goto LABEL_29;
    }
LABEL_56:
    if (!v225) {
      return result;
    }
    goto LABEL_57;
  }
LABEL_55:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v223 & 1) == 0) {
    goto LABEL_56;
  }
LABEL_29:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v225 & 1) == 0) {
    return result;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v206 + 8))(v30 + v31[30], v207);
}

void sub_1000DCE94(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v5 - 8);
  id v144 = (int *)((char *)v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v148 = (char *)v139 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v146 = (char *)v139 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v145 = (char *)v139 - v13;
  uint64_t v14 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v139 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v149 = *(void *)(v17 - 8);
  uint64_t v150 = v17;
  __chkstk_darwin(v17);
  unint64_t v147 = (char *)v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0x746553636967614DLL && v19 == 0xED000073676E6974)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      sub_1000E4EC4();
      swift_allocError();
      *int v33 = 0;
      swift_willThrow();

      return;
    }
  }
  uint64_t v142 = v10;
  uint64_t v143 = v9;
  id v21 = [a1 encryptedValues];
  swift_getObjectType();
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 objectForKeyedSubscript:v22];

  if (!v23) {
    goto LABEL_9;
  }
  id v152 = v23;
  uint64_t v24 = sub_1000AA024(&qword_1002629D0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  v139[1] = v24;
  v139[2] = v2;
  uint64_t v140 = a2;
  long long v25 = v151;
  id v26 = [a1 recordID];
  id v27 = [v26 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = v149;
  uint64_t v29 = v150;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v16, 1, v150) != 1)
  {
    int v34 = v147;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v147, v16, v29);
    int v35 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 16);
    uint64_t v36 = v140;
    v35(v140, v34, v29);
    int v37 = (int *)type metadata accessor for MagicPairingSettingsRecord();
    *(_OWORD *)(v36 + v37[6]) = v25;
    uint64_t v38 = v36;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v39 = *((void *)&v151 + 1);
    uint64_t v40 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v40 = 0;
      unint64_t v39 = 0xE000000000000000;
    }
    unint64_t v41 = (void *)(v36 + v37[13]);
    *unint64_t v41 = v40;
    v41[1] = v39;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v42 = *((void *)&v151 + 1);
    uint64_t v43 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v43 = 0;
      unint64_t v42 = 0xE000000000000000;
    }
    uint64_t v44 = (void *)(v36 + v37[14]);
    *uint64_t v44 = v43;
    v44[1] = v42;
    NSString v45 = String._bridgeToObjectiveC()();
    id v46 = [v21 objectForKeyedSubscript:v45];

    long long v47 = xmmword_1001D1A50;
    long long v141 = xmmword_1001D1A50;
    if (v46)
    {
      id v152 = v46;
      if (swift_dynamicCast()) {
        long long v47 = v151;
      }
      else {
        long long v47 = v141;
      }
    }
    *(_OWORD *)(v38 + v37[8]) = v47;
    NSString v48 = String._bridgeToObjectiveC()();
    id v49 = [v21 objectForKeyedSubscript:v48];

    long long v50 = v141;
    if (v49)
    {
      id v152 = v49;
      if (swift_dynamicCast()) {
        long long v50 = v151;
      }
      else {
        long long v50 = v141;
      }
    }
    *(_OWORD *)(v38 + v37[7]) = v50;
    NSString v51 = String._bridgeToObjectiveC()();
    id v52 = [v21 objectForKeyedSubscript:v51];

    long long v53 = v141;
    if (v52)
    {
      id v152 = v52;
      if (swift_dynamicCast()) {
        long long v53 = v151;
      }
      else {
        long long v53 = v141;
      }
    }
    *(_OWORD *)(v38 + v37[10]) = v53;
    NSString v54 = String._bridgeToObjectiveC()();
    id v55 = [v21 objectForKeyedSubscript:v54];

    long long v56 = v141;
    if (v55)
    {
      id v152 = v55;
      if (swift_dynamicCast()) {
        long long v56 = v151;
      }
      else {
        long long v56 = v141;
      }
    }
    *(_OWORD *)(v38 + v37[9]) = v56;
    NSString v57 = String._bridgeToObjectiveC()();
    id v58 = [v21 objectForKeyedSubscript:v57];

    long long v59 = v141;
    if (v58)
    {
      id v152 = v58;
      if (swift_dynamicCast()) {
        long long v59 = v151;
      }
      else {
        long long v59 = v141;
      }
    }
    *(_OWORD *)(v38 + v37[12]) = v59;
    NSString v60 = String._bridgeToObjectiveC()();
    id v61 = [v21 objectForKeyedSubscript:v60];

    if (v61 && (id v152 = v61, swift_dynamicCast())) {
      long long v62 = v151;
    }
    else {
      long long v62 = v141;
    }
    *(_OWORD *)(v38 + v37[11]) = v62;
    uint64_t v63 = v38;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v64 = *((void *)&v151 + 1);
    uint64_t v65 = v151;
    if (!*((void *)&v151 + 1)) {
      uint64_t v65 = 0;
    }
    unint64_t v66 = 0xE000000000000000;
    if (!*((void *)&v151 + 1)) {
      unint64_t v64 = 0xE000000000000000;
    }
    unint64_t v67 = (void *)(v38 + v37[15]);
    void *v67 = v65;
    v67[1] = v64;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v68 = *((void *)&v151 + 1);
    uint64_t v69 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v69 = 0;
      unint64_t v68 = 0xE000000000000000;
    }
    id v70 = (void *)(v38 + v37[16]);
    void *v70 = v69;
    v70[1] = v68;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v71 = *((void *)&v151 + 1);
    uint64_t v72 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v72 = 0;
      unint64_t v71 = 0xE000000000000000;
    }
    id v73 = (void *)(v38 + v37[17]);
    *id v73 = v72;
    v73[1] = v71;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v74 = *((void *)&v151 + 1);
    uint64_t v75 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v75 = 0;
      unint64_t v74 = 0xE000000000000000;
    }
    uint64_t v76 = (void *)(v38 + v37[18]);
    void *v76 = v75;
    v76[1] = v74;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v77 = *((void *)&v151 + 1);
    uint64_t v78 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v78 = 0;
      unint64_t v77 = 0xE000000000000000;
    }
    unint64_t v79 = (void *)(v38 + v37[19]);
    void *v79 = v78;
    v79[1] = v77;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v80 = *((void *)&v151 + 1);
    uint64_t v81 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v81 = 0;
      unint64_t v80 = 0xE000000000000000;
    }
    unint64_t v82 = (void *)(v38 + v37[20]);
    void *v82 = v81;
    v82[1] = v80;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v83 = *((void *)&v151 + 1);
    uint64_t v84 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v84 = 0;
      unint64_t v83 = 0xE000000000000000;
    }
    unint64_t v85 = (void *)(v38 + v37[21]);
    *unint64_t v85 = v84;
    v85[1] = v83;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v86 = *((void *)&v151 + 1);
    uint64_t v87 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v87 = 0;
      unint64_t v86 = 0xE000000000000000;
    }
    unint64_t v88 = (void *)(v38 + v37[22]);
    void *v88 = v87;
    v88[1] = v86;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v89 = *((void *)&v151 + 1);
    uint64_t v90 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v90 = 0;
      unint64_t v89 = 0xE000000000000000;
    }
    unint64_t v91 = (void *)(v38 + v37[23]);
    void *v91 = v90;
    v91[1] = v89;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v92 = *((void *)&v151 + 1);
    uint64_t v93 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v93 = 0;
      unint64_t v92 = 0xE000000000000000;
    }
    unint64_t v94 = (void *)(v38 + v37[24]);
    void *v94 = v93;
    v94[1] = v92;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v95 = *((void *)&v151 + 1);
    uint64_t v96 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v96 = 0;
      unint64_t v95 = 0xE000000000000000;
    }
    unint64_t v97 = (void *)(v38 + v37[25]);
    void *v97 = v96;
    v97[1] = v95;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v98 = *((void *)&v151 + 1);
    uint64_t v99 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v99 = 0;
      unint64_t v98 = 0xE000000000000000;
    }
    unint64_t v100 = (void *)(v38 + v37[26]);
    void *v100 = v99;
    v100[1] = v98;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v101 = *((void *)&v151 + 1);
    uint64_t v102 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v102 = 0;
      unint64_t v101 = 0xE000000000000000;
    }
    unint64_t v103 = (void *)(v38 + v37[27]);
    void *v103 = v102;
    v103[1] = v101;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v104 = *((void *)&v151 + 1);
    uint64_t v105 = v151;
    if (!*((void *)&v151 + 1))
    {
      uint64_t v105 = 0;
      unint64_t v104 = 0xE000000000000000;
    }
    id v106 = (void *)(v38 + v37[28]);
    void *v106 = v105;
    v106[1] = v104;
    id v107 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    [a1 encodeSystemFieldsWithCoder:v107];
    [v107 finishEncoding];
    id v108 = [v107 encodedData];
    uint64_t v109 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v111 = v110;

    uint64_t v112 = (uint64_t *)(v63 + v37[5]);
    uint64_t *v112 = v109;
    v112[1] = v111;
    id v113 = [a1 valuesByKey];
    NSString v114 = String._bridgeToObjectiveC()();
    id v115 = [v113 objectForKeyedSubscript:v114];
    swift_unknownObjectRelease();

    if (v115)
    {
      self;
      uint64_t v116 = (void *)swift_dynamicCastObjCClass();
      if (v116)
      {
        id v117 = [v116 recordID];
        id v118 = [v117 recordName];

        uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v66 = v120;
        swift_unknownObjectRelease();

        goto LABEL_76;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v119 = 0;
LABEL_76:
    uint64_t v121 = (uint64_t *)(v140 + v37[29]);
    *uint64_t v121 = v119;
    v121[1] = v66;
    id v122 = [a1 modificationDate];
    if (v122)
    {
      unint64_t v123 = v122;
      uint64_t v124 = v146;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v126 = v142;
      uint64_t v125 = v143;
      uint64_t v127 = *(void (**)(uint64_t, char *, uint64_t))(v142 + 32);
      uint64_t v128 = (uint64_t)v148;
      v127((uint64_t)v148, v124, v143);
      unint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v126 + 56);
      v129(v128, 0, 1, v125);
      int v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v128, 1, v125);
      uint64_t v131 = (uint64_t)v144;
      if (v130 != 1)
      {
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v149 + 8))(v147, v150);
        id v132 = v145;
        v127((uint64_t)v145, v148, v125);
        uint64_t v133 = v140;
LABEL_86:
        v127(v133 + v37[30], v132, v125);
        return;
      }
    }
    else
    {
      uint64_t v126 = v142;
      uint64_t v125 = v143;
      unint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56);
      v129((uint64_t)v148, 1, 1, v143);
      uint64_t v131 = (uint64_t)v144;
    }
    id v134 = [a1 creationDate];
    if (v134)
    {
      unint64_t v135 = v134;
      id v144 = v37;
      uint64_t v136 = v146;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v137 = *(void (**)(uint64_t, char *, uint64_t))(v126 + 32);
      id v138 = v136;
      int v37 = v144;
      v137(v131, v138, v125);
      v129(v131, 0, 1, v125);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v131, 1, v125) != 1)
      {
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v149 + 8))(v147, v150);
        id v132 = v145;
        v137((uint64_t)v145, (char *)v131, v125);
LABEL_85:
        uint64_t v133 = v140;
        sub_1000AA894((uint64_t)v148, &qword_100261D90);
        uint64_t v127 = *(void (**)(uint64_t, char *, uint64_t))(v126 + 32);
        goto LABEL_86;
      }
    }
    else
    {
      v129(v131, 1, 1, v125);
    }
    id v132 = v145;
    static Date.now.getter();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v149 + 8))(v147, v150);
    sub_1000AA894(v131, &qword_100261D90);
    goto LABEL_85;
  }
  swift_bridgeObjectRelease();
  sub_1000AA894((uint64_t)v16, &qword_100261EA0);
LABEL_9:
  static os_log_type_t.error.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1001CFDB0;
  *(void *)(v30 + 56) = sub_1000AA854();
  *(void *)(v30 + 64) = sub_1000E6964((unint64_t *)&qword_100261A40, (void (*)(uint64_t))sub_1000AA854);
  *(void *)(v30 + 32) = a1;
  id v31 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000E4EC4();
  swift_allocError();
  unsigned char *v32 = 2;
  swift_willThrow();
  swift_unknownObjectRelease();
}

uint64_t sub_1000DE038(id *a1)
{
  static os_log_type_t.debug.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001CFDB0;
  id v4 = *a1;
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1000AA5E0();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v9 = [v4 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v97 = (int *)type metadata accessor for MagicPairingSettingsRecord();
  uint64_t v10 = (uint64_t *)(v1 + v97[6]);
  uint64_t v12 = *v10;
  unint64_t v11 = v10[1];
  if (!v99) {
    goto LABEL_8;
  }
  if (v98 == v12 && v99 == v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
LABEL_8:
    uint64_t v98 = v12;
    unint64_t v99 = v11;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v14 = (uint64_t *)(v1 + v97[13]);
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  if (!v99) {
    goto LABEL_14;
  }
  if (v98 != v16 || v99 != v15)
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v98 = v16;
    unint64_t v99 = v15;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v18 = (uint64_t *)(v1 + v97[14]);
  uint64_t v20 = *v18;
  unint64_t v19 = v18[1];
  if (!v99) {
    goto LABEL_20;
  }
  if (v98 == v20 && v99 == v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
LABEL_20:
    uint64_t v98 = v20;
    unint64_t v99 = v19;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter();
  NSString v22 = (uint64_t *)(v1 + v97[7]);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_1000AA680(*v22, v24);
  if (v99 >> 60 == 15)
  {
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v23, v24);
  }
  else
  {
    sub_1000BFEC4(v98, v99);
    char v25 = sub_1000E4B6C(v98, v99, v23, v24);
    sub_1000AA8F0(v23, v24);
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v98, v99);
    if (v25) {
      goto LABEL_25;
    }
  }
  uint64_t v98 = v23;
  unint64_t v99 = v24;
  sub_1000AA680(v23, v24);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_25:
  CKRecordKeyValueSetting.subscript.getter();
  id v26 = (uint64_t *)(v1 + v97[8]);
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  sub_1000AA680(*v26, v28);
  if (v99 >> 60 == 15)
  {
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v27, v28);
  }
  else
  {
    sub_1000BFEC4(v98, v99);
    char v29 = sub_1000E4B6C(v98, v99, v27, v28);
    sub_1000AA8F0(v27, v28);
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v98, v99);
    if (v29) {
      goto LABEL_29;
    }
  }
  uint64_t v98 = v27;
  unint64_t v99 = v28;
  sub_1000AA680(v27, v28);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_29:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v30 = (uint64_t *)(v1 + v97[9]);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_1000AA680(*v30, v32);
  if (v99 >> 60 == 15)
  {
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v31, v32);
  }
  else
  {
    sub_1000BFEC4(v98, v99);
    char v33 = sub_1000E4B6C(v98, v99, v31, v32);
    sub_1000AA8F0(v31, v32);
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v98, v99);
    if (v33) {
      goto LABEL_33;
    }
  }
  uint64_t v98 = v31;
  unint64_t v99 = v32;
  sub_1000AA680(v31, v32);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_33:
  CKRecordKeyValueSetting.subscript.getter();
  int v34 = (uint64_t *)(v1 + v97[10]);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  sub_1000AA680(*v34, v36);
  if (v99 >> 60 == 15)
  {
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v35, v36);
  }
  else
  {
    sub_1000BFEC4(v98, v99);
    char v37 = sub_1000E4B6C(v98, v99, v35, v36);
    sub_1000AA8F0(v35, v36);
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v98, v99);
    if (v37) {
      goto LABEL_37;
    }
  }
  uint64_t v98 = v35;
  unint64_t v99 = v36;
  sub_1000AA680(v35, v36);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_37:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v38 = (uint64_t *)(v1 + v97[15]);
  uint64_t v40 = *v38;
  unint64_t v39 = v38[1];
  if (!v99) {
    goto LABEL_42;
  }
  if (v98 != v40 || v99 != v39)
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v98 = v40;
    unint64_t v99 = v39;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
LABEL_43:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v42 = (uint64_t *)(v1 + v97[16]);
  uint64_t v44 = *v42;
  unint64_t v43 = v42[1];
  if (!v99) {
    goto LABEL_48;
  }
  if (v98 == v44 && v99 == v43)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0)
  {
LABEL_48:
    uint64_t v98 = v44;
    unint64_t v99 = v43;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_49:
  CKRecordKeyValueSetting.subscript.getter();
  id v46 = (uint64_t *)(v1 + v97[17]);
  uint64_t v48 = *v46;
  unint64_t v47 = v46[1];
  if (!v99) {
    goto LABEL_55;
  }
  if (v98 != v48 || v99 != v47)
  {
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v49) {
      goto LABEL_56;
    }
LABEL_55:
    uint64_t v98 = v48;
    unint64_t v99 = v47;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_56;
  }
  swift_bridgeObjectRelease();
LABEL_56:
  CKRecordKeyValueSetting.subscript.getter();
  long long v50 = (uint64_t *)(v1 + v97[18]);
  uint64_t v52 = *v50;
  unint64_t v51 = v50[1];
  if (!v99) {
    goto LABEL_61;
  }
  if (v98 == v52 && v99 == v51)
  {
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
  {
LABEL_61:
    uint64_t v98 = v52;
    unint64_t v99 = v51;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_62:
  CKRecordKeyValueSetting.subscript.getter();
  NSString v54 = (uint64_t *)(v1 + v97[12]);
  uint64_t v55 = *v54;
  unint64_t v56 = v54[1];
  sub_1000AA680(*v54, v56);
  if (v99 >> 60 == 15)
  {
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v55, v56);
  }
  else
  {
    sub_1000BFEC4(v98, v99);
    char v57 = sub_1000E4B6C(v98, v99, v55, v56);
    sub_1000AA8F0(v55, v56);
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v98, v99);
    if (v57) {
      goto LABEL_66;
    }
  }
  uint64_t v98 = v55;
  unint64_t v99 = v56;
  sub_1000AA680(v55, v56);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_66:
  CKRecordKeyValueSetting.subscript.getter();
  id v58 = (uint64_t *)(v1 + v97[11]);
  uint64_t v59 = *v58;
  unint64_t v60 = v58[1];
  sub_1000AA680(*v58, v60);
  if (v99 >> 60 == 15)
  {
    sub_1000BFEB0(v98, v99);
    sub_1000BFEB0(v59, v60);
LABEL_69:
    uint64_t v98 = v59;
    unint64_t v99 = v60;
    sub_1000AA680(v59, v60);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_70;
  }
  sub_1000BFEC4(v98, v99);
  char v61 = sub_1000E4B6C(v98, v99, v59, v60);
  sub_1000AA8F0(v59, v60);
  sub_1000BFEB0(v98, v99);
  sub_1000BFEB0(v98, v99);
  if ((v61 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_70:
  CKRecordKeyValueSetting.subscript.getter();
  long long v62 = (uint64_t *)(v1 + v97[19]);
  uint64_t v64 = *v62;
  unint64_t v63 = v62[1];
  if (!v99) {
    goto LABEL_75;
  }
  if (v98 == v64 && v99 == v63)
  {
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
  {
LABEL_75:
    uint64_t v98 = v64;
    unint64_t v99 = v63;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_76:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v66 = (uint64_t *)(v1 + v97[20]);
  uint64_t v68 = *v66;
  unint64_t v67 = v66[1];
  if (!v99) {
    goto LABEL_81;
  }
  if (v98 != v68 || v99 != v67)
  {
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v69) {
      goto LABEL_82;
    }
LABEL_81:
    uint64_t v98 = v68;
    unint64_t v99 = v67;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_82;
  }
  swift_bridgeObjectRelease();
LABEL_82:
  CKRecordKeyValueSetting.subscript.getter();
  id v70 = (uint64_t *)(v1 + v97[21]);
  uint64_t v72 = *v70;
  unint64_t v71 = v70[1];
  if (!v99) {
    goto LABEL_87;
  }
  if (v98 == v72 && v99 == v71)
  {
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v73 & 1) == 0)
  {
LABEL_87:
    uint64_t v98 = v72;
    unint64_t v99 = v71;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_88:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v74 = (uint64_t *)(v1 + v97[22]);
  uint64_t v76 = *v74;
  unint64_t v75 = v74[1];
  if (!v99) {
    goto LABEL_94;
  }
  if (v98 != v76 || v99 != v75)
  {
    char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v77) {
      goto LABEL_95;
    }
LABEL_94:
    uint64_t v98 = v76;
    unint64_t v99 = v75;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_95;
  }
  swift_bridgeObjectRelease();
LABEL_95:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v78 = (uint64_t *)(v1 + v97[23]);
  uint64_t v80 = *v78;
  unint64_t v79 = v78[1];
  if (!v99) {
    goto LABEL_100;
  }
  if (v98 == v80 && v99 == v79)
  {
    swift_bridgeObjectRelease();
    goto LABEL_101;
  }
  char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v81 & 1) == 0)
  {
LABEL_100:
    uint64_t v98 = v80;
    unint64_t v99 = v79;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_101:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v82 = (uint64_t *)(v1 + v97[24]);
  uint64_t v84 = *v82;
  unint64_t v83 = v82[1];
  if (!v99) {
    goto LABEL_106;
  }
  if (v98 != v84 || v99 != v83)
  {
    char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v85) {
      goto LABEL_107;
    }
LABEL_106:
    uint64_t v98 = v84;
    unint64_t v99 = v83;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_107;
  }
  swift_bridgeObjectRelease();
LABEL_107:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v86 = (uint64_t *)(v1 + v97[26]);
  uint64_t v88 = *v86;
  unint64_t v87 = v86[1];
  if (!v99) {
    goto LABEL_112;
  }
  if (v98 == v88 && v99 == v87)
  {
    swift_bridgeObjectRelease();
    goto LABEL_113;
  }
  char v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v89 & 1) == 0)
  {
LABEL_112:
    uint64_t v98 = v88;
    unint64_t v99 = v87;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_113:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v90 = (uint64_t *)(v1 + v97[27]);
  uint64_t v92 = *v90;
  unint64_t v91 = v90[1];
  if (!v99) {
    goto LABEL_118;
  }
  if (v98 != v92 || v99 != v91)
  {
    char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v93) {
      goto LABEL_119;
    }
LABEL_118:
    uint64_t v98 = v92;
    unint64_t v99 = v91;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_119;
  }
  swift_bridgeObjectRelease();
LABEL_119:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v94 = (void *)(v1 + v97[28]);
  if (!v99) {
    goto LABEL_124;
  }
  if (v98 == *v94 && v99 == v94[1])
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v96 & 1) == 0)
  {
LABEL_124:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1000DF374(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v311 = (char *)&v309 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = (int *)type metadata accessor for MagicPairingSettingsRecord();
  __chkstk_darwin(v312);
  uint64_t v8 = (char *)&v309 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000E0A90(a1))
  {
    uint64_t v309 = v5;
    uint64_t v310 = v4;
    static os_log_type_t.debug.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1001CFDB0;
    sub_1000E4E04(v1, (uint64_t)v8);
    uint64_t v10 = sub_1000DA054();
    uint64_t v12 = v11;
    sub_1000E4E68((uint64_t)v8);
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_1000AA5E0();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    id v13 = [a1 accessoryHint];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      uint64_t v18 = (uint64_t *)(v2 + v312[10]);
      uint64_t v19 = *v18;
      unint64_t v20 = v18[1];
      sub_1000AA680(*v18, v20);
      id v21 = [a1 accessoryHint];
      if (v21)
      {
        NSString v22 = v21;
        uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v25 = v24;

        sub_1000AA680(v19, v20);
        LOBYTE(v22) = sub_1000E4B6C(v19, v20, v23, v25);
        sub_1000AA8F0(v23, v25);
        sub_1000AA8F0(v19, v20);
        sub_1000AA8F0(v19, v20);
        if (v22)
        {
          sub_1000AA8F0(v15, v17);
          goto LABEL_15;
        }
      }
      else
      {
        sub_1000BFEB0(v19, v20);
        sub_1000BFEB0(0, 0xF000000000000000);
      }
      sub_1000AA8F0(v19, v20);
      *uint64_t v18 = v15;
      v18[1] = v17;
    }
LABEL_15:
    id v33 = [a1 accessoryKey];
    if (!v33) {
      goto LABEL_21;
    }
    int v34 = v33;
    uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v37 = v36;

    uint64_t v38 = (uint64_t *)(v2 + v312[9]);
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    sub_1000AA680(*v38, v40);
    id v41 = [a1 accessoryKey];
    if (v41)
    {
      unint64_t v42 = v41;
      uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;

      sub_1000AA680(v39, v40);
      LOBYTE(v42) = sub_1000E4B6C(v39, v40, v43, v45);
      sub_1000AA8F0(v43, v45);
      sub_1000AA8F0(v39, v40);
      sub_1000AA8F0(v39, v40);
      if (v42)
      {
        sub_1000AA8F0(v35, v37);
        goto LABEL_21;
      }
    }
    else
    {
      sub_1000BFEB0(v39, v40);
      sub_1000BFEB0(0, 0xF000000000000000);
    }
    sub_1000AA8F0(v39, v40);
    *uint64_t v38 = v35;
    v38[1] = v37;
LABEL_21:
    id v46 = [a1 buttonModes];
    if (!v46) {
      goto LABEL_30;
    }
    unint64_t v47 = v46;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;

    unint64_t v51 = (uint64_t *)(v2 + v312[15]);
    uint64_t v53 = *v51;
    uint64_t v52 = v51[1];
    swift_bridgeObjectRetain();
    id v54 = [a1 buttonModes];
    if (v54)
    {
      uint64_t v55 = v54;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v58 = v57;

      if (v53 == v56 && v52 == v58)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_30;
      }
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v59)
      {
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    *unint64_t v51 = v48;
    v51[1] = v50;
LABEL_30:
    id v60 = [a1 color];
    if (!v60) {
      goto LABEL_39;
    }
    char v61 = v60;
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;

    char v65 = (uint64_t *)(v2 + v312[16]);
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    swift_bridgeObjectRetain();
    id v68 = [a1 color];
    if (v68)
    {
      char v69 = v68;
      uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v72 = v71;

      if (v67 == v70 && v66 == v72)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_39;
      }
      char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v73)
      {
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v65 = v62;
    v65[1] = v64;
LABEL_39:
    id v74 = [a1 deviceIDFeatureBitsV1];
    if (!v74) {
      goto LABEL_48;
    }
    unint64_t v75 = v74;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v78 = v77;

    unint64_t v79 = (uint64_t *)(v2 + v312[17]);
    uint64_t v81 = *v79;
    uint64_t v80 = v79[1];
    swift_bridgeObjectRetain();
    id v82 = [a1 deviceIDFeatureBitsV1];
    if (v82)
    {
      unint64_t v83 = v82;
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v86 = v85;

      if (v81 == v84 && v80 == v86)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_48;
      }
      char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v87)
      {
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v79 = v76;
    v79[1] = v78;
LABEL_48:
    id v88 = [a1 deviceIDFeatureBitsV2];
    if (!v88) {
      goto LABEL_57;
    }
    char v89 = v88;
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v92 = v91;

    char v93 = (uint64_t *)(v2 + v312[18]);
    uint64_t v95 = *v93;
    uint64_t v94 = v93[1];
    swift_bridgeObjectRetain();
    id v96 = [a1 deviceIDFeatureBitsV2];
    if (v96)
    {
      unint64_t v97 = v96;
      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v100 = v99;

      if (v95 == v98 && v94 == v100)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_57;
      }
      char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v101)
      {
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v93 = v90;
    v93[1] = v92;
LABEL_57:
    id v102 = [a1 encryptionKey];
    if (!v102) {
      goto LABEL_63;
    }
    unint64_t v103 = v102;
    uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v106 = v105;

    id v107 = (uint64_t *)(v2 + v312[12]);
    uint64_t v108 = *v107;
    unint64_t v109 = v107[1];
    sub_1000AA680(*v107, v109);
    id v110 = [a1 encryptionKey];
    if (v110)
    {
      uint64_t v111 = v110;
      uint64_t v112 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v114 = v113;

      sub_1000AA680(v108, v109);
      LOBYTE(v111) = sub_1000E4B6C(v108, v109, v112, v114);
      sub_1000AA8F0(v112, v114);
      sub_1000AA8F0(v108, v109);
      sub_1000AA8F0(v108, v109);
      if (v111)
      {
        sub_1000AA8F0(v104, v106);
        goto LABEL_63;
      }
    }
    else
    {
      sub_1000BFEB0(v108, v109);
      sub_1000BFEB0(0, 0xF000000000000000);
    }
    sub_1000AA8F0(v108, v109);
    *id v107 = v104;
    v107[1] = v106;
LABEL_63:
    id v115 = [a1 irk];
    if (!v115) {
      goto LABEL_69;
    }
    uint64_t v116 = v115;
    uint64_t v117 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v119 = v118;

    unint64_t v120 = (uint64_t *)(v2 + v312[11]);
    uint64_t v121 = *v120;
    unint64_t v122 = v120[1];
    sub_1000AA680(*v120, v122);
    id v123 = [a1 irk];
    if (v123)
    {
      uint64_t v124 = v123;
      uint64_t v125 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v127 = v126;

      sub_1000AA680(v121, v122);
      LOBYTE(v124) = sub_1000E4B6C(v121, v122, v125, v127);
      sub_1000AA8F0(v125, v127);
      sub_1000AA8F0(v121, v122);
      sub_1000AA8F0(v121, v122);
      if (v124)
      {
        sub_1000AA8F0(v117, v119);
        goto LABEL_69;
      }
    }
    else
    {
      sub_1000BFEB0(v121, v122);
      sub_1000BFEB0(0, 0xF000000000000000);
    }
    sub_1000AA8F0(v121, v122);
    uint64_t *v120 = v117;
    v120[1] = v119;
LABEL_69:
    id v128 = [a1 listeningServices];
    if (!v128) {
      goto LABEL_78;
    }
    unint64_t v129 = v128;
    uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v132 = v131;

    uint64_t v133 = (uint64_t *)(v2 + v312[19]);
    uint64_t v135 = *v133;
    uint64_t v134 = v133[1];
    swift_bridgeObjectRetain();
    id v136 = [a1 listeningServices];
    if (v136)
    {
      unint64_t v137 = v136;
      uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v140 = v139;

      if (v135 == v138 && v134 == v140)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_78;
      }
      char v141 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v141)
      {
        swift_bridgeObjectRelease();
        goto LABEL_78;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    *uint64_t v133 = v130;
    v133[1] = v132;
LABEL_78:
    id v142 = [a1 listeningServicesV2];
    if (!v142) {
      goto LABEL_87;
    }
    uint64_t v143 = v142;
    uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v146 = v145;

    unint64_t v147 = (uint64_t *)(v2 + v312[20]);
    uint64_t v149 = *v147;
    uint64_t v148 = v147[1];
    swift_bridgeObjectRetain();
    id v150 = [a1 listeningServicesV2];
    if (v150)
    {
      long long v151 = v150;
      uint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v154 = v153;

      if (v149 == v152 && v148 == v154)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_87;
      }
      char v155 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v155)
      {
        swift_bridgeObjectRelease();
        goto LABEL_87;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v147 = v144;
    v147[1] = v146;
LABEL_87:
    id v156 = [a1 masterKey];
    if (!v156) {
      goto LABEL_93;
    }
    uint64_t v157 = v156;
    uint64_t v158 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v160 = v159;

    unint64_t v161 = (uint64_t *)(v2 + v312[7]);
    uint64_t v162 = *v161;
    unint64_t v163 = v161[1];
    sub_1000AA680(*v161, v163);
    id v164 = [a1 masterKey];
    if (v164)
    {
      unint64_t v165 = v164;
      uint64_t v166 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v168 = v167;

      sub_1000AA680(v162, v163);
      LOBYTE(v165) = sub_1000E4B6C(v162, v163, v166, v168);
      sub_1000AA8F0(v166, v168);
      sub_1000AA8F0(v162, v163);
      sub_1000AA8F0(v162, v163);
      if (v165)
      {
        sub_1000AA8F0(v158, v160);
        goto LABEL_93;
      }
    }
    else
    {
      sub_1000BFEB0(v162, v163);
      sub_1000BFEB0(0, 0xF000000000000000);
    }
    sub_1000AA8F0(v162, v163);
    *unint64_t v161 = v158;
    v161[1] = v160;
LABEL_93:
    id v169 = [a1 masterHint];
    if (!v169) {
      goto LABEL_99;
    }
    uint64_t v170 = v169;
    uint64_t v171 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v173 = v172;

    uint64_t v174 = (uint64_t *)(v2 + v312[8]);
    uint64_t v175 = *v174;
    unint64_t v176 = v174[1];
    sub_1000AA680(*v174, v176);
    id v177 = [a1 masterHint];
    if (v177)
    {
      id v178 = v177;
      uint64_t v179 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v181 = v180;

      sub_1000AA680(v175, v176);
      LOBYTE(v17_Block_object_dispose(&STACK[0x290], 8) = sub_1000E4B6C(v175, v176, v179, v181);
      sub_1000AA8F0(v179, v181);
      sub_1000AA8F0(v175, v176);
      sub_1000AA8F0(v175, v176);
      if (v178)
      {
        sub_1000AA8F0(v171, v173);
        goto LABEL_99;
      }
    }
    else
    {
      sub_1000BFEB0(v175, v176);
      sub_1000BFEB0(0, 0xF000000000000000);
    }
    sub_1000AA8F0(v175, v176);
    uint64_t *v174 = v171;
    v174[1] = v173;
LABEL_99:
    id v182 = [a1 optimizedBatteryCharging];
    if (!v182) {
      goto LABEL_108;
    }
    uint64_t v183 = v182;
    uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v186 = v185;

    uint64_t v187 = (uint64_t *)(v2 + v312[22]);
    uint64_t v189 = *v187;
    uint64_t v188 = v187[1];
    swift_bridgeObjectRetain();
    id v190 = [a1 optimizedBatteryCharging];
    if (v190)
    {
      unint64_t v191 = v190;
      uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v194 = v193;

      if (v189 == v192 && v188 == v194)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_108;
      }
      char v195 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v195)
      {
        swift_bridgeObjectRelease();
        goto LABEL_108;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    *uint64_t v187 = v184;
    v187[1] = v186;
LABEL_108:
    id v196 = [a1 optimizedBatteryFullChargeDeadline];
    if (!v196) {
      goto LABEL_117;
    }
    uint64_t v197 = v196;
    uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v200 = v199;

    uint64_t v201 = (uint64_t *)(v2 + v312[23]);
    uint64_t v203 = *v201;
    uint64_t v202 = v201[1];
    swift_bridgeObjectRetain();
    id v204 = [a1 optimizedBatteryFullChargeDeadline];
    if (v204)
    {
      uint64_t v205 = v204;
      uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v208 = v207;

      if (v203 == v206 && v202 == v208)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_117;
      }
      char v209 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v209)
      {
        swift_bridgeObjectRelease();
        goto LABEL_117;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    *uint64_t v201 = v198;
    v201[1] = v200;
LABEL_117:
    id v210 = [a1 productID];
    if (!v210) {
      goto LABEL_126;
    }
    v211 = v210;
    uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v214 = v213;

    uint64_t v215 = (uint64_t *)(v2 + v312[13]);
    uint64_t v217 = *v215;
    uint64_t v216 = v215[1];
    swift_bridgeObjectRetain();
    id v218 = [a1 productID];
    if (v218)
    {
      uint64_t v219 = v218;
      uint64_t v220 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v222 = v221;

      if (v217 == v220 && v216 == v222)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_126;
      }
      char v223 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v223)
      {
        swift_bridgeObjectRelease();
        goto LABEL_126;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    *uint64_t v215 = v212;
    v215[1] = v214;
LABEL_126:
    id v224 = [a1 ratchet];
    if (!v224) {
      goto LABEL_135;
    }
    uint64_t v225 = v224;
    uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v228 = v227;

    uint64_t v229 = (uint64_t *)(v2 + v312[24]);
    uint64_t v231 = *v229;
    uint64_t v230 = v229[1];
    swift_bridgeObjectRetain();
    id v232 = [a1 ratchet];
    if (v232)
    {
      char v233 = v232;
      uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v236 = v235;

      if (v231 == v234 && v230 == v236)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_135;
      }
      char v237 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v237)
      {
        swift_bridgeObjectRelease();
        goto LABEL_135;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    *uint64_t v229 = v226;
    v229[1] = v228;
LABEL_135:
    id v238 = [a1 settingsMask];
    if (!v238) {
      goto LABEL_144;
    }
    v239 = v238;
    uint64_t v240 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v242 = v241;

    v243 = (uint64_t *)(v2 + v312[26]);
    uint64_t v245 = *v243;
    uint64_t v244 = v243[1];
    swift_bridgeObjectRetain();
    id v246 = [a1 settingsMask];
    if (v246)
    {
      v247 = v246;
      uint64_t v248 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v250 = v249;

      if (v245 == v248 && v244 == v250)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_144;
      }
      char v251 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v251)
      {
        swift_bridgeObjectRelease();
        goto LABEL_144;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v243 = v240;
    v243[1] = v242;
LABEL_144:
    id v252 = [a1 spatialAudio];
    if (!v252) {
      goto LABEL_153;
    }
    v253 = v252;
    uint64_t v254 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v256 = v255;

    v257 = (uint64_t *)(v2 + v312[21]);
    uint64_t v259 = *v257;
    uint64_t v258 = v257[1];
    swift_bridgeObjectRetain();
    id v260 = [a1 spatialAudio];
    if (v260)
    {
      v261 = v260;
      uint64_t v262 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v264 = v263;

      if (v259 == v262 && v258 == v264)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_153;
      }
      char v265 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v265)
      {
        swift_bridgeObjectRelease();
        goto LABEL_153;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v257 = v254;
    v257[1] = v256;
LABEL_153:
    id v266 = [a1 supportedServices];
    if (!v266) {
      goto LABEL_162;
    }
    v267 = v266;
    uint64_t v268 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v270 = v269;

    v271 = (uint64_t *)(v2 + v312[27]);
    uint64_t v273 = *v271;
    uint64_t v272 = v271[1];
    swift_bridgeObjectRetain();
    id v274 = [a1 supportedServices];
    if (v274)
    {
      v275 = v274;
      uint64_t v276 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v278 = v277;

      if (v273 == v276 && v272 == v278)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_162;
      }
      char v279 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v279)
      {
        swift_bridgeObjectRelease();
        goto LABEL_162;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v271 = v268;
    v271[1] = v270;
LABEL_162:
    id v280 = [a1 vendorID];
    if (!v280) {
      goto LABEL_171;
    }
    v281 = v280;
    uint64_t v282 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v284 = v283;

    v285 = (uint64_t *)(v2 + v312[14]);
    uint64_t v287 = *v285;
    uint64_t v286 = v285[1];
    swift_bridgeObjectRetain();
    id v288 = [a1 vendorID];
    if (v288)
    {
      v289 = v288;
      uint64_t v290 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v292 = v291;

      if (v287 == v290 && v286 == v292)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_171;
      }
      char v293 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v293)
      {
        swift_bridgeObjectRelease();
        goto LABEL_171;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t *v285 = v282;
    v285[1] = v284;
LABEL_171:
    id v294 = [a1 version];
    if (v294)
    {
      v295 = v294;
      uint64_t v296 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v298 = v297;

      v299 = (uint64_t *)(v2 + v312[28]);
      uint64_t v301 = *v299;
      uint64_t v300 = v299[1];
      swift_bridgeObjectRetain();
      id v302 = [a1 version];
      if (v302)
      {
        v303 = v302;
        uint64_t v304 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v306 = v305;

        if (v301 == v304 && v300 == v306)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_180;
        }
        char v307 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v307)
        {
          swift_bridgeObjectRelease();
          goto LABEL_180;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t *v299 = v296;
      v299[1] = v298;
    }
LABEL_180:
    v308 = v311;
    static Date.now.getter();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v309 + 40))(v2 + v312[30], v308, v310);
  }
  static os_log_type_t.info.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1001CFDB0;
  id v27 = a1;
  id v28 = [v27 description];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  *(void *)(v26 + 56) = &type metadata for String;
  *(void *)(v26 + 64) = sub_1000AA5E0();
  *(void *)(v26 + 32) = v29;
  *(void *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

id sub_1000E0A90(void *a1)
{
  uint64_t v3 = type metadata accessor for MagicPairingSettingsRecord();
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v479 - v5;
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v479 - v9;
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v479 - v19;
  __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  uint64_t v487 = (uint64_t)&v479 - v23;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v479 - v25;
  __chkstk_darwin(v27);
  uint64_t v489 = (uint64_t)&v479 - v28;
  __chkstk_darwin(v29);
  uint64_t v506 = (uint64_t)&v479 - v30;
  __chkstk_darwin(v31);
  v488 = (char *)&v479 - v32;
  __chkstk_darwin(v33);
  uint64_t v508 = (uint64_t)&v479 - v34;
  __chkstk_darwin(v35);
  v490 = (char *)&v479 - v36;
  __chkstk_darwin(v37);
  v504 = (char *)&v479 - v38;
  __chkstk_darwin(v39);
  uint64_t v491 = (uint64_t)&v479 - v40;
  __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v479 - v42;
  __chkstk_darwin(v44);
  uint64_t v492 = (uint64_t)&v479 - v45;
  __chkstk_darwin(v46);
  v507 = (char *)&v479 - v47;
  __chkstk_darwin(v48);
  uint64_t v496 = (uint64_t)&v479 - v49;
  __chkstk_darwin(v50);
  uint64_t v509 = (uint64_t)&v479 - v51;
  __chkstk_darwin(v52);
  v499 = (char *)&v479 - v53;
  __chkstk_darwin(v54);
  uint64_t v510 = (uint64_t)&v479 - v55;
  __chkstk_darwin(v56);
  uint64_t v498 = (uint64_t)&v479 - v57;
  __chkstk_darwin(v58);
  uint64_t v511 = (uint64_t)&v479 - v59;
  __chkstk_darwin(v60);
  uint64_t v501 = (uint64_t)&v479 - v61;
  __chkstk_darwin(v62);
  uint64_t v513 = (uint64_t)&v479 - v63;
  __chkstk_darwin(v64);
  uint64_t v502 = (uint64_t)&v479 - v65;
  __chkstk_darwin(v66);
  uint64_t v514 = (uint64_t)&v479 - v67;
  __chkstk_darwin(v68);
  uint64_t v70 = (char *)&v479 - v69;
  __chkstk_darwin(v71);
  char v73 = (char *)&v479 - v72;
  __chkstk_darwin(v74);
  char v87 = (char *)&v479 - v86;
  if (!a1)
  {
    char v100 = 0;
    return (id)(v100 & 1);
  }
  v503 = v43;
  v485 = v20;
  v495 = v26;
  uint64_t v484 = v82;
  uint64_t v500 = v81;
  uint64_t v479 = v80;
  uint64_t v483 = v79;
  uint64_t v497 = v78;
  uint64_t v482 = v77;
  uint64_t v494 = v76;
  uint64_t v481 = v85;
  v512 = v75;
  uint64_t v493 = v84;
  uint64_t v480 = v83;
  id v88 = a1;
  id v89 = [v88 listeningServices];
  id v515 = v88;
  v505 = v10;
  if (!v89)
  {
    id v96 = v6;
    uint64_t v101 = v1;
    goto LABEL_35;
  }
  uint64_t v486 = v1;
  uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v92 = v91;

  id v93 = [v88 productID];
  if (!v93) {
    goto LABEL_16;
  }
  uint64_t v94 = v93;
  uint64_t v95 = v90;
  id v96 = v6;
  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v99 = v98;

  if (v97 == 876163384 && v99 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v90 = v95;
  }
  else
  {
    char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v90 = v95;
    if ((v102 & 1) == 0) {
      goto LABEL_16;
    }
  }
  id v103 = [v515 productID];
  if (!v103)
  {
LABEL_16:
    id v96 = v6;
    unint64_t v109 = v512;
    uint64_t v110 = v486;
    uint64_t v111 = (uint64_t *)(v486 + v512[19]);
    uint64_t v112 = *v111;
    unint64_t v113 = v111[1];
    swift_bridgeObjectRetain();
    __int16 v114 = sub_10015430C(v112, v113);
    LOBYTE(v113) = v115;
    __int16 v116 = sub_10015430C(v90, v92);
    if (v113) {
      __int16 v118 = 0;
    }
    else {
      __int16 v118 = v114;
    }
    if (v117) {
      __int16 v119 = 0;
    }
    else {
      __int16 v119 = v116;
    }
    uint64_t v120 = (unsigned __int16)(v119 ^ v118) & 0xFF8C;
    LODWORD(v89) = v120 != 0;
    id v121 = [v515 listeningServicesV2];
    if (!v121)
    {
      uint64_t v101 = v110;
      goto LABEL_34;
    }
    unint64_t v122 = v121;
    uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v125 = v124;

    uint64_t v126 = sub_10015430C(v123, v125);
    if (v127) {
      id v89 = 0;
    }
    else {
      id v89 = (id)v126;
    }
    uint64_t v128 = v109[20];
    uint64_t v101 = v110;
    unint64_t v129 = (uint64_t *)(v110 + v128);
    uint64_t v130 = *v129;
    unint64_t v131 = v129[1];
    swift_bridgeObjectRetain();
    uint64_t v132 = sub_10015430C(v130, v131);
    if (v133)
    {
      if (!v120)
      {
        uint64_t v132 = 0;
LABEL_33:
        LODWORD(v89) = v89 != (id)v132;
        goto LABEL_34;
      }
    }
    else if (!v120)
    {
      goto LABEL_33;
    }
    LODWORD(v89) = 1;
    goto LABEL_34;
  }
  uint64_t v104 = v103;
  uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v107 = v106;

  if (v105 != 925905464 || v107 != 0xE400000000000000)
  {
    char v108 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v90 = v95;
    if (v108) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  LODWORD(v89) = 0;
  uint64_t v101 = v486;
LABEL_34:
  uint64_t v10 = v505;
LABEL_35:
  id v134 = [v515 productID];
  if (!v134)
  {
    sub_1000E4E04(v101, (uint64_t)v87);
    goto LABEL_42;
  }
  uint64_t v135 = v134;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v137 = v136;

  swift_bridgeObjectRelease();
  sub_1000E4E04(v101, (uint64_t)v87);
  if (!v137)
  {
LABEL_42:
    LODWORD(v486) = v89;
    sub_1000E4E68((uint64_t)v87);
    uint64_t v147 = v101;
    id v146 = v96;
    goto LABEL_43;
  }
  id v138 = [v515 productID];
  if (!v138)
  {
    sub_1000E4E68((uint64_t)v87);
    uint64_t v147 = v101;
    sub_1000E4E04(v101, (uint64_t)v73);
    id v146 = v96;
    goto LABEL_97;
  }
  uint64_t v139 = v138;
  LODWORD(v486) = v89;
  uint64_t v140 = v10;
  uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v143 = v142;

  uint64_t v144 = &v87[v512[13]];
  uint64_t v145 = v101;
  if (v141 == *(void *)v144 && v143 == *((void *)v144 + 1))
  {
    sub_1000E4E68((uint64_t)v87);
    swift_bridgeObjectRelease();
    uint64_t v10 = v140;
    id v146 = v96;
    uint64_t v147 = v145;
LABEL_43:
    sub_1000E4E04(v147, (uint64_t)v73);
    goto LABEL_44;
  }
  char v253 = _stringCompareWithSmolCheck(_:_:expecting:)();
  sub_1000E4E68((uint64_t)v87);
  swift_bridgeObjectRelease();
  sub_1000E4E04(v101, (uint64_t)v73);
  uint64_t v10 = v140;
  uint64_t v147 = v101;
  id v146 = v96;
  if ((v253 & 1) == 0)
  {
LABEL_97:
    sub_1000E4E68((uint64_t)v73);
LABEL_108:
    uint64_t v158 = (uint64_t)v503;
    uint64_t v159 = v514;
    sub_1000E4E04(v147, v514);
    id v160 = v515;
    goto LABEL_109;
  }
LABEL_44:
  id v148 = [v515 vendorID];
  if (!v148)
  {
    sub_1000E4E04((uint64_t)v73, (uint64_t)v70);
    goto LABEL_51;
  }
  uint64_t v149 = v148;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v151 = v150;

  swift_bridgeObjectRelease();
  sub_1000E4E04((uint64_t)v73, (uint64_t)v70);
  if (!v151)
  {
LABEL_51:
    sub_1000E4E68((uint64_t)v70);
    sub_1000E4E68((uint64_t)v73);
    goto LABEL_52;
  }
  id v152 = [v515 vendorID];
  if (!v152)
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68((uint64_t)v70);
    sub_1000E4E68((uint64_t)v73);
    swift_bridgeObjectRelease();
    goto LABEL_108;
  }
  uint64_t v153 = v152;
  uint64_t v154 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v156 = v155;

  uint64_t v157 = &v70[v512[14]];
  uint64_t v158 = (uint64_t)v503;
  if (v154 == *(void *)v157 && v156 == *((void *)v157 + 1))
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68((uint64_t)v70);
    sub_1000E4E68((uint64_t)v73);
    swift_bridgeObjectRelease_n();
LABEL_52:
    uint64_t v159 = v514;
    sub_1000E4E04(v147, v514);
    id v160 = v515;
    goto LABEL_53;
  }
  char v273 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68((uint64_t)v70);
  sub_1000E4E68((uint64_t)v73);
  swift_bridgeObjectRelease_n();
  uint64_t v159 = v514;
  sub_1000E4E04(v147, v514);
  id v160 = v515;
  if ((v273 & 1) == 0)
  {
LABEL_109:
    sub_1000E4E68(v159);
    uint64_t v179 = (uint64_t)v507;
    uint64_t v180 = v511;
    uint64_t v181 = v513;
LABEL_110:
    sub_1000E4E04(v147, v181);
    uint64_t v178 = v181;
LABEL_111:
    sub_1000E4E68(v178);
LABEL_112:
    sub_1000E4E04(v147, v180);
LABEL_113:
    sub_1000E4E68(v180);
    uint64_t v219 = v510;
LABEL_114:
    sub_1000E4E04(v147, v219);
    uint64_t v218 = v219;
LABEL_115:
    sub_1000E4E68(v218);
    uint64_t v237 = v509;
LABEL_116:
    uint64_t v236 = (uint64_t)v504;
    sub_1000E4E04(v147, v237);
    uint64_t v235 = v237;
LABEL_117:
    sub_1000E4E68(v235);
LABEL_118:
    sub_1000E4E04(v147, v179);
LABEL_119:
    sub_1000E4E68(v179);
LABEL_120:
    sub_1000E4E04(v147, v158);
LABEL_121:
    sub_1000E4E68(v158);
LABEL_122:
    sub_1000E4E04(v147, v236);
LABEL_123:
    sub_1000E4E68(v236);
LABEL_124:
    uint64_t v265 = v508;
    sub_1000E4E04(v147, v508);
LABEL_125:
    sub_1000E4E68(v265);
LABEL_126:
    uint64_t v266 = v506;
    sub_1000E4E04(v147, v506);
LABEL_127:
    sub_1000E4E68(v266);
LABEL_128:
    uint64_t v267 = (uint64_t)v495;
    sub_1000E4E04(v147, (uint64_t)v495);
LABEL_129:
    sub_1000E4E68(v267);
LABEL_130:
    uint64_t v268 = v500;
    sub_1000E4E04(v147, v500);
LABEL_131:
    sub_1000E4E68(v268);
LABEL_132:
    uint64_t v269 = v497;
    sub_1000E4E04(v147, v497);
LABEL_133:
    sub_1000E4E68(v269);
LABEL_134:
    uint64_t v270 = v494;
    sub_1000E4E04(v147, v494);
LABEL_135:
    sub_1000E4E68(v270);
LABEL_136:
    uint64_t v271 = v493;
    sub_1000E4E04(v147, v493);
LABEL_137:
    sub_1000E4E68(v271);
LABEL_138:
    sub_1000E4E04(v147, (uint64_t)v10);
LABEL_139:
    sub_1000E4E68((uint64_t)v10);
LABEL_140:
    sub_1000E4E04(v147, (uint64_t)v146);
LABEL_141:
    sub_1000E4E68((uint64_t)v146);

    char v100 = 1;
    return (id)(v100 & 1);
  }
LABEL_53:
  id v161 = v146;
  id v162 = [v160 masterKey];
  if (!v162)
  {
    uint64_t v167 = v502;
    sub_1000E4E04(v159, v502);
    goto LABEL_60;
  }
  unint64_t v163 = v162;
  uint64_t v164 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v166 = v165;

  sub_1000AA8F0(v164, v166);
  uint64_t v167 = v502;
  sub_1000E4E04(v514, v502);
  unint64_t v168 = v166 >> 60;
  uint64_t v159 = v514;
  if (v168 > 0xE)
  {
LABEL_60:
    sub_1000E4E68(v167);
    sub_1000E4E68(v159);
    uint64_t v181 = v513;
    goto LABEL_61;
  }
  id v169 = [v160 masterKey];
  if (!v169)
  {
    uint64_t v171 = 0;
    uint64_t v296 = (uint64_t *)(v167 + v512[7]);
    uint64_t v175 = *v296;
    unint64_t v176 = v296[1];
    unint64_t v173 = 0xF000000000000000;
    uint64_t v158 = (uint64_t)v503;
LABEL_164:
    uint64_t v179 = (uint64_t)v507;
    uint64_t v181 = v513;
    sub_1000AA680(v175, v176);
    sub_1000E4E68(v167);
    sub_1000E4E68(v514);
    sub_1000BFEB0(v171, v173);
    if (v176 >> 60 != 15)
    {
      sub_1000BFEB0(v175, v176);
      id v160 = v515;
      uint64_t v180 = v511;
      id v146 = v161;
      uint64_t v10 = v505;
      goto LABEL_110;
    }
LABEL_61:
    sub_1000E4E04(v147, v181);
    id v160 = v515;
    id v146 = v161;
    uint64_t v10 = v505;
    goto LABEL_62;
  }
  uint64_t v170 = v169;
  uint64_t v171 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v173 = v172;

  uint64_t v174 = (uint64_t *)(v167 + v512[7]);
  uint64_t v175 = *v174;
  unint64_t v176 = v174[1];
  uint64_t v158 = (uint64_t)v503;
  if (v173 >> 60 == 15) {
    goto LABEL_164;
  }
  sub_1000AA680(v175, v176);
  sub_1000BFEC4(v171, v173);
  char v177 = sub_1000E4B6C(v171, v173, v175, v176);
  sub_1000AA8F0(v175, v176);
  sub_1000E4E68(v167);
  sub_1000E4E68(v514);
  sub_1000BFEB0(v171, v173);
  sub_1000BFEB0(v171, v173);
  uint64_t v178 = v513;
  sub_1000E4E04(v147, v513);
  id v160 = v515;
  uint64_t v179 = (uint64_t)v507;
  uint64_t v180 = v511;
  id v146 = v161;
  uint64_t v10 = v505;
  if ((v177 & 1) == 0) {
    goto LABEL_111;
  }
LABEL_62:
  id v182 = v10;
  id v183 = v146;
  id v184 = [v160 masterHint];
  if (!v184)
  {
    uint64_t v189 = v513;
    uint64_t v190 = v501;
    sub_1000E4E04(v513, v501);
    goto LABEL_69;
  }
  uint64_t v185 = v184;
  uint64_t v186 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v188 = v187;

  sub_1000AA8F0(v186, v188);
  uint64_t v189 = v513;
  uint64_t v190 = v501;
  sub_1000E4E04(v513, v501);
  if (v188 >> 60 == 15)
  {
LABEL_69:
    sub_1000E4E68(v190);
    sub_1000E4E68(v189);
LABEL_70:
    sub_1000E4E04(v147, v511);
    id v146 = v183;
    goto LABEL_71;
  }
  id v191 = [v160 masterHint];
  if (!v191)
  {
    uint64_t v193 = 0;
    uint64_t v297 = (uint64_t *)(v190 + v512[8]);
    uint64_t v197 = *v297;
    unint64_t v198 = v297[1];
    unint64_t v195 = 0xF000000000000000;
LABEL_167:
    uint64_t v298 = v513;
    sub_1000AA680(v197, v198);
    sub_1000E4E68(v190);
    sub_1000E4E68(v298);
    sub_1000BFEB0(v193, v195);
    if (v198 >> 60 != 15)
    {
      sub_1000BFEB0(v197, v198);
      uint64_t v179 = (uint64_t)v507;
      uint64_t v180 = v511;
      id v146 = v183;
      uint64_t v10 = v182;
      uint64_t v158 = (uint64_t)v503;
      goto LABEL_112;
    }
    goto LABEL_70;
  }
  uint64_t v192 = v191;
  uint64_t v193 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v195 = v194;

  id v196 = (uint64_t *)(v190 + v512[8]);
  uint64_t v197 = *v196;
  unint64_t v198 = v196[1];
  if (v195 >> 60 == 15) {
    goto LABEL_167;
  }
  sub_1000AA680(v197, v198);
  sub_1000BFEC4(v193, v195);
  char v199 = sub_1000E4B6C(v193, v195, v197, v198);
  sub_1000AA8F0(v197, v198);
  sub_1000E4E68(v190);
  sub_1000E4E68(v513);
  sub_1000BFEB0(v193, v195);
  sub_1000BFEB0(v193, v195);
  uint64_t v180 = v511;
  sub_1000E4E04(v147, v511);
  uint64_t v179 = (uint64_t)v507;
  id v146 = v183;
  uint64_t v10 = v182;
  uint64_t v158 = (uint64_t)v503;
  if ((v199 & 1) == 0) {
    goto LABEL_113;
  }
LABEL_71:
  id v200 = v146;
  id v201 = [v160 accessoryKey];
  if (!v201)
  {
    uint64_t v206 = v511;
    uint64_t v207 = v498;
    sub_1000E4E04(v511, v498);
    uint64_t v208 = (uint64_t)v499;
    goto LABEL_78;
  }
  uint64_t v202 = v201;
  uint64_t v203 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v205 = v204;

  sub_1000AA8F0(v203, v205);
  uint64_t v206 = v511;
  uint64_t v207 = v498;
  sub_1000E4E04(v511, v498);
  uint64_t v208 = (uint64_t)v499;
  if (v205 >> 60 == 15)
  {
LABEL_78:
    sub_1000E4E68(v207);
    sub_1000E4E68(v206);
    uint64_t v219 = v510;
LABEL_79:
    sub_1000E4E04(v147, v219);
    id v146 = v200;
    uint64_t v10 = v505;
    goto LABEL_80;
  }
  id v209 = [v160 accessoryKey];
  if (!v209)
  {
    uint64_t v211 = 0;
    v315 = (uint64_t *)(v207 + v512[9]);
    uint64_t v215 = *v315;
    unint64_t v216 = v315[1];
    unint64_t v213 = 0xF000000000000000;
LABEL_179:
    uint64_t v219 = v510;
    sub_1000AA680(v215, v216);
    sub_1000E4E68(v207);
    sub_1000E4E68(v511);
    sub_1000BFEB0(v211, v213);
    if (v216 >> 60 != 15)
    {
      sub_1000BFEB0(v215, v216);
      uint64_t v158 = (uint64_t)v503;
      uint64_t v179 = (uint64_t)v507;
      id v146 = v200;
      uint64_t v10 = v505;
      goto LABEL_114;
    }
    goto LABEL_79;
  }
  id v210 = v209;
  uint64_t v211 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v213 = v212;

  uint64_t v214 = (uint64_t *)(v207 + v512[9]);
  uint64_t v215 = *v214;
  unint64_t v216 = v214[1];
  if (v213 >> 60 == 15) {
    goto LABEL_179;
  }
  sub_1000AA680(v215, v216);
  sub_1000BFEC4(v211, v213);
  char v217 = sub_1000E4B6C(v211, v213, v215, v216);
  sub_1000AA8F0(v215, v216);
  sub_1000E4E68(v207);
  sub_1000E4E68(v511);
  sub_1000BFEB0(v211, v213);
  sub_1000BFEB0(v211, v213);
  uint64_t v218 = v510;
  sub_1000E4E04(v147, v510);
  uint64_t v158 = (uint64_t)v503;
  uint64_t v179 = (uint64_t)v507;
  id v146 = v200;
  uint64_t v10 = v505;
  if ((v217 & 1) == 0) {
    goto LABEL_115;
  }
LABEL_80:
  id v220 = [v160 accessoryHint];
  if (!v220)
  {
    uint64_t v225 = v510;
    sub_1000E4E04(v510, v208);
    goto LABEL_88;
  }
  uint64_t v221 = v220;
  uint64_t v222 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v224 = v223;

  sub_1000AA8F0(v222, v224);
  uint64_t v225 = v510;
  sub_1000E4E04(v510, v208);
  if (v224 >> 60 == 15)
  {
LABEL_88:
    sub_1000E4E68(v208);
    sub_1000E4E68(v225);
    uint64_t v237 = v509;
LABEL_89:
    sub_1000E4E04(v147, v237);
    uint64_t v158 = (uint64_t)v503;
    uint64_t v179 = (uint64_t)v507;
    goto LABEL_90;
  }
  id v226 = [v160 accessoryHint];
  if (!v226)
  {
    uint64_t v228 = 0;
    v334 = (uint64_t *)(v208 + v512[10]);
    uint64_t v232 = *v334;
    unint64_t v233 = v334[1];
    unint64_t v230 = 0xF000000000000000;
LABEL_192:
    uint64_t v237 = v509;
    sub_1000AA680(v232, v233);
    sub_1000E4E68(v208);
    sub_1000E4E68(v510);
    sub_1000BFEB0(v228, v230);
    if (v233 >> 60 != 15)
    {
      sub_1000BFEB0(v232, v233);
      uint64_t v158 = (uint64_t)v503;
      uint64_t v179 = (uint64_t)v507;
      goto LABEL_116;
    }
    goto LABEL_89;
  }
  uint64_t v227 = v226;
  uint64_t v228 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v230 = v229;

  uint64_t v231 = (uint64_t *)(v208 + v512[10]);
  uint64_t v232 = *v231;
  unint64_t v233 = v231[1];
  if (v230 >> 60 == 15) {
    goto LABEL_192;
  }
  sub_1000AA680(v232, v233);
  sub_1000BFEC4(v228, v230);
  char v234 = sub_1000E4B6C(v228, v230, v232, v233);
  sub_1000AA8F0(v232, v233);
  sub_1000E4E68(v208);
  sub_1000E4E68(v510);
  sub_1000BFEB0(v228, v230);
  sub_1000BFEB0(v228, v230);
  uint64_t v235 = v509;
  sub_1000E4E04(v147, v509);
  uint64_t v158 = (uint64_t)v503;
  uint64_t v236 = (uint64_t)v504;
  uint64_t v179 = (uint64_t)v507;
  if ((v234 & 1) == 0) {
    goto LABEL_117;
  }
LABEL_90:
  id v238 = v10;
  id v239 = v146;
  id v240 = [v160 buttonModes];
  if (!v240)
  {
    uint64_t v244 = v509;
    uint64_t v245 = v496;
    sub_1000E4E04(v509, v496);
    goto LABEL_99;
  }
  uint64_t v241 = v240;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v243 = v242;

  swift_bridgeObjectRelease();
  uint64_t v244 = v509;
  uint64_t v245 = v496;
  sub_1000E4E04(v509, v496);
  if (!v243)
  {
LABEL_99:
    sub_1000E4E68(v245);
    sub_1000E4E68(v244);
    id v146 = v239;
    goto LABEL_100;
  }
  id v246 = [v160 buttonModes];
  if (!v246)
  {
    uint64_t v333 = v496;
    swift_bridgeObjectRetain();
    sub_1000E4E68(v333);
    sub_1000E4E68(v509);
    swift_bridgeObjectRelease();
    id v146 = v239;
    uint64_t v10 = v238;
    uint64_t v236 = (uint64_t)v504;
    goto LABEL_118;
  }
  v247 = v246;
  uint64_t v248 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v250 = v249;

  uint64_t v251 = v496;
  id v252 = (void *)(v496 + v512[15]);
  id v146 = v239;
  if (v248 == *v252 && v250 == v252[1])
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v251);
    sub_1000E4E68(v509);
    swift_bridgeObjectRelease_n();
LABEL_100:
    uint64_t v10 = v238;
    sub_1000E4E04(v147, v179);
    uint64_t v236 = (uint64_t)v504;
    goto LABEL_101;
  }
  uint64_t v337 = v496;
  char v338 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68(v337);
  sub_1000E4E68(v509);
  swift_bridgeObjectRelease_n();
  sub_1000E4E04(v147, v179);
  uint64_t v10 = v238;
  uint64_t v236 = (uint64_t)v504;
  if ((v338 & 1) == 0) {
    goto LABEL_119;
  }
LABEL_101:
  id v254 = [v160 color];
  if (!v254)
  {
    uint64_t v258 = v492;
    sub_1000E4E04(v179, v492);
    goto LABEL_146;
  }
  uint64_t v255 = v254;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v257 = v256;

  swift_bridgeObjectRelease();
  uint64_t v258 = v492;
  sub_1000E4E04(v179, v492);
  if (!v257)
  {
LABEL_146:
    sub_1000E4E68(v258);
    sub_1000E4E68(v179);
    goto LABEL_147;
  }
  id v259 = [v160 color];
  if (!v259)
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v258);
    sub_1000E4E68(v179);
    swift_bridgeObjectRelease();
    goto LABEL_120;
  }
  id v260 = v259;
  id v515 = v146;
  uint64_t v261 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v263 = v262;

  uint64_t v264 = (void *)(v258 + v512[16]);
  if (v261 == *v264 && v263 == v264[1])
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v492);
    sub_1000E4E68(v179);
    swift_bridgeObjectRelease_n();
    id v146 = v515;
LABEL_147:
    sub_1000E4E04(v147, v158);
    goto LABEL_148;
  }
  char v339 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68(v492);
  sub_1000E4E68(v179);
  swift_bridgeObjectRelease_n();
  sub_1000E4E04(v147, v158);
  id v146 = v515;
  if ((v339 & 1) == 0) {
    goto LABEL_121;
  }
LABEL_148:
  id v274 = [v160 deviceIDFeatureBitsV1];
  if (!v274)
  {
    uint64_t v278 = v491;
    sub_1000E4E04(v158, v491);
    goto LABEL_155;
  }
  v275 = v274;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v277 = v276;

  swift_bridgeObjectRelease();
  uint64_t v278 = v491;
  sub_1000E4E04(v158, v491);
  if (!v277)
  {
LABEL_155:
    sub_1000E4E68(v278);
    sub_1000E4E68(v158);
    goto LABEL_156;
  }
  id v279 = [v160 deviceIDFeatureBitsV1];
  if (!v279)
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v278);
    sub_1000E4E68(v158);
    swift_bridgeObjectRelease();
    goto LABEL_122;
  }
  id v280 = v279;
  uint64_t v281 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v283 = v282;

  uint64_t v284 = (void *)(v278 + v512[17]);
  if (v281 == *v284 && v283 == v284[1])
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v491);
    sub_1000E4E68(v158);
    swift_bridgeObjectRelease_n();
LABEL_156:
    sub_1000E4E04(v147, v236);
    uint64_t v285 = (uint64_t)v490;
    goto LABEL_157;
  }
  char v340 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68(v491);
  sub_1000E4E68(v158);
  swift_bridgeObjectRelease_n();
  sub_1000E4E04(v147, v236);
  uint64_t v285 = (uint64_t)v490;
  if ((v340 & 1) == 0) {
    goto LABEL_123;
  }
LABEL_157:
  id v286 = [v160 deviceIDFeatureBitsV2];
  if (!v286)
  {
    sub_1000E4E04(v236, v285);
    goto LABEL_170;
  }
  uint64_t v287 = v286;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v289 = v288;

  swift_bridgeObjectRelease();
  sub_1000E4E04(v236, v285);
  if (!v289)
  {
LABEL_170:
    sub_1000E4E68(v285);
    sub_1000E4E68(v236);
    goto LABEL_171;
  }
  id v290 = [v160 deviceIDFeatureBitsV2];
  if (!v290)
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v285);
    sub_1000E4E68(v236);
    swift_bridgeObjectRelease();
    goto LABEL_124;
  }
  uint64_t v291 = v290;
  uint64_t v292 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v294 = v293;

  v295 = (void *)(v285 + v512[18]);
  if (v292 == *v295 && v294 == v295[1])
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v285);
    sub_1000E4E68(v236);
    swift_bridgeObjectRelease_n();
LABEL_171:
    sub_1000E4E04(v147, v508);
    uint64_t v299 = (uint64_t)v488;
    goto LABEL_172;
  }
  char v341 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68(v285);
  sub_1000E4E68(v236);
  swift_bridgeObjectRelease_n();
  uint64_t v265 = v508;
  sub_1000E4E04(v147, v508);
  uint64_t v299 = (uint64_t)v488;
  if ((v341 & 1) == 0) {
    goto LABEL_125;
  }
LABEL_172:
  id v300 = [v160 encryptionKey];
  if (!v300)
  {
    uint64_t v305 = v508;
    sub_1000E4E04(v508, v299);
    goto LABEL_182;
  }
  uint64_t v301 = v300;
  uint64_t v302 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v304 = v303;

  sub_1000AA8F0(v302, v304);
  uint64_t v305 = v508;
  sub_1000E4E04(v508, v299);
  if (v304 >> 60 == 15)
  {
LABEL_182:
    sub_1000E4E68(v299);
    sub_1000E4E68(v305);
LABEL_183:
    sub_1000E4E04(v147, v506);
    goto LABEL_184;
  }
  id v306 = [v160 encryptionKey];
  if (!v306)
  {
    uint64_t v308 = 0;
    v342 = (uint64_t *)(v299 + v512[12]);
    uint64_t v312 = *v342;
    unint64_t v313 = v342[1];
    unint64_t v310 = 0xF000000000000000;
LABEL_212:
    uint64_t v343 = v508;
    sub_1000AA680(v312, v313);
    sub_1000E4E68(v299);
    sub_1000E4E68(v343);
    sub_1000BFEB0(v308, v310);
    if (v313 >> 60 != 15)
    {
      sub_1000BFEB0(v312, v313);
      goto LABEL_126;
    }
    goto LABEL_183;
  }
  char v307 = v306;
  uint64_t v308 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v310 = v309;

  v311 = (uint64_t *)(v299 + v512[12]);
  uint64_t v312 = *v311;
  unint64_t v313 = v311[1];
  if (v310 >> 60 == 15) {
    goto LABEL_212;
  }
  sub_1000AA680(v312, v313);
  sub_1000BFEC4(v308, v310);
  char v314 = sub_1000E4B6C(v308, v310, v312, v313);
  sub_1000AA8F0(v312, v313);
  sub_1000E4E68(v299);
  sub_1000E4E68(v508);
  sub_1000BFEB0(v308, v310);
  sub_1000BFEB0(v308, v310);
  uint64_t v266 = v506;
  sub_1000E4E04(v147, v506);
  if ((v314 & 1) == 0) {
    goto LABEL_127;
  }
LABEL_184:
  id v316 = [v160 irk];
  if (!v316)
  {
    uint64_t v321 = v506;
    uint64_t v322 = v489;
    sub_1000E4E04(v506, v489);
    goto LABEL_195;
  }
  v317 = v316;
  uint64_t v318 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v320 = v319;

  sub_1000AA8F0(v318, v320);
  uint64_t v321 = v506;
  uint64_t v322 = v489;
  sub_1000E4E04(v506, v489);
  if (v320 >> 60 == 15)
  {
LABEL_195:
    sub_1000E4E68(v322);
    sub_1000E4E68(v321);
    goto LABEL_196;
  }
  id v323 = [v160 irk];
  if (!v323)
  {
    uint64_t v325 = 0;
    uint64_t v328 = v489;
    v382 = (uint64_t *)(v489 + v512[11]);
    uint64_t v330 = *v382;
    unint64_t v331 = v382[1];
    unint64_t v327 = 0xF000000000000000;
LABEL_240:
    sub_1000AA680(v330, v331);
    sub_1000E4E68(v328);
    sub_1000E4E68(v506);
    sub_1000BFEB0(v325, v327);
    if (v331 >> 60 != 15)
    {
      sub_1000BFEB0(v330, v331);
      goto LABEL_128;
    }
    goto LABEL_196;
  }
  v324 = v323;
  uint64_t v325 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v327 = v326;

  uint64_t v328 = v489;
  v329 = (uint64_t *)(v489 + v512[11]);
  uint64_t v330 = *v329;
  unint64_t v331 = v329[1];
  if (v327 >> 60 == 15) {
    goto LABEL_240;
  }
  sub_1000AA680(v330, v331);
  sub_1000BFEC4(v325, v327);
  char v332 = sub_1000E4B6C(v325, v327, v330, v331);
  sub_1000AA8F0(v330, v331);
  sub_1000E4E68(v328);
  sub_1000E4E68(v506);
  sub_1000BFEB0(v325, v327);
  sub_1000BFEB0(v325, v327);
  if ((v332 & 1) == 0) {
    goto LABEL_128;
  }
LABEL_196:
  id v335 = [v160 listeningServices];
  if (v335 || (id v335 = [v160 listeningServicesV2]) != 0)
  {

    uint64_t v267 = (uint64_t)v495;
    sub_1000E4E04(v147, (uint64_t)v495);
    v336 = v512;
    if (v486) {
      goto LABEL_129;
    }
  }
  else
  {
    uint64_t v267 = (uint64_t)v495;
    sub_1000E4E04(v147, (uint64_t)v495);
    v336 = v512;
  }
  id v344 = [v160 spatialAudio];
  if (!v344)
  {
    uint64_t v348 = v487;
    sub_1000E4E04(v267, v487);
    goto LABEL_222;
  }
  v345 = v344;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v347 = v346;

  swift_bridgeObjectRelease();
  uint64_t v348 = v487;
  sub_1000E4E04(v267, v487);
  if (!v347)
  {
LABEL_222:
    sub_1000E4E68(v348);
    sub_1000E4E68(v267);
    goto LABEL_223;
  }
  id v349 = [v160 spatialAudio];
  if (!v349)
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v348);
    sub_1000E4E68((uint64_t)v495);
    swift_bridgeObjectRelease();
    goto LABEL_130;
  }
  v350 = v349;
  uint64_t v351 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v352 = v348;
  uint64_t v354 = v353;

  v355 = (void *)(v352 + v336[21]);
  if (v351 == *v355 && v354 == v355[1])
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v487);
    sub_1000E4E68((uint64_t)v495);
    swift_bridgeObjectRelease_n();
LABEL_223:
    sub_1000E4E04(v147, v500);
    goto LABEL_224;
  }
  char v418 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68(v487);
  sub_1000E4E68((uint64_t)v495);
  swift_bridgeObjectRelease_n();
  uint64_t v268 = v500;
  sub_1000E4E04(v147, v500);
  if ((v418 & 1) == 0) {
    goto LABEL_131;
  }
LABEL_224:
  id v356 = [v160 optimizedBatteryCharging];
  if (!v356)
  {
    uint64_t v360 = v500;
    uint64_t v361 = (uint64_t)v485;
    sub_1000E4E04(v500, (uint64_t)v485);
    goto LABEL_231;
  }
  v357 = v356;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v359 = v358;

  swift_bridgeObjectRelease();
  uint64_t v360 = v500;
  uint64_t v361 = (uint64_t)v485;
  sub_1000E4E04(v500, (uint64_t)v485);
  if (!v359)
  {
LABEL_231:
    sub_1000E4E68(v361);
    sub_1000E4E68(v360);
    goto LABEL_232;
  }
  id v362 = [v160 optimizedBatteryCharging];
  if (!v362)
  {
    uint64_t v419 = (uint64_t)v485;
    swift_bridgeObjectRetain();
    sub_1000E4E68(v419);
    sub_1000E4E68(v500);
    swift_bridgeObjectRelease();
    goto LABEL_132;
  }
  v363 = v362;
  uint64_t v364 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v366 = v365;

  v367 = &v485[v336[22]];
  if (v364 == *(void *)v367 && v366 == *((void *)v367 + 1))
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68((uint64_t)v485);
    sub_1000E4E68(v500);
    swift_bridgeObjectRelease_n();
LABEL_232:
    sub_1000E4E04(v147, v497);
    goto LABEL_233;
  }
  char v471 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68((uint64_t)v485);
  sub_1000E4E68(v500);
  swift_bridgeObjectRelease_n();
  uint64_t v269 = v497;
  sub_1000E4E04(v147, v497);
  if ((v471 & 1) == 0) {
    goto LABEL_133;
  }
LABEL_233:
  id v368 = [v160 optimizedBatteryFullChargeDeadline];
  if (!v368)
  {
    uint64_t v372 = v497;
    uint64_t v373 = v484;
    sub_1000E4E04(v497, v484);
    goto LABEL_243;
  }
  v369 = v368;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v371 = v370;

  swift_bridgeObjectRelease();
  uint64_t v372 = v497;
  uint64_t v373 = v484;
  sub_1000E4E04(v497, v484);
  if (!v371)
  {
LABEL_243:
    sub_1000E4E68(v373);
    sub_1000E4E68(v372);
    goto LABEL_244;
  }
  id v374 = [v160 optimizedBatteryFullChargeDeadline];
  if (!v374)
  {
    uint64_t v472 = v484;
    swift_bridgeObjectRetain();
    sub_1000E4E68(v472);
    sub_1000E4E68(v497);
    swift_bridgeObjectRelease();
    goto LABEL_134;
  }
  v375 = v374;
  uint64_t v376 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v378 = v377;

  uint64_t v379 = v336[23];
  uint64_t v380 = v484;
  v381 = (void *)(v484 + v379);
  if (v376 == *v381 && v378 == v381[1])
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v380);
    sub_1000E4E68(v497);
    swift_bridgeObjectRelease_n();
LABEL_244:
    uint64_t v270 = v494;
    sub_1000E4E04(v147, v494);
    goto LABEL_245;
  }
  char v473 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68(v380);
  sub_1000E4E68(v497);
  swift_bridgeObjectRelease_n();
  uint64_t v270 = v494;
  sub_1000E4E04(v147, v494);
  if ((v473 & 1) == 0) {
    goto LABEL_135;
  }
LABEL_245:
  id v383 = [v160 ratchet];
  if (!v383)
  {
    uint64_t v387 = v483;
    sub_1000E4E04(v270, v483);
    uint64_t v388 = v270;
    uint64_t v271 = v493;
    goto LABEL_260;
  }
  v384 = v383;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v386 = v385;

  swift_bridgeObjectRelease();
  uint64_t v387 = v483;
  sub_1000E4E04(v270, v483);
  uint64_t v388 = v270;
  uint64_t v271 = v493;
  if (!v386)
  {
LABEL_260:
    sub_1000E4E68(v387);
    uint64_t v417 = v388;
LABEL_266:
    sub_1000E4E68(v417);
LABEL_267:
    sub_1000E4E04(v147, v271);
    goto LABEL_268;
  }
  id result = [v160 ratchet];
  if (!result)
  {
LABEL_318:
    __break(1u);
    goto LABEL_319;
  }
  v389 = result;
  uint64_t v390 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v392 = v391;

  uint64_t v393 = sub_10015430C(v390, v392);
  if (v394) {
    uint64_t v395 = 0;
  }
  else {
    uint64_t v395 = v393;
  }
  uint64_t v396 = v483;
  v397 = (uint64_t *)(v483 + v512[24]);
  uint64_t v398 = *v397;
  unint64_t v399 = v397[1];
  swift_bridgeObjectRetain();
  unint64_t v400 = v399;
  uint64_t v401 = v396;
  uint64_t v402 = sub_10015430C(v398, v400);
  if (v403) {
    uint64_t v404 = 0;
  }
  else {
    uint64_t v404 = v402;
  }
  uint64_t v405 = v396;
  uint64_t v406 = v479;
  sub_1000E4E04(v405, v479);
  if (v404 >= v395)
  {
    sub_1000E4E68(v406);
    sub_1000E4E68(v401);
    uint64_t v417 = v494;
    goto LABEL_266;
  }
  id v407 = [v160 encryptionKey];
  if (!v407)
  {
    uint64_t v409 = 0;
    uint64_t v412 = v479;
    v477 = (uint64_t *)(v479 + v512[12]);
    uint64_t v414 = *v477;
    unint64_t v415 = v477[1];
    unint64_t v411 = 0xF000000000000000;
    goto LABEL_313;
  }
  v408 = v407;
  uint64_t v409 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v411 = v410;

  uint64_t v412 = v479;
  v413 = (uint64_t *)(v479 + v512[12]);
  uint64_t v414 = *v413;
  unint64_t v415 = v413[1];
  if (v411 >> 60 == 15)
  {
LABEL_313:
    uint64_t v478 = v483;
    sub_1000AA680(v414, v415);
    sub_1000E4E68(v412);
    sub_1000E4E68(v478);
    sub_1000E4E68(v494);
    sub_1000BFEB0(v409, v411);
    if (v415 >> 60 == 15) {
      goto LABEL_136;
    }
    sub_1000BFEB0(v414, v415);
    uint64_t v271 = v493;
    goto LABEL_267;
  }
  sub_1000AA680(v414, v415);
  sub_1000BFEC4(v409, v411);
  char v416 = sub_1000E4B6C(v409, v411, v414, v415);
  sub_1000AA8F0(v414, v415);
  sub_1000BFEB0(v409, v411);
  sub_1000E4E68(v412);
  sub_1000E4E68(v483);
  sub_1000E4E68(v494);
  sub_1000BFEB0(v409, v411);
  uint64_t v271 = v493;
  sub_1000E4E04(v147, v493);
  if (v416) {
    goto LABEL_137;
  }
LABEL_268:
  id v420 = [v160 settingsMask];
  if (!v420)
  {
    uint64_t v424 = v482;
    sub_1000E4E04(v271, v482);
    goto LABEL_275;
  }
  v421 = v420;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v423 = v422;

  swift_bridgeObjectRelease();
  uint64_t v424 = v482;
  sub_1000E4E04(v271, v482);
  if (!v423)
  {
LABEL_275:
    sub_1000E4E68(v424);
    sub_1000E4E68(v271);
    goto LABEL_276;
  }
  id v425 = [v160 settingsMask];
  if (!v425)
  {
    uint64_t v474 = v482;
    swift_bridgeObjectRetain();
    sub_1000E4E68(v474);
    sub_1000E4E68(v271);
    swift_bridgeObjectRelease();
    goto LABEL_138;
  }
  v426 = v425;
  uint64_t v427 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v429 = v428;

  uint64_t v430 = v482;
  v431 = (void *)(v482 + v512[26]);
  if (v427 == *v431 && v429 == v431[1])
  {
    swift_bridgeObjectRetain();
    sub_1000E4E68(v430);
    sub_1000E4E68(v271);
    swift_bridgeObjectRelease_n();
LABEL_276:
    sub_1000E4E04(v147, (uint64_t)v10);
    goto LABEL_277;
  }
  uint64_t v475 = v482;
  char v476 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000E4E68(v475);
  sub_1000E4E68(v271);
  swift_bridgeObjectRelease_n();
  sub_1000E4E04(v147, (uint64_t)v10);
  if ((v476 & 1) == 0) {
    goto LABEL_139;
  }
LABEL_277:
  id v432 = [v160 supportedServices];
  if (!v432)
  {
LABEL_290:
    uint64_t v444 = v481;
    sub_1000E4E04((uint64_t)v10, v481);
LABEL_291:
    sub_1000E4E68(v444);
    sub_1000E4E68((uint64_t)v10);
    sub_1000E4E04(v147, (uint64_t)v146);
LABEL_292:
    id v459 = [v160 version];
    if (v459)
    {
      v460 = v459;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v462 = v461;

      swift_bridgeObjectRelease();
      uint64_t v463 = v480;
      sub_1000E4E04((uint64_t)v146, v480);
      if (v462)
      {
        id v464 = [v160 version];
        if (v464)
        {
          v465 = v464;
          uint64_t v466 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v468 = v467;

          v469 = (void *)(v463 + v512[28]);
          if (v466 == *v469 && v468 == v469[1]) {
            char v470 = 1;
          }
          else {
            char v470 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRetain();

          sub_1000E4E68(v463);
          sub_1000E4E68((uint64_t)v146);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();

          sub_1000E4E68(v463);
          sub_1000E4E68((uint64_t)v146);
          char v470 = 0;
        }
        swift_bridgeObjectRelease();
        char v100 = v470 ^ 1;
        return (id)(v100 & 1);
      }
    }
    else
    {
      uint64_t v463 = v480;
      sub_1000E4E04((uint64_t)v146, v480);
    }

    sub_1000E4E68(v463);
    sub_1000E4E68((uint64_t)v146);
    char v100 = 0;
    return (id)(v100 & 1);
  }

  id result = [v160 supportedServices];
  if (!result)
  {
    __break(1u);
    goto LABEL_318;
  }
  v433 = result;
  uint64_t v434 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v436 = v435;

  swift_bridgeObjectRelease();
  uint64_t v437 = HIBYTE(v436) & 0xF;
  if ((v436 & 0x2000000000000000) == 0) {
    uint64_t v437 = v434 & 0xFFFFFFFFFFFFLL;
  }
  if (!v437) {
    goto LABEL_290;
  }
  id result = [v160 supportedServices];
  if (!result)
  {
LABEL_319:
    __break(1u);
    goto LABEL_320;
  }
  v438 = result;
  uint64_t v439 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v441 = v440;

  uint64_t v442 = sub_10015430C(v439, v441);
  LOBYTE(v439) = v443;
  uint64_t v444 = v481;
  sub_1000E4E04((uint64_t)v10, v481);
  if ((v439 & 1) == 0 && !v442) {
    goto LABEL_291;
  }
  id result = [v160 supportedServices];
  if (result)
  {
    v445 = result;
    uint64_t v446 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v448 = v447;

    uint64_t v449 = sub_10015430C(v446, v448);
    char v451 = v450;
    uint64_t v452 = v481;
    v453 = (uint64_t *)(v481 + v512[27]);
    uint64_t v454 = *v453;
    unint64_t v455 = v453[1];
    swift_bridgeObjectRetain();
    uint64_t v456 = sub_10015430C(v454, v455);
    char v458 = v457;
    sub_1000E4E68(v452);
    sub_1000E4E68((uint64_t)v10);
    if (v451)
    {
      sub_1000E4E04(v147, (uint64_t)v146);
      if ((v458 & 1) == 0) {
        goto LABEL_141;
      }
    }
    else
    {
      if (v458) {
        goto LABEL_140;
      }
      sub_1000E4E04(v147, (uint64_t)v146);
      if (v449 != v456) {
        goto LABEL_141;
      }
    }
    goto LABEL_292;
  }
LABEL_320:
  __break(1u);
  return result;
}

uint64_t sub_1000E34E8()
{
  type metadata accessor for UUID();
  sub_1000E6964((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (int *)type metadata accessor for MagicPairingSettingsRecord();
  uint64_t v2 = (uint64_t *)(v0 + v1[5]);
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_1000AA680(*v2, v4);
  Data.hash(into:)();
  sub_1000AA8F0(v3, v4);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)(v0 + v1[7]);
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_1000AA680(*v5, v7);
  Data.hash(into:)();
  sub_1000AA8F0(v6, v7);
  uint64_t v8 = (uint64_t *)(v0 + v1[8]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  sub_1000AA680(*v8, v10);
  Data.hash(into:)();
  sub_1000AA8F0(v9, v10);
  uint64_t v11 = (uint64_t *)(v0 + v1[9]);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_1000AA680(*v11, v13);
  Data.hash(into:)();
  sub_1000AA8F0(v12, v13);
  uint64_t v14 = (uint64_t *)(v0 + v1[10]);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000AA680(*v14, v16);
  Data.hash(into:)();
  sub_1000AA8F0(v15, v16);
  uint64_t v17 = (uint64_t *)(v0 + v1[11]);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000AA680(*v17, v19);
  Data.hash(into:)();
  sub_1000AA8F0(v18, v19);
  unint64_t v20 = (uint64_t *)(v0 + v1[12]);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_1000AA680(*v20, v22);
  Data.hash(into:)();
  sub_1000AA8F0(v21, v22);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_1000E6964(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

unint64_t sub_1000E3A50(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x74654D64756F6C63;
      break;
    case 2:
    case 26:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x654B72657473616DLL;
      break;
    case 4:
      unint64_t result = 0x694872657473616DLL;
      break;
    case 5:
    case 6:
      unint64_t result = 0x726F737365636361;
      break;
    case 7:
      unint64_t result = 7041641;
      break;
    case 8:
      unint64_t result = 0x6974707972636E65;
      break;
    case 9:
      unint64_t result = 0x49746375646F7270;
      break;
    case 10:
      unint64_t result = 0x4449726F646E6576;
      break;
    case 11:
      unint64_t result = 0x6F4D6E6F74747562;
      break;
    case 12:
      unint64_t result = 0x726F6C6F63;
      break;
    case 13:
      unint64_t result = 0xD000000000000015;
      break;
    case 14:
      unint64_t result = 0xD000000000000015;
      break;
    case 15:
      unint64_t result = 0xD000000000000011;
      break;
    case 16:
      unint64_t result = 0xD000000000000013;
      break;
    case 17:
      unint64_t result = 0x416C616974617073;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    case 19:
      unint64_t result = 0xD000000000000022;
      break;
    case 20:
      unint64_t result = 0x74656863746172;
      break;
    case 21:
      unint64_t result = 0x6465767265736572;
      break;
    case 22:
      unint64_t result = 0x73676E6974746573;
      break;
    case 23:
      unint64_t result = 0xD000000000000011;
      break;
    case 24:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 25:
      unint64_t result = 0x6552746E65726170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E3DB0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AA024(&qword_100262588);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000ABF58(a1, a1[3]);
  sub_1000E6910();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_1000E6964(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for MagicPairingSettingsRecord();
    long long v13 = *(_OWORD *)(v3 + v9[5]);
    char v12 = 1;
    sub_1000AC094();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[7]);
    char v12 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[8]);
    char v12 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[9]);
    char v12 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[10]);
    char v12 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[11]);
    char v12 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v9[12]);
    char v12 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 14;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 16;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 17;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 18;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 19;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 20;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 21;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 22;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 23;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 24;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 25;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 26;
    type metadata accessor for Date();
    sub_1000E6964(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000E44DC()
{
  return sub_1000E3A50(*v0);
}

uint64_t sub_1000E44E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E70D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000E450C(unsigned char *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_1000E4518(uint64_t a1)
{
  unint64_t v2 = sub_1000E6910();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E4554(uint64_t a1)
{
  unint64_t v2 = sub_1000E6910();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E4590()
{
  return 0x746553636967614DLL;
}

uint64_t sub_1000E45B4(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 20);
  uint64_t v3 = *(void *)v2;
  sub_1000AA680(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1000E45F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 120);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

Swift::Int sub_1000E4664()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E46A8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000E46EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000DB63C(a1, a2);
}

uint64_t sub_1000E4704(void *a1)
{
  return sub_1000E3DB0(a1);
}

uint64_t sub_1000E471C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_1000AA680(a2, a3);
      unint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1000E4980);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_1000AA8F0(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t type metadata accessor for MagicPairingSettingsRecord()
{
  uint64_t result = qword_1002624A8;
  if (!qword_1002624A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E49DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1000E471C((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1000E4AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1000E471C(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1000E4B6C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v_Block_object_dispose(&STACK[0x290], 8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1000E4DD4);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_1000AA680(a3, a4);
                  sub_1000AA680(a1, a2);
                  char v17 = sub_1000E4AB4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_1000AA8F0(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_1000AA680(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1000E4AB4(v21, v22, v20, a3, a4);
                  sub_1000AA8F0(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_1000AA680(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_1000AA680(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1000E49DC(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_1000AA8F0(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000E4E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MagicPairingSettingsRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E4E68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MagicPairingSettingsRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000E4EC4()
{
  unint64_t result = qword_100262440;
  if (!qword_100262440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262440);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MagicPairingSettingsRecord.MagicSettingsRecordError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E4FE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPairingSettingsRecord.MagicSettingsRecordError()
{
  return &type metadata for MagicPairingSettingsRecord.MagicSettingsRecordError;
}

uint64_t *sub_1000E501C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v107 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v107 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000AA680(*v10, v12);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (uint64_t *)((char *)a1 + v14);
    uint64_t v19 = *(uint64_t *)((char *)a2 + v14);
    unint64_t v20 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    sub_1000AA680(v19, v20);
    *uint64_t v18 = v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    int v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    sub_1000AA680(*v23, v25);
    *uint64_t v22 = v24;
    v22[1] = v25;
    uint64_t v26 = a3[9];
    char v27 = (uint64_t *)((char *)a1 + v26);
    char v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    sub_1000AA680(*v28, v30);
    uint64_t *v27 = v29;
    v27[1] = v30;
    uint64_t v31 = a3[10];
    uint64_t v32 = (uint64_t *)((char *)a1 + v31);
    uint64_t v33 = (uint64_t *)((char *)a2 + v31);
    uint64_t v34 = *v33;
    unint64_t v35 = v33[1];
    sub_1000AA680(*v33, v35);
    uint64_t *v32 = v34;
    v32[1] = v35;
    uint64_t v36 = a3[11];
    uint64_t v37 = (uint64_t *)((char *)a1 + v36);
    uint64_t v38 = (uint64_t *)((char *)a2 + v36);
    uint64_t v39 = *v38;
    unint64_t v40 = v38[1];
    sub_1000AA680(*v38, v40);
    *uint64_t v37 = v39;
    v37[1] = v40;
    uint64_t v41 = a3[12];
    uint64_t v42 = (uint64_t *)((char *)a1 + v41);
    uint64_t v43 = (uint64_t *)((char *)a2 + v41);
    uint64_t v44 = *v43;
    unint64_t v45 = v43[1];
    sub_1000AA680(*v43, v45);
    *uint64_t v42 = v44;
    v42[1] = v45;
    uint64_t v46 = a3[13];
    uint64_t v47 = a3[14];
    uint64_t v48 = (uint64_t *)((char *)a1 + v46);
    uint64_t v49 = (uint64_t *)((char *)a2 + v46);
    uint64_t v119 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v119;
    uint64_t v50 = (uint64_t *)((char *)a1 + v47);
    uint64_t v51 = (uint64_t *)((char *)a2 + v47);
    uint64_t v120 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v120;
    uint64_t v52 = a3[15];
    uint64_t v53 = a3[16];
    uint64_t v54 = (uint64_t *)((char *)a1 + v52);
    uint64_t v55 = (uint64_t *)((char *)a2 + v52);
    uint64_t v117 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v117;
    uint64_t v56 = (uint64_t *)((char *)a1 + v53);
    uint64_t v57 = (uint64_t *)((char *)a2 + v53);
    uint64_t v118 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v118;
    uint64_t v58 = a3[17];
    uint64_t v59 = a3[18];
    uint64_t v60 = (uint64_t *)((char *)a1 + v58);
    uint64_t v61 = (uint64_t *)((char *)a2 + v58);
    uint64_t v115 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v115;
    uint64_t v62 = (uint64_t *)((char *)a1 + v59);
    uint64_t v63 = (uint64_t *)((char *)a2 + v59);
    uint64_t v116 = v63[1];
    void *v62 = *v63;
    v62[1] = v116;
    uint64_t v64 = a3[19];
    uint64_t v65 = a3[20];
    uint64_t v66 = (uint64_t *)((char *)a1 + v64);
    uint64_t v67 = (uint64_t *)((char *)a2 + v64);
    uint64_t v113 = v67[1];
    void *v66 = *v67;
    v66[1] = v113;
    uint64_t v68 = (uint64_t *)((char *)a1 + v65);
    uint64_t v69 = (uint64_t *)((char *)a2 + v65);
    uint64_t v114 = v69[1];
    void *v68 = *v69;
    v68[1] = v114;
    uint64_t v70 = a3[21];
    uint64_t v71 = a3[22];
    uint64_t v72 = (uint64_t *)((char *)a1 + v70);
    char v73 = (uint64_t *)((char *)a2 + v70);
    uint64_t v74 = v73[1];
    *uint64_t v72 = *v73;
    v72[1] = v74;
    unint64_t v75 = (uint64_t *)((char *)a1 + v71);
    uint64_t v76 = (uint64_t *)((char *)a2 + v71);
    uint64_t v112 = v76[1];
    *unint64_t v75 = *v76;
    v75[1] = v112;
    uint64_t v77 = a3[23];
    uint64_t v78 = a3[24];
    uint64_t v79 = (uint64_t *)((char *)a1 + v77);
    uint64_t v80 = (uint64_t *)((char *)a2 + v77);
    uint64_t v81 = v80[1];
    void *v79 = *v80;
    v79[1] = v81;
    uint64_t v82 = (uint64_t *)((char *)a1 + v78);
    uint64_t v83 = (uint64_t *)((char *)a2 + v78);
    uint64_t v84 = v83[1];
    void *v82 = *v83;
    v82[1] = v84;
    uint64_t v85 = a3[25];
    uint64_t v86 = a3[26];
    char v87 = (uint64_t *)((char *)a1 + v85);
    id v88 = (uint64_t *)((char *)a2 + v85);
    uint64_t v89 = v88[1];
    *char v87 = *v88;
    v87[1] = v89;
    uint64_t v90 = (uint64_t *)((char *)a1 + v86);
    unint64_t v91 = (uint64_t *)((char *)a2 + v86);
    uint64_t v92 = v91[1];
    *uint64_t v90 = *v91;
    v90[1] = v92;
    uint64_t v93 = a3[27];
    uint64_t v94 = a3[28];
    uint64_t v95 = (uint64_t *)((char *)a1 + v93);
    id v96 = (uint64_t *)((char *)a2 + v93);
    uint64_t v97 = v96[1];
    void *v95 = *v96;
    v95[1] = v97;
    uint64_t v98 = (uint64_t *)((char *)a1 + v94);
    uint64_t v99 = (uint64_t *)((char *)a2 + v94);
    uint64_t v100 = v99[1];
    void *v98 = *v99;
    v98[1] = v100;
    uint64_t v101 = a3[29];
    uint64_t v102 = a3[30];
    id v103 = (uint64_t *)((char *)a1 + v101);
    uint64_t v104 = (uint64_t *)((char *)a2 + v101);
    uint64_t v105 = v104[1];
    uint64_t v111 = (char *)a2 + v102;
    uint64_t v110 = (char *)a1 + v102;
    void *v103 = *v104;
    v103[1] = v105;
    uint64_t v106 = type metadata accessor for Date();
    unint64_t v109 = *(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v109(v110, v111, v106);
  }
  return a1;
}

uint64_t sub_1000E5420(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_1000AA8F0(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease();
  sub_1000AA8F0(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  sub_1000AA8F0(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  sub_1000AA8F0(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  sub_1000AA8F0(*(void *)(a1 + a2[10]), *(void *)(a1 + a2[10] + 8));
  sub_1000AA8F0(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  sub_1000AA8F0(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[30];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1000E5658(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000AA680(*v9, v11);
  uint64_t *v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (uint64_t *)(a1 + v13);
  uint64_t v18 = *(void *)(a2 + v13);
  unint64_t v19 = *(void *)(a2 + v13 + 8);
  swift_bridgeObjectRetain();
  sub_1000AA680(v18, v19);
  *uint64_t v17 = v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_1000AA680(*v22, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  uint64_t v25 = a3[9];
  uint64_t v26 = (uint64_t *)(a1 + v25);
  char v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_1000AA680(*v27, v29);
  *uint64_t v26 = v28;
  v26[1] = v29;
  uint64_t v30 = a3[10];
  uint64_t v31 = (uint64_t *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_1000AA680(*v32, v34);
  *uint64_t v31 = v33;
  v31[1] = v34;
  uint64_t v35 = a3[11];
  uint64_t v36 = (uint64_t *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v38 = *v37;
  unint64_t v39 = v37[1];
  sub_1000AA680(*v37, v39);
  *uint64_t v36 = v38;
  v36[1] = v39;
  uint64_t v40 = a3[12];
  uint64_t v41 = (uint64_t *)(a1 + v40);
  uint64_t v42 = (uint64_t *)(a2 + v40);
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  sub_1000AA680(*v42, v44);
  *uint64_t v41 = v43;
  v41[1] = v44;
  uint64_t v45 = a3[13];
  uint64_t v46 = a3[14];
  uint64_t v47 = (void *)(a1 + v45);
  uint64_t v48 = (void *)(a2 + v45);
  uint64_t v117 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v117;
  uint64_t v49 = (void *)(a1 + v46);
  uint64_t v50 = (void *)(a2 + v46);
  uint64_t v118 = v50[1];
  *uint64_t v49 = *v50;
  v49[1] = v118;
  uint64_t v51 = a3[15];
  uint64_t v52 = a3[16];
  uint64_t v53 = (void *)(a1 + v51);
  uint64_t v54 = (void *)(a2 + v51);
  uint64_t v115 = v54[1];
  *uint64_t v53 = *v54;
  v53[1] = v115;
  uint64_t v55 = (void *)(a1 + v52);
  uint64_t v56 = (void *)(a2 + v52);
  uint64_t v116 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v116;
  uint64_t v57 = a3[17];
  uint64_t v58 = a3[18];
  uint64_t v59 = (void *)(a1 + v57);
  uint64_t v60 = (void *)(a2 + v57);
  uint64_t v113 = v60[1];
  void *v59 = *v60;
  v59[1] = v113;
  uint64_t v61 = (void *)(a1 + v58);
  uint64_t v62 = (void *)(a2 + v58);
  uint64_t v114 = v62[1];
  *uint64_t v61 = *v62;
  v61[1] = v114;
  uint64_t v63 = a3[19];
  uint64_t v64 = a3[20];
  uint64_t v65 = (void *)(a1 + v63);
  uint64_t v66 = (void *)(a2 + v63);
  uint64_t v111 = v66[1];
  void *v65 = *v66;
  v65[1] = v111;
  uint64_t v67 = (void *)(a1 + v64);
  uint64_t v68 = (void *)(a2 + v64);
  uint64_t v112 = v68[1];
  void *v67 = *v68;
  v67[1] = v112;
  uint64_t v69 = a3[21];
  uint64_t v70 = a3[22];
  uint64_t v71 = (void *)(a1 + v69);
  uint64_t v72 = (void *)(a2 + v69);
  uint64_t v73 = v72[1];
  *uint64_t v71 = *v72;
  v71[1] = v73;
  uint64_t v74 = (void *)(a1 + v70);
  unint64_t v75 = (void *)(a2 + v70);
  uint64_t v110 = v75[1];
  *uint64_t v74 = *v75;
  v74[1] = v110;
  uint64_t v76 = a3[23];
  uint64_t v77 = a3[24];
  uint64_t v78 = (void *)(a1 + v76);
  uint64_t v79 = (void *)(a2 + v76);
  uint64_t v80 = v79[1];
  *uint64_t v78 = *v79;
  v78[1] = v80;
  uint64_t v81 = (void *)(a1 + v77);
  uint64_t v82 = (void *)(a2 + v77);
  uint64_t v83 = v82[1];
  *uint64_t v81 = *v82;
  v81[1] = v83;
  uint64_t v84 = a3[25];
  uint64_t v85 = a3[26];
  uint64_t v86 = (void *)(a1 + v84);
  char v87 = (void *)(a2 + v84);
  uint64_t v88 = v87[1];
  *uint64_t v86 = *v87;
  v86[1] = v88;
  uint64_t v89 = (void *)(a1 + v85);
  uint64_t v90 = (void *)(a2 + v85);
  uint64_t v91 = v90[1];
  void *v89 = *v90;
  v89[1] = v91;
  uint64_t v92 = a3[27];
  uint64_t v93 = a3[28];
  uint64_t v94 = (void *)(a1 + v92);
  uint64_t v95 = (void *)(a2 + v92);
  uint64_t v96 = v95[1];
  void *v94 = *v95;
  v94[1] = v96;
  uint64_t v97 = (void *)(a1 + v93);
  uint64_t v98 = (void *)(a2 + v93);
  uint64_t v99 = v98[1];
  void *v97 = *v98;
  v97[1] = v99;
  uint64_t v100 = a3[29];
  uint64_t v101 = a3[30];
  uint64_t v102 = (void *)(a1 + v100);
  id v103 = (void *)(a2 + v100);
  uint64_t v104 = v103[1];
  uint64_t v109 = a2 + v101;
  uint64_t v108 = a1 + v101;
  void *v102 = *v103;
  v102[1] = v104;
  uint64_t v105 = type metadata accessor for Date();
  uint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v107(v108, v109, v105);
  return a1;
}

uint64_t sub_1000E5A0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000AA680(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  uint64_t *v8 = v10;
  v8[1] = v11;
  sub_1000AA8F0(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  unint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_1000AA680(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_1000AA8F0(v22, v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = (uint64_t *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  sub_1000AA680(*v26, v28);
  uint64_t v29 = *v25;
  unint64_t v30 = v25[1];
  *uint64_t v25 = v27;
  v25[1] = v28;
  sub_1000AA8F0(v29, v30);
  uint64_t v31 = a3[9];
  uint64_t v32 = (uint64_t *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v34 = *v33;
  unint64_t v35 = v33[1];
  sub_1000AA680(*v33, v35);
  uint64_t v36 = *v32;
  unint64_t v37 = v32[1];
  uint64_t *v32 = v34;
  v32[1] = v35;
  sub_1000AA8F0(v36, v37);
  uint64_t v38 = a3[10];
  unint64_t v39 = (uint64_t *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v41 = *v40;
  unint64_t v42 = v40[1];
  sub_1000AA680(*v40, v42);
  uint64_t v43 = *v39;
  unint64_t v44 = v39[1];
  *unint64_t v39 = v41;
  v39[1] = v42;
  sub_1000AA8F0(v43, v44);
  uint64_t v45 = a3[11];
  uint64_t v46 = (uint64_t *)(a1 + v45);
  uint64_t v47 = (uint64_t *)(a2 + v45);
  uint64_t v48 = *v47;
  unint64_t v49 = v47[1];
  sub_1000AA680(*v47, v49);
  uint64_t v50 = *v46;
  unint64_t v51 = v46[1];
  *uint64_t v46 = v48;
  v46[1] = v49;
  sub_1000AA8F0(v50, v51);
  uint64_t v52 = a3[12];
  uint64_t v53 = (uint64_t *)(a1 + v52);
  uint64_t v54 = (uint64_t *)(a2 + v52);
  uint64_t v55 = *v54;
  unint64_t v56 = v54[1];
  sub_1000AA680(*v54, v56);
  uint64_t v57 = *v53;
  unint64_t v58 = v53[1];
  *uint64_t v53 = v55;
  v53[1] = v56;
  sub_1000AA8F0(v57, v58);
  uint64_t v59 = a3[13];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (void *)(a2 + v59);
  *uint64_t v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[14];
  uint64_t v63 = (void *)(a1 + v62);
  uint64_t v64 = (void *)(a2 + v62);
  *uint64_t v63 = *v64;
  v63[1] = v64[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v65 = a3[15];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (void *)(a2 + v65);
  void *v66 = *v67;
  v66[1] = v67[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v68 = a3[16];
  uint64_t v69 = (void *)(a1 + v68);
  uint64_t v70 = (void *)(a2 + v68);
  *uint64_t v69 = *v70;
  v69[1] = v70[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v71 = a3[17];
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = (void *)(a2 + v71);
  *uint64_t v72 = *v73;
  v72[1] = v73[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v74 = a3[18];
  unint64_t v75 = (void *)(a1 + v74);
  uint64_t v76 = (void *)(a2 + v74);
  *unint64_t v75 = *v76;
  v75[1] = v76[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v77 = a3[19];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (void *)(a2 + v77);
  *uint64_t v78 = *v79;
  v78[1] = v79[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v80 = a3[20];
  uint64_t v81 = (void *)(a1 + v80);
  uint64_t v82 = (void *)(a2 + v80);
  *uint64_t v81 = *v82;
  v81[1] = v82[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v83 = a3[21];
  uint64_t v84 = (void *)(a1 + v83);
  uint64_t v85 = (void *)(a2 + v83);
  *uint64_t v84 = *v85;
  v84[1] = v85[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = a3[22];
  char v87 = (void *)(a1 + v86);
  uint64_t v88 = (void *)(a2 + v86);
  *char v87 = *v88;
  v87[1] = v88[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v89 = a3[23];
  uint64_t v90 = (void *)(a1 + v89);
  uint64_t v91 = (void *)(a2 + v89);
  *uint64_t v90 = *v91;
  v90[1] = v91[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v92 = a3[24];
  uint64_t v93 = (void *)(a1 + v92);
  uint64_t v94 = (void *)(a2 + v92);
  void *v93 = *v94;
  v93[1] = v94[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v95 = a3[25];
  uint64_t v96 = (void *)(a1 + v95);
  uint64_t v97 = (void *)(a2 + v95);
  void *v96 = *v97;
  v96[1] = v97[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v98 = a3[26];
  uint64_t v99 = (void *)(a1 + v98);
  uint64_t v100 = (void *)(a2 + v98);
  void *v99 = *v100;
  v99[1] = v100[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v101 = a3[27];
  uint64_t v102 = (void *)(a1 + v101);
  id v103 = (void *)(a2 + v101);
  void *v102 = *v103;
  v102[1] = v103[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v104 = a3[28];
  uint64_t v105 = (void *)(a1 + v104);
  uint64_t v106 = (void *)(a2 + v104);
  void *v105 = *v106;
  v105[1] = v106[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v107 = a3[29];
  uint64_t v108 = (void *)(a1 + v107);
  uint64_t v109 = (void *)(a2 + v107);
  void *v108 = *v109;
  v108[1] = v109[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v110 = a3[30];
  uint64_t v111 = a1 + v110;
  uint64_t v112 = a2 + v110;
  uint64_t v113 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 24))(v111, v112, v113);
  return a1;
}

uint64_t sub_1000E5EFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v_Block_object_dispose(&STACK[0x290], 8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[26];
  *(_OWORD *)(a1 + a3[25]) = *(_OWORD *)(a2 + a3[25]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v1_Block_object_dispose(&STACK[0x290], 8) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[29];
  uint64_t v20 = a3[30];
  long long v21 = *(_OWORD *)(a2 + v19);
  uint64_t v22 = a2 + v20;
  uint64_t v23 = a1 + v20;
  *(_OWORD *)(a1 + v19) = v21;
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v23, v22, v24);
  return a1;
}

uint64_t sub_1000E60AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_1000AA8F0(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_1000AA8F0(v16, v17);
  uint64_t v18 = a3[8];
  uint64_t v19 = *(void *)(a1 + v18);
  unint64_t v20 = *(void *)(a1 + v18 + 8);
  *(_OWORD *)(a1 + v1_Block_object_dispose(&STACK[0x290], 8) = *(_OWORD *)(a2 + v18);
  sub_1000AA8F0(v19, v20);
  uint64_t v21 = a3[9];
  uint64_t v22 = *(void *)(a1 + v21);
  unint64_t v23 = *(void *)(a1 + v21 + 8);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  sub_1000AA8F0(v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = *(void *)(a1 + v24);
  unint64_t v26 = *(void *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  sub_1000AA8F0(v25, v26);
  uint64_t v27 = a3[11];
  uint64_t v28 = *(void *)(a1 + v27);
  unint64_t v29 = *(void *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  sub_1000AA8F0(v28, v29);
  uint64_t v30 = a3[12];
  uint64_t v31 = *(void *)(a1 + v30);
  unint64_t v32 = *(void *)(a1 + v30 + 8);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  sub_1000AA8F0(v31, v32);
  uint64_t v33 = a3[13];
  uint64_t v34 = (void *)(a1 + v33);
  unint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[14];
  unint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *unint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[15];
  unint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (uint64_t *)(a2 + v43);
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  *unint64_t v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[16];
  unint64_t v49 = (void *)(a1 + v48);
  uint64_t v50 = (uint64_t *)(a2 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  *unint64_t v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[17];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (uint64_t *)(a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *uint64_t v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[18];
  uint64_t v59 = (void *)(a1 + v58);
  uint64_t v60 = (uint64_t *)(a2 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  void *v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[19];
  uint64_t v64 = (void *)(a1 + v63);
  uint64_t v65 = (uint64_t *)(a2 + v63);
  uint64_t v67 = *v65;
  uint64_t v66 = v65[1];
  *uint64_t v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease();
  uint64_t v68 = a3[20];
  uint64_t v69 = (void *)(a1 + v68);
  uint64_t v70 = (uint64_t *)(a2 + v68);
  uint64_t v72 = *v70;
  uint64_t v71 = v70[1];
  *uint64_t v69 = v72;
  v69[1] = v71;
  swift_bridgeObjectRelease();
  uint64_t v73 = a3[21];
  uint64_t v74 = (void *)(a1 + v73);
  unint64_t v75 = (uint64_t *)(a2 + v73);
  uint64_t v77 = *v75;
  uint64_t v76 = v75[1];
  *uint64_t v74 = v77;
  v74[1] = v76;
  swift_bridgeObjectRelease();
  uint64_t v78 = a3[22];
  uint64_t v79 = (void *)(a1 + v78);
  uint64_t v80 = (uint64_t *)(a2 + v78);
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  void *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = a3[23];
  uint64_t v84 = (void *)(a1 + v83);
  uint64_t v85 = (uint64_t *)(a2 + v83);
  uint64_t v87 = *v85;
  uint64_t v86 = v85[1];
  *uint64_t v84 = v87;
  v84[1] = v86;
  swift_bridgeObjectRelease();
  uint64_t v88 = a3[24];
  uint64_t v89 = (void *)(a1 + v88);
  uint64_t v90 = (uint64_t *)(a2 + v88);
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  void *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = a3[25];
  uint64_t v94 = (void *)(a1 + v93);
  uint64_t v95 = (uint64_t *)(a2 + v93);
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  void *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  uint64_t v98 = a3[26];
  uint64_t v99 = (void *)(a1 + v98);
  uint64_t v100 = (uint64_t *)(a2 + v98);
  uint64_t v102 = *v100;
  uint64_t v101 = v100[1];
  void *v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease();
  uint64_t v103 = a3[27];
  uint64_t v104 = (void *)(a1 + v103);
  uint64_t v105 = (uint64_t *)(a2 + v103);
  uint64_t v107 = *v105;
  uint64_t v106 = v105[1];
  *uint64_t v104 = v107;
  v104[1] = v106;
  swift_bridgeObjectRelease();
  uint64_t v108 = a3[28];
  uint64_t v109 = (void *)(a1 + v108);
  uint64_t v110 = (uint64_t *)(a2 + v108);
  uint64_t v112 = *v110;
  uint64_t v111 = v110[1];
  *uint64_t v109 = v112;
  v109[1] = v111;
  swift_bridgeObjectRelease();
  uint64_t v113 = a3[29];
  uint64_t v114 = (void *)(a1 + v113);
  uint64_t v115 = (uint64_t *)(a2 + v113);
  uint64_t v117 = *v115;
  uint64_t v116 = v115[1];
  *uint64_t v114 = v117;
  v114[1] = v116;
  swift_bridgeObjectRelease();
  uint64_t v118 = a3[30];
  uint64_t v119 = a1 + v118;
  uint64_t v120 = a2 + v118;
  uint64_t v121 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 40))(v119, v120, v121);
  return a1;
}

uint64_t sub_1000E6404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E6418);
}

uint64_t sub_1000E6418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 120);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000E6548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E655C);
}

uint64_t sub_1000E655C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + _Block_object_dispose(&STACK[0x290], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 120);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_1000E668C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000E6794(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000E6964(&qword_100263A60, (void (*)(uint64_t))type metadata accessor for MagicPairingSettingsRecord);
  uint64_t result = sub_1000E6964(&qword_100262550, (void (*)(uint64_t))type metadata accessor for MagicPairingSettingsRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000E6818()
{
  return sub_1000E6964(&qword_100262558, (void (*)(uint64_t))type metadata accessor for MagicPairingSettingsRecord);
}

unint64_t sub_1000E6864()
{
  unint64_t result = qword_100262560;
  if (!qword_100262560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262560);
  }
  return result;
}

uint64_t sub_1000E68B8(uint64_t a1)
{
  uint64_t result = sub_1000E6964(&qword_100262568, (void (*)(uint64_t))type metadata accessor for MagicPairingSettingsRecord);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

unint64_t sub_1000E6910()
{
  unint64_t result = qword_100262578;
  if (!qword_100262578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262578);
  }
  return result;
}

uint64_t sub_1000E6964(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E69AC(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for MagicPairingSettingsRecord();
  if ((sub_1000E4B6C(*(void *)(a1 + v4[5]), *(void *)(a1 + v4[5] + 8), *(void *)(a2 + v4[5]), *(void *)(a2 + v4[5] + 8)) & 1) == 0)return 0; {
  uint64_t v5 = v4[6];
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  if ((sub_1000E4B6C(*(void *)(a1 + v4[7]), *(void *)(a1 + v4[7] + 8), *(void *)(a2 + v4[7]), *(void *)(a2 + v4[7] + 8)) & 1) == 0|| (sub_1000E4B6C(*(void *)(a1 + v4[8]), *(void *)(a1 + v4[8] + 8), *(void *)(a2 + v4[8]), *(void *)(a2 + v4[8] + 8)) & 1) == 0|| (sub_1000E4B6C(*(void *)(a1 + v4[9]), *(void *)(a1 + v4[9] + 8), *(void *)(a2 + v4[9]), *(void *)(a2 + v4[9] + 8)) & 1) == 0|| (sub_1000E4B6C(*(void *)(a1 + v4[10]), *(void *)(a1 + v4[10] + 8), *(void *)(a2 + v4[10]), *(void *)(a2 + v4[10] + 8)) & 1) == 0
    || (sub_1000E4B6C(*(void *)(a1 + v4[11]), *(void *)(a1 + v4[11] + 8), *(void *)(a2 + v4[11]), *(void *)(a2 + v4[11] + 8)) & 1) == 0|| (sub_1000E4B6C(*(void *)(a1 + v4[12]), *(void *)(a1 + v4[12] + 8), *(void *)(a2 + v4[12]), *(void *)(a2 + v4[12] + 8)) & 1) == 0)
  {
    return 0;
  }
  uint64_t v10 = v4[13];
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(a1 + v10 + 8);
  uint64_t v13 = (void *)(a2 + v10);
  if ((v11 != *v13 || v12 != v13[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v14 = v4[14];
  uint64_t v15 = *(void *)(a1 + v14);
  uint64_t v16 = *(void *)(a1 + v14 + 8);
  unint64_t v17 = (void *)(a2 + v14);
  if ((v15 != *v17 || v16 != v17[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v18 = v4[15];
  uint64_t v19 = *(void *)(a1 + v18);
  uint64_t v20 = *(void *)(a1 + v18 + 8);
  uint64_t v21 = (void *)(a2 + v18);
  if ((v19 != *v21 || v20 != v21[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v22 = v4[16];
  uint64_t v23 = *(void *)(a1 + v22);
  uint64_t v24 = *(void *)(a1 + v22 + 8);
  uint64_t v25 = (void *)(a2 + v22);
  if ((v23 != *v25 || v24 != v25[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v26 = v4[17];
  uint64_t v27 = *(void *)(a1 + v26);
  uint64_t v28 = *(void *)(a1 + v26 + 8);
  unint64_t v29 = (void *)(a2 + v26);
  if ((v27 != *v29 || v28 != v29[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v30 = v4[18];
  uint64_t v31 = *(void *)(a1 + v30);
  uint64_t v32 = *(void *)(a1 + v30 + 8);
  uint64_t v33 = (void *)(a2 + v30);
  if ((v31 != *v33 || v32 != v33[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v34 = v4[19];
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = *(void *)(a1 + v34 + 8);
  uint64_t v37 = (void *)(a2 + v34);
  if ((v35 != *v37 || v36 != v37[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v38 = v4[20];
  uint64_t v39 = *(void *)(a1 + v38);
  uint64_t v40 = *(void *)(a1 + v38 + 8);
  uint64_t v41 = (void *)(a2 + v38);
  if ((v39 != *v41 || v40 != v41[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v42 = v4[21];
  uint64_t v43 = *(void *)(a1 + v42);
  uint64_t v44 = *(void *)(a1 + v42 + 8);
  uint64_t v45 = (void *)(a2 + v42);
  if ((v43 != *v45 || v44 != v45[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v46 = v4[22];
  uint64_t v47 = *(void *)(a1 + v46);
  uint64_t v48 = *(void *)(a1 + v46 + 8);
  unint64_t v49 = (void *)(a2 + v46);
  if ((v47 != *v49 || v48 != v49[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v50 = v4[23];
  uint64_t v51 = *(void *)(a1 + v50);
  uint64_t v52 = *(void *)(a1 + v50 + 8);
  uint64_t v53 = (void *)(a2 + v50);
  if ((v51 != *v53 || v52 != v53[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v54 = v4[24];
  uint64_t v55 = *(void *)(a1 + v54);
  uint64_t v56 = *(void *)(a1 + v54 + 8);
  uint64_t v57 = (void *)(a2 + v54);
  if ((v55 != *v57 || v56 != v57[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v58 = v4[25];
  uint64_t v59 = *(void *)(a1 + v58);
  uint64_t v60 = *(void *)(a1 + v58 + 8);
  uint64_t v61 = (void *)(a2 + v58);
  if ((v59 != *v61 || v60 != v61[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v62 = v4[26];
  uint64_t v63 = *(void *)(a1 + v62);
  uint64_t v64 = *(void *)(a1 + v62 + 8);
  uint64_t v65 = (void *)(a2 + v62);
  if ((v63 != *v65 || v64 != v65[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v66 = v4[27];
  uint64_t v67 = *(void *)(a1 + v66);
  uint64_t v68 = *(void *)(a1 + v66 + 8);
  uint64_t v69 = (void *)(a2 + v66);
  if ((v67 != *v69 || v68 != v69[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v70 = v4[28];
  uint64_t v71 = *(void *)(a1 + v70);
  uint64_t v72 = *(void *)(a1 + v70 + 8);
  uint64_t v73 = (void *)(a2 + v70);
  if ((v71 != *v73 || v72 != v73[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v74 = v4[29];
  uint64_t v75 = *(void *)(a1 + v74);
  uint64_t v76 = *(void *)(a1 + v74 + 8);
  uint64_t v77 = (void *)(a2 + v74);
  if ((v75 != *v77 || v76 != v77[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v78 = v4[30];

  return static Date.== infix(_:_:)(a1 + v78, a2 + v78);
}

uint64_t getEnumTagSinglePayload for MagicPairingSettingsRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v8 = v6 - 27;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MagicPairingSettingsRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE5)
  {
    unsigned int v6 = ((a2 - 230) >> 8) + 1;
    *uint64_t result = a2 + 26;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E6F98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 26;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagicPairingSettingsRecord.CodingKeys()
{
  return &type metadata for MagicPairingSettingsRecord.CodingKeys;
}

unint64_t sub_1000E6FD4()
{
  unint64_t result = qword_100262598;
  if (!qword_100262598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262598);
  }
  return result;
}

unint64_t sub_1000E702C()
{
  unint64_t result = qword_1002625A0;
  if (!qword_1002625A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002625A0);
  }
  return result;
}

unint64_t sub_1000E7084()
{
  unint64_t result = qword_1002625A8;
  if (!qword_1002625A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002625A8);
  }
  return result;
}

uint64_t sub_1000E70D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x654B72657473616DLL && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x694872657473616DLL && a2 == 0xEA0000000000746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xEC00000079654B79 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED0000746E694879 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 7041641 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6974707972636E65 && a2 == 0xED000079654B6E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6F4D6E6F74747562 && a2 == 0xEB00000000736564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001001F9040 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001001F9060 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001001F9080 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001001F90A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x416C616974617073 && a2 == 0xEC0000006F696475 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001001F90C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001001F90E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0x74656863746172 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6465767265736572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x73676E6974746573 && a2 == 0xEC0000006B73614DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001001F9110 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x6552746E65726170 && a2 == 0xEC00000064726F63 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 26;
    }
    else {
      return 27;
    }
  }
}

uint64_t sub_1000E7BEC()
{
  sub_1000E8734(0x3030304130, 0xE500000000000000, v1);
  uint64_t result = sub_1000E8A70((uint64_t)v1, (uint64_t)v2, &qword_1002625C8);
  if (*((void *)&v2[0] + 1))
  {
    xmmword_10026ABC8 = v2[2];
    *(_OWORD *)&byte_10026ABD8 = v2[3];
    xmmword_10026ABE8 = v2[4];
    xmmword_10026ABA8 = v2[0];
    *(_OWORD *)&qword_10026ABB8 = v2[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E7C60@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000E8734(*a1, a1[1], v4);
  return sub_1000E8A70((uint64_t)v4, a2, &qword_1002625C8);
}

uint64_t sub_1000E7CAC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000E7CB8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000E7D18()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000E7D6C@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1000E8734(*a1, a1[1], v6);
  uint64_t result = sub_1000E8A70((uint64_t)v6, (uint64_t)v7, &qword_1002625C8);
  if (*((void *)&v7[0] + 1))
  {
    long long v4 = v7[3];
    a2[2] = v7[2];
    a2[3] = v4;
    a2[4] = v7[4];
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E7DDC(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  void v8[4] = v3;
  v9[0] = v6;
  return sub_1000E85DC(v8, v9) & 1;
}

BOOL sub_1000E7E38(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  void v8[4] = v3;
  v9[0] = v6;
  return sub_1000E7E94(v8, v9);
}

BOOL sub_1000E7E94(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  BOOL v4 = v2 < v3;
  if (v2 == v3)
  {
    BOOL v7 = a2[3] == a1[3] && a2[4] == a1[4];
    if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return (v15 & 1) == 0;
    }
    uint64_t v8 = a2[7];
    uint64_t v9 = a1[7];
    BOOL v4 = v8 < v9;
    if (v8 == v9)
    {
      if (a2[9])
      {
        uint64_t v10 = a2[8];
        unint64_t v11 = a2[9];
        unint64_t v12 = a1[9];
        if (v12) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0xE000000000000000;
        unint64_t v12 = a1[9];
        if (v12)
        {
LABEL_10:
          uint64_t v13 = a1[8];
          unint64_t v14 = v12;
          if (v10 != v13) {
            goto LABEL_20;
          }
LABEL_18:
          if (v11 == v14)
          {
            char v15 = 0;
LABEL_21:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return (v15 & 1) == 0;
          }
LABEL_20:
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_21;
        }
      }
      unint64_t v14 = 0xE000000000000000;
      if (v10) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }
  char v15 = v4;
  return (v15 & 1) == 0;
}

BOOL sub_1000E7FD8(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  void v8[4] = v3;
  v9[0] = v6;
  return sub_1000E8034(v8, v9);
}

BOOL sub_1000E8034(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = v2 < v3;
  if (v2 == v3)
  {
    BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
    if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return (v15 & 1) == 0;
    }
    uint64_t v8 = a1[7];
    uint64_t v9 = a2[7];
    BOOL v4 = v8 < v9;
    if (v8 == v9)
    {
      if (a1[9])
      {
        uint64_t v10 = a1[8];
        unint64_t v11 = a1[9];
        unint64_t v12 = a2[9];
        if (v12) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0xE000000000000000;
        unint64_t v12 = a2[9];
        if (v12)
        {
LABEL_10:
          uint64_t v13 = a2[8];
          unint64_t v14 = v12;
          if (v10 != v13) {
            goto LABEL_20;
          }
LABEL_18:
          if (v11 == v14)
          {
            char v15 = 0;
LABEL_21:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return (v15 & 1) == 0;
          }
LABEL_20:
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_21;
        }
      }
      unint64_t v14 = 0xE000000000000000;
      if (v10) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }
  char v15 = v4;
  return (v15 & 1) == 0;
}

uint64_t sub_1000E8178(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  void v8[4] = v3;
  v9[0] = v6;
  return sub_1000E81D4(v8, v9) & 1;
}

uint64_t sub_1000E81D4(void *a1, void *a2)
{
  uint64_t v2 = a2[2];
  uint64_t v3 = a1[2];
  BOOL v4 = v2 < v3;
  if (v2 != v3) {
    goto LABEL_12;
  }
  BOOL v7 = a2[3] == a1[3] && a2[4] == a1[4];
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v8 = a2[7];
    uint64_t v9 = a1[7];
    BOOL v4 = v8 < v9;
    if (v8 == v9)
    {
      if (a2[9])
      {
        uint64_t v10 = a2[8];
        unint64_t v11 = a2[9];
        unint64_t v12 = a1[9];
        if (v12) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0xE000000000000000;
        unint64_t v12 = a1[9];
        if (v12)
        {
LABEL_10:
          uint64_t v13 = a1[8];
          unint64_t v14 = v12;
          if (v10 != v13) {
            goto LABEL_22;
          }
LABEL_20:
          if (v11 == v14)
          {
            char v15 = 0;
LABEL_23:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v15 & 1;
          }
LABEL_22:
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_23;
        }
      }
      unint64_t v14 = 0xE000000000000000;
      if (v10) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
LABEL_12:
    char v15 = v4;
    return v15 & 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000E832C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_1000E835C()
{
  sub_1000E8A70(v0 + 40, (uint64_t)v10, &qword_1002625B8);
  sub_1000E8A70((uint64_t)v10, (uint64_t)&v11, &qword_1002625B8);
  if (v12)
  {
    uint64_t v1 = 0;
    uint64_t v2 = (void *)0xE000000000000000;
  }
  else
  {
    v13[0] = v11;
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v2 = v3;
  }
  sub_1000E8A70(v0 + 64, (uint64_t)v9, &qword_1002625C0);
  sub_1000E8A70((uint64_t)v9, (uint64_t)v13, &qword_1002625C0);
  if (v13[1]) {
    Character.write<A>(to:)();
  }
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  Character.write<A>(to:)();
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000E8540()
{
  return sub_1000E835C();
}

unint64_t sub_1000E8588()
{
  unint64_t result = qword_1002625B0;
  if (!qword_1002625B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002625B0);
  }
  return result;
}

uint64_t sub_1000E85DC(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = v2 < v3;
  if (v2 != v3) {
    goto LABEL_12;
  }
  BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v8 = a1[7];
    uint64_t v9 = a2[7];
    BOOL v4 = v8 < v9;
    if (v8 == v9)
    {
      if (a1[9])
      {
        uint64_t v10 = a1[8];
        unint64_t v11 = a1[9];
        unint64_t v12 = a2[9];
        if (v12) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0xE000000000000000;
        unint64_t v12 = a2[9];
        if (v12)
        {
LABEL_10:
          uint64_t v13 = a2[8];
          unint64_t v14 = v12;
          if (v10 != v13) {
            goto LABEL_22;
          }
LABEL_20:
          if (v11 == v14)
          {
            char v15 = 0;
LABEL_23:
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v15 & 1;
          }
LABEL_22:
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_23;
        }
      }
      unint64_t v14 = 0xE000000000000000;
      if (v10) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
LABEL_12:
    char v15 = v4;
    return v15 & 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000E8734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v5 = type metadata accessor for NSScanner.NumberRepresentation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&countAndFlagsBits - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_allocWithZone((Class)NSScanner);
  swift_bridgeObjectRetain();
  uint64_t v37 = a1;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithString:v10];

  uint64_t v12 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v13(v8, enum case for NSScanner.NumberRepresentation.decimal(_:), v5);
  uint64_t v36 = NSScanner.scanInt(representation:)();
  char v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v8, v5);
  if (v15)
  {

    goto LABEL_15;
  }
  Swift::String_optional v17 = NSScanner.scanCharacter()();
  object = v17.value._object;
  if (v17.value._object)
  {
    uint64_t countAndFlagsBits = v17.value._countAndFlagsBits;
    v13(v8, v12, v5);
    uint64_t v19 = NSScanner.scanInt(representation:)();
    char v21 = v20;
    v16(v8, v5);
    if ((v21 & 1) == 0)
    {
      if (v19 >= 1000) {
        unint64_t v22 = v19 % 0x3E8uLL;
      }
      else {
        unint64_t v22 = v19;
      }
      if (v19 >= 1000) {
        unint64_t v23 = v19 / 0x3E8uLL;
      }
      else {
        unint64_t v23 = 0;
      }
      uint64_t v24 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Swift::String_optional v25 = NSScanner.scanCharacter()();
      uint64_t v26 = v25.value._countAndFlagsBits;
      uint64_t v27 = v25.value._object;
      uint64_t v28 = v37;
      swift_bridgeObjectRetain();
      NSScanner.currentIndex.getter();
      uint64_t v29 = String.distance(from:to:)();

      if (!v29)
      {
        BOOL v33 = v19 < 1000;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v34 = v38;
        uint64_t v32 = countAndFlagsBits;
        uint64_t v31 = v36;
        goto LABEL_18;
      }
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }

    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_16:
    uint64_t v28 = 0;
    uint64_t v24 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    object = 0;
    goto LABEL_17;
  }

  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v28 = 0;
  uint64_t v24 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
LABEL_17:
  unint64_t v23 = 0;
  BOOL v33 = 0;
  unint64_t v22 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v34 = v38;
LABEL_18:
  *uint64_t v34 = v28;
  v34[1] = v24;
  v34[2] = v31;
  v34[3] = v32;
  v34[4] = object;
  v34[5] = v23;
  v34[6] = v33;
  v34[7] = v22;
  v34[8] = v26;
  v34[9] = v27;
  return result;
}

uint64_t sub_1000E8A70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000AA024(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemVersionNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for SystemVersionNumber()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x290], 8) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x290], 8) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x290], 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x290], 8) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemVersionNumber(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemVersionNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x290], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x290], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemVersionNumber()
{
  return &type metadata for SystemVersionNumber;
}

void *sub_1000E8DAC()
{
  return &protocol witness table for String;
}

unint64_t sub_1000E8DBC()
{
  unint64_t result = qword_1002625D0;
  if (!qword_1002625D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002625D0);
  }
  return result;
}

void *sub_1000E8E10()
{
  return &protocol witness table for String;
}

unint64_t sub_1000E8E20()
{
  unint64_t result = qword_1002625D8;
  if (!qword_1002625D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002625D8);
  }
  return result;
}

void *sub_1000E8E74()
{
  return &protocol witness table for String;
}

unint64_t sub_1000E8E80()
{
  unint64_t result = qword_1002625E0;
  if (!qword_1002625E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002625E0);
  }
  return result;
}

uint64_t sub_1000E8ED4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v21);
  char v20 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_ckTokenBaseURL, v12, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL, a1, v13);
    unint64_t v18 = sub_1000D9DC4();
    v16._uint64_t countAndFlagsBits = URL.lastPathComponent.getter();
    uint64_t v19 = a1;
    unint64_t v22 = (void *)0xD00000000000002FLL;
    unint64_t v23 = 0x80000001001F9550;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
    static DispatchQoS.unspecified.getter();
    unint64_t v22 = &_swiftEmptyArrayStorage;
    sub_1000EBA08((unint64_t *)&unk_100263C90, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000AA024((uint64_t *)&unk_100263220);
    sub_1000EBA50();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v19, v13);
    *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue) = v17;
    return v2;
  }
  return result;
}

uint64_t sub_1000E9280(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = a2;
  uint64_t v4 = type metadata accessor for URLResourceValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v78 - v13;
  if (![self isFirstUnlocked])
  {
    static os_log_type_t.error.getter();
    if (qword_100261950 == -1) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  uint64_t v87 = v7;
  uint64_t v88 = v11;
  uint64_t v85 = v4;
  id v84 = self;
  id v15 = [v84 defaultManager];
  uint64_t v89 = a1;
  URL.path.getter();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v17 = [v15 fileExistsAtPath:v16];

  if (!v17 || (static URL.== infix(_:_:)() & 1) == 0)
  {
    URL.pathExtension.getter();
    uint64_t v23 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v23 >= 1)
    {
      uint64_t v79 = v5;
      uint64_t v80 = v9;
      uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      uint64_t v83 = v8;
      v24(v14, v89, v8);
      URL.deletingLastPathComponent()();
      static os_log_type_t.default.getter();
      if (qword_100261950 != -1) {
        swift_once();
      }
      uint64_t v81 = v2;
      uint64_t v82 = v14;
      sub_1000AA024((uint64_t *)&unk_100262110);
      uint64_t v25 = swift_allocObject();
      long long v86 = xmmword_1001CFDB0;
      *(_OWORD *)(v25 + 16) = xmmword_1001CFDB0;
      uint64_t v26 = URL.path.getter();
      uint64_t v28 = v27;
      *(void *)(v25 + 56) = &type metadata for String;
      unint64_t v29 = sub_1000AA5E0();
      *(void *)(v25 + 64) = v29;
      *(void *)(v25 + 32) = v26;
      *(void *)(v25 + 40) = v28;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      if (qword_100261858 != -1) {
        swift_once();
      }
      swift_bridgeObjectRetain();
      sub_1000AC9E4();
      swift_bridgeObjectRelease();
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      static os_log_type_t.info.getter();
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = v86;
      sub_1000EBA08((unint64_t *)&unk_100263280, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v30 + 56) = &type metadata for String;
      *(void *)(v30 + 64) = v29;
      *(void *)(v30 + 32) = v31;
      *(void *)(v30 + 40) = v32;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      static os_log_type_t.info.getter();
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = v86;
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v33 + 56) = &type metadata for String;
      *(void *)(v33 + 64) = v29;
      *(void *)(v33 + 32) = v34;
      *(void *)(v33 + 40) = v35;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      id v36 = v84;
      id v37 = [v84 defaultManager];
      URL.path.getter();
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v39 = [v37 fileExistsAtPath:v38];

      if (v39)
      {
        static os_log_type_t.info.getter();
        uint64_t v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = v86;
        uint64_t v41 = URL.path.getter();
        *(void *)(v40 + 56) = &type metadata for String;
        *(void *)(v40 + 64) = v29;
        *(void *)(v40 + 32) = v41;
        *(void *)(v40 + 40) = v42;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        id v43 = [v36 defaultManager];
        uint64_t v44 = v82;
        URL._bridgeToObjectiveC()(v45);
        uint64_t v47 = v46;
        URL._bridgeToObjectiveC()(v48);
        uint64_t v50 = v49;
        id v91 = 0;
        unsigned __int8 v51 = [v43 replaceItemAtURL:v47 withItemAtURL:v49 backupItemName:0 options:0 resultingItemURL:0 error:&v91];

        id v52 = v91;
        uint64_t v53 = v79;
        if ((v51 & 1) == 0) {
          goto LABEL_22;
        }
      }
      else
      {
        id v55 = [v36 defaultManager];
        URL._bridgeToObjectiveC()(v56);
        uint64_t v58 = v57;
        uint64_t v44 = v82;
        URL._bridgeToObjectiveC()(v59);
        uint64_t v61 = v60;
        id v91 = 0;
        unsigned int v62 = [v55 moveItemAtURL:v58 toURL:v60 error:&v91];

        id v52 = v91;
        uint64_t v53 = v79;
        if (!v62) {
          goto LABEL_22;
        }
      }
      id v63 = v52;
      sub_1000AA024((uint64_t *)&unk_100263B10);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v86;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v65 = NSFileProtectionKey;
      uint64_t v66 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v67 = sub_1000AF5A0(inited);
      id v68 = [v36 defaultManager];
      sub_10015C6F8(v67);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_1000EBA08(&qword_100261C58, type metadata accessor for FileAttributeKey);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v70 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v91 = 0;
      unsigned int v71 = [v68 setAttributes:isa ofItemAtPath:v70 error:&v91];

      id v52 = v91;
      if (v71)
      {
        id v72 = v91;
        uint64_t v73 = v87;
        URL.setResourceValues(_:)();
        uint64_t v74 = v80;
        uint64_t v75 = v83;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v73, v85);
        uint64_t v76 = *(void (**)(char *, uint64_t))(v74 + 8);
        v76(v88, v75);
        return ((uint64_t (*)(char *, uint64_t))v76)(v44, v75);
      }
LABEL_22:
      id v77 = v52;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v87, v85);
      uint64_t v76 = *(void (**)(char *, uint64_t))(v80 + 8);
      uint64_t v75 = v83;
      v76(v88, v83);
      return ((uint64_t (*)(char *, uint64_t))v76)(v44, v75);
    }
    static os_log_type_t.error.getter();
    if (qword_100261950 == -1)
    {
LABEL_18:
      os_log(_:dso:log:_:_:)();
      sub_1000EB9B4();
      swift_allocError();
      *uint64_t v54 = 0x8000000000000010;
      return swift_willThrow();
    }
LABEL_24:
    swift_once();
    goto LABEL_18;
  }
  static os_log_type_t.info.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1001CFDB0;
  uint64_t v19 = URL.path.getter();
  uint64_t v21 = v20;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000AA5E0();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E9D14@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v43 = a2;
  URL.path.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v46 = v4;
  v12(v7, v4);
  uint64_t v13 = self;
  id v14 = [v13 defaultManager];
  URL.path.getter();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v16 = [v14 fileExistsAtPath:v15];

  if (!v16)
  {
LABEL_6:
    char v30 = 1;
    goto LABEL_10;
  }
  id v17 = [v13 defaultManager];
  URL._bridgeToObjectiveC()(v18);
  uint64_t v20 = v19;
  id v47 = 0;
  unsigned int v21 = [v17 removeItemAtURL:v19 error:&v47];

  if (v21)
  {
    id v22 = v47;
    LODWORD(v42) = static os_log_type_t.default.getter();
    if (qword_100261950 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1001D0A20;
    sub_1000EBA08((unint64_t *)&unk_100263280, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    unint64_t v27 = sub_1000AA5E0();
    *(void *)(v23 + 64) = v27;
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    uint64_t v28 = URL.lastPathComponent.getter();
    *(void *)(v23 + 96) = &type metadata for String;
    *(void *)(v23 + 104) = v27;
    *(void *)(v23 + 72) = v28;
    *(void *)(v23 + 80) = v29;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  id v31 = v47;
  uint64_t v32 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  LODWORD(v44) = static os_log_type_t.default.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  uint64_t v42 = qword_10026ADF0;
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1001D0A20;
  id v47 = v32;
  swift_errorRetain();
  sub_1000AA024(&qword_100261D60);
  uint64_t v34 = String.init<A>(describing:)();
  uint64_t v36 = v35;
  *(void *)(v33 + 56) = &type metadata for String;
  unint64_t v37 = sub_1000AA5E0();
  *(void *)(v33 + 64) = v37;
  *(void *)(v33 + 32) = v34;
  *(void *)(v33 + 40) = v36;
  uint64_t v38 = URL.lastPathComponent.getter();
  *(void *)(v33 + 96) = &type metadata for String;
  *(void *)(v33 + 104) = v37;
  *(void *)(v33 + 72) = v38;
  *(void *)(v33 + 80) = v39;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  char v30 = 0;
LABEL_10:
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v12)(v10, v46);
  *uint64_t v45 = v30;
  return result;
}

uint64_t sub_1000EA1C0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_serialQueue);
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5, v7);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    URL.path.getter();
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    sub_1000ACE70();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EA3B8()
{
  return 0;
}

uint64_t sub_1000EA540()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  if (qword_100261868 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1000AA0CC(v0, (uint64_t)qword_10026AB38);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  sub_1000EA3B8();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  if (qword_100261870 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1000AA0CC(v0, (uint64_t)qword_10026AB50);
  v5(v3, v7, v0);
  uint64_t v8 = sub_1000EA3B8();
  swift_errorRelease();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v6)(v3, v0);
  if (v8) {
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1000EA780()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - v7;
  static os_log_type_t.default.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  uint64_t v33 = (uint64_t)v2;
  os_log(_:dso:log:_:_:)();
  sub_1000EA3B8();
  if (qword_100261878 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_1000AA0CC(v3, (uint64_t)qword_10026AB68);
  uint64_t v11 = v4 + 16;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10(v8, v9, v3);
  sub_1000EA3B8();
  swift_errorRelease();
  uint64_t v32 = v4;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v8, v3);
  if (qword_100261850 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_1000AA0CC(v3, (uint64_t)qword_10026AAE0);
  v10(v8, v13, v3);
  sub_1000EA3B8();
  swift_errorRelease();
  v12(v8, v3);
  if (qword_1002618E8 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_1000AA0CC(v3, (uint64_t)qword_10026AD20);
  v10(v8, v14, v3);
  sub_1000EA3B8();
  swift_errorRelease();
  v12(v8, v3);
  if (qword_1002618F0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_1000AA0CC(v3, (uint64_t)qword_10026AD38);
  v10(v8, v15, v3);
  sub_1000EA3B8();
  swift_errorRelease();
  v12(v8, v3);
  if (qword_100261890 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_1000AA0CC(v3, (uint64_t)qword_10026AB90);
  v10(v8, v16, v3);
  sub_1000EA3B8();
  swift_errorRelease();
  v12(v8, v3);
  if (qword_100261868 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1000AA0CC(v3, (uint64_t)qword_10026AB38);
  v10(v8, v17, v3);
  sub_1000EA3B8();
  swift_errorRelease();
  v12(v8, v3);
  if (qword_100261870 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_1000AA0CC(v3, (uint64_t)qword_10026AB50);
  unint64_t v37 = v10;
  uint64_t v30 = v11;
  v10(v8, v18, v3);
  sub_1000EA3B8();
  swift_errorRelease();
  v12(v8, v3);
  uint64_t v19 = v33;
  URL.init(string:)();
  uint64_t v20 = v12;
  uint64_t v21 = v32;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v19, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v31, v19, v3);
    sub_1000EA3B8();
    swift_errorRelease();
    v20(v23, v3);
    uint64_t v35 = &type metadata for AudioAccessoryFeatures;
    unint64_t v36 = sub_1000AE4C4();
    char v24 = isFeatureEnabled(_:)();
    sub_1000ABFF0((uint64_t)v34);
    if (v24)
    {
      if (qword_100261918 != -1) {
        swift_once();
      }
      uint64_t v25 = sub_1000AA0CC(v3, (uint64_t)qword_10026AD60);
      uint64_t v26 = v37;
      v37(v8, v25, v3);
      uint64_t v33 = sub_1000EA3B8();
      swift_errorRelease();
      v20(v8, v3);
      if (qword_100261860 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_1000AA0CC(v3, (uint64_t)qword_10026AB00);
      v26(v8, v27, v3);
      sub_1000EA3B8();
      swift_errorRelease();
      v20(v8, v3);
    }
    if (qword_1002618E0 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_1000AA0CC(v3, (uint64_t)qword_10026AC28);
    v37(v8, v28, v3);
    uint64_t v29 = sub_1000EA3B8();
    swift_errorRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v8, v3);
    if (v29) {
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1000EAF50()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  if (qword_100261918 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1000AA0CC(v0, (uint64_t)qword_10026AD60);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  sub_1000EA3B8();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  if (qword_100261860 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_1000AA0CC(v0, (uint64_t)qword_10026AB00);
  v5(v3, v7, v0);
  sub_1000EA3B8();
  swift_errorRelease();
  v6(v3, v0);
  if (qword_1002618E0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_1000AA0CC(v0, (uint64_t)qword_10026AC28);
  v5(v3, v8, v0);
  uint64_t v9 = sub_1000EA3B8();
  swift_errorRelease();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v6)(v3, v0);
  if (v9) {
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1000EB210()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v37 - v8;
  static os_log_type_t.default.getter();
  if (qword_100261950 != -1) {
    swift_once();
  }
  uint64_t v10 = &unk_10026A000;
  os_log(_:dso:log:_:_:)();
  id v43 = self;
  id v11 = [v43 defaultManager];
  type metadata accessor for DeviceStore();
  sub_10013ACBC((uint64_t)v9);
  uint64_t v12 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  uint64_t v42 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t result = v42(v9, v3);
  id v45 = v12;
  if (v12)
  {
    uint64_t v14 = v4 + 8;
    uint64_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    uint64_t v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
    uint64_t v39 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v40 = (char *)&type metadata for Any + 8;
    long long v38 = xmmword_1001CFDB0;
    while (1)
    {
      if ([v45 nextObject])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v46, 0, sizeof(v46));
      }
      sub_1000EBAAC((uint64_t)v46, (uint64_t)v47);
      if (!v47[3]) {
        break;
      }
      int v20 = swift_dynamicCast();
      (*v44)(v2, v20 ^ 1u, 1, v3);
      if ((*v41)(v2, 1, v3) == 1) {
        goto LABEL_15;
      }
      (*v39)(v6, v2, v3);
      id v21 = [v43 defaultManager];
      URL._bridgeToObjectiveC()(v22);
      char v24 = v23;
      v47[0] = 0;
      unsigned int v25 = [v21 removeItemAtURL:v23 error:v47];

      if (v25)
      {
        id v15 = v47[0];
        static os_log_type_t.default.getter();
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = v38;
        sub_1000EBA08((unint64_t *)&unk_100263280, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v19 = v18;
        *(void *)(v16 + 56) = &type metadata for String;
        *(void *)(v16 + 64) = sub_1000AA5E0();
        *(void *)(v16 + 32) = v17;
        *(void *)(v16 + 40) = v19;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v26 = v47[0];
        uint64_t v27 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        static os_log_type_t.default.getter();
        v37[1] = v10[446];
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v38;
        v47[0] = v27;
        swift_errorRetain();
        sub_1000AA024(&qword_100261D60);
        uint64_t v29 = String.init<A>(describing:)();
        uint64_t v30 = v3;
        id v31 = v2;
        uint64_t v32 = v6;
        uint64_t v33 = v10;
        uint64_t v34 = v14;
        uint64_t v36 = v35;
        *(void *)(v28 + 56) = &type metadata for String;
        *(void *)(v28 + 64) = sub_1000AA5E0();
        *(void *)(v28 + 32) = v29;
        *(void *)(v28 + 40) = v36;
        uint64_t v14 = v34;
        uint64_t v10 = v33;
        uint64_t v6 = v32;
        uint64_t v2 = v31;
        uint64_t v3 = v30;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
      }
      v42(v6, v3);
    }
    sub_1000AA894((uint64_t)v47, &qword_1002631A0);
    (*v44)(v2, 1, 1, v3);
LABEL_15:

    return sub_1000AA894((uint64_t)v2, (uint64_t *)&unk_100261A00);
  }
  return result;
}

uint64_t sub_1000EB7E0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_directoryURL;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);

  v3(v0 + OBJC_IVAR____TtC15audioaccessoryd17RecordFileManager_ckTokenBaseURL, v2);
  uint64_t v4 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v5 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v4, v5);
}

uint64_t sub_1000EB8C0()
{
  return type metadata accessor for RecordFileManager();
}

uint64_t type metadata accessor for RecordFileManager()
{
  uint64_t result = qword_100262610;
  if (!qword_100262610) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000EB914()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000EB9B4()
{
  unint64_t result = qword_100263B00;
  if (!qword_100263B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100263B00);
  }
  return result;
}

uint64_t sub_1000EBA08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000EBA50()
{
  unint64_t result = qword_100263CA0;
  if (!qword_100263CA0)
  {
    sub_1000AF194((uint64_t *)&unk_100263220);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100263CA0);
  }
  return result;
}

uint64_t sub_1000EBAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AA024(&qword_1002631A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000EBB14(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    id v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for URL();
    int v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000EBC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000EBD58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000EBE70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000EBFA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000EC084(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000EC190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EC1A4);
}

uint64_t sub_1000EC1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000EC2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EC2E8);
}

uint64_t sub_1000EC2E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + _Block_object_dispose(&STACK[0x290], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 28);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for CloudCoordinatorConfiguration()
{
  uint64_t result = qword_100262788;
  if (!qword_100262788) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000EC464()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000EC54C()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  unint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  sub_1000AA068(v3, qword_10026AC10);
  uint64_t v4 = sub_1000AA0CC(v3, (uint64_t)qword_10026AC10);
  URL.init(string:)();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EC684()
{
  _StringGuts.grow(_:)(67);
  v1._object = (void *)0x80000001001F9670;
  v1._uint64_t countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v1);
  unint64_t v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration() + 24));
  uint64_t v3 = *v2;
  uint64_t v4 = (void *)v2[1];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x4449656E6F7A202CLL;
  v6._object = (void *)0xEB00000000203A73;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_1000EC790(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x726F746365726964;
      break;
    case 4:
      unint64_t result = 0x734449656E6F7ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000EC858(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AA024(&qword_1002627F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000ABF58(a1, a1[3]);
  sub_1000ED334();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  type metadata accessor for UUID();
  sub_1000ED448(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for CloudCoordinatorConfiguration();
    char v15 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 3;
    type metadata accessor for URL();
    sub_1000ED448(&qword_100261FD0, (void (*)(uint64_t))&type metadata accessor for URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    sub_1000AA024(&qword_100261DA0);
    sub_1000ED490(&qword_100262800);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000ECB30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  id v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000AA024(&qword_1002627E0);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10);
  unint64_t v37 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v12 - 8);
  char v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for CloudCoordinatorConfiguration();
  __chkstk_darwin(v36);
  char v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v14, v6);
    uint64_t v18 = a1;
    sub_1000ABF58(a1, a1[3]);
    sub_1000ED334();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    if (v2)
    {
      sub_1000ABFF0((uint64_t)a1);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    }
    else
    {
      char v43 = 0;
      sub_1000ED448((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = v33;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v20 = (uint64_t)v18;
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v16, v9, v6);
      char v42 = 1;
      uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      id v22 = (int *)v36;
      uint64_t v23 = (uint64_t *)&v16[*(int *)(v36 + 20)];
      *uint64_t v23 = v21;
      v23[1] = v24;
      char v41 = 2;
      uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
      id v26 = (uint64_t *)&v16[v22[6]];
      *id v26 = v25;
      v26[1] = v27;
      char v40 = 3;
      sub_1000ED448(&qword_100261FE0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v28 = v35;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v16[v22[7]], v31, v28);
      sub_1000AA024(&qword_100261DA0);
      char v39 = 4;
      sub_1000ED490(&qword_1002627F0);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v19);
      *(void *)&v16[v22[8]] = v38;
      sub_1000ED388((uint64_t)v16, v30);
      sub_1000ABFF0(v20);
      return sub_1000ED3EC((uint64_t)v16);
    }
  }
  return result;
}

unint64_t sub_1000ED1D4()
{
  return sub_1000EC790(*v0);
}

uint64_t sub_1000ED1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000ED700(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000ED204(uint64_t a1)
{
  unint64_t v2 = sub_1000ED334();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ED240(uint64_t a1)
{
  unint64_t v2 = sub_1000ED334();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ED280@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000ECB30(a1, a2);
}

uint64_t sub_1000ED298(void *a1)
{
  return sub_1000EC858(a1);
}

uint64_t sub_1000ED2B0(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000ED448(&qword_1002627D0, (void (*)(uint64_t))type metadata accessor for CloudCoordinatorConfiguration);
  uint64_t result = sub_1000ED448(&qword_1002627D8, (void (*)(uint64_t))type metadata accessor for CloudCoordinatorConfiguration);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000ED334()
{
  unint64_t result = qword_1002627E8;
  if (!qword_1002627E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002627E8);
  }
  return result;
}

uint64_t sub_1000ED388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudCoordinatorConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ED3EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudCoordinatorConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000ED448(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ED490(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000AF194(&qword_100261DA0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CloudCoordinatorConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000ED5C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudCoordinatorConfiguration.CodingKeys()
{
  return &type metadata for CloudCoordinatorConfiguration.CodingKeys;
}

unint64_t sub_1000ED5FC()
{
  unint64_t result = qword_100262808;
  if (!qword_100262808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262808);
  }
  return result;
}

unint64_t sub_1000ED654()
{
  unint64_t result = qword_100262810;
  if (!qword_100262810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262810);
  }
  return result;
}

unint64_t sub_1000ED6AC()
{
  unint64_t result = qword_100262818;
  if (!qword_100262818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262818);
  }
  return result;
}

uint64_t sub_1000ED700(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001001F96E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001001F9700 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x726F746365726964 && a2 == 0xEC0000004C525579 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x734449656E6F7ALL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

os_activity_t _BTActivityCreate(_:dso:)(char *description, int a2, char a3, void *dso)
{
  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_1002618A8 == -1)
        {
LABEL_5:
          char v6 = qword_100262820;
          return _os_activity_create(dso, description, v6, OS_ACTIVITY_FLAG_DEFAULT);
        }
LABEL_20:
        swift_once();
        goto LABEL_5;
      }
LABEL_30:
      os_activity_t result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unint64_t)description >> 32) {
    goto LABEL_19;
  }
  if (description >> 11 == 27) {
    goto LABEL_29;
  }
  if (description >> 16 > 0x10)
  {
    __break(1u);
  }
  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      unsigned int v8 = ((_BYTE)description + 1);
      goto LABEL_14;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v9 = (description & 0x3F) << 8;
  unsigned int v10 = (v9 | (description >> 6)) + 33217;
  unsigned int v11 = (v9 | (description >> 6) & 0x3F) << 8;
  unsigned int v12 = (((v11 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  unsigned int v13 = (v11 | (description >> 12)) + 8487393;
  if (description >> 16) {
    unsigned int v8 = v12;
  }
  else {
    unsigned int v8 = v13;
  }
  if (description < 0x800) {
    unsigned int v8 = v10;
  }
LABEL_14:
  *(void *)descriptiona = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v8) & 0x38)) & 0x38));
  if (!dso) {
    goto LABEL_30;
  }
  if (qword_1002618A8 != -1) {
    swift_once();
  }
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_100262820, OS_ACTIVITY_FLAG_DEFAULT);
}

const char *XPCArguments.CloudDevice.unsafeMutableAddressor()
{
  return "kCloudDevice";
}

uint64_t static XPCArguments.CloudDevice.getter()
{
  return 0x654464756F6C436BLL;
}

void *XPCArguments.CloudDeviceAddress.unsafeMutableAddressor()
{
  return &static XPCArguments.CloudDeviceAddress;
}

unint64_t static XPCArguments.CloudDeviceAddress.getter()
{
  return 0xD000000000000013;
}

id XPCArguments.init()()
{
  return sub_1000EDF18(type metadata accessor for XPCArguments);
}

id XPCArguments.__deallocating_deinit()
{
  return sub_1000EDFC4(type metadata accessor for XPCArguments);
}

void *XPCMessages.fetchDeviceList.unsafeMutableAddressor()
{
  return &static XPCMessages.fetchDeviceList;
}

unint64_t static XPCMessages.fetchDeviceList.getter()
{
  return 0xD000000000000010;
}

void *XPCMessages.fetchNicknameDevice.unsafeMutableAddressor()
{
  return &static XPCMessages.fetchNicknameDevice;
}

unint64_t static XPCMessages.fetchNicknameDevice.getter()
{
  return 0xD000000000000014;
}

void *XPCMessages.nicknameDevice.unsafeMutableAddressor()
{
  return &static XPCMessages.nicknameDevice;
}

uint64_t static XPCMessages.nicknameDevice.getter()
{
  return 0x6D616E6B63694E6BLL;
}

void *XPCMessages.removeDeviceNickname.unsafeMutableAddressor()
{
  return &static XPCMessages.removeDeviceNickname;
}

unint64_t static XPCMessages.removeDeviceNickname.getter()
{
  return 0xD000000000000015;
}

void *XPCMessages.purgeCloudData.unsafeMutableAddressor()
{
  return &static XPCMessages.purgeCloudData;
}

uint64_t static XPCMessages.purgeCloudData.getter()
{
  return 0x6C4365677275506BLL;
}

void *XPCMessages.resetCachedData.unsafeMutableAddressor()
{
  return &static XPCMessages.resetCachedData;
}

unint64_t static XPCMessages.resetCachedData.getter()
{
  return 0xD000000000000010;
}

id XPCMessages.init()()
{
  return sub_1000EDF18(type metadata accessor for XPCMessages);
}

id sub_1000EDF18(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super init];
}

id sub_1000EDF68(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return [super init];
}

id XPCMessages.__deallocating_deinit()
{
  return sub_1000EDFC4(type metadata accessor for XPCMessages);
}

id sub_1000EDFC4(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t sub_1000EE000()
{
  qword_100262820 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

uint64_t sub_1000EE03C@<X0>(char *description@<X0>, void *dso@<X2>, void *a3@<X8>)
{
  if (dso && description)
  {
    if (qword_1002618A8 != -1) {
      swift_once();
    }
    uint64_t result = (uint64_t)_os_activity_create(dso, description, (os_activity_t)qword_100262820, OS_ACTIVITY_FLAG_DEFAULT);
    *a3 = result;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for XPCArguments()
{
  return self;
}

uint64_t type metadata accessor for XPCMessages()
{
  return self;
}

void sub_1000EE280()
{
  byte_100262880 = 0;
}

void sub_1000EE28C()
{
  byte_100262881 = 0;
}

void sub_1000EE298()
{
  byte_100262882 = 0;
}

void sub_1000EE2A4()
{
  byte_100262883 = 0;
}

void sub_1000EE2B0()
{
  byte_100262884 = 0;
}

void sub_1000EE2BC()
{
  byte_100262885 = 0;
}

uint64_t sub_1000EE2C8()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  BOOL v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v5, qword_10026AC28);
  sub_1000AA0CC(v3, (uint64_t)qword_10026AC28);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

Class HMDeviceCloudRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v159 = *(void **)(v2 - 8);
  uint64_t v160 = v2;
  id v161 = v159;
  __chkstk_darwin(v2);
  id v162 = (char *)&v151 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v152 = (void (*)(char *, uint64_t))sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v152);
  uint64_t v157 = (char *)&v151 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v158 = (uint64_t)&v151 - v6;
  __chkstk_darwin(v7);
  uint64_t v154 = (char *)&v151 - v8;
  __chkstk_darwin(v9);
  uint64_t v156 = (uint64_t)&v151 - v10;
  __chkstk_darwin(v11);
  unsigned int v13 = (char *)&v151 - v12;
  uint64_t v15 = &v0[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  unint64_t v17 = *((void *)v15 + 1);
  sub_1000AA680(v16, v17);
  uint64_t v18 = (objc_class *)sub_100130420(v16, v17);
  sub_1000AA8F0(v16, v17);
  if (v18)
  {
    Class isa = v18;
  }
  else
  {
    uint64_t v20 = v1;
    Class isa = sub_1000B4D08((uint64_t)v20).super.isa;
  }
  Class v165 = isa;
  sub_1000F45CC((id *)&v165);
  Class v165 = 0;
  unint64_t v166 = 0xE000000000000000;
  _StringGuts.grow(_:)(856);
  Class v167 = v165;
  unint64_t v168 = v166;
  v21._object = (void *)0x80000001001F9930;
  v21._uint64_t countAndFlagsBits = 0xD000000000000014;
  uint64_t v151 = (void (*)(char *, char *, uint64_t))0xD000000000000014;
  String.append(_:)(v21);
  type metadata accessor for UUID();
  sub_1000F8AEC((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 2108704;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  uint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
  uint64_t v25 = *(void **)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8];
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x80000001001F9950;
  v27._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v27);
  LOBYTE(v165) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus];
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._object = (void *)0x80000001001F9970;
  uint64_t v153 = 0xD000000000000012;
  v29._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v29);
  LOBYTE(v165) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus];
  v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0xD000000000000016;
  v31._object = (void *)0x80000001001F9990;
  String.append(_:)(v31);
  LOBYTE(v165) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled];
  v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._object = (void *)0x80000001001F99B0;
  v33._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v33);
  LOBYTE(v165) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled];
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._object = (void *)0x80000001001F99D0;
  uint64_t v155 = 0xD000000000000013;
  v35._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v35);
  LOBYTE(v165) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled];
  v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._object = (void *)0x80000001001F99F0;
  v37._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v37);
  LOBYTE(v165) = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled];
  v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._object = (void *)0x80000001001F9A10;
  v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  char v40 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  BYTE4(v165) = v40;
  sub_1000AA024((uint64_t *)&unk_1002628A0);
  v41._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._object = (void *)0x80000001001F9A30;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v42);
  char v43 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  BYTE4(v165) = v43;
  v44._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._object = (void *)0x80000001001F9A50;
  v45._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v45);
  char v46 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  BYTE4(v165) = v46;
  v47._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v48._object = (void *)0x80000001001F9A70;
  String.append(_:)(v48);
  char v49 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  BYTE4(v165) = v49;
  v50._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._object = (void *)0x80000001001F9A90;
  v51._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v51);
  char v52 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  BYTE4(v165) = v52;
  v53._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._object = (void *)0x80000001001F9AB0;
  v54._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  char v55 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  BYTE4(v165) = v55;
  v56._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._object = (void *)0x80000001001F9AD0;
  v57._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v57);
  char v58 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  BYTE4(v165) = v58;
  v59._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._object = (void *)0x80000001001F9AF0;
  v60._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v60);
  char v61 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  BYTE4(v165) = v61;
  v62._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  v63._object = (void *)0x80000001001F9B10;
  v63._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v63);
  char v64 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4];
  LODWORD(v165) = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  BYTE4(v165) = v64;
  v65._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  v66._uint64_t countAndFlagsBits = 0xD000000000000021;
  v66._object = (void *)0x80000001001F9B30;
  String.append(_:)(v66);
  uint64_t v67 = (uint64_t)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  swift_beginAccess();
  sub_1000F7934(v67, (uint64_t)v13);
  v68._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v69._uint64_t countAndFlagsBits = 0xD000000000000022;
  v69._object = (void *)0x80000001001F9B60;
  String.append(_:)(v69);
  uint64_t v70 = (uint64_t)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  swift_beginAccess();
  sub_1000F7934(v70, (uint64_t)v13);
  v71._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  v72._object = (void *)0x80000001001F9B90;
  v72._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v72);
  char v73 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  char v164 = v73;
  v74._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  v75._object = (void *)0x80000001001F9BB0;
  v75._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v75);
  char v76 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  char v164 = v76;
  v77._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  v78._object = (void *)0x80000001001F9BD0;
  v78._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v78);
  char v79 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  char v164 = v79;
  v80._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v80);
  swift_bridgeObjectRelease();
  v81._object = (void *)0x80000001001F9BF0;
  v81._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v81);
  char v82 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  char v164 = v82;
  v83._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._uint64_t countAndFlagsBits = 0xD000000000000018;
  v84._object = (void *)0x80000001001F9C10;
  String.append(_:)(v84);
  char v85 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  char v164 = v85;
  v86._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  v87._object = (void *)0x80000001001F9C30;
  v87._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v87);
  char v88 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  char v164 = v88;
  v89._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  v90._uint64_t countAndFlagsBits = 0xD000000000000029;
  v90._object = (void *)0x80000001001F9C50;
  String.append(_:)(v90);
  char v91 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  char v164 = v91;
  v92._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v92);
  swift_bridgeObjectRelease();
  v93._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  v93._object = (void *)0x80000001001F9C80;
  String.append(_:)(v93);
  char v94 = v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight + 4];
  int v163 = *(_DWORD *)&v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  char v164 = v94;
  v95._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  v96._object = (void *)0x80000001001F7340;
  v96._uint64_t countAndFlagsBits = (uint64_t)v151;
  String.append(_:)(v96);
  uint64_t v97 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate];
  swift_beginAccess();
  uint64_t v99 = v161;
  uint64_t v98 = v162;
  uint64_t v100 = v160;
  uint64_t v151 = (void (*)(char *, char *, uint64_t))v161[2];
  v151(v162, v97, v160);
  sub_1000F8AEC(&qword_1002633B0, (void (*)(uint64_t))&type metadata accessor for Date);
  v101._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  id v152 = (void (*)(char *, uint64_t))v99[1];
  v152(v98, v100);
  v102._object = (void *)0x80000001001F7360;
  v102._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v102);
  id v103 = [(objc_class *)isa creationDate];
  Class v104 = isa;
  if (v103)
  {
    uint64_t v105 = v103;
    uint64_t v106 = (uint64_t)v154;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v107 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v99[7];
    v107(v106, 0, 1, v100);
  }
  else
  {
    uint64_t v107 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v99[7];
    uint64_t v106 = (uint64_t)v154;
    v107((uint64_t)v154, 1, 1, v100);
  }
  uint64_t v108 = v156;
  sub_1000AA798(v106, v156);
  uint64_t v111 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v99[6];
  uint64_t v110 = v99 + 6;
  uint64_t v109 = v111;
  if (v111(v108, 1, v100))
  {
    sub_1000AA894(v108, &qword_100261D90);
    uint64_t v112 = (void *)0xE200000000000000;
    uint64_t v113 = 15932;
  }
  else
  {
    id v161 = v110;
    uint64_t v114 = v162;
    v151(v162, (char *)v108, v100);
    sub_1000AA894(v108, &qword_100261D90);
    uint64_t v115 = self;
    Class v116 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v117 = v104;
    id v118 = [v115 localizedStringFromDate:v116 dateStyle:2 timeStyle:2];

    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v112 = v119;

    Class v104 = v117;
    uint64_t v100 = v160;
    v152(v114, v160);
  }
  v120._uint64_t countAndFlagsBits = v113;
  v120._object = v112;
  String.append(_:)(v120);
  swift_bridgeObjectRelease();
  v121._object = (void *)0x80000001001F7380;
  v121._uint64_t countAndFlagsBits = v153;
  String.append(_:)(v121);
  id v122 = [(objc_class *)v104 modificationDate];
  if (v122)
  {
    uint64_t v123 = v122;
    uint64_t v124 = (uint64_t)v157;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v125 = 0;
  }
  else
  {
    uint64_t v125 = 1;
    uint64_t v124 = (uint64_t)v157;
  }
  v107(v124, v125, 1, v100);
  uint64_t v126 = v158;
  sub_1000AA798(v124, v158);
  if (v109(v126, 1, v100))
  {
    sub_1000AA894(v126, &qword_100261D90);
    char v127 = (void *)0xE200000000000000;
    uint64_t v128 = 15932;
  }
  else
  {
    unint64_t v129 = v162;
    v151(v162, (char *)v126, v100);
    sub_1000AA894(v126, &qword_100261D90);
    uint64_t v130 = self;
    Class v131 = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v132 = v104;
    id v133 = [v130 localizedStringFromDate:v131 dateStyle:2 timeStyle:2];

    uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v127 = v134;

    Class v104 = v132;
    v152(v129, v100);
  }
  v135._uint64_t countAndFlagsBits = v128;
  v135._object = v127;
  String.append(_:)(v135);
  swift_bridgeObjectRelease();
  v136._object = (void *)0x80000001001F73A0;
  v136._uint64_t countAndFlagsBits = v155;
  String.append(_:)(v136);
  id v137 = [(objc_class *)v104 modifiedByDevice];
  if (v137)
  {
    id v138 = v137;
    uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v141 = v140;
  }
  else
  {
    uint64_t v141 = (void *)0xE200000000000000;
    uint64_t v139 = 15932;
  }
  v142._uint64_t countAndFlagsBits = v139;
  v142._object = v141;
  String.append(_:)(v142);
  swift_bridgeObjectRelease();
  v143._uint64_t countAndFlagsBits = 0x746520202020202CLL;
  v143._object = (void *)0xEC000000203A6761;
  String.append(_:)(v143);
  id v144 = [(objc_class *)v104 recordChangeTag];
  if (v144)
  {
    uint64_t v145 = v144;
    uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v148 = v147;
  }
  else
  {
    id v148 = (void *)0xE200000000000000;
    uint64_t v146 = 15932;
  }
  v149._uint64_t countAndFlagsBits = v146;
  v149._object = v148;
  String.append(_:)(v149);

  swift_bridgeObjectRelease();
  return v167;
}

uint64_t *sub_1000EF5DC(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v245 = (char *)&v219 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v243 = (char *)&v219 - v7;
  uint64_t v8 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v8 - 8);
  unint64_t v224 = (char *)&v219 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v242 = (char *)&v219 - v11;
  __chkstk_darwin(v12);
  uint64_t v235 = (char *)&v219 - v13;
  __chkstk_darwin(v14);
  unint64_t v233 = (char *)&v219 - v15;
  uint64_t v16 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v219 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v247 = *(void *)(v19 - 8);
  uint64_t v248 = v19;
  __n128 v20 = __chkstk_darwin(v19);
  id v246 = (char *)&v219 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v22 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  *(_DWORD *)Swift::String v22 = 0;
  unsigned char v22[4] = 1;
  Swift::String v23 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  *(_DWORD *)Swift::String v23 = 0;
  uint64_t v225 = v23;
  void v23[4] = 1;
  uint64_t v24 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  *(_DWORD *)uint64_t v24 = 0;
  id v226 = v24;
  v24[4] = 1;
  uint64_t v25 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  *(_DWORD *)uint64_t v25 = 0;
  uint64_t v227 = v25;
  void v25[4] = 1;
  Swift::String v26 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  *(_DWORD *)Swift::String v26 = 0;
  uint64_t v228 = v26;
  void v26[4] = 1;
  Swift::String v27 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  *(_DWORD *)Swift::String v27 = 0;
  unint64_t v229 = v27;
  v27[4] = 1;
  Swift::String v28 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  *(_DWORD *)Swift::String v28 = 0;
  unint64_t v230 = v28;
  v28[4] = 1;
  Swift::String v29 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  *(_DWORD *)Swift::String v29 = 0;
  uint64_t v231 = v29;
  v29[4] = 1;
  Swift::String v30 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  *(_DWORD *)Swift::String v30 = 0;
  uint64_t v232 = v30;
  v30[4] = 1;
  uint64_t v244 = v4;
  Swift::String v31 = *(void (**)(__n128))(v4 + 56);
  id v252 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  v31(v20);
  char v253 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  uint64_t v249 = v31;
  uint64_t v250 = v4 + 56;
  ((void (*)(void))v31)();
  Swift::String v32 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  *(_DWORD *)Swift::String v32 = 0;
  char v234 = v32;
  _OWORD v32[4] = 1;
  Swift::String v33 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  *(_DWORD *)Swift::String v33 = 0;
  uint64_t v236 = v33;
  v33[4] = 1;
  Swift::String v34 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  *(_DWORD *)Swift::String v34 = 0;
  uint64_t v237 = v34;
  v34[4] = 1;
  Swift::String v35 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  *(_DWORD *)Swift::String v35 = 0;
  id v238 = v35;
  v35[4] = 1;
  Swift::String v36 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  *(_DWORD *)Swift::String v36 = 0;
  id v239 = v36;
  void v36[4] = 1;
  Swift::String v37 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  *(_DWORD *)Swift::String v37 = 0;
  id v240 = v37;
  v37[4] = 1;
  Swift::String v38 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  *(_DWORD *)Swift::String v38 = 0;
  uint64_t v241 = v38;
  v38[4] = 1;
  Swift::String v39 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  *(_DWORD *)Swift::String v39 = 0;
  void v39[4] = 1;
  char v40 = v1;
  if (CKRecord.recordType.getter() == 0xD000000000000013 && v41 == 0x80000001001D2370)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v223 = v3;
    id v43 = [a1 encryptedValues];
    NSString v44 = String._bridgeToObjectiveC()();
    id v251 = v43;
    id v45 = [v43 objectForKeyedSubscript:v44];

    if (!v45) {
      goto LABEL_9;
    }
    unint64_t v222 = 0xD000000000000010;
    id v257 = v45;
    sub_1000AA024(&qword_1002629D0);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_9;
    }
    id v220 = v39;
    uint64_t v46 = v256;
    id v221 = v255;
    Swift::String v47 = a1;
    id v48 = [a1 recordID];
    id v49 = [v48 recordName];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v51 = v247;
    uint64_t v50 = v248;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v247 + 48))(v18, 1, v248) == 1)
    {
      swift_bridgeObjectRelease();
      sub_1000AA894((uint64_t)v18, &qword_100261EA0);
      a1 = v47;
LABEL_9:
      char v52 = v40;
      static os_log_type_t.error.getter();
      if (qword_100261948 != -1) {
        swift_once();
      }
      sub_1000AA024((uint64_t *)&unk_100262110);
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = xmmword_1001CFDB0;
      *(void *)(v53 + 56) = sub_1000AA854();
      *(void *)(v53 + 64) = sub_1000F8AEC((unint64_t *)&qword_100261A40, (void (*)(uint64_t))sub_1000AA854);
      *(void *)(v53 + 32) = a1;
      id v54 = a1;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_1000F8A98();
      swift_allocError();
      *char v55 = 4;
      swift_willThrow();
      swift_unknownObjectRelease();

      char v40 = v52;
      goto LABEL_13;
    }
    Swift::String v59 = v246;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v246, v18, v50);
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(&v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier], v59, v50);
    Swift::String v60 = &v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
    *(void *)Swift::String v60 = v221;
    *((void *)v60 + 1) = v46;
    NSString v61 = String._bridgeToObjectiveC()();
    id v62 = v251;
    id v63 = [v251 objectForKeyedSubscript:v61];

    id v221 = v47;
    if (v63 && (uint64_t v255 = v63, swift_dynamicCast()))
    {
      char v64 = (char)v257;
    }
    else
    {
      if (qword_1002618B0 != -1) {
        swift_once();
      }
      char v64 = byte_100262880;
    }
    v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] = v64;
    NSString v65 = String._bridgeToObjectiveC()();
    id v66 = [v62 objectForKeyedSubscript:v65];

    uint64_t v67 = v223;
    if (v66 && (uint64_t v255 = v66, swift_dynamicCast()))
    {
      char v68 = (char)v257;
    }
    else
    {
      if (qword_1002618B8 != -1) {
        swift_once();
      }
      char v68 = byte_100262881;
    }
    v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] = v68;
    NSString v69 = String._bridgeToObjectiveC()();
    id v70 = [v62 objectForKeyedSubscript:v69];

    if (v70 && (uint64_t v255 = v70, swift_dynamicCast()))
    {
      char v71 = (char)v257;
    }
    else
    {
      if (qword_1002618C0 != -1) {
        swift_once();
      }
      char v71 = byte_100262882;
    }
    v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] = v71;
    NSString v72 = String._bridgeToObjectiveC()();
    id v73 = [v62 objectForKeyedSubscript:v72];

    if (v73 && (uint64_t v255 = v73, swift_dynamicCast()))
    {
      char v74 = (char)v257;
    }
    else
    {
      if (qword_1002618C8 != -1) {
        swift_once();
      }
      char v74 = byte_100262883;
    }
    v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] = v74;
    NSString v75 = String._bridgeToObjectiveC()();
    id v76 = [v62 objectForKeyedSubscript:v75];

    if (v76 && (uint64_t v255 = v76, swift_dynamicCast()))
    {
      char v77 = (char)v257;
    }
    else
    {
      if (qword_1002618D0 != -1) {
        swift_once();
      }
      char v77 = byte_100262884;
    }
    v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] = v77;
    NSString v78 = String._bridgeToObjectiveC()();
    id v79 = [v62 objectForKeyedSubscript:v78];

    if (v79 && (uint64_t v255 = v79, swift_dynamicCast()))
    {
      char v80 = (char)v257;
    }
    else
    {
      if (qword_1002618D8 != -1) {
        swift_once();
      }
      char v80 = byte_100262885;
    }
    v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] = v80;
    NSString v81 = String._bridgeToObjectiveC()();
    id v82 = [v62 objectForKeyedSubscript:v81];

    if (v82)
    {
      uint64_t v255 = v82;
      int v83 = swift_dynamicCast();
      int v84 = (int)v257;
      if (!v83) {
        int v84 = 0;
      }
      char v85 = v83 ^ 1;
    }
    else
    {
      int v84 = 0;
      char v85 = 1;
    }
    *(_DWORD *)Swift::String v22 = v84;
    unsigned char v22[4] = v85;
    NSString v86 = String._bridgeToObjectiveC()();
    id v87 = [v62 objectForKeyedSubscript:v86];

    if (v87)
    {
      uint64_t v255 = v87;
      int v88 = swift_dynamicCast();
      int v89 = (int)v257;
      if (!v88) {
        int v89 = 0;
      }
      char v90 = v88 ^ 1;
      uint64_t v91 = v244;
    }
    else
    {
      int v89 = 0;
      char v90 = 1;
      uint64_t v91 = v244;
    }
    Swift::String v92 = v225;
    *(_DWORD *)uint64_t v225 = v89;
    v92[4] = v90;
    NSString v93 = String._bridgeToObjectiveC()();
    id v94 = [v62 objectForKeyedSubscript:v93];

    if (v94)
    {
      uint64_t v255 = v94;
      int v95 = swift_dynamicCast();
      int v96 = (int)v257;
      if (!v95) {
        int v96 = 0;
      }
      char v97 = v95 ^ 1;
    }
    else
    {
      int v96 = 0;
      char v97 = 1;
    }
    uint64_t v98 = v226;
    *(_DWORD *)id v226 = v96;
    v98[4] = v97;
    NSString v99 = String._bridgeToObjectiveC()();
    id v100 = [v62 objectForKeyedSubscript:v99];

    if (v100)
    {
      uint64_t v255 = v100;
      int v101 = swift_dynamicCast();
      int v102 = (int)v257;
      if (!v101) {
        int v102 = 0;
      }
      char v103 = v101 ^ 1;
    }
    else
    {
      int v102 = 0;
      char v103 = 1;
    }
    Class v104 = v227;
    *(_DWORD *)uint64_t v227 = v102;
    v104[4] = v103;
    NSString v105 = String._bridgeToObjectiveC()();
    id v106 = [v62 objectForKeyedSubscript:v105];

    if (v106)
    {
      uint64_t v255 = v106;
      int v107 = swift_dynamicCast();
      int v108 = (int)v257;
      if (!v107) {
        int v108 = 0;
      }
      char v109 = v107 ^ 1;
    }
    else
    {
      int v108 = 0;
      char v109 = 1;
    }
    uint64_t v110 = v228;
    *(_DWORD *)uint64_t v228 = v108;
    v110[4] = v109;
    NSString v111 = String._bridgeToObjectiveC()();
    id v112 = [v62 objectForKeyedSubscript:v111];

    if (v112)
    {
      uint64_t v255 = v112;
      int v113 = swift_dynamicCast();
      int v114 = (int)v257;
      if (!v113) {
        int v114 = 0;
      }
      char v115 = v113 ^ 1;
    }
    else
    {
      int v114 = 0;
      char v115 = 1;
    }
    Class v116 = v229;
    *(_DWORD *)unint64_t v229 = v114;
    v116[4] = v115;
    NSString v117 = String._bridgeToObjectiveC()();
    id v118 = [v62 objectForKeyedSubscript:v117];

    if (v118)
    {
      uint64_t v255 = v118;
      int v119 = swift_dynamicCast();
      int v120 = (int)v257;
      if (!v119) {
        int v120 = 0;
      }
      char v121 = v119 ^ 1;
    }
    else
    {
      int v120 = 0;
      char v121 = 1;
    }
    id v122 = v230;
    *(_DWORD *)unint64_t v230 = v120;
    v122[4] = v121;
    NSString v123 = String._bridgeToObjectiveC()();
    id v124 = [v62 objectForKeyedSubscript:v123];

    if (v124)
    {
      uint64_t v255 = v124;
      int v125 = swift_dynamicCast();
      int v126 = (int)v257;
      if (!v125) {
        int v126 = 0;
      }
      char v127 = v125 ^ 1;
    }
    else
    {
      int v126 = 0;
      char v127 = 1;
    }
    uint64_t v128 = v231;
    *(_DWORD *)uint64_t v231 = v126;
    v128[4] = v127;
    NSString v129 = String._bridgeToObjectiveC()();
    id v130 = [v62 objectForKeyedSubscript:v129];

    if (v130)
    {
      uint64_t v255 = v130;
      int v131 = swift_dynamicCast();
      int v132 = (int)v257;
      if (!v131) {
        int v132 = 0;
      }
      char v133 = v131 ^ 1;
    }
    else
    {
      int v132 = 0;
      char v133 = 1;
    }
    id v134 = v232;
    *(_DWORD *)uint64_t v232 = v132;
    v134[4] = v133;
    NSString v135 = String._bridgeToObjectiveC()();
    id v136 = [v62 objectForKeyedSubscript:v135];

    if (v136)
    {
      uint64_t v255 = v136;
      uint64_t v137 = (uint64_t)v233;
      uint64_t v138 = swift_dynamicCast() ^ 1;
      uint64_t v139 = (char *)v137;
    }
    else
    {
      uint64_t v137 = (uint64_t)v233;
      uint64_t v139 = v233;
      uint64_t v138 = 1;
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v249)(v139, v138, 1, v67);
    uint64_t v140 = (uint64_t)v252;
    swift_beginAccess();
    sub_1000F7A3C(v137, v140);
    swift_endAccess();
    NSString v141 = String._bridgeToObjectiveC()();
    id v142 = [v62 objectForKeyedSubscript:v141];

    if (v142)
    {
      uint64_t v255 = v142;
      uint64_t v143 = (uint64_t)v235;
      uint64_t v144 = swift_dynamicCast() ^ 1;
      uint64_t v145 = (char *)v143;
    }
    else
    {
      uint64_t v143 = (uint64_t)v235;
      uint64_t v145 = v235;
      uint64_t v144 = 1;
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v249)(v145, v144, 1, v67);
    uint64_t v146 = (uint64_t)v253;
    swift_beginAccess();
    sub_1000F7A3C(v143, v146);
    swift_endAccess();
    NSString v147 = String._bridgeToObjectiveC()();
    id v148 = [v62 objectForKeyedSubscript:v147];

    if (v148)
    {
      uint64_t v255 = v148;
      int v149 = swift_dynamicCast();
      int v150 = (int)v257;
      if (!v149) {
        int v150 = 0;
      }
      char v151 = v149 ^ 1;
    }
    else
    {
      int v150 = 0;
      char v151 = 1;
    }
    id v152 = v234;
    *(_DWORD *)char v234 = v150;
    v152[4] = v151;
    NSString v153 = String._bridgeToObjectiveC()();
    id v154 = [v62 objectForKeyedSubscript:v153];

    if (v154)
    {
      uint64_t v255 = v154;
      int v155 = swift_dynamicCast();
      int v156 = (int)v257;
      if (!v155) {
        int v156 = 0;
      }
      char v157 = v155 ^ 1;
    }
    else
    {
      int v156 = 0;
      char v157 = 1;
    }
    uint64_t v158 = v236;
    *(_DWORD *)uint64_t v236 = v156;
    v158[4] = v157;
    NSString v159 = String._bridgeToObjectiveC()();
    id v160 = [v62 objectForKeyedSubscript:v159];

    if (v160)
    {
      uint64_t v255 = v160;
      int v161 = swift_dynamicCast();
      int v162 = (int)v257;
      if (!v161) {
        int v162 = 0;
      }
      char v163 = v161 ^ 1;
    }
    else
    {
      int v162 = 0;
      char v163 = 1;
    }
    char v164 = v237;
    *(_DWORD *)uint64_t v237 = v162;
    v164[4] = v163;
    NSString v165 = String._bridgeToObjectiveC()();
    id v166 = [v62 objectForKeyedSubscript:v165];

    if (v166)
    {
      uint64_t v255 = v166;
      int v167 = swift_dynamicCast();
      int v168 = (int)v257;
      if (!v167) {
        int v168 = 0;
      }
      char v169 = v167 ^ 1;
    }
    else
    {
      int v168 = 0;
      char v169 = 1;
    }
    uint64_t v170 = v238;
    *(_DWORD *)id v238 = v168;
    v170[4] = v169;
    NSString v171 = String._bridgeToObjectiveC()();
    id v172 = [v62 objectForKeyedSubscript:v171];

    if (v172)
    {
      uint64_t v255 = v172;
      int v173 = swift_dynamicCast();
      int v174 = (int)v257;
      if (!v173) {
        int v174 = 0;
      }
      char v175 = v173 ^ 1;
    }
    else
    {
      int v174 = 0;
      char v175 = 1;
    }
    unint64_t v176 = v239;
    *(_DWORD *)id v239 = v174;
    v176[4] = v175;
    NSString v177 = String._bridgeToObjectiveC()();
    id v178 = [v62 objectForKeyedSubscript:v177];

    if (v178)
    {
      uint64_t v255 = v178;
      int v179 = swift_dynamicCast();
      int v180 = (int)v257;
      if (!v179) {
        int v180 = 0;
      }
      char v181 = v179 ^ 1;
    }
    else
    {
      int v180 = 0;
      char v181 = 1;
    }
    id v182 = v240;
    *(_DWORD *)id v240 = v180;
    v182[4] = v181;
    NSString v183 = String._bridgeToObjectiveC()();
    id v184 = [v62 objectForKeyedSubscript:v183];

    if (v184)
    {
      uint64_t v255 = v184;
      int v185 = swift_dynamicCast();
      int v186 = (int)v257;
      if (!v185) {
        int v186 = 0;
      }
      char v187 = v185 ^ 1;
    }
    else
    {
      int v186 = 0;
      char v187 = 1;
    }
    unint64_t v188 = v241;
    *(_DWORD *)uint64_t v241 = v186;
    v188[4] = v187;
    NSString v189 = String._bridgeToObjectiveC()();
    id v190 = [v62 objectForKeyedSubscript:v189];

    if (v190)
    {
      uint64_t v255 = v190;
      int v191 = swift_dynamicCast();
      int v192 = (int)v257;
      if (!v191) {
        int v192 = 0;
      }
      char v193 = v191 ^ 1;
    }
    else
    {
      int v192 = 0;
      char v193 = 1;
    }
    unint64_t v194 = v220;
    *(_DWORD *)id v220 = v192;
    v194[4] = v193;
    id v195 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    id v196 = v221;
    [v221 encodeSystemFieldsWithCoder:v195];
    [v195 finishEncoding];
    id v197 = [v195 encodedData];
    uint64_t v198 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v200 = v199;

    id v201 = v40;
    uint64_t v202 = (uint64_t *)&v40[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    uint64_t *v202 = v198;
    v202[1] = v200;
    id v203 = [v196 modificationDate];
    if (v203)
    {
      unint64_t v204 = v203;
      unint64_t v205 = v245;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v206 = v91;
      uint64_t v207 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
      uint64_t v208 = (uint64_t)v242;
      id v209 = v205;
      uint64_t v210 = v223;
      v207(v242, v209, v223);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v249)(v208, 0, 1, v210);
      int v211 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v208, 1, v210);
      unint64_t v212 = v243;
      if (v211 != 1)
      {
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v247 + 8))(v246, v248);
        v207(v212, (char *)v208, v210);
LABEL_152:
        v207(&v201[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], v212, v210);

        uint64_t v218 = (objc_class *)type metadata accessor for HMDeviceCloudRecord();
        v254.receiver = v201;
        v254.super_class = v218;
        Swift::String v57 = (uint64_t *)[v254 init];

        return v57;
      }
    }
    else
    {
      uint64_t v208 = (uint64_t)v242;
      uint64_t v210 = v223;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v249)(v242, 1, 1, v223);
      unint64_t v212 = v243;
      uint64_t v206 = v91;
    }
    id v213 = [v221 creationDate];
    if (v213)
    {
      uint64_t v214 = v213;
      uint64_t v215 = v245;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v216 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
      uint64_t v217 = (uint64_t)v224;
      v216(v224, v215, v210);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v249)(v217, 0, 1, v210);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v206 + 48))(v217, 1, v210) != 1)
      {
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v247 + 8))(v246, v248);
        v216(v212, (char *)v217, v210);
LABEL_151:
        sub_1000AA894(v208, &qword_100261D90);
        uint64_t v207 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
        goto LABEL_152;
      }
    }
    else
    {
      uint64_t v217 = (uint64_t)v224;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v249)(v224, 1, 1, v210);
    }
    static Date.now.getter();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v247 + 8))(v246, v248);
    sub_1000AA894(v217, &qword_100261D90);
    goto LABEL_151;
  }
  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v42) {
    goto LABEL_5;
  }
  sub_1000F8A98();
  swift_allocError();
  *Swift::String v56 = 0;
  swift_willThrow();

LABEL_13:
  Swift::String v57 = &qword_100261D90;
  sub_1000AA894((uint64_t)v252, &qword_100261D90);
  sub_1000AA894((uint64_t)v253, &qword_100261D90);

  type metadata accessor for HMDeviceCloudRecord();
  swift_deallocPartialClassInstance();
  return v57;
}

char *sub_1000F11C4(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v5 - 8);
  id v195 = (char *)&v172 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v176 = (char *)&v172 - v8;
  __chkstk_darwin(v9);
  unint64_t v194 = (char *)&v172 - v10;
  uint64_t v11 = type metadata accessor for Date();
  __chkstk_darwin(v11);
  char v175 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v199 = (char *)&v172 - v14;
  __n128 v16 = __chkstk_darwin(v15);
  int v174 = (char *)&v172 - v17;
  uint64_t v18 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  *uint64_t v18 = 0;
  NSString v177 = v18;
  *((unsigned char *)v18 + 4) = 1;
  uint64_t v19 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  *uint64_t v19 = 0;
  id v178 = v19;
  *((unsigned char *)v19 + 4) = 1;
  __n128 v20 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  *__n128 v20 = 0;
  int v179 = v20;
  *((unsigned char *)v20 + 4) = 1;
  uint64_t v21 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  *uint64_t v21 = 0;
  int v180 = v21;
  *((unsigned char *)v21 + 4) = 1;
  Swift::String v22 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  *Swift::String v22 = 0;
  char v181 = v22;
  *((unsigned char *)v22 + 4) = 1;
  Swift::String v23 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  *Swift::String v23 = 0;
  id v182 = v23;
  *((unsigned char *)v23 + 4) = 1;
  uint64_t v24 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  *uint64_t v24 = 0;
  NSString v183 = v24;
  *((unsigned char *)v24 + 4) = 1;
  uint64_t v25 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  *uint64_t v25 = 0;
  id v184 = v25;
  *((unsigned char *)v25 + 4) = 1;
  Swift::String v26 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  *Swift::String v26 = 0;
  int v185 = v26;
  *((unsigned char *)v26 + 4) = 1;
  uint64_t v200 = v27;
  id v201 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  uint64_t v28 = v27 + 56;
  Swift::String v29 = *(void (**)(__n128))(v27 + 56);
  v29(v16);
  uint64_t v202 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  uint64_t v198 = v28;
  id v196 = v29;
  ((void (*)(void))v29)();
  Swift::String v30 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  *Swift::String v30 = 0;
  int v186 = v30;
  *((unsigned char *)v30 + 4) = 1;
  Swift::String v31 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  *Swift::String v31 = 0;
  char v187 = v31;
  *((unsigned char *)v31 + 4) = 1;
  Swift::String v32 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  unsigned int *v32 = 0;
  unint64_t v188 = v32;
  *((unsigned char *)v32 + 4) = 1;
  Swift::String v33 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  *Swift::String v33 = 0;
  NSString v189 = v33;
  *((unsigned char *)v33 + 4) = 1;
  Swift::String v34 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  *Swift::String v34 = 0;
  id v190 = v34;
  *((unsigned char *)v34 + 4) = 1;
  Swift::String v35 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  *Swift::String v35 = 0;
  int v191 = v35;
  *((unsigned char *)v35 + 4) = 1;
  Swift::String v36 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  *Swift::String v36 = 0;
  int v192 = v36;
  *((unsigned char *)v36 + 4) = 1;
  Swift::String v37 = (unsigned int *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  *Swift::String v37 = 0;
  char v193 = v37;
  *((unsigned char *)v37 + 4) = 1;
  Swift::String v38 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
  *(_OWORD *)&v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata] = xmmword_1001D1A50;
  Swift::String v39 = &v2[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier];
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v203 = *(void *)(v40 - 8);
  uint64_t v204 = v40;
  (*(void (**)(char *, uint64_t))(v203 + 16))(v39, a1);
  uint64_t v206 = v2;
  id v41 = [a2 bluetoothAddress];
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v44 = v43;

  swift_bridgeObjectRelease();
  uint64_t v45 = HIBYTE(v44) & 0xF;
  uint64_t v46 = v42 & 0xFFFFFFFFFFFFLL;
  Swift::String v47 = a2;
  if ((v44 & 0x2000000000000000) == 0) {
    uint64_t v45 = v46;
  }
  if (!v45) {
    goto LABEL_8;
  }
  uint64_t v197 = v11;
  id v48 = a2;
  id v49 = [a2 bluetoothAddress];
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  if (v50 == 0xD000000000000011 && v52 == 0x80000001001F75A0)
  {
    swift_bridgeObjectRelease();
    Swift::String v47 = a2;
LABEL_8:
    sub_1000F8A98();
    swift_allocError();
    *id v54 = 3;
    swift_willThrow();

    uint64_t v55 = v204;
    Swift::String v56 = *(void (**)(uint64_t, uint64_t))(v203 + 8);
    v56(a1, v204);
    sub_1000AA8F0(*(void *)v38, *((void *)v38 + 1));
    v56((uint64_t)v39, v55);
    sub_1000AA894((uint64_t)v201, &qword_100261D90);
    sub_1000AA894((uint64_t)v202, &qword_100261D90);
    Swift::String v57 = v206;

    type metadata accessor for HMDeviceCloudRecord();
    swift_deallocPartialClassInstance();
    return v57;
  }
  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  Swift::String v47 = a2;
  if (v53) {
    goto LABEL_8;
  }
  unsigned __int8 v59 = [a2 haRegionStatus];
  Swift::String v60 = v206;
  v206[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] = v59;
  unsigned __int8 v61 = [a2 hpRegionStatus];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] = v61;
  unsigned __int8 v62 = [a2 mediaAssistEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] = v62;
  unsigned __int8 v63 = [a2 pmeMediaEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] = v63;
  unsigned __int8 v64 = [a2 pmeVoiceEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] = v64;
  unsigned __int8 v65 = [a2 swipeGainEnabled];
  v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] = v65;
  id v66 = [a2 bluetoothAddress];
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v68;

  id v70 = (uint64_t *)&v60[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
  uint64_t *v70 = v67;
  v70[1] = v69;
  id v71 = [a2 bottomMicFaultCountLeft];
  if (v71)
  {
    NSString v72 = v71;
    unsigned int v73 = [v71 unsignedIntValue];

    char v74 = v177;
    unsigned int *v177 = v73;
    *((unsigned char *)v74 + 4) = 0;
  }
  id v75 = [a2 bottomMicFaultCountRight];
  id v76 = v196;
  if (v75)
  {
    char v77 = v75;
    unsigned int v78 = [v75 unsignedIntValue];

    id v79 = v178;
    unsigned int *v178 = v78;
    *((unsigned char *)v79 + 4) = 0;
  }
  id v80 = [v48 diagnosticMeasurementsCount];
  if (v80)
  {
    NSString v81 = v80;
    unsigned int v82 = [v80 unsignedIntValue];

    int v83 = v179;
    *int v179 = v82;
    *((unsigned char *)v83 + 4) = 0;
  }
  id v84 = [v48 freqAccuracyFaultCountLeft];
  if (v84)
  {
    char v85 = v84;
    unsigned int v86 = [v84 unsignedIntValue];

    id v87 = v180;
    *int v180 = v86;
    *((unsigned char *)v87 + 4) = 0;
  }
  id v88 = [v48 freqAccuracyFaultCountRight];
  if (v88)
  {
    int v89 = v88;
    unsigned int v90 = [v88 unsignedIntValue];

    uint64_t v91 = v181;
    *char v181 = v90;
    *((unsigned char *)v91 + 4) = 0;
  }
  id v92 = [v48 frontVentFaultCountLeft];
  if (v92)
  {
    NSString v93 = v92;
    unsigned int v94 = [v92 unsignedIntValue];

    int v95 = v182;
    *id v182 = v94;
    *((unsigned char *)v95 + 4) = 0;
  }
  id v96 = [v48 frontVentFaultCountRight];
  if (v96)
  {
    char v97 = v96;
    unsigned int v98 = [v96 unsignedIntValue];

    NSString v99 = v183;
    unsigned int *v183 = v98;
    *((unsigned char *)v99 + 4) = 0;
  }
  id v100 = [v48 innerMicFaultCountLeft];
  if (v100)
  {
    int v101 = v100;
    unsigned int v102 = [v100 unsignedIntValue];

    char v103 = v184;
    *id v184 = v102;
    *((unsigned char *)v103 + 4) = 0;
  }
  id v104 = [v48 innerMicFaultCountRight];
  if (v104)
  {
    NSString v105 = v104;
    unsigned int v106 = [v104 unsignedIntValue];

    int v107 = v185;
    unsigned int *v185 = v106;
    *((unsigned char *)v107 + 4) = 0;
  }
  id v108 = [v48 latestDiagnosticTimestampLeft];
  uint64_t v173 = a1;
  if (v108)
  {
    char v109 = v108;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v110 = v200;
    NSString v111 = *(void (**)(void))(v200 + 32);
    uint64_t v112 = (uint64_t)v194;
    uint64_t v113 = v197;
    v111();
    int v114 = v76;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v76)(v112, 0, 1, v113);
    uint64_t v115 = v113;
    Swift::String v47 = v48;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v112, 1, v115) != 1)
    {
      Class v116 = v174;
      uint64_t v117 = v112;
      uint64_t v118 = v197;
      ((void (*)(char *, uint64_t, uint64_t))v111)(v174, v117, v197);
      int v119 = v176;
      ((void (*)(char *, char *, uint64_t))v111)(v176, v116, v118);
      int v120 = v76;
      ((void (*)(char *, void, uint64_t, uint64_t))v76)(v119, 0, 1, v118);
      uint64_t v121 = (uint64_t)v201;
      swift_beginAccess();
      uint64_t v122 = (uint64_t)v119;
      Swift::String v47 = v48;
      uint64_t v123 = (uint64_t)v195;
      sub_1000F7A3C(v122, v121);
      swift_endAccess();
      uint64_t v124 = v173;
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v112 = (uint64_t)v194;
    int v114 = v76;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v76)(v194, 1, 1, v197);
  }
  sub_1000AA894(v112, &qword_100261D90);
  int v120 = v114;
  uint64_t v124 = v173;
  uint64_t v123 = (uint64_t)v195;
LABEL_33:
  id v125 = [v47 latestDiagnosticTimestampRight];
  if (!v125)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v120)(v123, 1, 1, v197);
    goto LABEL_37;
  }
  int v126 = v125;
  char v127 = v199;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v128 = v200;
  NSString v129 = *(void (**)(uint64_t, char *, uint64_t))(v200 + 32);
  id v130 = v127;
  uint64_t v131 = v197;
  v129(v123, v130, v197);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v120)(v123, 0, 1, v131);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v123, 1, v131) == 1)
  {
LABEL_37:
    sub_1000AA894(v123, &qword_100261D90);
    goto LABEL_38;
  }
  int v132 = v120;
  uint64_t v133 = v197;
  id v134 = v175;
  v129((uint64_t)v175, (char *)v123, v197);
  uint64_t v135 = (uint64_t)v176;
  v129((uint64_t)v176, v134, v133);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v132)(v135, 0, 1, v133);
  uint64_t v136 = (uint64_t)v202;
  swift_beginAccess();
  sub_1000F7A3C(v135, v136);
  swift_endAccess();
LABEL_38:
  id v137 = [v48 rearVentFaultCountLeft];
  if (v137)
  {
    uint64_t v138 = v137;
    unsigned int v139 = [v137 unsignedIntValue];

    uint64_t v140 = v186;
    unsigned int *v186 = v139;
    *((unsigned char *)v140 + 4) = 0;
  }
  id v141 = [v48 rearVentFaultCountRight];
  if (v141)
  {
    id v142 = v141;
    unsigned int v143 = [v141 unsignedIntValue];

    uint64_t v144 = v187;
    *char v187 = v143;
    *((unsigned char *)v144 + 4) = 0;
  }
  id v145 = [v48 speakerFaultCountLeft];
  if (v145)
  {
    uint64_t v146 = v145;
    unsigned int v147 = [v145 unsignedIntValue];

    id v148 = v188;
    *unint64_t v188 = v147;
    *((unsigned char *)v148 + 4) = 0;
  }
  id v149 = [v48 speakerFaultCountRight];
  if (v149)
  {
    int v150 = v149;
    unsigned int v151 = [v149 unsignedIntValue];

    id v152 = v189;
    unsigned int *v189 = v151;
    *((unsigned char *)v152 + 4) = 0;
  }
  id v153 = [v48 topMicFaultCountLeft];
  if (v153)
  {
    id v154 = v153;
    unsigned int v155 = [v153 unsignedIntValue];

    int v156 = v190;
    unsigned int *v190 = v155;
    *((unsigned char *)v156 + 4) = 0;
  }
  id v157 = [v48 topMicFaultCountRight];
  if (v157)
  {
    uint64_t v158 = v157;
    unsigned int v159 = [v157 unsignedIntValue];

    id v160 = v191;
    *int v191 = v159;
    *((unsigned char *)v160 + 4) = 0;
  }
  id v161 = [v48 totalHarmonicDistortionFaultCountLeft];
  if (v161)
  {
    int v162 = v161;
    unsigned int v163 = [v161 unsignedIntValue];

    char v164 = v192;
    *int v192 = v163;
    *((unsigned char *)v164 + 4) = 0;
  }
  id v165 = [v48 totalHarmonicDistortionFaultCountRight];
  if (v165)
  {
    id v166 = v165;
    unsigned int v167 = [v165 unsignedIntValue];

    int v168 = v193;
    *char v193 = v167;
    *((unsigned char *)v168 + 4) = 0;
  }
  char v169 = v199;
  static Date.now.getter();
  uint64_t v170 = v206;
  (*(void (**)(char *, char *, uint64_t))(v200 + 32))(&v206[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], v169, v197);

  NSString v171 = (objc_class *)type metadata accessor for HMDeviceCloudRecord();
  v205.receiver = v170;
  v205.super_class = v171;
  Swift::String v57 = (char *)[super init];

  (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v124, v204);
  return v57;
}

char *HMDeviceCloudRecord.__allocating_init(from:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return HMDeviceCloudRecord.init(from:)(a1);
}

char *HMDeviceCloudRecord.init(from:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v136 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v131 = (char *)&v114 - v7;
  uint64_t v8 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v8 - 8);
  uint64_t v132 = (uint64_t)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v133 = (uint64_t)&v114 - v11;
  __chkstk_darwin(v12);
  uint64_t v134 = (uint64_t)&v114 - v13;
  __chkstk_darwin(v14);
  uint64_t v126 = (uint64_t)&v114 - v15;
  __chkstk_darwin(v16);
  uint64_t v121 = (uint64_t)&v114 - v17;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  unsigned int v143 = (uint64_t *)v18;
  uint64_t v144 = v19;
  __chkstk_darwin(v18);
  uint64_t v146 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = sub_1000AA024(&qword_1002628B0);
  uint64_t v145 = *(void *)(v147 - 8);
  __n128 v21 = __chkstk_darwin(v147);
  unsigned int v151 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v23 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
  *(_DWORD *)Swift::String v23 = 0;
  id v142 = v23;
  void v23[4] = 1;
  uint64_t v24 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
  *(_DWORD *)uint64_t v24 = 0;
  id v141 = v24;
  v24[4] = 1;
  uint64_t v25 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
  *(_DWORD *)uint64_t v25 = 0;
  uint64_t v140 = v25;
  void v25[4] = 1;
  Swift::String v26 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
  *(_DWORD *)Swift::String v26 = 0;
  unsigned int v139 = v26;
  void v26[4] = 1;
  uint64_t v27 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
  *(_DWORD *)uint64_t v27 = 0;
  uint64_t v138 = v27;
  v27[4] = 1;
  uint64_t v28 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
  *(_DWORD *)uint64_t v28 = 0;
  id v137 = v28;
  v28[4] = 1;
  Swift::String v29 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
  *(_DWORD *)Swift::String v29 = 0;
  uint64_t v117 = v29;
  v29[4] = 1;
  Swift::String v30 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
  *(_DWORD *)Swift::String v30 = 0;
  uint64_t v118 = v30;
  v30[4] = 1;
  Swift::String v31 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
  *(_DWORD *)Swift::String v31 = 0;
  int v119 = v31;
  v31[4] = 1;
  uint64_t v135 = v4;
  Swift::String v33 = *(void (**)(__n128))(v4 + 56);
  uint64_t v32 = v4 + 56;
  int v120 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
  v33(v21);
  uint64_t v122 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
  uint64_t v129 = v3;
  id v130 = v33;
  ((void (*)(void))v33)();
  Swift::String v34 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
  *(_DWORD *)Swift::String v34 = 0;
  uint64_t v123 = v34;
  v34[4] = 1;
  Swift::String v35 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
  *(_DWORD *)Swift::String v35 = 0;
  uint64_t v124 = v35;
  v35[4] = 1;
  Swift::String v36 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
  *(_DWORD *)Swift::String v36 = 0;
  id v125 = v36;
  void v36[4] = 1;
  Swift::String v37 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
  *(_DWORD *)Swift::String v37 = 0;
  char v127 = v37;
  v37[4] = 1;
  Swift::String v38 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
  *(_DWORD *)Swift::String v38 = 0;
  uint64_t v128 = v38;
  v38[4] = 1;
  Swift::String v39 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
  *(_DWORD *)Swift::String v39 = 0;
  void v39[4] = 1;
  uint64_t v40 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
  *(_DWORD *)uint64_t v40 = 0;
  void v40[4] = 1;
  id v41 = &v1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
  *(_DWORD *)id v41 = 0;
  v41[4] = 1;
  uint64_t v42 = (char *)a1[3];
  id v148 = (char *)a1[4];
  int v150 = a1;
  sub_1000ABF58(a1, (uint64_t)v42);
  sub_1000F799C();
  unint64_t v43 = v1;
  uint64_t v44 = v149;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v44)
  {
    uint64_t v45 = v146;
    uint64_t v115 = v39;
    Class v116 = v40;
    id v148 = v41;
    uint64_t v149 = v32;
    uint64_t v46 = v145;
    char v154 = 0;
    sub_1000AC040();
    Swift::String v47 = v151;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata] = v153;
    LOBYTE(v153) = 1;
    sub_1000F8AEC((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
    id v49 = v143;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t *))(v144 + 32))(&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier], v45, v49);
    LOBYTE(v153) = 2;
    uint64_t v146 = 0;
    uint64_t v50 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v51 = (uint64_t *)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress];
    *uint64_t v51 = v50;
    v51[1] = v52;
    LOBYTE(v153) = 3;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v153) = 4;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v153) = 5;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v153) = 6;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v153) = 7;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v153) = 8;
    v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v153) = 9;
    char v53 = v47;
    uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v55 = v142;
    *(_DWORD *)id v142 = v54;
    v55[4] = BYTE4(v54) & 1;
    LOBYTE(v153) = 10;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    Swift::String v57 = v141;
    *(_DWORD *)id v141 = v56;
    v57[4] = BYTE4(v56) & 1;
    LOBYTE(v153) = 11;
    uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unsigned __int8 v59 = v140;
    *(_DWORD *)uint64_t v140 = v58;
    v59[4] = BYTE4(v58) & 1;
    LOBYTE(v153) = 12;
    uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unsigned __int8 v61 = v139;
    *(_DWORD *)unsigned int v139 = v60;
    v61[4] = BYTE4(v60) & 1;
    LOBYTE(v153) = 13;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unsigned __int8 v63 = v138;
    *(_DWORD *)uint64_t v138 = v62;
    v63[4] = BYTE4(v62) & 1;
    LOBYTE(v153) = 14;
    uint64_t v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unsigned __int8 v65 = v137;
    *(_DWORD *)id v137 = v64;
    v65[4] = BYTE4(v64) & 1;
    LOBYTE(v153) = 15;
    uint64_t v66 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v67 = v117;
    *(_DWORD *)uint64_t v117 = v66;
    v67[4] = BYTE4(v66) & 1;
    LOBYTE(v153) = 16;
    uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v69 = v118;
    *(_DWORD *)uint64_t v118 = v68;
    v69[4] = BYTE4(v68) & 1;
    LOBYTE(v153) = 17;
    uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v71 = v119;
    *(_DWORD *)int v119 = v70;
    v71[4] = BYTE4(v70) & 1;
    LOBYTE(v153) = 18;
    sub_1000F8AEC(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v72 = (uint64_t)v120;
    swift_beginAccess();
    sub_1000F7A3C(v121, v72);
    swift_endAccess();
    LOBYTE(v153) = 19;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v73 = (uint64_t)v122;
    swift_beginAccess();
    sub_1000F7A3C(v126, v73);
    swift_endAccess();
    LOBYTE(v153) = 20;
    uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v75 = v123;
    *(_DWORD *)uint64_t v123 = v74;
    v75[4] = BYTE4(v74) & 1;
    LOBYTE(v153) = 21;
    uint64_t v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v77 = v124;
    *(_DWORD *)uint64_t v124 = v76;
    v77[4] = BYTE4(v76) & 1;
    LOBYTE(v153) = 22;
    uint64_t v78 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v79 = v125;
    *(_DWORD *)id v125 = v78;
    v79[4] = BYTE4(v78) & 1;
    LOBYTE(v153) = 23;
    uint64_t v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    NSString v81 = v127;
    *(_DWORD *)char v127 = v80;
    v81[4] = BYTE4(v80) & 1;
    LOBYTE(v153) = 24;
    uint64_t v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v83 = v128;
    *(_DWORD *)uint64_t v128 = v82;
    v83[4] = BYTE4(v82) & 1;
    LOBYTE(v153) = 25;
    uint64_t v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v85 = v115;
    *(_DWORD *)uint64_t v115 = v84;
    v85[4] = BYTE4(v84) & 1;
    LOBYTE(v153) = 26;
    uint64_t v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v87 = v116;
    *(_DWORD *)Class v116 = v86;
    v87[4] = BYTE4(v86) & 1;
    LOBYTE(v153) = 27;
    uint64_t v88 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    int v89 = v148;
    *(_DWORD *)id v148 = v88;
    v89[4] = BYTE4(v88) & 1;
    unsigned int v90 = v131;
    static Date.now.getter();
    uint64_t v91 = *(char **)(v135 + 32);
    id v148 = (char *)(v135 + 32);
    uint64_t v146 = v91;
    ((void (*)(char *, char *, uint64_t))v91)(&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate], v90, v129);

    id v92 = (objc_class *)type metadata accessor for HMDeviceCloudRecord();
    v152.receiver = v43;
    v152.super_class = v92;
    id v93 = [super init];
    LOBYTE(v153) = 28;
    uint64_t v42 = (char *)v93;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v144 = *(void *)(v135 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v144)(v134, 1, v129) != 1)
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v147);
      ((void (*)(char *, uint64_t, uint64_t))v146)(v136, v134, v129);
LABEL_23:
      uint64_t v113 = &v42[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate];
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v135 + 40))(v113, v136, v129);
      swift_endAccess();
      sub_1000ABFF0((uint64_t)v150);

      return v42;
    }
    uint64_t v95 = *(void *)&v42[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    unint64_t v96 = *(void *)&v42[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata + 8];
    unsigned int v143 = (uint64_t *)&v42[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata];
    sub_1000AA680(v95, v96);
    char v97 = (objc_class *)sub_100130420(v95, v96);
    sub_1000AA8F0(v95, v96);
    if (v97)
    {
      Class isa = v97;
    }
    else
    {
      NSString v99 = v42;
      Class isa = sub_1000B4D08((uint64_t)v99).super.isa;
    }
    *(void *)&long long v153 = isa;
    sub_1000F45CC((id *)&v153);
    id v100 = [(objc_class *)isa modificationDate];

    if (v100)
    {
      int v101 = v131;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v102 = v133;
      uint64_t v103 = v129;
      ((void (*)(uint64_t, char *, uint64_t))v146)(v133, v101, v129);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v130)(v102, 0, 1, v103);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v144)(v102, 1, v103) != 1)
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v147);
        ((void (*)(char *, uint64_t, uint64_t))v146)(v136, v133, v129);
LABEL_22:
        sub_1000AA894(v134, &qword_100261D90);
        goto LABEL_23;
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v130)(v133, 1, 1, v129);
    }
    uint64_t v105 = *v143;
    unint64_t v106 = v143[1];
    sub_1000AA680(*v143, v106);
    int v107 = sub_100130420(v105, v106);
    sub_1000AA8F0(v105, v106);
    if (!v107)
    {
      id v108 = v42;
      int v107 = sub_1000B4D08((uint64_t)v108).super.isa;
    }
    *(void *)&long long v153 = v107;
    sub_1000F45CC((id *)&v153);
    id v109 = [v107 creationDate];

    if (v109)
    {
      uint64_t v110 = v131;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v111 = v132;
      uint64_t v112 = v129;
      ((void (*)(uint64_t, char *, uint64_t))v146)(v132, v110, v129);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v130)(v111, 0, 1, v112);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v144)(v111, 1, v112) != 1)
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v147);
        ((void (*)(char *, uint64_t, uint64_t))v146)(v136, v132, v129);
LABEL_21:
        sub_1000AA894(v133, &qword_100261D90);
        goto LABEL_22;
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v130)(v132, 1, 1, v129);
    }
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v147);
    sub_1000AA894(v132, &qword_100261D90);
    goto LABEL_21;
  }

  sub_1000ABFF0((uint64_t)v150);
  sub_1000AA894((uint64_t)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft], &qword_100261D90);
  sub_1000AA894((uint64_t)&v43[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight], &qword_100261D90);
  type metadata accessor for HMDeviceCloudRecord();
  swift_deallocPartialClassInstance();
  return v42;
}

void HMDeviceCloudRecord.init()()
{
}

unint64_t sub_1000F34E0(char a1)
{
  unint64_t result = 0x74654D64756F6C63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6E6F696765526168;
      break;
    case 4:
      unint64_t result = 0x6E6F696765527068;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x616964654D656D70;
      break;
    case 7:
      unint64_t result = 0x6563696F56656D70;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
    case 14:
    case 17:
    case 21:
      unint64_t result = 0xD000000000000017;
      break;
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    case 11:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000018;
      break;
    case 16:
      unint64_t result = 0xD000000000000016;
      break;
    case 18:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 19:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 20:
      unint64_t result = 0xD000000000000016;
      break;
    case 22:
      unint64_t result = 0xD000000000000015;
      break;
    case 23:
      unint64_t result = 0xD000000000000016;
      break;
    case 24:
      unint64_t result = 0xD000000000000014;
      break;
    case 25:
      unint64_t result = 0xD000000000000015;
      break;
    case 26:
      unint64_t result = 0xD000000000000025;
      break;
    case 27:
      unint64_t result = 0xD000000000000026;
      break;
    case 28:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000F383C()
{
  return sub_1000F34E0(*v0);
}

uint64_t sub_1000F3844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000F7FE0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000F386C(unsigned char *a1@<X8>)
{
  *a1 = 29;
}

uint64_t sub_1000F3878(uint64_t a1)
{
  unint64_t v2 = sub_1000F799C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F38B4(uint64_t a1)
{
  unint64_t v2 = sub_1000F799C();

  return CodingKey.debugDescription.getter(a1, v2);
}

id HMDeviceCloudRecord.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HMDeviceCloudRecord();
  return [super dealloc];
}

uint64_t HMDeviceCloudRecord.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  uint64_t v41 = v5;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = sub_1000AA024((uint64_t *)&unk_1002628C8);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000ABF58(a1, a1[3]);
  sub_1000F799C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v47 = *(_OWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata);
  char v46 = 0;
  sub_1000AC094();
  uint64_t v44 = v13;
  uint64_t v17 = v43;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v17)
  {
    LOBYTE(v47) = 1;
    type metadata accessor for UUID();
    sub_1000F8AEC(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v47) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v47) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v47) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v47) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v47) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v47) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v47) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v19 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4);
    LOBYTE(v47) = 9;
    char v46 = v19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v20 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4);
    LOBYTE(v47) = 10;
    char v46 = v20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v21 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4);
    LOBYTE(v47) = 11;
    char v46 = v21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v22 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4);
    LOBYTE(v47) = 12;
    char v46 = v22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v23 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4);
    LOBYTE(v47) = 13;
    char v46 = v23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v24 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4);
    LOBYTE(v47) = 14;
    char v46 = v24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v25 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4);
    LOBYTE(v47) = 15;
    char v46 = v25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v26 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4);
    LOBYTE(v47) = 16;
    char v46 = v26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v27 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4);
    LOBYTE(v47) = 17;
    char v46 = v27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v28 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
    swift_beginAccess();
    sub_1000F7934(v28, (uint64_t)v12);
    char v46 = 18;
    sub_1000F8AEC(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000AA894((uint64_t)v12, &qword_100261D90);
    uint64_t v29 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
    swift_beginAccess();
    sub_1000F7934(v29, (uint64_t)v9);
    char v45 = 19;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_1000AA894((uint64_t)v9, &qword_100261D90);
    char v30 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4);
    char v45 = 20;
    char v48 = v30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v31 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4);
    char v45 = 21;
    char v48 = v31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v32 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4);
    char v45 = 22;
    char v48 = v32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v33 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4);
    char v45 = 23;
    char v48 = v33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v34 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4);
    char v45 = 24;
    char v48 = v34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v35 = *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4);
    char v45 = 25;
    char v48 = v35;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v36 = *(unsigned char *)(v2
                   + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                   + 4);
    char v45 = 26;
    char v48 = v36;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v37 = *(unsigned char *)(v2
                   + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                   + 4);
    char v45 = 27;
    char v48 = v37;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v38 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v38, v40);
    char v48 = 28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v44);
}

unint64_t sub_1000F44C0()
{
  return 0xD000000000000013;
}

uint64_t sub_1000F44DC()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_cloudMetadata;
  uint64_t v2 = *(void *)v1;
  sub_1000AA680(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000F4520@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000F45A8(id *a1)
{
  return sub_1000F45CC(a1);
}

uint64_t sub_1000F45CC(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v97 = v4;
  uint64_t v98 = v5;
  __chkstk_darwin(v4);
  id v87 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v96 = (const char *)sub_1000AA024(&qword_100262950);
  __chkstk_darwin(v96);
  uint64_t v94 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v91 = (uint64_t)&v84 - v9;
  uint64_t v10 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v10 - 8);
  uint64_t v90 = (uint64_t)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v86 = (uint64_t)&v84 - v13;
  __chkstk_darwin(v14);
  uint64_t v93 = (uint64_t)&v84 - v15;
  __chkstk_darwin(v16);
  uint64_t v89 = (uint64_t)&v84 - v17;
  __chkstk_darwin(v18);
  uint64_t v85 = (uint64_t)&v84 - v19;
  __chkstk_darwin(v20);
  uint64_t v92 = (uint64_t)&v84 - v21;
  static os_log_type_t.debug.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1001CFDB0;
  id v23 = *a1;
  id v24 = [v23 description];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_1000AA5E0();
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v27;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  [v23 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v99 = v2;
  unint64_t v29 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress);
  unint64_t v28 = *(void *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bluetoothAddress + 8);
  if (!*((void *)&v100 + 1)) {
    goto LABEL_7;
  }
  if (v100 != __PAIR128__(v28, v29))
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_8;
    }
LABEL_7:
    *((void *)&v101 + 1) = &type metadata for String;
    uint64_t v102 = &protocol witness table for String;
    *(void *)&long long v100 = v29;
    *((void *)&v100 + 1) = v28;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v31 = v99;
  int v32 = *(unsigned __int8 *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus);
  if ((BYTE1(v100) & 1) != 0 || v100 != v32)
  {
    *((void *)&v101 + 1) = &type metadata for UInt8;
    uint64_t v102 = &protocol witness table for UInt8;
    LOBYTE(v100) = v32;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  int v33 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus);
  if ((BYTE1(v100) & 1) != 0 || v100 != v33)
  {
    *((void *)&v101 + 1) = &type metadata for UInt8;
    uint64_t v102 = &protocol witness table for UInt8;
    LOBYTE(v100) = v33;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  int v34 = *(unsigned __int8 *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled);
  if ((BYTE1(v100) & 1) != 0 || v100 != v34)
  {
    *((void *)&v101 + 1) = &type metadata for Int8;
    uint64_t v102 = &protocol witness table for Int8;
    LOBYTE(v100) = v34;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v35 = v99;
  int v36 = *(unsigned __int8 *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled);
  if ((BYTE1(v100) & 1) != 0 || v100 != v36)
  {
    *((void *)&v101 + 1) = &type metadata for Int8;
    uint64_t v102 = &protocol witness table for Int8;
    LOBYTE(v100) = v36;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  int v37 = *(unsigned __int8 *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled);
  if ((BYTE1(v100) & 1) != 0 || v100 != v37)
  {
    *((void *)&v101 + 1) = &type metadata for Int8;
    uint64_t v102 = &protocol witness table for Int8;
    LOBYTE(v100) = v37;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  int v38 = *(unsigned __int8 *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled);
  if ((BYTE1(v100) & 1) != 0 || v100 != v38)
  {
    *((void *)&v101 + 1) = &type metadata for Int8;
    uint64_t v102 = &protocol witness table for Int8;
    LOBYTE(v100) = v38;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  int v39 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft);
  if ((BYTE4(v100) & 1) == 0)
  {
    uint64_t v40 = v91;
    if (*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_33:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_34;
    }
    if (v100 == v39) {
      goto LABEL_34;
    }
LABEL_32:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v39;
    goto LABEL_33;
  }
  uint64_t v40 = v91;
  if ((*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_32;
  }
LABEL_34:
  CKRecordKeyValueSetting.subscript.getter();
  int v41 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_41:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_42;
    }
    if (v100 == v41) {
      goto LABEL_42;
    }
LABEL_40:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v41;
    goto LABEL_41;
  }
  if ((*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) == 0) {
    goto LABEL_40;
  }
LABEL_42:
  CKRecordKeyValueSetting.subscript.getter();
  int v42 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_49:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_50;
    }
    if (v100 == v42) {
      goto LABEL_50;
    }
LABEL_48:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v42;
    goto LABEL_49;
  }
  if ((*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) == 0) {
    goto LABEL_48;
  }
LABEL_50:
  CKRecordKeyValueSetting.subscript.getter();
  int v43 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_57:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_58;
    }
    if (v100 == v43) {
      goto LABEL_58;
    }
LABEL_56:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v43;
    goto LABEL_57;
  }
  if ((*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_56;
  }
LABEL_58:
  CKRecordKeyValueSetting.subscript.getter();
  int v44 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_65:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_66;
    }
    if (v100 == v44) {
      goto LABEL_66;
    }
LABEL_64:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v44;
    goto LABEL_65;
  }
  if ((*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) == 0) {
    goto LABEL_64;
  }
LABEL_66:
  CKRecordKeyValueSetting.subscript.getter();
  int v45 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_73:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_74;
    }
    if (v100 == v45) {
      goto LABEL_74;
    }
LABEL_72:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v45;
    goto LABEL_73;
  }
  if ((*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_72;
  }
LABEL_74:
  CKRecordKeyValueSetting.subscript.getter();
  int v46 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_81:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_82;
    }
    if (v100 == v46) {
      goto LABEL_82;
    }
LABEL_80:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v46;
    goto LABEL_81;
  }
  if ((*(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) == 0) {
    goto LABEL_80;
  }
LABEL_82:
  unint64_t v95 = 0xD000000000000016;
  CKRecordKeyValueSetting.subscript.getter();
  int v47 = *(_DWORD *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft);
  char v48 = *(unsigned char *)(v35 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4);
  if ((BYTE4(v100) & 1) == 0)
  {
    uint64_t v49 = v94;
    uint64_t v50 = v92;
    if (v48)
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_89:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_90;
    }
    if (v100 == v47) {
      goto LABEL_90;
    }
LABEL_88:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v47;
    goto LABEL_89;
  }
  uint64_t v49 = v94;
  uint64_t v50 = v92;
  if ((v48 & 1) == 0) {
    goto LABEL_88;
  }
LABEL_90:
  CKRecordKeyValueSetting.subscript.getter();
  int v51 = *(_DWORD *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_97:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_98;
    }
    if (v100 == v51) {
      goto LABEL_98;
    }
LABEL_96:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v51;
    goto LABEL_97;
  }
  if ((*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) == 0) {
    goto LABEL_96;
  }
LABEL_98:
  uint64_t v88 = "innerMicFaultCountRight";
  uint64_t v52 = v97;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v53 = v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
  swift_beginAccess();
  uint64_t v54 = v40 + *((int *)v96 + 12);
  sub_1000F7934(v50, v40);
  sub_1000F7934(v53, v54);
  uint64_t v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  if (v55(v40, 1, v52) == 1)
  {
    sub_1000AA894(v50, &qword_100261D90);
    if (v55(v54, 1, v52) == 1)
    {
      sub_1000AA894(v40, &qword_100261D90);
      goto LABEL_109;
    }
  }
  else
  {
    uint64_t v56 = v85;
    sub_1000F7934(v40, v85);
    if (v55(v54, 1, v52) != 1)
    {
      uint64_t v57 = v98;
      uint64_t v58 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v87, v54, v52);
      sub_1000F8AEC((unint64_t *)&unk_100263460, (void (*)(uint64_t))&type metadata accessor for Date);
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v57 + 8);
      v60(v58, v97);
      sub_1000AA894(v92, &qword_100261D90);
      v60((char *)v56, v97);
      uint64_t v49 = v94;
      uint64_t v52 = v97;
      sub_1000AA894(v91, &qword_100261D90);
      if (v59) {
        goto LABEL_109;
      }
      goto LABEL_105;
    }
    sub_1000AA894(v92, &qword_100261D90);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v56, v52);
  }
  sub_1000AA894(v40, &qword_100262950);
LABEL_105:
  uint64_t v61 = v89;
  sub_1000F7934(v53, v89);
  if (v55(v61, 1, v52) == 1)
  {
    sub_1000AA894(v61, &qword_100261D90);
    long long v100 = 0u;
    long long v101 = 0u;
    uint64_t v102 = 0;
  }
  else
  {
    *((void *)&v101 + 1) = v52;
    uint64_t v102 = &protocol witness table for Date;
    uint64_t v62 = sub_1000F8B34((uint64_t *)&v100);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v98 + 32))(v62, v61, v52);
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_109:
  uint64_t v63 = v93;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v64 = v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
  swift_beginAccess();
  uint64_t v65 = v49 + *((int *)v96 + 12);
  sub_1000F7934(v63, v49);
  sub_1000F7934(v64, v65);
  if (v55(v49, 1, v52) == 1)
  {
    sub_1000AA894(v63, &qword_100261D90);
    if (v55(v65, 1, v52) == 1)
    {
      sub_1000AA894(v49, &qword_100261D90);
      goto LABEL_120;
    }
  }
  else
  {
    unint64_t v96 = "latestDiagnosticTimestampLeft";
    uint64_t v66 = v86;
    sub_1000F7934(v49, v86);
    if (v55(v65, 1, v52) != 1)
    {
      uint64_t v67 = v98;
      uint64_t v68 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v87, v65, v52);
      sub_1000F8AEC((unint64_t *)&unk_100263460, (void (*)(uint64_t))&type metadata accessor for Date);
      char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v70 = *(void (**)(char *, uint64_t))(v67 + 8);
      v70(v68, v97);
      sub_1000AA894(v93, &qword_100261D90);
      v70((char *)v66, v97);
      uint64_t v52 = v97;
      sub_1000AA894(v94, &qword_100261D90);
      if (v69) {
        goto LABEL_120;
      }
      goto LABEL_116;
    }
    sub_1000AA894(v93, &qword_100261D90);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v66, v52);
  }
  sub_1000AA894(v49, &qword_100262950);
LABEL_116:
  uint64_t v71 = v90;
  sub_1000F7934(v64, v90);
  if (v55(v71, 1, v52) == 1)
  {
    sub_1000AA894(v71, &qword_100261D90);
    long long v100 = 0u;
    long long v101 = 0u;
    uint64_t v102 = 0;
  }
  else
  {
    *((void *)&v101 + 1) = v52;
    uint64_t v102 = &protocol witness table for Date;
    uint64_t v72 = sub_1000F8B34((uint64_t *)&v100);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v98 + 32))(v72, v71, v52);
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_120:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v73 = v99;
  int v74 = *(_DWORD *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_127:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_128;
    }
    if (v100 == v74) {
      goto LABEL_128;
    }
LABEL_126:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v74;
    goto LABEL_127;
  }
  if ((*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_126;
  }
LABEL_128:
  CKRecordKeyValueSetting.subscript.getter();
  int v75 = *(_DWORD *)(v73 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v73 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_135:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_136;
    }
    if (v100 == v75) {
      goto LABEL_136;
    }
LABEL_134:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v75;
    goto LABEL_135;
  }
  if ((*(unsigned char *)(v73 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4) & 1) == 0) {
    goto LABEL_134;
  }
LABEL_136:
  CKRecordKeyValueSetting.subscript.getter();
  int v76 = *(_DWORD *)(v73 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v73 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_143:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_144;
    }
    if (v100 == v76) {
      goto LABEL_144;
    }
LABEL_142:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v76;
    goto LABEL_143;
  }
  if ((*(unsigned char *)(v73 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_142;
  }
LABEL_144:
  CKRecordKeyValueSetting.subscript.getter();
  int v77 = *(_DWORD *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_151:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_152;
    }
    if (v100 == v77) {
      goto LABEL_152;
    }
LABEL_150:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v77;
    goto LABEL_151;
  }
  if ((*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) == 0) {
    goto LABEL_150;
  }
LABEL_152:
  CKRecordKeyValueSetting.subscript.getter();
  int v78 = *(_DWORD *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_159:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_160;
    }
    if (v100 == v78) {
      goto LABEL_160;
    }
LABEL_158:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v78;
    goto LABEL_159;
  }
  if ((*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_158;
  }
LABEL_160:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v79 = v99;
  int v80 = *(_DWORD *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight);
  if ((BYTE4(v100) & 1) == 0)
  {
    if (*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4))
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_167:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_168;
    }
    if (v100 == v80) {
      goto LABEL_168;
    }
LABEL_166:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v80;
    goto LABEL_167;
  }
  if ((*(unsigned char *)(v99 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) == 0) {
    goto LABEL_166;
  }
LABEL_168:
  CKRecordKeyValueSetting.subscript.getter();
  int v81 = *(_DWORD *)(v79 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft);
  if ((BYTE4(v100) & 1) == 0)
  {
    if ((*(unsigned char *)(v79
                   + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                   + 4) & 1) != 0)
    {
      uint64_t v102 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
LABEL_175:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_176;
    }
    if (v100 == v81) {
      goto LABEL_176;
    }
LABEL_174:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v81;
    goto LABEL_175;
  }
  if ((*(unsigned char *)(v79 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4) & 1) == 0) {
    goto LABEL_174;
  }
LABEL_176:
  CKRecordKeyValueSetting.subscript.getter();
  int v82 = *(_DWORD *)(v79 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight);
  if (BYTE4(v100))
  {
    if ((*(unsigned char *)(v79
                   + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                   + 4) & 1) != 0)
      return swift_unknownObjectRelease();
    goto LABEL_182;
  }
  if ((*(unsigned char *)(v79
                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                 + 4) & 1) != 0)
  {
    uint64_t v102 = 0;
    long long v100 = 0u;
    long long v101 = 0u;
LABEL_183:
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  if (v100 != v82)
  {
LABEL_182:
    *((void *)&v101 + 1) = &type metadata for UInt32;
    uint64_t v102 = &protocol witness table for UInt32;
    LODWORD(v100) = v82;
    goto LABEL_183;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1000F5D84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_identifier;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

char *sub_1000F5DFC@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  id v5 = objc_allocWithZone((Class)type metadata accessor for HMDeviceCloudRecord());
  uint64_t result = HMDeviceCloudRecord.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000F5E54(void *a1)
{
  return HMDeviceCloudRecord.encode(to:)(a1);
}

uint64_t sub_1000F5E78(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v119 = v4;
  uint64_t v120 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_1000AA024(&qword_100262950);
  __chkstk_darwin(v117);
  uint64_t v9 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v116 = (uint64_t)&v107 - v11;
  uint64_t v12 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v12 - 8);
  uint64_t v114 = (uint64_t)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v118 = (uint64_t)&v107 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v107 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v107 - v20;
  __chkstk_darwin(v22);
  id v24 = (char *)&v107 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v107 - v26;
  __chkstk_darwin(v28);
  char v30 = (char *)&v107 - v29;
  if (sub_1000F6E08(a1))
  {
    uint64_t v112 = v18;
    int v31 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus];
    if (qword_1002618B0 != -1) {
      swift_once();
    }
    if (v31 != byte_100262880
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus) != v31)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus) = v31;
    }
    int v32 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus];
    if (qword_1002618B8 != -1) {
      swift_once();
    }
    if (v32 != byte_100262881
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus) != v32)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus) = v32;
    }
    int v33 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled];
    if (qword_1002618C0 != -1) {
      swift_once();
    }
    if (v33 != byte_100262882
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled) != v33)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled) = v33;
    }
    int v34 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled];
    if (qword_1002618C8 != -1) {
      swift_once();
    }
    if (v34 != byte_100262883
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled) != v34)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled) = v34;
    }
    int v35 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled];
    if (qword_1002618D0 != -1) {
      swift_once();
    }
    if (v35 != byte_100262884
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled) != v35)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled) = v35;
    }
    int v36 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled];
    if (qword_1002618D8 != -1) {
      swift_once();
    }
    if (v36 != byte_100262885
      && *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled) != v36)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled) = v36;
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4] & 1) == 0)
    {
      int v37 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft];
      uint64_t v38 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v38 != v37)
      {
        *(_DWORD *)uint64_t v38 = v37;
        *(unsigned char *)(v38 + 4) = 0;
      }
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4] & 1) == 0)
    {
      int v39 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight];
      uint64_t v40 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v40 != v39)
      {
        *(_DWORD *)uint64_t v40 = v39;
        *(unsigned char *)(v40 + 4) = 0;
      }
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4] & 1) == 0)
    {
      int v41 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount];
      uint64_t v42 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) != 0
        || *(_DWORD *)v42 != v41)
      {
        *(_DWORD *)uint64_t v42 = v41;
        *(unsigned char *)(v42 + 4) = 0;
      }
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4] & 1) == 0)
    {
      int v43 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft];
      uint64_t v44 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v44 != v43)
      {
        *(_DWORD *)uint64_t v44 = v43;
        *(unsigned char *)(v44 + 4) = 0;
      }
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4] & 1) == 0)
    {
      int v45 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight];
      uint64_t v46 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v46 != v45)
      {
        *(_DWORD *)uint64_t v46 = v45;
        *(unsigned char *)(v46 + 4) = 0;
      }
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4] & 1) == 0)
    {
      int v47 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft];
      uint64_t v48 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v48 != v47)
      {
        *(_DWORD *)uint64_t v48 = v47;
        *(unsigned char *)(v48 + 4) = 0;
      }
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4] & 1) == 0)
    {
      int v49 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight];
      uint64_t v50 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v50 != v49)
      {
        *(_DWORD *)uint64_t v50 = v49;
        *(unsigned char *)(v50 + 4) = 0;
      }
    }
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4] & 1) == 0)
    {
      int v51 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft];
      uint64_t v52 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4) & 1) != 0
        || *(_DWORD *)v52 != v51)
      {
        *(_DWORD *)uint64_t v52 = v51;
        *(unsigned char *)(v52 + 4) = 0;
      }
    }
    uint64_t v110 = v21;
    uint64_t v111 = v9;
    uint64_t v113 = v7;
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4] & 1) == 0)
    {
      int v53 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight];
      uint64_t v54 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight;
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) != 0
        || *(_DWORD *)v54 != v53)
      {
        *(_DWORD *)uint64_t v54 = v53;
        *(unsigned char *)(v54 + 4) = 0;
      }
    }
    uint64_t v55 = (uint64_t)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
    swift_beginAccess();
    sub_1000F7934(v55, (uint64_t)v30);
    uint64_t v56 = v119;
    uint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48);
    LODWORD(v55) = v57(v30, 1, v119);
    uint64_t v115 = v30;
    sub_1000F7934((uint64_t)v30, (uint64_t)v27);
    if (v55 == 1)
    {
      uint64_t v58 = (uint64_t)v27;
LABEL_78:
      sub_1000AA894(v58, &qword_100261D90);
      uint64_t v69 = v118;
      goto LABEL_83;
    }
    uint64_t v66 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
    swift_beginAccess();
    uint64_t v67 = v116;
    uint64_t v68 = v116 + *(int *)(v117 + 48);
    sub_1000F7934(v66, v116);
    sub_1000F7934((uint64_t)v27, v68);
    if (v57((char *)v67, 1, v56) == 1)
    {
      sub_1000AA894((uint64_t)v27, &qword_100261D90);
      if (v57((char *)v68, 1, v56) == 1)
      {
        uint64_t v58 = v116;
        goto LABEL_78;
      }
    }
    else
    {
      sub_1000F7934(v67, (uint64_t)v24);
      if (v57((char *)v68, 1, v56) != 1)
      {
        long long v100 = v113;
        (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v113, v68, v119);
        sub_1000F8AEC((unint64_t *)&unk_100263460, (void (*)(uint64_t))&type metadata accessor for Date);
        int v109 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v108 = v24;
        long long v101 = *(void (**)(char *, uint64_t))(v120 + 8);
        uint64_t v102 = v100;
        uint64_t v56 = v119;
        v101(v102, v119);
        sub_1000AA894((uint64_t)v27, &qword_100261D90);
        v101(v108, v56);
        sub_1000AA894(v67, &qword_100261D90);
        uint64_t v69 = v118;
        if (v109)
        {
LABEL_83:
          uint64_t v71 = (uint64_t)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
          swift_beginAccess();
          uint64_t v72 = (uint64_t)v112;
          sub_1000F7934(v71, (uint64_t)v112);
          LODWORD(v71) = v57((char *)v72, 1, v56);
          sub_1000F7934(v72, v69);
          if (v71 == 1)
          {
            sub_1000AA894(v69, &qword_100261D90);
            uint64_t v73 = v113;
            uint64_t v74 = (uint64_t)v115;
            goto LABEL_92;
          }
          uint64_t v75 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
          swift_beginAccess();
          uint64_t v76 = (uint64_t)v111;
          uint64_t v77 = (uint64_t)&v111[*(int *)(v117 + 48)];
          uint64_t v119 = v75;
          sub_1000F7934(v75, (uint64_t)v111);
          sub_1000F7934(v69, v77);
          if (v57((char *)v76, 1, v56) == 1)
          {
            sub_1000AA894(v69, &qword_100261D90);
            int v78 = v57((char *)v77, 1, v56);
            uint64_t v73 = v113;
            uint64_t v74 = (uint64_t)v115;
            if (v78 == 1)
            {
              sub_1000AA894((uint64_t)v111, &qword_100261D90);
              goto LABEL_92;
            }
          }
          else
          {
            uint64_t v79 = v114;
            sub_1000F7934(v76, v114);
            if (v57((char *)v77, 1, v56) != 1)
            {
              uint64_t v103 = v79;
              uint64_t v104 = v120;
              uint64_t v73 = v113;
              (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v113, v77, v56);
              sub_1000F8AEC((unint64_t *)&unk_100263460, (void (*)(uint64_t))&type metadata accessor for Date);
              char v105 = dispatch thunk of static Equatable.== infix(_:_:)();
              unint64_t v106 = *(void (**)(char *, uint64_t))(v104 + 8);
              v106(v73, v56);
              sub_1000AA894(v118, &qword_100261D90);
              v106((char *)v103, v56);
              uint64_t v72 = (uint64_t)v112;
              sub_1000AA894(v76, &qword_100261D90);
              uint64_t v74 = (uint64_t)v115;
              uint64_t v80 = (uint64_t)v110;
              if (v105)
              {
LABEL_92:
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4] & 1) == 0)
                {
                  int v82 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft];
                  uint64_t v83 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft;
                  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) != 0
                    || *(_DWORD *)v83 != v82)
                  {
                    *(_DWORD *)uint64_t v83 = v82;
                    *(unsigned char *)(v83 + 4) = 0;
                  }
                }
                uint64_t v84 = v120;
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4] & 1) == 0)
                {
                  int v85 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight];
                  uint64_t v86 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight;
                  if ((*(unsigned char *)(v2
                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight
                                 + 4) & 1) != 0
                    || *(_DWORD *)v86 != v85)
                  {
                    *(_DWORD *)uint64_t v86 = v85;
                    *(unsigned char *)(v86 + 4) = 0;
                  }
                }
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4] & 1) == 0)
                {
                  int v87 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft];
                  uint64_t v88 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft;
                  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) != 0
                    || *(_DWORD *)v88 != v87)
                  {
                    *(_DWORD *)uint64_t v88 = v87;
                    *(unsigned char *)(v88 + 4) = 0;
                  }
                }
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4] & 1) == 0)
                {
                  int v89 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight];
                  uint64_t v90 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight;
                  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) != 0
                    || *(_DWORD *)v90 != v89)
                  {
                    *(_DWORD *)uint64_t v90 = v89;
                    *(unsigned char *)(v90 + 4) = 0;
                  }
                }
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4] & 1) == 0)
                {
                  int v91 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft];
                  uint64_t v92 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft;
                  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) != 0
                    || *(_DWORD *)v92 != v91)
                  {
                    *(_DWORD *)uint64_t v92 = v91;
                    *(unsigned char *)(v92 + 4) = 0;
                  }
                }
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4] & 1) == 0)
                {
                  int v93 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight];
                  uint64_t v94 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight;
                  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) != 0
                    || *(_DWORD *)v94 != v93)
                  {
                    *(_DWORD *)uint64_t v94 = v93;
                    *(unsigned char *)(v94 + 4) = 0;
                  }
                }
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                       + 4] & 1) == 0)
                {
                  int v95 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft];
                  uint64_t v96 = v2
                      + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft;
                  if ((*(unsigned char *)(v2
                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                                 + 4) & 1) != 0
                    || *(_DWORD *)v96 != v95)
                  {
                    *(_DWORD *)uint64_t v96 = v95;
                    *(unsigned char *)(v96 + 4) = 0;
                  }
                }
                if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                       + 4] & 1) == 0)
                {
                  int v97 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
                  uint64_t v98 = v2
                      + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight;
                  if ((*(unsigned char *)(v2
                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                                 + 4) & 1) != 0
                    || *(_DWORD *)v98 != v97)
                  {
                    *(_DWORD *)uint64_t v98 = v97;
                    *(unsigned char *)(v98 + 4) = 0;
                  }
                }
                static Date.now.getter();
                uint64_t v99 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_lastModifiedDate;
                swift_beginAccess();
                (*(void (**)(uint64_t, char *, uint64_t))(v84 + 40))(v99, v73, v56);
                swift_endAccess();
                sub_1000AA894(v72, &qword_100261D90);
                return sub_1000AA894(v74, &qword_100261D90);
              }
LABEL_91:
              sub_1000F7934(v72, v80);
              uint64_t v81 = v119;
              swift_beginAccess();
              sub_1000F7A3C(v80, v81);
              swift_endAccess();
              goto LABEL_92;
            }
            sub_1000AA894(v118, &qword_100261D90);
            (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v79, v56);
            uint64_t v73 = v113;
            uint64_t v74 = (uint64_t)v115;
          }
          sub_1000AA894((uint64_t)v111, &qword_100262950);
          uint64_t v80 = (uint64_t)v110;
          goto LABEL_91;
        }
LABEL_82:
        uint64_t v70 = (uint64_t)v110;
        sub_1000F7934((uint64_t)v115, (uint64_t)v110);
        swift_beginAccess();
        sub_1000F7A3C(v70, v66);
        swift_endAccess();
        goto LABEL_83;
      }
      sub_1000AA894((uint64_t)v27, &qword_100261D90);
      (*(void (**)(char *, uint64_t))(v120 + 8))(v24, v56);
    }
    sub_1000AA894(v116, &qword_100262950);
    uint64_t v69 = v118;
    goto LABEL_82;
  }
  static os_log_type_t.info.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_1001CFDB0;
  uint64_t v60 = a1;
  id v61 = [v60 description];
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v63;

  *(void *)(v59 + 56) = &type metadata for String;
  *(void *)(v59 + 64) = sub_1000AA5E0();
  *(void *)(v59 + 32) = v62;
  *(void *)(v59 + 40) = v64;
  os_log(_:dso:log:_:_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F6E08(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v55 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_1000AA024(&qword_100262950);
  __chkstk_darwin(v7);
  uint64_t v9 = &v46[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v12 = &v46[-v11];
  uint64_t v13 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v13 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = &v46[-v15];
  __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  uint64_t v20 = &v46[-v19];
  __chkstk_darwin(v21);
  uint64_t v23 = &v46[-v22];
  __chkstk_darwin(v24);
  if (!a1) {
    return 0;
  }
  if (a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus] == *(unsigned char *)(v2
                                                                                             + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_haRegionStatus)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus] == *(unsigned char *)(v2
                                                                                             + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_hpRegionStatus)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled] == *(unsigned char *)(v2
                                                                                                 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_mediaAssistEnabled)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled] == *(unsigned char *)(v2
                                                                                              + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeMediaEnabled)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled] == *(unsigned char *)(v2
                                                                                              + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_pmeVoiceEnabled)
    && a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled] == *(unsigned char *)(v2
                                                                                               + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_swipeGainEnabled)
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountLeft))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_bottomMicFaultCountRight))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_diagnosticMeasurementsCount))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountLeft))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_freqAccuracyFaultCountRight))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountLeft))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_frontVentFaultCountRight))
    && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4] & 1) != 0
     || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft + 4) & 1) == 0
     && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountLeft)))
  {
    uint64_t v54 = &v46[-v26];
    if ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4] & 1) != 0
      || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight + 4) & 1) == 0
      && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_innerMicFaultCountRight))
    {
      uint64_t v51 = v27;
      uint64_t v49 = v25;
      int v53 = &a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft];
      swift_beginAccess();
      sub_1000F7934((uint64_t)v53, (uint64_t)v54);
      uint64_t v52 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v55 + 48);
      int v53 = (char *)(v55 + 48);
      LODWORD(v50) = v52(v54, 1, v4);
      sub_1000F7934((uint64_t)v54, (uint64_t)v23);
      if (v50 == 1)
      {
        uint64_t v28 = a1;
LABEL_47:
        sub_1000AA894((uint64_t)v23, &qword_100261D90);
        goto LABEL_48;
      }
      uint64_t v48 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampLeft;
      swift_beginAccess();
      uint64_t v50 = &v12[*(int *)(v7 + 48)];
      sub_1000F7934((uint64_t)v23, (uint64_t)v12);
      sub_1000F7934(v48, (uint64_t)v50);
      if (v52(v12, 1, v4) == 1)
      {
        int v31 = a1;
        sub_1000AA894((uint64_t)v23, &qword_100261D90);
        if (v52(v50, 1, v4) == 1)
        {
          uint64_t v23 = v12;
          goto LABEL_47;
        }
      }
      else
      {
        sub_1000F7934((uint64_t)v12, (uint64_t)v20);
        if (v52(v50, 1, v4) != 1)
        {
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v55 + 32))(v6, v50, v4);
          uint64_t v50 = (unsigned char *)sub_1000F8AEC((unint64_t *)&unk_100263460, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v40 = a1;
          int v47 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v41 = *(unsigned char **)(v55 + 8);
          uint64_t v48 = v55 + 8;
          uint64_t v50 = v41;
          ((void (*)(unsigned char *, uint64_t))v41)(v6, v4);
          sub_1000AA894((uint64_t)v23, &qword_100261D90);
          ((void (*)(unsigned char *, uint64_t))v50)(v20, v4);
          sub_1000AA894((uint64_t)v12, &qword_100261D90);
          if (v47)
          {
LABEL_48:
            uint64_t v32 = (uint64_t)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight];
            swift_beginAccess();
            uint64_t v33 = v51;
            sub_1000F7934(v32, v51);
            int v34 = v52;
            LODWORD(v32) = v52((unsigned char *)v33, 1, v4);
            sub_1000F7934(v33, (uint64_t)v16);
            if (v32 != 1)
            {
              uint64_t v35 = v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_latestDiagnosticTimestampRight;
              swift_beginAccess();
              uint64_t v36 = (uint64_t)&v9[*(int *)(v7 + 48)];
              sub_1000F7934((uint64_t)v16, (uint64_t)v9);
              sub_1000F7934(v35, v36);
              if (v34(v9, 1, v4) == 1)
              {
                sub_1000AA894((uint64_t)v16, &qword_100261D90);
                if (v52((unsigned char *)v36, 1, v4) == 1)
                {
                  uint64_t v16 = v9;
                  goto LABEL_52;
                }
              }
              else
              {
                sub_1000F7934((uint64_t)v9, v49);
                if (v52((unsigned char *)v36, 1, v4) != 1)
                {
                  uint64_t v42 = v55;
                  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v55 + 32))(v6, v36, v4);
                  sub_1000F8AEC((unint64_t *)&unk_100263460, (void (*)(uint64_t))&type metadata accessor for Date);
                  uint64_t v43 = v49;
                  char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
                  int v45 = *(void (**)(unsigned char *, uint64_t))(v42 + 8);
                  v45(v6, v4);
                  sub_1000AA894((uint64_t)v16, &qword_100261D90);
                  v45((unsigned char *)v43, v4);
                  sub_1000AA894((uint64_t)v9, &qword_100261D90);
                  if ((v44 & 1) == 0) {
                    goto LABEL_91;
                  }
                  goto LABEL_53;
                }
                sub_1000AA894((uint64_t)v16, &qword_100261D90);
                (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v49, v4);
              }
              sub_1000AA894((uint64_t)v9, &qword_100262950);
              goto LABEL_91;
            }
LABEL_52:
            sub_1000AA894((uint64_t)v16, &qword_100261D90);
LABEL_53:
            if (((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4] & 1) != 0
               || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountLeft))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4] & 1) != 0
               || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_rearVentFaultCountRight))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4] & 1) != 0
               || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountLeft))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4] & 1) != 0
               || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_speakerFaultCountRight))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4] & 1) != 0
               || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountLeft))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4] & 1) != 0
               || (*(unsigned char *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_topMicFaultCountRight))
              && ((a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft + 4] & 1) != 0
               || (*(unsigned char *)(v2
                            + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft
                            + 4) & 1) == 0
               && *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft] == *(_DWORD *)(v2 + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountLeft)))
            {
              int v37 = *(_DWORD *)&a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight];
              char v38 = a1[OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight + 4];

              if ((v38 & 1) != 0
                || (*(unsigned char *)(v2
                             + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight
                             + 4) & 1) == 0
                && v37 == *(_DWORD *)(v2
                                    + OBJC_IVAR____TtC15audioaccessoryd19HMDeviceCloudRecord_totalHarmonicDistortionFaultCountRight))
              {
                sub_1000AA894(v51, &qword_100261D90);
                uint64_t v29 = 0;
LABEL_94:
                sub_1000AA894((uint64_t)v54, &qword_100261D90);
                return v29;
              }
              goto LABEL_92;
            }
LABEL_91:

LABEL_92:
            sub_1000AA894(v51, &qword_100261D90);
            goto LABEL_93;
          }
LABEL_77:

LABEL_93:
          uint64_t v29 = 1;
          goto LABEL_94;
        }
        int v39 = a1;
        sub_1000AA894((uint64_t)v23, &qword_100261D90);
        (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v20, v4);
      }
      sub_1000AA894((uint64_t)v12, &qword_100262950);
      goto LABEL_77;
    }
  }
  return 1;
}

uint64_t sub_1000F7934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000F799C()
{
  unint64_t result = qword_1002628B8;
  if (!qword_1002628B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002628B8);
  }
  return result;
}

uint64_t type metadata accessor for HMDeviceCloudRecord()
{
  uint64_t result = qword_100262918;
  if (!qword_100262918) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000F7A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F7AA4(uint64_t a1)
{
  uint64_t result = sub_1000F8AEC(&qword_1002628D8, (void (*)(uint64_t))type metadata accessor for HMDeviceCloudRecord);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

uint64_t sub_1000F7AFC(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000F8AEC(&qword_1002628E0, (void (*)(uint64_t))type metadata accessor for HMDeviceCloudRecord);
  uint64_t result = sub_1000F8AEC(&qword_1002628E8, (void (*)(uint64_t))type metadata accessor for HMDeviceCloudRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000F7B80()
{
  return type metadata accessor for HMDeviceCloudRecord();
}

void sub_1000F7B88()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1000F7CEC();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1000F7CEC()
{
  if (!qword_100263440)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100263440);
    }
  }
}

uint64_t getEnumTagSinglePayload for HMDeviceCloudRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE4) {
    goto LABEL_17;
  }
  if (a2 + 28 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 28) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 28;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 28;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1D;
  int v8 = v6 - 29;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HMDeviceCloudRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 28 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 28) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE3)
  {
    unsigned int v6 = ((a2 - 228) >> 8) + 1;
    *uint64_t result = a2 + 28;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F7EA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 28;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HMDeviceCloudRecord.CodingKeys()
{
  return &type metadata for HMDeviceCloudRecord.CodingKeys;
}

unint64_t sub_1000F7EDC()
{
  unint64_t result = qword_100262930;
  if (!qword_100262930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262930);
  }
  return result;
}

unint64_t sub_1000F7F34()
{
  unint64_t result = qword_100262938;
  if (!qword_100262938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262938);
  }
  return result;
}

unint64_t sub_1000F7F8C()
{
  unint64_t result = qword_100262940;
  if (!qword_100262940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262940);
  }
  return result;
}

uint64_t sub_1000F7FE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F696765526168 && a2 == 0xEE00737574617453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F696765527068 && a2 == 0xEE00737574617453 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001001F9D60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x616964654D656D70 && a2 == 0xEF64656C62616E45 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6563696F56656D70 && a2 == 0xEF64656C62616E45 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F9DA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001001F9DC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001001F9DE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001001F9E00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001001F9E20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001001F9E40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001001F9E60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001001F9E80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001001F9EA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001001F9EC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001001F9EE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001001F9F00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001001F9F20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001001F9F40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001001F9F60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001001F9F80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001001F9FA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001001F9FC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000001001F9FE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000001001FA010 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 28;
    }
    else {
      return 29;
    }
  }
}

unint64_t sub_1000F8A98()
{
  unint64_t result = qword_100262958;
  if (!qword_100262958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262958);
  }
  return result;
}

uint64_t sub_1000F8AEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1000F8B34(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unsigned char *storeEnumTagSinglePayload for HMDeviceCloudRecord.HMDeviceCloudRecordError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F8C64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HMDeviceCloudRecord.HMDeviceCloudRecordError()
{
  return &type metadata for HMDeviceCloudRecord.HMDeviceCloudRecordError;
}

unint64_t sub_1000F8CA0()
{
  unint64_t result = qword_1002629D8;
  if (!qword_1002629D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002629D8);
  }
  return result;
}

uint64_t sub_1000F8CF4()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  BOOL v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v5, qword_10026AD20);
  sub_1000AA0CC(v3, (uint64_t)qword_10026AD20);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

void *sub_1000F8EB8()
{
  uint64_t v1 = type metadata accessor for Date();
  unint64_t v114 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v113 = (char *)&v112 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v3 - 8);
  uint64_t v116 = (char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v117 = (uint64_t)&v112 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v112 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v112 - v11;
  sub_1000FB560(v0, &v119);
  id v118 = v119;
  uint64_t v119 = 0;
  unint64_t v120 = 0xE000000000000000;
  _StringGuts.grow(_:)(205);
  v14._uint64_t countAndFlagsBits = 0xD000000000000021;
  v14._object = (void *)0x80000001001FA3A0;
  String.append(_:)(v14);
  type metadata accessor for UUID();
  sub_1000FF3FC((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
  v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  uint64_t v17 = (int *)type metadata accessor for DeviceSupportInformationRecord();
  uint64_t v18 = (uint64_t *)(v0 + v17[6]);
  uint64_t v20 = *v18;
  uint64_t v19 = (void *)v18[1];
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = v20;
  v21._object = v19;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x80000001001FA3D0;
  v22._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v22);
  uint64_t v23 = (uint64_t *)(v0 + v17[7]);
  uint64_t v24 = *v23;
  uint64_t v25 = (void *)v23[1];
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x80000001001FA3F0;
  v27._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v27);
  uint64_t v28 = (uint64_t *)(v0 + v17[9]);
  uint64_t v29 = *v28;
  char v30 = (void *)v28[1];
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0xD000000000000014;
  v32._object = (void *)0x80000001001FA410;
  String.append(_:)(v32);
  uint64_t v33 = (uint64_t *)(v0 + v17[10]);
  uint64_t v34 = *v33;
  uint64_t v35 = (void *)v33[1];
  swift_bridgeObjectRetain();
  v36._uint64_t countAndFlagsBits = v34;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._object = (void *)0x80000001001FA430;
  v37._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v37);
  char v38 = (uint64_t *)(v0 + v17[11]);
  uint64_t v39 = *v38;
  uint64_t v40 = (void *)v38[1];
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._object = (void *)0x80000001001FA450;
  v42._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v42);
  uint64_t v43 = (uint64_t *)(v0 + v17[12]);
  uint64_t v44 = *v43;
  int v45 = (void *)v43[1];
  swift_bridgeObjectRetain();
  v46._uint64_t countAndFlagsBits = v44;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 0xD000000000000018;
  v47._object = (void *)0x80000001001FA470;
  String.append(_:)(v47);
  uint64_t v48 = (uint64_t *)(v0 + v17[13]);
  uint64_t v49 = *v48;
  uint64_t v50 = (void *)v48[1];
  swift_bridgeObjectRetain();
  v51._uint64_t countAndFlagsBits = v49;
  v51._object = v50;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._object = (void *)0x80000001001FA490;
  v52._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v52);
  int v53 = (uint64_t *)(v0 + v17[14]);
  uint64_t v54 = *v53;
  uint64_t v55 = (void *)v53[1];
  swift_bridgeObjectRetain();
  v56._uint64_t countAndFlagsBits = v54;
  v56._object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = 10;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  unint64_t v58 = v120;
  uint64_t v115 = v119;
  uint64_t v119 = 0;
  unint64_t v120 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v59._uint64_t countAndFlagsBits = 0x7461657263202020;
  v59._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v59);
  id v60 = [v118 creationDate];
  if (v60)
  {
    id v61 = v60;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v62 = v114;
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v114 + 56);
    v63(v9, 0, 1, v1);
  }
  else
  {
    unint64_t v62 = v114;
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v114 + 56);
    v63(v9, 1, 1, v1);
  }
  sub_1000E8A70((uint64_t)v9, (uint64_t)v12, &qword_100261D90);
  uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  if (v64(v12, 1, v1))
  {
    sub_1000AA894((uint64_t)v12, &qword_100261D90);
    uint64_t v65 = (void *)0xE200000000000000;
    uint64_t v66 = 15932;
  }
  else
  {
    uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
    unint64_t v114 = v58;
    uint64_t v68 = v113;
    v67(v113, v12, v1);
    sub_1000AA894((uint64_t)v12, &qword_100261D90);
    unint64_t v69 = v62;
    uint64_t v70 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v72 = [v70 localizedStringFromDate:isa dateStyle:2 timeStyle:2];

    uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v73;

    unint64_t v62 = v69;
    uint64_t v74 = v68;
    unint64_t v58 = v114;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v74, v1);
  }
  v75._uint64_t countAndFlagsBits = v66;
  v75._object = v65;
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  v76._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v76._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v76);
  id v77 = v118;
  id v78 = [v118 modificationDate];
  if (v78)
  {
    uint64_t v79 = v78;
    uint64_t v80 = (uint64_t)v116;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v81 = 0;
  }
  else
  {
    uint64_t v81 = 1;
    uint64_t v80 = (uint64_t)v116;
  }
  v63((char *)v80, v81, 1, v1);
  uint64_t v82 = v117;
  sub_1000E8A70(v80, v117, &qword_100261D90);
  if (v64((char *)v82, 1, v1))
  {
    sub_1000AA894(v82, &qword_100261D90);
    uint64_t v83 = (void *)0xE200000000000000;
    uint64_t v84 = 15932;
  }
  else
  {
    unint64_t v85 = v58;
    uint64_t v86 = v113;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v113, v82, v1);
    sub_1000AA894(v82, &qword_100261D90);
    unint64_t v87 = v62;
    uint64_t v88 = self;
    Class v89 = Date._bridgeToObjectiveC()().super.isa;
    id v90 = [v88 localizedStringFromDate:v89 dateStyle:2 timeStyle:2];

    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v83 = v91;

    uint64_t v92 = v86;
    unint64_t v58 = v85;
    (*(void (**)(char *, uint64_t))(v87 + 8))(v92, v1);
  }
  v93._uint64_t countAndFlagsBits = v84;
  v93._object = v83;
  String.append(_:)(v93);
  swift_bridgeObjectRelease();
  v94._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v94._object = (void *)0xEF203A7962206465;
  String.append(_:)(v94);
  id v95 = [v77 modifiedByDevice];
  if (v95)
  {
    uint64_t v96 = v95;
    uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v99 = v98;
  }
  else
  {
    uint64_t v99 = (void *)0xE200000000000000;
    uint64_t v97 = 15932;
  }
  v100._uint64_t countAndFlagsBits = v97;
  v100._object = v99;
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v101._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v101._object = (void *)0xE800000000000000;
  String.append(_:)(v101);
  id v102 = [v77 recordChangeTag];
  if (v102)
  {
    uint64_t v103 = v102;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v106 = v105;
  }
  else
  {
    unint64_t v106 = (void *)0xE200000000000000;
    uint64_t v104 = 15932;
  }
  v107._uint64_t countAndFlagsBits = v104;
  v107._object = v106;
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  uint64_t v108 = (uint64_t)v119;
  int v109 = (void *)v120;
  uint64_t v119 = v115;
  unint64_t v120 = v58;
  swift_bridgeObjectRetain();
  v110._uint64_t countAndFlagsBits = v108;
  v110._object = v109;
  String.append(_:)(v110);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v119;
}

uint64_t sub_1000F97A4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for DeviceSupportInformationRecord();
  *(_OWORD *)(a3 + v9[5]) = xmmword_1001D1A50;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v69 = a1;
  v12(a3, a1, v10);
  id v13 = [a2 bluetoothAddress];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  uint64_t v17 = (uint64_t *)(a3 + v9[6]);
  *uint64_t v17 = v14;
  v17[1] = v16;
  id v18 = [a2 budsFirmwareVersion];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v22 = 0xE000000000000000;
  }
  uint64_t v23 = (uint64_t *)(a3 + v9[7]);
  *uint64_t v23 = v20;
  v23[1] = v22;
  id v24 = [a2 caseName];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v28 = 0xE000000000000000;
  }
  uint64_t v29 = (uint64_t *)(a3 + v9[8]);
  *uint64_t v29 = v26;
  v29[1] = v28;
  id v30 = [a2 caseFirmwareVersion];
  if (v30)
  {
    Swift::String v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v34 = 0xE000000000000000;
  }
  uint64_t v35 = (uint64_t *)(a3 + v9[9]);
  *uint64_t v35 = v32;
  v35[1] = v34;
  id v36 = [a2 caseSerialNumber];
  if (v36)
  {
    Swift::String v37 = v36;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;
  }
  else
  {
    uint64_t v38 = 0;
    unint64_t v40 = 0xE000000000000000;
  }
  Swift::String v41 = (uint64_t *)(a3 + v9[10]);
  *Swift::String v41 = v38;
  v41[1] = v40;
  id v42 = [a2 hardwareVersion];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v46 = v45;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v46 = 0xE000000000000000;
  }
  Swift::String v47 = (uint64_t *)(a3 + v9[11]);
  *Swift::String v47 = v44;
  v47[1] = v46;
  id v48 = [a2 leftBudSerialNumber];
  if (v48)
  {
    uint64_t v49 = v48;
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v52 = v51;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v52 = 0xE000000000000000;
  }
  int v53 = (uint64_t *)(a3 + v9[12]);
  *int v53 = v50;
  v53[1] = v52;
  id v54 = [a2 rightBudSerialNumber];
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;
  }
  else
  {
    uint64_t v56 = 0;
    unint64_t v58 = 0xE000000000000000;
  }
  Swift::String v59 = (uint64_t *)(a3 + v9[13]);
  uint64_t *v59 = v56;
  v59[1] = v58;
  id v60 = [a2 ancAssetVersion];
  if (v60)
  {
    id v61 = v60;
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v64 = v63;
  }
  else
  {
    uint64_t v62 = 0;
    unint64_t v64 = 0xE000000000000000;
  }
  uint64_t v65 = (uint64_t *)(a3 + v9[14]);
  uint64_t *v65 = v62;
  v65[1] = v64;
  uint64_t v66 = (void *)(a3 + v9[15]);
  void *v66 = 0;
  v66[1] = 0xE000000000000000;
  static Date.now.getter();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v69, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v70 + 32))(a3 + v9[16], v8, v71);
}

void sub_1000F9BAC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v116 = a2;
  uint64_t v3 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v3 - 8);
  Swift::String v110 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v115 = (uint64_t)&v107 - v6;
  __chkstk_darwin(v7);
  uint64_t v117 = (uint64_t)&v107 - v8;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v107 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v113 = *(void *)(v15 - 8);
  uint64_t v114 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000AA024(&qword_100262AE0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for DeviceSupportInformationRecord();
  __chkstk_darwin(v121);
  uint64_t v122 = (uint64_t)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1[3];
  uint64_t v119 = a1;
  sub_1000ABF58(a1, v23);
  sub_1001005B4();
  uint64_t v24 = v120;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24)
  {
    uint64_t v120 = v24;
    uint64_t v28 = v121;
    uint64_t v27 = v122;
    sub_1000ABFF0((uint64_t)v119);
    LODWORD(v117) = 0;
    LODWORD(v116) = 0;
    LODWORD(v115) = 0;
    int v29 = 0;
    LODWORD(v11_Block_object_dispose(&STACK[0x290], 8) = 0;
    goto LABEL_5;
  }
  uint64_t v25 = v17;
  uint64_t v108 = v11;
  int v109 = v14;
  char v124 = 1;
  sub_1000AC040();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = v18;
  uint64_t v32 = (int *)v121;
  uint64_t v31 = v122;
  *(_OWORD *)(v122 + *(int *)(v121 + 20)) = v123;
  LOBYTE(v123) = 0;
  sub_1000FF3FC((unint64_t *)&unk_1002633D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v33 = v114;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 32))(v31, v25, v33);
  LOBYTE(v123) = 2;
  uint64_t v34 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v35 = (uint64_t *)(v31 + v32[6]);
  *uint64_t v35 = v34;
  v35[1] = v36;
  LOBYTE(v123) = 3;
  uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v38) {
    uint64_t v39 = v37;
  }
  else {
    uint64_t v39 = 0;
  }
  if (v38) {
    unint64_t v40 = v38;
  }
  else {
    unint64_t v40 = 0xE000000000000000;
  }
  Swift::String v41 = (uint64_t *)(v31 + v32[7]);
  *Swift::String v41 = v39;
  v41[1] = v40;
  LOBYTE(v123) = 4;
  uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v43) {
    uint64_t v44 = v42;
  }
  else {
    uint64_t v44 = 0;
  }
  if (v43) {
    unint64_t v45 = v43;
  }
  else {
    unint64_t v45 = 0xE000000000000000;
  }
  unint64_t v46 = (uint64_t *)(v31 + v32[8]);
  *unint64_t v46 = v44;
  v46[1] = v45;
  LOBYTE(v123) = 5;
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v48) {
    uint64_t v49 = v47;
  }
  else {
    uint64_t v49 = 0;
  }
  if (v48) {
    unint64_t v50 = v48;
  }
  else {
    unint64_t v50 = 0xE000000000000000;
  }
  unint64_t v51 = (uint64_t *)(v31 + v32[9]);
  *unint64_t v51 = v49;
  v51[1] = v50;
  LOBYTE(v123) = 6;
  uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v53) {
    uint64_t v54 = v52;
  }
  else {
    uint64_t v54 = 0;
  }
  if (v53) {
    unint64_t v55 = v53;
  }
  else {
    unint64_t v55 = 0xE000000000000000;
  }
  uint64_t v56 = (uint64_t *)(v31 + v32[10]);
  *uint64_t v56 = v54;
  v56[1] = v55;
  LOBYTE(v123) = 7;
  uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LODWORD(v11_Block_object_dispose(&STACK[0x290], 8) = 1;
  if (v58) {
    uint64_t v59 = v57;
  }
  else {
    uint64_t v59 = 0;
  }
  if (v58) {
    unint64_t v60 = v58;
  }
  else {
    unint64_t v60 = 0xE000000000000000;
  }
  id v61 = (uint64_t *)(v31 + v32[11]);
  *id v61 = v59;
  v61[1] = v60;
  LOBYTE(v123) = 8;
  uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  if (v63) {
    uint64_t v64 = v62;
  }
  else {
    uint64_t v64 = 0;
  }
  if (v63) {
    unint64_t v65 = v63;
  }
  else {
    unint64_t v65 = 0xE000000000000000;
  }
  uint64_t v66 = (uint64_t *)(v31 + v32[12]);
  uint64_t *v66 = v64;
  v66[1] = v65;
  LOBYTE(v123) = 9;
  uint64_t v67 = v21;
  uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v120 = 0;
  if (v69) {
    uint64_t v70 = v68;
  }
  else {
    uint64_t v70 = 0;
  }
  if (v69) {
    unint64_t v71 = v69;
  }
  else {
    unint64_t v71 = 0xE000000000000000;
  }
  id v72 = (uint64_t *)(v122 + *(int *)(v121 + 52));
  *id v72 = v70;
  v72[1] = v71;
  LOBYTE(v123) = 10;
  uint64_t v73 = v120;
  uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v120 = v73;
  if (!v73)
  {
    if (v75) {
      uint64_t v76 = v74;
    }
    else {
      uint64_t v76 = 0;
    }
    if (v75) {
      unint64_t v77 = v75;
    }
    else {
      unint64_t v77 = 0xE000000000000000;
    }
    id v78 = (uint64_t *)(v122 + *(int *)(v121 + 56));
    *id v78 = v76;
    v78[1] = v77;
    LOBYTE(v123) = 11;
    uint64_t v79 = v120;
    uint64_t v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v120 = v79;
    if (v79)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v26);
      LODWORD(v117) = 0;
      int v29 = 1;
      LODWORD(v115) = 1;
      LODWORD(v116) = 1;
      goto LABEL_75;
    }
    if (v81) {
      uint64_t v82 = v80;
    }
    else {
      uint64_t v82 = 0;
    }
    unint64_t v83 = 0xE000000000000000;
    if (v81) {
      unint64_t v83 = v81;
    }
    uint64_t v85 = v121;
    uint64_t v84 = v122;
    uint64_t v86 = (uint64_t *)(v122 + *(int *)(v121 + 60));
    *uint64_t v86 = v82;
    v86[1] = v83;
    uint64_t v107 = v84 + *(int *)(v85 + 64);
    static Date.now.getter();
    LOBYTE(v123) = 12;
    sub_1000FF3FC(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v87 = v120;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v120 = v87;
    if (v87)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v26);
      int v29 = 1;
      LODWORD(v115) = 1;
      LODWORD(v116) = 1;
      LODWORD(v117) = 1;
      goto LABEL_75;
    }
    uint64_t v121 = *(void *)(v111 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121)(v117, 1, v112) != 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v26);
      (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v109, v117, v112);
LABEL_91:
      (*(void (**)(uint64_t, char *, uint64_t))(v111 + 40))(v107, v109, v112);
      uint64_t v106 = v122;
      sub_1000FF088(v122, v116);
      sub_1000ABFF0((uint64_t)v119);
      sub_1000FF0EC(v106);
      return;
    }
    uint64_t v89 = v120;
    sub_1000FB560(v122, &v123);
    uint64_t v120 = v89;
    if (v89) {
      goto LABEL_92;
    }
    id v90 = (void *)v123;
    id v91 = [(id)v123 modificationDate];

    if (v91)
    {
      uint64_t v92 = v108;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v93 = v111;
      uint64_t v94 = v115;
      id v95 = v92;
      uint64_t v96 = v112;
      id v118 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
      v118(v115, v95, v112);
      uint64_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56);
      v97(v94, 0, 1, v96);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121)(v94, 1, v96) != 1)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v67, v26);
        v118((uint64_t)v109, (char *)v115, v112);
LABEL_90:
        sub_1000AA894(v117, &qword_100261D90);
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
      v97(v115, 1, 1, v112);
    }
    uint64_t v98 = v120;
    sub_1000FB560(v122, &v123);
    uint64_t v120 = v98;
    if (v98)
    {
LABEL_92:
      __break(1u);
      return;
    }
    uint64_t v99 = (void *)v123;
    id v100 = [(id)v123 creationDate];

    if (v100)
    {
      Swift::String v101 = v108;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v102 = (uint64_t)v110;
      uint64_t v103 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 32);
      uint64_t v104 = v101;
      uint64_t v105 = v112;
      v103((uint64_t)v110, v104, v112);
      v97(v102, 0, 1, v105);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121)(v102, 1, v105) != 1)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v67, v26);
        v103((uint64_t)v109, v110, v112);
LABEL_89:
        sub_1000AA894(v115, &qword_100261D90);
        goto LABEL_90;
      }
    }
    else
    {
      v97((uint64_t)v110, 1, 1, v112);
    }
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v67, v26);
    sub_1000AA894((uint64_t)v110, &qword_100261D90);
    goto LABEL_89;
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v26);
  LODWORD(v116) = 0;
  LODWORD(v117) = 0;
  int v29 = 1;
  LODWORD(v115) = 1;
LABEL_75:
  uint64_t v28 = v121;
  uint64_t v27 = v122;
  sub_1000ABFF0((uint64_t)v119);
  (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v27, v114);
  sub_1000AA8F0(*(void *)(v27 + *(int *)(v28 + 20)), *(void *)(v27 + *(int *)(v28 + 20) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v30 = (char)v118;
  swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    if ((v115 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_5:
  if (v29) {
    goto LABEL_6;
  }
  if (!v115)
  {
LABEL_7:
    if (v116) {
      goto LABEL_8;
    }
LABEL_13:
    if (!v117) {
      return;
    }
    goto LABEL_14;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  if ((v116 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  if ((v117 & 1) == 0) {
    return;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v27 + *(int *)(v28 + 64), v112);
}

void sub_1000FA95C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v5 - 8);
  Swift::String v101 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v95 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v103 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v102 = (char *)&v95 - v14;
  uint64_t v15 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v105 = *(void *)(v18 - 8);
  uint64_t v106 = v18;
  __chkstk_darwin(v18);
  uint64_t v104 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0xD00000000000001ELL && v20 == 0x80000001001D25E0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      sub_1000FF3A8();
      swift_allocError();
      *uint64_t v33 = 0;
      swift_willThrow();

      return;
    }
  }
  uint64_t v99 = v11;
  id v100 = v9;
  uint64_t v98 = v10;
  id v22 = [a1 encryptedValues];
  swift_getObjectType();
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v22 objectForKeyedSubscript:v23];

  if (!v24) {
    goto LABEL_9;
  }
  id v109 = v24;
  sub_1000AA024(&qword_1002629D0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v95 = v2;
  unint64_t v25 = v108;
  uint64_t v96 = v107;
  uint64_t v97 = a2;
  id v26 = [a1 recordID];
  id v27 = [v26 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v105;
  uint64_t v28 = v106;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v17, 1, v106) != 1)
  {
    uint64_t v34 = v104;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v104, v17, v28);
    uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
    uint64_t v36 = v97;
    v35(v97, v34, v28);
    uint64_t v37 = (int *)type metadata accessor for DeviceSupportInformationRecord();
    unint64_t v38 = (int **)(v36 + v37[6]);
    *unint64_t v38 = v96;
    v38[1] = (int *)v25;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v40 = v107;
    unint64_t v39 = v108;
    if (!v108) {
      unint64_t v40 = 0;
    }
    unint64_t v41 = 0xE000000000000000;
    if (!v108) {
      unint64_t v39 = 0xE000000000000000;
    }
    uint64_t v42 = (int **)(v36 + v37[7]);
    *uint64_t v42 = v40;
    v42[1] = (int *)v39;
    CKRecordKeyValueSetting.subscript.getter();
    uint64_t v44 = v107;
    unint64_t v43 = v108;
    if (!v108)
    {
      uint64_t v44 = 0;
      unint64_t v43 = 0xE000000000000000;
    }
    unint64_t v45 = (int **)(v36 + v37[8]);
    *unint64_t v45 = v44;
    v45[1] = (int *)v43;
    CKRecordKeyValueSetting.subscript.getter();
    uint64_t v47 = v107;
    unint64_t v46 = v108;
    if (!v108)
    {
      uint64_t v47 = 0;
      unint64_t v46 = 0xE000000000000000;
    }
    unint64_t v48 = (int **)(v36 + v37[9]);
    *unint64_t v48 = v47;
    v48[1] = (int *)v46;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v50 = v107;
    unint64_t v49 = v108;
    if (!v108)
    {
      unint64_t v50 = 0;
      unint64_t v49 = 0xE000000000000000;
    }
    unint64_t v51 = (int **)(v36 + v37[10]);
    *unint64_t v51 = v50;
    v51[1] = (int *)v49;
    CKRecordKeyValueSetting.subscript.getter();
    unint64_t v53 = v107;
    unint64_t v52 = v108;
    if (!v108)
    {
      unint64_t v53 = 0;
      unint64_t v52 = 0xE000000000000000;
    }
    uint64_t v54 = (int **)(v36 + v37[11]);
    *uint64_t v54 = v53;
    v54[1] = (int *)v52;
    CKRecordKeyValueSetting.subscript.getter();
    uint64_t v56 = v107;
    unint64_t v55 = v108;
    if (!v108)
    {
      uint64_t v56 = 0;
      unint64_t v55 = 0xE000000000000000;
    }
    uint64_t v57 = (int **)(v36 + v37[12]);
    *uint64_t v57 = v56;
    v57[1] = (int *)v55;
    CKRecordKeyValueSetting.subscript.getter();
    uint64_t v59 = v107;
    unint64_t v58 = v108;
    if (!v108)
    {
      uint64_t v59 = 0;
      unint64_t v58 = 0xE000000000000000;
    }
    unint64_t v60 = (int **)(v36 + v37[13]);
    *unint64_t v60 = v59;
    v60[1] = (int *)v58;
    CKRecordKeyValueSetting.subscript.getter();
    uint64_t v62 = v107;
    unint64_t v61 = v108;
    if (!v108)
    {
      uint64_t v62 = 0;
      unint64_t v61 = 0xE000000000000000;
    }
    unint64_t v63 = (int **)(v36 + v37[14]);
    *unint64_t v63 = v62;
    v63[1] = (int *)v61;
    id v64 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    [a1 encodeSystemFieldsWithCoder:v64];
    [v64 finishEncoding];
    id v65 = [v64 encodedData];
    uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v68 = v67;

    unint64_t v69 = (uint64_t *)(v36 + v37[5]);
    *unint64_t v69 = v66;
    v69[1] = v68;
    id v70 = [a1 valuesByKey];
    NSString v71 = String._bridgeToObjectiveC()();
    id v72 = [v70 objectForKeyedSubscript:v71];
    swift_unknownObjectRelease();

    if (v72)
    {
      self;
      uint64_t v73 = (void *)swift_dynamicCastObjCClass();
      if (v73)
      {
        id v74 = [v73 recordID];
        id v75 = [v74 recordName];

        uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v77;
        swift_unknownObjectRelease();

        goto LABEL_36;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v76 = 0;
LABEL_36:
    uint64_t v96 = v37;
    id v78 = (uint64_t *)(v36 + v37[15]);
    *id v78 = v76;
    v78[1] = v41;
    id v79 = [a1 modificationDate];
    uint64_t v80 = v99;
    if (v79)
    {
      unint64_t v81 = v79;
      uint64_t v82 = v103;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v83 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
      uint64_t v84 = (uint64_t)v100;
      uint64_t v85 = v98;
      v83(v100, v82, v98);
      uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
      v86(v84, 0, 1, v85);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v84, 1, v85) != 1)
      {
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v106);
        uint64_t v87 = v102;
        v83(v102, v100, v85);
        uint64_t v88 = v97;
LABEL_46:
        v83((char *)(v88 + v96[16]), v87, v85);
        return;
      }
    }
    else
    {
      uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
      uint64_t v85 = v98;
      v86((uint64_t)v100, 1, 1, v98);
    }
    id v89 = [a1 creationDate];
    uint64_t v87 = v102;
    if (v89)
    {
      id v90 = v89;
      id v91 = v103;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v92 = (uint64_t)v101;
      uint64_t v93 = v91;
      uint64_t v94 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
      v94(v101, v93, v85);
      v86(v92, 0, 1, v85);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v92, 1, v85) != 1)
      {
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v106);
        v94(v87, (char *)v92, v85);
LABEL_45:
        uint64_t v88 = v97;
        sub_1000AA894((uint64_t)v100, &qword_100261D90);
        unint64_t v83 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v92 = (uint64_t)v101;
      v86((uint64_t)v101, 1, 1, v85);
    }
    static Date.now.getter();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v106);
    sub_1000AA894(v92, &qword_100261D90);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  sub_1000AA894((uint64_t)v17, &qword_100261EA0);
LABEL_9:
  static os_log_type_t.error.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1001CFDB0;
  *(void *)(v30 + 56) = sub_1000B66A0(0, (unint64_t *)&qword_100262960);
  *(void *)(v30 + 64) = sub_1000B6740();
  *(void *)(v30 + 32) = a1;
  id v31 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1000FF3A8();
  swift_allocError();
  unsigned char *v32 = 2;
  swift_willThrow();
  swift_unknownObjectRelease();
}

void sub_1000FB560(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DeviceSupportInformationRecord();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100130420(*(void *)(a1 + *(int *)(v7 + 28)), *(void *)(a1 + *(int *)(v7 + 28) + 8));
  sub_1000FF088(a1, (uint64_t)v6);
  if (v8)
  {
    sub_1000FF0EC((uint64_t)v6);
    id v22 = v8;
    sub_1000FB7E8(&v22);
    id v9 = [v8 valueStore];
    [v9 resetChangedKeys];

    id v10 = [v8 encryptedValueStore];
    [v10 resetChangedKeys];
  }
  else
  {
    sub_1000B66A0(0, (unint64_t *)&qword_100262960);
    sub_1000B66A0(0, &qword_1002629E0);
    uint64_t v11 = UUID.uuidString.getter();
    uint64_t v13 = v12;
    sub_1000B66A0(0, (unint64_t *)&unk_100261E70);
    v14._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14._object = v15;
    v16._object = (void *)0x80000001001F6D00;
    v16._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v16, v14).super.isa;
    v18._uint64_t countAndFlagsBits = v11;
    v18._object = v13;
    v19.super.Class isa = CKRecordID.init(recordName:zoneID:)(v18, (CKRecordZoneID)isa).super.isa;
    static os_log_type_t.default.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    v20._object = (void *)0x80000001001D25E0;
    v20._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    uint64_t v8 = CKRecord.init(recordType:recordID:)(v20, v19).super.isa;
    sub_1000FF0EC((uint64_t)v6);
    id v22 = v8;
    sub_1000FB7E8(&v22);
  }
  *a2 = v8;
}

uint64_t sub_1000FB7E8(id *a1)
{
  uint64_t v2 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v64 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.debug.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1001CFDB0;
  uint64_t v66 = a1;
  id v9 = *a1;
  id v10 = [v9 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000AA5E0();
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v67 = (int *)type metadata accessor for DeviceSupportInformationRecord();
  uint64_t v14 = v65;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000AA894((uint64_t)v4, &qword_100261EA0);
  }
  else
  {
    uint64_t v15 = v6;
    Swift::String v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v17 = v64;
    v16(v64, v4, v5);
    id v18 = [v9 valuesByKey];
    UUID.uuidString.getter();
    id v19 = objc_allocWithZone((Class)CKRecordID);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [v19 initWithRecordName:v20];

    id v22 = [objc_allocWithZone((Class)CKReference) initWithRecordID:v21 action:1];
    NSString v23 = String._bridgeToObjectiveC()();
    [v18 setObject:v22 forKeyedSubscript:v23];
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v5);
  }
  id v24 = [*v66 encryptedValues];
  swift_getObjectType();
  uint64_t v66 = (id *)0xD000000000000010;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v25 = v14;
  id v26 = (uint64_t *)(v14 + v67[6]);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  if (!v69) {
    goto LABEL_11;
  }
  if (v68 == v28 && v69 == v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
LABEL_11:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v28;
    uint64_t v69 = v27;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_12:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v30 = (uint64_t *)(v25 + v67[7]);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  if (!v69) {
    goto LABEL_17;
  }
  if (v68 != v32 || v69 != v31)
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_18;
    }
LABEL_17:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v32;
    uint64_t v69 = v31;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v34 = (uint64_t *)(v25 + v67[8]);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  if (!v69) {
    goto LABEL_23;
  }
  if (v68 == v36 && v69 == v35)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
LABEL_23:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v36;
    uint64_t v69 = v35;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_24:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v38 = (uint64_t *)(v25 + v67[9]);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  if (!v69) {
    goto LABEL_29;
  }
  if (v68 != v40 || v69 != v39)
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_30;
    }
LABEL_29:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v40;
    uint64_t v69 = v39;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v42 = (uint64_t *)(v25 + v67[10]);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  if (!v69) {
    goto LABEL_35;
  }
  if (v68 == v44 && v69 == v43)
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0)
  {
LABEL_35:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v44;
    uint64_t v69 = v43;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_36:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v46 = (uint64_t *)(v25 + v67[11]);
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  if (!v69) {
    goto LABEL_41;
  }
  if (v68 != v48 || v69 != v47)
  {
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v49) {
      goto LABEL_42;
    }
LABEL_41:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v48;
    uint64_t v69 = v47;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_42;
  }
  swift_bridgeObjectRelease();
LABEL_42:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v50 = (uint64_t *)(v25 + v67[12]);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  if (!v69) {
    goto LABEL_47;
  }
  if (v68 == v52 && v69 == v51)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
  {
LABEL_47:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v52;
    uint64_t v69 = v51;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_48:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v54 = (uint64_t *)(v25 + v67[13]);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  if (!v69) {
    goto LABEL_53;
  }
  if (v68 != v56 || v69 != v55)
  {
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v57) {
      goto LABEL_54;
    }
LABEL_53:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v56;
    uint64_t v69 = v55;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_54;
  }
  swift_bridgeObjectRelease();
LABEL_54:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v58 = (uint64_t *)(v25 + v67[14]);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  if (!v69) {
    goto LABEL_59;
  }
  if (v68 == v60 && v69 == v59)
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0)
  {
LABEL_59:
    id v70 = &type metadata for String;
    NSString v71 = &protocol witness table for String;
    uint64_t v68 = v60;
    uint64_t v69 = v59;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1000FC230(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000FCDD8(a1))
  {
    id v7 = [a1 budsFirmwareVersion];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v129 = v4;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      uint64_t v12 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 28));
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      BOOL v15 = *v12 == v9 && v14 == v11;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v119 = v6;
        uint64_t v128 = v3;
        swift_bridgeObjectRetain();
        sub_1000E8734(v13, v14, v130);
        uint64_t v23 = v130[1];
        uint64_t v125 = v130[2];
        uint64_t v126 = v130[0];
        uint64_t v127 = v130[4];
        char v24 = v131;
        uint64_t v123 = v130[5];
        uint64_t v124 = v130[3];
        uint64_t v25 = v134;
        uint64_t v121 = v133;
        uint64_t v122 = v132;
        sub_1000E8A70((uint64_t)v130, (uint64_t)v153, &qword_1002625C8);
        if (v153[1])
        {
          char v26 = v24 & 1;
          uint64_t v27 = v126;
          uint64_t v28 = v127;
          uint64_t v30 = v124;
          uint64_t v29 = v125;
          uint64_t v32 = v122;
          uint64_t v31 = v123;
          uint64_t v33 = v121;
        }
        else
        {
          if (qword_100261898 != -1) {
            swift_once();
          }
          uint64_t v23 = *((void *)&xmmword_10026ABA8 + 1);
          uint64_t v125 = qword_10026ABB8;
          uint64_t v126 = xmmword_10026ABA8;
          uint64_t v123 = *((void *)&xmmword_10026ABC8 + 1);
          uint64_t v28 = xmmword_10026ABC8;
          uint64_t v124 = qword_10026ABC0;
          LODWORD(v127) = byte_10026ABD8;
          uint64_t v25 = *((void *)&xmmword_10026ABE8 + 1);
          uint64_t v121 = xmmword_10026ABE8;
          uint64_t v122 = qword_10026ABE0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v33 = v121;
          uint64_t v32 = v122;
          uint64_t v31 = v123;
          uint64_t v30 = v124;
          uint64_t v29 = v125;
          uint64_t v27 = v126;
          char v26 = v127;
        }
        v169[0] = v27;
        v169[1] = v23;
        uint64_t v120 = v25;
        uint64_t v121 = v23;
        v169[2] = v29;
        v169[3] = v30;
        uint64_t v127 = v28;
        v169[4] = v28;
        v169[5] = v31;
        char v170 = v26;
        uint64_t v171 = v32;
        uint64_t v172 = v33;
        uint64_t v173 = v25;
        swift_bridgeObjectRetain();
        uint64_t v117 = v9;
        sub_1000E8734(v9, v11, v135);
        uint64_t v34 = v135[1];
        uint64_t v122 = v135[0];
        uint64_t v126 = v135[2];
        uint64_t v35 = v135[4];
        uint64_t v125 = v135[3];
        char v36 = v136;
        uint64_t v124 = v135[5];
        uint64_t v123 = v137;
        uint64_t v37 = v139;
        uint64_t v118 = v138;
        sub_1000E8A70((uint64_t)v135, (uint64_t)v152, &qword_1002625C8);
        v116[1] = v14;
        if (v152[1])
        {
          char v38 = v36 & 1;
          uint64_t v39 = v34;
          uint64_t v40 = v122;
          uint64_t v41 = v123;
          uint64_t v42 = v118;
          uint64_t v6 = v119;
          uint64_t v44 = v125;
          uint64_t v43 = v126;
          uint64_t v45 = v124;
        }
        else
        {
          uint64_t v6 = v119;
          if (qword_100261898 != -1) {
            swift_once();
          }
          uint64_t v39 = *((void *)&xmmword_10026ABA8 + 1);
          uint64_t v35 = xmmword_10026ABC8;
          uint64_t v125 = qword_10026ABC0;
          uint64_t v126 = qword_10026ABB8;
          uint64_t v124 = *((void *)&xmmword_10026ABC8 + 1);
          LODWORD(v11_Block_object_dispose(&STACK[0x290], 8) = byte_10026ABD8;
          uint64_t v42 = xmmword_10026ABE8;
          uint64_t v122 = xmmword_10026ABA8;
          uint64_t v123 = qword_10026ABE0;
          uint64_t v37 = *((void *)&xmmword_10026ABE8 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v41 = v123;
          uint64_t v45 = v124;
          uint64_t v44 = v125;
          uint64_t v43 = v126;
          uint64_t v40 = v122;
          char v38 = v118;
        }
        v164[0] = v40;
        v164[1] = v39;
        v164[2] = v43;
        v164[3] = v44;
        v164[4] = v35;
        v164[5] = v45;
        char v165 = v38;
        uint64_t v166 = v41;
        uint64_t v167 = v42;
        uint64_t v168 = v37;
        BOOL v46 = sub_1000E8034(v164, v169);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v46)
        {
          *uint64_t v12 = v117;
          v12[1] = v11;
        }
        uint64_t v3 = v128;
      }
      uint64_t v4 = v129;
    }
    id v47 = [a1 caseName];
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v51 = v50;

      uint64_t v52 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 32));
      BOOL v53 = *v52 == v49 && v52[1] == v51;
      if (v53 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *uint64_t v52 = v49;
        v52[1] = v51;
      }
    }
    id v54 = [a1 caseFirmwareVersion];
    if (v54)
    {
      uint64_t v55 = v54;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v58 = v57;

      uint64_t v59 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 36));
      if (*v59 == v56 && v59[1] == v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t *v59 = v56;
        v59[1] = v58;
      }
    }
    id v60 = [a1 caseSerialNumber];
    if (v60)
    {
      unint64_t v61 = v60;
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      uint64_t v65 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 40));
      if (*v65 == v62 && v65[1] == v64 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t *v65 = v62;
        v65[1] = v64;
      }
    }
    id v66 = [a1 hardwareVersion];
    if (v66)
    {
      uint64_t v67 = v66;
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v70 = v69;

      NSString v71 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 44));
      if (*v71 == v68 && v71[1] == v70 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *NSString v71 = v68;
        v71[1] = v70;
      }
    }
    id v72 = [a1 leftBudSerialNumber];
    if (v72)
    {
      uint64_t v73 = v72;
      uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v76 = v75;

      unint64_t v77 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 48));
      if (*v77 == v74 && v77[1] == v76 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t *v77 = v74;
        v77[1] = v76;
      }
    }
    id v78 = [a1 rightBudSerialNumber];
    if (v78)
    {
      id v79 = v78;
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v82 = v81;

      unint64_t v83 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 52));
      if (*v83 == v80 && v83[1] == v82 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        *unint64_t v83 = v80;
        v83[1] = v82;
      }
    }
    id v84 = [a1 ancAssetVersion];
    if (v84)
    {
      uint64_t v85 = v84;
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v88 = v87;

      id v89 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 56));
      uint64_t v90 = *v89;
      uint64_t v91 = v89[1];
      if (*v89 == v86 && v91 == v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v128 = v3;
        uint64_t v129 = v4;
        swift_bridgeObjectRetain();
        sub_1000E8734(v90, v91, v140);
        uint64_t v92 = v140[1];
        uint64_t v125 = v140[2];
        uint64_t v126 = v140[0];
        uint64_t v93 = v140[4];
        char v94 = v141;
        uint64_t v123 = v140[5];
        uint64_t v124 = v140[3];
        uint64_t v121 = v143;
        uint64_t v122 = v142;
        uint64_t v127 = v144;
        sub_1000E8A70((uint64_t)v140, (uint64_t)v151, &qword_1002625C8);
        if (v151[1])
        {
          char v95 = v94 & 1;
          uint64_t v96 = v126;
          uint64_t v97 = v127;
          uint64_t v99 = v124;
          uint64_t v98 = v125;
          uint64_t v101 = v122;
          uint64_t v100 = v123;
          uint64_t v102 = v121;
        }
        else
        {
          if (qword_100261898 != -1) {
            swift_once();
          }
          uint64_t v92 = *((void *)&xmmword_10026ABA8 + 1);
          uint64_t v125 = qword_10026ABB8;
          uint64_t v126 = xmmword_10026ABA8;
          uint64_t v123 = *((void *)&xmmword_10026ABC8 + 1);
          uint64_t v93 = xmmword_10026ABC8;
          uint64_t v124 = qword_10026ABC0;
          LODWORD(v127) = byte_10026ABD8;
          uint64_t v97 = *((void *)&xmmword_10026ABE8 + 1);
          uint64_t v121 = xmmword_10026ABE8;
          uint64_t v122 = qword_10026ABE0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v102 = v121;
          uint64_t v101 = v122;
          uint64_t v100 = v123;
          uint64_t v99 = v124;
          uint64_t v98 = v125;
          uint64_t v96 = v126;
          char v95 = v127;
        }
        v159[0] = v96;
        uint64_t v120 = v93;
        uint64_t v121 = v92;
        v159[1] = v92;
        v159[2] = v98;
        v159[3] = v99;
        v159[4] = v93;
        v159[5] = v100;
        char v160 = v95;
        uint64_t v161 = v101;
        uint64_t v162 = v102;
        uint64_t v127 = v97;
        uint64_t v163 = v97;
        swift_bridgeObjectRetain();
        uint64_t v118 = v86;
        sub_1000E8734(v86, v88, v145);
        uint64_t v103 = v145[1];
        uint64_t v125 = v145[2];
        uint64_t v126 = v145[0];
        uint64_t v104 = v145[4];
        char v105 = v146;
        uint64_t v123 = v145[5];
        uint64_t v124 = v145[3];
        uint64_t v122 = v147;
        uint64_t v106 = v149;
        uint64_t v119 = v148;
        sub_1000E8A70((uint64_t)v145, (uint64_t)v150, &qword_1002625C8);
        if (v150[1])
        {
          char v107 = v105 & 1;
          uint64_t v109 = v125;
          uint64_t v108 = v126;
          uint64_t v111 = v123;
          uint64_t v110 = v124;
          uint64_t v112 = v122;
          uint64_t v113 = v119;
        }
        else
        {
          if (qword_100261898 != -1) {
            swift_once();
          }
          uint64_t v103 = *((void *)&xmmword_10026ABA8 + 1);
          uint64_t v125 = qword_10026ABB8;
          uint64_t v126 = xmmword_10026ABA8;
          uint64_t v123 = *((void *)&xmmword_10026ABC8 + 1);
          uint64_t v104 = xmmword_10026ABC8;
          uint64_t v124 = qword_10026ABC0;
          LODWORD(v119) = byte_10026ABD8;
          uint64_t v113 = (char *)xmmword_10026ABE8;
          uint64_t v122 = qword_10026ABE0;
          uint64_t v106 = *((void *)&xmmword_10026ABE8 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v112 = v122;
          uint64_t v111 = v123;
          uint64_t v110 = v124;
          uint64_t v109 = v125;
          uint64_t v108 = v126;
          char v107 = (char)v119;
        }
        v154[0] = v108;
        v154[1] = v103;
        v154[2] = v109;
        v154[3] = v110;
        v154[4] = v104;
        v154[5] = v111;
        char v155 = v107;
        uint64_t v156 = v112;
        id v157 = v113;
        uint64_t v158 = v106;
        BOOL v114 = sub_1000E8034(v154, v159);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v114)
        {
          uint64_t *v89 = v118;
          v89[1] = v88;
        }
        uint64_t v3 = v128;
        uint64_t v4 = v129;
      }
    }
    static Date.now.getter();
    uint64_t v115 = type metadata accessor for DeviceSupportInformationRecord();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v1 + *(int *)(v115 + 64), v6, v3);
  }
  else
  {
    static os_log_type_t.info.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1001CFDB0;
    id v17 = a1;
    id v18 = [v17 description];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_1000AA5E0();
    *(void *)(v16 + 32) = v19;
    *(void *)(v16 + 40) = v21;
    os_log(_:dso:log:_:_:)();
    return swift_bridgeObjectRelease();
  }
}

id sub_1000FCDD8(void *a1)
{
  uint64_t v3 = type metadata accessor for DeviceSupportInformationRecord();
  __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v198 - v5;
  __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  unint64_t v222 = (char *)&v198 - v9;
  __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  id v221 = (char *)&v198 - v12;
  __chkstk_darwin(v13);
  __chkstk_darwin((char *)&v198 - v14);
  uint64_t v225 = (uint64_t)&v198 - v15;
  __chkstk_darwin(v16);
  __chkstk_darwin(v17);
  uint64_t v226 = (uint64_t)&v198 - v18;
  __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  uint64_t v223 = (uint64_t)&v198 - v21;
  __chkstk_darwin(v22);
  char v24 = (char *)&v198 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v198 - v26;
  __chkstk_darwin(v28);
  char v36 = (char *)&v198 - v35;
  if (!a1)
  {
    char v51 = 0;
    return (id)(v51 & 1);
  }
  uint64_t v217 = v30;
  uint64_t v218 = v31;
  uint64_t v215 = v34;
  uint64_t v216 = v29;
  uint64_t v213 = v32;
  uint64_t v214 = v33;
  id v220 = a1;
  id v37 = [v220 budsFirmwareVersion];
  uint64_t v224 = v1;
  uint64_t v219 = (int *)v3;
  if (!v37)
  {
    sub_1000FF088(v1, (uint64_t)v36);
    goto LABEL_9;
  }
  char v38 = v37;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  swift_bridgeObjectRelease();
  sub_1000FF088(v1, (uint64_t)v36);
  if (!v40)
  {
LABEL_9:
    sub_1000FF0EC((uint64_t)v36);
    sub_1000FF088(v1, (uint64_t)v27);
    goto LABEL_20;
  }
  unint64_t v212 = v6;
  id result = [v220 budsFirmwareVersion];
  if (!result)
  {
    __break(1u);
    goto LABEL_116;
  }
  uint64_t v42 = result;
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  sub_1000E8734(v43, v45, v227);
  uint64_t v47 = v227[0];
  uint64_t v46 = v227[1];
  uint64_t v48 = v227[4];
  uint64_t v210 = v227[3];
  uint64_t v211 = v227[2];
  char v49 = v228;
  uint64_t v208 = v229;
  uint64_t v209 = v227[5];
  uint64_t v50 = v231;
  uint64_t v207 = v230;
  sub_1000E8A70((uint64_t)v227, (uint64_t)v250, &qword_1002625C8);
  uint64_t v198 = v27;
  uint64_t v199 = v24;
  if (v250[1])
  {
    uint64_t v201 = v47;
    uint64_t v202 = v48;
    uint64_t v203 = v50;
    uint64_t v204 = v46;
    int v200 = v49 & 1;
  }
  else
  {
    if (qword_100261898 != -1) {
      swift_once();
    }
    uint64_t v52 = *((void *)&xmmword_10026ABA8 + 1);
    uint64_t v201 = xmmword_10026ABA8;
    uint64_t v53 = xmmword_10026ABC8;
    uint64_t v210 = qword_10026ABC0;
    uint64_t v211 = qword_10026ABB8;
    int v200 = byte_10026ABD8;
    uint64_t v208 = qword_10026ABE0;
    uint64_t v209 = *((void *)&xmmword_10026ABC8 + 1);
    uint64_t v203 = *((void *)&xmmword_10026ABE8 + 1);
    uint64_t v207 = xmmword_10026ABE8;
    swift_bridgeObjectRetain();
    uint64_t v204 = v52;
    swift_bridgeObjectRetain();
    uint64_t v202 = v53;
    swift_bridgeObjectRetain();
  }
  id v54 = (uint64_t *)&v36[*(int *)(v3 + 28)];
  uint64_t v55 = *v54;
  uint64_t v56 = v54[1];
  swift_bridgeObjectRetain();
  sub_1000E8734(v55, v56, v232);
  uint64_t v57 = v232[1];
  uint64_t v58 = v232[3];
  uint64_t v205 = v232[2];
  uint64_t v206 = v232[0];
  uint64_t v60 = v232[4];
  uint64_t v59 = v232[5];
  char v62 = v233;
  uint64_t v61 = v234;
  uint64_t v64 = v235;
  uint64_t v63 = v236;
  sub_1000E8A70((uint64_t)v232, (uint64_t)v249, &qword_1002625C8);
  if (v249[1])
  {
    char v65 = v62 & 1;
    uint64_t v66 = v201;
    uint64_t v68 = v205;
    uint64_t v67 = v206;
    uint64_t v69 = v58;
    uint64_t v70 = v59;
  }
  else
  {
    if (qword_100261898 != -1) {
      swift_once();
    }
    uint64_t v57 = *((void *)&xmmword_10026ABA8 + 1);
    uint64_t v71 = qword_10026ABC0;
    uint64_t v205 = qword_10026ABB8;
    uint64_t v206 = xmmword_10026ABA8;
    uint64_t v72 = *((void *)&xmmword_10026ABC8 + 1);
    uint64_t v60 = xmmword_10026ABC8;
    char v73 = byte_10026ABD8;
    uint64_t v61 = qword_10026ABE0;
    uint64_t v63 = *((void *)&xmmword_10026ABE8 + 1);
    uint64_t v64 = xmmword_10026ABE8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = v72;
    uint64_t v69 = v71;
    uint64_t v68 = v205;
    uint64_t v67 = v206;
    char v65 = v73;
    uint64_t v66 = v201;
  }
  v261[0] = v66;
  v261[1] = v204;
  v261[2] = v211;
  v261[3] = v210;
  v261[4] = v202;
  v261[5] = v209;
  char v262 = v200;
  uint64_t v263 = v208;
  uint64_t v264 = v207;
  uint64_t v265 = v203;
  v266[0] = v67;
  v266[1] = v57;
  v266[2] = v68;
  v266[3] = v69;
  v266[4] = v60;
  v266[5] = v70;
  char v267 = v65;
  uint64_t v268 = v61;
  uint64_t v269 = v64;
  uint64_t v270 = v63;
  char v74 = sub_1000E81D4(v261, v266);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000FF0EC((uint64_t)v36);
  uint64_t v75 = v224;
  uint64_t v27 = v198;
  sub_1000FF088(v224, (uint64_t)v198);
  uint64_t v6 = v212;
  char v24 = v199;
  if (v74)
  {
    sub_1000FF0EC((uint64_t)v27);
    id v76 = v220;
    uint64_t v77 = v226;
LABEL_71:
    uint64_t v89 = v223;
    sub_1000FF088(v75, v223);
LABEL_72:
    sub_1000FF0EC(v89);
    sub_1000FF088(v75, v77);
    uint64_t v94 = v75;
LABEL_73:
    sub_1000FF0EC(v77);
    uint64_t v104 = (uint64_t)v221;
    uint64_t v103 = (uint64_t)v222;
LABEL_74:
    uint64_t v150 = v225;
    sub_1000FF088(v94, v225);
LABEL_75:
    sub_1000FF0EC(v150);
    sub_1000FF088(v94, v104);
LABEL_76:
    sub_1000FF0EC(v104);
LABEL_77:
    sub_1000FF088(v94, v103);
LABEL_78:
    sub_1000FF0EC(v103);
LABEL_79:
    sub_1000FF088(v94, (uint64_t)v6);
LABEL_80:
    sub_1000FF0EC((uint64_t)v6);

    char v51 = 1;
    return (id)(v51 & 1);
  }
LABEL_20:
  id v76 = v220;
  id v78 = [v220 caseName:v198];
  if (!v78)
  {
    sub_1000FF088((uint64_t)v27, (uint64_t)v24);
    uint64_t v77 = v226;
    uint64_t v82 = v218;
    goto LABEL_27;
  }
  id v79 = v78;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v80;

  swift_bridgeObjectRelease();
  sub_1000FF088((uint64_t)v27, (uint64_t)v24);
  uint64_t v77 = v226;
  uint64_t v82 = v218;
  if (!v81)
  {
LABEL_27:
    sub_1000FF0EC((uint64_t)v24);
    sub_1000FF0EC((uint64_t)v27);
    goto LABEL_28;
  }
  id v83 = [v76 caseName];
  if (!v83)
  {
    swift_bridgeObjectRetain();
    sub_1000FF0EC((uint64_t)v24);
    sub_1000FF0EC((uint64_t)v27);
    swift_bridgeObjectRelease();
    uint64_t v75 = v224;
    goto LABEL_71;
  }
  id v84 = v83;
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v87 = v86;

  uint64_t v88 = &v24[v219[8]];
  if (v85 == *(void *)v88 && v87 == *((void *)v88 + 1))
  {
    swift_bridgeObjectRetain();
    sub_1000FF0EC((uint64_t)v24);
    sub_1000FF0EC((uint64_t)v27);
    swift_bridgeObjectRelease_n();
    uint64_t v82 = v218;
LABEL_28:
    uint64_t v89 = v223;
    sub_1000FF088(v224, v223);
    goto LABEL_29;
  }
  char v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000FF0EC((uint64_t)v24);
  sub_1000FF0EC((uint64_t)v27);
  swift_bridgeObjectRelease_n();
  uint64_t v89 = v223;
  uint64_t v75 = v224;
  sub_1000FF088(v224, v223);
  uint64_t v82 = v218;
  if ((v167 & 1) == 0) {
    goto LABEL_72;
  }
LABEL_29:
  id v90 = [v76 caseFirmwareVersion];
  if (!v90)
  {
    sub_1000FF088(v89, v82);
    uint64_t v94 = v224;
    goto LABEL_37;
  }
  uint64_t v91 = v90;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v93 = v92;

  swift_bridgeObjectRelease();
  sub_1000FF088(v89, v82);
  uint64_t v94 = v224;
  if (!v93)
  {
LABEL_37:
    sub_1000FF0EC(v82);
    sub_1000FF0EC(v89);
    sub_1000FF088(v94, v77);
    goto LABEL_38;
  }
  id result = [v76 caseFirmwareVersion];
  if (!result)
  {
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  char v95 = result;
  uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v98 = v97;

  unint64_t v99 = sub_100154098(v96, v98);
  if (v100) {
    unint64_t v99 = 0;
  }
  char v101 = sub_1000FDF84(v99);
  sub_1000FF0EC(v82);
  sub_1000FF0EC(v89);
  uint64_t v94 = v224;
  sub_1000FF088(v224, v77);
  if (v101) {
    goto LABEL_73;
  }
LABEL_38:
  id v102 = [v76 caseSerialNumber];
  uint64_t v104 = (uint64_t)v221;
  uint64_t v103 = (uint64_t)v222;
  if (!v102)
  {
    uint64_t v108 = v226;
    uint64_t v109 = v217;
    sub_1000FF088(v226, v217);
    goto LABEL_45;
  }
  char v105 = v102;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v107 = v106;

  swift_bridgeObjectRelease();
  uint64_t v108 = v226;
  uint64_t v109 = v217;
  sub_1000FF088(v226, v217);
  if (!v107)
  {
LABEL_45:
    sub_1000FF0EC(v109);
    sub_1000FF0EC(v108);
    goto LABEL_46;
  }
  id v110 = [v76 caseSerialNumber];
  if (!v110)
  {
    uint64_t v169 = v217;
    swift_bridgeObjectRetain();
    sub_1000FF0EC(v169);
    sub_1000FF0EC(v226);
    swift_bridgeObjectRelease();
    goto LABEL_74;
  }
  uint64_t v111 = v110;
  uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v114 = v113;

  uint64_t v115 = (void *)(v217 + v219[10]);
  if (v112 == *v115 && v114 == v115[1])
  {
    swift_bridgeObjectRetain();
    sub_1000FF0EC(v217);
    sub_1000FF0EC(v226);
    swift_bridgeObjectRelease_n();
LABEL_46:
    sub_1000FF088(v94, v225);
    goto LABEL_47;
  }
  char v170 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000FF0EC(v217);
  sub_1000FF0EC(v226);
  swift_bridgeObjectRelease_n();
  uint64_t v150 = v225;
  sub_1000FF088(v94, v225);
  if ((v170 & 1) == 0) {
    goto LABEL_75;
  }
LABEL_47:
  id v116 = [v76 hardwareVersion];
  if (!v116)
  {
    uint64_t v120 = v225;
    uint64_t v121 = v216;
    sub_1000FF088(v225, v216);
    goto LABEL_54;
  }
  uint64_t v117 = v116;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v119 = v118;

  swift_bridgeObjectRelease();
  uint64_t v120 = v225;
  uint64_t v121 = v216;
  sub_1000FF088(v225, v216);
  if (!v119)
  {
LABEL_54:
    sub_1000FF0EC(v121);
    sub_1000FF0EC(v120);
    sub_1000FF088(v94, v104);
    goto LABEL_55;
  }
  id result = [v76 hardwareVersion];
  if (!result)
  {
LABEL_117:
    __break(1u);
    goto LABEL_118;
  }
  uint64_t v122 = result;
  uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v125 = v124;

  uint64_t v126 = (void *)(v216 + v219[11]);
  if (*v126 == v123 && v126[1] == v125)
  {
    swift_bridgeObjectRelease();
    uint64_t v120 = v225;
    uint64_t v121 = v216;
    goto LABEL_54;
  }
  char v168 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  sub_1000FF0EC(v216);
  sub_1000FF0EC(v225);
  sub_1000FF088(v94, v104);
  if (v168) {
    goto LABEL_76;
  }
LABEL_55:
  id v127 = [v76 leftBudSerialNumber];
  if (!v127)
  {
    uint64_t v131 = v215;
    sub_1000FF088(v104, v215);
    uint64_t v132 = v219;
    goto LABEL_62;
  }
  uint64_t v128 = v127;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v130 = v129;

  swift_bridgeObjectRelease();
  uint64_t v131 = v215;
  sub_1000FF088(v104, v215);
  uint64_t v132 = v219;
  if (!v130)
  {
LABEL_62:
    sub_1000FF0EC(v131);
    sub_1000FF0EC(v104);
    goto LABEL_63;
  }
  id v133 = [v76 leftBudSerialNumber];
  if (!v133)
  {
    uint64_t v171 = v215;
    swift_bridgeObjectRetain();
    sub_1000FF0EC(v171);
    sub_1000FF0EC(v104);
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }
  uint64_t v134 = v133;
  uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v137 = v136;

  uint64_t v138 = (void *)(v215 + v132[12]);
  if (v135 == *v138 && v137 == v138[1])
  {
    swift_bridgeObjectRetain();
    sub_1000FF0EC(v215);
    sub_1000FF0EC(v104);
    swift_bridgeObjectRelease_n();
LABEL_63:
    sub_1000FF088(v94, v103);
    goto LABEL_64;
  }
  char v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000FF0EC(v215);
  sub_1000FF0EC(v104);
  swift_bridgeObjectRelease_n();
  sub_1000FF088(v94, v103);
  if ((v172 & 1) == 0) {
    goto LABEL_78;
  }
LABEL_64:
  id v139 = [v76 rightBudSerialNumber];
  if (!v139)
  {
    uint64_t v143 = v214;
    sub_1000FF088(v103, v214);
    goto LABEL_82;
  }
  uint64_t v140 = v139;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v142 = v141;

  swift_bridgeObjectRelease();
  uint64_t v143 = v214;
  sub_1000FF088(v103, v214);
  if (!v142)
  {
LABEL_82:
    sub_1000FF0EC(v143);
    sub_1000FF0EC(v103);
    goto LABEL_83;
  }
  id v144 = [v76 rightBudSerialNumber];
  if (!v144)
  {
    uint64_t v173 = v214;
    swift_bridgeObjectRetain();
    sub_1000FF0EC(v173);
    sub_1000FF0EC(v103);
    swift_bridgeObjectRelease();
    goto LABEL_79;
  }
  uint64_t v145 = v144;
  uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v148 = v147;

  uint64_t v149 = (void *)(v214 + v132[13]);
  if (v146 == *v149 && v148 == v149[1])
  {
    swift_bridgeObjectRetain();
    sub_1000FF0EC(v214);
    sub_1000FF0EC(v103);
    swift_bridgeObjectRelease_n();
LABEL_83:
    sub_1000FF088(v94, (uint64_t)v6);
    goto LABEL_84;
  }
  char v174 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  sub_1000FF0EC(v214);
  sub_1000FF0EC(v103);
  swift_bridgeObjectRelease_n();
  sub_1000FF088(v94, (uint64_t)v6);
  if ((v174 & 1) == 0) {
    goto LABEL_80;
  }
LABEL_84:
  id v151 = [v76 ancAssetVersion];
  if (!v151)
  {
    uint64_t v155 = v213;
    sub_1000FF088((uint64_t)v6, v213);
    goto LABEL_92;
  }
  objc_super v152 = v151;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v154 = v153;

  swift_bridgeObjectRelease();
  uint64_t v155 = v213;
  sub_1000FF088((uint64_t)v6, v213);
  if (!v154)
  {
LABEL_92:

    char v51 = 0;
LABEL_113:
    sub_1000FF0EC(v155);
    sub_1000FF0EC((uint64_t)v6);
    return (id)(v51 & 1);
  }
  id result = [v76 ancAssetVersion];
  if (result)
  {
    uint64_t v156 = result;
    uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v159 = v158;

    sub_1000E8734(v157, v159, v237);
    uint64_t v161 = v237[0];
    uint64_t v160 = v237[1];
    uint64_t v162 = (char *)v237[2];
    uint64_t v163 = v237[3];
    char v164 = (char *)v237[4];
    char v165 = v238;
    uint64_t v225 = v239;
    uint64_t v226 = v237[5];
    uint64_t v166 = v241;
    uint64_t v224 = v240;
    sub_1000E8A70((uint64_t)v237, (uint64_t)v248, &qword_1002625C8);
    unint64_t v212 = v6;
    if (v248[1])
    {
      uint64_t v218 = v163;
      id v221 = v162;
      unint64_t v222 = v164;
      uint64_t v215 = v161;
      uint64_t v216 = v166;
      uint64_t v223 = v160;
      LODWORD(v217) = v165 & 1;
    }
    else
    {
      if (qword_100261898 != -1) {
        swift_once();
      }
      uint64_t v175 = *((void *)&xmmword_10026ABA8 + 1);
      id v221 = (char *)qword_10026ABB8;
      unint64_t v176 = (char *)xmmword_10026ABC8;
      uint64_t v218 = qword_10026ABC0;
      LODWORD(v217) = byte_10026ABD8;
      uint64_t v225 = qword_10026ABE0;
      uint64_t v226 = *((void *)&xmmword_10026ABC8 + 1);
      uint64_t v224 = xmmword_10026ABE8;
      uint64_t v215 = xmmword_10026ABA8;
      uint64_t v216 = *((void *)&xmmword_10026ABE8 + 1);
      swift_bridgeObjectRetain();
      uint64_t v223 = v175;
      swift_bridgeObjectRetain();
      unint64_t v222 = v176;
      swift_bridgeObjectRetain();
    }
    NSString v177 = (uint64_t *)(v213 + v132[14]);
    uint64_t v178 = *v177;
    uint64_t v179 = v177[1];
    swift_bridgeObjectRetain();
    sub_1000E8734(v178, v179, v242);
    int v180 = (int *)v242[0];
    uint64_t v219 = (int *)v242[1];
    uint64_t v182 = v242[2];
    uint64_t v181 = v242[3];
    uint64_t v183 = v242[4];
    uint64_t v184 = v242[5];
    char v185 = v243;
    uint64_t v186 = v244;
    uint64_t v187 = v245;
    uint64_t v188 = v246;
    sub_1000E8A70((uint64_t)v242, (uint64_t)v247, &qword_1002625C8);
    if (v247[1])
    {
      char v189 = v185 & 1;
      id v190 = v180;
      uint64_t v191 = v182;
      uint64_t v192 = v181;
      char v193 = v219;
      uint64_t v194 = v186;
    }
    else
    {
      if (qword_100261898 != -1) {
        swift_once();
      }
      char v193 = (int *)*((void *)&xmmword_10026ABA8 + 1);
      uint64_t v219 = (int *)xmmword_10026ABA8;
      uint64_t v196 = qword_10026ABB8;
      uint64_t v195 = qword_10026ABC0;
      uint64_t v184 = *((void *)&xmmword_10026ABC8 + 1);
      uint64_t v183 = xmmword_10026ABC8;
      char v197 = byte_10026ABD8;
      uint64_t v194 = qword_10026ABE0;
      uint64_t v188 = *((void *)&xmmword_10026ABE8 + 1);
      uint64_t v187 = xmmword_10026ABE8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v192 = v195;
      uint64_t v191 = v196;
      id v190 = v219;
      char v189 = v197;
    }
    v251[0] = v215;
    v251[1] = v223;
    v251[2] = v221;
    v251[3] = v218;
    v251[4] = v222;
    v251[5] = v226;
    char v252 = v217;
    uint64_t v253 = v225;
    uint64_t v254 = v224;
    uint64_t v255 = v216;
    v256[0] = v190;
    v256[1] = v193;
    v256[2] = v191;
    v256[3] = v192;
    v256[4] = v183;
    v256[5] = v184;
    char v257 = v189;
    uint64_t v258 = v194;
    uint64_t v259 = v187;
    uint64_t v260 = v188;
    char v51 = sub_1000E81D4(v251, v256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v6 = v212;
    uint64_t v155 = v213;
    goto LABEL_113;
  }
LABEL_118:
  __break(1u);
  return result;
}

uint64_t sub_1000FDF84(unint64_t a1)
{
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 36));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  uint64_t v7 = HIBYTE(v6) & 0xF;
  uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(v6) & 0xF;
  }
  else {
    uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9) {
    goto LABEL_61;
  }
  if ((v6 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_100190FA4(v5, v6, 10);
    char v29 = v28;
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_61;
    }
    goto LABEL_39;
  }
  if ((v6 & 0x2000000000000000) != 0)
  {
    v38[0] = v5;
    v38[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    if (v5 == 43)
    {
      if (!v7) {
        goto LABEL_81;
      }
      if (v7 == 1) {
        goto LABEL_79;
      }
      if ((BYTE1(v5) - 48) > 9u) {
        goto LABEL_34;
      }
      unint64_t v13 = (BYTE1(v5) - 48);
      if (v7 != 2)
      {
        if ((BYTE2(v5) - 48) > 9u) {
          goto LABEL_34;
        }
        unint64_t v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
        uint64_t v17 = v7 - 3;
        if (v7 != 3)
        {
          uint64_t v18 = (unsigned __int8 *)v38 + 3;
          while (1)
          {
            unsigned int v19 = *v18 - 48;
            if (v19 > 9) {
              goto LABEL_34;
            }
            if (!is_mul_ok(v13, 0xAuLL)) {
              goto LABEL_34;
            }
            BOOL v15 = __CFADD__(10 * v13, v19);
            unint64_t v13 = 10 * v13 + v19;
            if (v15) {
              goto LABEL_34;
            }
            LOBYTE(v7) = 0;
            ++v18;
            if (!--v17) {
              goto LABEL_38;
            }
          }
        }
      }
    }
    else
    {
      if (v5 == 45)
      {
        if (v7)
        {
          if (v7 != 1)
          {
            unsigned __int8 v14 = BYTE1(v5) - 48;
            if ((BYTE1(v5) - 48) <= 9u)
            {
              unint64_t v13 = 0;
              BOOL v15 = v14 == 0;
              unint64_t v16 = -(uint64_t)v14;
              if (!v15) {
                goto LABEL_35;
              }
              if (v7 == 2)
              {
                LOBYTE(v7) = 0;
                unint64_t v13 = v16;
                goto LABEL_38;
              }
              unsigned __int8 v23 = BYTE2(v5) - 48;
              if ((BYTE2(v5) - 48) <= 9u && is_mul_ok(v16, 0xAuLL))
              {
                unint64_t v24 = 10 * v16;
                unint64_t v13 = v24 - v23;
                if (v24 >= v23)
                {
                  uint64_t v25 = v7 - 3;
                  if (v7 != 3)
                  {
                    uint64_t v26 = (unsigned __int8 *)v38 + 3;
                    while (1)
                    {
                      unsigned int v27 = *v26 - 48;
                      if (v27 > 9) {
                        goto LABEL_34;
                      }
                      if (!is_mul_ok(v13, 0xAuLL)) {
                        goto LABEL_34;
                      }
                      BOOL v15 = 10 * v13 >= v27;
                      unint64_t v13 = 10 * v13 - v27;
                      if (!v15) {
                        goto LABEL_34;
                      }
                      LOBYTE(v7) = 0;
                      ++v26;
                      if (!--v25) {
                        goto LABEL_38;
                      }
                    }
                  }
                  goto LABEL_37;
                }
              }
            }
LABEL_34:
            unint64_t v13 = 0;
LABEL_35:
            LOBYTE(v7) = 1;
            goto LABEL_38;
          }
LABEL_79:
          unint64_t v13 = 0;
LABEL_38:
          if (v7) {
            goto LABEL_61;
          }
LABEL_39:
          if (v13 == a1) {
            return 0;
          }
          goto LABEL_63;
        }
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if (!v7 || (v5 - 48) > 9u) {
        goto LABEL_34;
      }
      unint64_t v13 = (v5 - 48);
      if (v7 != 1)
      {
        if ((BYTE1(v5) - 48) > 9u) {
          goto LABEL_34;
        }
        unint64_t v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
        uint64_t v20 = v7 - 2;
        if (v7 != 2)
        {
          uint64_t v21 = (unsigned __int8 *)v38 + 2;
          while (1)
          {
            unsigned int v22 = *v21 - 48;
            if (v22 > 9) {
              goto LABEL_34;
            }
            if (!is_mul_ok(v13, 0xAuLL)) {
              goto LABEL_34;
            }
            BOOL v15 = __CFADD__(10 * v13, v22);
            unint64_t v13 = 10 * v13 + v22;
            if (v15) {
              goto LABEL_34;
            }
            LOBYTE(v7) = 0;
            ++v21;
            if (!--v20) {
              goto LABEL_38;
            }
          }
        }
      }
    }
LABEL_37:
    LOBYTE(v7) = 0;
    goto LABEL_38;
  }
  if ((v5 & 0x1000000000000000) != 0) {
    uint64_t v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  uint64_t v11 = sub_100190F8C(v10, v8, 10);
  if ((v12 & 1) == 0)
  {
    unint64_t v13 = (unint64_t)v11;
    goto LABEL_39;
  }
LABEL_61:
  if (!a1) {
    return 0;
  }
  unint64_t v13 = 0;
LABEL_63:
  unint64_t v2 = (unsigned __int16)(v13 >> 8);
  unint64_t v6 = (unsigned __int16)(a1 >> 8);
  if (v6 >= v2)
  {
    if (v2 < v6)
    {
      static os_log_type_t.debug.getter();
      if (qword_100261948 == -1)
      {
LABEL_66:
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_1001D0A20;
        *(void *)(v30 + 56) = &type metadata for UInt64;
        *(void *)(v30 + 64) = &protocol witness table for UInt64;
        *(void *)(v30 + 32) = v2;
        *(void *)(v30 + 96) = &type metadata for UInt64;
        *(void *)(v30 + 104) = &protocol witness table for UInt64;
        *(void *)(v30 + 72) = v6;
LABEL_76:
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_82:
      swift_once();
      goto LABEL_66;
    }
    unint64_t v31 = HIDWORD(v13) & 0xFFF0 | (v13 >> 4);
    unint64_t v32 = HIDWORD(a1) & 0xFFF0 | (a1 >> 4);
    if (v32 >= v31)
    {
      if (v31 < v32)
      {
        static os_log_type_t.debug.getter();
        if (qword_100261948 != -1) {
          swift_once();
        }
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = xmmword_1001D25F0;
        *(void *)(v33 + 56) = &type metadata for UInt64;
        *(void *)(v33 + 64) = &protocol witness table for UInt64;
        *(void *)(v33 + 32) = v2;
        *(void *)(v33 + 96) = &type metadata for UInt64;
        *(void *)(v33 + 104) = &protocol witness table for UInt64;
        *(void *)(v33 + 72) = v31;
        *(void *)(v33 + 136) = &type metadata for UInt64;
        *(void *)(v33 + 144) = &protocol witness table for UInt64;
        *(void *)(v33 + 112) = v6;
        *(void *)(v33 + 176) = &type metadata for UInt64;
        *(void *)(v33 + 184) = &protocol witness table for UInt64;
        *(void *)(v33 + 152) = v32;
        goto LABEL_76;
      }
      unint64_t v34 = v13 & 0xF | (16 * ((v13 >> 24) & 0xFFF));
      unint64_t v35 = a1 & 0xF | (16 * ((a1 >> 24) & 0xFFF));
      if (v34 < v35)
      {
        static os_log_type_t.debug.getter();
        if (qword_100261948 != -1) {
          swift_once();
        }
        sub_1000AA024((uint64_t *)&unk_100262110);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1001D25E0;
        *(void *)(v36 + 56) = &type metadata for UInt64;
        *(void *)(v36 + 64) = &protocol witness table for UInt64;
        *(void *)(v36 + 32) = v2;
        *(void *)(v36 + 96) = &type metadata for UInt64;
        *(void *)(v36 + 104) = &protocol witness table for UInt64;
        *(void *)(v36 + 72) = v31;
        *(void *)(v36 + 136) = &type metadata for UInt64;
        *(void *)(v36 + 144) = &protocol witness table for UInt64;
        *(void *)(v36 + 112) = v34;
        *(void *)(v36 + 176) = &type metadata for UInt64;
        *(void *)(v36 + 184) = &protocol witness table for UInt64;
        *(void *)(v36 + 152) = v6;
        *(void *)(v36 + 216) = &type metadata for UInt64;
        *(void *)(v36 + 224) = &protocol witness table for UInt64;
        *(void *)(v36 + 192) = v32;
        *(void *)(v36 + 256) = &type metadata for UInt64;
        *(void *)(v36 + 264) = &protocol witness table for UInt64;
        *(void *)(v36 + 232) = v35;
        goto LABEL_76;
      }
    }
  }
  return 0;
}

uint64_t sub_1000FE554()
{
  type metadata accessor for UUID();
  sub_1000FF3FC((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 20));
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  sub_1000AA680(*v1, v3);
  Data.hash(into:)();
  sub_1000AA8F0(v2, v3);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Date();
  sub_1000FF3FC(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

unint64_t sub_1000FE824(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x74654D64756F6C63;
      break;
    case 2:
    case 6:
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x656D614E65736163;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0x6572617764726168;
      break;
    case 8:
      unint64_t result = 0xD000000000000013;
      break;
    case 9:
      unint64_t result = 0xD000000000000014;
      break;
    case 10:
      unint64_t result = 0x7465737341636E61;
      break;
    case 11:
      unint64_t result = 0x6552746E65726170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000FE9C8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AA024((uint64_t *)&unk_100262AF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000ABF58(a1, a1[3]);
  sub_1001005B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_1000FF3FC(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for DeviceSupportInformationRecord() + 20));
    v10[15] = 1;
    sub_1000AC094();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 12;
    type metadata accessor for Date();
    sub_1000FF3FC(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000FEDF0()
{
  return sub_1000FE824(*v0);
}

uint64_t sub_1000FEDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001008A4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000FEE20(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1000FEE2C(uint64_t a1)
{
  unint64_t v2 = sub_1001005B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000FEE68(uint64_t a1)
{
  unint64_t v2 = sub_1001005B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1000FEEA4()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for DeviceSupportInformationRecord()
{
  uint64_t result = qword_100262A50;
  if (!qword_100262A50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FEF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 64);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000FEF7C()
{
  sub_1000FB560(v0, &v3);
  return v3;
}

Swift::Int sub_1000FEFD0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000FF014()
{
  return Hasher._finalize()();
}

void sub_1000FF058(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000FF070(void *a1)
{
  return sub_1000FE9C8(a1);
}

uint64_t sub_1000FF088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceSupportInformationRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FF0EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DeviceSupportInformationRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000FF148(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for DeviceSupportInformationRecord();
  if ((sub_1000E4B6C(*(void *)(a1 + v4[5]), *(void *)(a1 + v4[5] + 8), *(void *)(a2 + v4[5]), *(void *)(a2 + v4[5] + 8)) & 1) == 0)return 0; {
  uint64_t v5 = v4[6];
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = v4[7];
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(a1 + v10 + 8);
  unint64_t v13 = (void *)(a2 + v10);
  BOOL v14 = v11 == *v13 && v12 == v13[1];
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v15 = v4[8];
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a1 + v15 + 8);
  uint64_t v18 = (void *)(a2 + v15);
  BOOL v19 = v16 == *v18 && v17 == v18[1];
  if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v20 = v4[9];
  uint64_t v21 = *(void *)(a1 + v20);
  uint64_t v22 = *(void *)(a1 + v20 + 8);
  unsigned __int8 v23 = (void *)(a2 + v20);
  if ((v21 != *v23 || v22 != v23[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v24 = v4[10];
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a1 + v24 + 8);
  unsigned int v27 = (void *)(a2 + v24);
  if ((v25 != *v27 || v26 != v27[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v28 = v4[11];
  uint64_t v29 = *(void *)(a1 + v28);
  uint64_t v30 = *(void *)(a1 + v28 + 8);
  unint64_t v31 = (void *)(a2 + v28);
  if ((v29 != *v31 || v30 != v31[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v32 = v4[12];
  uint64_t v33 = *(void *)(a1 + v32);
  uint64_t v34 = *(void *)(a1 + v32 + 8);
  unint64_t v35 = (void *)(a2 + v32);
  if ((v33 != *v35 || v34 != v35[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v36 = v4[13];
  uint64_t v37 = *(void *)(a1 + v36);
  uint64_t v38 = *(void *)(a1 + v36 + 8);
  uint64_t v39 = (void *)(a2 + v36);
  if ((v37 != *v39 || v38 != v39[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v40 = v4[14];
  uint64_t v41 = *(void *)(a1 + v40);
  uint64_t v42 = *(void *)(a1 + v40 + 8);
  uint64_t v43 = (void *)(a2 + v40);
  if ((v41 != *v43 || v42 != v43[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v44 = v4[15];
  uint64_t v45 = *(void *)(a1 + v44);
  uint64_t v46 = *(void *)(a1 + v44 + 8);
  uint64_t v47 = (void *)(a2 + v44);
  if ((v45 != *v47 || v46 != v47[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v48 = v4[16];

  return static Date.== infix(_:_:)(a1 + v48, a2 + v48);
}

unint64_t sub_1000FF3A8()
{
  unint64_t result = qword_1002629E8;
  if (!qword_1002629E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002629E8);
  }
  return result;
}

uint64_t sub_1000FF3FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeviceSupportInformationRecord.DeviceSupportInformationRecordError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FF510);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceSupportInformationRecord.DeviceSupportInformationRecordError()
{
  return &type metadata for DeviceSupportInformationRecord.DeviceSupportInformationRecordError;
}

uint64_t *sub_1000FF548(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v53 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v53 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    BOOL v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000AA680(*v10, v12);
    *BOOL v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v59 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v59;
    uint64_t v17 = (uint64_t *)((char *)a1 + v14);
    uint64_t v18 = (uint64_t *)((char *)a2 + v14);
    uint64_t v60 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v60;
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (uint64_t *)((char *)a1 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (uint64_t *)((char *)a1 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v58 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v58;
    uint64_t v26 = a3[10];
    uint64_t v27 = a3[11];
    uint64_t v28 = (uint64_t *)((char *)a1 + v26);
    uint64_t v29 = (uint64_t *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1] = v30;
    unint64_t v31 = (uint64_t *)((char *)a1 + v27);
    uint64_t v32 = (uint64_t *)((char *)a2 + v27);
    uint64_t v33 = v32[1];
    *unint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = a3[12];
    uint64_t v35 = a3[13];
    uint64_t v36 = (uint64_t *)((char *)a1 + v34);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = (uint64_t *)((char *)a1 + v35);
    uint64_t v40 = (uint64_t *)((char *)a2 + v35);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = a3[14];
    uint64_t v43 = a3[15];
    uint64_t v44 = (uint64_t *)((char *)a1 + v42);
    uint64_t v45 = (uint64_t *)((char *)a2 + v42);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = (uint64_t *)((char *)a1 + v43);
    uint64_t v48 = (uint64_t *)((char *)a2 + v43);
    uint64_t v49 = *v48;
    uint64_t v50 = v48[1];
    uint64_t v51 = a3[16];
    uint64_t v56 = (char *)a1 + v51;
    uint64_t v57 = (char *)a2 + v51;
    *uint64_t v47 = v49;
    v47[1] = v50;
    uint64_t v52 = type metadata accessor for Date();
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v55(v56, v57, v52);
  }
  return a1;
}

uint64_t sub_1000FF7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_1000AA8F0(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 64);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1000FF904(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  BOOL v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000AA680(*v9, v11);
  uint64_t *v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v57 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v57;
  uint64_t v16 = (void *)(a1 + v13);
  uint64_t v17 = (void *)(a2 + v13);
  uint64_t v58 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v58;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v18);
  uint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (void *)(a1 + v19);
  uint64_t v24 = (void *)(a2 + v19);
  uint64_t v56 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v56;
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v25);
  uint64_t v28 = (void *)(a2 + v25);
  uint64_t v29 = v28[1];
  void *v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = (void *)(a1 + v26);
  unint64_t v31 = (void *)(a2 + v26);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = a3[12];
  uint64_t v34 = a3[13];
  uint64_t v35 = (void *)(a1 + v33);
  uint64_t v36 = (void *)(a2 + v33);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  v35[1] = v37;
  uint64_t v38 = (void *)(a1 + v34);
  uint64_t v39 = (void *)(a2 + v34);
  uint64_t v40 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v40;
  uint64_t v41 = a3[14];
  uint64_t v42 = a3[15];
  uint64_t v43 = (void *)(a1 + v41);
  uint64_t v44 = (void *)(a2 + v41);
  uint64_t v45 = v44[1];
  *uint64_t v43 = *v44;
  v43[1] = v45;
  uint64_t v46 = (void *)(a1 + v42);
  uint64_t v47 = (uint64_t *)(a2 + v42);
  uint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  uint64_t v50 = a3[16];
  uint64_t v54 = a1 + v50;
  uint64_t v55 = a2 + v50;
  *uint64_t v46 = v48;
  v46[1] = v49;
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53(v54, v55, v51);
  return a1;
}

uint64_t sub_1000FFB18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  BOOL v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000AA680(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  uint64_t *v8 = v10;
  v8[1] = v11;
  sub_1000AA8F0(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[11];
  uint64_t v30 = (void *)(a1 + v29);
  unint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[12];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[14];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[15];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = a3[16];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = a2 + v44;
  uint64_t v47 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v46, v47);
  return a1;
}

uint64_t sub_1000FFDB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v_Block_object_dispose(&STACK[0x290], 8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  uint64_t v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[15];
  uint64_t v13 = a3[16];
  long long v14 = *(_OWORD *)(a2 + v12);
  uint64_t v15 = a2 + v13;
  uint64_t v16 = a1 + v13;
  *(_OWORD *)(a1 + v12) = v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, v15, v17);
  return a1;
}

uint64_t sub_1000FFEDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_1000AA8F0(v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[10];
  unint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *unint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[11];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[12];
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (uint64_t *)(a2 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[13];
  uint64_t v46 = (void *)(a1 + v45);
  uint64_t v47 = (uint64_t *)(a2 + v45);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[14];
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (uint64_t *)(a2 + v50);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *uint64_t v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[15];
  uint64_t v56 = (void *)(a1 + v55);
  uint64_t v57 = (uint64_t *)(a2 + v55);
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  *uint64_t v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease();
  uint64_t v60 = a3[16];
  uint64_t v61 = a1 + v60;
  uint64_t v62 = a2 + v60;
  uint64_t v63 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 40))(v61, v62, v63);
  return a1;
}

uint64_t sub_1001000C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001000D8);
}

uint64_t sub_1001000D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 64);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100100208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010021C);
}

uint64_t sub_10010021C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + _Block_object_dispose(&STACK[0x290], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 64);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_10010034C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100100438(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_1000FF3FC(&qword_100263A70, (void (*)(uint64_t))type metadata accessor for DeviceSupportInformationRecord);
  uint64_t result = sub_1000FF3FC(&qword_100262AC0, (void (*)(uint64_t))type metadata accessor for DeviceSupportInformationRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1001004BC()
{
  return sub_1000FF3FC(&qword_100262AC8, (void (*)(uint64_t))type metadata accessor for DeviceSupportInformationRecord);
}

unint64_t sub_100100508()
{
  unint64_t result = qword_100262AD0;
  if (!qword_100262AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262AD0);
  }
  return result;
}

uint64_t sub_10010055C(uint64_t a1)
{
  uint64_t result = sub_1000FF3FC(&qword_100262AD8, (void (*)(uint64_t))type metadata accessor for DeviceSupportInformationRecord);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

unint64_t sub_1001005B4()
{
  unint64_t result = qword_100262AE8;
  if (!qword_100262AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262AE8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceSupportInformationRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceSupportInformationRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100100764);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceSupportInformationRecord.CodingKeys()
{
  return &type metadata for DeviceSupportInformationRecord.CodingKeys;
}

unint64_t sub_1001007A0()
{
  unint64_t result = qword_100262B08;
  if (!qword_100262B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262B08);
  }
  return result;
}

unint64_t sub_1001007F8()
{
  unint64_t result = qword_100262B10;
  if (!qword_100262B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262B10);
  }
  return result;
}

unint64_t sub_100100850()
{
  unint64_t result = qword_100262B18;
  if (!qword_100262B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262B18);
  }
  return result;
}

uint64_t sub_1001008A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001001FA1F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656D614E65736163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001001FA210 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001FA230 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6572617764726168 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001001FA250 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001001FA270 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7465737341636E61 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6552746E65726170 && a2 == 0xEC00000064726F63 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

uint64_t sub_100100E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_100101038((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)();
  unint64_t v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if (a2 != 3 && a2 != 2 && a2 != 1)
  {
    static os_log_type_t.error.getter();
    if (qword_100261938 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  URL.appendingPathComponent(_:)();
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, v3);
}

uint64_t sub_100101038@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v23 - v10;
  id v12 = [self processInfo];
  id v13 = [v12 environment];

  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v14 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1000B4FC4(0xD00000000000001BLL, 0x80000001001FA4D0);
  char v16 = v15;
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_9:
    id v19 = [self defaultManager];
    id v20 = [v19 URLsForDirectory:5 inDomains:1];

    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v21 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v21 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_1000AA894((uint64_t)v4, (uint64_t *)&unk_100261A00);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v22(v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v22)(a1, v9, v5);
    }
    return result;
  }
  static os_log_type_t.default.getter();
  if (qword_100261958 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v17 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001014A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100101038((uint64_t)v8);
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (a2 == 3)
  {
    uint64_t v9 = 0x646572616853;
    unint64_t v10 = 0xE600000000000000;
    goto LABEL_11;
  }
  if (a2 == 2)
  {
    uint64_t v9 = 0x65746176697250;
LABEL_10:
    unint64_t v10 = 0xE700000000000000;
    goto LABEL_11;
  }
  if (a2 != 1)
  {
    static os_log_type_t.error.getter();
    if (qword_100261938 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v9 = 0x6E776F6E6B6E55;
    goto LABEL_10;
  }
  uint64_t v9 = 0x63696C627550;
  unint64_t v10 = 0xE600000000000000;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v9);
  id v11 = [a3 ownerName];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  URL.appendPathComponent(_:)(v15);
  swift_bridgeObjectRelease();
  id v16 = [a3 zoneName];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v19 = v18;

  v22._uint64_t countAndFlagsBits = v17;
  v22._object = v19;
  v20._uint64_t countAndFlagsBits = 0x6E656B6F742ELL;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  URL.appendPathComponent(_:)(v22);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100101720()
{
  id v0 = [self defaultManager];
  URL.path.getter();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v2 = [v0 fileExistsAtPath:v1];

  uint64_t result = 0;
  if (v2)
  {
    uint64_t v4 = Data.init(contentsOf:options:)();
    unint64_t v6 = v5;
    sub_1000B66A0(0, &qword_100262B20);
    sub_1000AA024(&qword_100262B28);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1001CFDB0;
    *(void *)(v7 + 32) = sub_1000B66A0(0, (unint64_t *)&unk_100262B30);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
    sub_1000AA8F0(v4, v6);
    swift_bridgeObjectRelease();
    if (v9[3])
    {
      if (swift_dynamicCast()) {
        return v8;
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_1000AA894((uint64_t)v9, &qword_1002631A0);
      return 0;
    }
  }
  return result;
}

id sub_1001019A0()
{
  id v0 = [self defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v7 = 0;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v7];

  if (v4) {
    return v7;
  }
  id v6 = v7;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t sub_100101A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLResourceValues();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  unint64_t v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - v11;
  id v13 = [self defaultManager];
  uint64_t v35 = a2;
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v14);
  id v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  id v36 = 0;
  LODWORD(v12) = [v13 createDirectoryAtURL:v16 withIntermediateDirectories:1 attributes:0 error:&v36];

  id v18 = v36;
  if (!v12)
  {
    uint64_t v28 = v18;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  id v19 = self;
  id v36 = 0;
  id v20 = [v19 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v36];
  id v21 = v36;
  if (!v20)
  {
    uint64_t v29 = v21;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  uint64_t v25 = v34;
  Data.write(to:options:)();
  if (!v25)
  {
    uint64_t v26 = v31;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v35, v6);
    URL.setResourceValues(_:)();
    v17(v9, v6);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v33);
  }
  return sub_1000AA8F0(v22, v24);
}

void *sub_100101DD0()
{
  uint64_t v185 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  uint64_t v184 = (char *)&v180 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (uint64_t *)(v0 + *(int *)(type metadata accessor for LegacyMagicPairingSettingsRecords() + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v226 = (unint64_t)_swiftEmptyArrayStorage;
  switch(v6 >> 62)
  {
    case 1uLL:
      LODWORD(v_Block_object_dispose(&STACK[0x290], 8) = HIDWORD(v5) - v5;
      if (__OFSUB__(HIDWORD(v5), v5))
      {
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        swift_once();
        goto LABEL_106;
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      if (v8 >= 154)
      {
        unint64_t v181 = v6 >> 62;
        uint64_t v224 = Data.subdata(in:)();
        unint64_t v225 = v12;
        sub_100105420();
        uint64_t v1 = v224;
        unint64_t v13 = v225;
        switch(v225 >> 62)
        {
          case 1uLL:
            if ((int)v224 > v224 >> 32)
            {
              __break(1u);
LABEL_144:
              __break(1u);
            }
            else
            {
              swift_retain();
              uint64_t v14 = __DataStorage._bytes.getter();
              if (!v14) {
                goto LABEL_167;
              }
              uint64_t v15 = v14;
              uint64_t v16 = __DataStorage._offset.getter();
              uint64_t v17 = (int)v1 - v16;
              if (!__OFSUB__((int)v1, v16))
              {
                __DataStorage._length.getter();
                uint64_t v18 = *(unsigned __int16 *)(v15 + v17);
                sub_1000AA8F0(v1, v13);
                uint64_t v1 = v18;
LABEL_16:
                if ((_WORD)v1)
                {
                  uint64_t v25 = 0;
                  uint64_t v183 = (void (**)(char *, uint64_t))(v2 + 8);
                  int v26 = 1;
                  uint64_t v186 = v1;
                  uint64_t v182 = v5;
                  while (2)
                  {
                    sub_1000AA680(v5, v6);
                    sub_100105750(v25, v5, v6, (uint64_t *)&v222);
                    int v28 = v222;
                    unsigned __int8 v27 = BYTE6(v223);
                    switch(v223 >> 62)
                    {
                      case 1uLL:
                        unint64_t v30 = HIDWORD(v222);
                        sub_1000AA8F0(v222, v223);
                        LODWORD(v29) = v30 - v28;
                        if (__OFSUB__(v30, v28)) {
                          goto LABEL_114;
                        }
                        uint64_t v29 = (int)v29;
                        goto LABEL_23;
                      case 2uLL:
                        uint64_t v32 = *(void *)(v222 + 16);
                        uint64_t v31 = *(void *)(v222 + 24);
                        sub_1000AA8F0(v222, v223);
                        uint64_t v29 = v31 - v32;
                        if (!__OFSUB__(v31, v32)) {
                          goto LABEL_23;
                        }
                        goto LABEL_115;
                      case 3uLL:
                        sub_1000AA8F0(v222, v223);
                        goto LABEL_105;
                      default:
                        sub_1000AA8F0(v222, v223);
                        uint64_t v29 = v27;
LABEL_23:
                        if (v29 >= 154)
                        {
                          uint64_t v33 = Data.subdata(in:)();
                          unint64_t v218 = v34;
                          uint64_t v219 = v33;
                          uint64_t v35 = Data.subdata(in:)();
                          uint64_t v1 = v36;
                          uint64_t v216 = Data.subdata(in:)();
                          unint64_t v38 = v37;
                          uint64_t v39 = v25 + 44;
                          uint64_t v40 = Data.subdata(in:)();
                          unint64_t v207 = v41;
                          unint64_t v13 = 0;
                          uint64_t v200 = v40;
                          switch(v41 >> 62)
                          {
                            case 1uLL:
                              uint64_t v42 = (int)v40;
                              if ((int)v40 > v40 >> 32) {
                                goto LABEL_116;
                              }
                              uint64_t v43 = __DataStorage._bytes.getter();
                              if (!v43) {
                                goto LABEL_148;
                              }
                              unint64_t v13 = v43;
                              uint64_t v44 = __DataStorage._offset.getter();
                              BOOL v11 = __OFSUB__(v42, v44);
                              uint64_t v45 = v42 - v44;
                              if (v11) {
                                goto LABEL_120;
                              }
                              __DataStorage._length.getter();
                              LODWORD(v13) = *(_DWORD *)(v13 + v45);
LABEL_33:
                              int v192 = v13;
                              uint64_t v212 = Data.subdata(in:)();
                              unint64_t v51 = v50;
                              uint64_t v210 = Data.subdata(in:)();
                              unint64_t v211 = v52;
                              unint64_t v13 = Data.subdata(in:)();
                              unint64_t v54 = v53;
                              uint64_t v55 = v39 + 100;
                              uint64_t v221 = Data.subdata(in:)();
                              unint64_t v206 = v56;
                              int v57 = 0;
                              unint64_t v214 = v13;
                              unint64_t v215 = v54;
                              unint64_t v213 = v51;
                              switch(v56 >> 62)
                              {
                                case 1uLL:
                                  uint64_t v58 = (int)v221;
                                  if ((int)v221 > v221 >> 32) {
                                    goto LABEL_118;
                                  }
                                  uint64_t v59 = __DataStorage._bytes.getter();
                                  if (!v59) {
                                    goto LABEL_150;
                                  }
                                  uint64_t v60 = v59;
                                  uint64_t v61 = __DataStorage._offset.getter();
                                  BOOL v11 = __OFSUB__(v58, v61);
                                  uint64_t v62 = v58 - v61;
                                  if (v11) {
                                    goto LABEL_123;
                                  }
                                  __DataStorage._length.getter();
                                  int v57 = *(_DWORD *)(v60 + v62);
LABEL_42:
                                  int v191 = v57;
                                  unint64_t v13 = v55 + 2;
                                  uint64_t v69 = Data.subdata(in:)();
                                  unint64_t v205 = v70;
                                  int v71 = 0;
                                  uint64_t v199 = v69;
                                  switch(v70 >> 62)
                                  {
                                    case 1uLL:
                                      uint64_t v72 = (int)v69;
                                      if ((int)v69 > v69 >> 32) {
                                        goto LABEL_121;
                                      }
                                      uint64_t v73 = __DataStorage._bytes.getter();
                                      if (!v73) {
                                        goto LABEL_152;
                                      }
                                      uint64_t v74 = v73;
                                      uint64_t v75 = __DataStorage._offset.getter();
                                      BOOL v11 = __OFSUB__(v72, v75);
                                      uint64_t v76 = v72 - v75;
                                      if (v11) {
                                        goto LABEL_126;
                                      }
                                      __DataStorage._length.getter();
                                      int v71 = *(unsigned __int16 *)(v74 + v76);
LABEL_51:
                                      int v190 = v71;
                                      unint64_t v82 = v13 + 2;
                                      uint64_t v220 = Data.subdata(in:)();
                                      unint64_t v204 = v83;
                                      unint64_t v13 = 0;
                                      switch(v83 >> 62)
                                      {
                                        case 1uLL:
                                          uint64_t v84 = (int)v220;
                                          if ((int)v220 > v220 >> 32) {
                                            goto LABEL_124;
                                          }
                                          uint64_t v85 = __DataStorage._bytes.getter();
                                          if (!v85) {
                                            goto LABEL_154;
                                          }
                                          unint64_t v13 = v85;
                                          uint64_t v86 = __DataStorage._offset.getter();
                                          BOOL v11 = __OFSUB__(v84, v86);
                                          uint64_t v87 = v84 - v86;
                                          if (v11) {
                                            goto LABEL_129;
                                          }
                                          __DataStorage._length.getter();
                                          LODWORD(v13) = *(unsigned __int16 *)(v13 + v87);
LABEL_60:
                                          int v189 = v13;
                                          unint64_t v92 = v82 + 2;
                                          uint64_t v217 = Data.subdata(in:)();
                                          unint64_t v203 = v93;
                                          unint64_t v13 = 0;
                                          switch(v93 >> 62)
                                          {
                                            case 1uLL:
                                              uint64_t v94 = (int)v217;
                                              if ((int)v217 > v217 >> 32) {
                                                goto LABEL_127;
                                              }
                                              uint64_t v95 = __DataStorage._bytes.getter();
                                              if (!v95) {
                                                goto LABEL_156;
                                              }
                                              uint64_t v96 = v95;
                                              uint64_t v97 = __DataStorage._offset.getter();
                                              BOOL v11 = __OFSUB__(v94, v97);
                                              uint64_t v98 = v94 - v97;
                                              if (v11) {
                                                goto LABEL_132;
                                              }
                                              __DataStorage._length.getter();
                                              unint64_t v13 = *(unsigned __int8 *)(v96 + v98);
LABEL_69:
                                              int v188 = v13;
                                              unint64_t v209 = v38;
                                              unint64_t v104 = v92 + 1;
                                              uint64_t v105 = Data.subdata(in:)();
                                              unint64_t v202 = v106;
                                              char v107 = 0;
                                              uint64_t v198 = v105;
                                              switch(v106 >> 62)
                                              {
                                                case 1uLL:
                                                  unint64_t v13 = (int)v105;
                                                  if ((int)v105 > v105 >> 32) {
                                                    goto LABEL_130;
                                                  }
                                                  uint64_t v108 = __DataStorage._bytes.getter();
                                                  if (!v108) {
                                                    goto LABEL_158;
                                                  }
                                                  uint64_t v109 = v108;
                                                  uint64_t v110 = __DataStorage._offset.getter();
                                                  BOOL v11 = __OFSUB__(v13, v110);
                                                  v13 -= v110;
                                                  if (v11) {
                                                    goto LABEL_135;
                                                  }
                                                  __DataStorage._length.getter();
                                                  char v107 = *(unsigned char *)(v109 + v13);
LABEL_78:
                                                  uint64_t v208 = v35;
                                                  unint64_t v114 = v1;
                                                  uint64_t v1 = v104 + 1;
                                                  uint64_t v115 = Data.subdata(in:)();
                                                  unint64_t v117 = v116;
                                                  char v118 = 0;
                                                  uint64_t v197 = v115;
                                                  switch(v116 >> 62)
                                                  {
                                                    case 1uLL:
                                                      uint64_t v119 = (int)v115;
                                                      if ((int)v115 > v115 >> 32) {
                                                        goto LABEL_133;
                                                      }
                                                      uint64_t v120 = __DataStorage._bytes.getter();
                                                      if (!v120) {
                                                        goto LABEL_160;
                                                      }
                                                      unint64_t v13 = v120;
                                                      uint64_t v121 = __DataStorage._offset.getter();
                                                      BOOL v11 = __OFSUB__(v119, v121);
                                                      uint64_t v122 = v119 - v121;
                                                      if (v11) {
                                                        goto LABEL_138;
                                                      }
                                                      __DataStorage._length.getter();
                                                      char v118 = *(unsigned char *)(v13 + v122);
LABEL_87:
                                                      unint64_t v194 = v117;
                                                      int v195 = v26;
                                                      uint64_t v193 = v1 + 2;
                                                      uint64_t v127 = Data.subdata(in:)();
                                                      unint64_t v201 = v128;
                                                      __int16 v129 = 0;
                                                      unint64_t v130 = v114;
                                                      uint64_t v1 = v216;
                                                      uint64_t v196 = v127;
                                                      switch(v128 >> 62)
                                                      {
                                                        case 1uLL:
                                                          uint64_t v131 = (int)v127;
                                                          if ((int)v127 > v127 >> 32) {
                                                            goto LABEL_136;
                                                          }
                                                          uint64_t v132 = __DataStorage._bytes.getter();
                                                          if (!v132) {
                                                            goto LABEL_162;
                                                          }
                                                          uint64_t v133 = v132;
                                                          uint64_t v134 = __DataStorage._offset.getter();
                                                          BOOL v11 = __OFSUB__(v131, v134);
                                                          uint64_t v135 = v131 - v134;
                                                          if (v11) {
                                                            goto LABEL_139;
                                                          }
                                                          __DataStorage._length.getter();
                                                          __int16 v129 = *(_WORD *)(v133 + v135);
LABEL_96:
                                                          Class isa = Data._bridgeToObjectiveC()().super.isa;
                                                          [(objc_class *)isa bytes];
                                                          uint64_t v142 = isa;
                                                          id v143 = (id)NSStringWithMACAddress();
                                                          if (v143)
                                                          {
                                                            id v144 = v143;
                                                            static String._unconditionallyBridgeFromObjectiveC(_:)();

                                                            id v145 = objc_allocWithZone((Class)BTMagicPairingSettings);
                                                            NSString v146 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            id v147 = [v145 initWithBluetoothAddress:v146];

                                                            Class v148 = Data._bridgeToObjectiveC()().super.isa;
                                                            [v147 setAccessoryKey:v148];

                                                            Class v149 = Data._bridgeToObjectiveC()().super.isa;
                                                            [v147 setAccessoryHint:v149];

                                                            LOBYTE(v222) = v107;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v150 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setButtonModes:v150];

                                                            LOBYTE(v222) = v118;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v151 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setColor:v151];

                                                            Class v152 = Data._bridgeToObjectiveC()().super.isa;
                                                            [v147 setEncryptionKey:v152];

                                                            Class v153 = Data._bridgeToObjectiveC()().super.isa;
                                                            [v147 setIrk:v153];

                                                            LOWORD(v222) = v129;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v154 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setListeningServices:v154];

                                                            uint64_t v156 = v214;
                                                            unint64_t v155 = v215;
                                                            sub_1000AA680(v214, v215);
                                                            uint64_t v157 = sub_100106130(v156, v155);
                                                            sub_1000AA8F0(v156, v155);
                                                            uint64_t v158 = sub_100106454((uint64_t)v157);
                                                            unint64_t v160 = v159;
                                                            swift_release();
                                                            unint64_t v222 = v158;
                                                            unint64_t v223 = v160;
                                                            unint64_t v187 = v130;
                                                            uint64_t v161 = v184;
                                                            static CharacterSet.whitespacesAndNewlines.getter();
                                                            sub_10010649C();
                                                            uint64_t v162 = StringProtocol.trimmingCharacters(in:)();
                                                            unint64_t v164 = v163;
                                                            char v165 = *v183;
                                                            uint64_t v166 = v185;
                                                            (*v183)(v161, v185);
                                                            swift_bridgeObjectRelease();
                                                            unint64_t v222 = v162;
                                                            unint64_t v223 = v164;
                                                            static CharacterSet.illegalCharacters.getter();
                                                            StringProtocol.trimmingCharacters(in:)();
                                                            v165(v161, v166);
                                                            swift_bridgeObjectRelease();
                                                            NSString v167 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setName:v167];

                                                            LOWORD(v222) = v189;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v168 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setProductID:v168];

                                                            LODWORD(v222) = v192;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v169 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setRatchet:v169];

                                                            LOBYTE(v222) = v188;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v170 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setSettingsMask:v170];

                                                            LODWORD(v222) = v191;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v171 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setSupportedServices:v171];

                                                            LOWORD(v222) = v190;
                                                            dispatch thunk of CustomStringConvertible.description.getter();
                                                            NSString v172 = String._bridgeToObjectiveC()();
                                                            swift_bridgeObjectRelease();
                                                            [v147 setVendorID:v172];

                                                            id v173 = v147;
                                                            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                                                            if (*(void *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v226 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                                                              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                                                            }
                                                            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                                                            specialized Array._endMutation()();
                                                            sub_1000AA8F0(v208, v187);
                                                            sub_1000AA8F0(v216, v209);
                                                            sub_1000AA8F0(v210, v211);
                                                            sub_1000AA8F0(v212, v213);

                                                            sub_1000AA8F0(v196, v201);
                                                            sub_1000AA8F0(v197, v194);
                                                            sub_1000AA8F0(v198, v202);
                                                            sub_1000AA8F0(v217, v203);
                                                            sub_1000AA8F0(v220, v204);
                                                            sub_1000AA8F0(v199, v205);
                                                            sub_1000AA8F0(v221, v206);
                                                            sub_1000AA8F0(v214, v215);
                                                            sub_1000AA8F0(v200, v207);
                                                            uint64_t v1 = v186;
                                                            unsigned __int16 v174 = v195;
                                                            uint64_t v5 = v182;
                                                          }
                                                          else
                                                          {
                                                            sub_1000AA8F0(v196, v201);
                                                            sub_1000AA8F0(v197, v194);
                                                            sub_1000AA8F0(v198, v202);
                                                            sub_1000AA8F0(v217, v203);
                                                            sub_1000AA8F0(v220, v204);
                                                            sub_1000AA8F0(v199, v205);
                                                            sub_1000AA8F0(v221, v206);
                                                            sub_1000AA8F0(v214, v215);
                                                            sub_1000AA8F0(v210, v211);
                                                            sub_1000AA8F0(v212, v213);
                                                            sub_1000AA8F0(v200, v207);
                                                            sub_1000AA8F0(v1, v209);
                                                            sub_1000AA8F0(v208, v114);
                                                            unsigned __int16 v174 = v195;
                                                            uint64_t v1 = v186;
                                                          }
                                                          sub_1000AA8F0(v219, v218);
                                                          int v175 = v174;
                                                          if (v174 == (unsigned __int16)v1) {
                                                            goto LABEL_112;
                                                          }
                                                          int v26 = v174 + 1;
                                                          uint64_t v25 = v193 - 2;
                                                          if (((v175 + 1) & 0x10000) == 0) {
                                                            continue;
                                                          }
                                                          __break(1u);
                                                          break;
                                                        case 2uLL:
                                                          uint64_t v136 = *(void *)(v127 + 16);
                                                          swift_retain();
                                                          swift_retain();
                                                          uint64_t v137 = __DataStorage._bytes.getter();
                                                          if (!v137) {
                                                            goto LABEL_163;
                                                          }
                                                          uint64_t v138 = v137;
                                                          uint64_t v139 = __DataStorage._offset.getter();
                                                          BOOL v11 = __OFSUB__(v136, v139);
                                                          uint64_t v140 = v136 - v139;
                                                          if (v11) {
                                                            goto LABEL_137;
                                                          }
                                                          __DataStorage._length.getter();
                                                          __int16 v129 = *(_WORD *)(v138 + v140);
                                                          swift_release();
                                                          swift_release();
                                                          goto LABEL_96;
                                                        case 3uLL:
                                                          goto LABEL_96;
                                                        default:
                                                          __int16 v129 = v127;
                                                          goto LABEL_96;
                                                      }
                                                      break;
                                                    case 2uLL:
                                                      uint64_t v123 = *(void *)(v115 + 16);
                                                      swift_retain();
                                                      swift_retain();
                                                      uint64_t v124 = __DataStorage._bytes.getter();
                                                      if (!v124) {
                                                        goto LABEL_161;
                                                      }
                                                      unint64_t v13 = v124;
                                                      uint64_t v125 = __DataStorage._offset.getter();
                                                      BOOL v11 = __OFSUB__(v123, v125);
                                                      uint64_t v126 = v123 - v125;
                                                      if (v11) {
                                                        goto LABEL_134;
                                                      }
                                                      __DataStorage._length.getter();
                                                      char v118 = *(unsigned char *)(v13 + v126);
                                                      swift_release();
                                                      swift_release();
                                                      goto LABEL_87;
                                                    case 3uLL:
                                                      goto LABEL_87;
                                                    default:
                                                      char v118 = v115;
                                                      goto LABEL_87;
                                                  }
                                                  break;
                                                case 2uLL:
                                                  unint64_t v13 = *(void *)(v105 + 16);
                                                  swift_retain();
                                                  swift_retain();
                                                  uint64_t v111 = __DataStorage._bytes.getter();
                                                  if (!v111) {
                                                    goto LABEL_159;
                                                  }
                                                  uint64_t v112 = v111;
                                                  uint64_t v113 = __DataStorage._offset.getter();
                                                  BOOL v11 = __OFSUB__(v13, v113);
                                                  v13 -= v113;
                                                  if (v11) {
                                                    goto LABEL_131;
                                                  }
                                                  __DataStorage._length.getter();
                                                  char v107 = *(unsigned char *)(v112 + v13);
                                                  swift_release();
                                                  swift_release();
                                                  goto LABEL_78;
                                                case 3uLL:
                                                  goto LABEL_78;
                                                default:
                                                  char v107 = v105;
                                                  goto LABEL_78;
                                              }
                                              break;
                                            case 2uLL:
                                              uint64_t v99 = *(void *)(v217 + 16);
                                              swift_retain();
                                              swift_retain();
                                              uint64_t v100 = __DataStorage._bytes.getter();
                                              if (!v100) {
                                                goto LABEL_157;
                                              }
                                              uint64_t v101 = v100;
                                              uint64_t v102 = __DataStorage._offset.getter();
                                              BOOL v11 = __OFSUB__(v99, v102);
                                              uint64_t v103 = v99 - v102;
                                              if (v11) {
                                                goto LABEL_128;
                                              }
                                              __DataStorage._length.getter();
                                              unint64_t v13 = *(unsigned __int8 *)(v101 + v103);
                                              swift_release();
                                              swift_release();
                                              goto LABEL_69;
                                            case 3uLL:
                                              goto LABEL_69;
                                            default:
                                              unint64_t v13 = v217;
                                              goto LABEL_69;
                                          }
                                          break;
                                        case 2uLL:
                                          uint64_t v88 = *(void *)(v220 + 16);
                                          swift_retain();
                                          swift_retain();
                                          uint64_t v89 = __DataStorage._bytes.getter();
                                          if (!v89) {
                                            goto LABEL_155;
                                          }
                                          unint64_t v13 = v89;
                                          uint64_t v90 = __DataStorage._offset.getter();
                                          BOOL v11 = __OFSUB__(v88, v90);
                                          uint64_t v91 = v88 - v90;
                                          if (v11) {
                                            goto LABEL_125;
                                          }
                                          __DataStorage._length.getter();
                                          LODWORD(v13) = *(unsigned __int16 *)(v13 + v91);
                                          swift_release();
                                          swift_release();
                                          goto LABEL_60;
                                        case 3uLL:
                                          goto LABEL_60;
                                        default:
                                          LODWORD(v13) = v220;
                                          goto LABEL_60;
                                      }
                                      break;
                                    case 2uLL:
                                      uint64_t v77 = *(void *)(v69 + 16);
                                      swift_retain();
                                      swift_retain();
                                      uint64_t v78 = __DataStorage._bytes.getter();
                                      if (!v78) {
                                        goto LABEL_153;
                                      }
                                      uint64_t v79 = v78;
                                      uint64_t v80 = __DataStorage._offset.getter();
                                      BOOL v11 = __OFSUB__(v77, v80);
                                      uint64_t v81 = v77 - v80;
                                      if (v11) {
                                        goto LABEL_122;
                                      }
                                      __DataStorage._length.getter();
                                      int v71 = *(unsigned __int16 *)(v79 + v81);
                                      swift_release();
                                      swift_release();
                                      goto LABEL_51;
                                    case 3uLL:
                                      goto LABEL_51;
                                    default:
                                      int v71 = v69;
                                      goto LABEL_51;
                                  }
                                  break;
                                case 2uLL:
                                  uint64_t v63 = *(void *)(v221 + 16);
                                  swift_retain();
                                  swift_retain();
                                  uint64_t v64 = __DataStorage._bytes.getter();
                                  if (!v64) {
                                    goto LABEL_151;
                                  }
                                  uint64_t v65 = v64;
                                  uint64_t v66 = __DataStorage._offset.getter();
                                  BOOL v11 = __OFSUB__(v63, v66);
                                  uint64_t v67 = v63 - v66;
                                  if (v11) {
                                    goto LABEL_119;
                                  }
                                  __DataStorage._length.getter();
                                  int v68 = *(_DWORD *)(v65 + v67);
                                  swift_release();
                                  swift_release();
                                  int v57 = v68;
                                  goto LABEL_42;
                                case 3uLL:
                                  goto LABEL_42;
                                default:
                                  int v57 = v221;
                                  goto LABEL_42;
                              }
                              break;
                            case 2uLL:
                              uint64_t v46 = *(void *)(v40 + 16);
                              swift_retain();
                              swift_retain();
                              uint64_t v47 = __DataStorage._bytes.getter();
                              if (!v47) {
                                goto LABEL_149;
                              }
                              unint64_t v13 = v47;
                              uint64_t v48 = __DataStorage._offset.getter();
                              BOOL v11 = __OFSUB__(v46, v48);
                              uint64_t v49 = v46 - v48;
                              if (v11) {
                                goto LABEL_117;
                              }
                              __DataStorage._length.getter();
                              LODWORD(v13) = *(_DWORD *)(v13 + v49);
                              swift_release();
                              swift_release();
                              goto LABEL_33;
                            case 3uLL:
                              goto LABEL_33;
                            default:
                              LODWORD(v13) = v40;
                              goto LABEL_33;
                          }
LABEL_114:
                          __break(1u);
LABEL_115:
                          __break(1u);
LABEL_116:
                          __break(1u);
LABEL_117:
                          __break(1u);
LABEL_118:
                          __break(1u);
LABEL_119:
                          __break(1u);
LABEL_120:
                          __break(1u);
LABEL_121:
                          __break(1u);
LABEL_122:
                          __break(1u);
LABEL_123:
                          __break(1u);
LABEL_124:
                          __break(1u);
LABEL_125:
                          __break(1u);
LABEL_126:
                          __break(1u);
LABEL_127:
                          __break(1u);
LABEL_128:
                          __break(1u);
LABEL_129:
                          __break(1u);
LABEL_130:
                          __break(1u);
LABEL_131:
                          __break(1u);
LABEL_132:
                          __break(1u);
LABEL_133:
                          __break(1u);
LABEL_134:
                          __break(1u);
LABEL_135:
                          __break(1u);
LABEL_136:
                          __break(1u);
LABEL_137:
                          __break(1u);
LABEL_138:
                          __break(1u);
LABEL_139:
                          __break(1u);
                          goto LABEL_140;
                        }
LABEL_105:
                        static os_log_type_t.error.getter();
                        if (qword_100261948 != -1) {
                          goto LABEL_142;
                        }
                        break;
                    }
                    break;
                  }
LABEL_106:
                  sub_1000AA024((uint64_t *)&unk_100262110);
                  uint64_t v176 = swift_allocObject();
                  *(_OWORD *)(v176 + 16) = xmmword_1001D0A20;
                  *(void *)(v176 + 56) = &type metadata for UInt16;
                  *(void *)(v176 + 64) = &protocol witness table for UInt16;
                  *(_WORD *)(v176 + 32) = v1;
                  unint64_t v13 = v176;
                  uint64_t v177 = 0;
                  switch((int)v181)
                  {
                    case 1:
                      LODWORD(v177) = HIDWORD(v5) - v5;
                      if (__OFSUB__(HIDWORD(v5), v5)) {
                        goto LABEL_146;
                      }
                      uint64_t v177 = (int)v177;
LABEL_111:
                      *(void *)(v176 + 96) = &type metadata for Int;
                      *(void *)(v176 + 104) = &protocol witness table for Int;
                      *(void *)(v176 + 72) = v177;
                      os_log(_:dso:log:_:_:)();
                      swift_bridgeObjectRelease();
                      break;
                    case 2:
                      uint64_t v179 = *(void *)(v5 + 16);
                      uint64_t v178 = *(void *)(v5 + 24);
                      BOOL v11 = __OFSUB__(v178, v179);
                      uint64_t v177 = v178 - v179;
                      if (!v11) {
                        goto LABEL_111;
                      }
                      goto LABEL_147;
                    case 3:
                      goto LABEL_111;
                    default:
                      uint64_t v177 = BYTE6(v6);
                      goto LABEL_111;
                  }
LABEL_112:
                  sub_1000AA8F0(v224, v225);
                  return (void *)v226;
                }
                goto LABEL_165;
              }
            }
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __DataStorage._length.getter();
            __break(1u);
LABEL_149:
            __DataStorage._length.getter();
            __break(1u);
LABEL_150:
            __DataStorage._length.getter();
            __break(1u);
LABEL_151:
            __DataStorage._length.getter();
            __break(1u);
LABEL_152:
            __DataStorage._length.getter();
            __break(1u);
LABEL_153:
            __DataStorage._length.getter();
            __break(1u);
LABEL_154:
            __DataStorage._length.getter();
            __break(1u);
LABEL_155:
            __DataStorage._length.getter();
            __break(1u);
LABEL_156:
            __DataStorage._length.getter();
            __break(1u);
LABEL_157:
            __DataStorage._length.getter();
            __break(1u);
LABEL_158:
            __DataStorage._length.getter();
            __break(1u);
LABEL_159:
            __DataStorage._length.getter();
            __break(1u);
LABEL_160:
            __DataStorage._length.getter();
            __break(1u);
LABEL_161:
            __DataStorage._length.getter();
            __break(1u);
LABEL_162:
            __DataStorage._length.getter();
            __break(1u);
LABEL_163:
            __DataStorage._length.getter();
            __break(1u);
LABEL_164:
            sub_1000AA8F0(v1, v13);
LABEL_165:
            __break(1u);
LABEL_166:
            __DataStorage._length.getter();
            __break(1u);
LABEL_167:
            __DataStorage._length.getter();
            __break(1u);
            JUMPOUT(0x100103230);
          case 2uLL:
            uint64_t v19 = *(void *)(v224 + 16);
            sub_1000AA680(v224, v225);
            swift_retain();
            swift_retain();
            uint64_t v20 = __DataStorage._bytes.getter();
            if (!v20) {
              goto LABEL_166;
            }
            uint64_t v21 = v20;
            uint64_t v22 = __DataStorage._offset.getter();
            BOOL v11 = __OFSUB__(v19, v22);
            uint64_t v23 = v19 - v22;
            if (v11) {
              goto LABEL_144;
            }
            __DataStorage._length.getter();
            uint64_t v24 = *(unsigned __int16 *)(v21 + v23);
            swift_release();
            swift_release();
            sub_1000AA8F0(v1, v13);
            uint64_t v1 = v24;
            goto LABEL_16;
          case 3uLL:
            goto LABEL_164;
          default:
            sub_1000AA8F0(v224, v225);
            goto LABEL_16;
        }
      }
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(v5 + 16);
      uint64_t v9 = *(void *)(v5 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_141;
    case 3uLL:
      return result;
    default:
      uint64_t v8 = BYTE6(v6);
      goto LABEL_6;
  }
}

uint64_t type metadata accessor for LegacyMagicPairingSettingsRecords()
{
  uint64_t result = qword_100262BC8;
  if (!qword_100262BC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10010333C()
{
  uint64_t v0 = sub_1000AA024((uint64_t *)&unk_100261A00);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA068(v7, qword_10026AD38);
  sub_1000AA0CC(v3, (uint64_t)qword_10026AD38);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

uint64_t sub_100103500()
{
  uint64_t v135 = type metadata accessor for LegacyMagicPairingSettingsRecords();
  __chkstk_darwin(v135);
  uint64_t v2 = (char *)&v124 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v132 = (char *)&v124 - v4;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v133 = *(void *)(v5 - 8);
  uint64_t v134 = v5;
  __chkstk_darwin(v5);
  uint64_t v125 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  __int16 v129 = (char *)&v124 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v124 - v13;
  __chkstk_darwin(v15);
  uint64_t v131 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v124 - v16);
  id v17 = sub_1000B6AA8();
  uint64_t v136 = v0;
  id v137 = v17;
  unint64_t v18 = (unint64_t)sub_100101DD0();
  unint64_t v19 = v18;
  v140._uint64_t countAndFlagsBits = 0;
  v140._object = (void *)0xE000000000000000;
  unint64_t v20 = v18 >> 62;
  unint64_t v130 = v2;
  uint64_t v127 = v14;
  unint64_t v128 = v9;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v21 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v21) {
      goto LABEL_10;
    }
  }
  if (v21 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v23 = 0;
  do
  {
    if ((v19 & 0xC000000000000001) != 0) {
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v24 = *(id *)(v19 + 8 * v23 + 32);
    }
    uint64_t v25 = v24;
    ++v23;
    id v26 = [v24 description];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    v30._uint64_t countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0x2D2D2D2D2D2D0ALL;
    v31._object = (void *)0xE700000000000000;
    String.append(_:)(v31);
    v32._uint64_t countAndFlagsBits = 10;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
  }
  while (v21 != v23);
LABEL_10:
  swift_bridgeObjectRelease();
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v33 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v34 = (uint64_t)v127;
  uint64_t v35 = swift_bridgeObjectRelease();
  if (v33 >= 2)
  {
    sub_100103F2C(v35);
    swift_bridgeObjectRelease();
  }
  uint64_t v138 = 0;
  unint64_t v139 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v36._object = (void *)0x80000001001FA670;
  v36._uint64_t countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v36);
  type metadata accessor for UUID();
  sub_100106B5C((unint64_t *)&unk_100261A20, (void (*)(uint64_t))&type metadata accessor for UUID);
  v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 0x616261746164202CLL;
  v38._object = (void *)0xEC000000203A6573;
  String.append(_:)(v38);
  uint64_t v39 = Data.subdata(in:)();
  unint64_t v41 = v40;
  uint64_t v42 = Data.hexString.getter(v39, v40);
  uint64_t v44 = v43;
  sub_1000AA8F0(v39, v41);
  v45._uint64_t countAndFlagsBits = v42;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  unint64_t v46 = v139;
  uint64_t v126 = v138;
  uint64_t v138 = 0;
  unint64_t v139 = 0xE000000000000000;
  _StringGuts.grow(_:)(60);
  v47._uint64_t countAndFlagsBits = 0x7461657263202020;
  v47._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v47);
  id v48 = [v137 creationDate];
  if (v48)
  {
    uint64_t v49 = v48;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v50 = v133;
    unint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56);
    uint64_t v52 = v34;
    uint64_t v53 = 0;
  }
  else
  {
    uint64_t v50 = v133;
    unint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56);
    uint64_t v52 = v34;
    uint64_t v53 = 1;
  }
  uint64_t v54 = v134;
  v51(v52, v53, 1, v134);
  uint64_t v55 = (uint64_t)v131;
  uint64_t v56 = (uint64_t)v132;
  sub_1000AA798(v34, (uint64_t)v131);
  int v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  uint64_t v58 = &selRef_lastConnectTime;
  if (v57(v55, 1, v54))
  {
    sub_1000BFE50(v55);
    sub_1001064F4(v136, v56);
LABEL_20:
    uint64_t v59 = self;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v61 = [v59 v58[230]:isa:2:2];

    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;

    goto LABEL_22;
  }
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v131 = v51;
  uint64_t v66 = v125;
  v65(v125, v55, v54);
  sub_1000BFE50(v55);
  unint64_t v67 = v46;
  uint64_t v68 = v54;
  uint64_t v69 = self;
  Class v70 = Date._bridgeToObjectiveC()().super.isa;
  id v71 = [v69 localizedStringFromDate:v70 dateStyle:2 timeStyle:2];

  uint64_t v72 = v50;
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v73;

  uint64_t v58 = &selRef_lastConnectTime;
  uint64_t v74 = v66;
  uint64_t v75 = v68;
  unint64_t v46 = v67;
  unint64_t v51 = v131;
  uint64_t v56 = (uint64_t)v132;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v75);
  sub_1001064F4(v136, v56);
  if (!v64) {
    goto LABEL_20;
  }
LABEL_22:
  uint64_t v76 = (uint64_t)v128;
  sub_100106558(v56);
  v77._uint64_t countAndFlagsBits = v62;
  v77._object = v64;
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  v78._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v78._object = (void *)0xEE00203A6E4F6465;
  String.append(_:)(v78);
  id v79 = v137;
  id v80 = [v137 modificationDate];
  if (v80)
  {
    uint64_t v81 = v80;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v82 = 0;
  }
  else
  {
    uint64_t v82 = 1;
  }
  uint64_t v84 = v133;
  uint64_t v83 = v134;
  uint64_t v85 = (uint64_t)v129;
  v51(v76, v82, 1, v134);
  sub_1000AA798(v76, v85);
  if (v57(v85, 1, v83))
  {
    sub_1000BFE50(v85);
    uint64_t v86 = (uint64_t)v130;
    sub_1001064F4(v136, (uint64_t)v130);
  }
  else
  {
    unint64_t v93 = v125;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v125, v85, v83);
    sub_1000BFE50(v85);
    uint64_t v94 = v83;
    uint64_t v95 = self;
    Class v96 = Date._bridgeToObjectiveC()().super.isa;
    id v97 = [v95 localizedStringFromDate:v96 dateStyle:2 timeStyle:2];

    uint64_t v98 = v84;
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v92 = v99;

    (*(void (**)(char *, uint64_t))(v98 + 8))(v93, v94);
    uint64_t v86 = (uint64_t)v130;
    sub_1001064F4(v136, (uint64_t)v130);
    if (v92) {
      goto LABEL_29;
    }
  }
  uint64_t v87 = self;
  Class v88 = Date._bridgeToObjectiveC()().super.isa;
  id v89 = [v87 localizedStringFromDate:v88 dateStyle:2 timeStyle:2];

  uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v92 = v91;

LABEL_29:
  sub_100106558(v86);
  v100._uint64_t countAndFlagsBits = v90;
  v100._object = v92;
  String.append(_:)(v100);
  swift_bridgeObjectRelease();
  v101._uint64_t countAndFlagsBits = 0x696669646F6D202CLL;
  v101._object = (void *)0xEF203A7962206465;
  String.append(_:)(v101);
  id v102 = [v79 modifiedByDevice];
  if (v102)
  {
    uint64_t v103 = v102;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v106 = v105;
  }
  else
  {
    unint64_t v106 = (void *)0xE200000000000000;
    uint64_t v104 = 15932;
  }
  v107._uint64_t countAndFlagsBits = v104;
  v107._object = v106;
  String.append(_:)(v107);
  swift_bridgeObjectRelease();
  v108._uint64_t countAndFlagsBits = 0x203A67617465202CLL;
  v108._object = (void *)0xE800000000000000;
  String.append(_:)(v108);
  id v109 = [v79 recordChangeTag];
  if (v109)
  {
    uint64_t v110 = v109;
    uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v113 = v112;
  }
  else
  {
    uint64_t v113 = (void *)0xE200000000000000;
    uint64_t v111 = 15932;
  }
  v114._uint64_t countAndFlagsBits = v111;
  v114._object = v113;
  String.append(_:)(v114);
  swift_bridgeObjectRelease();
  v115._uint64_t countAndFlagsBits = 10;
  v115._object = (void *)0xE100000000000000;
  String.append(_:)(v115);
  uint64_t v116 = v138;
  unint64_t v117 = (void *)v139;
  uint64_t v138 = v126;
  unint64_t v139 = v46;
  swift_bridgeObjectRetain();
  v118._uint64_t countAndFlagsBits = v116;
  v118._object = v117;
  String.append(_:)(v118);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v120 = v138;
  unint64_t v119 = v139;
  uint64_t v138 = 10;
  unint64_t v139 = 0xE100000000000000;
  String.append(_:)(v140);
  swift_bridgeObjectRelease();
  uint64_t v121 = v138;
  uint64_t v122 = (void *)v139;
  uint64_t v138 = v120;
  unint64_t v139 = v119;
  swift_bridgeObjectRetain();
  v123._uint64_t countAndFlagsBits = v121;
  v123._object = v122;
  String.append(_:)(v123);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v138;
}

uint64_t sub_100103F2C(uint64_t a1)
{
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((*v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v2 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return String.remove(at:)(a1);
  }
LABEL_5:
  a1 = String.index(before:)();

  return String.remove(at:)(a1);
}

uint64_t sub_100103F94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v4 - 8);
  id v79 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v83 = (char *)&v74 - v7;
  __chkstk_darwin(v8);
  uint64_t v86 = (char *)&v74 - v9;
  uint64_t v10 = type metadata accessor for Date();
  id v89 = *(void **)(v10 - 8);
  uint64_t v90 = v10;
  __chkstk_darwin(v10);
  uint64_t v82 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v84 = (char *)&v74 - v13;
  uint64_t v14 = sub_1000AA024(&qword_100262C48);
  uint64_t v87 = *(void *)(v14 - 8);
  uint64_t v88 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v17 - 8);
  unint64_t v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = (int *)type metadata accessor for LegacyMagicPairingSettingsRecords();
  __chkstk_darwin(v20);
  uint64_t v80 = (uint64_t)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v81 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v74 - v23);
  __chkstk_darwin(v24);
  id v26 = (char *)&v74 - v25;
  UUID.init(uuidString:)();
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v27);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v19, v27);
    uint64_t v30 = a1[3];
    uint64_t v91 = a1;
    sub_1000ABF58(a1, v30);
    sub_100106B08();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    if (v2)
    {
      sub_1000ABFF0((uint64_t)v91);
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    }
    char v93 = 2;
    sub_1000AC040();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v31 = v92[1];
    Swift::String v32 = &v26[v20[6]];
    id v77 = v92[1];
    id v78 = v92[0];
    *(id *)Swift::String v32 = v92[0];
    *((void *)v32 + 1) = v31;
    char v93 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v26[v20[5]] = *(_OWORD *)v92;
    uint64_t v33 = &v26[v20[7]];
    uint64_t v75 = (uint64_t *)v32;
    uint64_t v76 = v33;
    static Date.now.getter();
    LOBYTE(v92[0]) = 3;
    sub_100106B5C(&qword_100261C10, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v34 = v16;
    uint64_t v35 = v90;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v74 = v34;
    Swift::String v36 = v89;
    Swift::String v37 = (unsigned int (*)(char *, uint64_t, uint64_t))v89[6];
    Swift::String v38 = v86;
    if (v37(v86, 1, v35) != 1)
    {
      uint64_t v56 = v35;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v74, v88);
      uint64_t v54 = v84;
      ((void (*)(char *, char *, uint64_t))v36[4])(v84, v38, v35);
      uint64_t v57 = (uint64_t)v91;
      uint64_t v58 = v85;
      uint64_t v60 = v76;
LABEL_22:
      ((void (*)(char *, char *, uint64_t))v36[5])(v60, v54, v56);
      sub_1001064F4((uint64_t)v26, v58);
      sub_1000ABFF0(v57);
      return sub_100106558((uint64_t)v26);
    }
    unint64_t v41 = (unint64_t)v77;
    uint64_t v40 = (uint64_t)v78;
    sub_1000AA680((uint64_t)v78, (unint64_t)v77);
    Class isa = sub_100130420(v40, v41);
    sub_1000AA8F0(v40, v41);
    uint64_t v43 = v81;
    sub_1001064F4((uint64_t)v26, (uint64_t)v81);
    if (!isa) {
      Class isa = sub_1000B4720((uint64_t)v43).super.isa;
    }
    sub_100106558((uint64_t)v43);
    uint64_t v81 = v37;
    v92[0] = isa;
    sub_1001051C0(v92);
    id v44 = [isa modificationDate];

    if (v44)
    {
      Swift::String v45 = v82;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v46 = v89;
      Swift::String v47 = (void (*)(uint64_t, char *, uint64_t))v89[4];
      uint64_t v48 = (uint64_t)v83;
      uint64_t v49 = v45;
      uint64_t v50 = v90;
      v47((uint64_t)v83, v49, v90);
      unint64_t v51 = (void (*)(uint64_t, void, uint64_t, uint64_t))v46[7];
      v51(v48, 0, 1, v50);
      unsigned int v52 = v81((char *)v48, 1, v50);
      uint64_t v53 = v75;
      if (v52 != 1)
      {
        (*(void (**)(char *, uint64_t))(v87 + 8))(v74, v88);
        uint64_t v54 = v84;
        uint64_t v55 = v90;
        v47((uint64_t)v84, v83, v90);
        uint64_t v56 = v55;
        uint64_t v57 = (uint64_t)v91;
        Swift::String v36 = v89;
        uint64_t v58 = v85;
        uint64_t v59 = (uint64_t)v86;
LABEL_21:
        uint64_t v60 = v76;
        sub_1000BFE50(v59);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v51 = (void (*)(uint64_t, void, uint64_t, uint64_t))v89[7];
      v51((uint64_t)v83, 1, 1, v90);
      uint64_t v53 = v75;
    }
    uint64_t v63 = *v53;
    unint64_t v62 = v53[1];
    sub_1000AA680(*v53, v62);
    uint64_t v64 = sub_100130420(v63, v62);
    sub_1000AA8F0(v63, v62);
    uint64_t v65 = v80;
    sub_1001064F4((uint64_t)v26, v80);
    if (!v64) {
      uint64_t v64 = sub_1000B4720(v65).super.isa;
    }
    sub_100106558(v65);
    v92[0] = v64;
    sub_1001051C0(v92);
    id v66 = [v64 creationDate];

    uint64_t v59 = (uint64_t)v86;
    if (v66)
    {
      unint64_t v67 = v82;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v68 = (void (*)(char *, char *, uint64_t))v89[4];
      uint64_t v69 = v79;
      Class v70 = v67;
      uint64_t v56 = v90;
      v68(v79, v70, v90);
      v51((uint64_t)v69, 0, 1, v56);
      uint64_t v71 = (uint64_t)v69;
      unsigned int v72 = v81(v69, 1, v56);
      uint64_t v58 = v85;
      if (v72 != 1)
      {
        (*(void (**)(char *, uint64_t))(v87 + 8))(v74, v88);
        uint64_t v54 = v84;
        v68(v84, (char *)v71, v56);
LABEL_20:
        uint64_t v57 = (uint64_t)v91;
        sub_1000BFE50((uint64_t)v83);
        Swift::String v36 = v89;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v56 = v90;
      uint64_t v73 = v79;
      v51((uint64_t)v79, 1, 1, v90);
      uint64_t v71 = (uint64_t)v73;
      uint64_t v58 = v85;
    }
    uint64_t v54 = v84;
    static Date.now.getter();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v74, v88);
    sub_1000BFE50(v71);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_100104984@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000AA024(&qword_100261D90);
  __chkstk_darwin(v4 - 8);
  uint64_t v60 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v64 = (char *)&v56 - v7;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v8 - 8);
  uint64_t v63 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v61 = (char *)&v56 - v12;
  uint64_t v13 = sub_1000AA024(&qword_100261EA0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    goto LABEL_33;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v15, v16);
  if (CKRecord.recordType.getter() == 0xD000000000000011 && v18 == 0x80000001001F74F0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      sub_1001065B4();
      swift_allocError();
      unsigned char *v27 = 0;
      swift_willThrow();
LABEL_19:

      return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
    }
  }
  id v20 = [a1 encryptedValues];
  uint64_t v21 = a2;
  NSString v22 = String._bridgeToObjectiveC()();
  id v65 = v20;
  id v23 = [v20 objectForKeyedSubscript:v22];

  a2 = v21;
  if (!v23 || (id v68 = v23, sub_1000AA024(&qword_1002629D0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_16:
    static os_log_type_t.error.getter();
    if (qword_100261948 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1001CFDB0;
    *(void *)(v31 + 56) = sub_1000AA854();
    *(void *)(v31 + 64) = sub_100106B5C((unint64_t *)&qword_100261A40, (void (*)(uint64_t))sub_1000AA854);
    *(void *)(v31 + 32) = a1;
    id v32 = a1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1001065B4();
    swift_allocError();
    *uint64_t v33 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_19;
  }
  uint64_t v25 = v66;
  unint64_t v24 = v67;
  switch(v67 >> 62)
  {
    case 1uLL:
      LODWORD(v26) = HIDWORD(v66) - v66;
      if (__OFSUB__(HIDWORD(v66), v66))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        JUMPOUT(0x1001051B0);
      }
      uint64_t v26 = (int)v26;
LABEL_14:
      if (v26 <= 153)
      {
LABEL_15:
        sub_1000AA8F0(v66, v67);
        goto LABEL_16;
      }
      uint64_t v59 = (int *)type metadata accessor for LegacyMagicPairingSettingsRecords();
      uint64_t v35 = (uint64_t *)(v21 + v59[5]);
      *uint64_t v35 = v25;
      v35[1] = v24;
      id v36 = objc_allocWithZone((Class)NSKeyedArchiver);
      uint64_t v37 = v25;
      id v38 = v36;
      uint64_t v57 = v37;
      unint64_t v58 = v24;
      sub_1000AA680(v37, v24);
      id v39 = [v38 initRequiringSecureCoding:1];
      [a1 encodeSystemFieldsWithCoder:v39];
      [v39 finishEncoding];
      id v40 = [v39 encodedData];
      uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      id v44 = (uint64_t *)(v21 + v59[6]);
      *id v44 = v41;
      v44[1] = v43;
      id v45 = [a1 modificationDate];
      if (!v45)
      {
        uint64_t v48 = v62;
        uint64_t v47 = v63;
        uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
        v56((uint64_t)v64, 1, 1, v63);
LABEL_24:
        id v52 = [a1 creationDate];
        unint64_t v51 = v61;
        if (v52)
        {
          uint64_t v53 = v52;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v54 = *(void (**)(void))(v48 + 32);
          uint64_t v55 = (uint64_t)v60;
          v54();
          v56(v55, 0, 1, v47);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v55, 1, v47) != 1)
          {
            swift_unknownObjectRelease();

            sub_1000AA8F0(v57, v58);
            ((void (*)(char *, uint64_t, uint64_t))v54)(v51, v55, v47);
LABEL_29:
            sub_1000BFE50((uint64_t)v64);
            uint64_t v49 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v48 + 32);
            return v49(v21 + v59[7], v51, v47);
          }
        }
        else
        {
          uint64_t v55 = (uint64_t)v60;
          v56((uint64_t)v60, 1, 1, v47);
        }
        static Date.now.getter();

        sub_1000AA8F0(v57, v58);
        swift_unknownObjectRelease();
        sub_1000BFE50(v55);
        goto LABEL_29;
      }
      unint64_t v46 = v45;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v48 = v62;
      uint64_t v47 = v63;
      uint64_t v49 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v62 + 32);
      uint64_t v50 = (uint64_t)v64;
      v49((uint64_t)v64, v10, v63);
      uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
      v56(v50, 0, 1, v47);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v50, 1, v47) == 1) {
        goto LABEL_24;
      }
      swift_unknownObjectRelease();

      sub_1000AA8F0(v57, v58);
      unint64_t v51 = v61;
      v49((uint64_t)v61, v64, v47);
      return v49(v21 + v59[7], v51, v47);
    case 2uLL:
      uint64_t v29 = *(void *)(v66 + 16);
      uint64_t v28 = *(void *)(v66 + 24);
      BOOL v30 = __OFSUB__(v28, v29);
      uint64_t v26 = v28 - v29;
      if (!v30) {
        goto LABEL_14;
      }
      goto LABEL_32;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v26 = BYTE6(v67);
      goto LABEL_14;
  }
}

uint64_t sub_1001051C0(id *a1)
{
  static os_log_type_t.debug.getter();
  if (qword_100261948 != -1) {
    swift_once();
  }
  sub_1000AA024((uint64_t *)&unk_100262110);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1001CFDB0;
  id v4 = *a1;
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1000AA5E0();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v9 = [v4 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v10 = (uint64_t *)(v1 + *(int *)(type metadata accessor for LegacyMagicPairingSettingsRecords() + 20));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_1000AA680(*v10, v12);
  if (v16 >> 60 == 15)
  {
    sub_1000BFEB0(v15, v16);
    sub_1000BFEB0(v11, v12);
LABEL_6:
    sub_1000AA680(v11, v12);
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  sub_1000BFEC4(v15, v16);
  char v13 = sub_1000E4B6C(v15, v16, v11, v12);
  sub_1000AA8F0(v11, v12);
  sub_1000BFEB0(v15, v16);
  sub_1000BFEB0(v15, v16);
  if ((v13 & 1) == 0) {
    goto LABEL_6;
  }
  return swift_unknownObjectRelease();
}

void sub_100105420()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = v1 >> 62;
  switch(v1 >> 62)
  {
    case 1uLL:
      if (!((v2 ^ (unint64_t)(v2 << 32)) >> 32)) {
        return;
      }
      goto LABEL_8;
    case 2uLL:
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      if (v4 == v5) {
        return;
      }
      if (v3 != 2)
      {
LABEL_8:
        uint64_t v4 = (int)v2;
        uint64_t v5 = v2 >> 32;
      }
      break;
    case 3uLL:
      return;
    default:
      if ((v1 & 0xFF000000000000) == 0) {
        return;
      }
      uint64_t v4 = 0;
      uint64_t v5 = BYTE6(v1);
      break;
  }
  uint64_t v6 = v5 - 1;
  if (__OFSUB__(v5, 1)) {
    goto LABEL_53;
  }
  if (v4 < v6)
  {
    while (1)
    {
      uint64_t v8 = *v0;
      unint64_t v7 = v0[1];
      switch(v7 >> 62)
      {
        case 1uLL:
          uint64_t v9 = (int)v8;
          uint64_t v10 = v8 >> 32;
          if (v4 >= v10 || v4 < v9) {
            goto LABEL_43;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_55;
          }
          if (__OFSUB__(v4, __DataStorage._offset.getter())) {
            goto LABEL_46;
          }
          if (v6 >= v10 || v6 < v9) {
            goto LABEL_48;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_56;
          }
          if (!__OFSUB__(v6, __DataStorage._offset.getter())) {
            goto LABEL_12;
          }
          goto LABEL_50;
        case 2uLL:
          if (v4 < *(void *)(v8 + 16)) {
            goto LABEL_44;
          }
          if (v4 >= *(void *)(v8 + 24)) {
            goto LABEL_47;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_57;
          }
          if (__OFSUB__(v4, __DataStorage._offset.getter())) {
            goto LABEL_49;
          }
          if (v6 < *(void *)(v8 + 16)) {
            goto LABEL_51;
          }
          if (v6 >= *(void *)(v8 + 24)) {
            goto LABEL_52;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_58;
          }
          if (!__OFSUB__(v6, __DataStorage._offset.getter())) {
            goto LABEL_12;
          }
          __break(1u);
          return;
        case 3uLL:
          goto LABEL_54;
        default:
          if (v4 >= BYTE6(v7))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
          }
          if (v6 >= BYTE6(v7)) {
            goto LABEL_45;
          }
LABEL_12:
          Data._Representation.subscript.setter();
          Data._Representation.subscript.setter();
          if (++v4 >= --v6) {
            return;
          }
          break;
      }
    }
  }
}

uint64_t sub_100105750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_100106368(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_1001062EC(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x1001058D0);
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_1000AA8F0(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_100105900(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000AA024(&qword_100262C30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000ABF58(a1, a1[3]);
  sub_100106B08();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_100106B5C(&qword_100262590, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for LegacyMagicPairingSettingsRecords();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v9 + 20));
    char v12 = 1;
    sub_1000AC094();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v9 + 24));
    char v12 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for Date();
    sub_100106B5C(&qword_100261C30, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100105B8C()
{
  unint64_t result = 0x696669746E656469;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x74654D64756F6C63;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100105C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100106DB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100105C60(uint64_t a1)
{
  unint64_t v2 = sub_100106B08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100105C9C(uint64_t a1)
{
  unint64_t v2 = sub_100106B08();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100105CD8()
{
  return 0xD000000000000011;
}

unint64_t sub_100105CF4()
{
  return 0xD000000000000024;
}

Swift::Int sub_100105D14(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100106B5C((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(a1 + 20));
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_1000AA680(*v3, v5);
  Data.hash(into:)();
  sub_1000AA8F0(v4, v5);
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_1000AA680(*v6, v8);
  Data.hash(into:)();
  sub_1000AA8F0(v7, v8);
  type metadata accessor for Date();
  sub_100106B5C(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100105E68(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  sub_100106B5C((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  sub_1000AA680(*v4, v6);
  Data.hash(into:)();
  sub_1000AA8F0(v5, v6);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000AA680(*v7, v9);
  Data.hash(into:)();
  sub_1000AA8F0(v8, v9);
  type metadata accessor for Date();
  sub_100106B5C(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_100105FAC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100106B5C((unint64_t *)&unk_100262200, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  sub_1000AA680(*v4, v6);
  Data.hash(into:)();
  sub_1000AA8F0(v5, v6);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(a2 + 24));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000AA680(*v7, v9);
  Data.hash(into:)();
  sub_1000AA8F0(v8, v9);
  type metadata accessor for Date();
  sub_100106B5C(&qword_100261C70, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100106100@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100103F94(a1, a2);
}

uint64_t sub_100106118(void *a1)
{
  return sub_100105900(a1);
}

void *sub_100106130(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_1000AA024((uint64_t *)&unk_100262B50);
          uint64_t v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_1000AA680(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_1000AA8F0(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1001062DCLL);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1001062EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x100106358);
  }
  return result;
}

uint64_t sub_100106368(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x100106434);
  }
  return result;
}

uint64_t sub_100106454(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3) {
      return static String._fromUTF8Repairing(_:)();
    }
    uint64_t v4 = 0;
    uint64_t v5 = v1 - 1;
    uint64_t v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++)) {
        return static String._fromUTF8Repairing(_:)();
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_10010649C()
{
  unint64_t result = qword_100262B40;
  if (!qword_100262B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262B40);
  }
  return result;
}

uint64_t sub_1001064F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LegacyMagicPairingSettingsRecords();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100106558(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LegacyMagicPairingSettingsRecords();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001065B4()
{
  unint64_t result = qword_100262B60;
  if (!qword_100262B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262B60);
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError()
{
  return &type metadata for LegacyMagicPairingSettingsRecords.LegacyMagicPairingSettingsRecordsError;
}

uint64_t sub_10010661C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100106630);
}

uint64_t sub_100106630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 12)
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    size_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_10010676C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100106780);
}

uint64_t sub_100106780(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 12)
  {
    uint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    *uint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 28);
    return v13(v15, a2, a2, v14);
  }
  return result;
}

uint64_t sub_1001068B8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_10010698C(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = sub_100106B5C(&qword_100262C08, (void (*)(uint64_t))type metadata accessor for LegacyMagicPairingSettingsRecords);
  uint64_t result = sub_100106B5C(&qword_100262C10, (void (*)(uint64_t))type metadata accessor for LegacyMagicPairingSettingsRecords);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100106A10()
{
  return sub_100106B5C(&qword_100262C18, (void (*)(uint64_t))type metadata accessor for LegacyMagicPairingSettingsRecords);
}

uint64_t sub_100106A58(uint64_t a1)
{
  uint64_t result = sub_100106B5C(&qword_100262C20, (void (*)(uint64_t))type metadata accessor for LegacyMagicPairingSettingsRecords);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x290], 8) = result;
  return result;
}

unint64_t sub_100106AB4()
{
  unint64_t result = qword_100262C28;
  if (!qword_100262C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262C28);
  }
  return result;
}

unint64_t sub_100106B08()
{
  unint64_t result = qword_100262C38;
  if (!qword_100262C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262C38);
  }
  return result;
}

uint64_t sub_100106B5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s15audioaccessoryd33LegacyMagicPairingSettingsRecordsV38LegacyMagicPairingSettingsRecordsErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100106C70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyMagicPairingSettingsRecords.CodingKeys()
{
  return &type metadata for LegacyMagicPairingSettingsRecords.CodingKeys;
}

unint64_t sub_100106CAC()
{
  unint64_t result = qword_100262C50;
  if (!qword_100262C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262C50);
  }
  return result;
}

unint64_t sub_100106D04()
{
  unint64_t result = qword_100262C58;
  if (!qword_100262C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262C58);
  }
  return result;
}

unint64_t sub_100106D5C()
{
  unint64_t result = qword_100262C60;
  if (!qword_100262C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100262C60);
  }
  return result;
}

uint64_t sub_100106DB0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001001FA750 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001F6D90)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100106F90(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100106FD4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100106FFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100107024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v17 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v29 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v17) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v16 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v17) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v16 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v17) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v16 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v17) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v16 + 8 * v7);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_24:
    sub_1000B67A8(*(void *)(a1 + 48) + 40 * v9, (uint64_t)v26);
    sub_100128C4C(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v27 + 8);
    long long v23 = v27[0];
    long long v24 = v27[1];
    uint64_t v25 = v28;
    long long v21 = v26[0];
    long long v22 = v26[1];
    sub_1000B67A8((uint64_t)&v21, (uint64_t)v19);
    sub_100128C4C((uint64_t)&v23 + 8, (uint64_t)&v20);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      sub_1000B6804((uint64_t)v19);
      sub_100128A88(&qword_100261BD8, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();

      if (v19[0] == 26)
      {
        uint64_t result = swift_release();
        long long v13 = v24;
        *(_OWORD *)(a2 + 32) = v23;
        *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x290], 8) = v13;
        *(void *)(a2 + 64) = v25;
        long long v14 = v22;
        *(_OWORD *)a2 = v21;
        *(_OWORD *)(a2 + 16) = v14;
        return result;
      }
    }
    else
    {
      sub_1000B6804((uint64_t)v19);
    }
    uint64_t result = sub_1000AA894((uint64_t)&v21, &qword_1002631E0);
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v17)
  {
LABEL_27:
    uint64_t result = swift_release();
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x290], 8) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  unint64_t v11 = *(void *)(v16 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v17) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v16 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_10010732C(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v12 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = (uint64_t *)(a3 + 40);
    do
    {
      uint64_t v9 = *v8;
      v11[0] = *(v8 - 1);
      v11[1] = v9;
      swift_bridgeObjectRetain();
      a1(&v10, v11);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += 2;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v12;
  }
  return result;
}

void sub_10010746C(uint64_t a1)
{
  uint64_t v21 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  int64_t v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v6 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v6++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v6 >= v26) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    if (!v11) {
      break;
    }
LABEL_16:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_17:
    uint64_t v13 = *(void *)(a1 + 56);
    id v24 = *(id *)(*(void *)(a1 + 48) + 8 * v9);
    long long v25 = *(_OWORD *)(v13 + 16 * v9);
    id v14 = v24;
    swift_retain();
    sub_10011E840(&v24, &v22);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return;
    }
    swift_release();

    uint64_t v15 = v23;
    if (v23)
    {
      uint64_t v16 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v7 = sub_1001B2DA0(0, v7[2] + 1, 1, v7);
      }
      unint64_t v18 = v7[2];
      unint64_t v17 = v7[3];
      if (v18 >= v17 >> 1) {
        int64_t v7 = sub_1001B2DA0((void *)(v17 > 1), v18 + 1, 1, v7);
      }
      id v7[2] = v18 + 1;
      char v19 = &v7[2 * v18];
      void v19[4] = v16;
      void v19[5] = v15;
    }
  }
  int64_t v12 = v6 + 1;
  if (v6 + 1 >= v26) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11) {
    goto LABEL_15;
  }
  int64_t v12 = v6 + 2;
  if (v6 + 2 >= v26) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11) {
    goto LABEL_15;
  }
  int64_t v12 = v6 + 3;
  if (v6 + 3 >= v26) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11)
  {
LABEL_15:
    int64_t v6 = v12;
    goto LABEL_16;
  }
  int64_t v20 = v6 + 4;
  if (v6 + 4 >= v26)
  {
LABEL_31:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v20);
  v6 += 4;
  if (v11) {
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v6 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v6 >= v26) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    ++v20;
    if (v11) {
      goto LABEL_16;
    }
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1001076F4(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  int64_t v7 = _swiftEmptyArrayStorage;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v8 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    swift_retain();
    id v14 = [v13 recordName];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    swift_release();

    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1001B2DA0(0, v7[2] + 1, 1, v7);
      int64_t v7 = (void *)result;
    }
    unint64_t v19 = v7[2];
    unint64_t v18 = v7[3];
    if (v19 >= v18 >> 1)
    {
      uint64_t result = (uint64_t)sub_1001B2DA0((void *)(v18 > 1), v19 + 1, 1, v7);
      int64_t v7 = (void *)result;
    }
    id v7[2] = v19 + 1;
    int64_t v20 = &v7[2 * v19];
    v20[4] = v15;
    v20[5] = v17;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v22) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v22) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v22) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v21 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 3;
          if (v10 + 3 >= v22) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v21 + 8 * v6);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v22)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v7;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11)
  {
    int64_t v6 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v6 >= v22) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

unint64_t sub_100107954(unint64_t a1)
{
  switch(a1)
  {
    case 0uLL:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v3;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v4 = 0x206E776F6E6B6E55;
      unint64_t v5 = 0xED0000726F727245;
      goto LABEL_10;
    case 1uLL:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v12;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v4 = 0xD000000000000014;
      id v13 = "No Account Available";
      goto LABEL_9;
    case 2uLL:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v14;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v4 = 0xD000000000000015;
      id v13 = "Manatee not available";
      goto LABEL_9;
    case 3uLL:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v15;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v4 = 0xD000000000000016;
      id v13 = "Retry Attempts Expired";
      goto LABEL_9;
    case 4uLL:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v16;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v4 = 0xD000000000000018;
      id v13 = "No CloudKit Zone Defined";
      goto LABEL_9;
    case 5uLL:
      sub_1000AA024(&qword_100262400);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001CFDB0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v17;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v4 = 0xD000000000000013;
      id v13 = "Operation cancelled";
LABEL_9:
      unint64_t v5 = (unint64_t)(v13 - 32) | 0x8000000000000000;
LABEL_10:
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x290], 8) = v4;
      *(void *)(inited + 56) = v5;
      unint64_t v11 = sub_1000AF7C0(inited);
      break;
    default:
      sub_1000AA024(&qword_100262400);
      uint64_t v6 = swift_initStackObject();
      *(_OWORD *)(v6 + 16) = xmmword_1001D0A20;
      *(void *)(v6 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v6 + 40) = v7;
      swift_errorRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      swift_errorRetain();
      sub_1000AA024(&qword_100261D60);
      v8._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      *(void *)(v6 + 72) = &type metadata for String;
      *(void *)(v6 + 4_Block_object_dispose(&STACK[0x290], 8) = 0xD000000000000019;
      *(void *)(v6 + 56) = 0x80000001001FD4D0;
      *(void *)(v6 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v6 + 8_Block_object_dispose(&STACK[0x290], 8) = v9;
      swift_getErrorValue();
      *(void *)(v6 + 120) = v19;
      int64_t v10 = sub_1000F8B34((uint64_t *)(v6 + 96));
      (*(void (**)(uint64_t *))(*(void *)(v19 - 8) + 16))(v10);
      unint64_t v11 = sub_1000AF7C0(v6);
      sub_10012A414(a1);
      break;
  }
  return v11;
}

unint64_t sub_100107D5C()
{
  return sub_100107954(*v0);
}

uint64_t sub_100107D64(uint64_t a1)
{
  unint64_t v2 = sub_10012A3C0();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100107DA0(uint64_t a1)
{
  unint64_t v2 = sub_10012A3C0();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100107E48()
{
  uint64_t v1 = type metadata accessor for CloudCoordinatorConfiguration();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v5._uint64_t countAndFlagsBits = 0xD000000000000020;
  v5._object = (void *)0x80000001001FD480;
  String.append(_:)(v5);
  uint64_t v6 = v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
  uint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration + *(int *)(v2 + 32));
  uint64_t v8 = *v7;
  uint64_t v9 = (void *)v7[1];
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000001001FD4B0;
  v11._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v11);
  sub_1000ED388(v6, (uint64_t)v4);
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v12._uint64_t countAndFlagsBits = 0xD000000000000034;
  v12._object = (void *)0x80000001001F9670;
  String.append(_:)(v12);
  id v13 = (uint64_t *)&v4[*(int *)(v2 + 32)];
  uint64_t v14 = *v13;
  uint64_t v15 = (void *)v13[1];
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0x4449656E6F7A202CLL;
  v17._object = (void *)0xEB00000000203A73;
  String.append(_:)(v17);
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  sub_1000ED3EC((uint64_t)v4);
  return v21;
}

void *sub_1001080EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::String v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = *(void **)(v0 + 16);
  uint64_t v9 = v8;
  if (v8 == (void *)1)
  {
    v15[3] = sub_1000B66A0(0, (unint64_t *)&qword_100263210);
    uint64_t v10 = v1 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    Swift::String v11 = *(Swift::String *)(v10 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration() + 24));
    Swift::String v16 = (void *)0xD000000000000028;
    unint64_t v17 = 0x80000001001FD450;
    String.append(_:)(v11);
    v15[1] = v17;
    v15[2] = v16;
    static DispatchQoS.unspecified.getter();
    Swift::String v16 = _swiftEmptyArrayStorage;
    sub_100128A88((unint64_t *)&unk_100263C90, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    v15[0] = v2;
    sub_1000AA024((uint64_t *)&unk_100263220);
    sub_1000B5E24((unint64_t *)&qword_100263CA0, (uint64_t *)&unk_100263220);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, void))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15[0]);
    uint64_t v9 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    Swift::String v12 = *(void **)(v1 + 16);
    *(void *)(v1 + 16) = v9;
    id v13 = v9;
    sub_100129F80(v12);
  }
  sub_100129F90(v8);
  return v9;
}

uint64_t sub_100108400@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 105);
  return result;
}

uint64_t sub_10010840C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 104);
  return result;
}

id sub_100108418()
{
  uint64_t v1 = OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___container);
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_100261938 != -1) {
      swift_once();
    }
    sub_1000AA024((uint64_t *)&unk_100262110);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1001CFDB0;
    uint64_t v5 = v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator_configuration;
    uint64_t v6 = (uint64_t *)(v5 + *(int *)(type metadata accessor for CloudCoordinatorConfiguration() + 24));
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    *(void *)(v4 + 56) = &type metadata for String;
    *(void *)(v4 + 64) = sub_1000AA5E0();
    *(void *)(v4 + 32) = v8;
    *(void *)(v4 + 40) = v7;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v10 = [self containerWithIdentifier:v9];

    Swift::String v11 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v10;
    id v3 = v10;

    uint64_t v2 = 0;
  }
  id v12 = v2;
  return v3;
}

uint64_t sub_1001085C0()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId);
  if (*(void *)(v0 + OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___privateSubscriptionId + 8))
  {
    uint64_t v2 = *v1;
  }
  else
  {
    *(_OWORD *)uint64_t v1 = xmmword_1001D2D10;
    swift_bridgeObjectRelease();
    uint64_t v2 = 0x2D65746176697270;
  }
  swift_bridgeObjectRetain();
  return v2;
}

id sub_10010863C()
{
  return sub_1001086FC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudPushTriggeredGroup);
}

id sub_100108668()
{
  return sub_1001086FC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___forcedGroup);
}

id sub_100108684()
{
  return sub_1001086FC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudInitialSetupGroup);
}

id sub_1001086AC()
{
  return sub_1001086FC(&OBJC_IVAR____TtC15audioaccessoryd16CloudCoordinator____lazy_storage___cloudUserActionExplicitGroup);
}